
H755_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00027794  0801f1c8  0801f1c8  0002f1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804695c  0804695c  0005695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08046964  08046964  00056964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08046968  08046968  00056968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  0804696c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077fc  24000208  08046b74  00060208  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24007a04  08046b74  00067a04  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08046b74  00070000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00060208  2**0
                  CONTENTS, READONLY
 11 .debug_info   00063bd4  00000000  00000000  00060236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a692  00000000  00000000  000c3e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002988  00000000  00000000  000ce4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000027b8  00000000  00000000  000d0e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b995  00000000  00000000  000d35e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00042762  00000000  00000000  0011ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ad23f  00000000  00000000  001616d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0030e916  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000bd20  00000000  00000000  0030e96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f1b0 	.word	0x0801f1b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0801f1b0 	.word	0x0801f1b0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <SystemInit+0x104>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a3e      	ldr	r2, [pc, #248]	; (80007ac <SystemInit+0x104>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <SystemInit+0x104>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <SystemInit+0x104>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <SystemInit+0x108>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d807      	bhi.n	80006e4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d4:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <SystemInit+0x108>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f023 030f 	bic.w	r3, r3, #15
 80006dc:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <SystemInit+0x108>)
 80006de:	f043 0307 	orr.w	r3, r3, #7
 80006e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <SystemInit+0x10c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a32      	ldr	r2, [pc, #200]	; (80007b4 <SystemInit+0x10c>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f0:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <SystemInit+0x10c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <SystemInit+0x10c>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	492e      	ldr	r1, [pc, #184]	; (80007b4 <SystemInit+0x10c>)
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <SystemInit+0x110>)
 80006fe:	4013      	ands	r3, r2
 8000700:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemInit+0x108>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	2b00      	cmp	r3, #0
 800070c:	d007      	beq.n	800071e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemInit+0x108>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f023 030f 	bic.w	r3, r3, #15
 8000716:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <SystemInit+0x108>)
 8000718:	f043 0307 	orr.w	r3, r3, #7
 800071c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SystemInit+0x10c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SystemInit+0x10c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <SystemInit+0x114>)
 8000734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemInit+0x10c>)
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemInit+0x118>)
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <SystemInit+0x10c>)
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemInit+0x11c>)
 8000740:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <SystemInit+0x10c>)
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <SystemInit+0x11c>)
 800074c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <SystemInit+0x10c>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <SystemInit+0x10c>)
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <SystemInit+0x11c>)
 8000758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <SystemInit+0x10c>)
 800075c:	2200      	movs	r2, #0
 800075e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <SystemInit+0x10c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <SystemInit+0x10c>)
 8000766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x10c>)
 800076e:	2200      	movs	r2, #0
 8000770:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <SystemInit+0x120>)
 8000774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <SystemInit+0x120>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <SystemInit+0x124>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <SystemInit+0x128>)
 8000784:	4013      	ands	r3, r2
 8000786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800078a:	d202      	bcs.n	8000792 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <SystemInit+0x12c>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <SystemInit+0x130>)
 8000794:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000798:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SystemInit+0x104>)
 800079c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	52002000 	.word	0x52002000
 80007b4:	58024400 	.word	0x58024400
 80007b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007bc:	02020200 	.word	0x02020200
 80007c0:	01ff0000 	.word	0x01ff0000
 80007c4:	01010280 	.word	0x01010280
 80007c8:	580000c0 	.word	0x580000c0
 80007cc:	5c001000 	.word	0x5c001000
 80007d0:	ffff0000 	.word	0xffff0000
 80007d4:	51008108 	.word	0x51008108
 80007d8:	52004000 	.word	0x52004000

080007dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <vApplicationGetIdleTaskMemory+0x2c>)
 80007ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <vApplicationGetIdleTaskMemory+0x30>)
 80007f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	24000224 	.word	0x24000224
 800080c:	24000278 	.word	0x24000278

08000810 <fillData>:
/* Private function prototypes -----------------------------------------------*/
void serve_404(struct netconn *conn);
/* Private functions ---------------------------------------------------------*/

void fillData(struct visualization_data_s *data)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	volatile struct m4_to_m7 * const m4_to_m7_ptr = (struct m4_to_m7 *)(0x30040A00);
 8000818:	4b50      	ldr	r3, [pc, #320]	; (800095c <fillData+0x14c>)
 800081a:	60bb      	str	r3, [r7, #8]


	for (int i = 0; i < 59; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e01a      	b.n	8000858 <fillData+0x48>
			data->temperature[i] = data->temperature[i+1];
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	601a      	str	r2, [r3, #0]
			data->humidity[i] = data->humidity[i+1];
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	333c      	adds	r3, #60	; 0x3c
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	333c      	adds	r3, #60	; 0x3c
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	440b      	add	r3, r1
 8000850:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 59; i++){
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b3a      	cmp	r3, #58	; 0x3a
 800085c:	dde1      	ble.n	8000822 <fillData+0x12>
		}

		data->temperature[59] = m4_to_m7_ptr->temperature[59];
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		data->humidity[59] = m4_to_m7_ptr->pressure[59];
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

		data->potlevel = m4_to_m7_ptr->potlevel;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

		data->led_r = led_data.led_r;
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <fillData+0x150>)
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		data->led_g = led_data.led_g;
 800088c:	4b34      	ldr	r3, [pc, #208]	; (8000960 <fillData+0x150>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		data->led_b = led_data.led_b;
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <fillData+0x150>)
 8000898:	789a      	ldrb	r2, [r3, #2]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
		data->led_w = led_data.led_w;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <fillData+0x150>)
 80008a2:	78da      	ldrb	r2, [r3, #3]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b


		data->accel_x = m4_to_m7_ptr->accel_x;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		data->accel_y = m4_to_m7_ptr->accel_y;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		data->accel_z = m4_to_m7_ptr->accel_z;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

		data->gyro_x = m4_to_m7_ptr->gyro_x;
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		data->gyro_y = m4_to_m7_ptr->gyro_y;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		data->gyro_z = m4_to_m7_ptr->gyro_z;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

		data->mag_x = m4_to_m7_ptr->mag_x;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		data->mag_y = m4_to_m7_ptr->mag_y;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		data->mag_z = m4_to_m7_ptr->mag_z;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204


		data->led_r = m4_to_m7_ptr->led_r;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		data->led_g = m4_to_m7_ptr->led_g;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800092a:	b2da      	uxtb	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		data->led_b = m4_to_m7_ptr->led_b;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8000938:	b2da      	uxtb	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
		data->led_w = m4_to_m7_ptr->led_w;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b

	}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	30040a00 	.word	0x30040a00
 8000960:	24004588 	.word	0x24004588

08000964 <create_json_payload>:

void create_json_payload(struct visualization_data_s *data, char * payload)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	char temp_buf[64];

	memset(temp_buf, 0, 64);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f01b f8f2 	bl	801bb60 <memset>
	/*create json "file"*/
	strcat(payload, "{");
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f7ff fcb9 	bl	80002f4 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	49d0      	ldr	r1, [pc, #832]	; (8000ccc <create_json_payload+0x368>)
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	8013      	strh	r3, [r2, #0]


	strcat(payload, "\"temperature\":[");
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff fcad 	bl	80002f4 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	4acb      	ldr	r2, [pc, #812]	; (8000cd0 <create_json_payload+0x36c>)
 80009a4:	461c      	mov	r4, r3
 80009a6:	4615      	mov	r5, r2
 80009a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009aa:	6020      	str	r0, [r4, #0]
 80009ac:	6061      	str	r1, [r4, #4]
 80009ae:	60a2      	str	r2, [r4, #8]
 80009b0:	60e3      	str	r3, [r4, #12]
	sprintf(temp_buf, "%.2f", data->temperature[0]);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009bc:	f107 0008 	add.w	r0, r7, #8
 80009c0:	ec53 2b17 	vmov	r2, r3, d7
 80009c4:	49c3      	ldr	r1, [pc, #780]	; (8000cd4 <create_json_payload+0x370>)
 80009c6:	f01b fd6d 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f01b fdf8 	bl	801c5c6 <strcat>
	for (int i = 0; i < 60; i++){
 80009d6:	2300      	movs	r3, #0
 80009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009da:	e017      	b.n	8000a0c <create_json_payload+0xa8>
		sprintf(temp_buf, ",%.2f", data->temperature[i]);
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	ec53 2b17 	vmov	r2, r3, d7
 80009f4:	49b8      	ldr	r1, [pc, #736]	; (8000cd8 <create_json_payload+0x374>)
 80009f6:	f01b fd55 	bl	801c4a4 <siprintf>
		strcat(payload, temp_buf);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f01b fde0 	bl	801c5c6 <strcat>
	for (int i = 0; i < 60; i++){
 8000a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a08:	3301      	adds	r3, #1
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a0e:	2b3b      	cmp	r3, #59	; 0x3b
 8000a10:	dde4      	ble.n	80009dc <create_json_payload+0x78>
	}
	strcat(payload, "],");
 8000a12:	6838      	ldr	r0, [r7, #0]
 8000a14:	f7ff fc6e 	bl	80002f4 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4aae      	ldr	r2, [pc, #696]	; (8000cdc <create_json_payload+0x378>)
 8000a22:	8811      	ldrh	r1, [r2, #0]
 8000a24:	7892      	ldrb	r2, [r2, #2]
 8000a26:	8019      	strh	r1, [r3, #0]
 8000a28:	709a      	strb	r2, [r3, #2]

	strcat(payload, "\"humidity\":[");
 8000a2a:	6838      	ldr	r0, [r7, #0]
 8000a2c:	f7ff fc62 	bl	80002f4 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4aa9      	ldr	r2, [pc, #676]	; (8000ce0 <create_json_payload+0x37c>)
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a40:	6020      	str	r0, [r4, #0]
 8000a42:	6061      	str	r1, [r4, #4]
 8000a44:	60a2      	str	r2, [r4, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	7323      	strb	r3, [r4, #12]
	sprintf(temp_buf, "%.2f", data->humidity[0]);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8000a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a54:	f107 0008 	add.w	r0, r7, #8
 8000a58:	ec53 2b17 	vmov	r2, r3, d7
 8000a5c:	499d      	ldr	r1, [pc, #628]	; (8000cd4 <create_json_payload+0x370>)
 8000a5e:	f01b fd21 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f01b fdac 	bl	801c5c6 <strcat>

	for (int i = 0; i < 60; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a72:	e018      	b.n	8000aa6 <create_json_payload+0x142>
		sprintf(temp_buf, ",%.2f", data->humidity[i]);
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a78:	333c      	adds	r3, #60	; 0x3c
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	edd3 7a00 	vldr	s15, [r3]
 8000a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a86:	f107 0008 	add.w	r0, r7, #8
 8000a8a:	ec53 2b17 	vmov	r2, r3, d7
 8000a8e:	4992      	ldr	r1, [pc, #584]	; (8000cd8 <create_json_payload+0x374>)
 8000a90:	f01b fd08 	bl	801c4a4 <siprintf>
		strcat(payload, temp_buf);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6838      	ldr	r0, [r7, #0]
 8000a9c:	f01b fd93 	bl	801c5c6 <strcat>
	for (int i = 0; i < 60; i++){
 8000aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa8:	2b3b      	cmp	r3, #59	; 0x3b
 8000aaa:	dde3      	ble.n	8000a74 <create_json_payload+0x110>
	}
	strcat(payload, "],");
 8000aac:	6838      	ldr	r0, [r7, #0]
 8000aae:	f7ff fc21 	bl	80002f4 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a88      	ldr	r2, [pc, #544]	; (8000cdc <create_json_payload+0x378>)
 8000abc:	8811      	ldrh	r1, [r2, #0]
 8000abe:	7892      	ldrb	r2, [r2, #2]
 8000ac0:	8019      	strh	r1, [r3, #0]
 8000ac2:	709a      	strb	r2, [r3, #2]

	sprintf(temp_buf, "\"potlevel\":%.2f,", data->potlevel);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8000aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ace:	f107 0008 	add.w	r0, r7, #8
 8000ad2:	ec53 2b17 	vmov	r2, r3, d7
 8000ad6:	4983      	ldr	r1, [pc, #524]	; (8000ce4 <create_json_payload+0x380>)
 8000ad8:	f01b fce4 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f01b fd6f 	bl	801c5c6 <strcat>

	sprintf(temp_buf, "\"accel_x\":%.2f,", data->accel_x);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	f107 0008 	add.w	r0, r7, #8
 8000af6:	ec53 2b17 	vmov	r2, r3, d7
 8000afa:	497b      	ldr	r1, [pc, #492]	; (8000ce8 <create_json_payload+0x384>)
 8000afc:	f01b fcd2 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4619      	mov	r1, r3
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f01b fd5d 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"accel_y\":%.2f,", data->accel_y);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8000b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b16:	f107 0008 	add.w	r0, r7, #8
 8000b1a:	ec53 2b17 	vmov	r2, r3, d7
 8000b1e:	4973      	ldr	r1, [pc, #460]	; (8000cec <create_json_payload+0x388>)
 8000b20:	f01b fcc0 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f01b fd4b 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"accel_z\":%.2f,", data->accel_z);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8000b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b3a:	f107 0008 	add.w	r0, r7, #8
 8000b3e:	ec53 2b17 	vmov	r2, r3, d7
 8000b42:	496b      	ldr	r1, [pc, #428]	; (8000cf0 <create_json_payload+0x38c>)
 8000b44:	f01b fcae 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6838      	ldr	r0, [r7, #0]
 8000b50:	f01b fd39 	bl	801c5c6 <strcat>

	sprintf(temp_buf, "\"gyro_x\":%.2f,", data->gyro_x);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8000b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5e:	f107 0008 	add.w	r0, r7, #8
 8000b62:	ec53 2b17 	vmov	r2, r3, d7
 8000b66:	4963      	ldr	r1, [pc, #396]	; (8000cf4 <create_json_payload+0x390>)
 8000b68:	f01b fc9c 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f01b fd27 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"gyro_y\":%.2f,", data->gyro_y);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	edd3 7a7d 	vldr	s15, [r3, #500]	; 0x1f4
 8000b7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b82:	f107 0008 	add.w	r0, r7, #8
 8000b86:	ec53 2b17 	vmov	r2, r3, d7
 8000b8a:	495b      	ldr	r1, [pc, #364]	; (8000cf8 <create_json_payload+0x394>)
 8000b8c:	f01b fc8a 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4619      	mov	r1, r3
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f01b fd15 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"gyro_z\":%.2f,", data->gyro_z);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8000ba2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba6:	f107 0008 	add.w	r0, r7, #8
 8000baa:	ec53 2b17 	vmov	r2, r3, d7
 8000bae:	4953      	ldr	r1, [pc, #332]	; (8000cfc <create_json_payload+0x398>)
 8000bb0:	f01b fc78 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6838      	ldr	r0, [r7, #0]
 8000bbc:	f01b fd03 	bl	801c5c6 <strcat>

	sprintf(temp_buf, "\"mag_x\":%.2f,", data->mag_x);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8000bc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bca:	f107 0008 	add.w	r0, r7, #8
 8000bce:	ec53 2b17 	vmov	r2, r3, d7
 8000bd2:	494b      	ldr	r1, [pc, #300]	; (8000d00 <create_json_payload+0x39c>)
 8000bd4:	f01b fc66 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6838      	ldr	r0, [r7, #0]
 8000be0:	f01b fcf1 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"mag_y\":%.2f,", data->mag_y);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8000bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bee:	f107 0008 	add.w	r0, r7, #8
 8000bf2:	ec53 2b17 	vmov	r2, r3, d7
 8000bf6:	4943      	ldr	r1, [pc, #268]	; (8000d04 <create_json_payload+0x3a0>)
 8000bf8:	f01b fc54 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4619      	mov	r1, r3
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f01b fcdf 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"mag_z\":%.2f,", data->mag_z);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 8000c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c12:	f107 0008 	add.w	r0, r7, #8
 8000c16:	ec53 2b17 	vmov	r2, r3, d7
 8000c1a:	493b      	ldr	r1, [pc, #236]	; (8000d08 <create_json_payload+0x3a4>)
 8000c1c:	f01b fc42 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	f01b fccd 	bl	801c5c6 <strcat>

	sprintf(temp_buf, "\"led_r\":%d,", data->led_r);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000c32:	461a      	mov	r2, r3
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4934      	ldr	r1, [pc, #208]	; (8000d0c <create_json_payload+0x3a8>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f01b fc32 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	6838      	ldr	r0, [r7, #0]
 8000c48:	f01b fcbd 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"led_g\":%d,", data->led_g);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8000c52:	461a      	mov	r2, r3
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	492d      	ldr	r1, [pc, #180]	; (8000d10 <create_json_payload+0x3ac>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f01b fc22 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	f01b fcad 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"led_b\":%d,", data->led_b);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8000c72:	461a      	mov	r2, r3
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	4926      	ldr	r1, [pc, #152]	; (8000d14 <create_json_payload+0x3b0>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f01b fc12 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	6838      	ldr	r0, [r7, #0]
 8000c88:	f01b fc9d 	bl	801c5c6 <strcat>
	sprintf(temp_buf, "\"led_w\":%d", data->led_w);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8000c92:	461a      	mov	r2, r3
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	491f      	ldr	r1, [pc, #124]	; (8000d18 <create_json_payload+0x3b4>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f01b fc02 	bl	801c4a4 <siprintf>
	strcat(payload, temp_buf);
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	6838      	ldr	r0, [r7, #0]
 8000ca8:	f01b fc8d 	bl	801c5c6 <strcat>

	strcat(payload, "}");
 8000cac:	6838      	ldr	r0, [r7, #0]
 8000cae:	f7ff fb21 	bl	80002f4 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4918      	ldr	r1, [pc, #96]	; (8000d1c <create_json_payload+0x3b8>)
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	8013      	strh	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3750      	adds	r7, #80	; 0x50
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bdb0      	pop	{r4, r5, r7, pc}
 8000ccc:	0801f1c8 	.word	0x0801f1c8
 8000cd0:	0801f1cc 	.word	0x0801f1cc
 8000cd4:	0801f1dc 	.word	0x0801f1dc
 8000cd8:	0801f1e4 	.word	0x0801f1e4
 8000cdc:	0801f1ec 	.word	0x0801f1ec
 8000ce0:	0801f1f0 	.word	0x0801f1f0
 8000ce4:	0801f200 	.word	0x0801f200
 8000ce8:	0801f214 	.word	0x0801f214
 8000cec:	0801f224 	.word	0x0801f224
 8000cf0:	0801f234 	.word	0x0801f234
 8000cf4:	0801f244 	.word	0x0801f244
 8000cf8:	0801f254 	.word	0x0801f254
 8000cfc:	0801f264 	.word	0x0801f264
 8000d00:	0801f274 	.word	0x0801f274
 8000d04:	0801f284 	.word	0x0801f284
 8000d08:	0801f294 	.word	0x0801f294
 8000d0c:	0801f2a4 	.word	0x0801f2a4
 8000d10:	0801f2b0 	.word	0x0801f2b0
 8000d14:	0801f2bc 	.word	0x0801f2bc
 8000d18:	0801f2c8 	.word	0x0801f2c8
 8000d1c:	0801f2d4 	.word	0x0801f2d4

08000d20 <serve_get_data_endpoint>:

void serve_get_data_endpoint(struct netconn *conn){
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
 8000d26:	af02      	add	r7, sp, #8
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	6018      	str	r0, [r3, #0]
	/*Create buffer for JSON payload data*/
	char data_resp_buf[2000];
	memset(data_resp_buf, 0, 2000);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f01a ff12 	bl	801bb60 <memset>
	/*Get data from shared struct*/
	fillData(&visualization_data);
 8000d3c:	483e      	ldr	r0, [pc, #248]	; (8000e38 <serve_get_data_endpoint+0x118>)
 8000d3e:	f7ff fd67 	bl	8000810 <fillData>
	/*HEADER*/
	strcat(data_resp_buf, "HTTP/1.1 200 OK\r\n");
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fad4 	bl	80002f4 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	4413      	add	r3, r2
 8000d56:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <serve_get_data_endpoint+0x11c>)
 8000d58:	461d      	mov	r5, r3
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5e:	6028      	str	r0, [r5, #0]
 8000d60:	6069      	str	r1, [r5, #4]
 8000d62:	60aa      	str	r2, [r5, #8]
 8000d64:	60eb      	str	r3, [r5, #12]
 8000d66:	8823      	ldrh	r3, [r4, #0]
 8000d68:	822b      	strh	r3, [r5, #16]
	strcat(data_resp_buf, "Content-Type: application/json\r\n");
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fac0 	bl	80002f4 <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <serve_get_data_endpoint+0x120>)
 8000d80:	4614      	mov	r4, r2
 8000d82:	469c      	mov	ip, r3
 8000d84:	f104 0e20 	add.w	lr, r4, #32
 8000d88:	4665      	mov	r5, ip
 8000d8a:	4626      	mov	r6, r4
 8000d8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d8e:	6028      	str	r0, [r5, #0]
 8000d90:	6069      	str	r1, [r5, #4]
 8000d92:	60aa      	str	r2, [r5, #8]
 8000d94:	60eb      	str	r3, [r5, #12]
 8000d96:	3410      	adds	r4, #16
 8000d98:	f10c 0c10 	add.w	ip, ip, #16
 8000d9c:	4574      	cmp	r4, lr
 8000d9e:	d1f3      	bne.n	8000d88 <serve_get_data_endpoint+0x68>
 8000da0:	4663      	mov	r3, ip
 8000da2:	4622      	mov	r2, r4
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	701a      	strb	r2, [r3, #0]
	strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff faa1 	bl	80002f4 <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <serve_get_data_endpoint+0x124>)
 8000dbe:	4614      	mov	r4, r2
 8000dc0:	469c      	mov	ip, r3
 8000dc2:	f104 0e20 	add.w	lr, r4, #32
 8000dc6:	4665      	mov	r5, ip
 8000dc8:	4626      	mov	r6, r4
 8000dca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dcc:	6028      	str	r0, [r5, #0]
 8000dce:	6069      	str	r1, [r5, #4]
 8000dd0:	60aa      	str	r2, [r5, #8]
 8000dd2:	60eb      	str	r3, [r5, #12]
 8000dd4:	3410      	adds	r4, #16
 8000dd6:	f10c 0c10 	add.w	ip, ip, #16
 8000dda:	4574      	cmp	r4, lr
 8000ddc:	d1f3      	bne.n	8000dc6 <serve_get_data_endpoint+0xa6>
 8000dde:	4663      	mov	r3, ip
 8000de0:	4622      	mov	r2, r4
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	701a      	strb	r2, [r3, #0]
    strcat(data_resp_buf, "\r\n");
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fa82 	bl	80002f4 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <serve_get_data_endpoint+0x128>)
 8000dfc:	8811      	ldrh	r1, [r2, #0]
 8000dfe:	7892      	ldrb	r2, [r2, #2]
 8000e00:	8019      	strh	r1, [r3, #0]
 8000e02:	709a      	strb	r2, [r3, #2]
    /*PAYLOAD*/
    create_json_payload(&visualization_data, data_resp_buf);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <serve_get_data_endpoint+0x118>)
 8000e0c:	f7ff fdaa 	bl	8000964 <create_json_payload>

    /*Write json "file" to conn structure*/
	netconn_write(conn, data_resp_buf, strlen(data_resp_buf), NETCONN_COPY);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fa6d 	bl	80002f4 <strlen>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f107 0108 	add.w	r1, r7, #8
 8000e20:	1d38      	adds	r0, r7, #4
 8000e22:	2300      	movs	r3, #0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	6800      	ldr	r0, [r0, #0]
 8000e2a:	f00b fcf7 	bl	800c81c <netconn_write_partly>

}
 8000e2e:	bf00      	nop
 8000e30:	f207 77dc 	addw	r7, r7, #2012	; 0x7dc
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e38:	2400437c 	.word	0x2400437c
 8000e3c:	0801f2d8 	.word	0x0801f2d8
 8000e40:	0801f2ec 	.word	0x0801f2ec
 8000e44:	0801f310 	.word	0x0801f310
 8000e48:	0801f334 	.word	0x0801f334

08000e4c <serve_post_data_endpoint>:


void serve_post_data_endpoint(struct netconn *conn, char *reqbuf, uint16_t buflen){
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b0dd      	sub	sp, #372	; 0x174
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	6018      	str	r0, [r3, #0]
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6019      	str	r1, [r3, #0]
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	801a      	strh	r2, [r3, #0]
	char data_resp_buf[256];
	char temp_buff[64];
	char type[8];

	volatile struct m7_to_m4 * const m7_to_m4_ptr = (struct m7_to_m4 *)(0x30040D00);
 8000e62:	4b97      	ldr	r3, [pc, #604]	; (80010c0 <serve_post_data_endpoint+0x274>)
 8000e64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	memset(data_resp_buf, 0, 256);
 8000e68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f01a fe74 	bl	801bb60 <memset>
	memset(temp_buff, 0, 64);
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f01a fe6d 	bl	801bb60 <memset>
	memset(type, 0, 8);
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f01a fe66 	bl	801bb60 <memset>

	uint8_t err = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	uint32_t value;

	/*Set values of RGB led and white LED*/
	sscanf(reqbuf, "POST /data/led/%1s?value=%d ", type, (int *)&value);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	f107 0218 	add.w	r2, r7, #24
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	4987      	ldr	r1, [pc, #540]	; (80010c4 <serve_post_data_endpoint+0x278>)
 8000ea8:	6800      	ldr	r0, [r0, #0]
 8000eaa:	f01b fb1b 	bl	801c4e4 <siscanf>

	switch(type[0]){
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3b62      	subs	r3, #98	; 0x62
 8000eb6:	2b15      	cmp	r3, #21
 8000eb8:	d86d      	bhi.n	8000f96 <serve_post_data_endpoint+0x14a>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <serve_post_data_endpoint+0x74>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f59 	.word	0x08000f59
 8000ec4:	08000f97 	.word	0x08000f97
 8000ec8:	08000f97 	.word	0x08000f97
 8000ecc:	08000f97 	.word	0x08000f97
 8000ed0:	08000f97 	.word	0x08000f97
 8000ed4:	08000f39 	.word	0x08000f39
 8000ed8:	08000f97 	.word	0x08000f97
 8000edc:	08000f97 	.word	0x08000f97
 8000ee0:	08000f97 	.word	0x08000f97
 8000ee4:	08000f97 	.word	0x08000f97
 8000ee8:	08000f97 	.word	0x08000f97
 8000eec:	08000f97 	.word	0x08000f97
 8000ef0:	08000f97 	.word	0x08000f97
 8000ef4:	08000f97 	.word	0x08000f97
 8000ef8:	08000f97 	.word	0x08000f97
 8000efc:	08000f97 	.word	0x08000f97
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f97 	.word	0x08000f97
 8000f08:	08000f97 	.word	0x08000f97
 8000f0c:	08000f97 	.word	0x08000f97
 8000f10:	08000f97 	.word	0x08000f97
 8000f14:	08000f79 	.word	0x08000f79
		case 'r':
			err = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_r = (uint8_t) (value % 256);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f28:	701a      	strb	r2, [r3, #0]
			m7_to_m4_ptr->rgb_r = led_data.led_r;
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f34:	601a      	str	r2, [r3, #0]
			break;
 8000f36:	e032      	b.n	8000f9e <serve_post_data_endpoint+0x152>
		case 'g':
			err = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_g = (uint8_t) (value % 256);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f48:	705a      	strb	r2, [r3, #1]
			m7_to_m4_ptr->rgb_g = led_data.led_g;
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f54:	605a      	str	r2, [r3, #4]
			break;
 8000f56:	e022      	b.n	8000f9e <serve_post_data_endpoint+0x152>
		case 'b':
			err = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_b = (uint8_t) (value % 256);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f68:	709a      	strb	r2, [r3, #2]
			m7_to_m4_ptr->rgb_b = led_data.led_b;
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f74:	609a      	str	r2, [r3, #8]
			break;
 8000f76:	e012      	b.n	8000f9e <serve_post_data_endpoint+0x152>
		case 'w':
			err = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_w = (uint8_t) (value % 256);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f88:	70da      	strb	r2, [r3, #3]
			m7_to_m4_ptr->w_led_status = led_data.led_w;
 8000f8a:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <serve_post_data_endpoint+0x27c>)
 8000f8c:	78da      	ldrb	r2, [r3, #3]
 8000f8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f92:	731a      	strb	r2, [r3, #12]
			break;
 8000f94:	e003      	b.n	8000f9e <serve_post_data_endpoint+0x152>
		default:
			err = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			break;
 8000f9c:	bf00      	nop
	}

	if(err == 0){
 8000f9e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8081 	bne.w	80010aa <serve_post_data_endpoint+0x25e>
	/*If values for LEDs were set right*/
		strcat(data_resp_buf, "HTTP/1.1 200 OK\r\n");
 8000fa8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f9a1 	bl	80002f4 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a43      	ldr	r2, [pc, #268]	; (80010cc <serve_post_data_endpoint+0x280>)
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	6028      	str	r0, [r5, #0]
 8000fc6:	6069      	str	r1, [r5, #4]
 8000fc8:	60aa      	str	r2, [r5, #8]
 8000fca:	60eb      	str	r3, [r5, #12]
 8000fcc:	8823      	ldrh	r3, [r4, #0]
 8000fce:	822b      	strh	r3, [r5, #16]
		strcat(data_resp_buf, "Content-Type: text/plain\r\n");
 8000fd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f98d 	bl	80002f4 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <serve_post_data_endpoint+0x284>)
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	4614      	mov	r4, r2
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	6028      	str	r0, [r5, #0]
 8000fee:	6069      	str	r1, [r5, #4]
 8000ff0:	60aa      	str	r2, [r5, #8]
 8000ff2:	60eb      	str	r3, [r5, #12]
 8000ff4:	cc03      	ldmia	r4!, {r0, r1}
 8000ff6:	6128      	str	r0, [r5, #16]
 8000ff8:	6169      	str	r1, [r5, #20]
 8000ffa:	8823      	ldrh	r3, [r4, #0]
 8000ffc:	78a2      	ldrb	r2, [r4, #2]
 8000ffe:	832b      	strh	r3, [r5, #24]
 8001000:	4613      	mov	r3, r2
 8001002:	76ab      	strb	r3, [r5, #26]
		strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 8001004:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f973 	bl	80002f4 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001016:	4413      	add	r3, r2
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <serve_post_data_endpoint+0x288>)
 800101a:	4614      	mov	r4, r2
 800101c:	469c      	mov	ip, r3
 800101e:	f104 0e20 	add.w	lr, r4, #32
 8001022:	4665      	mov	r5, ip
 8001024:	4626      	mov	r6, r4
 8001026:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001028:	6028      	str	r0, [r5, #0]
 800102a:	6069      	str	r1, [r5, #4]
 800102c:	60aa      	str	r2, [r5, #8]
 800102e:	60eb      	str	r3, [r5, #12]
 8001030:	3410      	adds	r4, #16
 8001032:	f10c 0c10 	add.w	ip, ip, #16
 8001036:	4574      	cmp	r4, lr
 8001038:	d1f3      	bne.n	8001022 <serve_post_data_endpoint+0x1d6>
 800103a:	4663      	mov	r3, ip
 800103c:	4622      	mov	r2, r4
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
		strcat(data_resp_buf, "\r\n");
 8001042:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f954 	bl	80002f4 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001054:	4413      	add	r3, r2
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <serve_post_data_endpoint+0x28c>)
 8001058:	8811      	ldrh	r1, [r2, #0]
 800105a:	7892      	ldrb	r2, [r2, #2]
 800105c:	8019      	strh	r1, [r3, #0]
 800105e:	709a      	strb	r2, [r3, #2]

		sprintf(temp_buff, "{\"led_%c\":%d}", type[0], (int)value);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f107 0020 	add.w	r0, r7, #32
 8001072:	491a      	ldr	r1, [pc, #104]	; (80010dc <serve_post_data_endpoint+0x290>)
 8001074:	f01b fa16 	bl	801c4a4 <siprintf>
		strcat(data_resp_buf, temp_buff);
 8001078:	f107 0220 	add.w	r2, r7, #32
 800107c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f01b fa9f 	bl	801c5c6 <strcat>

		netconn_write(conn, data_resp_buf , strlen(data_resp_buf), NETCONN_COPY);
 8001088:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f931 	bl	80002f4 <strlen>
 8001092:	4602      	mov	r2, r0
 8001094:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001098:	f107 000c 	add.w	r0, r7, #12
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	6800      	ldr	r0, [r0, #0]
 80010a4:	f00b fbba 	bl	800c81c <netconn_write_partly>
	} else {
	/*If values for LEDs were set wrong*/
		serve_404(conn);
	}

}
 80010a8:	e004      	b.n	80010b4 <serve_post_data_endpoint+0x268>
		serve_404(conn);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f000 f816 	bl	80010e0 <serve_404>
}
 80010b4:	bf00      	nop
 80010b6:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	bf00      	nop
 80010c0:	30040d00 	.word	0x30040d00
 80010c4:	0801f338 	.word	0x0801f338
 80010c8:	24004588 	.word	0x24004588
 80010cc:	0801f2d8 	.word	0x0801f2d8
 80010d0:	0801f358 	.word	0x0801f358
 80010d4:	0801f310 	.word	0x0801f310
 80010d8:	0801f334 	.word	0x0801f334
 80010dc:	0801f374 	.word	0x0801f374

080010e0 <serve_404>:

void serve_404(struct netconn *conn){
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80010e6:	af02      	add	r7, sp, #8
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	6018      	str	r0, [r3, #0]
	/*Error page*/
	char data_resp_buf[512];
	memset(data_resp_buf, 0, 512);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f01a fd32 	bl	801bb60 <memset>


	strcat(data_resp_buf, "HTTP/1.1 404 Not Found\r\n");
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f8f7 	bl	80002f4 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4413      	add	r3, r2
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <serve_404+0x194>)
 8001112:	461d      	mov	r5, r3
 8001114:	4614      	mov	r4, r2
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	6028      	str	r0, [r5, #0]
 800111a:	6069      	str	r1, [r5, #4]
 800111c:	60aa      	str	r2, [r5, #8]
 800111e:	60eb      	str	r3, [r5, #12]
 8001120:	cc03      	ldmia	r4!, {r0, r1}
 8001122:	6128      	str	r0, [r5, #16]
 8001124:	6169      	str	r1, [r5, #20]
 8001126:	7823      	ldrb	r3, [r4, #0]
 8001128:	762b      	strb	r3, [r5, #24]
	strcat(data_resp_buf, "Server: LwIP Nucleo H755\r\n");
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f8e0 	bl	80002f4 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4413      	add	r3, r2
 800113e:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <serve_404+0x198>)
 8001140:	461d      	mov	r5, r3
 8001142:	4614      	mov	r4, r2
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	6028      	str	r0, [r5, #0]
 8001148:	6069      	str	r1, [r5, #4]
 800114a:	60aa      	str	r2, [r5, #8]
 800114c:	60eb      	str	r3, [r5, #12]
 800114e:	cc03      	ldmia	r4!, {r0, r1}
 8001150:	6128      	str	r0, [r5, #16]
 8001152:	6169      	str	r1, [r5, #20]
 8001154:	8823      	ldrh	r3, [r4, #0]
 8001156:	78a2      	ldrb	r2, [r4, #2]
 8001158:	832b      	strh	r3, [r5, #24]
 800115a:	4613      	mov	r3, r2
 800115c:	76ab      	strb	r3, [r5, #26]
	strcat(data_resp_buf, "Connection: Closed\r\n");
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f8c6 	bl	80002f4 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4413      	add	r3, r2
 8001172:	4a42      	ldr	r2, [pc, #264]	; (800127c <serve_404+0x19c>)
 8001174:	461d      	mov	r5, r3
 8001176:	4614      	mov	r4, r2
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	6028      	str	r0, [r5, #0]
 800117c:	6069      	str	r1, [r5, #4]
 800117e:	60aa      	str	r2, [r5, #8]
 8001180:	60eb      	str	r3, [r5, #12]
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	6128      	str	r0, [r5, #16]
 8001186:	7923      	ldrb	r3, [r4, #4]
 8001188:	752b      	strb	r3, [r5, #20]
	strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f8b0 	bl	80002f4 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4413      	add	r3, r2
 800119e:	4a38      	ldr	r2, [pc, #224]	; (8001280 <serve_404+0x1a0>)
 80011a0:	4614      	mov	r4, r2
 80011a2:	469c      	mov	ip, r3
 80011a4:	f104 0e20 	add.w	lr, r4, #32
 80011a8:	4665      	mov	r5, ip
 80011aa:	4626      	mov	r6, r4
 80011ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ae:	6028      	str	r0, [r5, #0]
 80011b0:	6069      	str	r1, [r5, #4]
 80011b2:	60aa      	str	r2, [r5, #8]
 80011b4:	60eb      	str	r3, [r5, #12]
 80011b6:	3410      	adds	r4, #16
 80011b8:	f10c 0c10 	add.w	ip, ip, #16
 80011bc:	4574      	cmp	r4, lr
 80011be:	d1f3      	bne.n	80011a8 <serve_404+0xc8>
 80011c0:	4663      	mov	r3, ip
 80011c2:	4622      	mov	r2, r4
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	701a      	strb	r2, [r3, #0]
	strcat(data_resp_buf, "Content-Type: text/html; charset=iso-8859-1\r\n\r\n\r\n");
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f891 	bl	80002f4 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4413      	add	r3, r2
 80011dc:	4a29      	ldr	r2, [pc, #164]	; (8001284 <serve_404+0x1a4>)
 80011de:	4614      	mov	r4, r2
 80011e0:	469c      	mov	ip, r3
 80011e2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011e6:	4665      	mov	r5, ip
 80011e8:	4626      	mov	r6, r4
 80011ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ec:	6028      	str	r0, [r5, #0]
 80011ee:	6069      	str	r1, [r5, #4]
 80011f0:	60aa      	str	r2, [r5, #8]
 80011f2:	60eb      	str	r3, [r5, #12]
 80011f4:	3410      	adds	r4, #16
 80011f6:	f10c 0c10 	add.w	ip, ip, #16
 80011fa:	4574      	cmp	r4, lr
 80011fc:	d1f3      	bne.n	80011e6 <serve_404+0x106>
 80011fe:	4662      	mov	r2, ip
 8001200:	4623      	mov	r3, r4
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	8013      	strh	r3, [r2, #0]
	strcat(data_resp_buf, "<center><big>404 oh noes</h1></center>");
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f872 	bl	80002f4 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4413      	add	r3, r2
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <serve_404+0x1a8>)
 800121c:	4614      	mov	r4, r2
 800121e:	469c      	mov	ip, r3
 8001220:	f104 0e20 	add.w	lr, r4, #32
 8001224:	4665      	mov	r5, ip
 8001226:	4626      	mov	r6, r4
 8001228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800122a:	6028      	str	r0, [r5, #0]
 800122c:	6069      	str	r1, [r5, #4]
 800122e:	60aa      	str	r2, [r5, #8]
 8001230:	60eb      	str	r3, [r5, #12]
 8001232:	3410      	adds	r4, #16
 8001234:	f10c 0c10 	add.w	ip, ip, #16
 8001238:	4574      	cmp	r4, lr
 800123a:	d1f3      	bne.n	8001224 <serve_404+0x144>
 800123c:	4663      	mov	r3, ip
 800123e:	4622      	mov	r2, r4
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	6018      	str	r0, [r3, #0]
 8001244:	8891      	ldrh	r1, [r2, #4]
 8001246:	7992      	ldrb	r2, [r2, #6]
 8001248:	8099      	strh	r1, [r3, #4]
 800124a:	719a      	strb	r2, [r3, #6]
	netconn_write(conn, data_resp_buf, strlen(data_resp_buf), NETCONN_COPY);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f84f 	bl	80002f4 <strlen>
 8001256:	4602      	mov	r2, r0
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	1d38      	adds	r0, r7, #4
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	6800      	ldr	r0, [r0, #0]
 8001266:	f00b fad9 	bl	800c81c <netconn_write_partly>

}
 800126a:	bf00      	nop
 800126c:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8001270:	46bd      	mov	sp, r7
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	0801f384 	.word	0x0801f384
 8001278:	0801f3a0 	.word	0x0801f3a0
 800127c:	0801f3bc 	.word	0x0801f3bc
 8001280:	0801f310 	.word	0x0801f310
 8001284:	0801f3d4 	.word	0x0801f3d4
 8001288:	0801f408 	.word	0x0801f408

0800128c <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
    err_t recv_err;
    char *buf;
    u16_t buflen;
    struct fs_file file;

    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4852      	ldr	r0, [pc, #328]	; (80013e4 <http_server_serve+0x158>)
 800129c:	f003 fa42 	bl	8004724 <HAL_GPIO_WritePin>

    /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
    recv_err = netconn_recv(conn, &inbuf);
 80012a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00b fa3e 	bl	800c728 <netconn_recv>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (recv_err == ERR_OK)
 80012b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d16f      	bne.n	800139a <http_server_serve+0x10e>
    {
        if (netconn_err(conn) == ERR_OK)
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f00b fbbd 	bl	800ca3a <netconn_err>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d17c      	bne.n	80013c0 <http_server_serve+0x134>
        {
            netbuf_data(inbuf, (void **)&buf, &buflen);
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80012cc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f011 ffe3 	bl	801329c <netbuf_data>

            /*Is this an HTTP GET command? (only check the first 5 chars, since
            there are other formats for GET, and we're keeping it very simple )*/
            if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0))
 80012d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d971      	bls.n	80013c0 <http_server_serve+0x134>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2205      	movs	r2, #5
 80012e0:	4941      	ldr	r1, [pc, #260]	; (80013e8 <http_server_serve+0x15c>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f01b f97e 	bl	801c5e4 <strncmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d168      	bne.n	80013c0 <http_server_serve+0x134>
            {

            	/*Check if request to get ST.gif*/
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	220e      	movs	r2, #14
 80012f2:	493e      	ldr	r1, [pc, #248]	; (80013ec <http_server_serve+0x160>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f01b f975 	bl	801c5e4 <strncmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d114      	bne.n	800132a <http_server_serve+0x9e>
            	{
            		fs_open(&file,"/head02.png");
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	493a      	ldr	r1, [pc, #232]	; (80013f0 <http_server_serve+0x164>)
 8001306:	4618      	mov	r0, r3
 8001308:	f00f fe6c 	bl	8010fe4 <fs_open>
            		netconn_write(conn, (const unsigned char *)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	461a      	mov	r2, r3
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f00b fa7f 	bl	800c81c <netconn_write_partly>
            		fs_close(&file);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f00f fe9c 	bl	8011060 <fs_close>
 8001328:	e04a      	b.n	80013c0 <http_server_serve+0x134>
            	}
            	else if((strncmp(buf, "GET /index.html", 15) == 0) || (strncmp(buf, "GET / ", 6) == 0))
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	220f      	movs	r2, #15
 800132e:	4931      	ldr	r1, [pc, #196]	; (80013f4 <http_server_serve+0x168>)
 8001330:	4618      	mov	r0, r3
 8001332:	f01b f957 	bl	801c5e4 <strncmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <http_server_serve+0xc2>
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	2206      	movs	r2, #6
 8001340:	492d      	ldr	r1, [pc, #180]	; (80013f8 <http_server_serve+0x16c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f01b f94e 	bl	801c5e4 <strncmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d114      	bne.n	8001378 <http_server_serve+0xec>
            	{
					/*Load STM32H7xx page*/
					fs_open(&file, "/index.html");
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	492a      	ldr	r1, [pc, #168]	; (80013fc <http_server_serve+0x170>)
 8001354:	4618      	mov	r0, r3
 8001356:	f00f fe45 	bl	8010fe4 <fs_open>
					netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	461a      	mov	r2, r3
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f00b fa58 	bl	800c81c <netconn_write_partly>
					fs_close(&file);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4618      	mov	r0, r3
 8001372:	f00f fe75 	bl	8011060 <fs_close>
 8001376:	e023      	b.n	80013c0 <http_server_serve+0x134>
				 }
            	else if(strncmp((char const *)buf, "GET /data HTTP/1.1", 18) == 0)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	2212      	movs	r2, #18
 800137c:	4920      	ldr	r1, [pc, #128]	; (8001400 <http_server_serve+0x174>)
 800137e:	4618      	mov	r0, r3
 8001380:	f01b f930 	bl	801c5e4 <strncmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <http_server_serve+0x106>
            	{
            		/*Handle data endpoint*/
            		serve_get_data_endpoint(conn);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fcc8 	bl	8000d20 <serve_get_data_endpoint>
 8001390:	e016      	b.n	80013c0 <http_server_serve+0x134>
            	}
            	else
            	{
					serve_404(conn);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fea4 	bl	80010e0 <serve_404>
 8001398:	e012      	b.n	80013c0 <http_server_serve+0x134>
				}
			}
        }
      }
      else if(strncmp(buf, "POST /data/led/", 15) == 0)
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	220f      	movs	r2, #15
 800139e:	4919      	ldr	r1, [pc, #100]	; (8001404 <http_server_serve+0x178>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f01b f91f 	bl	801c5e4 <strncmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <http_server_serve+0x12e>
      {
    	  serve_post_data_endpoint(conn, buf, buflen);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fd4a 	bl	8000e4c <serve_post_data_endpoint>
 80013b8:	e002      	b.n	80013c0 <http_server_serve+0x134>
      }
      else
      {
		serve_404(conn);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fe90 	bl	80010e0 <serve_404>
      }



    /* Close the connection (server closes in HTTP) */
    netconn_close(conn);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f00b fb2d 	bl	800ca20 <netconn_close>

    /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
    netbuf_delete(inbuf);
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f011 ff47 	bl	801325c <netbuf_delete>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <http_server_serve+0x158>)
 80013d6:	f003 f9a5 	bl	8004724 <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	58020400 	.word	0x58020400
 80013e8:	0801f430 	.word	0x0801f430
 80013ec:	0801f438 	.word	0x0801f438
 80013f0:	0801f448 	.word	0x0801f448
 80013f4:	0801f454 	.word	0x0801f454
 80013f8:	0801f464 	.word	0x0801f464
 80013fc:	0801f46c 	.word	0x0801f46c
 8001400:	0801f478 	.word	0x0801f478
 8001404:	0801f48c 	.word	0x0801f48c

08001408 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    struct netconn *conn, *newconn;
    err_t err, accept_err;

    /* Create a new TCP connection handle */
    conn = netconn_new(NETCONN_TCP);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2010      	movs	r0, #16
 8001416:	f00a fe61 	bl	800c0dc <netconn_new_with_proto_and_callback>
 800141a:	6178      	str	r0, [r7, #20]

    if (conn != NULL)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d023      	beq.n	800146a <http_server_netconn_thread+0x62>
    {
        /* Bind to port 80 (HTTP) with default IP address */
        err = netconn_bind(conn, NULL, 80);
 8001422:	2250      	movs	r2, #80	; 0x50
 8001424:	2100      	movs	r1, #0
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f00a ff12 	bl	800c250 <netconn_bind>
 800142c:	4603      	mov	r3, r0
 800142e:	74fb      	strb	r3, [r7, #19]

        if (err == ERR_OK)
 8001430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d118      	bne.n	800146a <http_server_netconn_thread+0x62>
        {
            /* Put the connection into LISTEN state */
            netconn_listen(conn);
 8001438:	21ff      	movs	r1, #255	; 0xff
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f00a ff40 	bl	800c2c0 <netconn_listen_with_backlog>

            while (1)
            {
                /* accept any icoming connection */
                accept_err = netconn_accept(conn, &newconn);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f00a ff66 	bl	800c318 <netconn_accept>
 800144c:	4603      	mov	r3, r0
 800144e:	74bb      	strb	r3, [r7, #18]
                if (accept_err == ERR_OK)
 8001450:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f3      	bne.n	8001440 <http_server_netconn_thread+0x38>
                {
                    /* serve connection */
                    http_server_serve(newconn);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff16 	bl	800128c <http_server_serve>

                    /* delete connection */
                    netconn_delete(newconn);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f00a fed8 	bl	800c218 <netconn_delete>
                accept_err = netconn_accept(conn, &newconn);
 8001468:	e7ea      	b.n	8001440 <http_server_netconn_thread+0x38>
                }
            }
        }
    }
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800147a:	af02      	add	r7, sp, #8
	visualization_data = (const struct visualization_data_s){ 0 };
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <http_server_netconn_init+0x44>)
 800147e:	4618      	mov	r0, r3
 8001480:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001484:	461a      	mov	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f01a fb6a 	bl	801bb60 <memset>
	visualization_data.humidity[59] = 1025.0;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <http_server_netconn_init+0x44>)
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <http_server_netconn_init+0x48>)
 8001490:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	visualization_data.temperature[59] = 15.0;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <http_server_netconn_init+0x44>)
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <http_server_netconn_init+0x4c>)
 8001498:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 800149c:	2301      	movs	r3, #1
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	2200      	movs	r2, #0
 80014a6:	4907      	ldr	r1, [pc, #28]	; (80014c4 <http_server_netconn_init+0x50>)
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <http_server_netconn_init+0x54>)
 80014aa:	f013 fa3f 	bl	801492c <sys_thread_new>
}
 80014ae:	bf00      	nop
 80014b0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2400437c 	.word	0x2400437c
 80014bc:	44802000 	.word	0x44802000
 80014c0:	41700000 	.word	0x41700000
 80014c4:	08001409 	.word	0x08001409
 80014c8:	0801f49c 	.word	0x0801f49c

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80014d2:	f000 fa73 	bl	80019bc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <main+0x1a0>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11b      	bne.n	800151a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e8:	f3bf 8f6f 	isb	sy
}
 80014ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <main+0x1a0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014f6:	f3bf 8f4f 	dsb	sy
}
 80014fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fc:	f3bf 8f6f 	isb	sy
}
 8001500:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <main+0x1a0>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a59      	ldr	r2, [pc, #356]	; (800166c <main+0x1a0>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800150e:	f3bf 8f4f 	dsb	sy
}
 8001512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001514:	f3bf 8f6f 	isb	sy
}
 8001518:	e000      	b.n	800151c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800151a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <main+0x1a0>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d138      	bne.n	800159a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <main+0x1a0>)
 800152a:	2200      	movs	r2, #0
 800152c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001530:	f3bf 8f4f 	dsb	sy
}
 8001534:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <main+0x1a0>)
 8001538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	0b5b      	lsrs	r3, r3, #13
 8001542:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800155a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001560:	4942      	ldr	r1, [pc, #264]	; (800166c <main+0x1a0>)
 8001562:	4313      	orrs	r3, r2
 8001564:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	627a      	str	r2, [r7, #36]	; 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ef      	bne.n	8001552 <main+0x86>
    } while(sets-- != 0U);
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	62ba      	str	r2, [r7, #40]	; 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e5      	bne.n	8001548 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <main+0x1a0>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a39      	ldr	r2, [pc, #228]	; (800166c <main+0x1a0>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800158e:	f3bf 8f4f 	dsb	sy
}
 8001592:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001594:	f3bf 8f6f 	isb	sy
}
 8001598:	e000      	b.n	800159c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800159a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80015a2:	bf00      	nop
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <main+0x1a4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <main+0xee>
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	637a      	str	r2, [r7, #52]	; 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dcf4      	bgt.n	80015a4 <main+0xd8>
  if ( timeout < 0 )
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da01      	bge.n	80015c4 <main+0xf8>
  {
  Error_Handler();
 80015c0:	f000 fa58 	bl	8001a74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c4:	f000 fe52 	bl	800226c <HAL_Init>
//	#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c8:	f000 f85c 	bl	8001684 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <main+0x1a4>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <main+0x1a4>)
 80015d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <main+0x1a4>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f003 f8b4 	bl	8004758 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 f8ca 	bl	800478c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80015f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80015fe:	bf00      	nop
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <main+0x1a4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <main+0x14a>
 800160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	637a      	str	r2, [r7, #52]	; 0x34
 8001612:	2b00      	cmp	r3, #0
 8001614:	dcf4      	bgt.n	8001600 <main+0x134>
if ( timeout < 0 )
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	2b00      	cmp	r3, #0
 800161a:	da01      	bge.n	8001620 <main+0x154>
{
Error_Handler();
 800161c:	f000 fa2a 	bl	8001a74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 f900 	bl	8001824 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001624:	f000 f8b2 	bl	800178c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t * iniMsg = "HW init done starting threads...\r\n";
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <main+0x1a8>)
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_UART_Transmit(&huart3, iniMsg, strlen(iniMsg), 100);
 800162c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800162e:	f7fe fe61 	bl	80002f4 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <main+0x1ac>)
 800163c:	f005 ff76 	bl	800752c <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Start */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, 256);
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <main+0x1b0>)
 8001642:	f107 0408 	add.w	r4, r7, #8
 8001646:	461d      	mov	r5, r3
 8001648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartHandle = osThreadCreate(osThread(Start), NULL);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f007 fcf9 	bl	8009052 <osThreadCreate>
 8001660:	4603      	mov	r3, r0
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <main+0x1b4>)
 8001664:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001666:	f007 fcdd 	bl	8009024 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x19e>
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	58024400 	.word	0x58024400
 8001674:	0801f4ac 	.word	0x0801f4ac
 8001678:	24004590 	.word	0x24004590
 800167c:	0801f4d0 	.word	0x0801f4d0
 8001680:	24004620 	.word	0x24004620

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09c      	sub	sp, #112	; 0x70
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	224c      	movs	r2, #76	; 0x4c
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f01a fa64 	bl	801bb60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2220      	movs	r2, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f01a fa5e 	bl	801bb60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016a4:	2004      	movs	r0, #4
 80016a6:	f003 f885 	bl	80047b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <SystemClock_Config+0xfc>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <SystemClock_Config+0xfc>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <SystemClock_Config+0xfc>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <SystemClock_Config+0x100>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <SystemClock_Config+0x100>)
 80016ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <SystemClock_Config+0x100>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016dc:	bf00      	nop
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <SystemClock_Config+0x100>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ea:	d1f8      	bne.n	80016de <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <SystemClock_Config+0x104>)
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f023 0303 	bic.w	r3, r3, #3
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <SystemClock_Config+0x104>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001700:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001706:	2302      	movs	r3, #2
 8001708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170a:	2302      	movs	r3, #2
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001712:	2340      	movs	r3, #64	; 0x40
 8001714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001716:	2302      	movs	r3, #2
 8001718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800171a:	2304      	movs	r3, #4
 800171c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800171e:	2302      	movs	r3, #2
 8001720:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001722:	230c      	movs	r3, #12
 8001724:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001726:	2300      	movs	r3, #0
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4618      	mov	r0, r3
 8001734:	f003 f898 	bl	8004868 <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800173e:	f000 f999 	bl	8001a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	233f      	movs	r3, #63	; 0x3f
 8001744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2303      	movs	r3, #3
 8001748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800174e:	2308      	movs	r3, #8
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001756:	2340      	movs	r3, #64	; 0x40
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2102      	movs	r1, #2
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fc8d 	bl	8005088 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001774:	f000 f97e 	bl	8001a74 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3770      	adds	r7, #112	; 0x70
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58000400 	.word	0x58000400
 8001784:	58024800 	.word	0x58024800
 8001788:	58024400 	.word	0x58024400

0800178c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_USART3_UART_Init+0x90>)
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <MX_USART3_UART_Init+0x94>)
 8001794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_USART3_UART_Init+0x90>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d4:	4811      	ldr	r0, [pc, #68]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017d6:	f005 fe59 	bl	800748c <HAL_UART_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017e0:	f000 f948 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017e8:	f006 fe3c 	bl	8008464 <HAL_UARTEx_SetTxFifoThreshold>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f000 f93f 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <MX_USART3_UART_Init+0x90>)
 80017fa:	f006 fe71 	bl	80084e0 <HAL_UARTEx_SetRxFifoThreshold>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001804:	f000 f936 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_USART3_UART_Init+0x90>)
 800180a:	f006 fdf2 	bl	80083f2 <HAL_UARTEx_DisableFifoMode>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001814:	f000 f92e 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	24004590 	.word	0x24004590
 8001820:	40004800 	.word	0x40004800

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	4b55      	ldr	r3, [pc, #340]	; (8001990 <MX_GPIO_Init+0x16c>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a53      	ldr	r2, [pc, #332]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b51      	ldr	r3, [pc, #324]	; (8001990 <MX_GPIO_Init+0x16c>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <MX_GPIO_Init+0x16c>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185e:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <MX_GPIO_Init+0x16c>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <MX_GPIO_Init+0x16c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	4a3d      	ldr	r2, [pc, #244]	; (8001990 <MX_GPIO_Init+0x16c>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a35      	ldr	r2, [pc, #212]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a26      	ldr	r2, [pc, #152]	; (8001990 <MX_GPIO_Init+0x16c>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <MX_GPIO_Init+0x16c>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <MX_GPIO_Init+0x170>)
 8001914:	f002 ff06 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDW_GPIO_Port, LDW_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <MX_GPIO_Init+0x174>)
 8001920:	f002 ff00 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2102      	movs	r1, #2
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <MX_GPIO_Init+0x178>)
 800192a:	f002 fefb 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800192e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_GPIO_Init+0x170>)
 8001948:	f002 fd3c 	bl	80043c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDW_Pin */
  GPIO_InitStruct.Pin = LDW_Pin;
 800194c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDW_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_GPIO_Init+0x174>)
 8001966:	f002 fd2d 	bl	80043c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_GPIO_Init+0x178>)
 8001982:	f002 fd1f 	bl	80043c4 <HAL_GPIO_Init>

}
 8001986:	bf00      	nop
 8001988:	3730      	adds	r7, #48	; 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	58024400 	.word	0x58024400
 8001994:	58020400 	.word	0x58020400
 8001998:	58020c00 	.word	0x58020c00
 800199c:	58021000 	.word	0x58021000

080019a0 <StartThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThread */
void StartThread(void const * argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019a8:	f006 fe26 	bl	80085f8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize echo server */
  tcpecho_init();
 80019ac:	f000 f8d2 	bl	8001b54 <tcpecho_init>

  /* Initialize webserver demo */
  http_server_netconn_init();
 80019b0:	f7ff fd60 	bl	8001474 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {

  	/* Delete the Init Thread */
    osThreadTerminate(NULL);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f007 fb98 	bl	80090ea <osThreadTerminate>
 80019ba:	e7fb      	b.n	80019b4 <StartThread+0x14>

080019bc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019ce:	f000 fda9 	bl	8002524 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MPU_Config+0x8c>)
 80019dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80019de:	230d      	movs	r3, #13
 80019e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80019ea:	2303      	movs	r3, #3
 80019ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019fe:	463b      	mov	r3, r7
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fdc7 	bl	8002594 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MPU_Config+0x90>)
 8001a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a16:	463b      	mov	r3, r7
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fdbb 	bl	8002594 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MPU_Config+0x8c>)
 8001a24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001a26:	2307      	movs	r3, #7
 8001a28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a32:	463b      	mov	r3, r7
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fdad 	bl	8002594 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a3a:	2004      	movs	r0, #4
 8001a3c:	f000 fd8a 	bl	8002554 <HAL_MPU_Enable>

}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	30040000 	.word	0x30040000
 8001a4c:	30044000 	.word	0x30044000

08001a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a62:	f000 fc3f 	bl	80022e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40001000 	.word	0x40001000

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <tcpecho_thread>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  /* Bind connection to well known port number 7. */
  conn = netconn_new(NETCONN_TCP);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2010      	movs	r0, #16
 8001a8e:	f00a fb25 	bl	800c0dc <netconn_new_with_proto_and_callback>
 8001a92:	61f8      	str	r0, [r7, #28]
  netconn_bind(conn, IP_ADDR_ANY, 7);
 8001a94:	2207      	movs	r2, #7
 8001a96:	492b      	ldr	r1, [pc, #172]	; (8001b44 <tcpecho_thread+0xc4>)
 8001a98:	69f8      	ldr	r0, [r7, #28]
 8001a9a:	f00a fbd9 	bl	800c250 <netconn_bind>

  LWIP_ERROR("tcpecho: invalid conn", (conn != NULL), return;);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <tcpecho_thread+0x32>
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <tcpecho_thread+0xc8>)
 8001aa6:	223c      	movs	r2, #60	; 0x3c
 8001aa8:	4928      	ldr	r1, [pc, #160]	; (8001b4c <tcpecho_thread+0xcc>)
 8001aaa:	4829      	ldr	r0, [pc, #164]	; (8001b50 <tcpecho_thread+0xd0>)
 8001aac:	f01a fca2 	bl	801c3f4 <iprintf>
 8001ab0:	e044      	b.n	8001b3c <tcpecho_thread+0xbc>

  /* Tell connection to go into listening mode. */
  netconn_listen(conn);
 8001ab2:	21ff      	movs	r1, #255	; 0xff
 8001ab4:	69f8      	ldr	r0, [r7, #28]
 8001ab6:	f00a fc03 	bl	800c2c0 <netconn_listen_with_backlog>

  while (1) {

    /* Grab new connection. */
    err = netconn_accept(conn, &newconn);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	69f8      	ldr	r0, [r7, #28]
 8001ac2:	f00a fc29 	bl	800c318 <netconn_accept>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	76fb      	strb	r3, [r7, #27]
    /*printf("accepted new connection %p\n", newconn);*/
    /* Process the new connection. */
    if (err == ERR_OK) {
 8001aca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f3      	bne.n	8001aba <tcpecho_thread+0x3a>
      struct netbuf *buf;
      void *data;
      u16_t len;
      
      while ((err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8001ad2:	e01d      	b.n	8001b10 <tcpecho_thread+0x90>
        /*printf("Recved\n");*/
        do {
             netbuf_data(buf, &data, &len);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f107 020a 	add.w	r2, r7, #10
 8001ada:	f107 010c 	add.w	r1, r7, #12
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f011 fbdc 	bl	801329c <netbuf_data>
             err = netconn_write(newconn, data, len, NETCONN_COPY);
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	897b      	ldrh	r3, [r7, #10]
 8001aea:	461a      	mov	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	f00a fe93 	bl	800c81c <netconn_write_partly>
 8001af6:	4603      	mov	r3, r0
 8001af8:	76fb      	strb	r3, [r7, #27]
        } while (netbuf_next(buf) >= 0);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f011 fc17 	bl	8013330 <netbuf_next>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dae5      	bge.n	8001ad4 <tcpecho_thread+0x54>
        netbuf_delete(buf);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f011 fba6 	bl	801325c <netbuf_delete>
      while ((err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f107 0210 	add.w	r2, r7, #16
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a fe05 	bl	800c728 <netconn_recv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	76fb      	strb	r3, [r7, #27]
 8001b22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0d4      	beq.n	8001ad4 <tcpecho_thread+0x54>
      }
      /*printf("Got EOF, looping\n");*/ 
      /* Close connection and discard connection identifier. */
      netconn_close(newconn);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00a ff77 	bl	800ca20 <netconn_close>
      netconn_delete(newconn);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00a fb6f 	bl	800c218 <netconn_delete>
    err = netconn_accept(conn, &newconn);
 8001b3a:	e7be      	b.n	8001aba <tcpecho_thread+0x3a>
    }
  }
}
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	080463c8 	.word	0x080463c8
 8001b48:	0801f4ec 	.word	0x0801f4ec
 8001b4c:	0801f510 	.word	0x0801f510
 8001b50:	0801f528 	.word	0x0801f528

08001b54 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/
void
tcpecho_init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, (configMINIMAL_STACK_SIZE*2), TCPECHO_THREAD_PRIO);
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b62:	2200      	movs	r2, #0
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <tcpecho_init+0x20>)
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <tcpecho_init+0x24>)
 8001b68:	f012 fee0 	bl	801492c <sys_thread_new>
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	08001a81 	.word	0x08001a81
 8001b78:	0801f550 	.word	0x0801f550

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_MspInit+0x38>)
 8001b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_MspInit+0x38>)
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_MspInit+0x38>)
 8001b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f06f 0001 	mvn.w	r0, #1
 8001ba8:	f000 fc94 	bl	80024d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024400 	.word	0x58024400

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0b8      	sub	sp, #224	; 0xe0
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	22bc      	movs	r2, #188	; 0xbc
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f019 ffc1 	bl	801bb60 <memset>
  if(huart->Instance==USART3)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <HAL_UART_MspInit+0xc0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d142      	bne.n	8001c6e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fe14 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c02:	f7ff ff37 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0xc4>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_UART_MspInit+0xc8>)
 8001c6a:	f002 fbab 	bl	80043c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	37e0      	adds	r7, #224	; 0xe0
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004800 	.word	0x40004800
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020c00 	.word	0x58020c00

08001c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b090      	sub	sp, #64	; 0x40
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	d827      	bhi.n	8001ce2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001c92:	2200      	movs	r2, #0
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	2036      	movs	r0, #54	; 0x36
 8001c98:	f000 fc1c 	bl	80024d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9c:	2036      	movs	r0, #54	; 0x36
 8001c9e:	f000 fc33 	bl	8002508 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_InitTick+0xc4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_InitTick+0xc8>)
 8001caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cae:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_InitTick+0xc8>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_InitTick+0xc8>)
 8001cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc6:	f107 0210 	add.w	r2, r7, #16
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fd65 	bl	80057a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <HAL_InitTick+0x6a>
 8001ce0:	e001      	b.n	8001ce6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e02b      	b.n	8001d3e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ce6:	f003 fd2f 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8001cea:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001cec:	e004      	b.n	8001cf8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cee:	f003 fd2b 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_InitTick+0xcc>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	3b01      	subs	r3, #1
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_InitTick+0xd4>)
 8001d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d28:	f005 f8de 	bl	8006ee8 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <HAL_InitTick+0xd0>)
 8001d34:	f005 f93a 	bl	8006fac <HAL_TIM_Base_Start_IT>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	e000      	b.n	8001d3e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3740      	adds	r7, #64	; 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	24000008 	.word	0x24000008
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	2400464c 	.word	0x2400464c
 8001d58:	40001000 	.word	0x40001000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM6_DAC_IRQHandler+0x10>)
 8001d8e:	f005 f97d 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2400464c 	.word	0x2400464c

08001d9c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <ETH_IRQHandler+0x10>)
 8001da2:	f001 f929 	bl	8002ff8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	240047cc 	.word	0x240047cc

08001db0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <ETH_WKUP_IRQHandler+0x10>)
 8001db6:	f001 f91f 	bl	8002ff8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	240047cc 	.word	0x240047cc

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <_kill+0x20>)
 8001de0:	2216      	movs	r2, #22
 8001de2:	601a      	str	r2, [r3, #0]
	return -1;
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	240079cc 	.word	0x240079cc

08001df8 <_exit>:

void _exit (int status)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ffe5 	bl	8001dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e0a:	e7fe      	b.n	8001e0a <_exit+0x12>

08001e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e00a      	b.n	8001e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e1e:	f3af 8000 	nop.w
 8001e22:	4601      	mov	r1, r0
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	60ba      	str	r2, [r7, #8]
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf0      	blt.n	8001e1e <_read+0x12>
	}

return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e009      	b.n	8001e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dbf1      	blt.n	8001e58 <_write+0x12>
	}
	return len;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_close>:

int _close(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_isatty>:

int _isatty(int file)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <_sbrk+0x5c>)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <_sbrk+0x60>)
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <_sbrk+0x64>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <_sbrk+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d205      	bcs.n	8001f24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <_sbrk+0x6c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	24080000 	.word	0x24080000
 8001f48:	00000800 	.word	0x00000800
 8001f4c:	24000478 	.word	0x24000478
 8001f50:	24007a08 	.word	0x24007a08
 8001f54:	240079cc 	.word	0x240079cc

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f5c:	f7fe fba4 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f62:	e003      	b.n	8001f6c <LoopCopyDataInit>

08001f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f6a:	3104      	adds	r1, #4

08001f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f6c:	480a      	ldr	r0, [pc, #40]	; (8001f98 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f74:	d3f6      	bcc.n	8001f64 <CopyDataInit>
  ldr  r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001f78:	e002      	b.n	8001f80 <LoopFillZerobss>

08001f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f7c:	f842 3b04 	str.w	r3, [r2], #4

08001f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f84:	d3f9      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f019 fd91 	bl	801baac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7ff fa9f 	bl	80014cc <main>
  bx  lr    
 8001f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f94:	0804696c 	.word	0x0804696c
  ldr  r0, =_sdata
 8001f98:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f9c:	24000208 	.word	0x24000208
  ldr  r2, =_sbss
 8001fa0:	24000208 	.word	0x24000208
  ldr  r3, = _ebss
 8001fa4:	24007a04 	.word	0x24007a04

08001fa8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC3_IRQHandler>

08001faa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <LAN8742_RegisterBusIO+0x28>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <LAN8742_RegisterBusIO+0x28>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <LAN8742_RegisterBusIO+0x28>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e014      	b.n	8002002 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d17c      	bne.n	8002128 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e01c      	b.n	8002082 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f107 0208 	add.w	r2, r7, #8
 8002050:	2112      	movs	r1, #18
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	4798      	blx	r3
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	da03      	bge.n	8002064 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800205c:	f06f 0304 	mvn.w	r3, #4
 8002060:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002062:	e00b      	b.n	800207c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d105      	bne.n	800207c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
         break;
 800207a:	e005      	b.n	8002088 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b1f      	cmp	r3, #31
 8002086:	d9df      	bls.n	8002048 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b1f      	cmp	r3, #31
 800208e:	d902      	bls.n	8002096 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002090:	f06f 0302 	mvn.w	r3, #2
 8002094:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d145      	bne.n	8002128 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6810      	ldr	r0, [r2, #0]
 80020a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020a8:	2100      	movs	r1, #0
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db37      	blt.n	8002122 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6810      	ldr	r0, [r2, #0]
 80020ba:	f107 0208 	add.w	r2, r7, #8
 80020be:	2100      	movs	r1, #0
 80020c0:	4798      	blx	r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db28      	blt.n	800211a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4798      	blx	r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80020d2:	e01c      	b.n	800210e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4798      	blx	r3
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020e6:	d80e      	bhi.n	8002106 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6810      	ldr	r0, [r2, #0]
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	2100      	movs	r1, #0
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da07      	bge.n	800210e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80020fe:	f06f 0304 	mvn.w	r3, #4
 8002102:	613b      	str	r3, [r7, #16]
                 break;
 8002104:	e010      	b.n	8002128 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002106:	f06f 0301 	mvn.w	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
               break;
 800210c:	e00c      	b.n	8002128 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1dd      	bne.n	80020d4 <LAN8742_Init+0xc6>
 8002118:	e006      	b.n	8002128 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800211a:	f06f 0304 	mvn.w	r3, #4
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e002      	b.n	8002128 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002122:	f06f 0303 	mvn.w	r3, #3
 8002126:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d112      	bne.n	8002154 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4798      	blx	r3
 8002134:	4603      	mov	r3, r0
 8002136:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002138:	bf00      	nop
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4798      	blx	r3
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800214c:	d9f5      	bls.n	800213a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002154:	693b      	ldr	r3, [r7, #16]
 }
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6810      	ldr	r0, [r2, #0]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	2101      	movs	r1, #1
 8002178:	4798      	blx	r3
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	da02      	bge.n	8002186 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002180:	f06f 0304 	mvn.w	r3, #4
 8002184:	e06e      	b.n	8002264 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	2101      	movs	r1, #1
 8002194:	4798      	blx	r3
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	da02      	bge.n	80021a2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800219c:	f06f 0304 	mvn.w	r3, #4
 80021a0:	e060      	b.n	8002264 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80021ac:	2301      	movs	r3, #1
 80021ae:	e059      	b.n	8002264 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6810      	ldr	r0, [r2, #0]
 80021b8:	f107 020c 	add.w	r2, r7, #12
 80021bc:	2100      	movs	r1, #0
 80021be:	4798      	blx	r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da02      	bge.n	80021cc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021c6:	f06f 0304 	mvn.w	r3, #4
 80021ca:	e04b      	b.n	8002264 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11b      	bne.n	800220e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <LAN8742_GetLinkState+0x90>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021ea:	2302      	movs	r3, #2
 80021ec:	e03a      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e033      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002206:	2304      	movs	r3, #4
 8002208:	e02c      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800220a:	2305      	movs	r3, #5
 800220c:	e02a      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6810      	ldr	r0, [r2, #0]
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	211f      	movs	r1, #31
 800221c:	4798      	blx	r3
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	da02      	bge.n	800222a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002224:	f06f 0304 	mvn.w	r3, #4
 8002228:	e01c      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002234:	2306      	movs	r3, #6
 8002236:	e015      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 031c 	and.w	r3, r3, #28
 800223e:	2b18      	cmp	r3, #24
 8002240:	d101      	bne.n	8002246 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002242:	2302      	movs	r3, #2
 8002244:	e00e      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 031c 	and.w	r3, r3, #28
 800224c:	2b08      	cmp	r3, #8
 800224e:	d101      	bne.n	8002254 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002250:	2303      	movs	r3, #3
 8002252:	e007      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 031c 	and.w	r3, r3, #28
 800225a:	2b14      	cmp	r3, #20
 800225c:	d101      	bne.n	8002262 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800225e:	2304      	movs	r3, #4
 8002260:	e000      	b.n	8002264 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002262:	2305      	movs	r3, #5
    }				
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002272:	2003      	movs	r0, #3
 8002274:	f000 f923 	bl	80024be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002278:	f003 f8bc 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_Init+0x68>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	4913      	ldr	r1, [pc, #76]	; (80022d8 <HAL_Init+0x6c>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_Init+0x68>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_Init+0x6c>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_Init+0x70>)
 80022ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_Init+0x74>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fce4 	bl	8001c84 <HAL_InitTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e002      	b.n	80022cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022c6:	f7ff fc59 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	58024400 	.word	0x58024400
 80022d8:	080230c8 	.word	0x080230c8
 80022dc:	24000004 	.word	0x24000004
 80022e0:	24000000 	.word	0x24000000

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2400000c 	.word	0x2400000c
 8002308:	24004698 	.word	0x24004698

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	24004698 	.word	0x24004698

08002324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetREVID+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	5c001000 	.word	0x5c001000

0800233c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	58000400 	.word	0x58000400

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff4c 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e2:	f7ff ff63 	bl	80023ac <__NVIC_GetPriorityGrouping>
 80024e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7ff ffb3 	bl	8002458 <NVIC_EncodePriority>
 80024f2:	4602      	mov	r2, r0
 80024f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff82 	bl	8002404 <__NVIC_SetPriority>
}
 8002500:	bf00      	nop
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff56 	bl	80023c8 <__NVIC_EnableIRQ>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002528:	f3bf 8f5f 	dmb	sy
}
 800252c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_MPU_Disable+0x28>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_MPU_Disable+0x28>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_MPU_Disable+0x2c>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00
 8002550:	e000ed90 	.word	0xe000ed90

08002554 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800255c:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_MPU_Enable+0x38>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MPU_Enable+0x3c>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_MPU_Enable+0x3c>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002572:	f3bf 8f4f 	dsb	sy
}
 8002576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002578:	f3bf 8f6f 	isb	sy
}
 800257c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed90 	.word	0xe000ed90
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	785a      	ldrb	r2, [r3, #1]
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_MPU_ConfigRegion+0x84>)
 80025a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d029      	beq.n	8002600 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_MPU_ConfigRegion+0x84>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7adb      	ldrb	r3, [r3, #11]
 80025be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7a9b      	ldrb	r3, [r3, #10]
 80025c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b5b      	ldrb	r3, [r3, #13]
 80025ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7b9b      	ldrb	r3, [r3, #14]
 80025d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7bdb      	ldrb	r3, [r3, #15]
 80025de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7a5b      	ldrb	r3, [r3, #9]
 80025e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7a1b      	ldrb	r3, [r3, #8]
 80025ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80025fe:	e005      	b.n	800260c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_MPU_ConfigRegion+0x84>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_MPU_ConfigRegion+0x84>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed90 	.word	0xe000ed90

0800261c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_GetCurrentCPUID+0x24>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	2b07      	cmp	r3, #7
 800262c:	d101      	bne.n	8002632 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800262e:	2303      	movs	r3, #3
 8002630:	e000      	b.n	8002634 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002632:	2301      	movs	r3, #1
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0c6      	b.n	80027e4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 f82c 	bl	80086bc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2223      	movs	r2, #35	; 0x23
 8002668:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_ETH_Init+0x1a8>)
 800266c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002670:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <HAL_ETH_Init+0x1a8>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800267a:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_ETH_Init+0x1a8>)
 800267c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7a1b      	ldrb	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fe53 	bl	800233c <HAL_SYSCFG_ETHInterfaceSelect>
 8002696:	e003      	b.n	80026a0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002698:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800269c:	f7ff fe4e 	bl	800233c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b8:	f7ff fe28 	bl	800230c <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80026be:	e00f      	b.n	80026e0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80026c0:	f7ff fe24 	bl	800230c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ce:	d907      	bls.n	80026e0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	22e0      	movs	r2, #224	; 0xe0
 80026da:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e081      	b.n	80027e4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e6      	bne.n	80026c0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 faec 	bl	8003cd0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80026f8:	f002 fff6 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <HAL_ETH_Init+0x1ac>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9a      	lsrs	r2, r3, #18
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3a01      	subs	r2, #1
 800270c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f001 fa3f 	bl	8003b94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800272c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002730:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	22e0      	movs	r2, #224	; 0xe0
 8002748:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e04a      	b.n	80027e4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f241 1308 	movw	r3, #4360	; 0x1108
 8002756:	4413      	add	r3, r2
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_ETH_Init+0x1b0>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6952      	ldr	r2, [r2, #20]
 8002762:	0052      	lsls	r2, r2, #1
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	431a      	orrs	r2, r3
 800276a:	f241 1308 	movw	r3, #4360	; 0x1108
 800276e:	440b      	add	r3, r1
 8002770:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f001 fb04 	bl	8003d80 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 fb48 	bl	8003e0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	3305      	adds	r3, #5
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	021a      	lsls	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	3303      	adds	r3, #3
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	061a      	lsls	r2, r3, #24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	3302      	adds	r3, #2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2210      	movs	r2, #16
 80027da:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2210      	movs	r2, #16
 80027e0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	58024400 	.word	0x58024400
 80027f0:	431bde83 	.word	0x431bde83
 80027f4:	ffff8001 	.word	0xffff8001

080027f8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3310      	adds	r3, #16
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_ETH_DescAssignMemory+0x28>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d904      	bls.n	800282a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e021      	b.n	800286e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002886:	2b10      	cmp	r3, #16
 8002888:	d174      	bne.n	8002974 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2223      	movs	r2, #35	; 0x23
 800288e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e00f      	b.n	80028b6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3310      	adds	r3, #16
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d9ec      	bls.n	8002896 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0202 	orr.w	r2, r2, #2
 80028d0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80028fe:	4413      	add	r3, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6811      	ldr	r1, [r2, #0]
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	f241 1304 	movw	r3, #4356	; 0x1104
 800290e:	440b      	add	r3, r1
 8002910:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f241 1308 	movw	r3, #4360	; 0x1108
 800291a:	4413      	add	r3, r2
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	f241 1308 	movw	r3, #4360	; 0x1108
 800292a:	440b      	add	r3, r1
 800292c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002940:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002944:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f241 1334 	movw	r3, #4404	; 0x1134
 800294e:	4413      	add	r3, r2
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	f24d 0241 	movw	r2, #53313	; 0xd041
 800295a:	431a      	orrs	r2, r3
 800295c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002960:	440b      	add	r3, r1
 8002962:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2210      	movs	r2, #16
 8002968:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2222      	movs	r2, #34	; 0x22
 800296e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d067      	beq.n	8002a64 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2223      	movs	r2, #35	; 0x23
 8002998:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f241 1334 	movw	r3, #4404	; 0x1134
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6811      	ldr	r1, [r2, #0]
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_ETH_Stop_IT+0xf0>)
 80029ac:	401a      	ands	r2, r3
 80029ae:	f241 1334 	movw	r3, #4404	; 0x1134
 80029b2:	440b      	add	r3, r1
 80029b4:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f241 1304 	movw	r3, #4356	; 0x1104
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6811      	ldr	r1, [r2, #0]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80029ce:	440b      	add	r3, r1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80029da:	4413      	add	r3, r2
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6811      	ldr	r1, [r2, #0]
 80029e2:	f023 0201 	bic.w	r2, r3, #1
 80029e6:	f241 1308 	movw	r3, #4360	; 0x1108
 80029ea:	440b      	add	r3, r1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0202 	bic.w	r2, r2, #2
 8002a20:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e00f      	b.n	8002a48 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d9ec      	bls.n	8002a28 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2210      	movs	r2, #16
 8002a58:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	ffff2fbe 	.word	0xffff2fbe

08002a78 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e073      	b.n	8002b82 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d16e      	bne.n	8002b80 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f001 fa0e 	bl	8003ec8 <ETH_Prepare_Tx_Descriptors>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e05f      	b.n	8002b82 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3206      	adds	r2, #6
 8002aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ace:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d904      	bls.n	8002aec <HAL_ETH_Transmit+0x74>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	1f1a      	subs	r2, r3, #4
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	3106      	adds	r1, #6
 8002af8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002afc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002b00:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002b02:	f7ff fc03 	bl	800230c <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002b08:	e034      	b.n	8002b74 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	f043 0208 	orr.w	r2, r3, #8
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	22e0      	movs	r2, #224	; 0xe0
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e020      	b.n	8002b82 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d015      	beq.n	8002b74 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002b48:	f7ff fbe0 	bl	800230c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <HAL_ETH_Transmit+0xe6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22e0      	movs	r2, #224	; 0xe0
 8002b6e:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e006      	b.n	8002b82 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	dbc6      	blt.n	8002b0a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b089      	sub	sp, #36	; 0x24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3344      	adds	r3, #68	; 0x44
 8002b96:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d06b      	beq.n	8002c94 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e0ce      	b.n	8002d5e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d036      	beq.n	8002c40 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d902      	bls.n	8002bf4 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b04      	subs	r3, #4
 8002bf2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db11      	blt.n	8002c2a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2201      	movs	r2, #1
 8002c16:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d902      	bls.n	8002c2a <HAL_ETH_IsRxDataAvailable+0xa0>
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	3b04      	subs	r3, #4
 8002c28:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e08e      	b.n	8002d5e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002c50:	2301      	movs	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	3301      	adds	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d902      	bls.n	8002c66 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3b04      	subs	r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e010      	b.n	8002c94 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3301      	adds	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d902      	bls.n	8002c8a <HAL_ETH_IsRxDataAvailable+0x100>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3b04      	subs	r3, #4
 8002c88:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db02      	blt.n	8002ca2 <HAL_ETH_IsRxDataAvailable+0x118>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d98e      	bls.n	8002bc0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d056      	beq.n	8002d56 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e03b      	b.n	8002d40 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cd6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d20d      	bcs.n	8002d3a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d902      	bls.n	8002d30 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3bf      	bcc.n	8002cc8 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002d52:	440b      	add	r3, r1
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]

  return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	; 0x28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07d      	b.n	8002e9e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff feed 	bl	8002b8a <HAL_ETH_IsRxDataAvailable>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e071      	b.n	8002e9e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
 8002dce:	e031      	b.n	8002e34 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	461a      	mov	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e0a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d902      	bls.n	8002e1e <HAL_ETH_GetRxDataBuffer+0xb4>
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	3301      	adds	r3, #1
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3c7      	bcc.n	8002dd0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	461a      	mov	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d803      	bhi.n	8002e6a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e018      	b.n	8002e9c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	461a      	mov	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e001      	b.n	8002e9c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3344      	adds	r3, #68	; 0x44
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fe60 	bl	8002b8a <HAL_ETH_IsRxDataAvailable>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e017      	b.n	8002f04 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4413      	add	r3, r2
 8002edc:	3b01      	subs	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d902      	bls.n	8002eec <HAL_ETH_GetRxDataLength+0x46>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3b04      	subs	r3, #4
 8002eea:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3344      	adds	r3, #68	; 0x44
 8002f18:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e057      	b.n	8002fec <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e03b      	b.n	8002fc8 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f5e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d20d      	bcs.n	8002fc2 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d902      	bls.n	8002fb8 <HAL_ETH_BuildRxDescriptors+0xac>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b04      	subs	r3, #4
 8002fb6:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d3bf      	bcc.n	8002f50 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f241 1328 	movw	r3, #4392	; 0x1128
 8002fda:	440b      	add	r3, r1
 8002fdc:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3724      	adds	r7, #36	; 0x24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d113      	bne.n	800303a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f241 1334 	movw	r3, #4404	; 0x1134
 800301a:	4413      	add	r3, r2
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d109      	bne.n	800303a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f005 fc36 	bl	8008898 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003034:	f248 0240 	movw	r2, #32832	; 0x8040
 8003038:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d113      	bne.n	8003074 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f241 1334 	movw	r3, #4404	; 0x1134
 8003054:	4413      	add	r3, r2
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d109      	bne.n	8003074 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f8cb 	bl	80031fc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800306e:	f248 0201 	movw	r2, #32769	; 0x8001
 8003072:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003086:	d149      	bne.n	800311c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f241 1334 	movw	r3, #4404	; 0x1134
 8003090:	4413      	add	r3, r2
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800309c:	d13e      	bne.n	800311c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	f043 0208 	orr.w	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d11b      	bne.n	80030f6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	f241 1302 	movw	r3, #4354	; 0x1102
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f241 1334 	movw	r3, #4404	; 0x1134
 80030da:	4413      	add	r3, r2
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e6:	f241 1334 	movw	r3, #4404	; 0x1134
 80030ea:	440b      	add	r3, r1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	22e0      	movs	r2, #224	; 0xe0
 80030f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80030f4:	e00f      	b.n	8003116 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003110:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003114:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f87a 	bl	8003210 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003124:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003128:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800312c:	d10e      	bne.n	800314c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	22e0      	movs	r2, #224	; 0xe0
 800313e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f86f 	bl	8003224 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d10f      	bne.n	800317c <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003164:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f862 	bl	8003238 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d10f      	bne.n	80031ac <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f854 	bl	800324c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80031ac:	f7ff fa36 	bl	800261c <HAL_GetCurrentCPUID>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10d      	bne.n	80031d2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_ETH_IRQHandler+0x1fc>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d014      	beq.n	80031ec <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_ETH_IRQHandler+0x1fc>)
 80031c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f848 	bl	8003260 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80031d0:	e00c      	b.n	80031ec <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_ETH_IRQHandler+0x200>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_ETH_IRQHandler+0x200>)
 80031e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f83a 	bl	8003260 <HAL_ETH_WakeUpCallback>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	58000080 	.word	0x58000080
 80031f8:	580000c0 	.word	0x580000c0

080031fc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e03e      	b.n	8003314 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800329e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	055b      	lsls	r3, r3, #21
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f043 030c 	orr.w	r3, r3, #12
 80032c2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80032d6:	f7ff f819 	bl	800230c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80032de:	f7ff f815 	bl	800230c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ec:	d901      	bls.n	80032f2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e010      	b.n	8003314 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ed      	bne.n	80032de <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e03c      	b.n	80033b8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003346:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	055b      	lsls	r3, r3, #21
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 030c 	bic.w	r3, r3, #12
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_ETH_WritePHYRegister+0xa4>)
 800337e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003382:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <HAL_ETH_WritePHYRegister+0xa4>)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800338a:	f7fe ffbf 	bl	800230c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003390:	e009      	b.n	80033a6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003392:	f7fe ffbb 	bl	800230c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a0:	d901      	bls.n	80033a6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e008      	b.n	80033b8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ed      	bne.n	8003392 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40028000 	.word	0x40028000

080033c4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e1c3      	b.n	8003760 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0e5b      	lsrs	r3, r3, #25
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80036ec:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036fc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e00a      	b.n	8003796 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	2b10      	cmp	r3, #16
 8003786:	d105      	bne.n	8003794 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f860 	bl	8003850 <ETH_SetMACConfig>

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037b0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80037ba:	f001 ff95 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 80037be:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d908      	bls.n	80037da <HAL_ETH_SetMDIOClockRange+0x3a>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d804      	bhi.n	80037da <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e027      	b.n	800382a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d908      	bls.n	80037f4 <HAL_ETH_SetMDIOClockRange+0x54>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d204      	bcs.n	80037f4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e01a      	b.n	800382a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d303      	bcc.n	8003804 <HAL_ETH_SetMDIOClockRange+0x64>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d911      	bls.n	8003828 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d908      	bls.n	800381e <HAL_ETH_SetMDIOClockRange+0x7e>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d804      	bhi.n	800381e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e005      	b.n	800382a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e000      	b.n	800382a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003828:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	01312cff 	.word	0x01312cff
 8003840:	02160ebf 	.word	0x02160ebf
 8003844:	03938700 	.word	0x03938700
 8003848:	05f5e0ff 	.word	0x05f5e0ff
 800384c:	08f0d17f 	.word	0x08f0d17f

08003850 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003862:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	791b      	ldrb	r3, [r3, #4]
 8003868:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800386a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7b1b      	ldrb	r3, [r3, #12]
 8003870:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003872:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	7b5b      	ldrb	r3, [r3, #13]
 8003878:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800387a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	7b9b      	ldrb	r3, [r3, #14]
 8003880:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003882:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	7bdb      	ldrb	r3, [r3, #15]
 8003888:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800388a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	7c12      	ldrb	r2, [r2, #16]
 8003890:	2a00      	cmp	r2, #0
 8003892:	d102      	bne.n	800389a <ETH_SetMACConfig+0x4a>
 8003894:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003898:	e000      	b.n	800389c <ETH_SetMACConfig+0x4c>
 800389a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800389c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	7c52      	ldrb	r2, [r2, #17]
 80038a2:	2a00      	cmp	r2, #0
 80038a4:	d102      	bne.n	80038ac <ETH_SetMACConfig+0x5c>
 80038a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038aa:	e000      	b.n	80038ae <ETH_SetMACConfig+0x5e>
 80038ac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80038ae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	7c9b      	ldrb	r3, [r3, #18]
 80038b4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80038b6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80038bc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80038c2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	7f1b      	ldrb	r3, [r3, #28]
 80038c8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80038ca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	7f5b      	ldrb	r3, [r3, #29]
 80038d0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80038d2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	7f92      	ldrb	r2, [r2, #30]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d102      	bne.n	80038e2 <ETH_SetMACConfig+0x92>
 80038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e0:	e000      	b.n	80038e4 <ETH_SetMACConfig+0x94>
 80038e2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80038e4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7fdb      	ldrb	r3, [r3, #31]
 80038ea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80038ec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d102      	bne.n	80038fe <ETH_SetMACConfig+0xae>
 80038f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fc:	e000      	b.n	8003900 <ETH_SetMACConfig+0xb0>
 80038fe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003900:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003906:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003910:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <ETH_SetMACConfig+0x22c>)
 8003922:	4013      	ands	r3, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	430b      	orrs	r3, r1
 800392c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800393a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800393c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003944:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003946:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800394e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003950:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003958:	2a00      	cmp	r2, #0
 800395a:	d102      	bne.n	8003962 <ETH_SetMACConfig+0x112>
 800395c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003960:	e000      	b.n	8003964 <ETH_SetMACConfig+0x114>
 8003962:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003964:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <ETH_SetMACConfig+0x230>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	430b      	orrs	r3, r1
 8003980:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003988:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <ETH_SetMACConfig+0x234>)
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	430b      	orrs	r3, r1
 80039a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039b2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d101      	bne.n	80039c2 <ETH_SetMACConfig+0x172>
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	e000      	b.n	80039c4 <ETH_SetMACConfig+0x174>
 80039c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80039c4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80039da:	4013      	ands	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80039ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80039f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f023 0103 	bic.w	r1, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003a1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d101      	bne.n	8003a3e <ETH_SetMACConfig+0x1ee>
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	e000      	b.n	8003a40 <ETH_SetMACConfig+0x1f0>
 8003a3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003a40:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003a48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a4a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003a52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003a60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	00048083 	.word	0x00048083
 8003a80:	c0f88000 	.word	0xc0f88000
 8003a84:	fffffef0 	.word	0xfffffef0

08003a88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <ETH_SetDMAConfig+0xf8>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6809      	ldr	r1, [r1, #0]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003aae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	791b      	ldrb	r3, [r3, #4]
 8003ab4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003aba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	7b1b      	ldrb	r3, [r3, #12]
 8003ac0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ace:	4413      	add	r3, r2
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <ETH_SetDMAConfig+0xfc>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ae2:	440b      	add	r3, r1
 8003ae4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	7b5b      	ldrb	r3, [r3, #13]
 8003aea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <ETH_SetDMAConfig+0x100>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6811      	ldr	r1, [r2, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003b0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	7d1b      	ldrb	r3, [r3, #20]
 8003b18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	7f5b      	ldrb	r3, [r3, #29]
 8003b20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b2e:	4413      	add	r3, r2
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <ETH_SetDMAConfig+0x104>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6811      	ldr	r1, [r2, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b42:	440b      	add	r3, r1
 8003b44:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	7f1b      	ldrb	r3, [r3, #28]
 8003b4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b5c:	4413      	add	r3, r2
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <ETH_SetDMAConfig+0x108>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b70:	440b      	add	r3, r1
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	ffff87fd 	.word	0xffff87fd
 8003b84:	ffff2ffe 	.word	0xffff2ffe
 8003b88:	fffec000 	.word	0xfffec000
 8003b8c:	ffc0efef 	.word	0xffc0efef
 8003b90:	7fc0ffff 	.word	0x7fc0ffff

08003b94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0a4      	sub	sp, #144	; 0x90
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003bec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c16:	2300      	movs	r3, #0
 8003c18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003c3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fde6 	bl	8003850 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ca2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003cb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fee1 	bl	8003a88 <ETH_SetDMAConfig>
}
 8003cc6:	bf00      	nop
 8003cc8:	3790      	adds	r7, #144	; 0x90
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003cea:	f001 fcfd 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8003cee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d908      	bls.n	8003d0a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d804      	bhi.n	8003d0a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e027      	b.n	8003d5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d908      	bls.n	8003d24 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d204      	bcs.n	8003d24 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e01a      	b.n	8003d5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d303      	bcc.n	8003d34 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d911      	bls.n	8003d58 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d908      	bls.n	8003d4e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a0f      	ldr	r2, [pc, #60]	; (8003d7c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d804      	bhi.n	8003d4e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e005      	b.n	8003d5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e000      	b.n	8003d5a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003d58:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	01312cff 	.word	0x01312cff
 8003d70:	02160ebf 	.word	0x02160ebf
 8003d74:	03938700 	.word	0x03938700
 8003d78:	05f5e0ff 	.word	0x05f5e0ff
 8003d7c:	08f0d17f 	.word	0x08f0d17f

08003d80 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e01d      	b.n	8003dca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68d9      	ldr	r1, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	3206      	adds	r2, #6
 8003dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d9de      	bls.n	8003d8e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f241 132c 	movw	r3, #4396	; 0x112c
 8003dde:	4413      	add	r3, r2
 8003de0:	2203      	movs	r2, #3
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68d9      	ldr	r1, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	f241 1314 	movw	r3, #4372	; 0x1114
 8003df0:	4413      	add	r3, r2
 8003df2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e024      	b.n	8003e66 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6919      	ldr	r1, [r3, #16]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3310      	adds	r3, #16
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d9d7      	bls.n	8003e1c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003e92:	4413      	add	r3, r2
 8003e94:	2203      	movs	r2, #3
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6919      	ldr	r1, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f241 131c 	movw	r3, #4380	; 0x111c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	f241 1328 	movw	r3, #4392	; 0x1128
 8003eb8:	4413      	add	r3, r2
 8003eba:	6019      	str	r1, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b08d      	sub	sp, #52	; 0x34
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3318      	adds	r3, #24
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0a:	d007      	beq.n	8003f1c <ETH_Prepare_Tx_Descriptors+0x54>
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	3304      	adds	r3, #4
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e24a      	b.n	80043b6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d044      	beq.n	8003fb6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4b72      	ldr	r3, [pc, #456]	; (80040fc <ETH_Prepare_Tx_Descriptors+0x234>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f58:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d027      	beq.n	8003fb6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	431a      	orrs	r2, r3
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fa4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fb4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	6992      	ldr	r2, [r2, #24]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <ETH_Prepare_Tx_Descriptors+0x130>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d030      	beq.n	800405a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	3301      	adds	r3, #1
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	2b03      	cmp	r3, #3
 800401a:	d902      	bls.n	8004022 <ETH_Prepare_Tx_Descriptors+0x15a>
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	3b04      	subs	r3, #4
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	3301      	adds	r3, #1
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800403a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800403e:	d10c      	bne.n	800405a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004048:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e1ad      	b.n	80043b6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	3301      	adds	r3, #1
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004070:	4013      	ands	r3, r2
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d012      	beq.n	80040aa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800409a:	4013      	ands	r3, r2
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	6852      	ldr	r2, [r2, #4]
 80040a0:	0412      	lsls	r2, r2, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	e008      	b.n	80040bc <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d021      	beq.n	800410c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	04db      	lsls	r3, r3, #19
 80040d6:	431a      	orrs	r2, r3
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <ETH_Prepare_Tx_Descriptors+0x240>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	69d2      	ldr	r2, [r2, #28]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e02e      	b.n	800415a <ETH_Prepare_Tx_Descriptors+0x292>
 80040fc:	ffff0000 	.word	0xffff0000
 8004100:	ffffc000 	.word	0xffffc000
 8004104:	c000ffff 	.word	0xc000ffff
 8004108:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b93      	ldr	r3, [pc, #588]	; (8004360 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	431a      	orrs	r2, r3
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	431a      	orrs	r2, r3
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80cb 	beq.w	8004340 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80041bc:	e0c0      	b.n	8004340 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	3301      	adds	r3, #1
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d902      	bls.n	80041dc <ETH_Prepare_Tx_Descriptors+0x314>
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	3b04      	subs	r3, #4
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fe:	d007      	beq.n	8004210 <ETH_Prepare_Tx_Descriptors+0x348>
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	3304      	adds	r3, #4
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d026      	beq.n	800425e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	e016      	b.n	8004252 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	3301      	adds	r3, #1
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	2b03      	cmp	r3, #3
 800423a:	d902      	bls.n	8004242 <ETH_Prepare_Tx_Descriptors+0x37a>
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	3b04      	subs	r3, #4
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	3301      	adds	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	429a      	cmp	r2, r3
 8004258:	d3e4      	bcc.n	8004224 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	e0ab      	b.n	80043b6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	3301      	adds	r3, #1
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800427a:	4013      	ands	r3, r2
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	431a      	orrs	r2, r3
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	6852      	ldr	r2, [r2, #4]
 80042aa:	0412      	lsls	r2, r2, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	e008      	b.n	80042c6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2200      	movs	r2, #0
 80042b8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00f      	beq.n	80042f2 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80042d8:	4013      	ands	r3, r2
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	69d2      	ldr	r2, [r2, #28]
 80042de:	431a      	orrs	r2, r3
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e017      	b.n	8004322 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <ETH_Prepare_Tx_Descriptors+0x498>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	6852      	ldr	r2, [r2, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	431a      	orrs	r2, r3
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3301      	adds	r3, #1
 8004326:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f af3a 	bne.w	80041be <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00f      	beq.n	8004370 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e00e      	b.n	800437c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800435e:	bf00      	nop
 8004360:	ffff8000 	.word	0xffff8000
 8004364:	ffffc000 	.word	0xffffc000
 8004368:	c000ffff 	.word	0xc000ffff
 800436c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	3304      	adds	r3, #4
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800439e:	b672      	cpsid	i
}
 80043a0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80043b0:	b662      	cpsie	i
}
 80043b2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3734      	adds	r7, #52	; 0x34
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043d2:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <HAL_GPIO_Init+0x234>)
 80043d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043d6:	e194      	b.n	8004702 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8186 	beq.w	80046fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d00b      	beq.n	8004410 <HAL_GPIO_Init+0x4c>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d007      	beq.n	8004410 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004404:	2b11      	cmp	r3, #17
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b12      	cmp	r3, #18
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0201 	and.w	r2, r3, #1
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2203      	movs	r2, #3
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0xee>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b12      	cmp	r3, #18
 80044b0:	d123      	bne.n	80044fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	08da      	lsrs	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3208      	adds	r2, #8
 80044ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2203      	movs	r2, #3
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0203 	and.w	r2, r3, #3
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80e0 	beq.w	80046fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_GPIO_Init+0x238>)
 800453e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004542:	4a2e      	ldr	r2, [pc, #184]	; (80045fc <HAL_GPIO_Init+0x238>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_GPIO_Init+0x238>)
 800454e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_GPIO_Init+0x23c>)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	3302      	adds	r3, #2
 8004562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	220f      	movs	r2, #15
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a20      	ldr	r2, [pc, #128]	; (8004604 <HAL_GPIO_Init+0x240>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d052      	beq.n	800462c <HAL_GPIO_Init+0x268>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_GPIO_Init+0x244>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d031      	beq.n	80045f2 <HAL_GPIO_Init+0x22e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_GPIO_Init+0x248>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02b      	beq.n	80045ee <HAL_GPIO_Init+0x22a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <HAL_GPIO_Init+0x24c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d025      	beq.n	80045ea <HAL_GPIO_Init+0x226>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <HAL_GPIO_Init+0x250>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01f      	beq.n	80045e6 <HAL_GPIO_Init+0x222>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_GPIO_Init+0x254>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d019      	beq.n	80045e2 <HAL_GPIO_Init+0x21e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_GPIO_Init+0x258>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_GPIO_Init+0x21a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_GPIO_Init+0x25c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00d      	beq.n	80045da <HAL_GPIO_Init+0x216>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_GPIO_Init+0x260>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <HAL_GPIO_Init+0x212>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_GPIO_Init+0x264>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_GPIO_Init+0x20e>
 80045ce:	2309      	movs	r3, #9
 80045d0:	e02d      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045d2:	230a      	movs	r3, #10
 80045d4:	e02b      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045d6:	2308      	movs	r3, #8
 80045d8:	e029      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045da:	2307      	movs	r3, #7
 80045dc:	e027      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045de:	2306      	movs	r3, #6
 80045e0:	e025      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045e2:	2305      	movs	r3, #5
 80045e4:	e023      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045e6:	2304      	movs	r3, #4
 80045e8:	e021      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045ea:	2303      	movs	r3, #3
 80045ec:	e01f      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e01d      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e01b      	b.n	800462e <HAL_GPIO_Init+0x26a>
 80045f6:	bf00      	nop
 80045f8:	58000080 	.word	0x58000080
 80045fc:	58024400 	.word	0x58024400
 8004600:	58000400 	.word	0x58000400
 8004604:	58020000 	.word	0x58020000
 8004608:	58020400 	.word	0x58020400
 800460c:	58020800 	.word	0x58020800
 8004610:	58020c00 	.word	0x58020c00
 8004614:	58021000 	.word	0x58021000
 8004618:	58021400 	.word	0x58021400
 800461c:	58021800 	.word	0x58021800
 8004620:	58021c00 	.word	0x58021c00
 8004624:	58022000 	.word	0x58022000
 8004628:	58022400 	.word	0x58022400
 800462c:	2300      	movs	r3, #0
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	f002 0203 	and.w	r2, r2, #3
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	4093      	lsls	r3, r2
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800463e:	4938      	ldr	r1, [pc, #224]	; (8004720 <HAL_GPIO_Init+0x35c>)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f ae63 	bne.w	80043d8 <HAL_GPIO_Init+0x14>
  }
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	3724      	adds	r7, #36	; 0x24
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	58000400 	.word	0x58000400

08004724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	4613      	mov	r3, r2
 8004732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004734:	787b      	ldrb	r3, [r7, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004740:	e003      	b.n	800474a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004742:	887b      	ldrh	r3, [r7, #2]
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	619a      	str	r2, [r3, #24]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <HAL_HSEM_FastTake+0x2c>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_HSEM_FastTake+0x30>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	58026400 	.word	0x58026400
 8004788:	80000300 	.word	0x80000300

0800478c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004796:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_HSEM_Release+0x24>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	58026400 	.word	0x58026400

080047b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	2b06      	cmp	r3, #6
 80047c6:	d00a      	beq.n	80047de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e040      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e03e      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047de:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80047e6:	491f      	ldr	r1, [pc, #124]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047ee:	f7fd fd8d 	bl	800230c <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047f4:	e009      	b.n	800480a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047f6:	f7fd fd89 	bl	800230c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004804:	d901      	bls.n	800480a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e028      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800480a:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004816:	d1ee      	bne.n	80047f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b1e      	cmp	r3, #30
 800481c:	d008      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b2e      	cmp	r3, #46	; 0x2e
 8004822:	d005      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b1d      	cmp	r3, #29
 8004828:	d002      	beq.n	8004830 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b2d      	cmp	r3, #45	; 0x2d
 800482e:	d114      	bne.n	800485a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004830:	f7fd fd6c 	bl	800230c <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004836:	e009      	b.n	800484c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004838:	f7fd fd68 	bl	800230c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004846:	d901      	bls.n	800484c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_PWREx_ConfigSupply+0xb0>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d1ee      	bne.n	8004838 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	58024800 	.word	0x58024800

08004868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e3ff      	b.n	800507a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004888:	4b99      	ldr	r3, [pc, #612]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004892:	4b97      	ldr	r3, [pc, #604]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b10      	cmp	r3, #16
 800489c:	d007      	beq.n	80048ae <HAL_RCC_OscConfig+0x46>
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b18      	cmp	r3, #24
 80048a2:	d110      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ae:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <HAL_RCC_OscConfig+0x12c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d168      	bne.n	8004994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e3d9      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x76>
 80048d0:	4b87      	ldr	r3, [pc, #540]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a86      	ldr	r2, [pc, #536]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e02e      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b82      	ldr	r3, [pc, #520]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a81      	ldr	r2, [pc, #516]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0xbc>
 800490a:	4b79      	ldr	r3, [pc, #484]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a75      	ldr	r2, [pc, #468]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004924:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a71      	ldr	r2, [pc, #452]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6e      	ldr	r2, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fce2 	bl	800230c <HAL_GetTick>
 8004948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fcde 	bl	800230c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e38d      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800495e:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xe4>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fcce 	bl	800230c <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fcca 	bl	800230c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e379      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004986:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x10c>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80ae 	beq.w	8004b00 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a4:	4b52      	ldr	r3, [pc, #328]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ae:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_RCC_OscConfig+0x162>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b18      	cmp	r3, #24
 80049be:	d13a      	bne.n	8004a36 <HAL_RCC_OscConfig+0x1ce>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d135      	bne.n	8004a36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ca:	4b49      	ldr	r3, [pc, #292]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e34b      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e2:	f7fd fc9f 	bl	8002324 <HAL_GetREVID>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d817      	bhi.n	8004a20 <HAL_RCC_OscConfig+0x1b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d108      	bne.n	8004a0a <HAL_RCC_OscConfig+0x1a2>
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a08:	e07a      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	031b      	lsls	r3, r3, #12
 8004a18:	4935      	ldr	r1, [pc, #212]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1e:	e06f      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	4930      	ldr	r1, [pc, #192]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	e064      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d045      	beq.n	8004aca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 0219 	bic.w	r2, r3, #25
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4929      	ldr	r1, [pc, #164]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fc5c 	bl	800230c <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fc58 	bl	800230c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e307      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	f7fd fc55 	bl	8002324 <HAL_GetREVID>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d817      	bhi.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d108      	bne.n	8004a9e <HAL_RCC_OscConfig+0x236>
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	e030      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	4910      	ldr	r1, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
 8004ab2:	e025      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	490b      	ldr	r1, [pc, #44]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	e01a      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fc19 	bl	800230c <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fd fc15 	bl	800230c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d903      	bls.n	8004af4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e2c4      	b.n	800507a <HAL_RCC_OscConfig+0x812>
 8004af0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004af4:	4ba4      	ldr	r3, [pc, #656]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a9 	beq.w	8004c60 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b9e      	ldr	r3, [pc, #632]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b18:	4b9b      	ldr	r3, [pc, #620]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d007      	beq.n	8004b34 <HAL_RCC_OscConfig+0x2cc>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b18      	cmp	r3, #24
 8004b28:	d13a      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x338>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d135      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b34:	4b94      	ldr	r3, [pc, #592]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2e4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e296      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b4c:	f7fd fbea 	bl	8002324 <HAL_GetREVID>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d817      	bhi.n	8004b8a <HAL_RCC_OscConfig+0x322>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d108      	bne.n	8004b74 <HAL_RCC_OscConfig+0x30c>
 8004b62:	4b89      	ldr	r3, [pc, #548]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b6a:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b72:	e075      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b74:	4b84      	ldr	r3, [pc, #528]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	069b      	lsls	r3, r3, #26
 8004b82:	4981      	ldr	r1, [pc, #516]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b88:	e06a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	497b      	ldr	r1, [pc, #492]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b9e:	e05f      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d042      	beq.n	8004c2e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ba8:	4b77      	ldr	r3, [pc, #476]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fbaa 	bl	800230c <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bbc:	f7fd fba6 	bl	800230c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e255      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bce:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bda:	f7fd fba3 	bl	8002324 <HAL_GetREVID>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d817      	bhi.n	8004c18 <HAL_RCC_OscConfig+0x3b0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d108      	bne.n	8004c02 <HAL_RCC_OscConfig+0x39a>
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bf8:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfe:	6053      	str	r3, [r2, #4]
 8004c00:	e02e      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
 8004c02:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	495d      	ldr	r1, [pc, #372]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
 8004c16:	e023      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
 8004c18:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	4958      	ldr	r1, [pc, #352]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60cb      	str	r3, [r1, #12]
 8004c2c:	e018      	b.n	8004c60 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c2e:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a55      	ldr	r2, [pc, #340]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fb67 	bl	800230c <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c42:	f7fd fb63 	bl	800230c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e212      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c54:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d036      	beq.n	8004cda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c74:	4b44      	ldr	r3, [pc, #272]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fd fb44 	bl	800230c <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fd fb40 	bl	800230c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1ef      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x420>
 8004ca6:	e018      	b.n	8004cda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca8:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cac:	4a36      	ldr	r2, [pc, #216]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fb2a 	bl	800230c <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd fb26 	bl	800230c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1d5      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d036      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d019      	beq.n	8004d22 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fb07 	bl	800230c <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d02:	f7fd fb03 	bl	800230c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1b2      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x49a>
 8004d20:	e018      	b.n	8004d54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d22:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d2e:	f7fd faed 	bl	800230c <HAL_GetTick>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d36:	f7fd fae9 	bl	800230c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e198      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCC_OscConfig+0x520>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8085 	beq.w	8004e6c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_OscConfig+0x524>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <HAL_RCC_OscConfig+0x524>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6e:	f7fd facd 	bl	800230c <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d74:	e00c      	b.n	8004d90 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fd fac9 	bl	800230c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d905      	bls.n	8004d90 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e178      	b.n	800507a <HAL_RCC_OscConfig+0x812>
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d90:	4b96      	ldr	r3, [pc, #600]	; (8004fec <HAL_RCC_OscConfig+0x784>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x54a>
 8004da4:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a91      	ldr	r2, [pc, #580]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
 8004db0:	e02d      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x56c>
 8004dba:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a8c      	ldr	r2, [pc, #560]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc6:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	4a89      	ldr	r2, [pc, #548]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd2:	e01c      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x58e>
 8004ddc:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a83      	ldr	r2, [pc, #524]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	4b81      	ldr	r3, [pc, #516]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a80      	ldr	r2, [pc, #512]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	e00b      	b.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004df6:	4b7e      	ldr	r3, [pc, #504]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a7d      	ldr	r2, [pc, #500]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a7a      	ldr	r2, [pc, #488]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d015      	beq.n	8004e42 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fd fa79 	bl	800230c <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd fa75 	bl	800230c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e122      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e34:	4b6e      	ldr	r3, [pc, #440]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ee      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5b6>
 8004e40:	e014      	b.n	8004e6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd fa63 	bl	800230c <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fd fa5f 	bl	800230c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e10c      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e60:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ee      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8101 	beq.w	8005078 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e76:	4b5e      	ldr	r3, [pc, #376]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	2b18      	cmp	r3, #24
 8004e80:	f000 80bc 	beq.w	8004ffc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f040 8095 	bne.w	8004fb8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b58      	ldr	r3, [pc, #352]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a57      	ldr	r2, [pc, #348]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fa37 	bl	800230c <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fd fa33 	bl	800230c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0e2      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb4:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCC_OscConfig+0x78c>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	4946      	ldr	r1, [pc, #280]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	628b      	str	r3, [r1, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	025b      	lsls	r3, r3, #9
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	3b01      	subs	r3, #1
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f0a:	4939      	ldr	r1, [pc, #228]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f10:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a36      	ldr	r2, [pc, #216]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_RCC_OscConfig+0x790>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f28:	00d2      	lsls	r2, r2, #3
 8004f2a:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f30:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f023 020c 	bic.w	r2, r3, #12
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	492c      	ldr	r1, [pc, #176]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f42:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	f023 0202 	bic.w	r2, r3, #2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4928      	ldr	r1, [pc, #160]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f54:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fd f9bc 	bl	800230c <HAL_GetTick>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fd f9b8 	bl	800230c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e067      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x730>
 8004fb6:	e05f      	b.n	8005078 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd f9a2 	bl	800230c <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd f99e 	bl	800230c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04d      	b.n	800507a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <HAL_RCC_OscConfig+0x788>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x764>
 8004fea:	e045      	b.n	8005078 <HAL_RCC_OscConfig+0x810>
 8004fec:	58024800 	.word	0x58024800
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	fffffc0c 	.word	0xfffffc0c
 8004ff8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <HAL_RCC_OscConfig+0x81c>)
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005002:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCC_OscConfig+0x81c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d031      	beq.n	8005074 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d12a      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d122      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d11a      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	0a5b      	lsrs	r3, r3, #9
 8005042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d111      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d108      	bne.n	8005074 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400

08005088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e19c      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b8a      	ldr	r3, [pc, #552]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d910      	bls.n	80050cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b87      	ldr	r3, [pc, #540]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 020f 	bic.w	r2, r3, #15
 80050b2:	4985      	ldr	r1, [pc, #532]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e184      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d010      	beq.n	80050fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d908      	bls.n	80050fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	4975      	ldr	r1, [pc, #468]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	4b70      	ldr	r3, [pc, #448]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005112:	429a      	cmp	r2, r3
 8005114:	d908      	bls.n	8005128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005116:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	496a      	ldr	r1, [pc, #424]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005124:	4313      	orrs	r3, r2
 8005126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d010      	beq.n	8005156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	4b64      	ldr	r3, [pc, #400]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005140:	429a      	cmp	r2, r3
 8005142:	d908      	bls.n	8005156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005144:	4b61      	ldr	r3, [pc, #388]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	495e      	ldr	r1, [pc, #376]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005152:	4313      	orrs	r3, r2
 8005154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800516e:	429a      	cmp	r2, r3
 8005170:	d908      	bls.n	8005184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005172:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	4953      	ldr	r1, [pc, #332]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005180:	4313      	orrs	r3, r2
 8005182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	429a      	cmp	r2, r3
 800519e:	d908      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f023 020f 	bic.w	r2, r3, #15
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4947      	ldr	r1, [pc, #284]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d055      	beq.n	800526a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051be:	4b43      	ldr	r3, [pc, #268]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4940      	ldr	r1, [pc, #256]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051d8:	4b3c      	ldr	r3, [pc, #240]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0f6      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d115      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0ea      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005208:	4b30      	ldr	r3, [pc, #192]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0de      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0d6      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f023 0207 	bic.w	r2, r3, #7
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4925      	ldr	r1, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005236:	4313      	orrs	r3, r2
 8005238:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fd f867 	bl	800230c <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005240:	e00a      	b.n	8005258 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fd f863 	bl	800230c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0be      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	429a      	cmp	r2, r3
 8005268:	d1eb      	bne.n	8005242 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	429a      	cmp	r2, r3
 8005284:	d208      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005286:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f023 020f 	bic.w	r2, r3, #15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	490e      	ldr	r1, [pc, #56]	; (80052cc <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d214      	bcs.n	80052d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	4906      	ldr	r1, [pc, #24]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e086      	b.n	80053d6 <HAL_RCC_ClockConfig+0x34e>
 80052c8:	52002000 	.word	0x52002000
 80052cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d208      	bcs.n	80052fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052ec:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4939      	ldr	r1, [pc, #228]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005316:	429a      	cmp	r2, r3
 8005318:	d208      	bcs.n	800532c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800531a:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	492e      	ldr	r1, [pc, #184]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005328:	4313      	orrs	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005344:	429a      	cmp	r2, r3
 8005346:	d208      	bcs.n	800535a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	4922      	ldr	r1, [pc, #136]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005356:	4313      	orrs	r3, r2
 8005358:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005372:	429a      	cmp	r2, r3
 8005374:	d208      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4917      	ldr	r1, [pc, #92]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005384:	4313      	orrs	r3, r2
 8005386:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005388:	f000 f834 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	4912      	ldr	r1, [pc, #72]	; (80053e4 <HAL_RCC_ClockConfig+0x35c>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCC_ClockConfig+0x358>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <HAL_RCC_ClockConfig+0x35c>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x360>)
 80053be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x364>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x368>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc fc5a 	bl	8001c84 <HAL_InitTick>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
 80053e4:	080230c8 	.word	0x080230c8
 80053e8:	24000004 	.word	0x24000004
 80053ec:	24000000 	.word	0x24000000
 80053f0:	24000008 	.word	0x24000008

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053fa:	4bb3      	ldr	r3, [pc, #716]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005402:	2b18      	cmp	r3, #24
 8005404:	f200 8155 	bhi.w	80056b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005475 	.word	0x08005475
 8005414:	080056b3 	.word	0x080056b3
 8005418:	080056b3 	.word	0x080056b3
 800541c:	080056b3 	.word	0x080056b3
 8005420:	080056b3 	.word	0x080056b3
 8005424:	080056b3 	.word	0x080056b3
 8005428:	080056b3 	.word	0x080056b3
 800542c:	080056b3 	.word	0x080056b3
 8005430:	0800549b 	.word	0x0800549b
 8005434:	080056b3 	.word	0x080056b3
 8005438:	080056b3 	.word	0x080056b3
 800543c:	080056b3 	.word	0x080056b3
 8005440:	080056b3 	.word	0x080056b3
 8005444:	080056b3 	.word	0x080056b3
 8005448:	080056b3 	.word	0x080056b3
 800544c:	080056b3 	.word	0x080056b3
 8005450:	080054a1 	.word	0x080054a1
 8005454:	080056b3 	.word	0x080056b3
 8005458:	080056b3 	.word	0x080056b3
 800545c:	080056b3 	.word	0x080056b3
 8005460:	080056b3 	.word	0x080056b3
 8005464:	080056b3 	.word	0x080056b3
 8005468:	080056b3 	.word	0x080056b3
 800546c:	080056b3 	.word	0x080056b3
 8005470:	080054a7 	.word	0x080054a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005480:	4b91      	ldr	r3, [pc, #580]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	4a90      	ldr	r2, [pc, #576]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005492:	e111      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005494:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005496:	61bb      	str	r3, [r7, #24]
    break;
 8005498:	e10e      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800549a:	4b8d      	ldr	r3, [pc, #564]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800549c:	61bb      	str	r3, [r7, #24]
    break;
 800549e:	e10b      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054a0:	4b8c      	ldr	r3, [pc, #560]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054a2:	61bb      	str	r3, [r7, #24]
    break;
 80054a4:	e108      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a6:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054b0:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054bc:	4b82      	ldr	r3, [pc, #520]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054c6:	4b80      	ldr	r3, [pc, #512]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	08db      	lsrs	r3, r3, #3
 80054cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80e1 	beq.w	80056ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	f000 8083 	beq.w	80055f8 <HAL_RCC_GetSysClockFreq+0x204>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	f200 80a1 	bhi.w	800563c <HAL_RCC_GetSysClockFreq+0x248>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x114>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d056      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005506:	e099      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005508:	4b6f      	ldr	r3, [pc, #444]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02d      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005514:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005552:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800556e:	e087      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800557e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005582:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	ed97 6a02 	vldr	s12, [r7, #8]
 8005596:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b2:	e065      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c6:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055f6:	e043      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005602:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a02 	vldr	s12, [r7, #8]
 800561e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563a:	e021      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005662:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800567e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	0a5b      	lsrs	r3, r3, #9
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	3301      	adds	r3, #1
 800568c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005698:	edd7 6a07 	vldr	s13, [r7, #28]
 800569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a4:	ee17 3a90 	vmov	r3, s15
 80056a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056aa:	e005      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    break;
 80056b0:	e002      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056b4:	61bb      	str	r3, [r7, #24]
    break;
 80056b6:	bf00      	nop
  }

  return sysclockfreq;
 80056b8:	69bb      	ldr	r3, [r7, #24]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	003d0900 	.word	0x003d0900
 80056d4:	017d7840 	.word	0x017d7840
 80056d8:	46000000 	.word	0x46000000
 80056dc:	4c742400 	.word	0x4c742400
 80056e0:	4a742400 	.word	0x4a742400
 80056e4:	4bbebc20 	.word	0x4bbebc20

080056e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056ee:	f7ff fe81 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_RCC_GetHCLKFreq+0x50>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490f      	ldr	r1, [pc, #60]	; (800573c <HAL_RCC_GetHCLKFreq+0x54>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <HAL_RCC_GetHCLKFreq+0x50>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <HAL_RCC_GetHCLKFreq+0x54>)
 8005716:	5cd3      	ldrb	r3, [r2, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_RCC_GetHCLKFreq+0x58>)
 8005724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_RCC_GetHCLKFreq+0x58>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	58024400 	.word	0x58024400
 800573c:	080230c8 	.word	0x080230c8
 8005740:	24000004 	.word	0x24000004
 8005744:	24000000 	.word	0x24000000

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800574c:	f7ff ffcc 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4904      	ldr	r1, [pc, #16]	; (8005770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	58024400 	.word	0x58024400
 8005770:	080230c8 	.word	0x080230c8

08005774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005778:	f7ff ffb6 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4904      	ldr	r1, [pc, #16]	; (800579c <HAL_RCC_GetPCLK2Freq+0x28>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	080230c8 	.word	0x080230c8

080057a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	223f      	movs	r2, #63	; 0x3f
 80057ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0207 	and.w	r2, r3, #7
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80057bc:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_RCC_GetClockConfig+0x7c>)
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_RCC_GetClockConfig+0x80>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	58024400 	.word	0x58024400
 8005820:	52002000 	.word	0x52002000

08005824 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800582c:	2300      	movs	r3, #0
 800582e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005830:	2300      	movs	r3, #0
 8005832:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d03f      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005848:	d02a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800584a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800584e:	d824      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005854:	d018      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585a:	d81e      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005864:	d007      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005866:	e018      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4bab      	ldr	r3, [pc, #684]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4aaa      	ldr	r2, [pc, #680]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005874:	e015      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3304      	adds	r3, #4
 800587a:	2102      	movs	r1, #2
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f9cf 	bl	8006c20 <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005886:	e00c      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3324      	adds	r3, #36	; 0x24
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fa78 	bl	8006d84 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
      break;
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058a8:	4b9b      	ldr	r3, [pc, #620]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b4:	4998      	ldr	r1, [pc, #608]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	650b      	str	r3, [r1, #80]	; 0x50
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d03d      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d826      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	080058f1 	.word	0x080058f1
 80058e0:	080058ff 	.word	0x080058ff
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005929 	.word	0x08005929
 80058ec:	08005929 	.word	0x08005929
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f0:	4b89      	ldr	r3, [pc, #548]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a88      	ldr	r2, [pc, #544]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058fc:	e015      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f98b 	bl	8006c20 <RCCEx_PLL2_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800590e:	e00c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3324      	adds	r3, #36	; 0x24
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fa34 	bl	8006d84 <RCCEx_PLL3_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
      break;
 8005926:	e000      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005930:	4b79      	ldr	r3, [pc, #484]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	f023 0207 	bic.w	r2, r3, #7
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	4976      	ldr	r1, [pc, #472]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	650b      	str	r3, [r1, #80]	; 0x50
 8005942:	e001      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005950:	2b00      	cmp	r3, #0
 8005952:	d042      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595c:	d02b      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d825      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005964:	2bc0      	cmp	r3, #192	; 0xc0
 8005966:	d028      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005968:	2bc0      	cmp	r3, #192	; 0xc0
 800596a:	d821      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d016      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d81d      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d007      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800597c:	e018      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597e:	4b66      	ldr	r3, [pc, #408]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a65      	ldr	r2, [pc, #404]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800598a:	e017      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f944 	bl	8006c20 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800599c:	e00e      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f9ed 	bl	8006d84 <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059ae:	e005      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059c2:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	4952      	ldr	r1, [pc, #328]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	650b      	str	r3, [r1, #80]	; 0x50
 80059d4:	e001      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d049      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059f0:	d030      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80059f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059f6:	d82a      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059fc:	d02c      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80059fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a02:	d824      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a08:	d018      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0e:	d81e      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a18:	d007      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1c:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a3d      	ldr	r2, [pc, #244]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a28:	e017      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f8f5 	bl	8006c20 <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a3a:	e00e      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 f99e 	bl	8006d84 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a4c:	e005      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
      break;
 8005a52:	e002      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a6e:	492a      	ldr	r1, [pc, #168]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	658b      	str	r3, [r1, #88]	; 0x58
 8005a74:	e001      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04c      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a90:	d030      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a96:	d82a      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a9c:	d02c      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aa2:	d824      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa8:	d018      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aae:	d81e      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab8:	d007      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005aba:	e018      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ac8:	e017      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f8a5 	bl	8006c20 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ada:	e00e      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 f94e 	bl	8006d84 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aec:	e005      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
      break;
 8005af2:	e002      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b0e:	4902      	ldr	r1, [pc, #8]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	658b      	str	r3, [r1, #88]	; 0x58
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d032      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d01c      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d817      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d00c      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d813      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d016      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d10f      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b48:	4baf      	ldr	r3, [pc, #700]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4aae      	ldr	r2, [pc, #696]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b54:	e00e      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f85f 	bl	8006c20 <RCCEx_PLL2_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b66:	e005      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b7a:	4ba3      	ldr	r3, [pc, #652]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b86:	49a0      	ldr	r1, [pc, #640]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b8c:	e001      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d047      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba6:	d030      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bac:	d82a      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bb2:	d02c      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bb8:	d824      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d018      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc4:	d81e      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d007      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005bd0:	e018      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd2:	4b8d      	ldr	r3, [pc, #564]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	4a8c      	ldr	r2, [pc, #560]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bde:	e017      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 f81a 	bl	8006c20 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e00e      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f8c3 	bl	8006d84 <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
      break;
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c16:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	4979      	ldr	r1, [pc, #484]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	650b      	str	r3, [r1, #80]	; 0x50
 8005c28:	e001      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d049      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c42:	d02e      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c48:	d828      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c4e:	d02a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c54:	d822      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c5a:	d026      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c60:	d81c      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c66:	d010      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c6c:	d816      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01d      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c76:	d111      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 ffce 	bl	8006c20 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c88:	e012      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3324      	adds	r3, #36	; 0x24
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f877 	bl	8006d84 <RCCEx_PLL3_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e009      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cb6:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc2:	4951      	ldr	r1, [pc, #324]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	650b      	str	r3, [r1, #80]	; 0x50
 8005cc8:	e001      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04b      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ce4:	d02e      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cea:	d828      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d02a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf6:	d822      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cfc:	d026      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d02:	d81c      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d08:	d010      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0e:	d816      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01d      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d18:	d111      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 ff7d 	bl	8006c20 <RCCEx_PLL2_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d2a:	e012      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3324      	adds	r3, #36	; 0x24
 8005d30:	2101      	movs	r1, #1
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f826 	bl	8006d84 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d3c:	e009      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
      break;
 8005d42:	e006      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d44:	bf00      	nop
 8005d46:	e004      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d66:	4928      	ldr	r1, [pc, #160]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	658b      	str	r3, [r1, #88]	; 0x58
 8005d6c:	e001      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02f      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d86:	d00e      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d8c:	d814      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d96:	d10f      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ff37 	bl	8006c20 <RCCEx_PLL2_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd2:	490d      	ldr	r1, [pc, #52]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	650b      	str	r3, [r1, #80]	; 0x50
 8005dd8:	e001      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d033      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d81c      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e33 	.word	0x08005e33
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1b 	.word	0x08005e1b
 8005e04:	08005e33 	.word	0x08005e33
 8005e08:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0c:	4bb8      	ldr	r3, [pc, #736]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	4ab7      	ldr	r2, [pc, #732]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fefd 	bl	8006c20 <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e3a:	4bad      	ldr	r3, [pc, #692]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	49aa      	ldr	r1, [pc, #680]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e4c:	e001      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8086 	beq.w	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e60:	4ba4      	ldr	r3, [pc, #656]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4aa3      	ldr	r2, [pc, #652]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e6c:	f7fc fa4e 	bl	800230c <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e72:	e009      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e74:	f7fc fa4a 	bl	800230c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d902      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	75fb      	strb	r3, [r7, #23]
        break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e88:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ef      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d166      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e9a:	4b95      	ldr	r3, [pc, #596]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea4:	4053      	eors	r3, r2
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d013      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eae:	4b90      	ldr	r3, [pc, #576]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eb8:	4b8d      	ldr	r3, [pc, #564]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a8c      	ldr	r2, [pc, #560]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec4:	4b8a      	ldr	r3, [pc, #552]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a89      	ldr	r2, [pc, #548]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ed0:	4a87      	ldr	r2, [pc, #540]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee0:	d115      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fc fa13 	bl	800230c <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ee8:	e00b      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eea:	f7fc fa0f 	bl	800230c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d902      	bls.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	75fb      	strb	r3, [r7, #23]
            break;
 8005f00:	e005      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f02:	4b7b      	ldr	r3, [pc, #492]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ed      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d126      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f22:	d10d      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f24:	4b72      	ldr	r3, [pc, #456]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f32:	0919      	lsrs	r1, r3, #4
 8005f34:	4b70      	ldr	r3, [pc, #448]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005f36:	400b      	ands	r3, r1
 8005f38:	496d      	ldr	r1, [pc, #436]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	610b      	str	r3, [r1, #16]
 8005f3e:	e005      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005f40:	4b6b      	ldr	r3, [pc, #428]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	4a6a      	ldr	r2, [pc, #424]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f4a:	6113      	str	r3, [r2, #16]
 8005f4c:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5a:	4965      	ldr	r1, [pc, #404]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	670b      	str	r3, [r1, #112]	; 0x70
 8005f60:	e004      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	75bb      	strb	r3, [r7, #22]
 8005f66:	e001      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d07e      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7c:	2b28      	cmp	r3, #40	; 0x28
 8005f7e:	d867      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08006057 	.word	0x08006057
 8005f8c:	08006051 	.word	0x08006051
 8005f90:	08006051 	.word	0x08006051
 8005f94:	08006051 	.word	0x08006051
 8005f98:	08006051 	.word	0x08006051
 8005f9c:	08006051 	.word	0x08006051
 8005fa0:	08006051 	.word	0x08006051
 8005fa4:	08006051 	.word	0x08006051
 8005fa8:	0800602d 	.word	0x0800602d
 8005fac:	08006051 	.word	0x08006051
 8005fb0:	08006051 	.word	0x08006051
 8005fb4:	08006051 	.word	0x08006051
 8005fb8:	08006051 	.word	0x08006051
 8005fbc:	08006051 	.word	0x08006051
 8005fc0:	08006051 	.word	0x08006051
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	0800603f 	.word	0x0800603f
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006051 	.word	0x08006051
 8005fd4:	08006051 	.word	0x08006051
 8005fd8:	08006051 	.word	0x08006051
 8005fdc:	08006051 	.word	0x08006051
 8005fe0:	08006051 	.word	0x08006051
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006057 	.word	0x08006057
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	08006051 	.word	0x08006051
 8005ff4:	08006051 	.word	0x08006051
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08006051 	.word	0x08006051
 8006004:	08006051 	.word	0x08006051
 8006008:	08006057 	.word	0x08006057
 800600c:	08006051 	.word	0x08006051
 8006010:	08006051 	.word	0x08006051
 8006014:	08006051 	.word	0x08006051
 8006018:	08006051 	.word	0x08006051
 800601c:	08006051 	.word	0x08006051
 8006020:	08006051 	.word	0x08006051
 8006024:	08006051 	.word	0x08006051
 8006028:	08006057 	.word	0x08006057
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fdf4 	bl	8006c20 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800603c:	e00c      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fe9d 	bl	8006d84 <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
      break;
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606a:	4921      	ldr	r1, [pc, #132]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	654b      	str	r3, [r1, #84]	; 0x54
 8006070:	e001      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d03e      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006086:	2b05      	cmp	r3, #5
 8006088:	d820      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060d3 	.word	0x080060d3
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060bb 	.word	0x080060bb
 800609c:	080060d3 	.word	0x080060d3
 80060a0:	080060d3 	.word	0x080060d3
 80060a4:	080060d3 	.word	0x080060d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2101      	movs	r1, #1
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fdb6 	bl	8006c20 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3324      	adds	r3, #36	; 0x24
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fe5f 	bl	8006d84 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d110      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	f023 0207 	bic.w	r2, r3, #7
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	4902      	ldr	r1, [pc, #8]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	654b      	str	r3, [r1, #84]	; 0x54
 80060ec:	e008      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58024800 	.word	0x58024800
 80060f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d039      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	2b05      	cmp	r3, #5
 8006114:	d820      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	0800615f 	.word	0x0800615f
 8006120:	08006135 	.word	0x08006135
 8006124:	08006147 	.word	0x08006147
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fd70 	bl	8006c20 <RCCEx_PLL2_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006144:	e00c      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3324      	adds	r3, #36	; 0x24
 800614a:	2101      	movs	r1, #1
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fe19 	bl	8006d84 <RCCEx_PLL3_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006156:	e003      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800615e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006166:	4bb7      	ldr	r3, [pc, #732]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f023 0207 	bic.w	r2, r3, #7
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	49b3      	ldr	r1, [pc, #716]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006176:	4313      	orrs	r3, r2
 8006178:	658b      	str	r3, [r1, #88]	; 0x58
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d04b      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006196:	d02e      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800619c:	d828      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d02a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d822      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061ae:	d026      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80061b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061b4:	d81c      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ba:	d010      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c0:	d816      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01d      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80061c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ca:	d111      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fd24 	bl	8006c20 <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061dc:	e012      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fdcd 	bl	8006d84 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061ee:	e009      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061f6:	bf00      	nop
 80061f8:	e004      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061fa:	bf00      	nop
 80061fc:	e002      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061fe:	bf00      	nop
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800620a:	4b8e      	ldr	r3, [pc, #568]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006218:	498a      	ldr	r1, [pc, #552]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800621a:	4313      	orrs	r3, r2
 800621c:	654b      	str	r3, [r1, #84]	; 0x54
 800621e:	e001      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d04b      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006236:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800623a:	d02e      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800623c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006240:	d828      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d02a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624c:	d822      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800624e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006252:	d026      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006258:	d81c      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d010      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d816      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01d      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626e:	d111      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fcd2 	bl	8006c20 <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006280:	e012      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	2102      	movs	r1, #2
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fd7b 	bl	8006d84 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006292:	e009      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80062a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ae:	4b65      	ldr	r3, [pc, #404]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062bc:	4961      	ldr	r1, [pc, #388]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	658b      	str	r3, [r1, #88]	; 0x58
 80062c2:	e001      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d04b      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062de:	d02e      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80062e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062e4:	d828      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d02a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f0:	d822      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062f6:	d026      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80062f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062fc:	d81c      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006302:	d010      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006308:	d816      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01d      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800630e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006312:	d111      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fc80 	bl	8006c20 <RCCEx_PLL2_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006324:	e012      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3324      	adds	r3, #36	; 0x24
 800632a:	2102      	movs	r1, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fd29 	bl	8006d84 <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006336:	e009      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	e006      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800633e:	bf00      	nop
 8006340:	e004      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006342:	bf00      	nop
 8006344:	e002      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800634a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006352:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006360:	4938      	ldr	r1, [pc, #224]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006362:	4313      	orrs	r3, r2
 8006364:	658b      	str	r3, [r1, #88]	; 0x58
 8006366:	e001      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d10a      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	2102      	movs	r1, #2
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fcfa 	bl	8006d84 <RCCEx_PLL3_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800639a:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a8:	4926      	ldr	r1, [pc, #152]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fcd9 	bl	8006d84 <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ea:	4916      	ldr	r1, [pc, #88]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d036      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006406:	d01f      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640c:	d817      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006416:	d009      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006418:	e011      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3304      	adds	r3, #4
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fbfd 	bl	8006c20 <RCCEx_PLL2_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800642a:	e00e      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3324      	adds	r3, #36	; 0x24
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fca6 	bl	8006d84 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800643c:	e005      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      break;
 8006442:	e002      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006444:	58024400 	.word	0x58024400
      break;
 8006448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006450:	4b93      	ldr	r3, [pc, #588]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800645e:	4990      	ldr	r1, [pc, #576]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006460:	4313      	orrs	r3, r2
 8006462:	658b      	str	r3, [r1, #88]	; 0x58
 8006464:	e001      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d033      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006480:	d01c      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006486:	d816      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006492:	d007      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006494:	e00f      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006496:	4b82      	ldr	r3, [pc, #520]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	4a81      	ldr	r2, [pc, #516]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800649c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064a2:	e00c      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	2101      	movs	r1, #1
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fc6a 	bl	8006d84 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c4:	4b76      	ldr	r3, [pc, #472]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d2:	4973      	ldr	r1, [pc, #460]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	654b      	str	r3, [r1, #84]	; 0x54
 80064d8:	e001      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d029      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f6:	d007      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80064f8:	e00f      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fa:	4b69      	ldr	r3, [pc, #420]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a68      	ldr	r2, [pc, #416]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006506:	e00b      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	2102      	movs	r1, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fb86 	bl	8006c20 <RCCEx_PLL2_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006518:	e002      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006526:	4b5e      	ldr	r3, [pc, #376]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006532:	495b      	ldr	r1, [pc, #364]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006538:	e001      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fc17 	bl	8006d84 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d030      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006574:	d017      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800657a:	d811      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d013      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006586:	d80b      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800658c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006592:	4b43      	ldr	r3, [pc, #268]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	4a42      	ldr	r2, [pc, #264]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800659e:	e007      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
      break;
 80065a4:	e004      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80065ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065b6:	4b3a      	ldr	r3, [pc, #232]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c2:	4937      	ldr	r1, [pc, #220]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	654b      	str	r3, [r1, #84]	; 0x54
 80065c8:	e001      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	492e      	ldr	r1, [pc, #184]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065f8:	4b29      	ldr	r3, [pc, #164]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006606:	4926      	ldr	r1, [pc, #152]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006608:	4313      	orrs	r3, r2
 800660a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006624:	491e      	ldr	r1, [pc, #120]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006626:	4313      	orrs	r3, r2
 8006628:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006636:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800663c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006640:	6113      	str	r3, [r2, #16]
 8006642:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800664c:	4914      	ldr	r1, [pc, #80]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	da08      	bge.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800665a:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	490e      	ldr	r1, [pc, #56]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006668:	4313      	orrs	r3, r2
 800666a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	4906      	ldr	r1, [pc, #24]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006688:	4313      	orrs	r3, r2
 800668a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800668c:	7dbb      	ldrb	r3, [r7, #22]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	58024400 	.word	0x58024400

080066a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066a8:	f7ff f81e 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 80066ac:	4602      	mov	r2, r0
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	4904      	ldr	r1, [pc, #16]	; (80066cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066ba:	5ccb      	ldrb	r3, [r1, r3]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	58024400 	.word	0x58024400
 80066cc:	080230c8 	.word	0x080230c8

080066d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d8:	4ba1      	ldr	r3, [pc, #644]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80066e2:	4b9f      	ldr	r3, [pc, #636]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	0b1b      	lsrs	r3, r3, #12
 80066e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80066ee:	4b9c      	ldr	r3, [pc, #624]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80066fa:	4b99      	ldr	r3, [pc, #612]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	08db      	lsrs	r3, r3, #3
 8006700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8111 	beq.w	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b02      	cmp	r3, #2
 8006722:	f000 8083 	beq.w	800682c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b02      	cmp	r3, #2
 800672a:	f200 80a1 	bhi.w	8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d056      	beq.n	80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800673a:	e099      	b.n	8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800673c:	4b88      	ldr	r3, [pc, #544]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02d      	beq.n	80067a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006748:	4b85      	ldr	r3, [pc, #532]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	08db      	lsrs	r3, r3, #3
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	4a84      	ldr	r2, [pc, #528]	; (8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
 8006758:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006772:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006782:	ed97 6a03 	vldr	s12, [r7, #12]
 8006786:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800678a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067a2:	e087      	b.n	80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800696c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b6:	4b6a      	ldr	r3, [pc, #424]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067e6:	e065      	b.n	80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fa:	4b59      	ldr	r3, [pc, #356]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680a:	ed97 6a03 	vldr	s12, [r7, #12]
 800680e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800682a:	e043      	b.n	80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800683a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683e:	4b48      	ldr	r3, [pc, #288]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006852:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800686e:	e021      	b.n	80068b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800687e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006882:	4b37      	ldr	r3, [pc, #220]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006892:	ed97 6a03 	vldr	s12, [r7, #12]
 8006896:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80068b4:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	0a5b      	lsrs	r3, r3, #9
 80068ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068da:	ee17 2a90 	vmov	r2, s15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068e2:	4b1f      	ldr	r3, [pc, #124]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ec:	ee07 3a90 	vmov	s15, r3
 80068f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006908:	ee17 2a90 	vmov	r2, s15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006910:	4b13      	ldr	r3, [pc, #76]	; (8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	0e1b      	lsrs	r3, r3, #24
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692a:	edd7 6a07 	vldr	s13, [r7, #28]
 800692e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006936:	ee17 2a90 	vmov	r2, s15
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800693e:	e008      	b.n	8006952 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	609a      	str	r2, [r3, #8]
}
 8006952:	bf00      	nop
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	58024400 	.word	0x58024400
 8006964:	03d09000 	.word	0x03d09000
 8006968:	46000000 	.word	0x46000000
 800696c:	4c742400 	.word	0x4c742400
 8006970:	4a742400 	.word	0x4a742400
 8006974:	4bbebc20 	.word	0x4bbebc20

08006978 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006978:	b480      	push	{r7}
 800697a:	b089      	sub	sp, #36	; 0x24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006980:	4ba1      	ldr	r3, [pc, #644]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800698a:	4b9f      	ldr	r3, [pc, #636]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	0d1b      	lsrs	r3, r3, #20
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006996:	4b9c      	ldr	r3, [pc, #624]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069a2:	4b99      	ldr	r3, [pc, #612]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	08db      	lsrs	r3, r3, #3
 80069a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8111 	beq.w	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	f000 8083 	beq.w	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	f200 80a1 	bhi.w	8006b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d056      	beq.n	8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069e2:	e099      	b.n	8006b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e4:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02d      	beq.n	8006a4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069f0:	4b85      	ldr	r3, [pc, #532]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	4a84      	ldr	r2, [pc, #528]	; (8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006a00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1a:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a4a:	e087      	b.n	8006b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b6a      	ldr	r3, [pc, #424]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a8e:	e065      	b.n	8006b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa2:	4b59      	ldr	r3, [pc, #356]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ad2:	e043      	b.n	8006b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae6:	4b48      	ldr	r3, [pc, #288]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b16:	e021      	b.n	8006b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2a:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b5c:	4b2a      	ldr	r3, [pc, #168]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	0a5b      	lsrs	r3, r3, #9
 8006b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b82:	ee17 2a90 	vmov	r2, s15
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b8a:	4b1f      	ldr	r3, [pc, #124]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b94:	ee07 3a90 	vmov	s15, r3
 8006b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb0:	ee17 2a90 	vmov	r2, s15
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	0e1b      	lsrs	r3, r3, #24
 8006bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bde:	ee17 2a90 	vmov	r2, s15
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	609a      	str	r2, [r3, #8]
}
 8006bfa:	bf00      	nop
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	46000000 	.word	0x46000000
 8006c14:	4c742400 	.word	0x4c742400
 8006c18:	4a742400 	.word	0x4a742400
 8006c1c:	4bbebc20 	.word	0x4bbebc20

08006c20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c2e:	4b53      	ldr	r3, [pc, #332]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d101      	bne.n	8006c3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e099      	b.n	8006d72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c3e:	4b4f      	ldr	r3, [pc, #316]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a4e      	ldr	r2, [pc, #312]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4a:	f7fb fb5f 	bl	800230c <HAL_GetTick>
 8006c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c50:	e008      	b.n	8006c64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c52:	f7fb fb5b 	bl	800230c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e086      	b.n	8006d72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c64:	4b45      	ldr	r3, [pc, #276]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f0      	bne.n	8006c52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c70:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	493f      	ldr	r1, [pc, #252]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	628b      	str	r3, [r1, #40]	; 0x28
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	025b      	lsls	r3, r3, #9
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	041b      	lsls	r3, r3, #16
 8006ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	061b      	lsls	r3, r3, #24
 8006cb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cb4:	4931      	ldr	r1, [pc, #196]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cba:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	492d      	ldr	r1, [pc, #180]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	f023 0220 	bic.w	r2, r3, #32
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	4928      	ldr	r1, [pc, #160]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cde:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006ce4:	f023 0310 	bic.w	r3, r3, #16
 8006ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cee:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <RCCEx_PLL2_Config+0x160>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	69d2      	ldr	r2, [r2, #28]
 8006cf6:	00d2      	lsls	r2, r2, #3
 8006cf8:	4920      	ldr	r1, [pc, #128]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d04:	f043 0310 	orr.w	r3, r3, #16
 8006d08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d106      	bne.n	8006d1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d1c:	e00f      	b.n	8006d3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d106      	bne.n	8006d32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d24:	4b15      	ldr	r3, [pc, #84]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a14      	ldr	r2, [pc, #80]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d30:	e005      	b.n	8006d3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a0e      	ldr	r2, [pc, #56]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d4a:	f7fb fadf 	bl	800230c <HAL_GetTick>
 8006d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d50:	e008      	b.n	8006d64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d52:	f7fb fadb 	bl	800230c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e006      	b.n	8006d72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <RCCEx_PLL2_Config+0x15c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
 8006d80:	ffff0007 	.word	0xffff0007

08006d84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d92:	4b53      	ldr	r3, [pc, #332]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d101      	bne.n	8006da2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e099      	b.n	8006ed6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006da2:	4b4f      	ldr	r3, [pc, #316]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4e      	ldr	r2, [pc, #312]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dae:	f7fb faad 	bl	800230c <HAL_GetTick>
 8006db2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006db4:	e008      	b.n	8006dc8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006db6:	f7fb faa9 	bl	800230c <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e086      	b.n	8006ed6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dc8:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f0      	bne.n	8006db6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006dd4:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	051b      	lsls	r3, r3, #20
 8006de2:	493f      	ldr	r1, [pc, #252]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	628b      	str	r3, [r1, #40]	; 0x28
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	025b      	lsls	r3, r3, #9
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	061b      	lsls	r3, r3, #24
 8006e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e18:	4931      	ldr	r1, [pc, #196]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e1e:	4b30      	ldr	r3, [pc, #192]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	492d      	ldr	r1, [pc, #180]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e30:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	4928      	ldr	r1, [pc, #160]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <RCCEx_PLL3_Config+0x160>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	69d2      	ldr	r2, [r2, #28]
 8006e5a:	00d2      	lsls	r2, r2, #3
 8006e5c:	4920      	ldr	r1, [pc, #128]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e62:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	4a1e      	ldr	r2, [pc, #120]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e74:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e80:	e00f      	b.n	8006ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d106      	bne.n	8006e96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e94:	e005      	b.n	8006ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	4a11      	ldr	r2, [pc, #68]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eae:	f7fb fa2d 	bl	800230c <HAL_GetTick>
 8006eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006eb4:	e008      	b.n	8006ec8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eb6:	f7fb fa29 	bl	800230c <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e006      	b.n	8006ed6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	ffff0007 	.word	0xffff0007

08006ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e049      	b.n	8006f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f841 	bl	8006f96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f000 f9f8 	bl	800731c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d001      	beq.n	8006fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e04f      	b.n	8007064 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d018      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <HAL_TIM_Base_Start_IT+0xcc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	; (800707c <HAL_TIM_Base_Start_IT+0xd0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_TIM_Base_Start_IT+0xd4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIM_Base_Start_IT+0x76>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a19      	ldr	r2, [pc, #100]	; (8007084 <HAL_TIM_Base_Start_IT+0xd8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d115      	bne.n	800704e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <HAL_TIM_Base_Start_IT+0xdc>)
 800702a:	4013      	ands	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b06      	cmp	r3, #6
 8007032:	d015      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0xb4>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703a:	d011      	beq.n	8007060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	e008      	b.n	8007060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e000      	b.n	8007062 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40001800 	.word	0x40001800
 8007088:	00010007 	.word	0x00010007

0800708c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d122      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d11b      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0202 	mvn.w	r2, #2
 80070b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f905 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8f7 	bl	80072ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f908 	bl	80072f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d122      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d11b      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8db 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8cd 	bl	80072ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f8de 	bl	80072f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0208 	mvn.w	r2, #8
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8b1 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8a3 	bl	80072ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8b4 	bl	80072f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0210 	mvn.w	r2, #16
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2208      	movs	r2, #8
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f887 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f879 	bl	80072ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f88a 	bl	80072f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0201 	mvn.w	r2, #1
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fa fc20 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007228:	2b80      	cmp	r3, #128	; 0x80
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f914 	bl	8007464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724a:	d10e      	bne.n	800726a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d107      	bne.n	800726a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f907 	bl	8007478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	d10e      	bne.n	8007296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d107      	bne.n	8007296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800728e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f838 	bl	8007306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d10e      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f06f 0220 	mvn.w	r2, #32
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8c7 	bl	8007450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a40      	ldr	r2, [pc, #256]	; (8007430 <TIM_Base_SetConfig+0x114>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d013      	beq.n	800735c <TIM_Base_SetConfig+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733a:	d00f      	beq.n	800735c <TIM_Base_SetConfig+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a3d      	ldr	r2, [pc, #244]	; (8007434 <TIM_Base_SetConfig+0x118>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00b      	beq.n	800735c <TIM_Base_SetConfig+0x40>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a3c      	ldr	r2, [pc, #240]	; (8007438 <TIM_Base_SetConfig+0x11c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_Base_SetConfig+0x40>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a3b      	ldr	r2, [pc, #236]	; (800743c <TIM_Base_SetConfig+0x120>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_Base_SetConfig+0x40>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a3a      	ldr	r2, [pc, #232]	; (8007440 <TIM_Base_SetConfig+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d108      	bne.n	800736e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2f      	ldr	r2, [pc, #188]	; (8007430 <TIM_Base_SetConfig+0x114>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d01f      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d01b      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2c      	ldr	r2, [pc, #176]	; (8007434 <TIM_Base_SetConfig+0x118>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d017      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a2b      	ldr	r2, [pc, #172]	; (8007438 <TIM_Base_SetConfig+0x11c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d013      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2a      	ldr	r2, [pc, #168]	; (800743c <TIM_Base_SetConfig+0x120>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00f      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a29      	ldr	r2, [pc, #164]	; (8007440 <TIM_Base_SetConfig+0x124>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00b      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a28      	ldr	r2, [pc, #160]	; (8007444 <TIM_Base_SetConfig+0x128>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d007      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a27      	ldr	r2, [pc, #156]	; (8007448 <TIM_Base_SetConfig+0x12c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d003      	beq.n	80073b6 <TIM_Base_SetConfig+0x9a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a26      	ldr	r2, [pc, #152]	; (800744c <TIM_Base_SetConfig+0x130>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d108      	bne.n	80073c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a10      	ldr	r2, [pc, #64]	; (8007430 <TIM_Base_SetConfig+0x114>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00f      	beq.n	8007414 <TIM_Base_SetConfig+0xf8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a12      	ldr	r2, [pc, #72]	; (8007440 <TIM_Base_SetConfig+0x124>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00b      	beq.n	8007414 <TIM_Base_SetConfig+0xf8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a11      	ldr	r2, [pc, #68]	; (8007444 <TIM_Base_SetConfig+0x128>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d007      	beq.n	8007414 <TIM_Base_SetConfig+0xf8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a10      	ldr	r2, [pc, #64]	; (8007448 <TIM_Base_SetConfig+0x12c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_Base_SetConfig+0xf8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <TIM_Base_SetConfig+0x130>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d103      	bne.n	800741c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691a      	ldr	r2, [r3, #16]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	615a      	str	r2, [r3, #20]
}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800
 800743c:	40000c00 	.word	0x40000c00
 8007440:	40010400 	.word	0x40010400
 8007444:	40014000 	.word	0x40014000
 8007448:	40014400 	.word	0x40014400
 800744c:	40014800 	.word	0x40014800

08007450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e042      	b.n	8007524 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fa fb81 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2224      	movs	r2, #36	; 0x24
 80074ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8c2 	bl	8007658 <UART_SetConfig>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e022      	b.n	8007524 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fe16 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800750a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fe9d 	bl	800825c <UART_CheckIdleState>
 8007522:	4603      	mov	r3, r0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	; 0x28
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007542:	2b20      	cmp	r3, #32
 8007544:	f040 8083 	bne.w	800764e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_UART_Transmit+0x28>
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e07b      	b.n	8007650 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UART_Transmit+0x3a>
 8007562:	2302      	movs	r3, #2
 8007564:	e074      	b.n	8007650 <HAL_UART_Transmit+0x124>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2221      	movs	r2, #33	; 0x21
 800757a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800757e:	f7fa fec5 	bl	800230c <HAL_GetTick>
 8007582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	88fa      	ldrh	r2, [r7, #6]
 8007588:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	88fa      	ldrh	r2, [r7, #6]
 8007590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Transmit+0x84>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80075c0:	e02c      	b.n	800761c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fe90 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e039      	b.n	8007650 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3302      	adds	r3, #2
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e007      	b.n	800760a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3301      	adds	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1cc      	bne.n	80075c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2200      	movs	r2, #0
 8007630:	2140      	movs	r1, #64	; 0x40
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fe5d 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e006      	b.n	8007650 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007658:	b5b0      	push	{r4, r5, r7, lr}
 800765a:	b08e      	sub	sp, #56	; 0x38
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	4313      	orrs	r3, r2
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4bbf      	ldr	r3, [pc, #764]	; (8007984 <UART_SetConfig+0x32c>)
 8007686:	4013      	ands	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800768e:	430b      	orrs	r3, r1
 8007690:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4ab5      	ldr	r2, [pc, #724]	; (8007988 <UART_SetConfig+0x330>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076be:	4313      	orrs	r3, r2
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	4bb0      	ldr	r3, [pc, #704]	; (800798c <UART_SetConfig+0x334>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076d2:	430b      	orrs	r3, r1
 80076d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	f023 010f 	bic.w	r1, r3, #15
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4aa7      	ldr	r2, [pc, #668]	; (8007990 <UART_SetConfig+0x338>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d176      	bne.n	80077e4 <UART_SetConfig+0x18c>
 80076f6:	4ba7      	ldr	r3, [pc, #668]	; (8007994 <UART_SetConfig+0x33c>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fe:	2b28      	cmp	r3, #40	; 0x28
 8007700:	d86c      	bhi.n	80077dc <UART_SetConfig+0x184>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0xb0>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077dd 	.word	0x080077dd
 8007710:	080077dd 	.word	0x080077dd
 8007714:	080077dd 	.word	0x080077dd
 8007718:	080077dd 	.word	0x080077dd
 800771c:	080077dd 	.word	0x080077dd
 8007720:	080077dd 	.word	0x080077dd
 8007724:	080077dd 	.word	0x080077dd
 8007728:	080077b5 	.word	0x080077b5
 800772c:	080077dd 	.word	0x080077dd
 8007730:	080077dd 	.word	0x080077dd
 8007734:	080077dd 	.word	0x080077dd
 8007738:	080077dd 	.word	0x080077dd
 800773c:	080077dd 	.word	0x080077dd
 8007740:	080077dd 	.word	0x080077dd
 8007744:	080077dd 	.word	0x080077dd
 8007748:	080077bd 	.word	0x080077bd
 800774c:	080077dd 	.word	0x080077dd
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077dd 	.word	0x080077dd
 8007758:	080077dd 	.word	0x080077dd
 800775c:	080077dd 	.word	0x080077dd
 8007760:	080077dd 	.word	0x080077dd
 8007764:	080077dd 	.word	0x080077dd
 8007768:	080077c5 	.word	0x080077c5
 800776c:	080077dd 	.word	0x080077dd
 8007770:	080077dd 	.word	0x080077dd
 8007774:	080077dd 	.word	0x080077dd
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080077dd 	.word	0x080077dd
 8007780:	080077dd 	.word	0x080077dd
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077dd 	.word	0x080077dd
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e222      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e21e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e21a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e216      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077cc:	2320      	movs	r3, #32
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e212      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e20e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e20a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6b      	ldr	r2, [pc, #428]	; (8007998 <UART_SetConfig+0x340>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d130      	bne.n	8007850 <UART_SetConfig+0x1f8>
 80077ee:	4b69      	ldr	r3, [pc, #420]	; (8007994 <UART_SetConfig+0x33c>)
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d826      	bhi.n	8007848 <UART_SetConfig+0x1f0>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x1a8>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007819 	.word	0x08007819
 8007804:	08007821 	.word	0x08007821
 8007808:	08007829 	.word	0x08007829
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	2300      	movs	r3, #0
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e1ec      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e1e8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e1e4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007836:	e1e0      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783e:	e1dc      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007846:	e1d8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784e:	e1d4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a51      	ldr	r2, [pc, #324]	; (800799c <UART_SetConfig+0x344>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x264>
 800785a:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <UART_SetConfig+0x33c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x25c>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x214>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e1b6      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e1b2      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789a:	e1ae      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a2:	e1aa      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078aa:	e1a6      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078b2:	e1a2      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ba:	e19e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a37      	ldr	r2, [pc, #220]	; (80079a0 <UART_SetConfig+0x348>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x2d0>
 80078c6:	4b33      	ldr	r3, [pc, #204]	; (8007994 <UART_SetConfig+0x33c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x2c8>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x280>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e180      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fe:	e17c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007906:	e178      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790e:	e174      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007916:	e170      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791e:	e16c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e168      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <UART_SetConfig+0x34c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d142      	bne.n	80079b8 <UART_SetConfig+0x360>
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <UART_SetConfig+0x33c>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d838      	bhi.n	80079b0 <UART_SetConfig+0x358>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x2ec>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	080079a9 	.word	0x080079a9
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007962:	e14a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796a:	e146      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007972:	e142      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800797a:	e13e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007982:	e13a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007984:	cfff69f3 	.word	0xcfff69f3
 8007988:	58000c00 	.word	0x58000c00
 800798c:	11fff4ff 	.word	0x11fff4ff
 8007990:	40011000 	.word	0x40011000
 8007994:	58024400 	.word	0x58024400
 8007998:	40004400 	.word	0x40004400
 800799c:	40004800 	.word	0x40004800
 80079a0:	40004c00 	.word	0x40004c00
 80079a4:	40005000 	.word	0x40005000
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ae:	e124      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b6:	e120      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4acc      	ldr	r2, [pc, #816]	; (8007cf0 <UART_SetConfig+0x698>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d176      	bne.n	8007ab0 <UART_SetConfig+0x458>
 80079c2:	4bcc      	ldr	r3, [pc, #816]	; (8007cf4 <UART_SetConfig+0x69c>)
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ca:	2b28      	cmp	r3, #40	; 0x28
 80079cc:	d86c      	bhi.n	8007aa8 <UART_SetConfig+0x450>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <UART_SetConfig+0x37c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a79 	.word	0x08007a79
 80079d8:	08007aa9 	.word	0x08007aa9
 80079dc:	08007aa9 	.word	0x08007aa9
 80079e0:	08007aa9 	.word	0x08007aa9
 80079e4:	08007aa9 	.word	0x08007aa9
 80079e8:	08007aa9 	.word	0x08007aa9
 80079ec:	08007aa9 	.word	0x08007aa9
 80079f0:	08007aa9 	.word	0x08007aa9
 80079f4:	08007a81 	.word	0x08007a81
 80079f8:	08007aa9 	.word	0x08007aa9
 80079fc:	08007aa9 	.word	0x08007aa9
 8007a00:	08007aa9 	.word	0x08007aa9
 8007a04:	08007aa9 	.word	0x08007aa9
 8007a08:	08007aa9 	.word	0x08007aa9
 8007a0c:	08007aa9 	.word	0x08007aa9
 8007a10:	08007aa9 	.word	0x08007aa9
 8007a14:	08007a89 	.word	0x08007a89
 8007a18:	08007aa9 	.word	0x08007aa9
 8007a1c:	08007aa9 	.word	0x08007aa9
 8007a20:	08007aa9 	.word	0x08007aa9
 8007a24:	08007aa9 	.word	0x08007aa9
 8007a28:	08007aa9 	.word	0x08007aa9
 8007a2c:	08007aa9 	.word	0x08007aa9
 8007a30:	08007aa9 	.word	0x08007aa9
 8007a34:	08007a91 	.word	0x08007a91
 8007a38:	08007aa9 	.word	0x08007aa9
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007aa9 	.word	0x08007aa9
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007aa9 	.word	0x08007aa9
 8007a4c:	08007aa9 	.word	0x08007aa9
 8007a50:	08007aa9 	.word	0x08007aa9
 8007a54:	08007a99 	.word	0x08007a99
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007aa9 	.word	0x08007aa9
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007aa9 	.word	0x08007aa9
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e0bc      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a80:	2304      	movs	r3, #4
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e0b8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a88:	2308      	movs	r3, #8
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e0b4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a90:	2310      	movs	r3, #16
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e0b0      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a98:	2320      	movs	r3, #32
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e0ac      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e0a8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aa8:	2380      	movs	r3, #128	; 0x80
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e0a4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a90      	ldr	r2, [pc, #576]	; (8007cf8 <UART_SetConfig+0x6a0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d130      	bne.n	8007b1c <UART_SetConfig+0x4c4>
 8007aba:	4b8e      	ldr	r3, [pc, #568]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d826      	bhi.n	8007b14 <UART_SetConfig+0x4bc>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <UART_SetConfig+0x474>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007ae5 	.word	0x08007ae5
 8007ad0:	08007aed 	.word	0x08007aed
 8007ad4:	08007af5 	.word	0x08007af5
 8007ad8:	08007afd 	.word	0x08007afd
 8007adc:	08007b05 	.word	0x08007b05
 8007ae0:	08007b0d 	.word	0x08007b0d
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aea:	e086      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aec:	2304      	movs	r3, #4
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af2:	e082      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007af4:	2308      	movs	r3, #8
 8007af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afa:	e07e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007afc:	2310      	movs	r3, #16
 8007afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b02:	e07a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b04:	2320      	movs	r3, #32
 8007b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0a:	e076      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b12:	e072      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e06e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a76      	ldr	r2, [pc, #472]	; (8007cfc <UART_SetConfig+0x6a4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d130      	bne.n	8007b88 <UART_SetConfig+0x530>
 8007b26:	4b73      	ldr	r3, [pc, #460]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d826      	bhi.n	8007b80 <UART_SetConfig+0x528>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0x4e0>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b51 	.word	0x08007b51
 8007b3c:	08007b59 	.word	0x08007b59
 8007b40:	08007b61 	.word	0x08007b61
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b56:	e050      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b58:	2304      	movs	r3, #4
 8007b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5e:	e04c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b60:	2308      	movs	r3, #8
 8007b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b66:	e048      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6e:	e044      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b70:	2320      	movs	r3, #32
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	e040      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e03c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b80:	2380      	movs	r3, #128	; 0x80
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e038      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a5c      	ldr	r2, [pc, #368]	; (8007d00 <UART_SetConfig+0x6a8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d130      	bne.n	8007bf4 <UART_SetConfig+0x59c>
 8007b92:	4b58      	ldr	r3, [pc, #352]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d826      	bhi.n	8007bec <UART_SetConfig+0x594>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <UART_SetConfig+0x54c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc2:	e01a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bca:	e016      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd2:	e012      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bda:	e00e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be2:	e00a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e006      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e002      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a40      	ldr	r2, [pc, #256]	; (8007d00 <UART_SetConfig+0x6a8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f040 80ef 	bne.w	8007de4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	dc46      	bgt.n	8007c9c <UART_SetConfig+0x644>
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	f2c0 8081 	blt.w	8007d16 <UART_SetConfig+0x6be>
 8007c14:	3b02      	subs	r3, #2
 8007c16:	2b1e      	cmp	r3, #30
 8007c18:	d87d      	bhi.n	8007d16 <UART_SetConfig+0x6be>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x5c8>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007ca3 	.word	0x08007ca3
 8007c24:	08007d17 	.word	0x08007d17
 8007c28:	08007cab 	.word	0x08007cab
 8007c2c:	08007d17 	.word	0x08007d17
 8007c30:	08007d17 	.word	0x08007d17
 8007c34:	08007d17 	.word	0x08007d17
 8007c38:	08007cbb 	.word	0x08007cbb
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007d17 	.word	0x08007d17
 8007c44:	08007d17 	.word	0x08007d17
 8007c48:	08007d17 	.word	0x08007d17
 8007c4c:	08007d17 	.word	0x08007d17
 8007c50:	08007d17 	.word	0x08007d17
 8007c54:	08007d17 	.word	0x08007d17
 8007c58:	08007ccb 	.word	0x08007ccb
 8007c5c:	08007d17 	.word	0x08007d17
 8007c60:	08007d17 	.word	0x08007d17
 8007c64:	08007d17 	.word	0x08007d17
 8007c68:	08007d17 	.word	0x08007d17
 8007c6c:	08007d17 	.word	0x08007d17
 8007c70:	08007d17 	.word	0x08007d17
 8007c74:	08007d17 	.word	0x08007d17
 8007c78:	08007d17 	.word	0x08007d17
 8007c7c:	08007d17 	.word	0x08007d17
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007d17 	.word	0x08007d17
 8007c88:	08007d17 	.word	0x08007d17
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d17 	.word	0x08007d17
 8007c94:	08007d17 	.word	0x08007d17
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d036      	beq.n	8007d0e <UART_SetConfig+0x6b6>
 8007ca0:	e039      	b.n	8007d16 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ca2:	f7fe fcff 	bl	80066a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ca8:	e03b      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007caa:	f107 0314 	add.w	r3, r7, #20
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fd0e 	bl	80066d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cb8:	e033      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fe5a 	bl	8006978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cc8:	e02b      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <UART_SetConfig+0x6ac>)
 8007ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce8:	e01b      	b.n	8007d22 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <UART_SetConfig+0x6ac>)
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cee:	e018      	b.n	8007d22 <UART_SetConfig+0x6ca>
 8007cf0:	40011400 	.word	0x40011400
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	40007800 	.word	0x40007800
 8007cfc:	40007c00 	.word	0x40007c00
 8007d00:	58000c00 	.word	0x58000c00
 8007d04:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d08:	4bc4      	ldr	r3, [pc, #784]	; (800801c <UART_SetConfig+0x9c4>)
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 81da 	beq.w	80080de <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	4abc      	ldr	r2, [pc, #752]	; (8008020 <UART_SetConfig+0x9c8>)
 8007d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d305      	bcc.n	8007d5a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d54:	6a3a      	ldr	r2, [r7, #32]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d903      	bls.n	8007d62 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d60:	e1bd      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	4618      	mov	r0, r3
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	4aac      	ldr	r2, [pc, #688]	; (8008020 <UART_SetConfig+0x9c8>)
 8007d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	f7f8 fb19 	bl	80003b0 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	020b      	lsls	r3, r1, #8
 8007d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d94:	0202      	lsls	r2, r0, #8
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	0849      	lsrs	r1, r1, #1
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	f04f 0100 	mov.w	r1, #0
 8007da2:	1814      	adds	r4, r2, r0
 8007da4:	eb43 0501 	adc.w	r5, r3, r1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fafb 	bl	80003b0 <__aeabi_uldivmod>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc8:	d308      	bcc.n	8007ddc <UART_SetConfig+0x784>
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd0:	d204      	bcs.n	8007ddc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	e180      	b.n	80080de <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007de2:	e17c      	b.n	80080de <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dec:	f040 80bf 	bne.w	8007f6e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	dc49      	bgt.n	8007e8c <UART_SetConfig+0x834>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db7c      	blt.n	8007ef6 <UART_SetConfig+0x89e>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d87a      	bhi.n	8007ef6 <UART_SetConfig+0x89e>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x7b0>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007e9b 	.word	0x08007e9b
 8007e10:	08007ef7 	.word	0x08007ef7
 8007e14:	08007ef7 	.word	0x08007ef7
 8007e18:	08007ea3 	.word	0x08007ea3
 8007e1c:	08007ef7 	.word	0x08007ef7
 8007e20:	08007ef7 	.word	0x08007ef7
 8007e24:	08007ef7 	.word	0x08007ef7
 8007e28:	08007eb3 	.word	0x08007eb3
 8007e2c:	08007ef7 	.word	0x08007ef7
 8007e30:	08007ef7 	.word	0x08007ef7
 8007e34:	08007ef7 	.word	0x08007ef7
 8007e38:	08007ef7 	.word	0x08007ef7
 8007e3c:	08007ef7 	.word	0x08007ef7
 8007e40:	08007ef7 	.word	0x08007ef7
 8007e44:	08007ef7 	.word	0x08007ef7
 8007e48:	08007ec3 	.word	0x08007ec3
 8007e4c:	08007ef7 	.word	0x08007ef7
 8007e50:	08007ef7 	.word	0x08007ef7
 8007e54:	08007ef7 	.word	0x08007ef7
 8007e58:	08007ef7 	.word	0x08007ef7
 8007e5c:	08007ef7 	.word	0x08007ef7
 8007e60:	08007ef7 	.word	0x08007ef7
 8007e64:	08007ef7 	.word	0x08007ef7
 8007e68:	08007ef7 	.word	0x08007ef7
 8007e6c:	08007ef7 	.word	0x08007ef7
 8007e70:	08007ef7 	.word	0x08007ef7
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007ef7 	.word	0x08007ef7
 8007e7c:	08007ef7 	.word	0x08007ef7
 8007e80:	08007ef7 	.word	0x08007ef7
 8007e84:	08007ef7 	.word	0x08007ef7
 8007e88:	08007ee9 	.word	0x08007ee9
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d02e      	beq.n	8007eee <UART_SetConfig+0x896>
 8007e90:	e031      	b.n	8007ef6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e92:	f7fd fc59 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8007e96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e98:	e033      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9a:	f7fd fc6b 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8007e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ea0:	e02f      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea2:	f107 0314 	add.w	r3, r7, #20
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fc12 	bl	80066d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eb0:	e027      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd5e 	bl	8006978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ec0:	e01f      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec2:	4b58      	ldr	r3, [pc, #352]	; (8008024 <UART_SetConfig+0x9cc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ece:	4b55      	ldr	r3, [pc, #340]	; (8008024 <UART_SetConfig+0x9cc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	08db      	lsrs	r3, r3, #3
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	4a53      	ldr	r2, [pc, #332]	; (8008028 <UART_SetConfig+0x9d0>)
 8007eda:	fa22 f303 	lsr.w	r3, r2, r3
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee0:	e00f      	b.n	8007f02 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007ee2:	4b51      	ldr	r3, [pc, #324]	; (8008028 <UART_SetConfig+0x9d0>)
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ee6:	e00c      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ee8:	4b4c      	ldr	r3, [pc, #304]	; (800801c <UART_SetConfig+0x9c4>)
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eec:	e009      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef4:	e005      	b.n	8007f02 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80ea 	beq.w	80080de <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	4a44      	ldr	r2, [pc, #272]	; (8008020 <UART_SetConfig+0x9c8>)
 8007f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1c:	005a      	lsls	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d916      	bls.n	8007f66 <UART_SetConfig+0x90e>
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3e:	d212      	bcs.n	8007f66 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f023 030f 	bic.w	r3, r3, #15
 8007f48:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	e0bb      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f6c:	e0b7      	b.n	80080de <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	dc4a      	bgt.n	800800c <UART_SetConfig+0x9b4>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f2c0 8086 	blt.w	8008088 <UART_SetConfig+0xa30>
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	f200 8083 	bhi.w	8008088 <UART_SetConfig+0xa30>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x930>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08008013 	.word	0x08008013
 8007f8c:	0800802d 	.word	0x0800802d
 8007f90:	08008089 	.word	0x08008089
 8007f94:	08008089 	.word	0x08008089
 8007f98:	08008035 	.word	0x08008035
 8007f9c:	08008089 	.word	0x08008089
 8007fa0:	08008089 	.word	0x08008089
 8007fa4:	08008089 	.word	0x08008089
 8007fa8:	08008045 	.word	0x08008045
 8007fac:	08008089 	.word	0x08008089
 8007fb0:	08008089 	.word	0x08008089
 8007fb4:	08008089 	.word	0x08008089
 8007fb8:	08008089 	.word	0x08008089
 8007fbc:	08008089 	.word	0x08008089
 8007fc0:	08008089 	.word	0x08008089
 8007fc4:	08008089 	.word	0x08008089
 8007fc8:	08008055 	.word	0x08008055
 8007fcc:	08008089 	.word	0x08008089
 8007fd0:	08008089 	.word	0x08008089
 8007fd4:	08008089 	.word	0x08008089
 8007fd8:	08008089 	.word	0x08008089
 8007fdc:	08008089 	.word	0x08008089
 8007fe0:	08008089 	.word	0x08008089
 8007fe4:	08008089 	.word	0x08008089
 8007fe8:	08008089 	.word	0x08008089
 8007fec:	08008089 	.word	0x08008089
 8007ff0:	08008089 	.word	0x08008089
 8007ff4:	08008089 	.word	0x08008089
 8007ff8:	08008089 	.word	0x08008089
 8007ffc:	08008089 	.word	0x08008089
 8008000:	08008089 	.word	0x08008089
 8008004:	08008089 	.word	0x08008089
 8008008:	0800807b 	.word	0x0800807b
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d037      	beq.n	8008080 <UART_SetConfig+0xa28>
 8008010:	e03a      	b.n	8008088 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008012:	f7fd fb99 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8008016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008018:	e03c      	b.n	8008094 <UART_SetConfig+0xa3c>
 800801a:	bf00      	nop
 800801c:	003d0900 	.word	0x003d0900
 8008020:	080230d8 	.word	0x080230d8
 8008024:	58024400 	.word	0x58024400
 8008028:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802c:	f7fd fba2 	bl	8005774 <HAL_RCC_GetPCLK2Freq>
 8008030:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008032:	e02f      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008034:	f107 0314 	add.w	r3, r7, #20
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe fb49 	bl	80066d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008042:	e027      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008044:	f107 0308 	add.w	r3, r7, #8
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fc95 	bl	8006978 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008052:	e01f      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <UART_SetConfig+0xab0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <UART_SetConfig+0xab0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	08db      	lsrs	r3, r3, #3
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	4a28      	ldr	r2, [pc, #160]	; (800810c <UART_SetConfig+0xab4>)
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008072:	e00f      	b.n	8008094 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008074:	4b25      	ldr	r3, [pc, #148]	; (800810c <UART_SetConfig+0xab4>)
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008078:	e00c      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <UART_SetConfig+0xab8>)
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800807e:	e009      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008086:	e005      	b.n	8008094 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008092:	bf00      	nop
    }

    if (pclk != 0U)
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d021      	beq.n	80080de <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <UART_SetConfig+0xabc>)
 80080a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	441a      	add	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	b29b      	uxth	r3, r3
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	d908      	bls.n	80080d8 <UART_SetConfig+0xa80>
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d204      	bcs.n	80080d8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e002      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3738      	adds	r7, #56	; 0x38
 8008102:	46bd      	mov	sp, r7
 8008104:	bdb0      	pop	{r4, r5, r7, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	003d0900 	.word	0x003d0900
 8008114:	080230d8 	.word	0x080230d8

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7fa f84e 	bl	800230c <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d10e      	bne.n	800829e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f82f 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e025      	b.n	80082ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d10e      	bne.n	80082ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f819 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e00f      	b.n	80082ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008302:	e062      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d05e      	beq.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830c:	f7f9 fffe 	bl	800230c <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <UART_WaitOnFlagUntilTimeout+0x30>
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d11d      	bne.n	800835e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008330:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e045      	b.n	80083ea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02e      	beq.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837a:	d126      	bne.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008384:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008394:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e00f      	b.n	80083ea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4013      	ands	r3, r2
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	bf0c      	ite	eq
 80083da:	2301      	moveq	r3, #1
 80083dc:	2300      	movne	r3, #0
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d08d      	beq.n	8008304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_UARTEx_DisableFifoMode+0x16>
 8008404:	2302      	movs	r3, #2
 8008406:	e027      	b.n	8008458 <HAL_UARTEx_DisableFifoMode+0x66>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2224      	movs	r2, #36	; 0x24
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008436:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008478:	2302      	movs	r3, #2
 800847a:	e02d      	b.n	80084d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2224      	movs	r2, #36	; 0x24
 8008488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0201 	bic.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f84f 	bl	800855c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e02d      	b.n	8008554 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	; 0x24
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f811 	bl	800855c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008568:	2b00      	cmp	r3, #0
 800856a:	d108      	bne.n	800857e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800857c:	e031      	b.n	80085e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800857e:	2310      	movs	r3, #16
 8008580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008582:	2310      	movs	r3, #16
 8008584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	0e5b      	lsrs	r3, r3, #25
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	0f5b      	lsrs	r3, r3, #29
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	7b3a      	ldrb	r2, [r7, #12]
 80085aa:	4911      	ldr	r1, [pc, #68]	; (80085f0 <UARTEx_SetNbDataToProcess+0x94>)
 80085ac:	5c8a      	ldrb	r2, [r1, r2]
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085b2:	7b3a      	ldrb	r2, [r7, #12]
 80085b4:	490f      	ldr	r1, [pc, #60]	; (80085f4 <UARTEx_SetNbDataToProcess+0x98>)
 80085b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	7b7a      	ldrb	r2, [r7, #13]
 80085c8:	4909      	ldr	r1, [pc, #36]	; (80085f0 <UARTEx_SetNbDataToProcess+0x94>)
 80085ca:	5c8a      	ldrb	r2, [r1, r2]
 80085cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085d0:	7b7a      	ldrb	r2, [r7, #13]
 80085d2:	4908      	ldr	r1, [pc, #32]	; (80085f4 <UARTEx_SetNbDataToProcess+0x98>)
 80085d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	080230f0 	.word	0x080230f0
 80085f4:	080230f8 	.word	0x080230f8

080085f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80085f8:	b5b0      	push	{r4, r5, r7, lr}
 80085fa:	b08c      	sub	sp, #48	; 0x30
 80085fc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80085fe:	2100      	movs	r1, #0
 8008600:	2000      	movs	r0, #0
 8008602:	f012 fba3 	bl	801ad4c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <MX_LWIP_Init+0x90>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800860c:	4b1f      	ldr	r3, [pc, #124]	; (800868c <MX_LWIP_Init+0x94>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008612:	4b1f      	ldr	r3, [pc, #124]	; (8008690 <MX_LWIP_Init+0x98>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <MX_LWIP_Init+0x9c>)
 800861a:	9302      	str	r3, [sp, #8]
 800861c:	4b1e      	ldr	r3, [pc, #120]	; (8008698 <MX_LWIP_Init+0xa0>)
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	2300      	movs	r3, #0
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <MX_LWIP_Init+0x98>)
 8008626:	4a19      	ldr	r2, [pc, #100]	; (800868c <MX_LWIP_Init+0x94>)
 8008628:	4917      	ldr	r1, [pc, #92]	; (8008688 <MX_LWIP_Init+0x90>)
 800862a:	481c      	ldr	r0, [pc, #112]	; (800869c <MX_LWIP_Init+0xa4>)
 800862c:	f00a feb8 	bl	80133a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008630:	481a      	ldr	r0, [pc, #104]	; (800869c <MX_LWIP_Init+0xa4>)
 8008632:	f00b f86f 	bl	8013714 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008636:	4b19      	ldr	r3, [pc, #100]	; (800869c <MX_LWIP_Init+0xa4>)
 8008638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800863c:	089b      	lsrs	r3, r3, #2
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008648:	4814      	ldr	r0, [pc, #80]	; (800869c <MX_LWIP_Init+0xa4>)
 800864a:	f00b f873 	bl	8013734 <netif_set_up>
 800864e:	e002      	b.n	8008656 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008650:	4812      	ldr	r0, [pc, #72]	; (800869c <MX_LWIP_Init+0xa4>)
 8008652:	f00b f8db 	bl	801380c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008656:	4912      	ldr	r1, [pc, #72]	; (80086a0 <MX_LWIP_Init+0xa8>)
 8008658:	4810      	ldr	r0, [pc, #64]	; (800869c <MX_LWIP_Init+0xa4>)
 800865a:	f00b f971 	bl	8013940 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <MX_LWIP_Init+0xac>)
 8008660:	1d3c      	adds	r4, r7, #4
 8008662:	461d      	mov	r5, r3
 8008664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800866c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	490a      	ldr	r1, [pc, #40]	; (800869c <MX_LWIP_Init+0xa4>)
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fcec 	bl	8009052 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800867a:	4808      	ldr	r0, [pc, #32]	; (800869c <MX_LWIP_Init+0xa4>)
 800867c:	f006 f976 	bl	800e96c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008680:	bf00      	nop
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bdb0      	pop	{r4, r5, r7, pc}
 8008688:	240046d4 	.word	0x240046d4
 800868c:	240046d8 	.word	0x240046d8
 8008690:	240046dc 	.word	0x240046dc
 8008694:	0801ac5d 	.word	0x0801ac5d
 8008698:	08008d9d 	.word	0x08008d9d
 800869c:	2400469c 	.word	0x2400469c
 80086a0:	080086a9 	.word	0x080086a9
 80086a4:	0801f568 	.word	0x0801f568

080086a8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	; 0x38
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a69      	ldr	r2, [pc, #420]	; (8008880 <HAL_ETH_MspInit+0x1c4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	f040 80cb 	bne.w	8008876 <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80086e0:	4b68      	ldr	r3, [pc, #416]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 80086e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086e6:	4a67      	ldr	r2, [pc, #412]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 80086e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80086f0:	4b64      	ldr	r3, [pc, #400]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 80086f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fa:	623b      	str	r3, [r7, #32]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80086fe:	4b61      	ldr	r3, [pc, #388]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008704:	4a5f      	ldr	r2, [pc, #380]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800870e:	4b5d      	ldr	r3, [pc, #372]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800871c:	4b59      	ldr	r3, [pc, #356]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800871e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008722:	4a58      	ldr	r2, [pc, #352]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008728:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800872c:	4b55      	ldr	r3, [pc, #340]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800872e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800873a:	4b52      	ldr	r3, [pc, #328]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800873c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008740:	4a50      	ldr	r2, [pc, #320]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008742:	f043 0304 	orr.w	r3, r3, #4
 8008746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800874a:	4b4e      	ldr	r3, [pc, #312]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800874c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008758:	4b4a      	ldr	r3, [pc, #296]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800875a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800875e:	4a49      	ldr	r2, [pc, #292]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008768:	4b46      	ldr	r3, [pc, #280]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800876a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008776:	4b43      	ldr	r3, [pc, #268]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800877c:	4a41      	ldr	r2, [pc, #260]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800877e:	f043 0302 	orr.w	r3, r3, #2
 8008782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008786:	4b3f      	ldr	r3, [pc, #252]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008794:	4b3b      	ldr	r3, [pc, #236]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 8008796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800879a:	4a3a      	ldr	r2, [pc, #232]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 800879c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087a4:	4b37      	ldr	r3, [pc, #220]	; (8008884 <HAL_ETH_MspInit+0x1c8>)
 80087a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80087b2:	2302      	movs	r3, #2
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b6:	2302      	movs	r3, #2
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087be:	2300      	movs	r3, #0
 80087c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087c2:	230b      	movs	r3, #11
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ca:	4619      	mov	r1, r3
 80087cc:	482e      	ldr	r0, [pc, #184]	; (8008888 <HAL_ETH_MspInit+0x1cc>)
 80087ce:	f7fb fdf9 	bl	80043c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80087d2:	2386      	movs	r3, #134	; 0x86
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d6:	2302      	movs	r3, #2
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087de:	2303      	movs	r3, #3
 80087e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087e2:	230b      	movs	r3, #11
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ea:	4619      	mov	r1, r3
 80087ec:	4827      	ldr	r0, [pc, #156]	; (800888c <HAL_ETH_MspInit+0x1d0>)
 80087ee:	f7fb fde9 	bl	80043c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80087f2:	2330      	movs	r3, #48	; 0x30
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f6:	2302      	movs	r3, #2
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087fe:	2303      	movs	r3, #3
 8008800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008802:	230b      	movs	r3, #11
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800880a:	4619      	mov	r1, r3
 800880c:	481e      	ldr	r0, [pc, #120]	; (8008888 <HAL_ETH_MspInit+0x1cc>)
 800880e:	f7fb fdd9 	bl	80043c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008818:	2302      	movs	r3, #2
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800881c:	2300      	movs	r3, #0
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008820:	2303      	movs	r3, #3
 8008822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008824:	230b      	movs	r3, #11
 8008826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800882c:	4619      	mov	r1, r3
 800882e:	4818      	ldr	r0, [pc, #96]	; (8008890 <HAL_ETH_MspInit+0x1d4>)
 8008830:	f7fb fdc8 	bl	80043c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008834:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883a:	2302      	movs	r3, #2
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883e:	2300      	movs	r3, #0
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008842:	2303      	movs	r3, #3
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008846:	230b      	movs	r3, #11
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800884a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800884e:	4619      	mov	r1, r3
 8008850:	4810      	ldr	r0, [pc, #64]	; (8008894 <HAL_ETH_MspInit+0x1d8>)
 8008852:	f7fb fdb7 	bl	80043c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008856:	2200      	movs	r2, #0
 8008858:	2105      	movs	r1, #5
 800885a:	203d      	movs	r0, #61	; 0x3d
 800885c:	f7f9 fe3a 	bl	80024d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008860:	203d      	movs	r0, #61	; 0x3d
 8008862:	f7f9 fe51 	bl	8002508 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008866:	2200      	movs	r2, #0
 8008868:	2105      	movs	r1, #5
 800886a:	203e      	movs	r0, #62	; 0x3e
 800886c:	f7f9 fe32 	bl	80024d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008870:	203e      	movs	r0, #62	; 0x3e
 8008872:	f7f9 fe49 	bl	8002508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008876:	bf00      	nop
 8008878:	3738      	adds	r7, #56	; 0x38
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40028000 	.word	0x40028000
 8008884:	58024400 	.word	0x58024400
 8008888:	58020800 	.word	0x58020800
 800888c:	58020000 	.word	0x58020000
 8008890:	58020400 	.word	0x58020400
 8008894:	58021800 	.word	0x58021800

08008898 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <HAL_ETH_RxCpltCallback+0x1c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 fd5d 	bl	8009364 <osSemaphoreRelease>
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	2400047c 	.word	0x2400047c

080088b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80088b8:	b5b0      	push	{r4, r5, r7, lr}
 80088ba:	b0ac      	sub	sp, #176	; 0xb0
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80088d2:	4b91      	ldr	r3, [pc, #580]	; (8008b18 <low_level_init+0x260>)
 80088d4:	4a91      	ldr	r2, [pc, #580]	; (8008b1c <low_level_init+0x264>)
 80088d6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80088de:	2380      	movs	r3, #128	; 0x80
 80088e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80088e4:	23e1      	movs	r3, #225	; 0xe1
 80088e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80088fc:	4a86      	ldr	r2, [pc, #536]	; (8008b18 <low_level_init+0x260>)
 80088fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008902:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008904:	4b84      	ldr	r3, [pc, #528]	; (8008b18 <low_level_init+0x260>)
 8008906:	2201      	movs	r2, #1
 8008908:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800890a:	4b83      	ldr	r3, [pc, #524]	; (8008b18 <low_level_init+0x260>)
 800890c:	4a84      	ldr	r2, [pc, #528]	; (8008b20 <low_level_init+0x268>)
 800890e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008910:	4b81      	ldr	r3, [pc, #516]	; (8008b18 <low_level_init+0x260>)
 8008912:	4a84      	ldr	r2, [pc, #528]	; (8008b24 <low_level_init+0x26c>)
 8008914:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008916:	4b80      	ldr	r3, [pc, #512]	; (8008b18 <low_level_init+0x260>)
 8008918:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800891c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800891e:	487e      	ldr	r0, [pc, #504]	; (8008b18 <low_level_init+0x260>)
 8008920:	f7f9 fe90 	bl	8002644 <HAL_ETH_Init>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800892a:	2234      	movs	r2, #52	; 0x34
 800892c:	2100      	movs	r1, #0
 800892e:	487e      	ldr	r0, [pc, #504]	; (8008b28 <low_level_init+0x270>)
 8008930:	f013 f916 	bl	801bb60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008934:	4b7c      	ldr	r3, [pc, #496]	; (8008b28 <low_level_init+0x270>)
 8008936:	2221      	movs	r2, #33	; 0x21
 8008938:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800893a:	4b7b      	ldr	r3, [pc, #492]	; (8008b28 <low_level_init+0x270>)
 800893c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008940:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008942:	4b79      	ldr	r3, [pc, #484]	; (8008b28 <low_level_init+0x270>)
 8008944:	2200      	movs	r2, #0
 8008946:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008948:	4878      	ldr	r0, [pc, #480]	; (8008b2c <low_level_init+0x274>)
 800894a:	f00a fb49 	bl	8012fe0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2206      	movs	r2, #6
 8008952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008956:	4b70      	ldr	r3, [pc, #448]	; (8008b18 <low_level_init+0x260>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008962:	4b6d      	ldr	r3, [pc, #436]	; (8008b18 <low_level_init+0x260>)
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	785a      	ldrb	r2, [r3, #1]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800896e:	4b6a      	ldr	r3, [pc, #424]	; (8008b18 <low_level_init+0x260>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	789a      	ldrb	r2, [r3, #2]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800897a:	4b67      	ldr	r3, [pc, #412]	; (8008b18 <low_level_init+0x260>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	78da      	ldrb	r2, [r3, #3]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008986:	4b64      	ldr	r3, [pc, #400]	; (8008b18 <low_level_init+0x260>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	791a      	ldrb	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008992:	4b61      	ldr	r3, [pc, #388]	; (8008b18 <low_level_init+0x260>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	795a      	ldrb	r2, [r3, #5]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80089a4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089ac:	f043 030a 	orr.w	r3, r3, #10
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089be:	e012      	b.n	80089e6 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80089c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80089c8:	fb02 f303 	mul.w	r3, r2, r3
 80089cc:	4a58      	ldr	r2, [pc, #352]	; (8008b30 <low_level_init+0x278>)
 80089ce:	441a      	add	r2, r3
 80089d0:	2300      	movs	r3, #0
 80089d2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80089d6:	4850      	ldr	r0, [pc, #320]	; (8008b18 <low_level_init+0x260>)
 80089d8:	f7f9 ff0e 	bl	80027f8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80089dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089e0:	3301      	adds	r3, #1
 80089e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d9e8      	bls.n	80089c0 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80089ee:	2300      	movs	r3, #0
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f2:	2300      	movs	r3, #0
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80089f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089fa:	2101      	movs	r1, #1
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fc31 	bl	8009264 <osSemaphoreCreate>
 8008a02:	4603      	mov	r3, r0
 8008a04:	4a4b      	ldr	r2, [pc, #300]	; (8008b34 <low_level_init+0x27c>)
 8008a06:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008a08:	4b4b      	ldr	r3, [pc, #300]	; (8008b38 <low_level_init+0x280>)
 8008a0a:	f107 040c 	add.w	r4, r7, #12
 8008a0e:	461d      	mov	r5, r3
 8008a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fb15 	bl	8009052 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008a28:	4944      	ldr	r1, [pc, #272]	; (8008b3c <low_level_init+0x284>)
 8008a2a:	4845      	ldr	r0, [pc, #276]	; (8008b40 <low_level_init+0x288>)
 8008a2c:	f7f9 fabd 	bl	8001faa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008a30:	4843      	ldr	r0, [pc, #268]	; (8008b40 <low_level_init+0x288>)
 8008a32:	f7f9 faec 	bl	800200e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008a36:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d165      	bne.n	8008b0a <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008a3e:	4840      	ldr	r0, [pc, #256]	; (8008b40 <low_level_init+0x288>)
 8008a40:	f7f9 fb8d 	bl	800215e <LAN8742_GetLinkState>
 8008a44:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	dc06      	bgt.n	8008a5e <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f00a ff45 	bl	80138e0 <netif_set_link_down>
      netif_set_down(netif);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f00a fed8 	bl	801380c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008a5c:	e057      	b.n	8008b0e <low_level_init+0x256>
 8008a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a62:	3b02      	subs	r3, #2
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d82b      	bhi.n	8008ac0 <low_level_init+0x208>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <low_level_init+0x1b8>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a93 	.word	0x08008a93
 8008a78:	08008aa3 	.word	0x08008aa3
 8008a7c:	08008ab3 	.word	0x08008ab3
        duplex = ETH_FULLDUPLEX_MODE;
 8008a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008a90:	e01f      	b.n	8008ad2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008aa0:	e017      	b.n	8008ad2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008ab0:	e00f      	b.n	8008ad2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008abe:	e008      	b.n	8008ad2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008ad0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	480f      	ldr	r0, [pc, #60]	; (8008b18 <low_level_init+0x260>)
 8008ada:	f7fa fc73 	bl	80033c4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ae2:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8008ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008aee:	4619      	mov	r1, r3
 8008af0:	4809      	ldr	r0, [pc, #36]	; (8008b18 <low_level_init+0x260>)
 8008af2:	f7fa fe3b 	bl	800376c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008af6:	4808      	ldr	r0, [pc, #32]	; (8008b18 <low_level_init+0x260>)
 8008af8:	f7f9 febf 	bl	800287a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f00a fe19 	bl	8013734 <netif_set_up>
    netif_set_link_up(netif);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f00a feb4 	bl	8013870 <netif_set_link_up>
}
 8008b08:	e001      	b.n	8008b0e <low_level_init+0x256>
    Error_Handler();
 8008b0a:	f7f8 ffb3 	bl	8001a74 <Error_Handler>
}
 8008b0e:	bf00      	nop
 8008b10:	37b0      	adds	r7, #176	; 0xb0
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bdb0      	pop	{r4, r5, r7, pc}
 8008b16:	bf00      	nop
 8008b18:	240047cc 	.word	0x240047cc
 8008b1c:	40028000 	.word	0x40028000
 8008b20:	30040060 	.word	0x30040060
 8008b24:	30040000 	.word	0x30040000
 8008b28:	24004854 	.word	0x24004854
 8008b2c:	08023100 	.word	0x08023100
 8008b30:	30040200 	.word	0x30040200
 8008b34:	2400047c 	.word	0x2400047c
 8008b38:	0801f58c 	.word	0x0801f58c
 8008b3c:	24000010 	.word	0x24000010
 8008b40:	240047ac 	.word	0x240047ac

08008b44 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b092      	sub	sp, #72	; 0x48
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	2230      	movs	r2, #48	; 0x30
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f012 fffd 	bl	801bb60 <memset>

  for(q = p; q != NULL; q = q->next)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	643b      	str	r3, [r7, #64]	; 0x40
 8008b6a:	e049      	b.n	8008c00 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d902      	bls.n	8008b78 <low_level_output+0x34>
      return ERR_IF;
 8008b72:	f06f 030b 	mvn.w	r3, #11
 8008b76:	e056      	b.n	8008c26 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8008b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7a:	6859      	ldr	r1, [r3, #4]
 8008b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b7e:	4613      	mov	r3, r2
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3b3c      	subs	r3, #60	; 0x3c
 8008b8e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b92:	895b      	ldrh	r3, [r3, #10]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b98:	4613      	mov	r3, r2
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3b38      	subs	r3, #56	; 0x38
 8008ba8:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d012      	beq.n	8008bd6 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb2:	1e5a      	subs	r2, r3, #1
 8008bb4:	f107 000c 	add.w	r0, r7, #12
 8008bb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bba:	460b      	mov	r3, r1
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	440b      	add	r3, r1
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	18c1      	adds	r1, r0, r3
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3b34      	subs	r3, #52	; 0x34
 8008bd4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8008bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be0:	4613      	mov	r3, r2
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008bec:	4413      	add	r3, r2
 8008bee:	3b34      	subs	r3, #52	; 0x34
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8008c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1b2      	bne.n	8008b6c <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	891b      	ldrh	r3, [r3, #8]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <low_level_output+0xec>)
 8008c0e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008c10:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <low_level_output+0xec>)
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008c18:	2214      	movs	r2, #20
 8008c1a:	4905      	ldr	r1, [pc, #20]	; (8008c30 <low_level_output+0xec>)
 8008c1c:	4805      	ldr	r0, [pc, #20]	; (8008c34 <low_level_output+0xf0>)
 8008c1e:	f7f9 ff2b 	bl	8002a78 <HAL_ETH_Transmit>

  return errval;
 8008c22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3748      	adds	r7, #72	; 0x48
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	24004854 	.word	0x24004854
 8008c34:	240047cc 	.word	0x240047cc

08008c38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b098      	sub	sp, #96	; 0x60
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60bb      	str	r3, [r7, #8]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	2230      	movs	r2, #48	; 0x30
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f012 ff83 	bl	801bb60 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c5e:	e015      	b.n	8008c8c <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	f107 010c 	add.w	r1, r7, #12
 8008c68:	4613      	mov	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4419      	add	r1, r3
 8008c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c74:	4613      	mov	r3, r2
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008c80:	4413      	add	r3, r2
 8008c82:	3b44      	subs	r3, #68	; 0x44
 8008c84:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c88:	3301      	adds	r3, #1
 8008c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d9e6      	bls.n	8008c60 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	4619      	mov	r1, r3
 8008c98:	4828      	ldr	r0, [pc, #160]	; (8008d3c <low_level_input+0x104>)
 8008c9a:	f7fa f866 	bl	8002d6a <HAL_ETH_GetRxDataBuffer>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d145      	bne.n	8008d30 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008ca4:	f107 0308 	add.w	r3, r7, #8
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4824      	ldr	r0, [pc, #144]	; (8008d3c <low_level_input+0x104>)
 8008cac:	f7fa f8fb 	bl	8002ea6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008cb0:	4822      	ldr	r0, [pc, #136]	; (8008d3c <low_level_input+0x104>)
 8008cb2:	f7fa f92b 	bl	8002f0c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cbc:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dd1d      	ble.n	8008d00 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	f003 021f 	and.w	r2, r3, #31
 8008cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ccc:	4413      	add	r3, r2
 8008cce:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008cd4:	f3bf 8f4f 	dsb	sy
}
 8008cd8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008cda:	4a19      	ldr	r2, [pc, #100]	; (8008d40 <low_level_input+0x108>)
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cde:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	3320      	adds	r3, #32
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cea:	3b20      	subs	r3, #32
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dcf2      	bgt.n	8008cda <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8008cf4:	f3bf 8f4f 	dsb	sy
}
 8008cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cfa:	f3bf 8f6f 	isb	sy
}
 8008cfe:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008d00:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008d02:	4810      	ldr	r0, [pc, #64]	; (8008d44 <low_level_input+0x10c>)
 8008d04:	f00a f9e8 	bl	80130d8 <memp_malloc_pool>
 8008d08:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00f      	beq.n	8008d30 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d12:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <low_level_input+0x110>)
 8008d14:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	b299      	uxth	r1, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	b292      	uxth	r2, r2
 8008d20:	9201      	str	r2, [sp, #4]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d26:	2241      	movs	r2, #65	; 0x41
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f00a fffd 	bl	8013d28 <pbuf_alloced_custom>
 8008d2e:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8008d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3758      	adds	r7, #88	; 0x58
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	240047cc 	.word	0x240047cc
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	08023100 	.word	0x08023100
 8008d48:	08008df9 	.word	0x08008df9

08008d4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <ethernetif_input+0x4c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fab1 	bl	80092c8 <osSemaphoreWait>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f5      	bne.n	8008d58 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff ff63 	bl	8008c38 <low_level_input>
 8008d72:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	68f9      	ldr	r1, [r7, #12]
 8008d80:	68b8      	ldr	r0, [r7, #8]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008d8a:	68b8      	ldr	r0, [r7, #8]
 8008d8c:	f00b f986 	bl	801409c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1ea      	bne.n	8008d6c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d96:	e7df      	b.n	8008d58 <ethernetif_input+0xc>
 8008d98:	2400047c 	.word	0x2400047c

08008d9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <ethernetif_init+0x1c>
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <ethernetif_init+0x48>)
 8008dac:	f240 2253 	movw	r2, #595	; 0x253
 8008db0:	490d      	ldr	r1, [pc, #52]	; (8008de8 <ethernetif_init+0x4c>)
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <ethernetif_init+0x50>)
 8008db4:	f013 fb1e 	bl	801c3f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2273      	movs	r2, #115	; 0x73
 8008dbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2274      	movs	r2, #116	; 0x74
 8008dc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <ethernetif_init+0x54>)
 8008dcc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <ethernetif_init+0x58>)
 8008dd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fd6f 	bl	80088b8 <low_level_init>

  return ERR_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	0801f5a8 	.word	0x0801f5a8
 8008de8:	0801f5c4 	.word	0x0801f5c4
 8008dec:	0801f5d4 	.word	0x0801f5d4
 8008df0:	08010839 	.word	0x08010839
 8008df4:	08008b45 	.word	0x08008b45

08008df8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008e04:	68f9      	ldr	r1, [r7, #12]
 8008e06:	4803      	ldr	r0, [pc, #12]	; (8008e14 <pbuf_free_custom+0x1c>)
 8008e08:	f00a f9da 	bl	80131c0 <memp_free_pool>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08023100 	.word	0x08023100

08008e18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008e1c:	f7f9 fa76 	bl	800230c <HAL_GetTick>
 8008e20:	4603      	mov	r3, r0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008e2c:	4802      	ldr	r0, [pc, #8]	; (8008e38 <ETH_PHY_IO_Init+0x10>)
 8008e2e:	f7fa fcb7 	bl	80037a0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	240047cc 	.word	0x240047cc

08008e3c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  return 0;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	68f9      	ldr	r1, [r7, #12]
 8008e5e:	4807      	ldr	r0, [pc, #28]	; (8008e7c <ETH_PHY_IO_ReadReg+0x30>)
 8008e60:	f7fa fa08 	bl	8003274 <HAL_ETH_ReadPHYRegister>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6e:	e000      	b.n	8008e72 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	240047cc 	.word	0x240047cc

08008e80 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	68f9      	ldr	r1, [r7, #12]
 8008e92:	4807      	ldr	r0, [pc, #28]	; (8008eb0 <ETH_PHY_IO_WriteReg+0x30>)
 8008e94:	f7fa fa42 	bl	800331c <HAL_ETH_WritePHYRegister>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea2:	e000      	b.n	8008ea6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	240047cc 	.word	0x240047cc

08008eb4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008eb8:	f7f9 fa28 	bl	800230c <HAL_GetTick>
 8008ebc:	4603      	mov	r3, r0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b0a0      	sub	sp, #128	; 0x80
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008edc:	483a      	ldr	r0, [pc, #232]	; (8008fc8 <ethernet_link_thread+0x104>)
 8008ede:	f7f9 f93e 	bl	800215e <LAN8742_GetLinkState>
 8008ee2:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008eea:	089b      	lsrs	r3, r3, #2
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <ethernet_link_thread+0x4c>
 8008ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	dc09      	bgt.n	8008f10 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8008efc:	4833      	ldr	r0, [pc, #204]	; (8008fcc <ethernet_link_thread+0x108>)
 8008efe:	f7f9 fd41 	bl	8002984 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008f02:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f04:	f00a fc82 	bl	801380c <netif_set_down>
    netif_set_link_down(netif);
 8008f08:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f0a:	f00a fce9 	bl	80138e0 <netif_set_link_down>
 8008f0e:	e056      	b.n	8008fbe <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d14f      	bne.n	8008fbe <ethernet_link_thread+0xfa>
 8008f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	dd4c      	ble.n	8008fbe <ethernet_link_thread+0xfa>
 8008f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f26:	3b02      	subs	r3, #2
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d82b      	bhi.n	8008f84 <ethernet_link_thread+0xc0>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <ethernet_link_thread+0x70>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f45 	.word	0x08008f45
 8008f38:	08008f57 	.word	0x08008f57
 8008f3c:	08008f67 	.word	0x08008f67
 8008f40:	08008f77 	.word	0x08008f77
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f48:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f4e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008f50:	2301      	movs	r3, #1
 8008f52:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008f54:	e017      	b.n	8008f86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f5e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008f64:	e00f      	b.n	8008f86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f6a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008f74:	e007      	b.n	8008f86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008f82:	e000      	b.n	8008f86 <ethernet_link_thread+0xc2>
    default:
      break;
 8008f84:	bf00      	nop
    }

    if(linkchanged)
 8008f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d018      	beq.n	8008fbe <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008f8c:	f107 0308 	add.w	r3, r7, #8
 8008f90:	4619      	mov	r1, r3
 8008f92:	480e      	ldr	r0, [pc, #56]	; (8008fcc <ethernet_link_thread+0x108>)
 8008f94:	f7fa fa16 	bl	80033c4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4809      	ldr	r0, [pc, #36]	; (8008fcc <ethernet_link_thread+0x108>)
 8008fa8:	f7fa fbe0 	bl	800376c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008fac:	4807      	ldr	r0, [pc, #28]	; (8008fcc <ethernet_link_thread+0x108>)
 8008fae:	f7f9 fc64 	bl	800287a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008fb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008fb4:	f00a fbbe 	bl	8013734 <netif_set_up>
      netif_set_link_up(netif);
 8008fb8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008fba:	f00a fc59 	bl	8013870 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008fbe:	2064      	movs	r0, #100	; 0x64
 8008fc0:	f000 f89f 	bl	8009102 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008fc4:	e78a      	b.n	8008edc <ethernet_link_thread+0x18>
 8008fc6:	bf00      	nop
 8008fc8:	240047ac 	.word	0x240047ac
 8008fcc:	240047cc 	.word	0x240047cc

08008fd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fe2:	2b84      	cmp	r3, #132	; 0x84
 8008fe4:	d005      	beq.n	8008ff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	3303      	adds	r3, #3
 8008ff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009006:	f3ef 8305 	mrs	r3, IPSR
 800900a:	607b      	str	r3, [r7, #4]
  return(result);
 800900c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800900e:	2b00      	cmp	r3, #0
 8009010:	bf14      	ite	ne
 8009012:	2301      	movne	r3, #1
 8009014:	2300      	moveq	r3, #0
 8009016:	b2db      	uxtb	r3, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009028:	f002 f9f8 	bl	800b41c <vTaskStartScheduler>
  
  return osOK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	bd80      	pop	{r7, pc}

08009032 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009036:	f7ff ffe3 	bl	8009000 <inHandlerMode>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009040:	f002 fb06 	bl	800b650 <xTaskGetTickCountFromISR>
 8009044:	4603      	mov	r3, r0
 8009046:	e002      	b.n	800904e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009048:	f002 faf2 	bl	800b630 <xTaskGetTickCount>
 800904c:	4603      	mov	r3, r0
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	bd80      	pop	{r7, pc}

08009052 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009054:	b089      	sub	sp, #36	; 0x24
 8009056:	af04      	add	r7, sp, #16
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d020      	beq.n	80090a6 <osThreadCreate+0x54>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01c      	beq.n	80090a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685c      	ldr	r4, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681d      	ldr	r5, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691e      	ldr	r6, [r3, #16]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff ffa6 	bl	8008fd0 <makeFreeRtosPriority>
 8009084:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800908e:	9202      	str	r2, [sp, #8]
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	9100      	str	r1, [sp, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	4632      	mov	r2, r6
 8009098:	4629      	mov	r1, r5
 800909a:	4620      	mov	r0, r4
 800909c:	f001 ff66 	bl	800af6c <xTaskCreateStatic>
 80090a0:	4603      	mov	r3, r0
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	e01c      	b.n	80090e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685c      	ldr	r4, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090b2:	b29e      	uxth	r6, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff ff88 	bl	8008fd0 <makeFreeRtosPriority>
 80090c0:	4602      	mov	r2, r0
 80090c2:	f107 030c 	add.w	r3, r7, #12
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	9200      	str	r2, [sp, #0]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	4632      	mov	r2, r6
 80090ce:	4629      	mov	r1, r5
 80090d0:	4620      	mov	r0, r4
 80090d2:	f001 ffa8 	bl	800b026 <xTaskCreate>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d001      	beq.n	80090e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	e000      	b.n	80090e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090ea <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f002 f8ce 	bl	800b294 <vTaskDelete>
  return osOK;
 80090f8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <osDelay+0x16>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	e000      	b.n	800911a <osDelay+0x18>
 8009118:	2301      	movs	r3, #1
 800911a:	4618      	mov	r0, r3
 800911c:	f002 f94a 	bl	800b3b4 <vTaskDelay>
  
  return osOK;
 8009120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d007      	beq.n	800914a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4619      	mov	r1, r3
 8009140:	2001      	movs	r0, #1
 8009142:	f001 f8b4 	bl	800a2ae <xQueueCreateMutexStatic>
 8009146:	4603      	mov	r3, r0
 8009148:	e003      	b.n	8009152 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800914a:	2001      	movs	r0, #1
 800914c:	f001 f897 	bl	800a27e <xQueueCreateMutex>
 8009150:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <osMutexWait+0x18>
    return osErrorParameter;
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	e03a      	b.n	80091ea <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917e:	d103      	bne.n	8009188 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009180:	f04f 33ff 	mov.w	r3, #4294967295
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	e009      	b.n	800919c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d006      	beq.n	800919c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <osMutexWait+0x40>
      ticks = 1;
 8009198:	2301      	movs	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800919c:	f7ff ff30 	bl	8009000 <inHandlerMode>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d017      	beq.n	80091d6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80091a6:	f107 0308 	add.w	r3, r7, #8
 80091aa:	461a      	mov	r2, r3
 80091ac:	2100      	movs	r1, #0
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 fcaa 	bl	800ab08 <xQueueReceiveFromISR>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <osMutexWait+0x62>
      return osErrorOS;
 80091ba:	23ff      	movs	r3, #255	; 0xff
 80091bc:	e015      	b.n	80091ea <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d011      	beq.n	80091e8 <osMutexWait+0x8c>
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <osMutexWait+0x98>)
 80091c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	e008      	b.n	80091e8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 fb89 	bl	800a8f0 <xQueueSemaphoreTake>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d001      	beq.n	80091e8 <osMutexWait+0x8c>
    return osErrorOS;
 80091e4:	23ff      	movs	r3, #255	; 0xff
 80091e6:	e000      	b.n	80091ea <osMutexWait+0x8e>
  }
  
  return osOK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009204:	2300      	movs	r3, #0
 8009206:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009208:	f7ff fefa 	bl	8009000 <inHandlerMode>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d016      	beq.n	8009240 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009212:	f107 0308 	add.w	r3, r7, #8
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 f9fc 	bl	800a616 <xQueueGiveFromISR>
 800921e:	4603      	mov	r3, r0
 8009220:	2b01      	cmp	r3, #1
 8009222:	d001      	beq.n	8009228 <osMutexRelease+0x30>
      return osErrorOS;
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	e017      	b.n	8009258 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d013      	beq.n	8009256 <osMutexRelease+0x5e>
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <osMutexRelease+0x68>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	e00a      	b.n	8009256 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009240:	2300      	movs	r3, #0
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f84c 	bl	800a2e4 <xQueueGenericSend>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d001      	beq.n	8009256 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009252:	23ff      	movs	r3, #255	; 0xff
 8009254:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009256:	68fb      	ldr	r3, [r7, #12]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af02      	add	r7, sp, #8
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00f      	beq.n	8009296 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10a      	bne.n	8009292 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2203      	movs	r2, #3
 8009282:	9200      	str	r2, [sp, #0]
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	2001      	movs	r0, #1
 800928a:	f000 ff0d 	bl	800a0a8 <xQueueGenericCreateStatic>
 800928e:	4603      	mov	r3, r0
 8009290:	e016      	b.n	80092c0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	e014      	b.n	80092c0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d110      	bne.n	80092be <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800929c:	2203      	movs	r2, #3
 800929e:	2100      	movs	r1, #0
 80092a0:	2001      	movs	r0, #1
 80092a2:	f000 ff79 	bl	800a198 <xQueueGenericCreate>
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <osSemaphoreCreate+0x56>
 80092ae:	2300      	movs	r3, #0
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f001 f815 	bl	800a2e4 <xQueueGenericSend>
      return sema;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	e000      	b.n	80092c0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80092be:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80092dc:	2380      	movs	r3, #128	; 0x80
 80092de:	e03a      	b.n	8009356 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ea:	d103      	bne.n	80092f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80092ec:	f04f 33ff 	mov.w	r3, #4294967295
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e009      	b.n	8009308 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d006      	beq.n	8009308 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <osSemaphoreWait+0x40>
      ticks = 1;
 8009304:	2301      	movs	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009308:	f7ff fe7a 	bl	8009000 <inHandlerMode>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d017      	beq.n	8009342 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009312:	f107 0308 	add.w	r3, r7, #8
 8009316:	461a      	mov	r2, r3
 8009318:	2100      	movs	r1, #0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fbf4 	bl	800ab08 <xQueueReceiveFromISR>
 8009320:	4603      	mov	r3, r0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d001      	beq.n	800932a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009326:	23ff      	movs	r3, #255	; 0xff
 8009328:	e015      	b.n	8009356 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d011      	beq.n	8009354 <osSemaphoreWait+0x8c>
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <osSemaphoreWait+0x98>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	e008      	b.n	8009354 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fad3 	bl	800a8f0 <xQueueSemaphoreTake>
 800934a:	4603      	mov	r3, r0
 800934c:	2b01      	cmp	r3, #1
 800934e:	d001      	beq.n	8009354 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009350:	23ff      	movs	r3, #255	; 0xff
 8009352:	e000      	b.n	8009356 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009374:	f7ff fe44 	bl	8009000 <inHandlerMode>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f946 	bl	800a616 <xQueueGiveFromISR>
 800938a:	4603      	mov	r3, r0
 800938c:	2b01      	cmp	r3, #1
 800938e:	d001      	beq.n	8009394 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009390:	23ff      	movs	r3, #255	; 0xff
 8009392:	e017      	b.n	80093c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <osSemaphoreRelease+0x5e>
 800939a:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <osSemaphoreRelease+0x68>)
 800939c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	e00a      	b.n	80093c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80093ac:	2300      	movs	r3, #0
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 ff96 	bl	800a2e4 <xQueueGenericSend>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d001      	beq.n	80093c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80093be:	23ff      	movs	r3, #255	; 0xff
 80093c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80093c2:	68fb      	ldr	r3, [r7, #12]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80093d8:	f7ff fe12 	bl	8009000 <inHandlerMode>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80093e2:	2382      	movs	r3, #130	; 0x82
 80093e4:	e003      	b.n	80093ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fc4a 	bl	800ac80 <vQueueDelete>

  return osOK; 
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80093f6:	b590      	push	{r4, r7, lr}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af02      	add	r7, sp, #8
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d011      	beq.n	800942c <osMessageCreate+0x36>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00d      	beq.n	800942c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6859      	ldr	r1, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	2400      	movs	r4, #0
 8009422:	9400      	str	r4, [sp, #0]
 8009424:	f000 fe40 	bl	800a0a8 <xQueueGenericCreateStatic>
 8009428:	4603      	mov	r3, r0
 800942a:	e008      	b.n	800943e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	4619      	mov	r1, r3
 8009438:	f000 feae 	bl	800a198 <xQueueGenericCreate>
 800943c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	bd90      	pop	{r4, r7, pc}
	...

08009448 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <osMessagePut+0x1e>
    ticks = 1;
 8009462:	2301      	movs	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009466:	f7ff fdcb 	bl	8009000 <inHandlerMode>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d018      	beq.n	80094a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009470:	f107 0210 	add.w	r2, r7, #16
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	2300      	movs	r3, #0
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f001 f830 	bl	800a4e0 <xQueueGenericSendFromISR>
 8009480:	4603      	mov	r3, r0
 8009482:	2b01      	cmp	r3, #1
 8009484:	d001      	beq.n	800948a <osMessagePut+0x42>
      return osErrorOS;
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	e018      	b.n	80094bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d014      	beq.n	80094ba <osMessagePut+0x72>
 8009490:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <osMessagePut+0x7c>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	e00b      	b.n	80094ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80094a2:	f107 0108 	add.w	r1, r7, #8
 80094a6:	2300      	movs	r3, #0
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 ff1a 	bl	800a2e4 <xQueueGenericSend>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d001      	beq.n	80094ba <osMessagePut+0x72>
      return osErrorOS;
 80094b6:	23ff      	movs	r3, #255	; 0xff
 80094b8:	e000      	b.n	80094bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b08b      	sub	sp, #44	; 0x2c
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80094e2:	2380      	movs	r3, #128	; 0x80
 80094e4:	617b      	str	r3, [r7, #20]
    return event;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	461c      	mov	r4, r3
 80094ea:	f107 0314 	add.w	r3, r7, #20
 80094ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094f6:	e054      	b.n	80095a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d103      	bne.n	8009510 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009508:	f04f 33ff 	mov.w	r3, #4294967295
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
 800950e:	e009      	b.n	8009524 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <osMessageGet+0x5c>
      ticks = 1;
 8009520:	2301      	movs	r3, #1
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009524:	f7ff fd6c 	bl	8009000 <inHandlerMode>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01c      	beq.n	8009568 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800952e:	f107 0220 	add.w	r2, r7, #32
 8009532:	f107 0314 	add.w	r3, r7, #20
 8009536:	3304      	adds	r3, #4
 8009538:	4619      	mov	r1, r3
 800953a:	68b8      	ldr	r0, [r7, #8]
 800953c:	f001 fae4 	bl	800ab08 <xQueueReceiveFromISR>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d102      	bne.n	800954c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009546:	2310      	movs	r3, #16
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	e001      	b.n	8009550 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01d      	beq.n	8009592 <osMessageGet+0xca>
 8009556:	4b15      	ldr	r3, [pc, #84]	; (80095ac <osMessageGet+0xe4>)
 8009558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	e014      	b.n	8009592 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009568:	f107 0314 	add.w	r3, r7, #20
 800956c:	3304      	adds	r3, #4
 800956e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009570:	4619      	mov	r1, r3
 8009572:	68b8      	ldr	r0, [r7, #8]
 8009574:	f001 f8dc 	bl	800a730 <xQueueReceive>
 8009578:	4603      	mov	r3, r0
 800957a:	2b01      	cmp	r3, #1
 800957c:	d102      	bne.n	8009584 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800957e:	2310      	movs	r3, #16
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e006      	b.n	8009592 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <osMessageGet+0xc6>
 800958a:	2300      	movs	r3, #0
 800958c:	e000      	b.n	8009590 <osMessageGet+0xc8>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	461c      	mov	r4, r3
 8009596:	f107 0314 	add.w	r3, r7, #20
 800959a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800959e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	372c      	adds	r7, #44	; 0x2c
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	e000ed04 	.word	0xe000ed04

080095b0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80095b8:	f7ff fd22 	bl	8009000 <inHandlerMode>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fb3e 	bl	800ac44 <uxQueueMessagesWaitingFromISR>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e003      	b.n	80095d4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fb1b 	bl	800ac08 <uxQueueMessagesWaiting>
 80095d2:	4603      	mov	r3, r0
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80095e4:	f7ff fd0c 	bl	8009000 <inHandlerMode>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <osMessageDelete+0x16>
    return osErrorISR;
 80095ee:	2382      	movs	r3, #130	; 0x82
 80095f0:	e003      	b.n	80095fa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fb44 	bl	800ac80 <vQueueDelete>

  return osOK; 
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009610:	f001 ff64 	bl	800b4dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009614:	4b5b      	ldr	r3, [pc, #364]	; (8009784 <pvPortMalloc+0x180>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800961c:	f000 f920 	bl	8009860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009620:	4b59      	ldr	r3, [pc, #356]	; (8009788 <pvPortMalloc+0x184>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 8093 	bne.w	8009754 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01d      	beq.n	8009670 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009634:	2208      	movs	r2, #8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4413      	add	r3, r2
 800963a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	2b00      	cmp	r3, #0
 8009644:	d014      	beq.n	8009670 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f023 0307 	bic.w	r3, r3, #7
 800964c:	3308      	adds	r3, #8
 800964e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d06e      	beq.n	8009754 <pvPortMalloc+0x150>
 8009676:	4b45      	ldr	r3, [pc, #276]	; (800978c <pvPortMalloc+0x188>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d869      	bhi.n	8009754 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009680:	4b43      	ldr	r3, [pc, #268]	; (8009790 <pvPortMalloc+0x18c>)
 8009682:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009684:	4b42      	ldr	r3, [pc, #264]	; (8009790 <pvPortMalloc+0x18c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800968a:	e004      	b.n	8009696 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d903      	bls.n	80096a8 <pvPortMalloc+0xa4>
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1f1      	bne.n	800968c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096a8:	4b36      	ldr	r3, [pc, #216]	; (8009784 <pvPortMalloc+0x180>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d050      	beq.n	8009754 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2208      	movs	r2, #8
 80096b8:	4413      	add	r3, r2
 80096ba:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	2308      	movs	r3, #8
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d91f      	bls.n	8009714 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4413      	add	r3, r2
 80096da:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <pvPortMalloc+0xf8>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	613b      	str	r3, [r7, #16]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	1ad2      	subs	r2, r2, r3
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800970e:	69b8      	ldr	r0, [r7, #24]
 8009710:	f000 f908 	bl	8009924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009714:	4b1d      	ldr	r3, [pc, #116]	; (800978c <pvPortMalloc+0x188>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	4a1b      	ldr	r2, [pc, #108]	; (800978c <pvPortMalloc+0x188>)
 8009720:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009722:	4b1a      	ldr	r3, [pc, #104]	; (800978c <pvPortMalloc+0x188>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <pvPortMalloc+0x190>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d203      	bcs.n	8009736 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800972e:	4b17      	ldr	r3, [pc, #92]	; (800978c <pvPortMalloc+0x188>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a18      	ldr	r2, [pc, #96]	; (8009794 <pvPortMalloc+0x190>)
 8009734:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <pvPortMalloc+0x184>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	431a      	orrs	r2, r3
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800974a:	4b13      	ldr	r3, [pc, #76]	; (8009798 <pvPortMalloc+0x194>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	4a11      	ldr	r2, [pc, #68]	; (8009798 <pvPortMalloc+0x194>)
 8009752:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009754:	f001 fed0 	bl	800b4f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <pvPortMalloc+0x174>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60fb      	str	r3, [r7, #12]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <pvPortMalloc+0x172>
	return pvReturn;
 8009778:	69fb      	ldr	r3, [r7, #28]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3728      	adds	r7, #40	; 0x28
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	2400408c 	.word	0x2400408c
 8009788:	240040a0 	.word	0x240040a0
 800978c:	24004090 	.word	0x24004090
 8009790:	24004084 	.word	0x24004084
 8009794:	24004094 	.word	0x24004094
 8009798:	24004098 	.word	0x24004098

0800979c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d04d      	beq.n	800984a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ae:	2308      	movs	r3, #8
 80097b0:	425b      	negs	r3, r3
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4413      	add	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4b24      	ldr	r3, [pc, #144]	; (8009854 <vPortFree+0xb8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <vPortFree+0x44>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	60fb      	str	r3, [r7, #12]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <vPortFree+0x62>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	60bb      	str	r3, [r7, #8]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <vPortFree+0xb8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4013      	ands	r3, r2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01e      	beq.n	800984a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d11a      	bne.n	800984a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <vPortFree+0xb8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	43db      	mvns	r3, r3
 800981e:	401a      	ands	r2, r3
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009824:	f001 fe5a 	bl	800b4dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <vPortFree+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4413      	add	r3, r2
 8009832:	4a09      	ldr	r2, [pc, #36]	; (8009858 <vPortFree+0xbc>)
 8009834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009836:	6938      	ldr	r0, [r7, #16]
 8009838:	f000 f874 	bl	8009924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <vPortFree+0xc0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	4a06      	ldr	r2, [pc, #24]	; (800985c <vPortFree+0xc0>)
 8009844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009846:	f001 fe57 	bl	800b4f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800984a:	bf00      	nop
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	240040a0 	.word	0x240040a0
 8009858:	24004090 	.word	0x24004090
 800985c:	2400409c 	.word	0x2400409c

08009860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009866:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800986a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800986c:	4b27      	ldr	r3, [pc, #156]	; (800990c <prvHeapInit+0xac>)
 800986e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3307      	adds	r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0307 	bic.w	r3, r3, #7
 8009886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	4a1f      	ldr	r2, [pc, #124]	; (800990c <prvHeapInit+0xac>)
 8009890:	4413      	add	r3, r2
 8009892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009898:	4a1d      	ldr	r2, [pc, #116]	; (8009910 <prvHeapInit+0xb0>)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800989e:	4b1c      	ldr	r3, [pc, #112]	; (8009910 <prvHeapInit+0xb0>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098ac:	2208      	movs	r2, #8
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f023 0307 	bic.w	r3, r3, #7
 80098ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4a15      	ldr	r2, [pc, #84]	; (8009914 <prvHeapInit+0xb4>)
 80098c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098c2:	4b14      	ldr	r3, [pc, #80]	; (8009914 <prvHeapInit+0xb4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <prvHeapInit+0xb4>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098e0:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <prvHeapInit+0xb4>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <prvHeapInit+0xb8>)
 80098ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	4a09      	ldr	r2, [pc, #36]	; (800991c <prvHeapInit+0xbc>)
 80098f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <prvHeapInit+0xc0>)
 80098fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098fe:	601a      	str	r2, [r3, #0]
}
 8009900:	bf00      	nop
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	24000484 	.word	0x24000484
 8009910:	24004084 	.word	0x24004084
 8009914:	2400408c 	.word	0x2400408c
 8009918:	24004094 	.word	0x24004094
 800991c:	24004090 	.word	0x24004090
 8009920:	240040a0 	.word	0x240040a0

08009924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800992c:	4b28      	ldr	r3, [pc, #160]	; (80099d0 <prvInsertBlockIntoFreeList+0xac>)
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e002      	b.n	8009938 <prvInsertBlockIntoFreeList+0x14>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d8f7      	bhi.n	8009932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d108      	bne.n	8009966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	441a      	add	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	441a      	add	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d118      	bne.n	80099ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d00d      	beq.n	80099a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	441a      	add	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e008      	b.n	80099b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099a2:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <prvInsertBlockIntoFreeList+0xb0>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e003      	b.n	80099b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d002      	beq.n	80099c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	24004084 	.word	0x24004084
 80099d4:	2400408c 	.word	0x2400408c

080099d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f103 0208 	add.w	r2, r3, #8
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295
 80099f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f103 0208 	add.w	r2, r3, #8
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f103 0208 	add.w	r2, r3, #8
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	601a      	str	r2, [r3, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d103      	bne.n	8009a9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e00c      	b.n	8009ab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	e002      	b.n	8009aa8 <vListInsert+0x2e>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d2f6      	bcs.n	8009aa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	601a      	str	r2, [r3, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6892      	ldr	r2, [r2, #8]
 8009b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6852      	ldr	r2, [r2, #4]
 8009b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d103      	bne.n	8009b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	1e5a      	subs	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3b04      	subs	r3, #4
 8009b50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3b04      	subs	r3, #4
 8009b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f023 0201 	bic.w	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b70:	4a0c      	ldr	r2, [pc, #48]	; (8009ba4 <pxPortInitialiseStack+0x64>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3b14      	subs	r3, #20
 8009b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f06f 0202 	mvn.w	r2, #2
 8009b8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3b20      	subs	r3, #32
 8009b94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b96:	68fb      	ldr	r3, [r7, #12]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	08009ba9 	.word	0x08009ba9

08009ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bb2:	4b12      	ldr	r3, [pc, #72]	; (8009bfc <prvTaskExitError+0x54>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d00a      	beq.n	8009bd2 <prvTaskExitError+0x2a>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	60fb      	str	r3, [r7, #12]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <prvTaskExitError+0x28>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	60bb      	str	r3, [r7, #8]
}
 8009be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009be6:	bf00      	nop
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0fc      	beq.n	8009be8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	24000024 	.word	0x24000024

08009c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <pxCurrentTCBConst2>)
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	6808      	ldr	r0, [r1, #0]
 8009c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	f380 8809 	msr	PSP, r0
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8811 	msr	BASEPRI, r0
 8009c1a:	4770      	bx	lr
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst2>:
 8009c20:	240040ac 	.word	0x240040ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c28:	4808      	ldr	r0, [pc, #32]	; (8009c4c <prvPortStartFirstTask+0x24>)
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	6800      	ldr	r0, [r0, #0]
 8009c2e:	f380 8808 	msr	MSP, r0
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8814 	msr	CONTROL, r0
 8009c3a:	b662      	cpsie	i
 8009c3c:	b661      	cpsie	f
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	df00      	svc	0
 8009c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c4a:	bf00      	nop
 8009c4c:	e000ed08 	.word	0xe000ed08

08009c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c56:	4b46      	ldr	r3, [pc, #280]	; (8009d70 <xPortStartScheduler+0x120>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a46      	ldr	r2, [pc, #280]	; (8009d74 <xPortStartScheduler+0x124>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10a      	bne.n	8009c76 <xPortStartScheduler+0x26>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	613b      	str	r3, [r7, #16]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c76:	4b3e      	ldr	r3, [pc, #248]	; (8009d70 <xPortStartScheduler+0x120>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a3f      	ldr	r2, [pc, #252]	; (8009d78 <xPortStartScheduler+0x128>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d10a      	bne.n	8009c96 <xPortStartScheduler+0x46>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60fb      	str	r3, [r7, #12]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c96:	4b39      	ldr	r3, [pc, #228]	; (8009d7c <xPortStartScheduler+0x12c>)
 8009c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	22ff      	movs	r2, #255	; 0xff
 8009ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <xPortStartScheduler+0x130>)
 8009cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cbe:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <xPortStartScheduler+0x134>)
 8009cc0:	2207      	movs	r2, #7
 8009cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cc4:	e009      	b.n	8009cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009cc6:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <xPortStartScheduler+0x134>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	4a2d      	ldr	r2, [pc, #180]	; (8009d84 <xPortStartScheduler+0x134>)
 8009cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cda:	78fb      	ldrb	r3, [r7, #3]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce2:	2b80      	cmp	r3, #128	; 0x80
 8009ce4:	d0ef      	beq.n	8009cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ce6:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <xPortStartScheduler+0x134>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1c3 0307 	rsb	r3, r3, #7
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d00a      	beq.n	8009d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	60bb      	str	r3, [r7, #8]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d08:	4b1e      	ldr	r3, [pc, #120]	; (8009d84 <xPortStartScheduler+0x134>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	4a1d      	ldr	r2, [pc, #116]	; (8009d84 <xPortStartScheduler+0x134>)
 8009d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d12:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <xPortStartScheduler+0x134>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d1a:	4a1a      	ldr	r2, [pc, #104]	; (8009d84 <xPortStartScheduler+0x134>)
 8009d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d26:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <xPortStartScheduler+0x138>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <xPortStartScheduler+0x138>)
 8009d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <xPortStartScheduler+0x138>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a14      	ldr	r2, [pc, #80]	; (8009d88 <xPortStartScheduler+0x138>)
 8009d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d3e:	f000 f8dd 	bl	8009efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <xPortStartScheduler+0x13c>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d48:	f000 f8fc 	bl	8009f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d4c:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <xPortStartScheduler+0x140>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a0f      	ldr	r2, [pc, #60]	; (8009d90 <xPortStartScheduler+0x140>)
 8009d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d58:	f7ff ff66 	bl	8009c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d5c:	f001 fd42 	bl	800b7e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009d60:	f7ff ff22 	bl	8009ba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	e000ed00 	.word	0xe000ed00
 8009d74:	410fc271 	.word	0x410fc271
 8009d78:	410fc270 	.word	0x410fc270
 8009d7c:	e000e400 	.word	0xe000e400
 8009d80:	240040a4 	.word	0x240040a4
 8009d84:	240040a8 	.word	0x240040a8
 8009d88:	e000ed20 	.word	0xe000ed20
 8009d8c:	24000024 	.word	0x24000024
 8009d90:	e000ef34 	.word	0xe000ef34

08009d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	607b      	str	r3, [r7, #4]
}
 8009dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dae:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <vPortEnterCritical+0x58>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3301      	adds	r3, #1
 8009db4:	4a0d      	ldr	r2, [pc, #52]	; (8009dec <vPortEnterCritical+0x58>)
 8009db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <vPortEnterCritical+0x58>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d10f      	bne.n	8009de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <vPortEnterCritical+0x5c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	603b      	str	r3, [r7, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <vPortEnterCritical+0x4a>
	}
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	24000024 	.word	0x24000024
 8009df0:	e000ed04 	.word	0xe000ed04

08009df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <vPortExitCritical+0x50>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <vPortExitCritical+0x24>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	607b      	str	r3, [r7, #4]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <vPortExitCritical+0x50>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <vPortExitCritical+0x50>)
 8009e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e22:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <vPortExitCritical+0x50>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <vPortExitCritical+0x42>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	24000024 	.word	0x24000024
	...

08009e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e50:	f3ef 8009 	mrs	r0, PSP
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <pxCurrentTCBConst>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	f01e 0f10 	tst.w	lr, #16
 8009e60:	bf08      	it	eq
 8009e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6a:	6010      	str	r0, [r2, #0]
 8009e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e74:	f380 8811 	msr	BASEPRI, r0
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f001 fcb0 	bl	800b7e4 <vTaskSwitchContext>
 8009e84:	f04f 0000 	mov.w	r0, #0
 8009e88:	f380 8811 	msr	BASEPRI, r0
 8009e8c:	bc09      	pop	{r0, r3}
 8009e8e:	6819      	ldr	r1, [r3, #0]
 8009e90:	6808      	ldr	r0, [r1, #0]
 8009e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	f01e 0f10 	tst.w	lr, #16
 8009e9a:	bf08      	it	eq
 8009e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ea0:	f380 8809 	msr	PSP, r0
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst>:
 8009eb0:	240040ac 	.word	0x240040ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ed2:	f001 fbcf 	bl	800b674 <xTaskIncrementTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <SysTick_Handler+0x40>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f383 8811 	msr	BASEPRI, r3
}
 8009eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	e000ed04 	.word	0xe000ed04

08009efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <vPortSetupTimerInterrupt+0x34>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f06:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <vPortSetupTimerInterrupt+0x38>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <vPortSetupTimerInterrupt+0x3c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <vPortSetupTimerInterrupt+0x40>)
 8009f12:	fba2 2303 	umull	r2, r3, r2, r3
 8009f16:	099b      	lsrs	r3, r3, #6
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <vPortSetupTimerInterrupt+0x44>)
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f1e:	4b04      	ldr	r3, [pc, #16]	; (8009f30 <vPortSetupTimerInterrupt+0x34>)
 8009f20:	2207      	movs	r2, #7
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	e000e010 	.word	0xe000e010
 8009f34:	e000e018 	.word	0xe000e018
 8009f38:	24000000 	.word	0x24000000
 8009f3c:	10624dd3 	.word	0x10624dd3
 8009f40:	e000e014 	.word	0xe000e014

08009f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f54 <vPortEnableVFP+0x10>
 8009f48:	6801      	ldr	r1, [r0, #0]
 8009f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f4e:	6001      	str	r1, [r0, #0]
 8009f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f52:	bf00      	nop
 8009f54:	e000ed88 	.word	0xe000ed88

08009f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f5e:	f3ef 8305 	mrs	r3, IPSR
 8009f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b0f      	cmp	r3, #15
 8009f68:	d914      	bls.n	8009f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <vPortValidateInterruptPriority+0x70>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f74:	4b15      	ldr	r3, [pc, #84]	; (8009fcc <vPortValidateInterruptPriority+0x74>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	7afa      	ldrb	r2, [r7, #11]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d20a      	bcs.n	8009f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	607b      	str	r3, [r7, #4]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f94:	4b0e      	ldr	r3, [pc, #56]	; (8009fd0 <vPortValidateInterruptPriority+0x78>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <vPortValidateInterruptPriority+0x7c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d90a      	bls.n	8009fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	603b      	str	r3, [r7, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <vPortValidateInterruptPriority+0x60>
	}
 8009fba:	bf00      	nop
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	e000e3f0 	.word	0xe000e3f0
 8009fcc:	240040a4 	.word	0x240040a4
 8009fd0:	e000ed0c 	.word	0xe000ed0c
 8009fd4:	240040a8 	.word	0x240040a8

08009fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueGenericReset+0x2a>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60bb      	str	r3, [r7, #8]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a002:	f7ff fec7 	bl	8009d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a012:	fb01 f303 	mul.w	r3, r1, r3
 800a016:	441a      	add	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a032:	3b01      	subs	r3, #1
 800a034:	68f9      	ldr	r1, [r7, #12]
 800a036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	441a      	add	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	22ff      	movs	r2, #255	; 0xff
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	22ff      	movs	r2, #255	; 0xff
 800a04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d114      	bne.n	800a082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01a      	beq.n	800a096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3310      	adds	r3, #16
 800a064:	4618      	mov	r0, r3
 800a066:	f001 fc3d 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d012      	beq.n	800a096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a070:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <xQueueGenericReset+0xcc>)
 800a072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	e009      	b.n	800a096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3310      	adds	r3, #16
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff fca6 	bl	80099d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3324      	adds	r3, #36	; 0x24
 800a090:	4618      	mov	r0, r3
 800a092:	f7ff fca1 	bl	80099d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a096:	f7ff fead 	bl	8009df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a09a:	2301      	movs	r3, #1
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08e      	sub	sp, #56	; 0x38
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10a      	bne.n	800a0ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <xQueueGenericCreateStatic+0x52>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <xQueueGenericCreateStatic+0x56>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <xQueueGenericCreateStatic+0x58>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	623b      	str	r3, [r7, #32]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <xQueueGenericCreateStatic+0x7e>
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <xQueueGenericCreateStatic+0x82>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <xQueueGenericCreateStatic+0x84>
 800a12a:	2300      	movs	r3, #0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61fb      	str	r3, [r7, #28]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a146:	2348      	movs	r3, #72	; 0x48
 800a148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b48      	cmp	r3, #72	; 0x48
 800a14e:	d00a      	beq.n	800a166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	61bb      	str	r3, [r7, #24]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a17a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4613      	mov	r3, r2
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f83f 	bl	800a20c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a190:	4618      	mov	r0, r3
 800a192:	3730      	adds	r7, #48	; 0x30
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08a      	sub	sp, #40	; 0x28
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	613b      	str	r3, [r7, #16]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	3348      	adds	r3, #72	; 0x48
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fa17 	bl	8009604 <pvPortMalloc>
 800a1d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d011      	beq.n	800a202 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	3348      	adds	r3, #72	; 0x48
 800a1e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1f0:	79fa      	ldrb	r2, [r7, #7]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f805 	bl	800a20c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a202:	69bb      	ldr	r3, [r7, #24]
	}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	e002      	b.n	800a22e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a23a:	2101      	movs	r1, #1
 800a23c:	69b8      	ldr	r0, [r7, #24]
 800a23e:	f7ff fecb 	bl	8009fd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a26a:	2300      	movs	r3, #0
 800a26c:	2200      	movs	r2, #0
 800a26e:	2100      	movs	r1, #0
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f837 	bl	800a2e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b086      	sub	sp, #24
 800a282:	af00      	add	r7, sp, #0
 800a284:	4603      	mov	r3, r0
 800a286:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a288:	2301      	movs	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	2300      	movs	r3, #0
 800a28e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	461a      	mov	r2, r3
 800a294:	6939      	ldr	r1, [r7, #16]
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff ff7e 	bl	800a198 <xQueueGenericCreate>
 800a29c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff ffd3 	bl	800a24a <prvInitialiseMutex>

		return xNewQueue;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
	}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b088      	sub	sp, #32
 800a2b2:	af02      	add	r7, sp, #8
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	6039      	str	r1, [r7, #0]
 800a2b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	6939      	ldr	r1, [r7, #16]
 800a2cc:	6978      	ldr	r0, [r7, #20]
 800a2ce:	f7ff feeb 	bl	800a0a8 <xQueueGenericCreateStatic>
 800a2d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f7ff ffb8 	bl	800a24a <prvInitialiseMutex>

		return xNewQueue;
 800a2da:	68fb      	ldr	r3, [r7, #12]
	}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08e      	sub	sp, #56	; 0x38
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <xQueueGenericSend+0x32>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d103      	bne.n	800a324 <xQueueGenericSend+0x40>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <xQueueGenericSend+0x44>
 800a324:	2301      	movs	r3, #1
 800a326:	e000      	b.n	800a32a <xQueueGenericSend+0x46>
 800a328:	2300      	movs	r3, #0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <xQueueGenericSend+0x60>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x6e>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0x72>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0x74>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xQueueGenericSend+0x8e>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	623b      	str	r3, [r7, #32]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a372:	f001 fc73 	bl	800bc5c <xTaskGetSchedulerState>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <xQueueGenericSend+0x9e>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <xQueueGenericSend+0xa2>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericSend+0xa4>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	61fb      	str	r3, [r7, #28]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3a2:	f7ff fcf7 	bl	8009d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d302      	bcc.n	800a3b8 <xQueueGenericSend+0xd4>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d129      	bne.n	800a40c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3be:	f000 fc9a 	bl	800acf6 <prvCopyDataToQueue>
 800a3c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d010      	beq.n	800a3ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	3324      	adds	r3, #36	; 0x24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 fa87 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d013      	beq.n	800a404 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3dc:	4b3f      	ldr	r3, [pc, #252]	; (800a4dc <xQueueGenericSend+0x1f8>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	e00a      	b.n	800a404 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3f4:	4b39      	ldr	r3, [pc, #228]	; (800a4dc <xQueueGenericSend+0x1f8>)
 800a3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a404:	f7ff fcf6 	bl	8009df4 <vPortExitCritical>
				return pdPASS;
 800a408:	2301      	movs	r3, #1
 800a40a:	e063      	b.n	800a4d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a412:	f7ff fcef 	bl	8009df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a416:	2300      	movs	r3, #0
 800a418:	e05c      	b.n	800a4d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d106      	bne.n	800a42e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a420:	f107 0314 	add.w	r3, r7, #20
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fabf 	bl	800b9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a42a:	2301      	movs	r3, #1
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a42e:	f7ff fce1 	bl	8009df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a432:	f001 f853 	bl	800b4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a436:	f7ff fcad 	bl	8009d94 <vPortEnterCritical>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a440:	b25b      	sxtb	r3, r3
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d103      	bne.n	800a450 <xQueueGenericSend+0x16c>
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a456:	b25b      	sxtb	r3, r3
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d103      	bne.n	800a466 <xQueueGenericSend+0x182>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a466:	f7ff fcc5 	bl	8009df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a46a:	1d3a      	adds	r2, r7, #4
 800a46c:	f107 0314 	add.w	r3, r7, #20
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f001 faae 	bl	800b9d4 <xTaskCheckForTimeOut>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d124      	bne.n	800a4c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a480:	f000 fd31 	bl	800aee6 <prvIsQueueFull>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d018      	beq.n	800a4bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	3310      	adds	r3, #16
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f001 fa02 	bl	800b89c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49a:	f000 fcbc 	bl	800ae16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a49e:	f001 f82b 	bl	800b4f8 <xTaskResumeAll>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f47f af7c 	bne.w	800a3a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <xQueueGenericSend+0x1f8>)
 800a4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	e772      	b.n	800a3a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4be:	f000 fcaa 	bl	800ae16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4c2:	f001 f819 	bl	800b4f8 <xTaskResumeAll>
 800a4c6:	e76c      	b.n	800a3a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ca:	f000 fca4 	bl	800ae16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ce:	f001 f813 	bl	800b4f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3738      	adds	r7, #56	; 0x38
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b090      	sub	sp, #64	; 0x40
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <xQueueGenericSendFromISR+0x3c>
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <xQueueGenericSendFromISR+0x40>
 800a51c:	2301      	movs	r3, #1
 800a51e:	e000      	b.n	800a522 <xQueueGenericSendFromISR+0x42>
 800a520:	2300      	movs	r3, #0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d103      	bne.n	800a54a <xQueueGenericSendFromISR+0x6a>
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <xQueueGenericSendFromISR+0x6e>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <xQueueGenericSendFromISR+0x70>
 800a54e:	2300      	movs	r3, #0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	623b      	str	r3, [r7, #32]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a56a:	f7ff fcf5 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 800a56e:	f3ef 8211 	mrs	r2, BASEPRI
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	61fa      	str	r2, [r7, #28]
 800a584:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a586:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a592:	429a      	cmp	r2, r3
 800a594:	d302      	bcc.n	800a59c <xQueueGenericSendFromISR+0xbc>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d12f      	bne.n	800a5fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5b2:	f000 fba0 	bl	800acf6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5be:	d112      	bne.n	800a5e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d016      	beq.n	800a5f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	3324      	adds	r3, #36	; 0x24
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 f989 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00e      	beq.n	800a5f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e007      	b.n	800a5f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	b25a      	sxtb	r2, r3
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5fa:	e001      	b.n	800a600 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a602:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f383 8811 	msr	BASEPRI, r3
}
 800a60a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3740      	adds	r7, #64	; 0x40
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b08e      	sub	sp, #56	; 0x38
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	623b      	str	r3, [r7, #32]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	61fb      	str	r3, [r7, #28]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <xQueueGiveFromISR+0x58>
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <xQueueGiveFromISR+0x5c>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGiveFromISR+0x5e>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	61bb      	str	r3, [r7, #24]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a68e:	f7ff fc63 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 800a692:	f3ef 8211 	mrs	r2, BASEPRI
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	617a      	str	r2, [r7, #20]
 800a6a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d22b      	bcs.n	800a716 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d8:	d112      	bne.n	800a700 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d016      	beq.n	800a710 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	3324      	adds	r3, #36	; 0x24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 f8fc 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00e      	beq.n	800a710 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e007      	b.n	800a710 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a704:	3301      	adds	r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	b25a      	sxtb	r2, r3
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a710:	2301      	movs	r3, #1
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
 800a714:	e001      	b.n	800a71a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a716:	2300      	movs	r3, #0
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f383 8811 	msr	BASEPRI, r3
}
 800a724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3738      	adds	r7, #56	; 0x38
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08c      	sub	sp, #48	; 0x30
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <xQueueReceive+0x30>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	623b      	str	r3, [r7, #32]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <xQueueReceive+0x3e>
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <xQueueReceive+0x42>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <xQueueReceive+0x44>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueReceive+0x5e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	61fb      	str	r3, [r7, #28]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a78e:	f001 fa65 	bl	800bc5c <xTaskGetSchedulerState>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xQueueReceive+0x6e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <xQueueReceive+0x72>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <xQueueReceive+0x74>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xQueueReceive+0x8e>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61bb      	str	r3, [r7, #24]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7be:	f7ff fae9 	bl	8009d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01f      	beq.n	800a80e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d2:	f000 fafa 	bl	800adca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f001 f87a 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7f6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ec <xQueueReceive+0x1bc>)
 800a7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a806:	f7ff faf5 	bl	8009df4 <vPortExitCritical>
				return pdPASS;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e069      	b.n	800a8e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d103      	bne.n	800a81c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a814:	f7ff faee 	bl	8009df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a818:	2300      	movs	r3, #0
 800a81a:	e062      	b.n	800a8e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d106      	bne.n	800a830 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a822:	f107 0310 	add.w	r3, r7, #16
 800a826:	4618      	mov	r0, r3
 800a828:	f001 f8be 	bl	800b9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a82c:	2301      	movs	r3, #1
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a830:	f7ff fae0 	bl	8009df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a834:	f000 fe52 	bl	800b4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a838:	f7ff faac 	bl	8009d94 <vPortEnterCritical>
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a842:	b25b      	sxtb	r3, r3
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a848:	d103      	bne.n	800a852 <xQueueReceive+0x122>
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a858:	b25b      	sxtb	r3, r3
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85e:	d103      	bne.n	800a868 <xQueueReceive+0x138>
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a868:	f7ff fac4 	bl	8009df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a86c:	1d3a      	adds	r2, r7, #4
 800a86e:	f107 0310 	add.w	r3, r7, #16
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f001 f8ad 	bl	800b9d4 <xTaskCheckForTimeOut>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d123      	bne.n	800a8c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f000 fb1a 	bl	800aeba <prvIsQueueEmpty>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d017      	beq.n	800a8bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f001 f801 	bl	800b89c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89c:	f000 fabb 	bl	800ae16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8a0:	f000 fe2a 	bl	800b4f8 <xTaskResumeAll>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d189      	bne.n	800a7be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a8aa:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <xQueueReceive+0x1bc>)
 800a8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	e780      	b.n	800a7be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8be:	f000 faaa 	bl	800ae16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c2:	f000 fe19 	bl	800b4f8 <xTaskResumeAll>
 800a8c6:	e77a      	b.n	800a7be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ca:	f000 faa4 	bl	800ae16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8ce:	f000 fe13 	bl	800b4f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d4:	f000 faf1 	bl	800aeba <prvIsQueueEmpty>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f43f af6f 	beq.w	800a7be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3730      	adds	r7, #48	; 0x30
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08e      	sub	sp, #56	; 0x38
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a902:	2300      	movs	r3, #0
 800a904:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	623b      	str	r3, [r7, #32]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	61fb      	str	r3, [r7, #28]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a940:	f001 f98c 	bl	800bc5c <xTaskGetSchedulerState>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <xQueueSemaphoreTake+0x60>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <xQueueSemaphoreTake+0x64>
 800a950:	2301      	movs	r3, #1
 800a952:	e000      	b.n	800a956 <xQueueSemaphoreTake+0x66>
 800a954:	2300      	movs	r3, #0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	61bb      	str	r3, [r7, #24]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a970:	f7ff fa10 	bl	8009d94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d024      	beq.n	800a9ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	1e5a      	subs	r2, r3, #1
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a990:	f001 fb0c 	bl	800bfac <pvTaskIncrementMutexHeldCount>
 800a994:	4602      	mov	r2, r0
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00f      	beq.n	800a9c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a4:	3310      	adds	r3, #16
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ff9c 	bl	800b8e4 <xTaskRemoveFromEventList>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d007      	beq.n	800a9c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9b2:	4b54      	ldr	r3, [pc, #336]	; (800ab04 <xQueueSemaphoreTake+0x214>)
 800a9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9c2:	f7ff fa17 	bl	8009df4 <vPortExitCritical>
				return pdPASS;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e097      	b.n	800aafa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d111      	bne.n	800a9f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	617b      	str	r3, [r7, #20]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9ec:	f7ff fa02 	bl	8009df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e082      	b.n	800aafa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ffd2 	bl	800b9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa08:	f7ff f9f4 	bl	8009df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa0c:	f000 fd66 	bl	800b4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa10:	f7ff f9c0 	bl	8009d94 <vPortEnterCritical>
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa1a:	b25b      	sxtb	r3, r3
 800aa1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa20:	d103      	bne.n	800aa2a <xQueueSemaphoreTake+0x13a>
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa30:	b25b      	sxtb	r3, r3
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa36:	d103      	bne.n	800aa40 <xQueueSemaphoreTake+0x150>
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa40:	f7ff f9d8 	bl	8009df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa44:	463a      	mov	r2, r7
 800aa46:	f107 030c 	add.w	r3, r7, #12
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 ffc1 	bl	800b9d4 <xTaskCheckForTimeOut>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d132      	bne.n	800aabe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa5a:	f000 fa2e 	bl	800aeba <prvIsQueueEmpty>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d026      	beq.n	800aab2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d109      	bne.n	800aa80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa6c:	f7ff f992 	bl	8009d94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f90f 	bl	800bc98 <xTaskPriorityInherit>
 800aa7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa7c:	f7ff f9ba 	bl	8009df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	3324      	adds	r3, #36	; 0x24
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 ff07 	bl	800b89c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa90:	f000 f9c1 	bl	800ae16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa94:	f000 fd30 	bl	800b4f8 <xTaskResumeAll>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f47f af68 	bne.w	800a970 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aaa0:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <xQueueSemaphoreTake+0x214>)
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	e75e      	b.n	800a970 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aab4:	f000 f9af 	bl	800ae16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aab8:	f000 fd1e 	bl	800b4f8 <xTaskResumeAll>
 800aabc:	e758      	b.n	800a970 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aabe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aac0:	f000 f9a9 	bl	800ae16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aac4:	f000 fd18 	bl	800b4f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaca:	f000 f9f6 	bl	800aeba <prvIsQueueEmpty>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f43f af4d 	beq.w	800a970 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00d      	beq.n	800aaf8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aadc:	f7ff f95a 	bl	8009d94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae2:	f000 f8f0 	bl	800acc6 <prvGetDisinheritPriorityAfterTimeout>
 800aae6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 f9ce 	bl	800be90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aaf4:	f7ff f97e 	bl	8009df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3738      	adds	r7, #56	; 0x38
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	e000ed04 	.word	0xe000ed04

0800ab08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08e      	sub	sp, #56	; 0x38
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	623b      	str	r3, [r7, #32]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d103      	bne.n	800ab42 <xQueueReceiveFromISR+0x3a>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <xQueueReceiveFromISR+0x3e>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e000      	b.n	800ab48 <xQueueReceiveFromISR+0x40>
 800ab46:	2300      	movs	r3, #0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	61fb      	str	r3, [r7, #28]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab62:	f7ff f9f9 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 800ab66:	f3ef 8211 	mrs	r2, BASEPRI
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	61ba      	str	r2, [r7, #24]
 800ab7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d02f      	beq.n	800abee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab9c:	f000 f915 	bl	800adca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	1e5a      	subs	r2, r3, #1
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d112      	bne.n	800abd8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d016      	beq.n	800abe8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	3310      	adds	r3, #16
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 fe90 	bl	800b8e4 <xTaskRemoveFromEventList>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e007      	b.n	800abe8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800abd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abdc:	3301      	adds	r3, #1
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	b25a      	sxtb	r2, r3
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800abe8:	2301      	movs	r3, #1
 800abea:	637b      	str	r3, [r7, #52]	; 0x34
 800abec:	e001      	b.n	800abf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800abee:	2300      	movs	r3, #0
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f383 8811 	msr	BASEPRI, r3
}
 800abfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3738      	adds	r7, #56	; 0x38
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	60bb      	str	r3, [r7, #8]
}
 800ac28:	bf00      	nop
 800ac2a:	e7fe      	b.n	800ac2a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ac2c:	f7ff f8b2 	bl	8009d94 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ac36:	f7ff f8dd 	bl	8009df4 <vPortExitCritical>

	return uxReturn;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	60fb      	str	r3, [r7, #12]
}
 800ac68:	bf00      	nop
 800ac6a:	e7fe      	b.n	800ac6a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ac72:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ac74:	4618      	mov	r0, r3
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <vQueueDelete+0x28>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	60bb      	str	r3, [r7, #8]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 f935 	bl	800af18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7fe fd6f 	bl	800979c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800acc6:	b480      	push	{r7}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f1c3 0307 	rsb	r3, r3, #7
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e001      	b.n	800ace8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ace8:	68fb      	ldr	r3, [r7, #12]
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10d      	bne.n	800ad30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d14d      	bne.n	800adb8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 f82f 	bl	800bd84 <xTaskPriorityDisinherit>
 800ad26:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	609a      	str	r2, [r3, #8]
 800ad2e:	e043      	b.n	800adb8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d119      	bne.n	800ad6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6858      	ldr	r0, [r3, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68b9      	ldr	r1, [r7, #8]
 800ad42:	f010 fee5 	bl	801bb10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	441a      	add	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d32b      	bcc.n	800adb8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	605a      	str	r2, [r3, #4]
 800ad68:	e026      	b.n	800adb8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	68d8      	ldr	r0, [r3, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad72:	461a      	mov	r2, r3
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	f010 fecb 	bl	801bb10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	425b      	negs	r3, r3
 800ad84:	441a      	add	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d207      	bcs.n	800ada6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689a      	ldr	r2, [r3, #8]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	425b      	negs	r3, r3
 800ada0:	441a      	add	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d105      	bne.n	800adb8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adc0:	697b      	ldr	r3, [r7, #20]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d018      	beq.n	800ae0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	441a      	add	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d303      	bcc.n	800adfe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68d9      	ldr	r1, [r3, #12]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	461a      	mov	r2, r3
 800ae08:	6838      	ldr	r0, [r7, #0]
 800ae0a:	f010 fe81 	bl	801bb10 <memcpy>
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae1e:	f7fe ffb9 	bl	8009d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae2a:	e011      	b.n	800ae50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3324      	adds	r3, #36	; 0x24
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fd53 	bl	800b8e4 <xTaskRemoveFromEventList>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae44:	f000 fe28 	bl	800ba98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dce9      	bgt.n	800ae2c <prvUnlockQueue+0x16>
 800ae58:	e000      	b.n	800ae5c <prvUnlockQueue+0x46>
					break;
 800ae5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	22ff      	movs	r2, #255	; 0xff
 800ae60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae64:	f7fe ffc6 	bl	8009df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae68:	f7fe ff94 	bl	8009d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae74:	e011      	b.n	800ae9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d012      	beq.n	800aea4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3310      	adds	r3, #16
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fd2e 	bl	800b8e4 <xTaskRemoveFromEventList>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae8e:	f000 fe03 	bl	800ba98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dce9      	bgt.n	800ae76 <prvUnlockQueue+0x60>
 800aea2:	e000      	b.n	800aea6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aea4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	22ff      	movs	r2, #255	; 0xff
 800aeaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aeae:	f7fe ffa1 	bl	8009df4 <vPortExitCritical>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aec2:	f7fe ff67 	bl	8009d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d102      	bne.n	800aed4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aece:	2301      	movs	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e001      	b.n	800aed8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aed8:	f7fe ff8c 	bl	8009df4 <vPortExitCritical>

	return xReturn;
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aeee:	f7fe ff51 	bl	8009d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d102      	bne.n	800af04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aefe:	2301      	movs	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	e001      	b.n	800af08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af08:	f7fe ff74 	bl	8009df4 <vPortExitCritical>

	return xReturn;
 800af0c:	68fb      	ldr	r3, [r7, #12]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e016      	b.n	800af54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af26:	4a10      	ldr	r2, [pc, #64]	; (800af68 <vQueueUnregisterQueue+0x50>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	4413      	add	r3, r2
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d10b      	bne.n	800af4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af36:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <vQueueUnregisterQueue+0x50>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2100      	movs	r1, #0
 800af3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800af40:	4a09      	ldr	r2, [pc, #36]	; (800af68 <vQueueUnregisterQueue+0x50>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4413      	add	r3, r2
 800af48:	2200      	movs	r2, #0
 800af4a:	605a      	str	r2, [r3, #4]
				break;
 800af4c:	e006      	b.n	800af5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3301      	adds	r3, #1
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b07      	cmp	r3, #7
 800af58:	d9e5      	bls.n	800af26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	24004888 	.word	0x24004888

0800af6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08e      	sub	sp, #56	; 0x38
 800af70:	af04      	add	r7, sp, #16
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	623b      	str	r3, [r7, #32]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	61fb      	str	r3, [r7, #28]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afb2:	2354      	movs	r3, #84	; 0x54
 800afb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b54      	cmp	r3, #84	; 0x54
 800afba:	d00a      	beq.n	800afd2 <xTaskCreateStatic+0x66>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	61bb      	str	r3, [r7, #24]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d01e      	beq.n	800b018 <xTaskCreateStatic+0xac>
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d01b      	beq.n	800b018 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	2202      	movs	r2, #2
 800afee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aff2:	2300      	movs	r3, #0
 800aff4:	9303      	str	r3, [sp, #12]
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	9302      	str	r3, [sp, #8]
 800affa:	f107 0314 	add.w	r3, r7, #20
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f850 	bl	800b0b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b012:	f000 f8d5 	bl	800b1c0 <prvAddNewTaskToReadyList>
 800b016:	e001      	b.n	800b01c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b01c:	697b      	ldr	r3, [r7, #20]
	}
 800b01e:	4618      	mov	r0, r3
 800b020:	3728      	adds	r7, #40	; 0x28
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b026:	b580      	push	{r7, lr}
 800b028:	b08c      	sub	sp, #48	; 0x30
 800b02a:	af04      	add	r7, sp, #16
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	603b      	str	r3, [r7, #0]
 800b032:	4613      	mov	r3, r2
 800b034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe fae2 	bl	8009604 <pvPortMalloc>
 800b040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b048:	2054      	movs	r0, #84	; 0x54
 800b04a:	f7fe fadb 	bl	8009604 <pvPortMalloc>
 800b04e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	631a      	str	r2, [r3, #48]	; 0x30
 800b05c:	e005      	b.n	800b06a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b05e:	6978      	ldr	r0, [r7, #20]
 800b060:	f7fe fb9c 	bl	800979c <vPortFree>
 800b064:	e001      	b.n	800b06a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d017      	beq.n	800b0a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b078:	88fa      	ldrh	r2, [r7, #6]
 800b07a:	2300      	movs	r3, #0
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	9302      	str	r3, [sp, #8]
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68b9      	ldr	r1, [r7, #8]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f80e 	bl	800b0b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b094:	69f8      	ldr	r0, [r7, #28]
 800b096:	f000 f893 	bl	800b1c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b09a:	2301      	movs	r3, #1
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	e002      	b.n	800b0a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
	}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b0c8:	440b      	add	r3, r1
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	f023 0307 	bic.w	r3, r3, #7
 800b0d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	617b      	str	r3, [r7, #20]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01f      	beq.n	800b13e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0fe:	2300      	movs	r3, #0
 800b100:	61fb      	str	r3, [r7, #28]
 800b102:	e012      	b.n	800b12a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	7819      	ldrb	r1, [r3, #0]
 800b10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	3334      	adds	r3, #52	; 0x34
 800b114:	460a      	mov	r2, r1
 800b116:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	4413      	add	r3, r2
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d006      	beq.n	800b132 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	3301      	adds	r3, #1
 800b128:	61fb      	str	r3, [r7, #28]
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	2b0f      	cmp	r3, #15
 800b12e:	d9e9      	bls.n	800b104 <prvInitialiseNewTask+0x54>
 800b130:	e000      	b.n	800b134 <prvInitialiseNewTask+0x84>
			{
				break;
 800b132:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b13c:	e003      	b.n	800b146 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	2b06      	cmp	r3, #6
 800b14a:	d901      	bls.n	800b150 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b14c:	2306      	movs	r3, #6
 800b14e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b154:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b15a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2200      	movs	r2, #0
 800b160:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fc56 	bl	8009a18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	3318      	adds	r3, #24
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fc51 	bl	8009a18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	f1c3 0207 	rsb	r2, r3, #7
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b18a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	2200      	movs	r2, #0
 800b190:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	68f9      	ldr	r1, [r7, #12]
 800b19e:	69b8      	ldr	r0, [r7, #24]
 800b1a0:	f7fe fcce 	bl	8009b40 <pxPortInitialiseStack>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3720      	adds	r7, #32
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1c8:	f7fe fde4 	bl	8009d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <prvAddNewTaskToReadyList+0xb8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	4a29      	ldr	r2, [pc, #164]	; (800b278 <prvAddNewTaskToReadyList+0xb8>)
 800b1d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1d6:	4b29      	ldr	r3, [pc, #164]	; (800b27c <prvAddNewTaskToReadyList+0xbc>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d109      	bne.n	800b1f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1de:	4a27      	ldr	r2, [pc, #156]	; (800b27c <prvAddNewTaskToReadyList+0xbc>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1e4:	4b24      	ldr	r3, [pc, #144]	; (800b278 <prvAddNewTaskToReadyList+0xb8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d110      	bne.n	800b20e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1ec:	f000 fc78 	bl	800bae0 <prvInitialiseTaskLists>
 800b1f0:	e00d      	b.n	800b20e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1f2:	4b23      	ldr	r3, [pc, #140]	; (800b280 <prvAddNewTaskToReadyList+0xc0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1fa:	4b20      	ldr	r3, [pc, #128]	; (800b27c <prvAddNewTaskToReadyList+0xbc>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	429a      	cmp	r2, r3
 800b206:	d802      	bhi.n	800b20e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b208:	4a1c      	ldr	r2, [pc, #112]	; (800b27c <prvAddNewTaskToReadyList+0xbc>)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b20e:	4b1d      	ldr	r3, [pc, #116]	; (800b284 <prvAddNewTaskToReadyList+0xc4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3301      	adds	r3, #1
 800b214:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <prvAddNewTaskToReadyList+0xc4>)
 800b216:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	2201      	movs	r2, #1
 800b21e:	409a      	lsls	r2, r3
 800b220:	4b19      	ldr	r3, [pc, #100]	; (800b288 <prvAddNewTaskToReadyList+0xc8>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4313      	orrs	r3, r2
 800b226:	4a18      	ldr	r2, [pc, #96]	; (800b288 <prvAddNewTaskToReadyList+0xc8>)
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a15      	ldr	r2, [pc, #84]	; (800b28c <prvAddNewTaskToReadyList+0xcc>)
 800b238:	441a      	add	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fe fbf6 	bl	8009a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b246:	f7fe fdd5 	bl	8009df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <prvAddNewTaskToReadyList+0xc0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00e      	beq.n	800b270 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b252:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <prvAddNewTaskToReadyList+0xbc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d207      	bcs.n	800b270 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b260:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <prvAddNewTaskToReadyList+0xd0>)
 800b262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	240041ac 	.word	0x240041ac
 800b27c:	240040ac 	.word	0x240040ac
 800b280:	240041b8 	.word	0x240041b8
 800b284:	240041c8 	.word	0x240041c8
 800b288:	240041b4 	.word	0x240041b4
 800b28c:	240040b0 	.word	0x240040b0
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b29c:	f7fe fd7a 	bl	8009d94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d102      	bne.n	800b2ac <vTaskDelete+0x18>
 800b2a6:	4b39      	ldr	r3, [pc, #228]	; (800b38c <vTaskDelete+0xf8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	e000      	b.n	800b2ae <vTaskDelete+0x1a>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe fc19 	bl	8009aec <uxListRemove>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d115      	bne.n	800b2ec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4932      	ldr	r1, [pc, #200]	; (800b390 <vTaskDelete+0xfc>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <vTaskDelete+0x58>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2da:	2201      	movs	r2, #1
 800b2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e0:	43da      	mvns	r2, r3
 800b2e2:	4b2c      	ldr	r3, [pc, #176]	; (800b394 <vTaskDelete+0x100>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	4a2a      	ldr	r2, [pc, #168]	; (800b394 <vTaskDelete+0x100>)
 800b2ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d004      	beq.n	800b2fe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3318      	adds	r3, #24
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fe fbf7 	bl	8009aec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b2fe:	4b26      	ldr	r3, [pc, #152]	; (800b398 <vTaskDelete+0x104>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	4a24      	ldr	r2, [pc, #144]	; (800b398 <vTaskDelete+0x104>)
 800b306:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b308:	4b20      	ldr	r3, [pc, #128]	; (800b38c <vTaskDelete+0xf8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d10b      	bne.n	800b32a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4820      	ldr	r0, [pc, #128]	; (800b39c <vTaskDelete+0x108>)
 800b31a:	f7fe fb8a 	bl	8009a32 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b31e:	4b20      	ldr	r3, [pc, #128]	; (800b3a0 <vTaskDelete+0x10c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a1e      	ldr	r2, [pc, #120]	; (800b3a0 <vTaskDelete+0x10c>)
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	e009      	b.n	800b33e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b32a:	4b1e      	ldr	r3, [pc, #120]	; (800b3a4 <vTaskDelete+0x110>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3b01      	subs	r3, #1
 800b330:	4a1c      	ldr	r2, [pc, #112]	; (800b3a4 <vTaskDelete+0x110>)
 800b332:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 fc41 	bl	800bbbc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b33a:	f000 fc6f 	bl	800bc1c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b33e:	f7fe fd59 	bl	8009df4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b342:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <vTaskDelete+0x114>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01b      	beq.n	800b382 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b34a:	4b10      	ldr	r3, [pc, #64]	; (800b38c <vTaskDelete+0xf8>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	429a      	cmp	r2, r3
 800b352:	d116      	bne.n	800b382 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b354:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <vTaskDelete+0x118>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <vTaskDelete+0xde>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60bb      	str	r3, [r7, #8]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <vTaskDelete+0x11c>)
 800b374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	240040ac 	.word	0x240040ac
 800b390:	240040b0 	.word	0x240040b0
 800b394:	240041b4 	.word	0x240041b4
 800b398:	240041c8 	.word	0x240041c8
 800b39c:	24004180 	.word	0x24004180
 800b3a0:	24004194 	.word	0x24004194
 800b3a4:	240041ac 	.word	0x240041ac
 800b3a8:	240041b8 	.word	0x240041b8
 800b3ac:	240041d4 	.word	0x240041d4
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d017      	beq.n	800b3f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <vTaskDelay+0x60>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <vTaskDelay+0x30>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	60bb      	str	r3, [r7, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e4:	f000 f87a 	bl	800b4dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fdf2 	bl	800bfd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f0:	f000 f882 	bl	800b4f8 <xTaskResumeAll>
 800b3f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d107      	bne.n	800b40c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <vTaskDelay+0x64>)
 800b3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	240041d4 	.word	0x240041d4
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	; 0x28
 800b420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42a:	463a      	mov	r2, r7
 800b42c:	1d39      	adds	r1, r7, #4
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f7f5 f9d2 	bl	80007dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	9202      	str	r2, [sp, #8]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	2300      	movs	r3, #0
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2300      	movs	r3, #0
 800b448:	460a      	mov	r2, r1
 800b44a:	491e      	ldr	r1, [pc, #120]	; (800b4c4 <vTaskStartScheduler+0xa8>)
 800b44c:	481e      	ldr	r0, [pc, #120]	; (800b4c8 <vTaskStartScheduler+0xac>)
 800b44e:	f7ff fd8d 	bl	800af6c <xTaskCreateStatic>
 800b452:	4603      	mov	r3, r0
 800b454:	4a1d      	ldr	r2, [pc, #116]	; (800b4cc <vTaskStartScheduler+0xb0>)
 800b456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b458:	4b1c      	ldr	r3, [pc, #112]	; (800b4cc <vTaskStartScheduler+0xb0>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e001      	b.n	800b46a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d116      	bne.n	800b49e <vTaskStartScheduler+0x82>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
}
 800b482:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b484:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <vTaskStartScheduler+0xb4>)
 800b486:	f04f 32ff 	mov.w	r2, #4294967295
 800b48a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b48c:	4b11      	ldr	r3, [pc, #68]	; (800b4d4 <vTaskStartScheduler+0xb8>)
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <vTaskStartScheduler+0xbc>)
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b498:	f7fe fbda 	bl	8009c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b49c:	e00e      	b.n	800b4bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d10a      	bne.n	800b4bc <vTaskStartScheduler+0xa0>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	60fb      	str	r3, [r7, #12]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <vTaskStartScheduler+0x9e>
}
 800b4bc:	bf00      	nop
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	0801f5fc 	.word	0x0801f5fc
 800b4c8:	0800bab1 	.word	0x0800bab1
 800b4cc:	240041d0 	.word	0x240041d0
 800b4d0:	240041cc 	.word	0x240041cc
 800b4d4:	240041b8 	.word	0x240041b8
 800b4d8:	240041b0 	.word	0x240041b0

0800b4dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4e0:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <vTaskSuspendAll+0x18>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a03      	ldr	r2, [pc, #12]	; (800b4f4 <vTaskSuspendAll+0x18>)
 800b4e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4ea:	bf00      	nop
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	240041d4 	.word	0x240041d4

0800b4f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b506:	4b41      	ldr	r3, [pc, #260]	; (800b60c <xTaskResumeAll+0x114>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <xTaskResumeAll+0x2c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	603b      	str	r3, [r7, #0]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b524:	f7fe fc36 	bl	8009d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b528:	4b38      	ldr	r3, [pc, #224]	; (800b60c <xTaskResumeAll+0x114>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	4a37      	ldr	r2, [pc, #220]	; (800b60c <xTaskResumeAll+0x114>)
 800b530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b532:	4b36      	ldr	r3, [pc, #216]	; (800b60c <xTaskResumeAll+0x114>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d161      	bne.n	800b5fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b53a:	4b35      	ldr	r3, [pc, #212]	; (800b610 <xTaskResumeAll+0x118>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d05d      	beq.n	800b5fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b542:	e02e      	b.n	800b5a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <xTaskResumeAll+0x11c>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3318      	adds	r3, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe facb 	bl	8009aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3304      	adds	r3, #4
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fac6 	bl	8009aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	2201      	movs	r2, #1
 800b566:	409a      	lsls	r2, r3
 800b568:	4b2b      	ldr	r3, [pc, #172]	; (800b618 <xTaskResumeAll+0x120>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	4a2a      	ldr	r2, [pc, #168]	; (800b618 <xTaskResumeAll+0x120>)
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4a27      	ldr	r2, [pc, #156]	; (800b61c <xTaskResumeAll+0x124>)
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3304      	adds	r3, #4
 800b586:	4619      	mov	r1, r3
 800b588:	4610      	mov	r0, r2
 800b58a:	f7fe fa52 	bl	8009a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <xTaskResumeAll+0x128>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d302      	bcc.n	800b5a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b59c:	4b21      	ldr	r3, [pc, #132]	; (800b624 <xTaskResumeAll+0x12c>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <xTaskResumeAll+0x11c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1cc      	bne.n	800b544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5b0:	f000 fb34 	bl	800bc1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <xTaskResumeAll+0x130>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d010      	beq.n	800b5e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5c0:	f000 f858 	bl	800b674 <xTaskIncrementTick>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <xTaskResumeAll+0x12c>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1f1      	bne.n	800b5c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b5dc:	4b12      	ldr	r3, [pc, #72]	; (800b628 <xTaskResumeAll+0x130>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5e2:	4b10      	ldr	r3, [pc, #64]	; (800b624 <xTaskResumeAll+0x12c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <xTaskResumeAll+0x134>)
 800b5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5fe:	f7fe fbf9 	bl	8009df4 <vPortExitCritical>

	return xAlreadyYielded;
 800b602:	68bb      	ldr	r3, [r7, #8]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	240041d4 	.word	0x240041d4
 800b610:	240041ac 	.word	0x240041ac
 800b614:	2400416c 	.word	0x2400416c
 800b618:	240041b4 	.word	0x240041b4
 800b61c:	240040b0 	.word	0x240040b0
 800b620:	240040ac 	.word	0x240040ac
 800b624:	240041c0 	.word	0x240041c0
 800b628:	240041bc 	.word	0x240041bc
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <xTaskGetTickCount+0x1c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b63c:	687b      	ldr	r3, [r7, #4]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	240041b0 	.word	0x240041b0

0800b650 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b656:	f7fe fc7f 	bl	8009f58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b65a:	2300      	movs	r3, #0
 800b65c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b65e:	4b04      	ldr	r3, [pc, #16]	; (800b670 <xTaskGetTickCountFromISR+0x20>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b664:	683b      	ldr	r3, [r7, #0]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	240041b0 	.word	0x240041b0

0800b674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b67e:	4b4e      	ldr	r3, [pc, #312]	; (800b7b8 <xTaskIncrementTick+0x144>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 808e 	bne.w	800b7a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b688:	4b4c      	ldr	r3, [pc, #304]	; (800b7bc <xTaskIncrementTick+0x148>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3301      	adds	r3, #1
 800b68e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b690:	4a4a      	ldr	r2, [pc, #296]	; (800b7bc <xTaskIncrementTick+0x148>)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d120      	bne.n	800b6de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b69c:	4b48      	ldr	r3, [pc, #288]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	603b      	str	r3, [r7, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <xTaskIncrementTick+0x46>
 800b6bc:	4b40      	ldr	r3, [pc, #256]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	4b40      	ldr	r3, [pc, #256]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a3e      	ldr	r2, [pc, #248]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	4a3e      	ldr	r2, [pc, #248]	; (800b7c4 <xTaskIncrementTick+0x150>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	4b3d      	ldr	r3, [pc, #244]	; (800b7c8 <xTaskIncrementTick+0x154>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a3c      	ldr	r2, [pc, #240]	; (800b7c8 <xTaskIncrementTick+0x154>)
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	f000 fa9f 	bl	800bc1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6de:	4b3b      	ldr	r3, [pc, #236]	; (800b7cc <xTaskIncrementTick+0x158>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d348      	bcc.n	800b77a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6e8:	4b35      	ldr	r3, [pc, #212]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d104      	bne.n	800b6fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f2:	4b36      	ldr	r3, [pc, #216]	; (800b7cc <xTaskIncrementTick+0x158>)
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	601a      	str	r2, [r3, #0]
					break;
 800b6fa:	e03e      	b.n	800b77a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6fc:	4b30      	ldr	r3, [pc, #192]	; (800b7c0 <xTaskIncrementTick+0x14c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d203      	bcs.n	800b71c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b714:	4a2d      	ldr	r2, [pc, #180]	; (800b7cc <xTaskIncrementTick+0x158>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b71a:	e02e      	b.n	800b77a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	3304      	adds	r3, #4
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe f9e3 	bl	8009aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	3318      	adds	r3, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe f9da 	bl	8009aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	2201      	movs	r2, #1
 800b73e:	409a      	lsls	r2, r3
 800b740:	4b23      	ldr	r3, [pc, #140]	; (800b7d0 <xTaskIncrementTick+0x15c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4313      	orrs	r3, r2
 800b746:	4a22      	ldr	r2, [pc, #136]	; (800b7d0 <xTaskIncrementTick+0x15c>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4a1f      	ldr	r2, [pc, #124]	; (800b7d4 <xTaskIncrementTick+0x160>)
 800b758:	441a      	add	r2, r3
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fe f966 	bl	8009a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	4b1b      	ldr	r3, [pc, #108]	; (800b7d8 <xTaskIncrementTick+0x164>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	429a      	cmp	r2, r3
 800b772:	d3b9      	bcc.n	800b6e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b778:	e7b6      	b.n	800b6e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b77a:	4b17      	ldr	r3, [pc, #92]	; (800b7d8 <xTaskIncrementTick+0x164>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	4914      	ldr	r1, [pc, #80]	; (800b7d4 <xTaskIncrementTick+0x160>)
 800b782:	4613      	mov	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	440b      	add	r3, r1
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d901      	bls.n	800b796 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b792:	2301      	movs	r3, #1
 800b794:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b796:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <xTaskIncrementTick+0x168>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d007      	beq.n	800b7ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
 800b7a2:	e004      	b.n	800b7ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7a4:	4b0e      	ldr	r3, [pc, #56]	; (800b7e0 <xTaskIncrementTick+0x16c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	4a0d      	ldr	r2, [pc, #52]	; (800b7e0 <xTaskIncrementTick+0x16c>)
 800b7ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7ae:	697b      	ldr	r3, [r7, #20]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	240041d4 	.word	0x240041d4
 800b7bc:	240041b0 	.word	0x240041b0
 800b7c0:	24004164 	.word	0x24004164
 800b7c4:	24004168 	.word	0x24004168
 800b7c8:	240041c4 	.word	0x240041c4
 800b7cc:	240041cc 	.word	0x240041cc
 800b7d0:	240041b4 	.word	0x240041b4
 800b7d4:	240040b0 	.word	0x240040b0
 800b7d8:	240040ac 	.word	0x240040ac
 800b7dc:	240041c0 	.word	0x240041c0
 800b7e0:	240041bc 	.word	0x240041bc

0800b7e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7ea:	4b27      	ldr	r3, [pc, #156]	; (800b888 <vTaskSwitchContext+0xa4>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7f2:	4b26      	ldr	r3, [pc, #152]	; (800b88c <vTaskSwitchContext+0xa8>)
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7f8:	e03f      	b.n	800b87a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <vTaskSwitchContext+0xa8>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b800:	4b23      	ldr	r3, [pc, #140]	; (800b890 <vTaskSwitchContext+0xac>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	fab3 f383 	clz	r3, r3
 800b80c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	f1c3 031f 	rsb	r3, r3, #31
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	491f      	ldr	r1, [pc, #124]	; (800b894 <vTaskSwitchContext+0xb0>)
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	440b      	add	r3, r1
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	607b      	str	r3, [r7, #4]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <vTaskSwitchContext+0x5a>
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	4613      	mov	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4a12      	ldr	r2, [pc, #72]	; (800b894 <vTaskSwitchContext+0xb0>)
 800b84c:	4413      	add	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	605a      	str	r2, [r3, #4]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3308      	adds	r3, #8
 800b862:	429a      	cmp	r2, r3
 800b864:	d104      	bne.n	800b870 <vTaskSwitchContext+0x8c>
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	605a      	str	r2, [r3, #4]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	4a08      	ldr	r2, [pc, #32]	; (800b898 <vTaskSwitchContext+0xb4>)
 800b878:	6013      	str	r3, [r2, #0]
}
 800b87a:	bf00      	nop
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	240041d4 	.word	0x240041d4
 800b88c:	240041c0 	.word	0x240041c0
 800b890:	240041b4 	.word	0x240041b4
 800b894:	240040b0 	.word	0x240040b0
 800b898:	240040ac 	.word	0x240040ac

0800b89c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60fb      	str	r3, [r7, #12]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c2:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <vTaskPlaceOnEventList+0x44>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3318      	adds	r3, #24
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7fe f8d5 	bl	8009a7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	6838      	ldr	r0, [r7, #0]
 800b8d4:	f000 fb7e 	bl	800bfd4 <prvAddCurrentTaskToDelayedList>
}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	240040ac 	.word	0x240040ac

0800b8e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10a      	bne.n	800b910 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	60fb      	str	r3, [r7, #12]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	3318      	adds	r3, #24
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe f8e9 	bl	8009aec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b91a:	4b1d      	ldr	r3, [pc, #116]	; (800b990 <xTaskRemoveFromEventList+0xac>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d11c      	bne.n	800b95c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe f8e0 	bl	8009aec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	2201      	movs	r2, #1
 800b932:	409a      	lsls	r2, r3
 800b934:	4b17      	ldr	r3, [pc, #92]	; (800b994 <xTaskRemoveFromEventList+0xb0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4313      	orrs	r3, r2
 800b93a:	4a16      	ldr	r2, [pc, #88]	; (800b994 <xTaskRemoveFromEventList+0xb0>)
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	4613      	mov	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4a13      	ldr	r2, [pc, #76]	; (800b998 <xTaskRemoveFromEventList+0xb4>)
 800b94c:	441a      	add	r2, r3
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	3304      	adds	r3, #4
 800b952:	4619      	mov	r1, r3
 800b954:	4610      	mov	r0, r2
 800b956:	f7fe f86c 	bl	8009a32 <vListInsertEnd>
 800b95a:	e005      	b.n	800b968 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	3318      	adds	r3, #24
 800b960:	4619      	mov	r1, r3
 800b962:	480e      	ldr	r0, [pc, #56]	; (800b99c <xTaskRemoveFromEventList+0xb8>)
 800b964:	f7fe f865 	bl	8009a32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <xTaskRemoveFromEventList+0xbc>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b972:	429a      	cmp	r2, r3
 800b974:	d905      	bls.n	800b982 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b976:	2301      	movs	r3, #1
 800b978:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b97a:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <xTaskRemoveFromEventList+0xc0>)
 800b97c:	2201      	movs	r2, #1
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	e001      	b.n	800b986 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b982:	2300      	movs	r3, #0
 800b984:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b986:	697b      	ldr	r3, [r7, #20]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	240041d4 	.word	0x240041d4
 800b994:	240041b4 	.word	0x240041b4
 800b998:	240040b0 	.word	0x240040b0
 800b99c:	2400416c 	.word	0x2400416c
 800b9a0:	240040ac 	.word	0x240040ac
 800b9a4:	240041c0 	.word	0x240041c0

0800b9a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9b0:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <vTaskInternalSetTimeOutState+0x24>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <vTaskInternalSetTimeOutState+0x28>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	605a      	str	r2, [r3, #4]
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	240041c4 	.word	0x240041c4
 800b9d0:	240041b0 	.word	0x240041b0

0800b9d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	613b      	str	r3, [r7, #16]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba16:	f7fe f9bd 	bl	8009d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba1a:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <xTaskCheckForTimeOut+0xbc>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba32:	d102      	bne.n	800ba3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	61fb      	str	r3, [r7, #28]
 800ba38:	e023      	b.n	800ba82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <xTaskCheckForTimeOut+0xc0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d007      	beq.n	800ba56 <xTaskCheckForTimeOut+0x82>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d302      	bcc.n	800ba56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	e015      	b.n	800ba82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d20b      	bcs.n	800ba78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	1ad2      	subs	r2, r2, r3
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff ff9b 	bl	800b9a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	61fb      	str	r3, [r7, #28]
 800ba76:	e004      	b.n	800ba82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba82:	f7fe f9b7 	bl	8009df4 <vPortExitCritical>

	return xReturn;
 800ba86:	69fb      	ldr	r3, [r7, #28]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	240041b0 	.word	0x240041b0
 800ba94:	240041c4 	.word	0x240041c4

0800ba98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba9c:	4b03      	ldr	r3, [pc, #12]	; (800baac <vTaskMissedYield+0x14>)
 800ba9e:	2201      	movs	r2, #1
 800baa0:	601a      	str	r2, [r3, #0]
}
 800baa2:	bf00      	nop
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	240041c0 	.word	0x240041c0

0800bab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bab8:	f000 f852 	bl	800bb60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800babc:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <prvIdleTask+0x28>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d9f9      	bls.n	800bab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <prvIdleTask+0x2c>)
 800bac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bad4:	e7f0      	b.n	800bab8 <prvIdleTask+0x8>
 800bad6:	bf00      	nop
 800bad8:	240040b0 	.word	0x240040b0
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bae6:	2300      	movs	r3, #0
 800bae8:	607b      	str	r3, [r7, #4]
 800baea:	e00c      	b.n	800bb06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4a12      	ldr	r2, [pc, #72]	; (800bb40 <prvInitialiseTaskLists+0x60>)
 800baf8:	4413      	add	r3, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fd ff6c 	bl	80099d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3301      	adds	r3, #1
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b06      	cmp	r3, #6
 800bb0a:	d9ef      	bls.n	800baec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb0c:	480d      	ldr	r0, [pc, #52]	; (800bb44 <prvInitialiseTaskLists+0x64>)
 800bb0e:	f7fd ff63 	bl	80099d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb12:	480d      	ldr	r0, [pc, #52]	; (800bb48 <prvInitialiseTaskLists+0x68>)
 800bb14:	f7fd ff60 	bl	80099d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb18:	480c      	ldr	r0, [pc, #48]	; (800bb4c <prvInitialiseTaskLists+0x6c>)
 800bb1a:	f7fd ff5d 	bl	80099d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb1e:	480c      	ldr	r0, [pc, #48]	; (800bb50 <prvInitialiseTaskLists+0x70>)
 800bb20:	f7fd ff5a 	bl	80099d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb24:	480b      	ldr	r0, [pc, #44]	; (800bb54 <prvInitialiseTaskLists+0x74>)
 800bb26:	f7fd ff57 	bl	80099d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb2a:	4b0b      	ldr	r3, [pc, #44]	; (800bb58 <prvInitialiseTaskLists+0x78>)
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <prvInitialiseTaskLists+0x64>)
 800bb2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <prvInitialiseTaskLists+0x7c>)
 800bb32:	4a05      	ldr	r2, [pc, #20]	; (800bb48 <prvInitialiseTaskLists+0x68>)
 800bb34:	601a      	str	r2, [r3, #0]
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	240040b0 	.word	0x240040b0
 800bb44:	2400413c 	.word	0x2400413c
 800bb48:	24004150 	.word	0x24004150
 800bb4c:	2400416c 	.word	0x2400416c
 800bb50:	24004180 	.word	0x24004180
 800bb54:	24004198 	.word	0x24004198
 800bb58:	24004164 	.word	0x24004164
 800bb5c:	24004168 	.word	0x24004168

0800bb60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb66:	e019      	b.n	800bb9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb68:	f7fe f914 	bl	8009d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6c:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <prvCheckTasksWaitingTermination+0x50>)
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3304      	adds	r3, #4
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fd ffb7 	bl	8009aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <prvCheckTasksWaitingTermination+0x54>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	4a0b      	ldr	r2, [pc, #44]	; (800bbb4 <prvCheckTasksWaitingTermination+0x54>)
 800bb86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb88:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <prvCheckTasksWaitingTermination+0x58>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <prvCheckTasksWaitingTermination+0x58>)
 800bb90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb92:	f7fe f92f 	bl	8009df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f810 	bl	800bbbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <prvCheckTasksWaitingTermination+0x58>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e1      	bne.n	800bb68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	24004180 	.word	0x24004180
 800bbb4:	240041ac 	.word	0x240041ac
 800bbb8:	24004194 	.word	0x24004194

0800bbbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d108      	bne.n	800bbe0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd fde2 	bl	800979c <vPortFree>
				vPortFree( pxTCB );
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7fd fddf 	bl	800979c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbde:	e018      	b.n	800bc12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d103      	bne.n	800bbf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fd fdd6 	bl	800979c <vPortFree>
	}
 800bbf0:	e00f      	b.n	800bc12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d00a      	beq.n	800bc12 <prvDeleteTCB+0x56>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <prvDeleteTCB+0x54>
	}
 800bc12:	bf00      	nop
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc22:	4b0c      	ldr	r3, [pc, #48]	; (800bc54 <prvResetNextTaskUnblockTime+0x38>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <prvResetNextTaskUnblockTime+0x3c>)
 800bc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc34:	e008      	b.n	800bc48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc36:	4b07      	ldr	r3, [pc, #28]	; (800bc54 <prvResetNextTaskUnblockTime+0x38>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4a04      	ldr	r2, [pc, #16]	; (800bc58 <prvResetNextTaskUnblockTime+0x3c>)
 800bc46:	6013      	str	r3, [r2, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	24004164 	.word	0x24004164
 800bc58:	240041cc 	.word	0x240041cc

0800bc5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <xTaskGetSchedulerState+0x34>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d102      	bne.n	800bc70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	607b      	str	r3, [r7, #4]
 800bc6e:	e008      	b.n	800bc82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc70:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <xTaskGetSchedulerState+0x38>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	607b      	str	r3, [r7, #4]
 800bc7c:	e001      	b.n	800bc82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc82:	687b      	ldr	r3, [r7, #4]
	}
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	240041b8 	.word	0x240041b8
 800bc94:	240041d4 	.word	0x240041d4

0800bc98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d05e      	beq.n	800bd6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb2:	4b31      	ldr	r3, [pc, #196]	; (800bd78 <xTaskPriorityInherit+0xe0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d24e      	bcs.n	800bd5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	db06      	blt.n	800bcd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc4:	4b2c      	ldr	r3, [pc, #176]	; (800bd78 <xTaskPriorityInherit+0xe0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcca:	f1c3 0207 	rsb	r2, r3, #7
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	6959      	ldr	r1, [r3, #20]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4a26      	ldr	r2, [pc, #152]	; (800bd7c <xTaskPriorityInherit+0xe4>)
 800bce4:	4413      	add	r3, r2
 800bce6:	4299      	cmp	r1, r3
 800bce8:	d12f      	bne.n	800bd4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd fefc 	bl	8009aec <uxListRemove>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	2201      	movs	r2, #1
 800bd00:	fa02 f303 	lsl.w	r3, r2, r3
 800bd04:	43da      	mvns	r2, r3
 800bd06:	4b1e      	ldr	r3, [pc, #120]	; (800bd80 <xTaskPriorityInherit+0xe8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	4a1c      	ldr	r2, [pc, #112]	; (800bd80 <xTaskPriorityInherit+0xe8>)
 800bd0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd10:	4b19      	ldr	r3, [pc, #100]	; (800bd78 <xTaskPriorityInherit+0xe0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	2201      	movs	r2, #1
 800bd20:	409a      	lsls	r2, r3
 800bd22:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <xTaskPriorityInherit+0xe8>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	4a15      	ldr	r2, [pc, #84]	; (800bd80 <xTaskPriorityInherit+0xe8>)
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4a10      	ldr	r2, [pc, #64]	; (800bd7c <xTaskPriorityInherit+0xe4>)
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7fd fe75 	bl	8009a32 <vListInsertEnd>
 800bd48:	e004      	b.n	800bd54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <xTaskPriorityInherit+0xe0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	e008      	b.n	800bd6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd5e:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <xTaskPriorityInherit+0xe0>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d201      	bcs.n	800bd6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
	}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	240040ac 	.word	0x240040ac
 800bd7c:	240040b0 	.word	0x240040b0
 800bd80:	240041b4 	.word	0x240041b4

0800bd84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd90:	2300      	movs	r3, #0
 800bd92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d06e      	beq.n	800be78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd9a:	4b3a      	ldr	r3, [pc, #232]	; (800be84 <xTaskPriorityDisinherit+0x100>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d00a      	beq.n	800bdba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	60fb      	str	r3, [r7, #12]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	60bb      	str	r3, [r7, #8]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d044      	beq.n	800be78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d140      	bne.n	800be78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fd fe76 	bl	8009aec <uxListRemove>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d115      	bne.n	800be32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0a:	491f      	ldr	r1, [pc, #124]	; (800be88 <xTaskPriorityDisinherit+0x104>)
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <xTaskPriorityDisinherit+0xae>
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	2201      	movs	r2, #1
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	43da      	mvns	r2, r3
 800be28:	4b18      	ldr	r3, [pc, #96]	; (800be8c <xTaskPriorityDisinherit+0x108>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4013      	ands	r3, r2
 800be2e:	4a17      	ldr	r2, [pc, #92]	; (800be8c <xTaskPriorityDisinherit+0x108>)
 800be30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	f1c3 0207 	rsb	r2, r3, #7
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4a:	2201      	movs	r2, #1
 800be4c:	409a      	lsls	r2, r3
 800be4e:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <xTaskPriorityDisinherit+0x108>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4313      	orrs	r3, r2
 800be54:	4a0d      	ldr	r2, [pc, #52]	; (800be8c <xTaskPriorityDisinherit+0x108>)
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4a08      	ldr	r2, [pc, #32]	; (800be88 <xTaskPriorityDisinherit+0x104>)
 800be66:	441a      	add	r2, r3
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3304      	adds	r3, #4
 800be6c:	4619      	mov	r1, r3
 800be6e:	4610      	mov	r0, r2
 800be70:	f7fd fddf 	bl	8009a32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be74:	2301      	movs	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be78:	697b      	ldr	r3, [r7, #20]
	}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	240040ac 	.word	0x240040ac
 800be88:	240040b0 	.word	0x240040b0
 800be8c:	240041b4 	.word	0x240041b4

0800be90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be9e:	2301      	movs	r3, #1
 800bea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d077      	beq.n	800bf98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	60fb      	str	r3, [r7, #12]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d902      	bls.n	800bed6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	61fb      	str	r3, [r7, #28]
 800bed4:	e002      	b.n	800bedc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	69fa      	ldr	r2, [r7, #28]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d058      	beq.n	800bf98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	429a      	cmp	r2, r3
 800beee:	d153      	bne.n	800bf98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d10a      	bne.n	800bf10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	60bb      	str	r3, [r7, #8]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	db04      	blt.n	800bf2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	f1c3 0207 	rsb	r2, r3, #7
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	6959      	ldr	r1, [r3, #20]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4a19      	ldr	r2, [pc, #100]	; (800bfa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bf3e:	4413      	add	r3, r2
 800bf40:	4299      	cmp	r1, r3
 800bf42:	d129      	bne.n	800bf98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fd fdcf 	bl	8009aec <uxListRemove>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	2201      	movs	r2, #1
 800bf5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf5e:	43da      	mvns	r2, r3
 800bf60:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4013      	ands	r3, r2
 800bf66:	4a10      	ldr	r2, [pc, #64]	; (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	2201      	movs	r2, #1
 800bf70:	409a      	lsls	r2, r3
 800bf72:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	4a0b      	ldr	r2, [pc, #44]	; (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4a06      	ldr	r2, [pc, #24]	; (800bfa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bf8a:	441a      	add	r2, r3
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	4619      	mov	r1, r3
 800bf92:	4610      	mov	r0, r2
 800bf94:	f7fd fd4d 	bl	8009a32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf98:	bf00      	nop
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	240040ac 	.word	0x240040ac
 800bfa4:	240040b0 	.word	0x240040b0
 800bfa8:	240041b4 	.word	0x240041b4

0800bfac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfac:	b480      	push	{r7}
 800bfae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bfc2:	4b03      	ldr	r3, [pc, #12]	; (800bfd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
	}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	240040ac 	.word	0x240040ac

0800bfd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfde:	4b29      	ldr	r3, [pc, #164]	; (800c084 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfe4:	4b28      	ldr	r3, [pc, #160]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fd fd7e 	bl	8009aec <uxListRemove>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10b      	bne.n	800c00e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	2201      	movs	r2, #1
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	43da      	mvns	r2, r3
 800c004:	4b21      	ldr	r3, [pc, #132]	; (800c08c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4013      	ands	r3, r2
 800c00a:	4a20      	ldr	r2, [pc, #128]	; (800c08c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c00c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d10a      	bne.n	800c02c <prvAddCurrentTaskToDelayedList+0x58>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c01c:	4b1a      	ldr	r3, [pc, #104]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	481a      	ldr	r0, [pc, #104]	; (800c090 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c026:	f7fd fd04 	bl	8009a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c02a:	e026      	b.n	800c07a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c034:	4b14      	ldr	r3, [pc, #80]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	429a      	cmp	r2, r3
 800c042:	d209      	bcs.n	800c058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	4b0f      	ldr	r3, [pc, #60]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fd fd12 	bl	8009a7a <vListInsert>
}
 800c056:	e010      	b.n	800c07a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c058:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	4b0a      	ldr	r3, [pc, #40]	; (800c088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3304      	adds	r3, #4
 800c062:	4619      	mov	r1, r3
 800c064:	4610      	mov	r0, r2
 800c066:	f7fd fd08 	bl	8009a7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c06a:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	429a      	cmp	r2, r3
 800c072:	d202      	bcs.n	800c07a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c074:	4a09      	ldr	r2, [pc, #36]	; (800c09c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	6013      	str	r3, [r2, #0]
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	240041b0 	.word	0x240041b0
 800c088:	240040ac 	.word	0x240040ac
 800c08c:	240041b4 	.word	0x240041b4
 800c090:	24004198 	.word	0x24004198
 800c094:	24004168 	.word	0x24004168
 800c098:	24004164 	.word	0x24004164
 800c09c:	240041cc 	.word	0x240041cc

0800c0a0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f00e fe33 	bl	801ad20 <tcpip_send_msg_wait_sem>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <netconn_apimsg+0x2e>
    return apimsg->err;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c0cc:	e001      	b.n	800c0d2 <netconn_apimsg+0x32>
  }
  return err;
 800c0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08c      	sub	sp, #48	; 0x30
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	603a      	str	r2, [r7, #0]
 800c0e6:	71fb      	strb	r3, [r7, #7]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 f923 	bl	800d33c <netconn_alloc>
 800c0f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d054      	beq.n	800c1a8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c0fe:	79bb      	ldrb	r3, [r7, #6]
 800c100:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c106:	f107 0308 	add.w	r3, r7, #8
 800c10a:	4619      	mov	r1, r3
 800c10c:	4829      	ldr	r0, [pc, #164]	; (800c1b4 <netconn_new_with_proto_and_callback+0xd8>)
 800c10e:	f7ff ffc7 	bl	800c0a0 <netconn_apimsg>
 800c112:	4603      	mov	r3, r0
 800c114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c118:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d043      	beq.n	800c1a8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <netconn_new_with_proto_and_callback+0x58>
 800c128:	4b23      	ldr	r3, [pc, #140]	; (800c1b8 <netconn_new_with_proto_and_callback+0xdc>)
 800c12a:	22a3      	movs	r2, #163	; 0xa3
 800c12c:	4923      	ldr	r1, [pc, #140]	; (800c1bc <netconn_new_with_proto_and_callback+0xe0>)
 800c12e:	4824      	ldr	r0, [pc, #144]	; (800c1c0 <netconn_new_with_proto_and_callback+0xe4>)
 800c130:	f010 f960 	bl	801c3f4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	3310      	adds	r3, #16
 800c138:	4618      	mov	r0, r3
 800c13a:	f008 fb02 	bl	8014742 <sys_mbox_valid>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d105      	bne.n	800c150 <netconn_new_with_proto_and_callback+0x74>
 800c144:	4b1c      	ldr	r3, [pc, #112]	; (800c1b8 <netconn_new_with_proto_and_callback+0xdc>)
 800c146:	22a4      	movs	r2, #164	; 0xa4
 800c148:	491e      	ldr	r1, [pc, #120]	; (800c1c4 <netconn_new_with_proto_and_callback+0xe8>)
 800c14a:	481d      	ldr	r0, [pc, #116]	; (800c1c0 <netconn_new_with_proto_and_callback+0xe4>)
 800c14c:	f010 f952 	bl	801c3f4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	3314      	adds	r3, #20
 800c154:	4618      	mov	r0, r3
 800c156:	f008 faf4 	bl	8014742 <sys_mbox_valid>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <netconn_new_with_proto_and_callback+0x90>
 800c160:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <netconn_new_with_proto_and_callback+0xdc>)
 800c162:	22a6      	movs	r2, #166	; 0xa6
 800c164:	4918      	ldr	r1, [pc, #96]	; (800c1c8 <netconn_new_with_proto_and_callback+0xec>)
 800c166:	4816      	ldr	r0, [pc, #88]	; (800c1c0 <netconn_new_with_proto_and_callback+0xe4>)
 800c168:	f010 f944 	bl	801c3f4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	330c      	adds	r3, #12
 800c170:	4618      	mov	r0, r3
 800c172:	f008 fb77 	bl	8014864 <sys_sem_valid>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d105      	bne.n	800c188 <netconn_new_with_proto_and_callback+0xac>
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <netconn_new_with_proto_and_callback+0xdc>)
 800c17e:	22a9      	movs	r2, #169	; 0xa9
 800c180:	4912      	ldr	r1, [pc, #72]	; (800c1cc <netconn_new_with_proto_and_callback+0xf0>)
 800c182:	480f      	ldr	r0, [pc, #60]	; (800c1c0 <netconn_new_with_proto_and_callback+0xe4>)
 800c184:	f010 f936 	bl	801c3f4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	330c      	adds	r3, #12
 800c18c:	4618      	mov	r0, r3
 800c18e:	f008 fb5c 	bl	801484a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	3310      	adds	r3, #16
 800c196:	4618      	mov	r0, r3
 800c198:	f008 fa4c 	bl	8014634 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c19c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c19e:	2007      	movs	r0, #7
 800c1a0:	f007 f832 	bl	8013208 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	e000      	b.n	800c1aa <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3730      	adds	r7, #48	; 0x30
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0800d311 	.word	0x0800d311
 800c1b8:	0801f604 	.word	0x0801f604
 800c1bc:	0801f658 	.word	0x0801f658
 800c1c0:	0801f67c 	.word	0x0801f67c
 800c1c4:	0801f6a4 	.word	0x0801f6a4
 800c1c8:	0801f6bc 	.word	0x0801f6bc
 800c1cc:	0801f6e0 	.word	0x0801f6e0

0800c1d0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08c      	sub	sp, #48	; 0x30
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e014      	b.n	800c20c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c1e6:	2329      	movs	r3, #41	; 0x29
 800c1e8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4808      	ldr	r0, [pc, #32]	; (800c214 <netconn_prepare_delete+0x44>)
 800c1f2:	f7ff ff55 	bl	800c0a0 <netconn_apimsg>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c1fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <netconn_prepare_delete+0x3a>
    return err;
 800c204:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c208:	e000      	b.n	800c20c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3730      	adds	r7, #48	; 0x30
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	0800d875 	.word	0x0800d875

0800c218 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <netconn_delete+0x12>
    return ERR_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	e00d      	b.n	800c246 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff ffd0 	bl	800c1d0 <netconn_prepare_delete>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <netconn_delete+0x2a>
    netconn_free(conn);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 f8eb 	bl	800d418 <netconn_free>
  }
  return err;
 800c242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08e      	sub	sp, #56	; 0x38
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4613      	mov	r3, r2
 800c25c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d109      	bne.n	800c278 <netconn_bind+0x28>
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <netconn_bind+0x5c>)
 800c266:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c26a:	4911      	ldr	r1, [pc, #68]	; (800c2b0 <netconn_bind+0x60>)
 800c26c:	4811      	ldr	r0, [pc, #68]	; (800c2b4 <netconn_bind+0x64>)
 800c26e:	f010 f8c1 	bl	801c3f4 <iprintf>
 800c272:	f06f 030f 	mvn.w	r3, #15
 800c276:	e015      	b.n	800c2a4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d101      	bne.n	800c282 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c27e:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <netconn_bind+0x68>)
 800c280:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c28e:	f107 0314 	add.w	r3, r7, #20
 800c292:	4619      	mov	r1, r3
 800c294:	4809      	ldr	r0, [pc, #36]	; (800c2bc <netconn_bind+0x6c>)
 800c296:	f7ff ff03 	bl	800c0a0 <netconn_apimsg>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c2a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3738      	adds	r7, #56	; 0x38
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	0801f604 	.word	0x0801f604
 800c2b0:	0801f75c 	.word	0x0801f75c
 800c2b4:	0801f67c 	.word	0x0801f67c
 800c2b8:	080463c8 	.word	0x080463c8
 800c2bc:	0800da3d 	.word	0x0800da3d

0800c2c0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08c      	sub	sp, #48	; 0x30
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d109      	bne.n	800c2e6 <netconn_listen_with_backlog+0x26>
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <netconn_listen_with_backlog+0x48>)
 800c2d4:	f240 12bb 	movw	r2, #443	; 0x1bb
 800c2d8:	490c      	ldr	r1, [pc, #48]	; (800c30c <netconn_listen_with_backlog+0x4c>)
 800c2da:	480d      	ldr	r0, [pc, #52]	; (800c310 <netconn_listen_with_backlog+0x50>)
 800c2dc:	f010 f88a 	bl	801c3f4 <iprintf>
 800c2e0:	f06f 030f 	mvn.w	r3, #15
 800c2e4:	e00c      	b.n	800c300 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4808      	ldr	r0, [pc, #32]	; (800c314 <netconn_listen_with_backlog+0x54>)
 800c2f2:	f7ff fed5 	bl	800c0a0 <netconn_apimsg>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c2fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c300:	4618      	mov	r0, r3
 800c302:	3730      	adds	r7, #48	; 0x30
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	0801f604 	.word	0x0801f604
 800c30c:	0801f7dc 	.word	0x0801f7dc
 800c310:	0801f67c 	.word	0x0801f67c
 800c314:	0800dab1 	.word	0x0800dab1

0800c318 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <netconn_accept+0x24>
 800c328:	4b3d      	ldr	r3, [pc, #244]	; (800c420 <netconn_accept+0x108>)
 800c32a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c32e:	493d      	ldr	r1, [pc, #244]	; (800c424 <netconn_accept+0x10c>)
 800c330:	483d      	ldr	r0, [pc, #244]	; (800c428 <netconn_accept+0x110>)
 800c332:	f010 f85f 	bl	801c3f4 <iprintf>
 800c336:	f06f 030f 	mvn.w	r3, #15
 800c33a:	e06c      	b.n	800c416 <netconn_accept+0xfe>
  *new_conn = NULL;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2200      	movs	r2, #0
 800c340:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <netconn_accept+0x44>
 800c348:	4b35      	ldr	r3, [pc, #212]	; (800c420 <netconn_accept+0x108>)
 800c34a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800c34e:	4937      	ldr	r1, [pc, #220]	; (800c42c <netconn_accept+0x114>)
 800c350:	4835      	ldr	r0, [pc, #212]	; (800c428 <netconn_accept+0x110>)
 800c352:	f010 f84f 	bl	801c3f4 <iprintf>
 800c356:	f06f 030f 	mvn.w	r3, #15
 800c35a:	e05c      	b.n	800c416 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fb6c 	bl	800ca3a <netconn_err>
 800c362:	4603      	mov	r3, r0
 800c364:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800c366:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800c36e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c372:	e050      	b.n	800c416 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3314      	adds	r3, #20
 800c378:	4618      	mov	r0, r3
 800c37a:	f008 f9e2 	bl	8014742 <sys_mbox_valid>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <netconn_accept+0x78>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7f1b      	ldrb	r3, [r3, #28]
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800c390:	f06f 030e 	mvn.w	r3, #14
 800c394:	e03f      	b.n	800c416 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7f1b      	ldrb	r3, [r3, #28]
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00e      	beq.n	800c3c0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3314      	adds	r3, #20
 800c3a6:	f107 020c 	add.w	r2, r7, #12
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f008 f9ac 	bl	801470a <sys_arch_mbox_tryfetch>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b8:	d10a      	bne.n	800c3d0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800c3ba:	f06f 0306 	mvn.w	r3, #6
 800c3be:	e02a      	b.n	800c416 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3314      	adds	r3, #20
 800c3c4:	f107 010c 	add.w	r1, r7, #12
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f008 f95e 	bl	801468c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <netconn_accept+0xcc>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2101      	movs	r1, #1
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f107 0213 	add.w	r2, r7, #19
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 fb75 	bl	800cadc <lwip_netconn_is_err_msg>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800c3f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3fc:	e00b      	b.n	800c416 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800c404:	f06f 030e 	mvn.w	r3, #14
 800c408:	e005      	b.n	800c416 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c414:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	0801f604 	.word	0x0801f604
 800c424:	0801f7fc 	.word	0x0801f7fc
 800c428:	0801f67c 	.word	0x0801f67c
 800c42c:	0801f81c 	.word	0x0801f81c

0800c430 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	4613      	mov	r3, r2
 800c43c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d109      	bne.n	800c45c <netconn_recv_data+0x2c>
 800c448:	4b58      	ldr	r3, [pc, #352]	; (800c5ac <netconn_recv_data+0x17c>)
 800c44a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c44e:	4958      	ldr	r1, [pc, #352]	; (800c5b0 <netconn_recv_data+0x180>)
 800c450:	4858      	ldr	r0, [pc, #352]	; (800c5b4 <netconn_recv_data+0x184>)
 800c452:	f00f ffcf 	bl	801c3f4 <iprintf>
 800c456:	f06f 030f 	mvn.w	r3, #15
 800c45a:	e0a2      	b.n	800c5a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <netconn_recv_data+0x4c>
 800c468:	4b50      	ldr	r3, [pc, #320]	; (800c5ac <netconn_recv_data+0x17c>)
 800c46a:	f240 224a 	movw	r2, #586	; 0x24a
 800c46e:	4952      	ldr	r1, [pc, #328]	; (800c5b8 <netconn_recv_data+0x188>)
 800c470:	4850      	ldr	r0, [pc, #320]	; (800c5b4 <netconn_recv_data+0x184>)
 800c472:	f00f ffbf 	bl	801c3f4 <iprintf>
 800c476:	f06f 030f 	mvn.w	r3, #15
 800c47a:	e092      	b.n	800c5a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	3310      	adds	r3, #16
 800c480:	4618      	mov	r0, r3
 800c482:	f008 f95e 	bl	8014742 <sys_mbox_valid>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10e      	bne.n	800c4aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 fad4 	bl	800ca3a <netconn_err>
 800c492:	4603      	mov	r3, r0
 800c494:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c496:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c49e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c4a2:	e07e      	b.n	800c5a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c4a4:	f06f 030a 	mvn.w	r3, #10
 800c4a8:	e07b      	b.n	800c5a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	7f1b      	ldrb	r3, [r3, #28]
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10f      	bne.n	800c4d6 <netconn_recv_data+0xa6>
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	7f1b      	ldrb	r3, [r3, #28]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d104      	bne.n	800c4d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d023      	beq.n	800c51e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3310      	adds	r3, #16
 800c4da:	f107 0218 	add.w	r2, r7, #24
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f008 f912 	bl	801470a <sys_arch_mbox_tryfetch>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ec:	d11f      	bne.n	800c52e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 faa3 	bl	800ca3a <netconn_err>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c4f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c500:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c504:	e04d      	b.n	800c5a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	7f1b      	ldrb	r3, [r3, #28]
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c512:	f06f 030a 	mvn.w	r3, #10
 800c516:	e044      	b.n	800c5a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c518:	f06f 0306 	mvn.w	r3, #6
 800c51c:	e041      	b.n	800c5a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3310      	adds	r3, #16
 800c522:	f107 0118 	add.w	r1, r7, #24
 800c526:	2200      	movs	r2, #0
 800c528:	4618      	mov	r0, r3
 800c52a:	f008 f8af 	bl	801468c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c536:	2b10      	cmp	r3, #16
 800c538:	d117      	bne.n	800c56a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	f107 0217 	add.w	r2, r7, #23
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f000 faca 	bl	800cadc <lwip_netconn_is_err_msg>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d009      	beq.n	800c562 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c552:	f113 0f0f 	cmn.w	r3, #15
 800c556:	d101      	bne.n	800c55c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	e022      	b.n	800c5a2 <netconn_recv_data+0x172>
      }
      return err;
 800c55c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c560:	e01f      	b.n	800c5a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	891b      	ldrh	r3, [r3, #8]
 800c566:	83fb      	strh	r3, [r7, #30]
 800c568:	e00d      	b.n	800c586 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d106      	bne.n	800c57e <netconn_recv_data+0x14e>
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <netconn_recv_data+0x17c>)
 800c572:	f240 2291 	movw	r2, #657	; 0x291
 800c576:	4911      	ldr	r1, [pc, #68]	; (800c5bc <netconn_recv_data+0x18c>)
 800c578:	480e      	ldr	r0, [pc, #56]	; (800c5b4 <netconn_recv_data+0x184>)
 800c57a:	f00f ff3b 	bl	801c3f4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	891b      	ldrh	r3, [r3, #8]
 800c584:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d005      	beq.n	800c59a <netconn_recv_data+0x16a>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	8bfa      	ldrh	r2, [r7, #30]
 800c594:	2101      	movs	r1, #1
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3720      	adds	r7, #32
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	0801f604 	.word	0x0801f604
 800c5b0:	0801f83c 	.word	0x0801f83c
 800c5b4:	0801f67c 	.word	0x0801f67c
 800c5b8:	0801f85c 	.word	0x0801f85c
 800c5bc:	0801f878 	.word	0x0801f878

0800c5c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d005      	beq.n	800c5de <netconn_tcp_recvd_msg+0x1e>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5da:	2b10      	cmp	r3, #16
 800c5dc:	d009      	beq.n	800c5f2 <netconn_tcp_recvd_msg+0x32>
 800c5de:	4b0c      	ldr	r3, [pc, #48]	; (800c610 <netconn_tcp_recvd_msg+0x50>)
 800c5e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c5e4:	490b      	ldr	r1, [pc, #44]	; (800c614 <netconn_tcp_recvd_msg+0x54>)
 800c5e6:	480c      	ldr	r0, [pc, #48]	; (800c618 <netconn_tcp_recvd_msg+0x58>)
 800c5e8:	f00f ff04 	bl	801c3f4 <iprintf>
 800c5ec:	f06f 030f 	mvn.w	r3, #15
 800c5f0:	e00a      	b.n	800c608 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	4806      	ldr	r0, [pc, #24]	; (800c61c <netconn_tcp_recvd_msg+0x5c>)
 800c602:	f7ff fd4d 	bl	800c0a0 <netconn_apimsg>
 800c606:	4603      	mov	r3, r0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	0801f604 	.word	0x0801f604
 800c614:	0801f884 	.word	0x0801f884
 800c618:	0801f67c 	.word	0x0801f67c
 800c61c:	0800dbe1 	.word	0x0800dbe1

0800c620 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b090      	sub	sp, #64	; 0x40
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3310      	adds	r3, #16
 800c632:	4618      	mov	r0, r3
 800c634:	f008 f885 	bl	8014742 <sys_mbox_valid>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d102      	bne.n	800c644 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c63e:	f06f 030a 	mvn.w	r3, #10
 800c642:	e06d      	b.n	800c720 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	7f1b      	ldrb	r3, [r3, #28]
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da07      	bge.n	800c65e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	7f1b      	ldrb	r3, [r3, #28]
 800c652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c656:	b2da      	uxtb	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c65c:	e039      	b.n	800c6d2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	461a      	mov	r2, r3
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7ff fee3 	bl	800c430 <netconn_recv_data>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c670:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c678:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c67c:	e050      	b.n	800c720 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c684:	79fb      	ldrb	r3, [r7, #7]
 800c686:	f003 0308 	and.w	r3, r3, #8
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10e      	bne.n	800c6ac <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <netconn_recv_data_tcp+0x7a>
 800c694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c696:	891b      	ldrh	r3, [r3, #8]
 800c698:	e000      	b.n	800c69c <netconn_recv_data_tcp+0x7c>
 800c69a:	2301      	movs	r3, #1
 800c69c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c69e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6a0:	f107 0214 	add.w	r2, r7, #20
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7ff ff8a 	bl	800c5c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d134      	bne.n	800c71c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d009      	beq.n	800c6d0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	7f1b      	ldrb	r3, [r3, #28]
 800c6c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c6ca:	f06f 0306 	mvn.w	r3, #6
 800c6ce:	e027      	b.n	800c720 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c6d0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d005      	beq.n	800c6e6 <netconn_recv_data_tcp+0xc6>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10f      	bne.n	800c70e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f9a3 	bl	800ca3a <netconn_err>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c6fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <netconn_recv_data_tcp+0xe8>
          return err;
 800c702:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c706:	e00b      	b.n	800c720 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c708:	f06f 030d 	mvn.w	r3, #13
 800c70c:	e008      	b.n	800c720 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c70e:	2101      	movs	r1, #1
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 f955 	bl	800c9c0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c716:	f06f 030e 	mvn.w	r3, #14
 800c71a:	e001      	b.n	800c720 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c71c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c720:	4618      	mov	r0, r3
 800c722:	3740      	adds	r7, #64	; 0x40
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d109      	bne.n	800c750 <netconn_recv+0x28>
 800c73c:	4b32      	ldr	r3, [pc, #200]	; (800c808 <netconn_recv+0xe0>)
 800c73e:	f240 3263 	movw	r2, #867	; 0x363
 800c742:	4932      	ldr	r1, [pc, #200]	; (800c80c <netconn_recv+0xe4>)
 800c744:	4832      	ldr	r0, [pc, #200]	; (800c810 <netconn_recv+0xe8>)
 800c746:	f00f fe55 	bl	801c3f4 <iprintf>
 800c74a:	f06f 030f 	mvn.w	r3, #15
 800c74e:	e056      	b.n	800c7fe <netconn_recv+0xd6>
  *new_buf = NULL;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d109      	bne.n	800c770 <netconn_recv+0x48>
 800c75c:	4b2a      	ldr	r3, [pc, #168]	; (800c808 <netconn_recv+0xe0>)
 800c75e:	f240 3265 	movw	r2, #869	; 0x365
 800c762:	492c      	ldr	r1, [pc, #176]	; (800c814 <netconn_recv+0xec>)
 800c764:	482a      	ldr	r0, [pc, #168]	; (800c810 <netconn_recv+0xe8>)
 800c766:	f00f fe45 	bl	801c3f4 <iprintf>
 800c76a:	f06f 030f 	mvn.w	r3, #15
 800c76e:	e046      	b.n	800c7fe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c778:	2b10      	cmp	r3, #16
 800c77a:	d13a      	bne.n	800c7f2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c780:	2006      	movs	r0, #6
 800c782:	f006 fccb 	bl	801311c <memp_malloc>
 800c786:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <netconn_recv+0x6c>
      return ERR_MEM;
 800c78e:	f04f 33ff 	mov.w	r3, #4294967295
 800c792:	e034      	b.n	800c7fe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c794:	f107 030c 	add.w	r3, r7, #12
 800c798:	2200      	movs	r2, #0
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff ff3f 	bl	800c620 <netconn_recv_data_tcp>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c7a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d006      	beq.n	800c7bc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c7ae:	6979      	ldr	r1, [r7, #20]
 800c7b0:	2006      	movs	r0, #6
 800c7b2:	f006 fd29 	bl	8013208 <memp_free>
      return err;
 800c7b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7ba:	e020      	b.n	800c7fe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <netconn_recv+0xa8>
 800c7c2:	4b11      	ldr	r3, [pc, #68]	; (800c808 <netconn_recv+0xe0>)
 800c7c4:	f240 3279 	movw	r2, #889	; 0x379
 800c7c8:	4913      	ldr	r1, [pc, #76]	; (800c818 <netconn_recv+0xf0>)
 800c7ca:	4811      	ldr	r0, [pc, #68]	; (800c810 <netconn_recv+0xe8>)
 800c7cc:	f00f fe12 	bl	801c3f4 <iprintf>

    buf->p = p;
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	e005      	b.n	800c7fe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff fe1a 	bl	800c430 <netconn_recv_data>
 800c7fc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3718      	adds	r7, #24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	0801f604 	.word	0x0801f604
 800c80c:	0801f83c 	.word	0x0801f83c
 800c810:	0801f67c 	.word	0x0801f67c
 800c814:	0801f85c 	.word	0x0801f85c
 800c818:	0801f8d4 	.word	0x0801f8d4

0800c81c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af02      	add	r7, sp, #8
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
 800c828:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	f107 0110 	add.w	r1, r7, #16
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	4613      	mov	r3, r2
 800c83e:	2201      	movs	r2, #1
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f805 	bl	800c850 <netconn_write_vectors_partly>
 800c846:	4603      	mov	r3, r0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b092      	sub	sp, #72	; 0x48
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	4611      	mov	r1, r2
 800c85c:	461a      	mov	r2, r3
 800c85e:	460b      	mov	r3, r1
 800c860:	80fb      	strh	r3, [r7, #6]
 800c862:	4613      	mov	r3, r2
 800c864:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d109      	bne.n	800c880 <netconn_write_vectors_partly+0x30>
 800c86c:	4b4e      	ldr	r3, [pc, #312]	; (800c9a8 <netconn_write_vectors_partly+0x158>)
 800c86e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c872:	494e      	ldr	r1, [pc, #312]	; (800c9ac <netconn_write_vectors_partly+0x15c>)
 800c874:	484e      	ldr	r0, [pc, #312]	; (800c9b0 <netconn_write_vectors_partly+0x160>)
 800c876:	f00f fdbd 	bl	801c3f4 <iprintf>
 800c87a:	f06f 030f 	mvn.w	r3, #15
 800c87e:	e08e      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c888:	2b10      	cmp	r3, #16
 800c88a:	d009      	beq.n	800c8a0 <netconn_write_vectors_partly+0x50>
 800c88c:	4b46      	ldr	r3, [pc, #280]	; (800c9a8 <netconn_write_vectors_partly+0x158>)
 800c88e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c892:	4948      	ldr	r1, [pc, #288]	; (800c9b4 <netconn_write_vectors_partly+0x164>)
 800c894:	4846      	ldr	r0, [pc, #280]	; (800c9b0 <netconn_write_vectors_partly+0x160>)
 800c896:	f00f fdad 	bl	801c3f4 <iprintf>
 800c89a:	f06f 0305 	mvn.w	r3, #5
 800c89e:	e07e      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	7f1b      	ldrb	r3, [r3, #28]
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d104      	bne.n	800c8b6 <netconn_write_vectors_partly+0x66>
 800c8ac:	797b      	ldrb	r3, [r7, #5]
 800c8ae:	f003 0304 	and.w	r3, r3, #4
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <netconn_write_vectors_partly+0x6a>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e000      	b.n	800c8bc <netconn_write_vectors_partly+0x6c>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c8c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <netconn_write_vectors_partly+0x84>
 800c8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c8ce:	f06f 0305 	mvn.w	r3, #5
 800c8d2:	e064      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c8d8:	2300      	movs	r3, #0
 800c8da:	643b      	str	r3, [r7, #64]	; 0x40
 800c8dc:	e015      	b.n	800c90a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8ea:	4413      	add	r3, r2
 800c8ec:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800c8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d202      	bcs.n	800c904 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c8fe:	f06f 0305 	mvn.w	r3, #5
 800c902:	e04c      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c906:	3301      	adds	r3, #1
 800c908:	643b      	str	r3, [r7, #64]	; 0x40
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c90e:	429a      	cmp	r2, r3
 800c910:	dbe5      	blt.n	800c8de <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	e040      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da0a      	bge.n	800c938 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c928:	f06f 0305 	mvn.w	r3, #5
 800c92c:	e037      	b.n	800c99e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c92e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c932:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c940:	88fb      	ldrh	r3, [r7, #6]
 800c942:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c948:	797b      	ldrb	r3, [r7, #5]
 800c94a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c950:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c956:	f107 0314 	add.w	r3, r7, #20
 800c95a:	4619      	mov	r1, r3
 800c95c:	4816      	ldr	r0, [pc, #88]	; (800c9b8 <netconn_write_vectors_partly+0x168>)
 800c95e:	f7ff fb9f 	bl	800c0a0 <netconn_apimsg>
 800c962:	4603      	mov	r3, r0
 800c964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800c968:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d114      	bne.n	800c99a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c97c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10a      	bne.n	800c99a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c988:	429a      	cmp	r2, r3
 800c98a:	d006      	beq.n	800c99a <netconn_write_vectors_partly+0x14a>
 800c98c:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <netconn_write_vectors_partly+0x158>)
 800c98e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c992:	490a      	ldr	r1, [pc, #40]	; (800c9bc <netconn_write_vectors_partly+0x16c>)
 800c994:	4806      	ldr	r0, [pc, #24]	; (800c9b0 <netconn_write_vectors_partly+0x160>)
 800c996:	f00f fd2d 	bl	801c3f4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c99a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3748      	adds	r7, #72	; 0x48
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	0801f604 	.word	0x0801f604
 800c9ac:	0801f8fc 	.word	0x0801f8fc
 800c9b0:	0801f67c 	.word	0x0801f67c
 800c9b4:	0801f918 	.word	0x0801f918
 800c9b8:	0800dfe5 	.word	0x0800dfe5
 800c9bc:	0801f93c 	.word	0x0801f93c

0800c9c0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08c      	sub	sp, #48	; 0x30
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <netconn_close_shutdown+0x26>
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <netconn_close_shutdown+0x50>)
 800c9d4:	f240 4247 	movw	r2, #1095	; 0x447
 800c9d8:	490e      	ldr	r1, [pc, #56]	; (800ca14 <netconn_close_shutdown+0x54>)
 800c9da:	480f      	ldr	r0, [pc, #60]	; (800ca18 <netconn_close_shutdown+0x58>)
 800c9dc:	f00f fd0a 	bl	801c3f4 <iprintf>
 800c9e0:	f06f 030f 	mvn.w	r3, #15
 800c9e4:	e010      	b.n	800ca08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c9ea:	78fb      	ldrb	r3, [r7, #3]
 800c9ec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c9ee:	2329      	movs	r3, #41	; 0x29
 800c9f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c9f2:	f107 030c 	add.w	r3, r7, #12
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4808      	ldr	r0, [pc, #32]	; (800ca1c <netconn_close_shutdown+0x5c>)
 800c9fa:	f7ff fb51 	bl	800c0a0 <netconn_apimsg>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ca04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3730      	adds	r7, #48	; 0x30
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	0801f604 	.word	0x0801f604
 800ca14:	0801f960 	.word	0x0801f960
 800ca18:	0801f67c 	.word	0x0801f67c
 800ca1c:	0800e0fd 	.word	0x0800e0fd

0800ca20 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ca28:	2103      	movs	r1, #3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff ffc8 	bl	800c9c0 <netconn_close_shutdown>
 800ca30:	4603      	mov	r3, r0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d101      	bne.n	800ca4c <netconn_err+0x12>
    return ERR_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e00d      	b.n	800ca68 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ca4c:	f007 ff94 	bl	8014978 <sys_arch_protect>
 800ca50:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7a1b      	ldrb	r3, [r3, #8]
 800ca56:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f007 ff98 	bl	8014994 <sys_arch_unprotect>
  return err;
 800ca64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ca7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca7e:	f113 0f0d 	cmn.w	r3, #13
 800ca82:	d009      	beq.n	800ca98 <lwip_netconn_err_to_msg+0x28>
 800ca84:	f113 0f0d 	cmn.w	r3, #13
 800ca88:	dc0c      	bgt.n	800caa4 <lwip_netconn_err_to_msg+0x34>
 800ca8a:	f113 0f0f 	cmn.w	r3, #15
 800ca8e:	d007      	beq.n	800caa0 <lwip_netconn_err_to_msg+0x30>
 800ca90:	f113 0f0e 	cmn.w	r3, #14
 800ca94:	d002      	beq.n	800ca9c <lwip_netconn_err_to_msg+0x2c>
 800ca96:	e005      	b.n	800caa4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ca98:	4b0a      	ldr	r3, [pc, #40]	; (800cac4 <lwip_netconn_err_to_msg+0x54>)
 800ca9a:	e00e      	b.n	800caba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <lwip_netconn_err_to_msg+0x58>)
 800ca9e:	e00c      	b.n	800caba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800caa0:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <lwip_netconn_err_to_msg+0x5c>)
 800caa2:	e00a      	b.n	800caba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800caa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <lwip_netconn_err_to_msg+0x48>
 800caac:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <lwip_netconn_err_to_msg+0x60>)
 800caae:	227d      	movs	r2, #125	; 0x7d
 800cab0:	4908      	ldr	r1, [pc, #32]	; (800cad4 <lwip_netconn_err_to_msg+0x64>)
 800cab2:	4809      	ldr	r0, [pc, #36]	; (800cad8 <lwip_netconn_err_to_msg+0x68>)
 800cab4:	f00f fc9e 	bl	801c3f4 <iprintf>
      return NULL;
 800cab8:	2300      	movs	r3, #0
  }
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	0802310c 	.word	0x0802310c
 800cac8:	0802310d 	.word	0x0802310d
 800cacc:	0802310e 	.word	0x0802310e
 800cad0:	0801f97c 	.word	0x0801f97c
 800cad4:	0801f9d0 	.word	0x0801f9d0
 800cad8:	0801f9e0 	.word	0x0801f9e0

0800cadc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d105      	bne.n	800caf8 <lwip_netconn_is_err_msg+0x1c>
 800caec:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <lwip_netconn_is_err_msg+0x5c>)
 800caee:	2285      	movs	r2, #133	; 0x85
 800caf0:	4912      	ldr	r1, [pc, #72]	; (800cb3c <lwip_netconn_is_err_msg+0x60>)
 800caf2:	4813      	ldr	r0, [pc, #76]	; (800cb40 <lwip_netconn_is_err_msg+0x64>)
 800caf4:	f00f fc7e 	bl	801c3f4 <iprintf>

  if (msg == &netconn_aborted) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a12      	ldr	r2, [pc, #72]	; (800cb44 <lwip_netconn_is_err_msg+0x68>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d104      	bne.n	800cb0a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	22f3      	movs	r2, #243	; 0xf3
 800cb04:	701a      	strb	r2, [r3, #0]
    return 1;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e012      	b.n	800cb30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a0e      	ldr	r2, [pc, #56]	; (800cb48 <lwip_netconn_is_err_msg+0x6c>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d104      	bne.n	800cb1c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	22f2      	movs	r2, #242	; 0xf2
 800cb16:	701a      	strb	r2, [r3, #0]
    return 1;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e009      	b.n	800cb30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a0b      	ldr	r2, [pc, #44]	; (800cb4c <lwip_netconn_is_err_msg+0x70>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d104      	bne.n	800cb2e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	22f1      	movs	r2, #241	; 0xf1
 800cb28:	701a      	strb	r2, [r3, #0]
    return 1;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e000      	b.n	800cb30 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	0801f97c 	.word	0x0801f97c
 800cb3c:	0801fa08 	.word	0x0801fa08
 800cb40:	0801f9e0 	.word	0x0801f9e0
 800cb44:	0802310c 	.word	0x0802310c
 800cb48:	0802310d 	.word	0x0802310d
 800cb4c:	0802310e 	.word	0x0802310e

0800cb50 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d105      	bne.n	800cb70 <recv_udp+0x20>
 800cb64:	4b34      	ldr	r3, [pc, #208]	; (800cc38 <recv_udp+0xe8>)
 800cb66:	22e5      	movs	r2, #229	; 0xe5
 800cb68:	4934      	ldr	r1, [pc, #208]	; (800cc3c <recv_udp+0xec>)
 800cb6a:	4835      	ldr	r0, [pc, #212]	; (800cc40 <recv_udp+0xf0>)
 800cb6c:	f00f fc42 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d105      	bne.n	800cb82 <recv_udp+0x32>
 800cb76:	4b30      	ldr	r3, [pc, #192]	; (800cc38 <recv_udp+0xe8>)
 800cb78:	22e6      	movs	r2, #230	; 0xe6
 800cb7a:	4932      	ldr	r1, [pc, #200]	; (800cc44 <recv_udp+0xf4>)
 800cb7c:	4830      	ldr	r0, [pc, #192]	; (800cc40 <recv_udp+0xf0>)
 800cb7e:	f00f fc39 	bl	801c3f4 <iprintf>
  conn = (struct netconn *)arg;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <recv_udp+0x44>
    pbuf_free(p);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f007 fa85 	bl	801409c <pbuf_free>
    return;
 800cb92:	e04d      	b.n	800cc30 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d005      	beq.n	800cbaa <recv_udp+0x5a>
 800cb9e:	4b26      	ldr	r3, [pc, #152]	; (800cc38 <recv_udp+0xe8>)
 800cba0:	22ee      	movs	r2, #238	; 0xee
 800cba2:	4929      	ldr	r1, [pc, #164]	; (800cc48 <recv_udp+0xf8>)
 800cba4:	4826      	ldr	r0, [pc, #152]	; (800cc40 <recv_udp+0xf0>)
 800cba6:	f00f fc25 	bl	801c3f4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	3310      	adds	r3, #16
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f007 fdc7 	bl	8014742 <sys_mbox_valid>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d103      	bne.n	800cbc2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f007 fa6e 	bl	801409c <pbuf_free>
    return;
 800cbc0:	e036      	b.n	800cc30 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cbc2:	2006      	movs	r0, #6
 800cbc4:	f006 faaa 	bl	801311c <memp_malloc>
 800cbc8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d103      	bne.n	800cbd8 <recv_udp+0x88>
    pbuf_free(p);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f007 fa63 	bl	801409c <pbuf_free>
    return;
 800cbd6:	e02b      	b.n	800cc30 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <recv_udp+0xa0>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	e000      	b.n	800cbf2 <recv_udp+0xa2>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	69ba      	ldr	r2, [r7, #24]
 800cbf4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cbfa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	891b      	ldrh	r3, [r3, #8]
 800cc00:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	3310      	adds	r3, #16
 800cc06:	69b9      	ldr	r1, [r7, #24]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f007 fd25 	bl	8014658 <sys_mbox_trypost>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d003      	beq.n	800cc1c <recv_udp+0xcc>
    netbuf_delete(buf);
 800cc14:	69b8      	ldr	r0, [r7, #24]
 800cc16:	f006 fb21 	bl	801325c <netbuf_delete>
    return;
 800cc1a:	e009      	b.n	800cc30 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d005      	beq.n	800cc30 <recv_udp+0xe0>
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	8afa      	ldrh	r2, [r7, #22]
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	69f8      	ldr	r0, [r7, #28]
 800cc2e:	4798      	blx	r3
  }
}
 800cc30:	3720      	adds	r7, #32
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801f97c 	.word	0x0801f97c
 800cc3c:	0801fa14 	.word	0x0801fa14
 800cc40:	0801f9e0 	.word	0x0801f9e0
 800cc44:	0801fa38 	.word	0x0801fa38
 800cc48:	0801fa58 	.word	0x0801fa58

0800cc4c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b088      	sub	sp, #32
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
 800cc58:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d106      	bne.n	800cc6e <recv_tcp+0x22>
 800cc60:	4b36      	ldr	r3, [pc, #216]	; (800cd3c <recv_tcp+0xf0>)
 800cc62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cc66:	4936      	ldr	r1, [pc, #216]	; (800cd40 <recv_tcp+0xf4>)
 800cc68:	4836      	ldr	r0, [pc, #216]	; (800cd44 <recv_tcp+0xf8>)
 800cc6a:	f00f fbc3 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <recv_tcp+0x36>
 800cc74:	4b31      	ldr	r3, [pc, #196]	; (800cd3c <recv_tcp+0xf0>)
 800cc76:	f240 122d 	movw	r2, #301	; 0x12d
 800cc7a:	4933      	ldr	r1, [pc, #204]	; (800cd48 <recv_tcp+0xfc>)
 800cc7c:	4831      	ldr	r0, [pc, #196]	; (800cd44 <recv_tcp+0xf8>)
 800cc7e:	f00f fbb9 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cc82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <recv_tcp+0x4c>
 800cc8a:	4b2c      	ldr	r3, [pc, #176]	; (800cd3c <recv_tcp+0xf0>)
 800cc8c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cc90:	492e      	ldr	r1, [pc, #184]	; (800cd4c <recv_tcp+0x100>)
 800cc92:	482c      	ldr	r0, [pc, #176]	; (800cd44 <recv_tcp+0xf8>)
 800cc94:	f00f fbae 	bl	801c3f4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <recv_tcp+0x5c>
    return ERR_VAL;
 800cca2:	f06f 0305 	mvn.w	r3, #5
 800cca6:	e045      	b.n	800cd34 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d006      	beq.n	800ccc0 <recv_tcp+0x74>
 800ccb2:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <recv_tcp+0xf0>)
 800ccb4:	f240 1235 	movw	r2, #309	; 0x135
 800ccb8:	4925      	ldr	r1, [pc, #148]	; (800cd50 <recv_tcp+0x104>)
 800ccba:	4822      	ldr	r0, [pc, #136]	; (800cd44 <recv_tcp+0xf8>)
 800ccbc:	f00f fb9a 	bl	801c3f4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	3310      	adds	r3, #16
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f007 fd3c 	bl	8014742 <sys_mbox_valid>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10d      	bne.n	800ccec <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d008      	beq.n	800cce8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	891b      	ldrh	r3, [r3, #8]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	68b8      	ldr	r0, [r7, #8]
 800ccde:	f008 fb87 	bl	80153f0 <tcp_recved>
      pbuf_free(p);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f007 f9da 	bl	801409c <pbuf_free>
    }
    return ERR_OK;
 800cce8:	2300      	movs	r3, #0
 800ccea:	e023      	b.n	800cd34 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <recv_tcp+0xb2>
    msg = p;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	891b      	ldrh	r3, [r3, #8]
 800ccfa:	83fb      	strh	r3, [r7, #30]
 800ccfc:	e003      	b.n	800cd06 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ccfe:	4b15      	ldr	r3, [pc, #84]	; (800cd54 <recv_tcp+0x108>)
 800cd00:	61bb      	str	r3, [r7, #24]
    len = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	3310      	adds	r3, #16
 800cd0a:	69b9      	ldr	r1, [r7, #24]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f007 fca3 	bl	8014658 <sys_mbox_trypost>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	e00a      	b.n	800cd34 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <recv_tcp+0xe6>
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2a:	8bfa      	ldrh	r2, [r7, #30]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	6978      	ldr	r0, [r7, #20]
 800cd30:	4798      	blx	r3
  }

  return ERR_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	0801f97c 	.word	0x0801f97c
 800cd40:	0801fa78 	.word	0x0801fa78
 800cd44:	0801f9e0 	.word	0x0801f9e0
 800cd48:	0801fa9c 	.word	0x0801fa9c
 800cd4c:	0801fabc 	.word	0x0801fabc
 800cd50:	0801fad4 	.word	0x0801fad4
 800cd54:	0802310e 	.word	0x0802310e

0800cd58 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <poll_tcp+0x22>
 800cd6c:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <poll_tcp+0xbc>)
 800cd6e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800cd72:	4929      	ldr	r1, [pc, #164]	; (800ce18 <poll_tcp+0xc0>)
 800cd74:	4829      	ldr	r0, [pc, #164]	; (800ce1c <poll_tcp+0xc4>)
 800cd76:	f00f fb3d 	bl	801c3f4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d104      	bne.n	800cd8c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cd82:	2101      	movs	r1, #1
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 ff61 	bl	800dc4c <lwip_netconn_do_writemore>
 800cd8a:	e016      	b.n	800cdba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	785b      	ldrb	r3, [r3, #1]
 800cd90:	2b04      	cmp	r3, #4
 800cd92:	d112      	bne.n	800cdba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00a      	beq.n	800cdb2 <poll_tcp+0x5a>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	7a5b      	ldrb	r3, [r3, #9]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d005      	beq.n	800cdb2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	7a5a      	ldrb	r2, [r3, #9]
 800cdac:	3a01      	subs	r2, #1
 800cdae:	b2d2      	uxtb	r2, r2
 800cdb0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fbf7 	bl	800d5a8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	7f1b      	ldrb	r3, [r3, #28]
 800cdbe:	f003 0310 	and.w	r3, r3, #16
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d021      	beq.n	800ce0a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d01d      	beq.n	800ce0a <poll_tcp+0xb2>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cdd6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cdda:	d316      	bcc.n	800ce0a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d810      	bhi.n	800ce0a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	7f1b      	ldrb	r3, [r3, #28]
 800cdec:	f023 0310 	bic.w	r3, r3, #16
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d005      	beq.n	800ce0a <poll_tcp+0xb2>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	2200      	movs	r2, #0
 800ce04:	2102      	movs	r1, #2
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	0801f97c 	.word	0x0801f97c
 800ce18:	0801faf4 	.word	0x0801faf4
 800ce1c:	0801f9e0 	.word	0x0801f9e0

0800ce20 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <sent_tcp+0x26>
 800ce38:	4b20      	ldr	r3, [pc, #128]	; (800cebc <sent_tcp+0x9c>)
 800ce3a:	f240 1293 	movw	r2, #403	; 0x193
 800ce3e:	4920      	ldr	r1, [pc, #128]	; (800cec0 <sent_tcp+0xa0>)
 800ce40:	4820      	ldr	r0, [pc, #128]	; (800cec4 <sent_tcp+0xa4>)
 800ce42:	f00f fad7 	bl	801c3f4 <iprintf>

  if (conn) {
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d032      	beq.n	800ceb2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d104      	bne.n	800ce5e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ce54:	2101      	movs	r1, #1
 800ce56:	6978      	ldr	r0, [r7, #20]
 800ce58:	f000 fef8 	bl	800dc4c <lwip_netconn_do_writemore>
 800ce5c:	e007      	b.n	800ce6e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	785b      	ldrb	r3, [r3, #1]
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	d103      	bne.n	800ce6e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ce66:	2101      	movs	r1, #1
 800ce68:	6978      	ldr	r0, [r7, #20]
 800ce6a:	f000 fb9d 	bl	800d5a8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01d      	beq.n	800ceb2 <sent_tcp+0x92>
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ce7e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ce82:	d316      	bcc.n	800ceb2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d810      	bhi.n	800ceb2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	7f1b      	ldrb	r3, [r3, #28]
 800ce94:	f023 0310 	bic.w	r3, r3, #16
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d005      	beq.n	800ceb2 <sent_tcp+0x92>
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceaa:	88fa      	ldrh	r2, [r7, #6]
 800ceac:	2102      	movs	r1, #2
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	0801f97c 	.word	0x0801f97c
 800cec0:	0801faf4 	.word	0x0801faf4
 800cec4:	0801f9e0 	.word	0x0801f9e0

0800cec8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <err_tcp+0x24>
 800cede:	4b5f      	ldr	r3, [pc, #380]	; (800d05c <err_tcp+0x194>)
 800cee0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cee4:	495e      	ldr	r1, [pc, #376]	; (800d060 <err_tcp+0x198>)
 800cee6:	485f      	ldr	r0, [pc, #380]	; (800d064 <err_tcp+0x19c>)
 800cee8:	f00f fa84 	bl	801c3f4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ceec:	f007 fd44 	bl	8014978 <sys_arch_protect>
 800cef0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	2200      	movs	r2, #0
 800cef6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	78fa      	ldrb	r2, [r7, #3]
 800cefc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	7f1b      	ldrb	r3, [r3, #28]
 800cf02:	f043 0301 	orr.w	r3, r3, #1
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	785b      	ldrb	r3, [r3, #1]
 800cf10:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	2200      	movs	r2, #0
 800cf16:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800cf18:	69b8      	ldr	r0, [r7, #24]
 800cf1a:	f007 fd3b 	bl	8014994 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d005      	beq.n	800cf32 <err_tcp+0x6a>
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	2104      	movs	r1, #4
 800cf2e:	69f8      	ldr	r0, [r7, #28]
 800cf30:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d005      	beq.n	800cf46 <err_tcp+0x7e>
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2100      	movs	r1, #0
 800cf42:	69f8      	ldr	r0, [r7, #28]
 800cf44:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <err_tcp+0x92>
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf52:	2200      	movs	r2, #0
 800cf54:	2102      	movs	r1, #2
 800cf56:	69f8      	ldr	r0, [r7, #28]
 800cf58:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800cf5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fd86 	bl	800ca70 <lwip_netconn_err_to_msg>
 800cf64:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	3310      	adds	r3, #16
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f007 fbe9 	bl	8014742 <sys_mbox_valid>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d005      	beq.n	800cf82 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	3310      	adds	r3, #16
 800cf7a:	6939      	ldr	r1, [r7, #16]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f007 fb6b 	bl	8014658 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	3314      	adds	r3, #20
 800cf86:	4618      	mov	r0, r3
 800cf88:	f007 fbdb 	bl	8014742 <sys_mbox_valid>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d005      	beq.n	800cf9e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	3314      	adds	r3, #20
 800cf96:	6939      	ldr	r1, [r7, #16]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f007 fb5d 	bl	8014658 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d005      	beq.n	800cfb0 <err_tcp+0xe8>
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	2b04      	cmp	r3, #4
 800cfa8:	d002      	beq.n	800cfb0 <err_tcp+0xe8>
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d143      	bne.n	800d038 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	7f1b      	ldrb	r3, [r3, #28]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bf14      	ite	ne
 800cfbc:	2301      	movne	r3, #1
 800cfbe:	2300      	moveq	r3, #0
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	7f1b      	ldrb	r3, [r3, #28]
 800cfc8:	f023 0304 	bic.w	r3, r3, #4
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d13b      	bne.n	800d050 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	6a1b      	ldr	r3, [r3, #32]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d106      	bne.n	800cfee <err_tcp+0x126>
 800cfe0:	4b1e      	ldr	r3, [pc, #120]	; (800d05c <err_tcp+0x194>)
 800cfe2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cfe6:	4920      	ldr	r1, [pc, #128]	; (800d068 <err_tcp+0x1a0>)
 800cfe8:	481e      	ldr	r0, [pc, #120]	; (800d064 <err_tcp+0x19c>)
 800cfea:	f00f fa03 	bl	801c3f4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800cfee:	7dfb      	ldrb	r3, [r7, #23]
 800cff0:	2b04      	cmp	r3, #4
 800cff2:	d104      	bne.n	800cffe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	2200      	movs	r2, #0
 800cffa:	711a      	strb	r2, [r3, #4]
 800cffc:	e003      	b.n	800d006 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	78fa      	ldrb	r2, [r7, #3]
 800d004:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	330c      	adds	r3, #12
 800d00e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d010:	68b8      	ldr	r0, [r7, #8]
 800d012:	f007 fc27 	bl	8014864 <sys_sem_valid>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d106      	bne.n	800d02a <err_tcp+0x162>
 800d01c:	4b0f      	ldr	r3, [pc, #60]	; (800d05c <err_tcp+0x194>)
 800d01e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d022:	4912      	ldr	r1, [pc, #72]	; (800d06c <err_tcp+0x1a4>)
 800d024:	480f      	ldr	r0, [pc, #60]	; (800d064 <err_tcp+0x19c>)
 800d026:	f00f f9e5 	bl	801c3f4 <iprintf>
      conn->current_msg = NULL;
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	2200      	movs	r2, #0
 800d02e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d030:	68b8      	ldr	r0, [r7, #8]
 800d032:	f007 fbfd 	bl	8014830 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d036:	e00b      	b.n	800d050 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	6a1b      	ldr	r3, [r3, #32]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d008      	beq.n	800d052 <err_tcp+0x18a>
 800d040:	4b06      	ldr	r3, [pc, #24]	; (800d05c <err_tcp+0x194>)
 800d042:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d046:	490a      	ldr	r1, [pc, #40]	; (800d070 <err_tcp+0x1a8>)
 800d048:	4806      	ldr	r0, [pc, #24]	; (800d064 <err_tcp+0x19c>)
 800d04a:	f00f f9d3 	bl	801c3f4 <iprintf>
  }
}
 800d04e:	e000      	b.n	800d052 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d050:	bf00      	nop
}
 800d052:	bf00      	nop
 800d054:	3720      	adds	r7, #32
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	0801f97c 	.word	0x0801f97c
 800d060:	0801faf4 	.word	0x0801faf4
 800d064:	0801f9e0 	.word	0x0801f9e0
 800d068:	0801fb04 	.word	0x0801fb04
 800d06c:	0801fb20 	.word	0x0801fb20
 800d070:	0801fb3c 	.word	0x0801fb3c

0800d074 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d082:	6879      	ldr	r1, [r7, #4]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f009 f879 	bl	801617c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d08a:	490a      	ldr	r1, [pc, #40]	; (800d0b4 <setup_tcp+0x40>)
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f009 f887 	bl	80161a0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d092:	4909      	ldr	r1, [pc, #36]	; (800d0b8 <setup_tcp+0x44>)
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f009 f8a5 	bl	80161e4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d09a:	2202      	movs	r2, #2
 800d09c:	4907      	ldr	r1, [pc, #28]	; (800d0bc <setup_tcp+0x48>)
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f009 f8fc 	bl	801629c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d0a4:	4906      	ldr	r1, [pc, #24]	; (800d0c0 <setup_tcp+0x4c>)
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f009 f8be 	bl	8016228 <tcp_err>
}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0800cc4d 	.word	0x0800cc4d
 800d0b8:	0800ce21 	.word	0x0800ce21
 800d0bc:	0800cd59 	.word	0x0800cd59
 800d0c0:	0800cec9 	.word	0x0800cec9

0800d0c4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d0c4:	b590      	push	{r4, r7, lr}
 800d0c6:	b089      	sub	sp, #36	; 0x24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d102      	bne.n	800d0e2 <accept_function+0x1e>
    return ERR_VAL;
 800d0dc:	f06f 0305 	mvn.w	r3, #5
 800d0e0:	e0a1      	b.n	800d226 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	3314      	adds	r3, #20
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f007 fb2b 	bl	8014742 <sys_mbox_valid>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d0f2:	f06f 0305 	mvn.w	r3, #5
 800d0f6:	e096      	b.n	800d226 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d11b      	bne.n	800d136 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	f103 0414 	add.w	r4, r3, #20
 800d104:	f06f 000c 	mvn.w	r0, #12
 800d108:	f7ff fcb2 	bl	800ca70 <lwip_netconn_err_to_msg>
 800d10c:	4603      	mov	r3, r0
 800d10e:	4619      	mov	r1, r3
 800d110:	4620      	mov	r0, r4
 800d112:	f007 faa1 	bl	8014658 <sys_mbox_trypost>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d109      	bne.n	800d130 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d005      	beq.n	800d130 <accept_function+0x6c>
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	2200      	movs	r2, #0
 800d12a:	2100      	movs	r1, #0
 800d12c:	69f8      	ldr	r0, [r7, #28]
 800d12e:	4798      	blx	r3
    }
    return ERR_VAL;
 800d130:	f06f 0305 	mvn.w	r3, #5
 800d134:	e077      	b.n	800d226 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800d136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d006      	beq.n	800d14c <accept_function+0x88>
 800d13e:	4b3c      	ldr	r3, [pc, #240]	; (800d230 <accept_function+0x16c>)
 800d140:	f240 222a 	movw	r2, #554	; 0x22a
 800d144:	493b      	ldr	r1, [pc, #236]	; (800d234 <accept_function+0x170>)
 800d146:	483c      	ldr	r0, [pc, #240]	; (800d238 <accept_function+0x174>)
 800d148:	f00f f954 	bl	801c3f4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	781a      	ldrb	r2, [r3, #0]
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f000 f8f0 	bl	800d33c <netconn_alloc>
 800d15c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d11b      	bne.n	800d19c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	f103 0414 	add.w	r4, r3, #20
 800d16a:	f06f 000c 	mvn.w	r0, #12
 800d16e:	f7ff fc7f 	bl	800ca70 <lwip_netconn_err_to_msg>
 800d172:	4603      	mov	r3, r0
 800d174:	4619      	mov	r1, r3
 800d176:	4620      	mov	r0, r4
 800d178:	f007 fa6e 	bl	8014658 <sys_mbox_trypost>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	d005      	beq.n	800d196 <accept_function+0xd2>
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	4798      	blx	r3
    }
    return ERR_MEM;
 800d196:	f04f 33ff 	mov.w	r3, #4294967295
 800d19a:	e044      	b.n	800d226 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d1a2:	69b8      	ldr	r0, [r7, #24]
 800d1a4:	f7ff ff66 	bl	800d074 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	69b9      	ldr	r1, [r7, #24]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f007 fa52 	bl	8014658 <sys_mbox_trypost>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d02a      	beq.n	800d210 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	6978      	ldr	r0, [r7, #20]
 800d1c4:	f008 ffda 	bl	801617c <tcp_arg>
    tcp_recv(pcb, NULL);
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	6978      	ldr	r0, [r7, #20]
 800d1cc:	f008 ffe8 	bl	80161a0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	6978      	ldr	r0, [r7, #20]
 800d1d4:	f009 f806 	bl	80161e4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	6978      	ldr	r0, [r7, #20]
 800d1de:	f009 f85d 	bl	801629c <tcp_poll>
    tcp_err(pcb, NULL);
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	6978      	ldr	r0, [r7, #20]
 800d1e6:	f009 f81f 	bl	8016228 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	3310      	adds	r3, #16
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f007 fa1d 	bl	8014634 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	3310      	adds	r3, #16
 800d1fe:	4618      	mov	r0, r3
 800d200:	f007 fab0 	bl	8014764 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800d204:	69b8      	ldr	r0, [r7, #24]
 800d206:	f000 f907 	bl	800d418 <netconn_free>
    return ERR_MEM;
 800d20a:	f04f 33ff 	mov.w	r3, #4294967295
 800d20e:	e00a      	b.n	800d226 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d005      	beq.n	800d224 <accept_function+0x160>
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	69f8      	ldr	r0, [r7, #28]
 800d222:	4798      	blx	r3
  }

  return ERR_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3724      	adds	r7, #36	; 0x24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd90      	pop	{r4, r7, pc}
 800d22e:	bf00      	nop
 800d230:	0801f97c 	.word	0x0801f97c
 800d234:	0801fb58 	.word	0x0801fb58
 800d238:	0801f9e0 	.word	0x0801f9e0

0800d23c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <pcb_new+0x24>
 800d252:	4b2b      	ldr	r3, [pc, #172]	; (800d300 <pcb_new+0xc4>)
 800d254:	f240 2265 	movw	r2, #613	; 0x265
 800d258:	492a      	ldr	r1, [pc, #168]	; (800d304 <pcb_new+0xc8>)
 800d25a:	482b      	ldr	r0, [pc, #172]	; (800d308 <pcb_new+0xcc>)
 800d25c:	f00f f8ca 	bl	801c3f4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d26a:	2b10      	cmp	r3, #16
 800d26c:	d022      	beq.n	800d2b4 <pcb_new+0x78>
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d133      	bne.n	800d2da <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681c      	ldr	r4, [r3, #0]
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4618      	mov	r0, r3
 800d27a:	f00e fbda 	bl	801ba32 <udp_new_ip_type>
 800d27e:	4603      	mov	r3, r0
 800d280:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d02a      	beq.n	800d2e2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b22      	cmp	r3, #34	; 0x22
 800d294:	d104      	bne.n	800d2a0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6858      	ldr	r0, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	4917      	ldr	r1, [pc, #92]	; (800d30c <pcb_new+0xd0>)
 800d2ae:	f00e fb47 	bl	801b940 <udp_recv>
      }
      break;
 800d2b2:	e016      	b.n	800d2e2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681c      	ldr	r4, [r3, #0]
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f008 ff50 	bl	8016160 <tcp_new_ip_type>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fece 	bl	800d074 <setup_tcp>
      }
      break;
 800d2d8:	e005      	b.n	800d2e6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	22fa      	movs	r2, #250	; 0xfa
 800d2de:	711a      	strb	r2, [r3, #4]
      return;
 800d2e0:	e00a      	b.n	800d2f8 <pcb_new+0xbc>
      break;
 800d2e2:	bf00      	nop
 800d2e4:	e000      	b.n	800d2e8 <pcb_new+0xac>
      break;
 800d2e6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d102      	bne.n	800d2f8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	22ff      	movs	r2, #255	; 0xff
 800d2f6:	711a      	strb	r2, [r3, #4]
  }
}
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd90      	pop	{r4, r7, pc}
 800d2fe:	bf00      	nop
 800d300:	0801f97c 	.word	0x0801f97c
 800d304:	0801fb80 	.word	0x0801fb80
 800d308:	0801f9e0 	.word	0x0801f9e0
 800d30c:	0800cb51 	.word	0x0800cb51

0800d310 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7ff ff85 	bl	800d23c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d332:	bf00      	nop
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d34c:	2007      	movs	r0, #7
 800d34e:	f005 fee5 	bl	801311c <memp_malloc>
 800d352:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <netconn_alloc+0x22>
    return NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e052      	b.n	800d404 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	79fa      	ldrb	r2, [r7, #7]
 800d368:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d376:	2b10      	cmp	r3, #16
 800d378:	d004      	beq.n	800d384 <netconn_alloc+0x48>
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d105      	bne.n	800d38a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d37e:	2306      	movs	r3, #6
 800d380:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d382:	e00a      	b.n	800d39a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d384:	2306      	movs	r3, #6
 800d386:	617b      	str	r3, [r7, #20]
      break;
 800d388:	e007      	b.n	800d39a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d38a:	4b20      	ldr	r3, [pc, #128]	; (800d40c <netconn_alloc+0xd0>)
 800d38c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d390:	491f      	ldr	r1, [pc, #124]	; (800d410 <netconn_alloc+0xd4>)
 800d392:	4820      	ldr	r0, [pc, #128]	; (800d414 <netconn_alloc+0xd8>)
 800d394:	f00f f82e 	bl	801c3f4 <iprintf>
      goto free_and_return;
 800d398:	e02f      	b.n	800d3fa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3310      	adds	r3, #16
 800d39e:	6979      	ldr	r1, [r7, #20]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f007 f925 	bl	80145f0 <sys_mbox_new>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d125      	bne.n	800d3f8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	330c      	adds	r3, #12
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f007 f9e3 	bl	801477e <sys_sem_new>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3310      	adds	r3, #16
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f007 f936 	bl	8014634 <sys_mbox_free>
    goto free_and_return;
 800d3c8:	e017      	b.n	800d3fa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3314      	adds	r3, #20
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f007 f9c8 	bl	8014764 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	7cfa      	ldrb	r2, [r7, #19]
 800d3f2:	771a      	strb	r2, [r3, #28]
  return conn;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	e005      	b.n	800d404 <netconn_alloc+0xc8>
    goto free_and_return;
 800d3f8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	2007      	movs	r0, #7
 800d3fe:	f005 ff03 	bl	8013208 <memp_free>
  return NULL;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	0801f97c 	.word	0x0801f97c
 800d410:	0801fba0 	.word	0x0801fba0
 800d414:	0801f9e0 	.word	0x0801f9e0

0800d418 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <netconn_free+0x1e>
 800d428:	4b1b      	ldr	r3, [pc, #108]	; (800d498 <netconn_free+0x80>)
 800d42a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d42e:	491b      	ldr	r1, [pc, #108]	; (800d49c <netconn_free+0x84>)
 800d430:	481b      	ldr	r0, [pc, #108]	; (800d4a0 <netconn_free+0x88>)
 800d432:	f00e ffdf 	bl	801c3f4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3310      	adds	r3, #16
 800d43a:	4618      	mov	r0, r3
 800d43c:	f007 f981 	bl	8014742 <sys_mbox_valid>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d006      	beq.n	800d454 <netconn_free+0x3c>
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <netconn_free+0x80>)
 800d448:	f240 3223 	movw	r2, #803	; 0x323
 800d44c:	4915      	ldr	r1, [pc, #84]	; (800d4a4 <netconn_free+0x8c>)
 800d44e:	4814      	ldr	r0, [pc, #80]	; (800d4a0 <netconn_free+0x88>)
 800d450:	f00e ffd0 	bl	801c3f4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3314      	adds	r3, #20
 800d458:	4618      	mov	r0, r3
 800d45a:	f007 f972 	bl	8014742 <sys_mbox_valid>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <netconn_free+0x5a>
 800d464:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <netconn_free+0x80>)
 800d466:	f240 3226 	movw	r2, #806	; 0x326
 800d46a:	490f      	ldr	r1, [pc, #60]	; (800d4a8 <netconn_free+0x90>)
 800d46c:	480c      	ldr	r0, [pc, #48]	; (800d4a0 <netconn_free+0x88>)
 800d46e:	f00e ffc1 	bl	801c3f4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	330c      	adds	r3, #12
 800d476:	4618      	mov	r0, r3
 800d478:	f007 f9e7 	bl	801484a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	330c      	adds	r3, #12
 800d480:	4618      	mov	r0, r3
 800d482:	f007 fa00 	bl	8014886 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	2007      	movs	r0, #7
 800d48a:	f005 febd 	bl	8013208 <memp_free>
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	0801f97c 	.word	0x0801f97c
 800d49c:	0801fbc8 	.word	0x0801fbc8
 800d4a0:	0801f9e0 	.word	0x0801f9e0
 800d4a4:	0801fbf8 	.word	0x0801fbf8
 800d4a8:	0801fc34 	.word	0x0801fc34

0800d4ac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3310      	adds	r3, #16
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f007 f942 	bl	8014742 <sys_mbox_valid>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d02f      	beq.n	800d524 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d4c4:	e018      	b.n	800d4f8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4ce:	2b10      	cmp	r3, #16
 800d4d0:	d10e      	bne.n	800d4f0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	f107 020f 	add.w	r2, r7, #15
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff fafe 	bl	800cadc <lwip_netconn_is_err_msg>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f006 fdd7 	bl	801409c <pbuf_free>
 800d4ee:	e003      	b.n	800d4f8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f005 feb2 	bl	801325c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3310      	adds	r3, #16
 800d4fc:	f107 0210 	add.w	r2, r7, #16
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f007 f901 	bl	801470a <sys_arch_mbox_tryfetch>
 800d508:	4603      	mov	r3, r0
 800d50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50e:	d1da      	bne.n	800d4c6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	3310      	adds	r3, #16
 800d514:	4618      	mov	r0, r3
 800d516:	f007 f88d 	bl	8014634 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3310      	adds	r3, #16
 800d51e:	4618      	mov	r0, r3
 800d520:	f007 f920 	bl	8014764 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3314      	adds	r3, #20
 800d528:	4618      	mov	r0, r3
 800d52a:	f007 f90a 	bl	8014742 <sys_mbox_valid>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d034      	beq.n	800d59e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d534:	e01d      	b.n	800d572 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f107 020e 	add.w	r2, r7, #14
 800d53c:	4611      	mov	r1, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff facc 	bl	800cadc <lwip_netconn_is_err_msg>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d113      	bne.n	800d572 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d54e:	6978      	ldr	r0, [r7, #20]
 800d550:	f7ff ffac 	bl	800d4ac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d007      	beq.n	800d56c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f007 fd7d 	bl	8015060 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2200      	movs	r2, #0
 800d56a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d56c:	6978      	ldr	r0, [r7, #20]
 800d56e:	f7ff ff53 	bl	800d418 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3314      	adds	r3, #20
 800d576:	f107 0210 	add.w	r2, r7, #16
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f007 f8c4 	bl	801470a <sys_arch_mbox_tryfetch>
 800d582:	4603      	mov	r3, r0
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d1d5      	bne.n	800d536 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	3314      	adds	r3, #20
 800d58e:	4618      	mov	r0, r3
 800d590:	f007 f850 	bl	8014634 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3314      	adds	r3, #20
 800d598:	4618      	mov	r0, r3
 800d59a:	f007 f8e3 	bl	8014764 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d59e:	bf00      	nop
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <lwip_netconn_do_close_internal+0x24>
 800d5be:	4ba1      	ldr	r3, [pc, #644]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d5c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d5c4:	49a0      	ldr	r1, [pc, #640]	; (800d848 <lwip_netconn_do_close_internal+0x2a0>)
 800d5c6:	48a1      	ldr	r0, [pc, #644]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d5c8:	f00e ff14 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5d4:	2b10      	cmp	r3, #16
 800d5d6:	d006      	beq.n	800d5e6 <lwip_netconn_do_close_internal+0x3e>
 800d5d8:	4b9a      	ldr	r3, [pc, #616]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d5da:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d5de:	499c      	ldr	r1, [pc, #624]	; (800d850 <lwip_netconn_do_close_internal+0x2a8>)
 800d5e0:	489a      	ldr	r0, [pc, #616]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d5e2:	f00e ff07 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	785b      	ldrb	r3, [r3, #1]
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d006      	beq.n	800d5fc <lwip_netconn_do_close_internal+0x54>
 800d5ee:	4b95      	ldr	r3, [pc, #596]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d5f0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d5f4:	4997      	ldr	r1, [pc, #604]	; (800d854 <lwip_netconn_do_close_internal+0x2ac>)
 800d5f6:	4895      	ldr	r0, [pc, #596]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d5f8:	f00e fefc 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d106      	bne.n	800d612 <lwip_netconn_do_close_internal+0x6a>
 800d604:	4b8f      	ldr	r3, [pc, #572]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d606:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d60a:	4993      	ldr	r1, [pc, #588]	; (800d858 <lwip_netconn_do_close_internal+0x2b0>)
 800d60c:	488f      	ldr	r0, [pc, #572]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d60e:	f00e fef1 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <lwip_netconn_do_close_internal+0x80>
 800d61a:	4b8a      	ldr	r3, [pc, #552]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d61c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d620:	498e      	ldr	r1, [pc, #568]	; (800d85c <lwip_netconn_do_close_internal+0x2b4>)
 800d622:	488a      	ldr	r0, [pc, #552]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d624:	f00e fee6 	bl	801c3f4 <iprintf>

  tpcb = conn->pcb.tcp;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	7a1b      	ldrb	r3, [r3, #8]
 800d634:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d63e:	7bfb      	ldrb	r3, [r7, #15]
 800d640:	f003 0302 	and.w	r3, r3, #2
 800d644:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	2b03      	cmp	r3, #3
 800d64a:	d102      	bne.n	800d652 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d64c:	2301      	movs	r3, #1
 800d64e:	75bb      	strb	r3, [r7, #22]
 800d650:	e01f      	b.n	800d692 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00e      	beq.n	800d676 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d65c:	2b05      	cmp	r3, #5
 800d65e:	d007      	beq.n	800d670 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d664:	2b06      	cmp	r3, #6
 800d666:	d003      	beq.n	800d670 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d66c:	2b08      	cmp	r3, #8
 800d66e:	d102      	bne.n	800d676 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d670:	2301      	movs	r3, #1
 800d672:	75bb      	strb	r3, [r7, #22]
 800d674:	e00d      	b.n	800d692 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d676:	7b7b      	ldrb	r3, [r7, #13]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d008      	beq.n	800d68e <lwip_netconn_do_close_internal+0xe6>
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	8b5b      	ldrh	r3, [r3, #26]
 800d680:	f003 0310 	and.w	r3, r3, #16
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d688:	2301      	movs	r3, #1
 800d68a:	75bb      	strb	r3, [r7, #22]
 800d68c:	e001      	b.n	800d692 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d692:	7dbb      	ldrb	r3, [r7, #22]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d698:	2100      	movs	r1, #0
 800d69a:	6938      	ldr	r0, [r7, #16]
 800d69c:	f008 fd6e 	bl	801617c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d104      	bne.n	800d6b2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6938      	ldr	r0, [r7, #16]
 800d6ac:	f008 fdde 	bl	801626c <tcp_accept>
 800d6b0:	e01d      	b.n	800d6ee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d6b2:	7bbb      	ldrb	r3, [r7, #14]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d007      	beq.n	800d6c8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6938      	ldr	r0, [r7, #16]
 800d6bc:	f008 fd70 	bl	80161a0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	6938      	ldr	r0, [r7, #16]
 800d6c4:	f008 fdd2 	bl	801626c <tcp_accept>
    }
    if (shut_tx) {
 800d6c8:	7b7b      	ldrb	r3, [r7, #13]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d003      	beq.n	800d6d6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	6938      	ldr	r0, [r7, #16]
 800d6d2:	f008 fd87 	bl	80161e4 <tcp_sent>
    }
    if (shut_close) {
 800d6d6:	7dbb      	ldrb	r3, [r7, #22]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d008      	beq.n	800d6ee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d6dc:	2200      	movs	r2, #0
 800d6de:	2100      	movs	r1, #0
 800d6e0:	6938      	ldr	r0, [r7, #16]
 800d6e2:	f008 fddb 	bl	801629c <tcp_poll>
      tcp_err(tpcb, NULL);
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	6938      	ldr	r0, [r7, #16]
 800d6ea:	f008 fd9d 	bl	8016228 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d6ee:	7dbb      	ldrb	r3, [r7, #22]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d6f4:	6938      	ldr	r0, [r7, #16]
 800d6f6:	f007 fb6d 	bl	8014dd4 <tcp_close>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	75fb      	strb	r3, [r7, #23]
 800d6fe:	e007      	b.n	800d710 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	7b7a      	ldrb	r2, [r7, #13]
 800d704:	4619      	mov	r1, r3
 800d706:	6938      	ldr	r0, [r7, #16]
 800d708:	f007 fb90 	bl	8014e2c <tcp_shutdown>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d718:	2301      	movs	r3, #1
 800d71a:	757b      	strb	r3, [r7, #21]
 800d71c:	e016      	b.n	800d74c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d10f      	bne.n	800d748 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a1b      	ldr	r3, [r3, #32]
 800d72c:	7a5b      	ldrb	r3, [r3, #9]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10c      	bne.n	800d74c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d732:	2301      	movs	r3, #1
 800d734:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d736:	7dbb      	ldrb	r3, [r7, #22]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d007      	beq.n	800d74c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d73c:	6938      	ldr	r0, [r7, #16]
 800d73e:	f007 fc8f 	bl	8015060 <tcp_abort>
          err = ERR_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	75fb      	strb	r3, [r7, #23]
 800d746:	e001      	b.n	800d74c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d748:	2301      	movs	r3, #1
 800d74a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d74c:	7d7b      	ldrb	r3, [r7, #21]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d044      	beq.n	800d7dc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	330c      	adds	r3, #12
 800d75a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a1b      	ldr	r3, [r3, #32]
 800d760:	7dfa      	ldrb	r2, [r7, #23]
 800d762:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d129      	bne.n	800d7cc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d778:	7dbb      	ldrb	r3, [r7, #22]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00c      	beq.n	800d798 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <lwip_netconn_do_close_internal+0x1f0>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	2200      	movs	r2, #0
 800d792:	2104      	movs	r1, #4
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	4798      	blx	r3
      }
      if (shut_rx) {
 800d798:	7bbb      	ldrb	r3, [r7, #14]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d009      	beq.n	800d7b2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <lwip_netconn_do_close_internal+0x20a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	4798      	blx	r3
      }
      if (shut_tx) {
 800d7b2:	7b7b      	ldrb	r3, [r7, #13]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d009      	beq.n	800d7cc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d005      	beq.n	800d7cc <lwip_netconn_do_close_internal+0x224>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2102      	movs	r1, #2
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d7d2:	68b8      	ldr	r0, [r7, #8]
 800d7d4:	f007 f82c 	bl	8014830 <sys_sem_signal>
    }
    return ERR_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e02e      	b.n	800d83a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800d7dc:	7d7b      	ldrb	r3, [r7, #21]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d11e      	bne.n	800d820 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	7d1b      	ldrb	r3, [r3, #20]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d106      	bne.n	800d7f8 <lwip_netconn_do_close_internal+0x250>
 800d7ea:	4b16      	ldr	r3, [pc, #88]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d7ec:	f240 4241 	movw	r2, #1089	; 0x441
 800d7f0:	491b      	ldr	r1, [pc, #108]	; (800d860 <lwip_netconn_do_close_internal+0x2b8>)
 800d7f2:	4816      	ldr	r0, [pc, #88]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d7f4:	f00e fdfe 	bl	801c3f4 <iprintf>
    if (shut_tx) {
 800d7f8:	7b7b      	ldrb	r3, [r7, #13]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800d7fe:	4919      	ldr	r1, [pc, #100]	; (800d864 <lwip_netconn_do_close_internal+0x2bc>)
 800d800:	6938      	ldr	r0, [r7, #16]
 800d802:	f008 fcef 	bl	80161e4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d806:	2201      	movs	r2, #1
 800d808:	4917      	ldr	r1, [pc, #92]	; (800d868 <lwip_netconn_do_close_internal+0x2c0>)
 800d80a:	6938      	ldr	r0, [r7, #16]
 800d80c:	f008 fd46 	bl	801629c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d810:	4916      	ldr	r1, [pc, #88]	; (800d86c <lwip_netconn_do_close_internal+0x2c4>)
 800d812:	6938      	ldr	r0, [r7, #16]
 800d814:	f008 fd08 	bl	8016228 <tcp_err>
    tcp_arg(tpcb, conn);
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	6938      	ldr	r0, [r7, #16]
 800d81c:	f008 fcae 	bl	801617c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <lwip_netconn_do_close_internal+0x28e>
 800d828:	4b06      	ldr	r3, [pc, #24]	; (800d844 <lwip_netconn_do_close_internal+0x29c>)
 800d82a:	f240 424d 	movw	r2, #1101	; 0x44d
 800d82e:	4910      	ldr	r1, [pc, #64]	; (800d870 <lwip_netconn_do_close_internal+0x2c8>)
 800d830:	4806      	ldr	r0, [pc, #24]	; (800d84c <lwip_netconn_do_close_internal+0x2a4>)
 800d832:	f00e fddf 	bl	801c3f4 <iprintf>
  return err;
 800d836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3718      	adds	r7, #24
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	0801f97c 	.word	0x0801f97c
 800d848:	0801fc70 	.word	0x0801fc70
 800d84c:	0801f9e0 	.word	0x0801f9e0
 800d850:	0801fc80 	.word	0x0801fc80
 800d854:	0801fca0 	.word	0x0801fca0
 800d858:	0801fcc4 	.word	0x0801fcc4
 800d85c:	0801fb04 	.word	0x0801fb04
 800d860:	0801fcd8 	.word	0x0801fcd8
 800d864:	0800ce21 	.word	0x0800ce21
 800d868:	0800cd59 	.word	0x0800cd59
 800d86c:	0800cec9 	.word	0x0800cec9
 800d870:	0801fcfc 	.word	0x0801fcfc

0800d874 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	785b      	ldrb	r3, [r3, #1]
 800d886:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00d      	beq.n	800d8aa <lwip_netconn_do_delconn+0x36>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d898:	2b10      	cmp	r3, #16
 800d89a:	d006      	beq.n	800d8aa <lwip_netconn_do_delconn+0x36>
 800d89c:	4b60      	ldr	r3, [pc, #384]	; (800da20 <lwip_netconn_do_delconn+0x1ac>)
 800d89e:	f240 425e 	movw	r2, #1118	; 0x45e
 800d8a2:	4960      	ldr	r1, [pc, #384]	; (800da24 <lwip_netconn_do_delconn+0x1b0>)
 800d8a4:	4860      	ldr	r0, [pc, #384]	; (800da28 <lwip_netconn_do_delconn+0x1b4>)
 800d8a6:	f00e fda5 	bl	801c3f4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d8aa:	7afb      	ldrb	r3, [r7, #11]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <lwip_netconn_do_delconn+0x48>
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d002      	beq.n	800d8bc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d8b6:	7afb      	ldrb	r3, [r7, #11]
 800d8b8:	2b03      	cmp	r3, #3
 800d8ba:	d109      	bne.n	800d8d0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d10a      	bne.n	800d8d8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	7f1b      	ldrb	r3, [r3, #28]
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d103      	bne.n	800d8d8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	22fb      	movs	r2, #251	; 0xfb
 800d8d4:	711a      	strb	r2, [r3, #4]
 800d8d6:	e097      	b.n	800da08 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d8d8:	7afb      	ldrb	r3, [r7, #11]
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d10d      	bne.n	800d8fa <lwip_netconn_do_delconn+0x86>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	7f1b      	ldrb	r3, [r3, #28]
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <lwip_netconn_do_delconn+0x86>
 800d8ec:	4b4c      	ldr	r3, [pc, #304]	; (800da20 <lwip_netconn_do_delconn+0x1ac>)
 800d8ee:	f240 427a 	movw	r2, #1146	; 0x47a
 800d8f2:	494e      	ldr	r1, [pc, #312]	; (800da2c <lwip_netconn_do_delconn+0x1b8>)
 800d8f4:	484c      	ldr	r0, [pc, #304]	; (800da28 <lwip_netconn_do_delconn+0x1b4>)
 800d8f6:	f00e fd7d 	bl	801c3f4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fdd1 	bl	800d4ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d05f      	beq.n	800d9d4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d91e:	2b10      	cmp	r3, #16
 800d920:	d00d      	beq.n	800d93e <lwip_netconn_do_delconn+0xca>
 800d922:	2b20      	cmp	r3, #32
 800d924:	d151      	bne.n	800d9ca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	4618      	mov	r0, r3
 800d938:	f00e f822 	bl	801b980 <udp_remove>
          break;
 800d93c:	e046      	b.n	800d9cc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d006      	beq.n	800d956 <lwip_netconn_do_delconn+0xe2>
 800d948:	4b35      	ldr	r3, [pc, #212]	; (800da20 <lwip_netconn_do_delconn+0x1ac>)
 800d94a:	f240 4294 	movw	r2, #1172	; 0x494
 800d94e:	4938      	ldr	r1, [pc, #224]	; (800da30 <lwip_netconn_do_delconn+0x1bc>)
 800d950:	4835      	ldr	r0, [pc, #212]	; (800da28 <lwip_netconn_do_delconn+0x1b4>)
 800d952:	f00e fd4f 	bl	801c3f4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2204      	movs	r2, #4
 800d95c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2203      	movs	r2, #3
 800d962:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2100      	movs	r1, #0
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fe18 	bl	800d5a8 <lwip_netconn_do_close_internal>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d04b      	beq.n	800da16 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	785b      	ldrb	r3, [r3, #1]
 800d984:	2b04      	cmp	r3, #4
 800d986:	d006      	beq.n	800d996 <lwip_netconn_do_delconn+0x122>
 800d988:	4b25      	ldr	r3, [pc, #148]	; (800da20 <lwip_netconn_do_delconn+0x1ac>)
 800d98a:	f240 429a 	movw	r2, #1178	; 0x49a
 800d98e:	4929      	ldr	r1, [pc, #164]	; (800da34 <lwip_netconn_do_delconn+0x1c0>)
 800d990:	4825      	ldr	r0, [pc, #148]	; (800da28 <lwip_netconn_do_delconn+0x1b4>)
 800d992:	f00e fd2f 	bl	801c3f4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d996:	4828      	ldr	r0, [pc, #160]	; (800da38 <lwip_netconn_do_delconn+0x1c4>)
 800d998:	f006 ffbb 	bl	8014912 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	330c      	adds	r3, #12
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f006 ff12 	bl	80147ce <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d9aa:	4823      	ldr	r0, [pc, #140]	; (800da38 <lwip_netconn_do_delconn+0x1c4>)
 800d9ac:	f006 ffa2 	bl	80148f4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	785b      	ldrb	r3, [r3, #1]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d02d      	beq.n	800da16 <lwip_netconn_do_delconn+0x1a2>
 800d9ba:	4b19      	ldr	r3, [pc, #100]	; (800da20 <lwip_netconn_do_delconn+0x1ac>)
 800d9bc:	f240 429e 	movw	r2, #1182	; 0x49e
 800d9c0:	491c      	ldr	r1, [pc, #112]	; (800da34 <lwip_netconn_do_delconn+0x1c0>)
 800d9c2:	4819      	ldr	r0, [pc, #100]	; (800da28 <lwip_netconn_do_delconn+0x1b4>)
 800d9c4:	f00e fd16 	bl	801c3f4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d9c8:	e025      	b.n	800da16 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d9ca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d007      	beq.n	800d9ee <lwip_netconn_do_delconn+0x17a>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	6810      	ldr	r0, [r2, #0]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <lwip_netconn_do_delconn+0x194>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	6810      	ldr	r0, [r2, #0]
 800da02:	2200      	movs	r2, #0
 800da04:	2102      	movs	r1, #2
 800da06:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	330c      	adds	r3, #12
 800da0e:	4618      	mov	r0, r3
 800da10:	f006 ff28 	bl	8014864 <sys_sem_valid>
 800da14:	e000      	b.n	800da18 <lwip_netconn_do_delconn+0x1a4>
          return;
 800da16:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	0801f97c 	.word	0x0801f97c
 800da24:	0801fd0c 	.word	0x0801fd0c
 800da28:	0801f9e0 	.word	0x0801f9e0
 800da2c:	0801fd20 	.word	0x0801fd20
 800da30:	0801fd40 	.word	0x0801fd40
 800da34:	0801fd5c 	.word	0x0801fd5c
 800da38:	240079f0 	.word	0x240079f0

0800da3c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d025      	beq.n	800da9e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da5c:	2b10      	cmp	r3, #16
 800da5e:	d00e      	beq.n	800da7e <lwip_netconn_do_bind+0x42>
 800da60:	2b20      	cmp	r3, #32
 800da62:	d119      	bne.n	800da98 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6858      	ldr	r0, [r3, #4]
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	6899      	ldr	r1, [r3, #8]
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	899b      	ldrh	r3, [r3, #12]
 800da72:	461a      	mov	r2, r3
 800da74:	f00d fe6e 	bl	801b754 <udp_bind>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
        break;
 800da7c:	e011      	b.n	800daa2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6858      	ldr	r0, [r3, #4]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	6899      	ldr	r1, [r3, #8]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	899b      	ldrh	r3, [r3, #12]
 800da8c:	461a      	mov	r2, r3
 800da8e:	f007 faf3 	bl	8015078 <tcp_bind>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]
        break;
 800da96:	e004      	b.n	800daa2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800da98:	23fa      	movs	r3, #250	; 0xfa
 800da9a:	73fb      	strb	r3, [r7, #15]
        break;
 800da9c:	e001      	b.n	800daa2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800da9e:	23fa      	movs	r3, #250	; 0xfa
 800daa0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	7bfa      	ldrb	r2, [r7, #15]
 800daa6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800daa8:	bf00      	nop
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d07f      	beq.n	800dbc6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dad0:	2b10      	cmp	r3, #16
 800dad2:	d175      	bne.n	800dbc0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	785b      	ldrb	r3, [r3, #1]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d165      	bne.n	800dbaa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	7d1b      	ldrb	r3, [r3, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800daea:	23fa      	movs	r3, #250	; 0xfa
 800daec:	72fb      	strb	r3, [r7, #11]
 800daee:	e06c      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800daf0:	23ff      	movs	r3, #255	; 0xff
 800daf2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f107 020b 	add.w	r2, r7, #11
 800dafe:	7cf9      	ldrb	r1, [r7, #19]
 800db00:	4618      	mov	r0, r3
 800db02:	f007 fb71 	bl	80151e8 <tcp_listen_with_backlog_and_err>
 800db06:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d05d      	beq.n	800dbca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3310      	adds	r3, #16
 800db14:	4618      	mov	r0, r3
 800db16:	f006 fe14 	bl	8014742 <sys_mbox_valid>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3310      	adds	r3, #16
 800db26:	4618      	mov	r0, r3
 800db28:	f006 fd84 	bl	8014634 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3310      	adds	r3, #16
 800db32:	4618      	mov	r0, r3
 800db34:	f006 fe16 	bl	8014764 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3314      	adds	r3, #20
 800db42:	4618      	mov	r0, r3
 800db44:	f006 fdfd 	bl	8014742 <sys_mbox_valid>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d108      	bne.n	800db60 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3314      	adds	r3, #20
 800db54:	2106      	movs	r1, #6
 800db56:	4618      	mov	r0, r3
 800db58:	f006 fd4a 	bl	80145f0 <sys_mbox_new>
 800db5c:	4603      	mov	r3, r0
 800db5e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800db60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d118      	bne.n	800db9a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2202      	movs	r2, #2
 800db6e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685a      	ldr	r2, [r3, #4]
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f008 faf9 	bl	801617c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	4912      	ldr	r1, [pc, #72]	; (800dbdc <lwip_netconn_do_listen+0x12c>)
 800db92:	4618      	mov	r0, r3
 800db94:	f008 fb6a 	bl	801626c <tcp_accept>
 800db98:	e017      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f007 f91a 	bl	8014dd4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2200      	movs	r2, #0
 800dba6:	605a      	str	r2, [r3, #4]
 800dba8:	e00f      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	785b      	ldrb	r3, [r3, #1]
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d102      	bne.n	800dbba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	72fb      	strb	r3, [r7, #11]
 800dbb8:	e007      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800dbba:	23f5      	movs	r3, #245	; 0xf5
 800dbbc:	72fb      	strb	r3, [r7, #11]
 800dbbe:	e004      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800dbc0:	23f0      	movs	r3, #240	; 0xf0
 800dbc2:	72fb      	strb	r3, [r7, #11]
 800dbc4:	e001      	b.n	800dbca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800dbc6:	23f5      	movs	r3, #245	; 0xf5
 800dbc8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800dbca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dbd2:	bf00      	nop
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	0800d0c5 	.word	0x0800d0c5

0800dbe0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d022      	beq.n	800dc42 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc06:	2b10      	cmp	r3, #16
 800dc08:	d11b      	bne.n	800dc42 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc16:	d202      	bcs.n	800dc1e <lwip_netconn_do_recv+0x3e>
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	e001      	b.n	800dc22 <lwip_netconn_do_recv+0x42>
 800dc1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc22:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	89fa      	ldrh	r2, [r7, #14]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f007 fbde 	bl	80153f0 <tcp_recved>
        remaining -= recved;
 800dc34:	89fb      	ldrh	r3, [r7, #14]
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e6      	bne.n	800dc10 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dc42:	bf00      	nop
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <lwip_netconn_do_writemore+0x24>
 800dc62:	4b96      	ldr	r3, [pc, #600]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dc64:	f240 6273 	movw	r2, #1651	; 0x673
 800dc68:	4995      	ldr	r1, [pc, #596]	; (800dec0 <lwip_netconn_do_writemore+0x274>)
 800dc6a:	4896      	ldr	r0, [pc, #600]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dc6c:	f00e fbc2 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d006      	beq.n	800dc86 <lwip_netconn_do_writemore+0x3a>
 800dc78:	4b90      	ldr	r3, [pc, #576]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dc7a:	f240 6274 	movw	r2, #1652	; 0x674
 800dc7e:	4992      	ldr	r1, [pc, #584]	; (800dec8 <lwip_netconn_do_writemore+0x27c>)
 800dc80:	4890      	ldr	r0, [pc, #576]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dc82:	f00e fbb7 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <lwip_netconn_do_writemore+0x50>
 800dc8e:	4b8b      	ldr	r3, [pc, #556]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dc90:	f240 6275 	movw	r2, #1653	; 0x675
 800dc94:	498d      	ldr	r1, [pc, #564]	; (800decc <lwip_netconn_do_writemore+0x280>)
 800dc96:	488b      	ldr	r0, [pc, #556]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dc98:	f00e fbac 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <lwip_netconn_do_writemore+0x66>
 800dca4:	4b85      	ldr	r3, [pc, #532]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dca6:	f240 6276 	movw	r2, #1654	; 0x676
 800dcaa:	4989      	ldr	r1, [pc, #548]	; (800ded0 <lwip_netconn_do_writemore+0x284>)
 800dcac:	4885      	ldr	r0, [pc, #532]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dcae:	f00e fba1 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	699a      	ldr	r2, [r3, #24]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d306      	bcc.n	800dcd0 <lwip_netconn_do_writemore+0x84>
 800dcc2:	4b7e      	ldr	r3, [pc, #504]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dcc4:	f240 6277 	movw	r2, #1655	; 0x677
 800dcc8:	4982      	ldr	r1, [pc, #520]	; (800ded4 <lwip_netconn_do_writemore+0x288>)
 800dcca:	487e      	ldr	r0, [pc, #504]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dccc:	f00e fb92 	bl	801c3f4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	899b      	ldrh	r3, [r3, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <lwip_netconn_do_writemore+0x9c>
 800dcda:	4b78      	ldr	r3, [pc, #480]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dcdc:	f240 6279 	movw	r2, #1657	; 0x679
 800dce0:	497d      	ldr	r1, [pc, #500]	; (800ded8 <lwip_netconn_do_writemore+0x28c>)
 800dce2:	4878      	ldr	r0, [pc, #480]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800dce4:	f00e fb86 	bl	801c3f4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a1b      	ldr	r3, [r3, #32]
 800dcec:	7f1b      	ldrb	r3, [r3, #28]
 800dcee:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	7f1b      	ldrb	r3, [r3, #28]
 800dcf4:	f003 0302 	and.w	r3, r3, #2
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <lwip_netconn_do_writemore+0xba>
 800dcfc:	7ebb      	ldrb	r3, [r7, #26]
 800dcfe:	f003 0304 	and.w	r3, r3, #4
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <lwip_netconn_do_writemore+0xbe>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e000      	b.n	800dd0c <lwip_netconn_do_writemore+0xc0>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6a1b      	ldr	r3, [r3, #32]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd38:	d307      	bcc.n	800dd4a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800dd3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd3e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dd40:	7ebb      	ldrb	r3, [r7, #26]
 800dd42:	f043 0302 	orr.w	r3, r3, #2
 800dd46:	76bb      	strb	r3, [r7, #26]
 800dd48:	e001      	b.n	800dd4e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd56:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800dd58:	89fa      	ldrh	r2, [r7, #14]
 800dd5a:	8bbb      	ldrh	r3, [r7, #28]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d216      	bcs.n	800dd8e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800dd60:	89fb      	ldrh	r3, [r7, #14]
 800dd62:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800dd64:	7e3b      	ldrb	r3, [r7, #24]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00d      	beq.n	800dd86 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800dd6a:	8bbb      	ldrh	r3, [r7, #28]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10e      	bne.n	800dd8e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a1b      	ldr	r3, [r3, #32]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <lwip_netconn_do_writemore+0x134>
 800dd7a:	f06f 0306 	mvn.w	r3, #6
 800dd7e:	e000      	b.n	800dd82 <lwip_netconn_do_writemore+0x136>
 800dd80:	2300      	movs	r3, #0
 800dd82:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800dd84:	e07d      	b.n	800de82 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800dd86:	7ebb      	ldrb	r3, [r7, #26]
 800dd88:	f043 0302 	orr.w	r3, r3, #2
 800dd8c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	691a      	ldr	r2, [r3, #16]
 800dd94:	8bbb      	ldrh	r3, [r7, #28]
 800dd96:	441a      	add	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a1b      	ldr	r3, [r3, #32]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d906      	bls.n	800ddb2 <lwip_netconn_do_writemore+0x166>
 800dda4:	4b45      	ldr	r3, [pc, #276]	; (800debc <lwip_netconn_do_writemore+0x270>)
 800dda6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ddaa:	494c      	ldr	r1, [pc, #304]	; (800dedc <lwip_netconn_do_writemore+0x290>)
 800ddac:	4845      	ldr	r0, [pc, #276]	; (800dec4 <lwip_netconn_do_writemore+0x278>)
 800ddae:	f00e fb21 	bl	801c3f4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ddb2:	8bbb      	ldrh	r3, [r7, #28]
 800ddb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d103      	bne.n	800ddc4 <lwip_netconn_do_writemore+0x178>
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddc2:	d209      	bcs.n	800ddd8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ddc8:	8bba      	ldrh	r2, [r7, #28]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d10b      	bne.n	800dde6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	899b      	ldrh	r3, [r3, #12]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d906      	bls.n	800dde6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dddc:	7ebb      	ldrb	r3, [r7, #26]
 800ddde:	f043 0302 	orr.w	r3, r3, #2
 800dde2:	76bb      	strb	r3, [r7, #26]
 800dde4:	e001      	b.n	800ddea <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6858      	ldr	r0, [r3, #4]
 800ddee:	7ebb      	ldrb	r3, [r7, #26]
 800ddf0:	8bba      	ldrh	r2, [r7, #28]
 800ddf2:	6979      	ldr	r1, [r7, #20]
 800ddf4:	f00b f900 	bl	8018ff8 <tcp_write>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ddfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d12c      	bne.n	800de5e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	6999      	ldr	r1, [r3, #24]
 800de0a:	8bba      	ldrh	r2, [r7, #28]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a1b      	ldr	r3, [r3, #32]
 800de10:	440a      	add	r2, r1
 800de12:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	6919      	ldr	r1, [r3, #16]
 800de1a:	8bba      	ldrh	r2, [r7, #28]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	440a      	add	r2, r1
 800de22:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	691a      	ldr	r2, [r3, #16]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	429a      	cmp	r2, r3
 800de34:	d113      	bne.n	800de5e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	899a      	ldrh	r2, [r3, #12]
 800de3c:	3a01      	subs	r2, #1
 800de3e:	b292      	uxth	r2, r2
 800de40:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	899b      	ldrh	r3, [r3, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d008      	beq.n	800de5e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	689a      	ldr	r2, [r3, #8]
 800de52:	3208      	adds	r2, #8
 800de54:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a1b      	ldr	r3, [r3, #32]
 800de5a:	2200      	movs	r2, #0
 800de5c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800de5e:	7e7b      	ldrb	r3, [r7, #25]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d004      	beq.n	800de6e <lwip_netconn_do_writemore+0x222>
 800de64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f43f af50 	beq.w	800dd0e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800de6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d004      	beq.n	800de80 <lwip_netconn_do_writemore+0x234>
 800de76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7e:	d146      	bne.n	800df0e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800de80:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800de82:	7e3b      	ldrb	r3, [r7, #24]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d02b      	beq.n	800dee0 <lwip_netconn_do_writemore+0x294>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a1b      	ldr	r3, [r3, #32]
 800de8c:	699a      	ldr	r2, [r3, #24]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	429a      	cmp	r2, r3
 800de96:	d223      	bcs.n	800dee0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d005      	beq.n	800deac <lwip_netconn_do_writemore+0x260>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	2200      	movs	r2, #0
 800dea6:	2103      	movs	r1, #3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7f1b      	ldrb	r3, [r3, #28]
 800deb0:	f043 0310 	orr.w	r3, r3, #16
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	771a      	strb	r2, [r3, #28]
 800deba:	e028      	b.n	800df0e <lwip_netconn_do_writemore+0x2c2>
 800debc:	0801f97c 	.word	0x0801f97c
 800dec0:	0801faf4 	.word	0x0801faf4
 800dec4:	0801f9e0 	.word	0x0801f9e0
 800dec8:	0801fdfc 	.word	0x0801fdfc
 800decc:	0801fb04 	.word	0x0801fb04
 800ded0:	0801fe1c 	.word	0x0801fe1c
 800ded4:	0801fe34 	.word	0x0801fe34
 800ded8:	0801fe74 	.word	0x0801fe74
 800dedc:	0801fe9c 	.word	0x0801fe9c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dee8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800deec:	d305      	bcc.n	800defa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800def6:	2b04      	cmp	r3, #4
 800def8:	d909      	bls.n	800df0e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defe:	2b00      	cmp	r3, #0
 800df00:	d005      	beq.n	800df0e <lwip_netconn_do_writemore+0x2c2>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	2200      	movs	r2, #0
 800df08:	2103      	movs	r1, #3
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800df0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d11d      	bne.n	800df52 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a1b      	ldr	r3, [r3, #32]
 800df1a:	699a      	ldr	r2, [r3, #24]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a1b      	ldr	r3, [r3, #32]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	429a      	cmp	r2, r3
 800df24:	d002      	beq.n	800df2c <lwip_netconn_do_writemore+0x2e0>
 800df26:	7e3b      	ldrb	r3, [r7, #24]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800df2c:	2301      	movs	r3, #1
 800df2e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	4618      	mov	r0, r3
 800df36:	f00b fe49 	bl	8019bcc <tcp_output>
 800df3a:	4603      	mov	r3, r0
 800df3c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800df3e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800df42:	f113 0f04 	cmn.w	r3, #4
 800df46:	d12c      	bne.n	800dfa2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800df48:	7b3b      	ldrb	r3, [r7, #12]
 800df4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800df4c:	2301      	movs	r3, #1
 800df4e:	76fb      	strb	r3, [r7, #27]
 800df50:	e027      	b.n	800dfa2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800df52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5a:	d120      	bne.n	800df9e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	4618      	mov	r0, r3
 800df62:	f00b fe33 	bl	8019bcc <tcp_output>
 800df66:	4603      	mov	r3, r0
 800df68:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800df6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800df6e:	f113 0f04 	cmn.w	r3, #4
 800df72:	d104      	bne.n	800df7e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800df74:	7b7b      	ldrb	r3, [r7, #13]
 800df76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800df78:	2301      	movs	r3, #1
 800df7a:	76fb      	strb	r3, [r7, #27]
 800df7c:	e011      	b.n	800dfa2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800df7e:	7e3b      	ldrb	r3, [r7, #24]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00e      	beq.n	800dfa2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d102      	bne.n	800df94 <lwip_netconn_do_writemore+0x348>
 800df8e:	f06f 0306 	mvn.w	r3, #6
 800df92:	e000      	b.n	800df96 <lwip_netconn_do_writemore+0x34a>
 800df94:	2300      	movs	r3, #0
 800df96:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800df98:	2301      	movs	r3, #1
 800df9a:	76fb      	strb	r3, [r7, #27]
 800df9c:	e001      	b.n	800dfa2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800dfa2:	7efb      	ldrb	r3, [r7, #27]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d015      	beq.n	800dfd4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a1b      	ldr	r3, [r3, #32]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	330c      	adds	r3, #12
 800dfb0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a1b      	ldr	r3, [r3, #32]
 800dfb6:	7ffa      	ldrb	r2, [r7, #31]
 800dfb8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d006      	beq.n	800dfda <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800dfcc:	68b8      	ldr	r0, [r7, #8]
 800dfce:	f006 fc2f 	bl	8014830 <sys_sem_signal>
 800dfd2:	e002      	b.n	800dfda <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800dfd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd8:	e000      	b.n	800dfdc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3720      	adds	r7, #32
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe fd20 	bl	800ca3a <netconn_err>
 800dffa:	4603      	mov	r3, r0
 800dffc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d166      	bne.n	800e0d4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e010:	2b10      	cmp	r3, #16
 800e012:	d15d      	bne.n	800e0d0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	785b      	ldrb	r3, [r3, #1]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e01e:	23fb      	movs	r3, #251	; 0xfb
 800e020:	73fb      	strb	r3, [r7, #15]
 800e022:	e057      	b.n	800e0d4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d04d      	beq.n	800e0ca <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2201      	movs	r2, #1
 800e034:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	6a1b      	ldr	r3, [r3, #32]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d006      	beq.n	800e04e <lwip_netconn_do_write+0x6a>
 800e040:	4b28      	ldr	r3, [pc, #160]	; (800e0e4 <lwip_netconn_do_write+0x100>)
 800e042:	f240 7223 	movw	r2, #1827	; 0x723
 800e046:	4928      	ldr	r1, [pc, #160]	; (800e0e8 <lwip_netconn_do_write+0x104>)
 800e048:	4828      	ldr	r0, [pc, #160]	; (800e0ec <lwip_netconn_do_write+0x108>)
 800e04a:	f00e f9d3 	bl	801c3f4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d106      	bne.n	800e064 <lwip_netconn_do_write+0x80>
 800e056:	4b23      	ldr	r3, [pc, #140]	; (800e0e4 <lwip_netconn_do_write+0x100>)
 800e058:	f240 7224 	movw	r2, #1828	; 0x724
 800e05c:	4924      	ldr	r1, [pc, #144]	; (800e0f0 <lwip_netconn_do_write+0x10c>)
 800e05e:	4823      	ldr	r0, [pc, #140]	; (800e0ec <lwip_netconn_do_write+0x108>)
 800e060:	f00e f9c8 	bl	801c3f4 <iprintf>
        msg->conn->current_msg = msg;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2100      	movs	r1, #0
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff fdea 	bl	800dc4c <lwip_netconn_do_writemore>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d02e      	beq.n	800e0dc <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d006      	beq.n	800e096 <lwip_netconn_do_write+0xb2>
 800e088:	4b16      	ldr	r3, [pc, #88]	; (800e0e4 <lwip_netconn_do_write+0x100>)
 800e08a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e08e:	4919      	ldr	r1, [pc, #100]	; (800e0f4 <lwip_netconn_do_write+0x110>)
 800e090:	4816      	ldr	r0, [pc, #88]	; (800e0ec <lwip_netconn_do_write+0x108>)
 800e092:	f00e f9af 	bl	801c3f4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e096:	4818      	ldr	r0, [pc, #96]	; (800e0f8 <lwip_netconn_do_write+0x114>)
 800e098:	f006 fc3b 	bl	8014912 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	330c      	adds	r3, #12
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f006 fb92 	bl	80147ce <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e0aa:	4813      	ldr	r0, [pc, #76]	; (800e0f8 <lwip_netconn_do_write+0x114>)
 800e0ac:	f006 fc22 	bl	80148f4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	785b      	ldrb	r3, [r3, #1]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d110      	bne.n	800e0dc <lwip_netconn_do_write+0xf8>
 800e0ba:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <lwip_netconn_do_write+0x100>)
 800e0bc:	f240 722c 	movw	r2, #1836	; 0x72c
 800e0c0:	490c      	ldr	r1, [pc, #48]	; (800e0f4 <lwip_netconn_do_write+0x110>)
 800e0c2:	480a      	ldr	r0, [pc, #40]	; (800e0ec <lwip_netconn_do_write+0x108>)
 800e0c4:	f00e f996 	bl	801c3f4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e0c8:	e008      	b.n	800e0dc <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e0ca:	23f5      	movs	r3, #245	; 0xf5
 800e0cc:	73fb      	strb	r3, [r7, #15]
 800e0ce:	e001      	b.n	800e0d4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e0d0:	23fa      	movs	r3, #250	; 0xfa
 800e0d2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	7bfa      	ldrb	r2, [r7, #15]
 800e0d8:	711a      	strb	r2, [r3, #4]
 800e0da:	e000      	b.n	800e0de <lwip_netconn_do_write+0xfa>
        return;
 800e0dc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	0801f97c 	.word	0x0801f97c
 800e0e8:	0801fd40 	.word	0x0801fd40
 800e0ec:	0801f9e0 	.word	0x0801f9e0
 800e0f0:	0801fec8 	.word	0x0801fec8
 800e0f4:	0801fd5c 	.word	0x0801fd5c
 800e0f8:	240079f0 	.word	0x240079f0

0800e0fc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	785b      	ldrb	r3, [r3, #1]
 800e10e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d069      	beq.n	800e1ee <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e124:	2b10      	cmp	r3, #16
 800e126:	d162      	bne.n	800e1ee <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	d002      	beq.n	800e136 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e130:	7afb      	ldrb	r3, [r7, #11]
 800e132:	2b02      	cmp	r3, #2
 800e134:	d05b      	beq.n	800e1ee <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e136:	7afb      	ldrb	r3, [r7, #11]
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d103      	bne.n	800e144 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	22f5      	movs	r2, #245	; 0xf5
 800e140:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e142:	e059      	b.n	800e1f8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e144:	7afb      	ldrb	r3, [r7, #11]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d103      	bne.n	800e152 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	22fb      	movs	r2, #251	; 0xfb
 800e14e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e150:	e052      	b.n	800e1f8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	7a1b      	ldrb	r3, [r3, #8]
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d004      	beq.n	800e168 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4618      	mov	r0, r3
 800e164:	f7ff f9a2 	bl	800d4ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6a1b      	ldr	r3, [r3, #32]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d006      	beq.n	800e180 <lwip_netconn_do_close+0x84>
 800e172:	4b23      	ldr	r3, [pc, #140]	; (800e200 <lwip_netconn_do_close+0x104>)
 800e174:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e178:	4922      	ldr	r1, [pc, #136]	; (800e204 <lwip_netconn_do_close+0x108>)
 800e17a:	4823      	ldr	r0, [pc, #140]	; (800e208 <lwip_netconn_do_close+0x10c>)
 800e17c:	f00e f93a 	bl	801c3f4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2204      	movs	r2, #4
 800e186:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2100      	movs	r1, #0
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff fa06 	bl	800d5a8 <lwip_netconn_do_close_internal>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d029      	beq.n	800e1f6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	785b      	ldrb	r3, [r3, #1]
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d006      	beq.n	800e1ba <lwip_netconn_do_close+0xbe>
 800e1ac:	4b14      	ldr	r3, [pc, #80]	; (800e200 <lwip_netconn_do_close+0x104>)
 800e1ae:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e1b2:	4916      	ldr	r1, [pc, #88]	; (800e20c <lwip_netconn_do_close+0x110>)
 800e1b4:	4814      	ldr	r0, [pc, #80]	; (800e208 <lwip_netconn_do_close+0x10c>)
 800e1b6:	f00e f91d 	bl	801c3f4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e1ba:	4815      	ldr	r0, [pc, #84]	; (800e210 <lwip_netconn_do_close+0x114>)
 800e1bc:	f006 fba9 	bl	8014912 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	330c      	adds	r3, #12
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f006 fb00 	bl	80147ce <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e1ce:	4810      	ldr	r0, [pc, #64]	; (800e210 <lwip_netconn_do_close+0x114>)
 800e1d0:	f006 fb90 	bl	80148f4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00b      	beq.n	800e1f6 <lwip_netconn_do_close+0xfa>
 800e1de:	4b08      	ldr	r3, [pc, #32]	; (800e200 <lwip_netconn_do_close+0x104>)
 800e1e0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e1e4:	4909      	ldr	r1, [pc, #36]	; (800e20c <lwip_netconn_do_close+0x110>)
 800e1e6:	4808      	ldr	r0, [pc, #32]	; (800e208 <lwip_netconn_do_close+0x10c>)
 800e1e8:	f00e f904 	bl	801c3f4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e1ec:	e003      	b.n	800e1f6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	22f5      	movs	r2, #245	; 0xf5
 800e1f2:	711a      	strb	r2, [r3, #4]
 800e1f4:	e000      	b.n	800e1f8 <lwip_netconn_do_close+0xfc>
      return;
 800e1f6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	0801f97c 	.word	0x0801f97c
 800e204:	0801fd40 	.word	0x0801fd40
 800e208:	0801f9e0 	.word	0x0801f9e0
 800e20c:	0801fd5c 	.word	0x0801fd5c
 800e210:	240079f0 	.word	0x240079f0

0800e214 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	4603      	mov	r3, r0
 800e21c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	021b      	lsls	r3, r3, #8
 800e222:	b21a      	sxth	r2, r3
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	0a1b      	lsrs	r3, r3, #8
 800e228:	b29b      	uxth	r3, r3
 800e22a:	b21b      	sxth	r3, r3
 800e22c:	4313      	orrs	r3, r2
 800e22e:	b21b      	sxth	r3, r3
 800e230:	b29b      	uxth	r3, r3
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	061a      	lsls	r2, r3, #24
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e252:	431a      	orrs	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	0a1b      	lsrs	r3, r3, #8
 800e258:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	0e1b      	lsrs	r3, r3, #24
 800e262:	4313      	orrs	r3, r2
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e274:	4b20      	ldr	r3, [pc, #128]	; (800e2f8 <dhcp_inc_pcb_refcount+0x88>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d133      	bne.n	800e2e4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e27c:	4b1f      	ldr	r3, [pc, #124]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <dhcp_inc_pcb_refcount+0x20>
 800e284:	4b1e      	ldr	r3, [pc, #120]	; (800e300 <dhcp_inc_pcb_refcount+0x90>)
 800e286:	22e5      	movs	r2, #229	; 0xe5
 800e288:	491e      	ldr	r1, [pc, #120]	; (800e304 <dhcp_inc_pcb_refcount+0x94>)
 800e28a:	481f      	ldr	r0, [pc, #124]	; (800e308 <dhcp_inc_pcb_refcount+0x98>)
 800e28c:	f00e f8b2 	bl	801c3f4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e290:	f00d fbb8 	bl	801ba04 <udp_new>
 800e294:	4603      	mov	r3, r0
 800e296:	4a19      	ldr	r2, [pc, #100]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e298:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e29a:	4b18      	ldr	r3, [pc, #96]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d102      	bne.n	800e2a8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	e024      	b.n	800e2f2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e2a8:	4b14      	ldr	r3, [pc, #80]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	7a5a      	ldrb	r2, [r3, #9]
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f042 0220 	orr.w	r2, r2, #32
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e2ba:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2244      	movs	r2, #68	; 0x44
 800e2c0:	4912      	ldr	r1, [pc, #72]	; (800e30c <dhcp_inc_pcb_refcount+0x9c>)
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f00d fa46 	bl	801b754 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e2c8:	4b0c      	ldr	r3, [pc, #48]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2243      	movs	r2, #67	; 0x43
 800e2ce:	490f      	ldr	r1, [pc, #60]	; (800e30c <dhcp_inc_pcb_refcount+0x9c>)
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f00d fac7 	bl	801b864 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e2d6:	4b09      	ldr	r3, [pc, #36]	; (800e2fc <dhcp_inc_pcb_refcount+0x8c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	490c      	ldr	r1, [pc, #48]	; (800e310 <dhcp_inc_pcb_refcount+0xa0>)
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f00d fb2e 	bl	801b940 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e2e4:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <dhcp_inc_pcb_refcount+0x88>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	4b02      	ldr	r3, [pc, #8]	; (800e2f8 <dhcp_inc_pcb_refcount+0x88>)
 800e2ee:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	240041dc 	.word	0x240041dc
 800e2fc:	240041d8 	.word	0x240041d8
 800e300:	0801fef4 	.word	0x0801fef4
 800e304:	0801ff48 	.word	0x0801ff48
 800e308:	0801ff70 	.word	0x0801ff70
 800e30c:	080463c8 	.word	0x080463c8
 800e310:	0800fba9 	.word	0x0800fba9

0800e314 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e318:	4b0e      	ldr	r3, [pc, #56]	; (800e354 <dhcp_dec_pcb_refcount+0x40>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d105      	bne.n	800e32c <dhcp_dec_pcb_refcount+0x18>
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <dhcp_dec_pcb_refcount+0x44>)
 800e322:	22ff      	movs	r2, #255	; 0xff
 800e324:	490d      	ldr	r1, [pc, #52]	; (800e35c <dhcp_dec_pcb_refcount+0x48>)
 800e326:	480e      	ldr	r0, [pc, #56]	; (800e360 <dhcp_dec_pcb_refcount+0x4c>)
 800e328:	f00e f864 	bl	801c3f4 <iprintf>
  dhcp_pcb_refcount--;
 800e32c:	4b09      	ldr	r3, [pc, #36]	; (800e354 <dhcp_dec_pcb_refcount+0x40>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	3b01      	subs	r3, #1
 800e332:	b2da      	uxtb	r2, r3
 800e334:	4b07      	ldr	r3, [pc, #28]	; (800e354 <dhcp_dec_pcb_refcount+0x40>)
 800e336:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e338:	4b06      	ldr	r3, [pc, #24]	; (800e354 <dhcp_dec_pcb_refcount+0x40>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d107      	bne.n	800e350 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e340:	4b08      	ldr	r3, [pc, #32]	; (800e364 <dhcp_dec_pcb_refcount+0x50>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f00d fb1b 	bl	801b980 <udp_remove>
    dhcp_pcb = NULL;
 800e34a:	4b06      	ldr	r3, [pc, #24]	; (800e364 <dhcp_dec_pcb_refcount+0x50>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]
  }
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}
 800e354:	240041dc 	.word	0x240041dc
 800e358:	0801fef4 	.word	0x0801fef4
 800e35c:	0801ff98 	.word	0x0801ff98
 800e360:	0801ff70 	.word	0x0801ff70
 800e364:	240041d8 	.word	0x240041d8

0800e368 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e376:	210c      	movs	r1, #12
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f001 f857 	bl	800f42c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e37e:	4b06      	ldr	r3, [pc, #24]	; (800e398 <dhcp_handle_nak+0x30>)
 800e380:	4a05      	ldr	r2, [pc, #20]	; (800e398 <dhcp_handle_nak+0x30>)
 800e382:	4905      	ldr	r1, [pc, #20]	; (800e398 <dhcp_handle_nak+0x30>)
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f005 f97b 	bl	8013680 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fc4a 	bl	800ec24 <dhcp_discover>
}
 800e390:	bf00      	nop
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	080463c8 	.word	0x080463c8

0800e39c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e3aa:	2108      	movs	r1, #8
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f001 f83d 	bl	800f42c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	331c      	adds	r3, #28
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f002 fb3e 	bl	8010a3c <etharp_query>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	799b      	ldrb	r3, [r3, #6]
 800e3c8:	2bff      	cmp	r3, #255	; 0xff
 800e3ca:	d005      	beq.n	800e3d8 <dhcp_check+0x3c>
    dhcp->tries++;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	799b      	ldrb	r3, [r3, #6]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e3d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e3dc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e3de:	893b      	ldrh	r3, [r7, #8]
 800e3e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e3e4:	4a06      	ldr	r2, [pc, #24]	; (800e400 <dhcp_check+0x64>)
 800e3e6:	fb82 1203 	smull	r1, r2, r2, r3
 800e3ea:	1152      	asrs	r2, r2, #5
 800e3ec:	17db      	asrs	r3, r3, #31
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e3f6:	bf00      	nop
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	10624dd3 	.word	0x10624dd3

0800e404 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e412:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e414:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <dhcp_handle_offer+0x44>)
 800e416:	789b      	ldrb	r3, [r3, #2]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d011      	beq.n	800e440 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <dhcp_handle_offer+0x48>)
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff ff09 	bl	800e23e <lwip_htonl>
 800e42c:	4602      	mov	r2, r0
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	691a      	ldr	r2, [r3, #16]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f808 	bl	800e450 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e440:	bf00      	nop
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	240048c8 	.word	0x240048c8
 800e44c:	240048d0 	.word	0x240048d0

0800e450 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e450:	b5b0      	push	{r4, r5, r7, lr}
 800e452:	b08a      	sub	sp, #40	; 0x28
 800e454:	af02      	add	r7, sp, #8
 800e456:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d109      	bne.n	800e472 <dhcp_select+0x22>
 800e45e:	4b71      	ldr	r3, [pc, #452]	; (800e624 <dhcp_select+0x1d4>)
 800e460:	f240 1277 	movw	r2, #375	; 0x177
 800e464:	4970      	ldr	r1, [pc, #448]	; (800e628 <dhcp_select+0x1d8>)
 800e466:	4871      	ldr	r0, [pc, #452]	; (800e62c <dhcp_select+0x1dc>)
 800e468:	f00d ffc4 	bl	801c3f4 <iprintf>
 800e46c:	f06f 030f 	mvn.w	r3, #15
 800e470:	e0d3      	b.n	800e61a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e476:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d109      	bne.n	800e492 <dhcp_select+0x42>
 800e47e:	4b69      	ldr	r3, [pc, #420]	; (800e624 <dhcp_select+0x1d4>)
 800e480:	f240 1279 	movw	r2, #377	; 0x179
 800e484:	496a      	ldr	r1, [pc, #424]	; (800e630 <dhcp_select+0x1e0>)
 800e486:	4869      	ldr	r0, [pc, #420]	; (800e62c <dhcp_select+0x1dc>)
 800e488:	f00d ffb4 	bl	801c3f4 <iprintf>
 800e48c:	f06f 0305 	mvn.w	r3, #5
 800e490:	e0c3      	b.n	800e61a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e492:	2101      	movs	r1, #1
 800e494:	69b8      	ldr	r0, [r7, #24]
 800e496:	f000 ffc9 	bl	800f42c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e49a:	f107 030c 	add.w	r3, r7, #12
 800e49e:	2203      	movs	r2, #3
 800e4a0:	69b9      	ldr	r1, [r7, #24]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f001 fc4e 	bl	800fd44 <dhcp_create_msg>
 800e4a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 8085 	beq.w	800e5bc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e4b8:	89b8      	ldrh	r0, [r7, #12]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	2239      	movs	r2, #57	; 0x39
 800e4c4:	f000 ffcc 	bl	800f460 <dhcp_option>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e4cc:	89b8      	ldrh	r0, [r7, #12]
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4d8:	461a      	mov	r2, r3
 800e4da:	f001 f81b 	bl	800f514 <dhcp_option_short>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e4e2:	89b8      	ldrh	r0, [r7, #12]
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4ea:	2304      	movs	r3, #4
 800e4ec:	2232      	movs	r2, #50	; 0x32
 800e4ee:	f000 ffb7 	bl	800f460 <dhcp_option>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e4f6:	89bc      	ldrh	r4, [r7, #12]
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	69db      	ldr	r3, [r3, #28]
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fe9b 	bl	800e23e <lwip_htonl>
 800e508:	4603      	mov	r3, r0
 800e50a:	461a      	mov	r2, r3
 800e50c:	4629      	mov	r1, r5
 800e50e:	4620      	mov	r0, r4
 800e510:	f001 f832 	bl	800f578 <dhcp_option_long>
 800e514:	4603      	mov	r3, r0
 800e516:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e518:	89b8      	ldrh	r0, [r7, #12]
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e520:	2304      	movs	r3, #4
 800e522:	2236      	movs	r2, #54	; 0x36
 800e524:	f000 ff9c 	bl	800f460 <dhcp_option>
 800e528:	4603      	mov	r3, r0
 800e52a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e52c:	89bc      	ldrh	r4, [r7, #12]
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fe80 	bl	800e23e <lwip_htonl>
 800e53e:	4603      	mov	r3, r0
 800e540:	461a      	mov	r2, r3
 800e542:	4629      	mov	r1, r5
 800e544:	4620      	mov	r0, r4
 800e546:	f001 f817 	bl	800f578 <dhcp_option_long>
 800e54a:	4603      	mov	r3, r0
 800e54c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e54e:	89b8      	ldrh	r0, [r7, #12]
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e556:	2303      	movs	r3, #3
 800e558:	2237      	movs	r2, #55	; 0x37
 800e55a:	f000 ff81 	bl	800f460 <dhcp_option>
 800e55e:	4603      	mov	r3, r0
 800e560:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e562:	2300      	movs	r3, #0
 800e564:	77bb      	strb	r3, [r7, #30]
 800e566:	e00e      	b.n	800e586 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e568:	89b8      	ldrh	r0, [r7, #12]
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e570:	7fbb      	ldrb	r3, [r7, #30]
 800e572:	4a30      	ldr	r2, [pc, #192]	; (800e634 <dhcp_select+0x1e4>)
 800e574:	5cd3      	ldrb	r3, [r2, r3]
 800e576:	461a      	mov	r2, r3
 800e578:	f000 ffa6 	bl	800f4c8 <dhcp_option_byte>
 800e57c:	4603      	mov	r3, r0
 800e57e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e580:	7fbb      	ldrb	r3, [r7, #30]
 800e582:	3301      	adds	r3, #1
 800e584:	77bb      	strb	r3, [r7, #30]
 800e586:	7fbb      	ldrb	r3, [r7, #30]
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d9ed      	bls.n	800e568 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e58c:	89b8      	ldrh	r0, [r7, #12]
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	33f0      	adds	r3, #240	; 0xf0
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	4619      	mov	r1, r3
 800e596:	f001 fcab 	bl	800fef0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e59a:	4b27      	ldr	r3, [pc, #156]	; (800e638 <dhcp_select+0x1e8>)
 800e59c:	6818      	ldr	r0, [r3, #0]
 800e59e:	4b27      	ldr	r3, [pc, #156]	; (800e63c <dhcp_select+0x1ec>)
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	2343      	movs	r3, #67	; 0x43
 800e5a8:	4a25      	ldr	r2, [pc, #148]	; (800e640 <dhcp_select+0x1f0>)
 800e5aa:	6979      	ldr	r1, [r7, #20]
 800e5ac:	f00c ffec 	bl	801b588 <udp_sendto_if_src>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e5b4:	6978      	ldr	r0, [r7, #20]
 800e5b6:	f005 fd71 	bl	801409c <pbuf_free>
 800e5ba:	e001      	b.n	800e5c0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e5bc:	23ff      	movs	r3, #255	; 0xff
 800e5be:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	799b      	ldrb	r3, [r3, #6]
 800e5c4:	2bff      	cmp	r3, #255	; 0xff
 800e5c6:	d005      	beq.n	800e5d4 <dhcp_select+0x184>
    dhcp->tries++;
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	799b      	ldrb	r3, [r3, #6]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	799b      	ldrb	r3, [r3, #6]
 800e5d8:	2b05      	cmp	r3, #5
 800e5da:	d80d      	bhi.n	800e5f8 <dhcp_select+0x1a8>
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	799b      	ldrb	r3, [r3, #6]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	4093      	lsls	r3, r2
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	0152      	lsls	r2, r2, #5
 800e5ec:	1ad2      	subs	r2, r2, r3
 800e5ee:	0092      	lsls	r2, r2, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	e001      	b.n	800e5fc <dhcp_select+0x1ac>
 800e5f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e5fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e5fe:	89fb      	ldrh	r3, [r7, #14]
 800e600:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e604:	4a0f      	ldr	r2, [pc, #60]	; (800e644 <dhcp_select+0x1f4>)
 800e606:	fb82 1203 	smull	r1, r2, r2, r3
 800e60a:	1152      	asrs	r2, r2, #5
 800e60c:	17db      	asrs	r3, r3, #31
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	b29a      	uxth	r2, r3
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e616:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3720      	adds	r7, #32
 800e61e:	46bd      	mov	sp, r7
 800e620:	bdb0      	pop	{r4, r5, r7, pc}
 800e622:	bf00      	nop
 800e624:	0801fef4 	.word	0x0801fef4
 800e628:	0801ffbc 	.word	0x0801ffbc
 800e62c:	0801ff70 	.word	0x0801ff70
 800e630:	0801ffd8 	.word	0x0801ffd8
 800e634:	24000028 	.word	0x24000028
 800e638:	240041d8 	.word	0x240041d8
 800e63c:	080463c8 	.word	0x080463c8
 800e640:	080463cc 	.word	0x080463cc
 800e644:	10624dd3 	.word	0x10624dd3

0800e648 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e64e:	4b27      	ldr	r3, [pc, #156]	; (800e6ec <dhcp_coarse_tmr+0xa4>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	607b      	str	r3, [r7, #4]
 800e654:	e042      	b.n	800e6dc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d039      	beq.n	800e6d6 <dhcp_coarse_tmr+0x8e>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	795b      	ldrb	r3, [r3, #5]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d035      	beq.n	800e6d6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	8a9b      	ldrh	r3, [r3, #20]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d012      	beq.n	800e698 <dhcp_coarse_tmr+0x50>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	8a5b      	ldrh	r3, [r3, #18]
 800e676:	3301      	adds	r3, #1
 800e678:	b29a      	uxth	r2, r3
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	825a      	strh	r2, [r3, #18]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	8a5a      	ldrh	r2, [r3, #18]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	8a9b      	ldrh	r3, [r3, #20]
 800e686:	429a      	cmp	r2, r3
 800e688:	d106      	bne.n	800e698 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fe34 	bl	800f2f8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 f96b 	bl	800e96c <dhcp_start>
 800e696:	e01e      	b.n	800e6d6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	8a1b      	ldrh	r3, [r3, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00b      	beq.n	800e6b8 <dhcp_coarse_tmr+0x70>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	8a1b      	ldrh	r3, [r3, #16]
 800e6a4:	1e5a      	subs	r2, r3, #1
 800e6a6:	b291      	uxth	r1, r2
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	8211      	strh	r1, [r2, #16]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d103      	bne.n	800e6b8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f8c7 	bl	800e844 <dhcp_t2_timeout>
 800e6b6:	e00e      	b.n	800e6d6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	89db      	ldrh	r3, [r3, #14]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00a      	beq.n	800e6d6 <dhcp_coarse_tmr+0x8e>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	89db      	ldrh	r3, [r3, #14]
 800e6c4:	1e5a      	subs	r2, r3, #1
 800e6c6:	b291      	uxth	r1, r2
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	81d1      	strh	r1, [r2, #14]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d102      	bne.n	800e6d6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f888 	bl	800e7e6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	607b      	str	r3, [r7, #4]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1b9      	bne.n	800e656 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	240079c0 	.word	0x240079c0

0800e6f0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e6f6:	4b16      	ldr	r3, [pc, #88]	; (800e750 <dhcp_fine_tmr+0x60>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	607b      	str	r3, [r7, #4]
 800e6fc:	e020      	b.n	800e740 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e702:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d017      	beq.n	800e73a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	891b      	ldrh	r3, [r3, #8]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d906      	bls.n	800e720 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	891b      	ldrh	r3, [r3, #8]
 800e716:	3b01      	subs	r3, #1
 800e718:	b29a      	uxth	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	811a      	strh	r2, [r3, #8]
 800e71e:	e00c      	b.n	800e73a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	891b      	ldrh	r3, [r3, #8]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d108      	bne.n	800e73a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	b29a      	uxth	r2, r3
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f80d 	bl	800e754 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	607b      	str	r3, [r7, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1db      	bne.n	800e6fe <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	240079c0 	.word	0x240079c0

0800e754 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	795b      	ldrb	r3, [r3, #5]
 800e766:	2b0c      	cmp	r3, #12
 800e768:	d003      	beq.n	800e772 <dhcp_timeout+0x1e>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	795b      	ldrb	r3, [r3, #5]
 800e76e:	2b06      	cmp	r3, #6
 800e770:	d103      	bne.n	800e77a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fa56 	bl	800ec24 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e778:	e031      	b.n	800e7de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	795b      	ldrb	r3, [r3, #5]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d10e      	bne.n	800e7a0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	799b      	ldrb	r3, [r3, #6]
 800e786:	2b05      	cmp	r3, #5
 800e788:	d803      	bhi.n	800e792 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fe60 	bl	800e450 <dhcp_select>
}
 800e790:	e025      	b.n	800e7de <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fdb0 	bl	800f2f8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f8e7 	bl	800e96c <dhcp_start>
}
 800e79e:	e01e      	b.n	800e7de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	795b      	ldrb	r3, [r3, #5]
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d10b      	bne.n	800e7c0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	799b      	ldrb	r3, [r3, #6]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d803      	bhi.n	800e7b8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff fdf3 	bl	800e39c <dhcp_check>
}
 800e7b6:	e012      	b.n	800e7de <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 fad5 	bl	800ed68 <dhcp_bind>
}
 800e7be:	e00e      	b.n	800e7de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	795b      	ldrb	r3, [r3, #5]
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d10a      	bne.n	800e7de <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	799b      	ldrb	r3, [r3, #6]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d803      	bhi.n	800e7d8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fcdb 	bl	800f18c <dhcp_reboot>
}
 800e7d6:	e002      	b.n	800e7de <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fa23 	bl	800ec24 <dhcp_discover>
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	795b      	ldrb	r3, [r3, #5]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d007      	beq.n	800e80c <dhcp_t1_timeout+0x26>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	795b      	ldrb	r3, [r3, #5]
 800e800:	2b0a      	cmp	r3, #10
 800e802:	d003      	beq.n	800e80c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e808:	2b05      	cmp	r3, #5
 800e80a:	d117      	bne.n	800e83c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fb85 	bl	800ef1c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	899b      	ldrh	r3, [r3, #12]
 800e816:	461a      	mov	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	8a5b      	ldrh	r3, [r3, #18]
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	2b01      	cmp	r3, #1
 800e820:	dd0c      	ble.n	800e83c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	899b      	ldrh	r3, [r3, #12]
 800e826:	461a      	mov	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8a5b      	ldrh	r3, [r3, #18]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	da00      	bge.n	800e834 <dhcp_t1_timeout+0x4e>
 800e832:	3301      	adds	r3, #1
 800e834:	105b      	asrs	r3, r3, #1
 800e836:	b29a      	uxth	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	795b      	ldrb	r3, [r3, #5]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d00b      	beq.n	800e872 <dhcp_t2_timeout+0x2e>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	795b      	ldrb	r3, [r3, #5]
 800e85e:	2b0a      	cmp	r3, #10
 800e860:	d007      	beq.n	800e872 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e866:	2b05      	cmp	r3, #5
 800e868:	d003      	beq.n	800e872 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	795b      	ldrb	r3, [r3, #5]
 800e86e:	2b04      	cmp	r3, #4
 800e870:	d117      	bne.n	800e8a2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fbee 	bl	800f054 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	8a9b      	ldrh	r3, [r3, #20]
 800e87c:	461a      	mov	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	8a5b      	ldrh	r3, [r3, #18]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	2b01      	cmp	r3, #1
 800e886:	dd0c      	ble.n	800e8a2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	8a9b      	ldrh	r3, [r3, #20]
 800e88c:	461a      	mov	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	8a5b      	ldrh	r3, [r3, #18]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	da00      	bge.n	800e89a <dhcp_t2_timeout+0x56>
 800e898:	3301      	adds	r3, #1
 800e89a:	105b      	asrs	r3, r3, #1
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e8a2:	bf00      	nop
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
	...

0800e8ac <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ba:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e8c8:	4b26      	ldr	r3, [pc, #152]	; (800e964 <dhcp_handle_ack+0xb8>)
 800e8ca:	78db      	ldrb	r3, [r3, #3]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d003      	beq.n	800e8d8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e8d0:	4b25      	ldr	r3, [pc, #148]	; (800e968 <dhcp_handle_ack+0xbc>)
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e8d8:	4b22      	ldr	r3, [pc, #136]	; (800e964 <dhcp_handle_ack+0xb8>)
 800e8da:	791b      	ldrb	r3, [r3, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e8e0:	4b21      	ldr	r3, [pc, #132]	; (800e968 <dhcp_handle_ack+0xbc>)
 800e8e2:	691a      	ldr	r2, [r3, #16]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8e8:	e004      	b.n	800e8f4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ee:	085a      	lsrs	r2, r3, #1
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e8f4:	4b1b      	ldr	r3, [pc, #108]	; (800e964 <dhcp_handle_ack+0xb8>)
 800e8f6:	795b      	ldrb	r3, [r3, #5]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d004      	beq.n	800e906 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e8fc:	4b1a      	ldr	r3, [pc, #104]	; (800e968 <dhcp_handle_ack+0xbc>)
 800e8fe:	695a      	ldr	r2, [r3, #20]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	631a      	str	r2, [r3, #48]	; 0x30
 800e904:	e007      	b.n	800e916 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e90a:	4613      	mov	r3, r2
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	08da      	lsrs	r2, r3, #3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	691a      	ldr	r2, [r3, #16]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e91e:	4b11      	ldr	r3, [pc, #68]	; (800e964 <dhcp_handle_ack+0xb8>)
 800e920:	799b      	ldrb	r3, [r3, #6]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00b      	beq.n	800e93e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e926:	4b10      	ldr	r3, [pc, #64]	; (800e968 <dhcp_handle_ack+0xbc>)
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7ff fc87 	bl	800e23e <lwip_htonl>
 800e930:	4602      	mov	r2, r0
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2201      	movs	r2, #1
 800e93a:	71da      	strb	r2, [r3, #7]
 800e93c:	e002      	b.n	800e944 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e944:	4b07      	ldr	r3, [pc, #28]	; (800e964 <dhcp_handle_ack+0xb8>)
 800e946:	79db      	ldrb	r3, [r3, #7]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d007      	beq.n	800e95c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <dhcp_handle_ack+0xbc>)
 800e94e:	69db      	ldr	r3, [r3, #28]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fc74 	bl	800e23e <lwip_htonl>
 800e956:	4602      	mov	r2, r0
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e95c:	bf00      	nop
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	240048c8 	.word	0x240048c8
 800e968:	240048d0 	.word	0x240048d0

0800e96c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d109      	bne.n	800e98e <dhcp_start+0x22>
 800e97a:	4b37      	ldr	r3, [pc, #220]	; (800ea58 <dhcp_start+0xec>)
 800e97c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e980:	4936      	ldr	r1, [pc, #216]	; (800ea5c <dhcp_start+0xf0>)
 800e982:	4837      	ldr	r0, [pc, #220]	; (800ea60 <dhcp_start+0xf4>)
 800e984:	f00d fd36 	bl	801c3f4 <iprintf>
 800e988:	f06f 030f 	mvn.w	r3, #15
 800e98c:	e060      	b.n	800ea50 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d109      	bne.n	800e9b0 <dhcp_start+0x44>
 800e99c:	4b2e      	ldr	r3, [pc, #184]	; (800ea58 <dhcp_start+0xec>)
 800e99e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e9a2:	4930      	ldr	r1, [pc, #192]	; (800ea64 <dhcp_start+0xf8>)
 800e9a4:	482e      	ldr	r0, [pc, #184]	; (800ea60 <dhcp_start+0xf4>)
 800e9a6:	f00d fd25 	bl	801c3f4 <iprintf>
 800e9aa:	f06f 030f 	mvn.w	r3, #15
 800e9ae:	e04f      	b.n	800ea50 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9ba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e9be:	d202      	bcs.n	800e9c6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c4:	e044      	b.n	800ea50 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10d      	bne.n	800e9e8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e9cc:	2034      	movs	r0, #52	; 0x34
 800e9ce:	f004 f9fd 	bl	8012dcc <mem_malloc>
 800e9d2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d102      	bne.n	800e9e0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e9da:	f04f 33ff 	mov.w	r3, #4294967295
 800e9de:	e037      	b.n	800ea50 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	625a      	str	r2, [r3, #36]	; 0x24
 800e9e6:	e005      	b.n	800e9f4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	791b      	ldrb	r3, [r3, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e9f0:	f7ff fc90 	bl	800e314 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e9f4:	2234      	movs	r2, #52	; 0x34
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f00d f8b1 	bl	801bb60 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e9fe:	f7ff fc37 	bl	800e270 <dhcp_inc_pcb_refcount>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <dhcp_start+0xa2>
    return ERR_MEM;
 800ea08:	f04f 33ff 	mov.w	r3, #4294967295
 800ea0c:	e020      	b.n	800ea50 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2201      	movs	r2, #1
 800ea12:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea1a:	f003 0304 	and.w	r3, r3, #4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d105      	bne.n	800ea2e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ea22:	2102      	movs	r1, #2
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f000 fd01 	bl	800f42c <dhcp_set_state>
    return ERR_OK;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e010      	b.n	800ea50 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f8f8 	bl	800ec24 <dhcp_discover>
 800ea34:	4603      	mov	r3, r0
 800ea36:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ea38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 fc59 	bl	800f2f8 <dhcp_release_and_stop>
    return ERR_MEM;
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4a:	e001      	b.n	800ea50 <dhcp_start+0xe4>
  }
  return result;
 800ea4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	0801fef4 	.word	0x0801fef4
 800ea5c:	0801fff4 	.word	0x0801fff4
 800ea60:	0801ff70 	.word	0x0801ff70
 800ea64:	08020038 	.word	0x08020038

0800ea68 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea74:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d025      	beq.n	800eac8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	795b      	ldrb	r3, [r3, #5]
 800ea80:	2b0a      	cmp	r3, #10
 800ea82:	d008      	beq.n	800ea96 <dhcp_network_changed+0x2e>
 800ea84:	2b0a      	cmp	r3, #10
 800ea86:	dc0d      	bgt.n	800eaa4 <dhcp_network_changed+0x3c>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01f      	beq.n	800eacc <dhcp_network_changed+0x64>
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	db09      	blt.n	800eaa4 <dhcp_network_changed+0x3c>
 800ea90:	3b03      	subs	r3, #3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d806      	bhi.n	800eaa4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fb75 	bl	800f18c <dhcp_reboot>
      break;
 800eaa2:	e014      	b.n	800eace <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	795b      	ldrb	r3, [r3, #5]
 800eaa8:	2b0c      	cmp	r3, #12
 800eaaa:	d906      	bls.n	800eaba <dhcp_network_changed+0x52>
 800eaac:	4b09      	ldr	r3, [pc, #36]	; (800ead4 <dhcp_network_changed+0x6c>)
 800eaae:	f240 326d 	movw	r2, #877	; 0x36d
 800eab2:	4909      	ldr	r1, [pc, #36]	; (800ead8 <dhcp_network_changed+0x70>)
 800eab4:	4809      	ldr	r0, [pc, #36]	; (800eadc <dhcp_network_changed+0x74>)
 800eab6:	f00d fc9d 	bl	801c3f4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f8af 	bl	800ec24 <dhcp_discover>
      break;
 800eac6:	e002      	b.n	800eace <dhcp_network_changed+0x66>
    return;
 800eac8:	bf00      	nop
 800eaca:	e000      	b.n	800eace <dhcp_network_changed+0x66>
      break;
 800eacc:	bf00      	nop
  }
}
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	0801fef4 	.word	0x0801fef4
 800ead8:	0802005c 	.word	0x0802005c
 800eadc:	0801ff70 	.word	0x0801ff70

0800eae0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d107      	bne.n	800eb00 <dhcp_arp_reply+0x20>
 800eaf0:	4b0e      	ldr	r3, [pc, #56]	; (800eb2c <dhcp_arp_reply+0x4c>)
 800eaf2:	f240 328b 	movw	r2, #907	; 0x38b
 800eaf6:	490e      	ldr	r1, [pc, #56]	; (800eb30 <dhcp_arp_reply+0x50>)
 800eaf8:	480e      	ldr	r0, [pc, #56]	; (800eb34 <dhcp_arp_reply+0x54>)
 800eafa:	f00d fc7b 	bl	801c3f4 <iprintf>
 800eafe:	e012      	b.n	800eb26 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb04:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00c      	beq.n	800eb26 <dhcp_arp_reply+0x46>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	795b      	ldrb	r3, [r3, #5]
 800eb10:	2b08      	cmp	r3, #8
 800eb12:	d108      	bne.n	800eb26 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d102      	bne.n	800eb26 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f809 	bl	800eb38 <dhcp_decline>
    }
  }
}
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	0801fef4 	.word	0x0801fef4
 800eb30:	0801fff4 	.word	0x0801fff4
 800eb34:	0801ff70 	.word	0x0801ff70

0800eb38 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800eb38:	b5b0      	push	{r4, r5, r7, lr}
 800eb3a:	b08a      	sub	sp, #40	; 0x28
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb44:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eb46:	210c      	movs	r1, #12
 800eb48:	69b8      	ldr	r0, [r7, #24]
 800eb4a:	f000 fc6f 	bl	800f42c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800eb4e:	f107 030c 	add.w	r3, r7, #12
 800eb52:	2204      	movs	r2, #4
 800eb54:	69b9      	ldr	r1, [r7, #24]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f001 f8f4 	bl	800fd44 <dhcp_create_msg>
 800eb5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d035      	beq.n	800ebd0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800eb6a:	89b8      	ldrh	r0, [r7, #12]
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eb72:	2304      	movs	r3, #4
 800eb74:	2232      	movs	r2, #50	; 0x32
 800eb76:	f000 fc73 	bl	800f460 <dhcp_option>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eb7e:	89bc      	ldrh	r4, [r7, #12]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff fb57 	bl	800e23e <lwip_htonl>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	4629      	mov	r1, r5
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 fcee 	bl	800f578 <dhcp_option_long>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eba0:	89b8      	ldrh	r0, [r7, #12]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	33f0      	adds	r3, #240	; 0xf0
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	f001 f9a1 	bl	800fef0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ebae:	4b19      	ldr	r3, [pc, #100]	; (800ec14 <dhcp_decline+0xdc>)
 800ebb0:	6818      	ldr	r0, [r3, #0]
 800ebb2:	4b19      	ldr	r3, [pc, #100]	; (800ec18 <dhcp_decline+0xe0>)
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	2343      	movs	r3, #67	; 0x43
 800ebbc:	4a17      	ldr	r2, [pc, #92]	; (800ec1c <dhcp_decline+0xe4>)
 800ebbe:	6979      	ldr	r1, [r7, #20]
 800ebc0:	f00c fce2 	bl	801b588 <udp_sendto_if_src>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ebc8:	6978      	ldr	r0, [r7, #20]
 800ebca:	f005 fa67 	bl	801409c <pbuf_free>
 800ebce:	e001      	b.n	800ebd4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ebd0:	23ff      	movs	r3, #255	; 0xff
 800ebd2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	799b      	ldrb	r3, [r3, #6]
 800ebd8:	2bff      	cmp	r3, #255	; 0xff
 800ebda:	d005      	beq.n	800ebe8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	799b      	ldrb	r3, [r3, #6]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800ebe8:	f242 7310 	movw	r3, #10000	; 0x2710
 800ebec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ebee:	89fb      	ldrh	r3, [r7, #14]
 800ebf0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ebf4:	4a0a      	ldr	r2, [pc, #40]	; (800ec20 <dhcp_decline+0xe8>)
 800ebf6:	fb82 1203 	smull	r1, r2, r2, r3
 800ebfa:	1152      	asrs	r2, r2, #5
 800ebfc:	17db      	asrs	r3, r3, #31
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ec06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3720      	adds	r7, #32
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bdb0      	pop	{r4, r5, r7, pc}
 800ec12:	bf00      	nop
 800ec14:	240041d8 	.word	0x240041d8
 800ec18:	080463c8 	.word	0x080463c8
 800ec1c:	080463cc 	.word	0x080463cc
 800ec20:	10624dd3 	.word	0x10624dd3

0800ec24 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08a      	sub	sp, #40	; 0x28
 800ec28:	af02      	add	r7, sp, #8
 800ec2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec30:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ec3c:	2106      	movs	r1, #6
 800ec3e:	69b8      	ldr	r0, [r7, #24]
 800ec40:	f000 fbf4 	bl	800f42c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ec44:	f107 0308 	add.w	r3, r7, #8
 800ec48:	2201      	movs	r2, #1
 800ec4a:	69b9      	ldr	r1, [r7, #24]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f001 f879 	bl	800fd44 <dhcp_create_msg>
 800ec52:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d04b      	beq.n	800ecf2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ec60:	8938      	ldrh	r0, [r7, #8]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec68:	2302      	movs	r3, #2
 800ec6a:	2239      	movs	r2, #57	; 0x39
 800ec6c:	f000 fbf8 	bl	800f460 <dhcp_option>
 800ec70:	4603      	mov	r3, r0
 800ec72:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ec74:	8938      	ldrh	r0, [r7, #8]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec80:	461a      	mov	r2, r3
 800ec82:	f000 fc47 	bl	800f514 <dhcp_option_short>
 800ec86:	4603      	mov	r3, r0
 800ec88:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec8a:	8938      	ldrh	r0, [r7, #8]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec92:	2303      	movs	r3, #3
 800ec94:	2237      	movs	r2, #55	; 0x37
 800ec96:	f000 fbe3 	bl	800f460 <dhcp_option>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec9e:	2300      	movs	r3, #0
 800eca0:	77fb      	strb	r3, [r7, #31]
 800eca2:	e00e      	b.n	800ecc2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eca4:	8938      	ldrh	r0, [r7, #8]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ecac:	7ffb      	ldrb	r3, [r7, #31]
 800ecae:	4a29      	ldr	r2, [pc, #164]	; (800ed54 <dhcp_discover+0x130>)
 800ecb0:	5cd3      	ldrb	r3, [r2, r3]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f000 fc08 	bl	800f4c8 <dhcp_option_byte>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ecbc:	7ffb      	ldrb	r3, [r7, #31]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	77fb      	strb	r3, [r7, #31]
 800ecc2:	7ffb      	ldrb	r3, [r7, #31]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d9ed      	bls.n	800eca4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ecc8:	8938      	ldrh	r0, [r7, #8]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	33f0      	adds	r3, #240	; 0xf0
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f001 f90d 	bl	800fef0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ecd6:	4b20      	ldr	r3, [pc, #128]	; (800ed58 <dhcp_discover+0x134>)
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	4b20      	ldr	r3, [pc, #128]	; (800ed5c <dhcp_discover+0x138>)
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	2343      	movs	r3, #67	; 0x43
 800ece4:	4a1e      	ldr	r2, [pc, #120]	; (800ed60 <dhcp_discover+0x13c>)
 800ece6:	6939      	ldr	r1, [r7, #16]
 800ece8:	f00c fc4e 	bl	801b588 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800ecec:	6938      	ldr	r0, [r7, #16]
 800ecee:	f005 f9d5 	bl	801409c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	799b      	ldrb	r3, [r3, #6]
 800ecf6:	2bff      	cmp	r3, #255	; 0xff
 800ecf8:	d005      	beq.n	800ed06 <dhcp_discover+0xe2>
    dhcp->tries++;
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	799b      	ldrb	r3, [r3, #6]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	799b      	ldrb	r3, [r3, #6]
 800ed0a:	2b05      	cmp	r3, #5
 800ed0c:	d80d      	bhi.n	800ed2a <dhcp_discover+0x106>
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	799b      	ldrb	r3, [r3, #6]
 800ed12:	461a      	mov	r2, r3
 800ed14:	2301      	movs	r3, #1
 800ed16:	4093      	lsls	r3, r2
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	0152      	lsls	r2, r2, #5
 800ed1e:	1ad2      	subs	r2, r2, r3
 800ed20:	0092      	lsls	r2, r2, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	e001      	b.n	800ed2e <dhcp_discover+0x10a>
 800ed2a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ed2e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ed30:	897b      	ldrh	r3, [r7, #10]
 800ed32:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ed36:	4a0b      	ldr	r2, [pc, #44]	; (800ed64 <dhcp_discover+0x140>)
 800ed38:	fb82 1203 	smull	r1, r2, r2, r3
 800ed3c:	1152      	asrs	r2, r2, #5
 800ed3e:	17db      	asrs	r3, r3, #31
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ed48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3720      	adds	r7, #32
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	24000028 	.word	0x24000028
 800ed58:	240041d8 	.word	0x240041d8
 800ed5c:	080463c8 	.word	0x080463c8
 800ed60:	080463cc 	.word	0x080463cc
 800ed64:	10624dd3 	.word	0x10624dd3

0800ed68 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d107      	bne.n	800ed86 <dhcp_bind+0x1e>
 800ed76:	4b64      	ldr	r3, [pc, #400]	; (800ef08 <dhcp_bind+0x1a0>)
 800ed78:	f240 4215 	movw	r2, #1045	; 0x415
 800ed7c:	4963      	ldr	r1, [pc, #396]	; (800ef0c <dhcp_bind+0x1a4>)
 800ed7e:	4864      	ldr	r0, [pc, #400]	; (800ef10 <dhcp_bind+0x1a8>)
 800ed80:	f00d fb38 	bl	801c3f4 <iprintf>
 800ed84:	e0bc      	b.n	800ef00 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d107      	bne.n	800eda2 <dhcp_bind+0x3a>
 800ed92:	4b5d      	ldr	r3, [pc, #372]	; (800ef08 <dhcp_bind+0x1a0>)
 800ed94:	f240 4217 	movw	r2, #1047	; 0x417
 800ed98:	495e      	ldr	r1, [pc, #376]	; (800ef14 <dhcp_bind+0x1ac>)
 800ed9a:	485d      	ldr	r0, [pc, #372]	; (800ef10 <dhcp_bind+0x1a8>)
 800ed9c:	f00d fb2a 	bl	801c3f4 <iprintf>
 800eda0:	e0ae      	b.n	800ef00 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	2200      	movs	r2, #0
 800eda6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb0:	d019      	beq.n	800ede6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb6:	331e      	adds	r3, #30
 800edb8:	4a57      	ldr	r2, [pc, #348]	; (800ef18 <dhcp_bind+0x1b0>)
 800edba:	fba2 2303 	umull	r2, r3, r2, r3
 800edbe:	095b      	lsrs	r3, r3, #5
 800edc0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edc8:	d302      	bcc.n	800edd0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800edca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edce:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	8a9b      	ldrh	r3, [r3, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d102      	bne.n	800ede6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	2201      	movs	r2, #1
 800ede4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edee:	d01d      	beq.n	800ee2c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf4:	331e      	adds	r3, #30
 800edf6:	4a48      	ldr	r2, [pc, #288]	; (800ef18 <dhcp_bind+0x1b0>)
 800edf8:	fba2 2303 	umull	r2, r3, r2, r3
 800edfc:	095b      	lsrs	r3, r3, #5
 800edfe:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee06:	d302      	bcc.n	800ee0e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ee08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee0c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	895b      	ldrh	r3, [r3, #10]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d102      	bne.n	800ee24 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	2201      	movs	r2, #1
 800ee22:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	895a      	ldrh	r2, [r3, #10]
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee34:	d01d      	beq.n	800ee72 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3a:	331e      	adds	r3, #30
 800ee3c:	4a36      	ldr	r2, [pc, #216]	; (800ef18 <dhcp_bind+0x1b0>)
 800ee3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee42:	095b      	lsrs	r3, r3, #5
 800ee44:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee4c:	d302      	bcc.n	800ee54 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ee4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee52:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	899b      	ldrh	r3, [r3, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d102      	bne.n	800ee6a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	2201      	movs	r2, #1
 800ee68:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	899a      	ldrh	r2, [r3, #12]
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	895a      	ldrh	r2, [r3, #10]
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	899b      	ldrh	r3, [r3, #12]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d306      	bcc.n	800ee8c <dhcp_bind+0x124>
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	899b      	ldrh	r3, [r3, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d002      	beq.n	800ee8c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	79db      	ldrb	r3, [r3, #7]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d003      	beq.n	800ee9c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	613b      	str	r3, [r7, #16]
 800ee9a:	e014      	b.n	800eec6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	331c      	adds	r3, #28
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800eea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	db02      	blt.n	800eeb2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800eeac:	23ff      	movs	r3, #255	; 0xff
 800eeae:	613b      	str	r3, [r7, #16]
 800eeb0:	e009      	b.n	800eec6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800eeb2:	7dfb      	ldrb	r3, [r7, #23]
 800eeb4:	2bbf      	cmp	r3, #191	; 0xbf
 800eeb6:	d903      	bls.n	800eec0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800eeb8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800eebc:	613b      	str	r3, [r7, #16]
 800eebe:	e002      	b.n	800eec6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800eec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eec4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeca:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d108      	bne.n	800eee4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	69da      	ldr	r2, [r3, #28]
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	4013      	ands	r3, r2
 800eeda:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eee2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800eee4:	210a      	movs	r1, #10
 800eee6:	69b8      	ldr	r0, [r7, #24]
 800eee8:	f000 faa0 	bl	800f42c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	f103 011c 	add.w	r1, r3, #28
 800eef2:	f107 030c 	add.w	r3, r7, #12
 800eef6:	f107 0210 	add.w	r2, r7, #16
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f004 fbc0 	bl	8013680 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ef00:	3720      	adds	r7, #32
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	0801fef4 	.word	0x0801fef4
 800ef0c:	08020070 	.word	0x08020070
 800ef10:	0801ff70 	.word	0x0801ff70
 800ef14:	0802008c 	.word	0x0802008c
 800ef18:	88888889 	.word	0x88888889

0800ef1c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b08a      	sub	sp, #40	; 0x28
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef28:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ef2a:	2105      	movs	r1, #5
 800ef2c:	69b8      	ldr	r0, [r7, #24]
 800ef2e:	f000 fa7d 	bl	800f42c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ef32:	f107 030c 	add.w	r3, r7, #12
 800ef36:	2203      	movs	r2, #3
 800ef38:	69b9      	ldr	r1, [r7, #24]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 ff02 	bl	800fd44 <dhcp_create_msg>
 800ef40:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d04e      	beq.n	800efe6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ef4e:	89b8      	ldrh	r0, [r7, #12]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef56:	2302      	movs	r3, #2
 800ef58:	2239      	movs	r2, #57	; 0x39
 800ef5a:	f000 fa81 	bl	800f460 <dhcp_option>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ef62:	89b8      	ldrh	r0, [r7, #12]
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef6e:	461a      	mov	r2, r3
 800ef70:	f000 fad0 	bl	800f514 <dhcp_option_short>
 800ef74:	4603      	mov	r3, r0
 800ef76:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ef78:	89b8      	ldrh	r0, [r7, #12]
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef80:	2303      	movs	r3, #3
 800ef82:	2237      	movs	r2, #55	; 0x37
 800ef84:	f000 fa6c 	bl	800f460 <dhcp_option>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	77bb      	strb	r3, [r7, #30]
 800ef90:	e00e      	b.n	800efb0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ef92:	89b8      	ldrh	r0, [r7, #12]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef9a:	7fbb      	ldrb	r3, [r7, #30]
 800ef9c:	4a2a      	ldr	r2, [pc, #168]	; (800f048 <dhcp_renew+0x12c>)
 800ef9e:	5cd3      	ldrb	r3, [r2, r3]
 800efa0:	461a      	mov	r2, r3
 800efa2:	f000 fa91 	bl	800f4c8 <dhcp_option_byte>
 800efa6:	4603      	mov	r3, r0
 800efa8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800efaa:	7fbb      	ldrb	r3, [r7, #30]
 800efac:	3301      	adds	r3, #1
 800efae:	77bb      	strb	r3, [r7, #30]
 800efb0:	7fbb      	ldrb	r3, [r7, #30]
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d9ed      	bls.n	800ef92 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800efb6:	89b8      	ldrh	r0, [r7, #12]
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	33f0      	adds	r3, #240	; 0xf0
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	4619      	mov	r1, r3
 800efc0:	f000 ff96 	bl	800fef0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800efc4:	4b21      	ldr	r3, [pc, #132]	; (800f04c <dhcp_renew+0x130>)
 800efc6:	6818      	ldr	r0, [r3, #0]
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	f103 0218 	add.w	r2, r3, #24
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	2343      	movs	r3, #67	; 0x43
 800efd4:	6979      	ldr	r1, [r7, #20]
 800efd6:	f00c fa63 	bl	801b4a0 <udp_sendto_if>
 800efda:	4603      	mov	r3, r0
 800efdc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800efde:	6978      	ldr	r0, [r7, #20]
 800efe0:	f005 f85c 	bl	801409c <pbuf_free>
 800efe4:	e001      	b.n	800efea <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800efe6:	23ff      	movs	r3, #255	; 0xff
 800efe8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	799b      	ldrb	r3, [r3, #6]
 800efee:	2bff      	cmp	r3, #255	; 0xff
 800eff0:	d005      	beq.n	800effe <dhcp_renew+0xe2>
    dhcp->tries++;
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	799b      	ldrb	r3, [r3, #6]
 800eff6:	3301      	adds	r3, #1
 800eff8:	b2da      	uxtb	r2, r3
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	799b      	ldrb	r3, [r3, #6]
 800f002:	2b09      	cmp	r3, #9
 800f004:	d80a      	bhi.n	800f01c <dhcp_renew+0x100>
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	799b      	ldrb	r3, [r3, #6]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	461a      	mov	r2, r3
 800f00e:	0152      	lsls	r2, r2, #5
 800f010:	1ad2      	subs	r2, r2, r3
 800f012:	0092      	lsls	r2, r2, #2
 800f014:	4413      	add	r3, r2
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	b29b      	uxth	r3, r3
 800f01a:	e001      	b.n	800f020 <dhcp_renew+0x104>
 800f01c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f020:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f022:	89fb      	ldrh	r3, [r7, #14]
 800f024:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f028:	4a09      	ldr	r2, [pc, #36]	; (800f050 <dhcp_renew+0x134>)
 800f02a:	fb82 1203 	smull	r1, r2, r2, r3
 800f02e:	1152      	asrs	r2, r2, #5
 800f030:	17db      	asrs	r3, r3, #31
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	b29a      	uxth	r2, r3
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f03a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3720      	adds	r7, #32
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	24000028 	.word	0x24000028
 800f04c:	240041d8 	.word	0x240041d8
 800f050:	10624dd3 	.word	0x10624dd3

0800f054 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08a      	sub	sp, #40	; 0x28
 800f058:	af02      	add	r7, sp, #8
 800f05a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f060:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f062:	2104      	movs	r1, #4
 800f064:	69b8      	ldr	r0, [r7, #24]
 800f066:	f000 f9e1 	bl	800f42c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f06a:	f107 030c 	add.w	r3, r7, #12
 800f06e:	2203      	movs	r2, #3
 800f070:	69b9      	ldr	r1, [r7, #24]
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fe66 	bl	800fd44 <dhcp_create_msg>
 800f078:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d04c      	beq.n	800f11a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f086:	89b8      	ldrh	r0, [r7, #12]
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f08e:	2302      	movs	r3, #2
 800f090:	2239      	movs	r2, #57	; 0x39
 800f092:	f000 f9e5 	bl	800f460 <dhcp_option>
 800f096:	4603      	mov	r3, r0
 800f098:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f09a:	89b8      	ldrh	r0, [r7, #12]
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f000 fa34 	bl	800f514 <dhcp_option_short>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f0b0:	89b8      	ldrh	r0, [r7, #12]
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	2237      	movs	r2, #55	; 0x37
 800f0bc:	f000 f9d0 	bl	800f460 <dhcp_option>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	77bb      	strb	r3, [r7, #30]
 800f0c8:	e00e      	b.n	800f0e8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f0ca:	89b8      	ldrh	r0, [r7, #12]
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f0d2:	7fbb      	ldrb	r3, [r7, #30]
 800f0d4:	4a29      	ldr	r2, [pc, #164]	; (800f17c <dhcp_rebind+0x128>)
 800f0d6:	5cd3      	ldrb	r3, [r2, r3]
 800f0d8:	461a      	mov	r2, r3
 800f0da:	f000 f9f5 	bl	800f4c8 <dhcp_option_byte>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0e2:	7fbb      	ldrb	r3, [r7, #30]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	77bb      	strb	r3, [r7, #30]
 800f0e8:	7fbb      	ldrb	r3, [r7, #30]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d9ed      	bls.n	800f0ca <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f0ee:	89b8      	ldrh	r0, [r7, #12]
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	33f0      	adds	r3, #240	; 0xf0
 800f0f4:	697a      	ldr	r2, [r7, #20]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	f000 fefa 	bl	800fef0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f0fc:	4b20      	ldr	r3, [pc, #128]	; (800f180 <dhcp_rebind+0x12c>)
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	2343      	movs	r3, #67	; 0x43
 800f106:	4a1f      	ldr	r2, [pc, #124]	; (800f184 <dhcp_rebind+0x130>)
 800f108:	6979      	ldr	r1, [r7, #20]
 800f10a:	f00c f9c9 	bl	801b4a0 <udp_sendto_if>
 800f10e:	4603      	mov	r3, r0
 800f110:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f112:	6978      	ldr	r0, [r7, #20]
 800f114:	f004 ffc2 	bl	801409c <pbuf_free>
 800f118:	e001      	b.n	800f11e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f11a:	23ff      	movs	r3, #255	; 0xff
 800f11c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	799b      	ldrb	r3, [r3, #6]
 800f122:	2bff      	cmp	r3, #255	; 0xff
 800f124:	d005      	beq.n	800f132 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	799b      	ldrb	r3, [r3, #6]
 800f12a:	3301      	adds	r3, #1
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	799b      	ldrb	r3, [r3, #6]
 800f136:	2b09      	cmp	r3, #9
 800f138:	d80a      	bhi.n	800f150 <dhcp_rebind+0xfc>
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	799b      	ldrb	r3, [r3, #6]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	461a      	mov	r2, r3
 800f142:	0152      	lsls	r2, r2, #5
 800f144:	1ad2      	subs	r2, r2, r3
 800f146:	0092      	lsls	r2, r2, #2
 800f148:	4413      	add	r3, r2
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	e001      	b.n	800f154 <dhcp_rebind+0x100>
 800f150:	f242 7310 	movw	r3, #10000	; 0x2710
 800f154:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f156:	89fb      	ldrh	r3, [r7, #14]
 800f158:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f15c:	4a0a      	ldr	r2, [pc, #40]	; (800f188 <dhcp_rebind+0x134>)
 800f15e:	fb82 1203 	smull	r1, r2, r2, r3
 800f162:	1152      	asrs	r2, r2, #5
 800f164:	17db      	asrs	r3, r3, #31
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	b29a      	uxth	r2, r3
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f16e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3720      	adds	r7, #32
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	24000028 	.word	0x24000028
 800f180:	240041d8 	.word	0x240041d8
 800f184:	080463cc 	.word	0x080463cc
 800f188:	10624dd3 	.word	0x10624dd3

0800f18c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f18c:	b5b0      	push	{r4, r5, r7, lr}
 800f18e:	b08a      	sub	sp, #40	; 0x28
 800f190:	af02      	add	r7, sp, #8
 800f192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f198:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f19a:	2103      	movs	r1, #3
 800f19c:	69b8      	ldr	r0, [r7, #24]
 800f19e:	f000 f945 	bl	800f42c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f1a2:	f107 030c 	add.w	r3, r7, #12
 800f1a6:	2203      	movs	r2, #3
 800f1a8:	69b9      	ldr	r1, [r7, #24]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fdca 	bl	800fd44 <dhcp_create_msg>
 800f1b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d066      	beq.n	800f286 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f1be:	89b8      	ldrh	r0, [r7, #12]
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	2239      	movs	r2, #57	; 0x39
 800f1ca:	f000 f949 	bl	800f460 <dhcp_option>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f1d2:	89b8      	ldrh	r0, [r7, #12]
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	33f0      	adds	r3, #240	; 0xf0
 800f1d8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f000 f999 	bl	800f514 <dhcp_option_short>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f1e6:	89b8      	ldrh	r0, [r7, #12]
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1ee:	2304      	movs	r3, #4
 800f1f0:	2232      	movs	r2, #50	; 0x32
 800f1f2:	f000 f935 	bl	800f460 <dhcp_option>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f1fa:	89bc      	ldrh	r4, [r7, #12]
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	69db      	ldr	r3, [r3, #28]
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff f819 	bl	800e23e <lwip_htonl>
 800f20c:	4603      	mov	r3, r0
 800f20e:	461a      	mov	r2, r3
 800f210:	4629      	mov	r1, r5
 800f212:	4620      	mov	r0, r4
 800f214:	f000 f9b0 	bl	800f578 <dhcp_option_long>
 800f218:	4603      	mov	r3, r0
 800f21a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f21c:	89b8      	ldrh	r0, [r7, #12]
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f224:	2303      	movs	r3, #3
 800f226:	2237      	movs	r2, #55	; 0x37
 800f228:	f000 f91a 	bl	800f460 <dhcp_option>
 800f22c:	4603      	mov	r3, r0
 800f22e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f230:	2300      	movs	r3, #0
 800f232:	77bb      	strb	r3, [r7, #30]
 800f234:	e00e      	b.n	800f254 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f236:	89b8      	ldrh	r0, [r7, #12]
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f23e:	7fbb      	ldrb	r3, [r7, #30]
 800f240:	4a29      	ldr	r2, [pc, #164]	; (800f2e8 <dhcp_reboot+0x15c>)
 800f242:	5cd3      	ldrb	r3, [r2, r3]
 800f244:	461a      	mov	r2, r3
 800f246:	f000 f93f 	bl	800f4c8 <dhcp_option_byte>
 800f24a:	4603      	mov	r3, r0
 800f24c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f24e:	7fbb      	ldrb	r3, [r7, #30]
 800f250:	3301      	adds	r3, #1
 800f252:	77bb      	strb	r3, [r7, #30]
 800f254:	7fbb      	ldrb	r3, [r7, #30]
 800f256:	2b02      	cmp	r3, #2
 800f258:	d9ed      	bls.n	800f236 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f25a:	89b8      	ldrh	r0, [r7, #12]
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	33f0      	adds	r3, #240	; 0xf0
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	4619      	mov	r1, r3
 800f264:	f000 fe44 	bl	800fef0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f268:	4b20      	ldr	r3, [pc, #128]	; (800f2ec <dhcp_reboot+0x160>)
 800f26a:	6818      	ldr	r0, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	2343      	movs	r3, #67	; 0x43
 800f272:	4a1f      	ldr	r2, [pc, #124]	; (800f2f0 <dhcp_reboot+0x164>)
 800f274:	6979      	ldr	r1, [r7, #20]
 800f276:	f00c f913 	bl	801b4a0 <udp_sendto_if>
 800f27a:	4603      	mov	r3, r0
 800f27c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f27e:	6978      	ldr	r0, [r7, #20]
 800f280:	f004 ff0c 	bl	801409c <pbuf_free>
 800f284:	e001      	b.n	800f28a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f286:	23ff      	movs	r3, #255	; 0xff
 800f288:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	799b      	ldrb	r3, [r3, #6]
 800f28e:	2bff      	cmp	r3, #255	; 0xff
 800f290:	d005      	beq.n	800f29e <dhcp_reboot+0x112>
    dhcp->tries++;
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	799b      	ldrb	r3, [r3, #6]
 800f296:	3301      	adds	r3, #1
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	799b      	ldrb	r3, [r3, #6]
 800f2a2:	2b09      	cmp	r3, #9
 800f2a4:	d80a      	bhi.n	800f2bc <dhcp_reboot+0x130>
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	799b      	ldrb	r3, [r3, #6]
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	0152      	lsls	r2, r2, #5
 800f2b0:	1ad2      	subs	r2, r2, r3
 800f2b2:	0092      	lsls	r2, r2, #2
 800f2b4:	4413      	add	r3, r2
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	e001      	b.n	800f2c0 <dhcp_reboot+0x134>
 800f2bc:	f242 7310 	movw	r3, #10000	; 0x2710
 800f2c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f2c2:	89fb      	ldrh	r3, [r7, #14]
 800f2c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f2c8:	4a0a      	ldr	r2, [pc, #40]	; (800f2f4 <dhcp_reboot+0x168>)
 800f2ca:	fb82 1203 	smull	r1, r2, r2, r3
 800f2ce:	1152      	asrs	r2, r2, #5
 800f2d0:	17db      	asrs	r3, r3, #31
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f2da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3720      	adds	r7, #32
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	24000028 	.word	0x24000028
 800f2ec:	240041d8 	.word	0x240041d8
 800f2f0:	080463cc 	.word	0x080463cc
 800f2f4:	10624dd3 	.word	0x10624dd3

0800f2f8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f2f8:	b5b0      	push	{r4, r5, r7, lr}
 800f2fa:	b08a      	sub	sp, #40	; 0x28
 800f2fc:	af02      	add	r7, sp, #8
 800f2fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 8084 	beq.w	800f416 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	795b      	ldrb	r3, [r3, #5]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 8081 	beq.w	800f41a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	2200      	movs	r2, #0
 800f322:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2200      	movs	r2, #0
 800f328:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	2200      	movs	r2, #0
 800f32e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	2200      	movs	r2, #0
 800f334:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	2200      	movs	r2, #0
 800f33a:	631a      	str	r2, [r3, #48]	; 0x30
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	62da      	str	r2, [r3, #44]	; 0x2c
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2200      	movs	r2, #0
 800f350:	829a      	strh	r2, [r3, #20]
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	8a9a      	ldrh	r2, [r3, #20]
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	825a      	strh	r2, [r3, #18]
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	8a5a      	ldrh	r2, [r3, #18]
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	821a      	strh	r2, [r3, #16]
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	8a1a      	ldrh	r2, [r3, #16]
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fdee 	bl	800ff4c <dhcp_supplied_address>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d03b      	beq.n	800f3ee <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f376:	f107 030e 	add.w	r3, r7, #14
 800f37a:	2207      	movs	r2, #7
 800f37c:	69f9      	ldr	r1, [r7, #28]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fce0 	bl	800fd44 <dhcp_create_msg>
 800f384:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d030      	beq.n	800f3ee <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f392:	89f8      	ldrh	r0, [r7, #14]
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f39a:	2304      	movs	r3, #4
 800f39c:	2236      	movs	r2, #54	; 0x36
 800f39e:	f000 f85f 	bl	800f460 <dhcp_option>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f3a6:	89fc      	ldrh	r4, [r7, #14]
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fe ff44 	bl	800e23e <lwip_htonl>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f000 f8db 	bl	800f578 <dhcp_option_long>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3c6:	89f8      	ldrh	r0, [r7, #14]
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	33f0      	adds	r3, #240	; 0xf0
 800f3cc:	69ba      	ldr	r2, [r7, #24]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	f000 fd8e 	bl	800fef0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f3d4:	4b13      	ldr	r3, [pc, #76]	; (800f424 <dhcp_release_and_stop+0x12c>)
 800f3d6:	6818      	ldr	r0, [r3, #0]
 800f3d8:	f107 0210 	add.w	r2, r7, #16
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	2343      	movs	r3, #67	; 0x43
 800f3e2:	69b9      	ldr	r1, [r7, #24]
 800f3e4:	f00c f85c 	bl	801b4a0 <udp_sendto_if>
      pbuf_free(p_out);
 800f3e8:	69b8      	ldr	r0, [r7, #24]
 800f3ea:	f004 fe57 	bl	801409c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f3ee:	4b0e      	ldr	r3, [pc, #56]	; (800f428 <dhcp_release_and_stop+0x130>)
 800f3f0:	4a0d      	ldr	r2, [pc, #52]	; (800f428 <dhcp_release_and_stop+0x130>)
 800f3f2:	490d      	ldr	r1, [pc, #52]	; (800f428 <dhcp_release_and_stop+0x130>)
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f004 f943 	bl	8013680 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	69f8      	ldr	r0, [r7, #28]
 800f3fe:	f000 f815 	bl	800f42c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	791b      	ldrb	r3, [r3, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d008      	beq.n	800f41c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f40a:	f7fe ff83 	bl	800e314 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	2200      	movs	r2, #0
 800f412:	711a      	strb	r2, [r3, #4]
 800f414:	e002      	b.n	800f41c <dhcp_release_and_stop+0x124>
    return;
 800f416:	bf00      	nop
 800f418:	e000      	b.n	800f41c <dhcp_release_and_stop+0x124>
    return;
 800f41a:	bf00      	nop
  }
}
 800f41c:	3720      	adds	r7, #32
 800f41e:	46bd      	mov	sp, r7
 800f420:	bdb0      	pop	{r4, r5, r7, pc}
 800f422:	bf00      	nop
 800f424:	240041d8 	.word	0x240041d8
 800f428:	080463c8 	.word	0x080463c8

0800f42c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	795b      	ldrb	r3, [r3, #5]
 800f43c:	78fa      	ldrb	r2, [r7, #3]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d008      	beq.n	800f454 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	78fa      	ldrb	r2, [r7, #3]
 800f446:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	811a      	strh	r2, [r3, #8]
  }
}
 800f454:	bf00      	nop
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6039      	str	r1, [r7, #0]
 800f468:	4611      	mov	r1, r2
 800f46a:	461a      	mov	r2, r3
 800f46c:	4603      	mov	r3, r0
 800f46e:	80fb      	strh	r3, [r7, #6]
 800f470:	460b      	mov	r3, r1
 800f472:	717b      	strb	r3, [r7, #5]
 800f474:	4613      	mov	r3, r2
 800f476:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f478:	88fa      	ldrh	r2, [r7, #6]
 800f47a:	793b      	ldrb	r3, [r7, #4]
 800f47c:	4413      	add	r3, r2
 800f47e:	3302      	adds	r3, #2
 800f480:	2b44      	cmp	r3, #68	; 0x44
 800f482:	d906      	bls.n	800f492 <dhcp_option+0x32>
 800f484:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <dhcp_option+0x5c>)
 800f486:	f240 529a 	movw	r2, #1434	; 0x59a
 800f48a:	490d      	ldr	r1, [pc, #52]	; (800f4c0 <dhcp_option+0x60>)
 800f48c:	480d      	ldr	r0, [pc, #52]	; (800f4c4 <dhcp_option+0x64>)
 800f48e:	f00c ffb1 	bl	801c3f4 <iprintf>
  options[options_out_len++] = option_type;
 800f492:	88fb      	ldrh	r3, [r7, #6]
 800f494:	1c5a      	adds	r2, r3, #1
 800f496:	80fa      	strh	r2, [r7, #6]
 800f498:	461a      	mov	r2, r3
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	4413      	add	r3, r2
 800f49e:	797a      	ldrb	r2, [r7, #5]
 800f4a0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f4a2:	88fb      	ldrh	r3, [r7, #6]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	80fa      	strh	r2, [r7, #6]
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	793a      	ldrb	r2, [r7, #4]
 800f4b0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f4b2:	88fb      	ldrh	r3, [r7, #6]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	0801fef4 	.word	0x0801fef4
 800f4c0:	080200a4 	.word	0x080200a4
 800f4c4:	0801ff70 	.word	0x0801ff70

0800f4c8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6039      	str	r1, [r7, #0]
 800f4d2:	80fb      	strh	r3, [r7, #6]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f4d8:	88fb      	ldrh	r3, [r7, #6]
 800f4da:	2b43      	cmp	r3, #67	; 0x43
 800f4dc:	d906      	bls.n	800f4ec <dhcp_option_byte+0x24>
 800f4de:	4b0a      	ldr	r3, [pc, #40]	; (800f508 <dhcp_option_byte+0x40>)
 800f4e0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f4e4:	4909      	ldr	r1, [pc, #36]	; (800f50c <dhcp_option_byte+0x44>)
 800f4e6:	480a      	ldr	r0, [pc, #40]	; (800f510 <dhcp_option_byte+0x48>)
 800f4e8:	f00c ff84 	bl	801c3f4 <iprintf>
  options[options_out_len++] = value;
 800f4ec:	88fb      	ldrh	r3, [r7, #6]
 800f4ee:	1c5a      	adds	r2, r3, #1
 800f4f0:	80fa      	strh	r2, [r7, #6]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	797a      	ldrb	r2, [r7, #5]
 800f4fa:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f4fc:	88fb      	ldrh	r3, [r7, #6]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	0801fef4 	.word	0x0801fef4
 800f50c:	080200e8 	.word	0x080200e8
 800f510:	0801ff70 	.word	0x0801ff70

0800f514 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	80fb      	strh	r3, [r7, #6]
 800f520:	4613      	mov	r3, r2
 800f522:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	3302      	adds	r3, #2
 800f528:	2b44      	cmp	r3, #68	; 0x44
 800f52a:	d906      	bls.n	800f53a <dhcp_option_short+0x26>
 800f52c:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <dhcp_option_short+0x58>)
 800f52e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f532:	490f      	ldr	r1, [pc, #60]	; (800f570 <dhcp_option_short+0x5c>)
 800f534:	480f      	ldr	r0, [pc, #60]	; (800f574 <dhcp_option_short+0x60>)
 800f536:	f00c ff5d 	bl	801c3f4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f53a:	88bb      	ldrh	r3, [r7, #4]
 800f53c:	0a1b      	lsrs	r3, r3, #8
 800f53e:	b29a      	uxth	r2, r3
 800f540:	88fb      	ldrh	r3, [r7, #6]
 800f542:	1c59      	adds	r1, r3, #1
 800f544:	80f9      	strh	r1, [r7, #6]
 800f546:	4619      	mov	r1, r3
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	440b      	add	r3, r1
 800f54c:	b2d2      	uxtb	r2, r2
 800f54e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f550:	88fb      	ldrh	r3, [r7, #6]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	80fa      	strh	r2, [r7, #6]
 800f556:	461a      	mov	r2, r3
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	4413      	add	r3, r2
 800f55c:	88ba      	ldrh	r2, [r7, #4]
 800f55e:	b2d2      	uxtb	r2, r2
 800f560:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f562:	88fb      	ldrh	r3, [r7, #6]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	0801fef4 	.word	0x0801fef4
 800f570:	08020120 	.word	0x08020120
 800f574:	0801ff70 	.word	0x0801ff70

0800f578 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f586:	89fb      	ldrh	r3, [r7, #14]
 800f588:	3304      	adds	r3, #4
 800f58a:	2b44      	cmp	r3, #68	; 0x44
 800f58c:	d906      	bls.n	800f59c <dhcp_option_long+0x24>
 800f58e:	4b19      	ldr	r3, [pc, #100]	; (800f5f4 <dhcp_option_long+0x7c>)
 800f590:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f594:	4918      	ldr	r1, [pc, #96]	; (800f5f8 <dhcp_option_long+0x80>)
 800f596:	4819      	ldr	r0, [pc, #100]	; (800f5fc <dhcp_option_long+0x84>)
 800f598:	f00c ff2c 	bl	801c3f4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	0e1a      	lsrs	r2, r3, #24
 800f5a0:	89fb      	ldrh	r3, [r7, #14]
 800f5a2:	1c59      	adds	r1, r3, #1
 800f5a4:	81f9      	strh	r1, [r7, #14]
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	440b      	add	r3, r1
 800f5ac:	b2d2      	uxtb	r2, r2
 800f5ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	0c1a      	lsrs	r2, r3, #16
 800f5b4:	89fb      	ldrh	r3, [r7, #14]
 800f5b6:	1c59      	adds	r1, r3, #1
 800f5b8:	81f9      	strh	r1, [r7, #14]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	440b      	add	r3, r1
 800f5c0:	b2d2      	uxtb	r2, r2
 800f5c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	0a1a      	lsrs	r2, r3, #8
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	1c59      	adds	r1, r3, #1
 800f5cc:	81f9      	strh	r1, [r7, #14]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	b2d2      	uxtb	r2, r2
 800f5d6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f5d8:	89fb      	ldrh	r3, [r7, #14]
 800f5da:	1c5a      	adds	r2, r3, #1
 800f5dc:	81fa      	strh	r2, [r7, #14]
 800f5de:	461a      	mov	r2, r3
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	b2d2      	uxtb	r2, r2
 800f5e8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f5ea:	89fb      	ldrh	r3, [r7, #14]
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	0801fef4 	.word	0x0801fef4
 800f5f8:	0802015c 	.word	0x0802015c
 800f5fc:	0801ff70 	.word	0x0801ff70

0800f600 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b090      	sub	sp, #64	; 0x40
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f612:	2208      	movs	r2, #8
 800f614:	2100      	movs	r1, #0
 800f616:	48be      	ldr	r0, [pc, #760]	; (800f910 <dhcp_parse_reply+0x310>)
 800f618:	f00c faa2 	bl	801bb60 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	895b      	ldrh	r3, [r3, #10]
 800f620:	2b2b      	cmp	r3, #43	; 0x2b
 800f622:	d802      	bhi.n	800f62a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f624:	f06f 0301 	mvn.w	r3, #1
 800f628:	e2a8      	b.n	800fb7c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f630:	23f0      	movs	r3, #240	; 0xf0
 800f632:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	891b      	ldrh	r3, [r3, #8]
 800f638:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f63e:	e00c      	b.n	800f65a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	895b      	ldrh	r3, [r3, #10]
 800f644:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	895b      	ldrh	r3, [r3, #10]
 800f64e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d004      	beq.n	800f66a <dhcp_parse_reply+0x6a>
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	895b      	ldrh	r3, [r3, #10]
 800f664:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f666:	429a      	cmp	r2, r3
 800f668:	d2ea      	bcs.n	800f640 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d102      	bne.n	800f676 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f670:	f06f 0301 	mvn.w	r3, #1
 800f674:	e282      	b.n	800fb7c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800f676:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f678:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f67a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f67c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f684:	e23a      	b.n	800fafc <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800f686:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f68a:	4413      	add	r3, r2
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f696:	f04f 33ff 	mov.w	r3, #4294967295
 800f69a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f69c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f69e:	3302      	adds	r3, #2
 800f6a0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f6a2:	8bfa      	ldrh	r2, [r7, #30]
 800f6a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d202      	bcs.n	800f6b0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f6aa:	f06f 0301 	mvn.w	r3, #1
 800f6ae:	e265      	b.n	800fb7c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f6b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b6:	8952      	ldrh	r2, [r2, #10]
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	da07      	bge.n	800f6cc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f6bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6be:	3301      	adds	r3, #1
 800f6c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6c2:	4413      	add	r3, r2
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ca:	e00b      	b.n	800f6e4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d004      	beq.n	800f6de <dhcp_parse_reply+0xde>
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	e000      	b.n	800f6e0 <dhcp_parse_reply+0xe0>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	2b3b      	cmp	r3, #59	; 0x3b
 800f6f0:	f200 812d 	bhi.w	800f94e <dhcp_parse_reply+0x34e>
 800f6f4:	a201      	add	r2, pc, #4	; (adr r2, 800f6fc <dhcp_parse_reply+0xfc>)
 800f6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fa:	bf00      	nop
 800f6fc:	0800f7ed 	.word	0x0800f7ed
 800f700:	0800f7fd 	.word	0x0800f7fd
 800f704:	0800f94f 	.word	0x0800f94f
 800f708:	0800f81f 	.word	0x0800f81f
 800f70c:	0800f94f 	.word	0x0800f94f
 800f710:	0800f94f 	.word	0x0800f94f
 800f714:	0800f94f 	.word	0x0800f94f
 800f718:	0800f94f 	.word	0x0800f94f
 800f71c:	0800f94f 	.word	0x0800f94f
 800f720:	0800f94f 	.word	0x0800f94f
 800f724:	0800f94f 	.word	0x0800f94f
 800f728:	0800f94f 	.word	0x0800f94f
 800f72c:	0800f94f 	.word	0x0800f94f
 800f730:	0800f94f 	.word	0x0800f94f
 800f734:	0800f94f 	.word	0x0800f94f
 800f738:	0800f94f 	.word	0x0800f94f
 800f73c:	0800f94f 	.word	0x0800f94f
 800f740:	0800f94f 	.word	0x0800f94f
 800f744:	0800f94f 	.word	0x0800f94f
 800f748:	0800f94f 	.word	0x0800f94f
 800f74c:	0800f94f 	.word	0x0800f94f
 800f750:	0800f94f 	.word	0x0800f94f
 800f754:	0800f94f 	.word	0x0800f94f
 800f758:	0800f94f 	.word	0x0800f94f
 800f75c:	0800f94f 	.word	0x0800f94f
 800f760:	0800f94f 	.word	0x0800f94f
 800f764:	0800f94f 	.word	0x0800f94f
 800f768:	0800f94f 	.word	0x0800f94f
 800f76c:	0800f94f 	.word	0x0800f94f
 800f770:	0800f94f 	.word	0x0800f94f
 800f774:	0800f94f 	.word	0x0800f94f
 800f778:	0800f94f 	.word	0x0800f94f
 800f77c:	0800f94f 	.word	0x0800f94f
 800f780:	0800f94f 	.word	0x0800f94f
 800f784:	0800f94f 	.word	0x0800f94f
 800f788:	0800f94f 	.word	0x0800f94f
 800f78c:	0800f94f 	.word	0x0800f94f
 800f790:	0800f94f 	.word	0x0800f94f
 800f794:	0800f94f 	.word	0x0800f94f
 800f798:	0800f94f 	.word	0x0800f94f
 800f79c:	0800f94f 	.word	0x0800f94f
 800f7a0:	0800f94f 	.word	0x0800f94f
 800f7a4:	0800f94f 	.word	0x0800f94f
 800f7a8:	0800f94f 	.word	0x0800f94f
 800f7ac:	0800f94f 	.word	0x0800f94f
 800f7b0:	0800f94f 	.word	0x0800f94f
 800f7b4:	0800f94f 	.word	0x0800f94f
 800f7b8:	0800f94f 	.word	0x0800f94f
 800f7bc:	0800f94f 	.word	0x0800f94f
 800f7c0:	0800f94f 	.word	0x0800f94f
 800f7c4:	0800f94f 	.word	0x0800f94f
 800f7c8:	0800f84b 	.word	0x0800f84b
 800f7cc:	0800f86d 	.word	0x0800f86d
 800f7d0:	0800f8a9 	.word	0x0800f8a9
 800f7d4:	0800f8cb 	.word	0x0800f8cb
 800f7d8:	0800f94f 	.word	0x0800f94f
 800f7dc:	0800f94f 	.word	0x0800f94f
 800f7e0:	0800f94f 	.word	0x0800f94f
 800f7e4:	0800f8ed 	.word	0x0800f8ed
 800f7e8:	0800f92d 	.word	0x0800f92d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f7fa:	e0ac      	b.n	800f956 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f800:	2b04      	cmp	r3, #4
 800f802:	d009      	beq.n	800f818 <dhcp_parse_reply+0x218>
 800f804:	4b43      	ldr	r3, [pc, #268]	; (800f914 <dhcp_parse_reply+0x314>)
 800f806:	f240 622e 	movw	r2, #1582	; 0x62e
 800f80a:	4943      	ldr	r1, [pc, #268]	; (800f918 <dhcp_parse_reply+0x318>)
 800f80c:	4843      	ldr	r0, [pc, #268]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f80e:	f00c fdf1 	bl	801c3f4 <iprintf>
 800f812:	f06f 0305 	mvn.w	r3, #5
 800f816:	e1b1      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f818:	2306      	movs	r3, #6
 800f81a:	623b      	str	r3, [r7, #32]
        break;
 800f81c:	e09b      	b.n	800f956 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f81e:	2304      	movs	r3, #4
 800f820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f824:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d209      	bcs.n	800f844 <dhcp_parse_reply+0x244>
 800f830:	4b38      	ldr	r3, [pc, #224]	; (800f914 <dhcp_parse_reply+0x314>)
 800f832:	f240 6233 	movw	r2, #1587	; 0x633
 800f836:	493a      	ldr	r1, [pc, #232]	; (800f920 <dhcp_parse_reply+0x320>)
 800f838:	4838      	ldr	r0, [pc, #224]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f83a:	f00c fddb 	bl	801c3f4 <iprintf>
 800f83e:	f06f 0305 	mvn.w	r3, #5
 800f842:	e19b      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f844:	2307      	movs	r3, #7
 800f846:	623b      	str	r3, [r7, #32]
        break;
 800f848:	e085      	b.n	800f956 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d009      	beq.n	800f866 <dhcp_parse_reply+0x266>
 800f852:	4b30      	ldr	r3, [pc, #192]	; (800f914 <dhcp_parse_reply+0x314>)
 800f854:	f240 6241 	movw	r2, #1601	; 0x641
 800f858:	492f      	ldr	r1, [pc, #188]	; (800f918 <dhcp_parse_reply+0x318>)
 800f85a:	4830      	ldr	r0, [pc, #192]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f85c:	f00c fdca 	bl	801c3f4 <iprintf>
 800f860:	f06f 0305 	mvn.w	r3, #5
 800f864:	e18a      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f866:	2303      	movs	r3, #3
 800f868:	623b      	str	r3, [r7, #32]
        break;
 800f86a:	e074      	b.n	800f956 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f870:	2b01      	cmp	r3, #1
 800f872:	d009      	beq.n	800f888 <dhcp_parse_reply+0x288>
 800f874:	4b27      	ldr	r3, [pc, #156]	; (800f914 <dhcp_parse_reply+0x314>)
 800f876:	f240 624f 	movw	r2, #1615	; 0x64f
 800f87a:	492a      	ldr	r1, [pc, #168]	; (800f924 <dhcp_parse_reply+0x324>)
 800f87c:	4827      	ldr	r0, [pc, #156]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f87e:	f00c fdb9 	bl	801c3f4 <iprintf>
 800f882:	f06f 0305 	mvn.w	r3, #5
 800f886:	e179      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f88a:	2bf0      	cmp	r3, #240	; 0xf0
 800f88c:	d009      	beq.n	800f8a2 <dhcp_parse_reply+0x2a2>
 800f88e:	4b21      	ldr	r3, [pc, #132]	; (800f914 <dhcp_parse_reply+0x314>)
 800f890:	f240 6251 	movw	r2, #1617	; 0x651
 800f894:	4924      	ldr	r1, [pc, #144]	; (800f928 <dhcp_parse_reply+0x328>)
 800f896:	4821      	ldr	r0, [pc, #132]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f898:	f00c fdac 	bl	801c3f4 <iprintf>
 800f89c:	f06f 0305 	mvn.w	r3, #5
 800f8a0:	e16c      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	623b      	str	r3, [r7, #32]
        break;
 800f8a6:	e056      	b.n	800f956 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d009      	beq.n	800f8c4 <dhcp_parse_reply+0x2c4>
 800f8b0:	4b18      	ldr	r3, [pc, #96]	; (800f914 <dhcp_parse_reply+0x314>)
 800f8b2:	f240 6255 	movw	r2, #1621	; 0x655
 800f8b6:	491b      	ldr	r1, [pc, #108]	; (800f924 <dhcp_parse_reply+0x324>)
 800f8b8:	4818      	ldr	r0, [pc, #96]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f8ba:	f00c fd9b 	bl	801c3f4 <iprintf>
 800f8be:	f06f 0305 	mvn.w	r3, #5
 800f8c2:	e15b      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	623b      	str	r3, [r7, #32]
        break;
 800f8c8:	e045      	b.n	800f956 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ce:	2b04      	cmp	r3, #4
 800f8d0:	d009      	beq.n	800f8e6 <dhcp_parse_reply+0x2e6>
 800f8d2:	4b10      	ldr	r3, [pc, #64]	; (800f914 <dhcp_parse_reply+0x314>)
 800f8d4:	f240 6259 	movw	r2, #1625	; 0x659
 800f8d8:	490f      	ldr	r1, [pc, #60]	; (800f918 <dhcp_parse_reply+0x318>)
 800f8da:	4810      	ldr	r0, [pc, #64]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f8dc:	f00c fd8a 	bl	801c3f4 <iprintf>
 800f8e0:	f06f 0305 	mvn.w	r3, #5
 800f8e4:	e14a      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f8e6:	2302      	movs	r3, #2
 800f8e8:	623b      	str	r3, [r7, #32]
        break;
 800f8ea:	e034      	b.n	800f956 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f0:	2b04      	cmp	r3, #4
 800f8f2:	d009      	beq.n	800f908 <dhcp_parse_reply+0x308>
 800f8f4:	4b07      	ldr	r3, [pc, #28]	; (800f914 <dhcp_parse_reply+0x314>)
 800f8f6:	f240 625d 	movw	r2, #1629	; 0x65d
 800f8fa:	4907      	ldr	r1, [pc, #28]	; (800f918 <dhcp_parse_reply+0x318>)
 800f8fc:	4807      	ldr	r0, [pc, #28]	; (800f91c <dhcp_parse_reply+0x31c>)
 800f8fe:	f00c fd79 	bl	801c3f4 <iprintf>
 800f902:	f06f 0305 	mvn.w	r3, #5
 800f906:	e139      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f908:	2304      	movs	r3, #4
 800f90a:	623b      	str	r3, [r7, #32]
        break;
 800f90c:	e023      	b.n	800f956 <dhcp_parse_reply+0x356>
 800f90e:	bf00      	nop
 800f910:	240048c8 	.word	0x240048c8
 800f914:	0801fef4 	.word	0x0801fef4
 800f918:	08020198 	.word	0x08020198
 800f91c:	0801ff70 	.word	0x0801ff70
 800f920:	080201a4 	.word	0x080201a4
 800f924:	080201b8 	.word	0x080201b8
 800f928:	080201c4 	.word	0x080201c4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f930:	2b04      	cmp	r3, #4
 800f932:	d009      	beq.n	800f948 <dhcp_parse_reply+0x348>
 800f934:	4b93      	ldr	r3, [pc, #588]	; (800fb84 <dhcp_parse_reply+0x584>)
 800f936:	f240 6261 	movw	r2, #1633	; 0x661
 800f93a:	4993      	ldr	r1, [pc, #588]	; (800fb88 <dhcp_parse_reply+0x588>)
 800f93c:	4893      	ldr	r0, [pc, #588]	; (800fb8c <dhcp_parse_reply+0x58c>)
 800f93e:	f00c fd59 	bl	801c3f4 <iprintf>
 800f942:	f06f 0305 	mvn.w	r3, #5
 800f946:	e119      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f948:	2305      	movs	r3, #5
 800f94a:	623b      	str	r3, [r7, #32]
        break;
 800f94c:	e003      	b.n	800f956 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f954:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d103      	bne.n	800f964 <dhcp_parse_reply+0x364>
      offset++;
 800f95c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f95e:	3301      	adds	r3, #1
 800f960:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f962:	e0a1      	b.n	800faa8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f964:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f96a:	4413      	add	r3, r2
 800f96c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f970:	4293      	cmp	r3, r2
 800f972:	dd02      	ble.n	800f97a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800f974:	f06f 0301 	mvn.w	r3, #1
 800f978:	e100      	b.n	800fb7c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800f97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f97e:	b29a      	uxth	r2, r3
 800f980:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f982:	4413      	add	r3, r2
 800f984:	b29b      	uxth	r3, r3
 800f986:	3302      	adds	r3, #2
 800f988:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f98a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 808a 	beq.w	800faa8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f998:	6a3b      	ldr	r3, [r7, #32]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	db02      	blt.n	800f9a4 <dhcp_parse_reply+0x3a4>
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	2b07      	cmp	r3, #7
 800f9a2:	dd06      	ble.n	800f9b2 <dhcp_parse_reply+0x3b2>
 800f9a4:	4b77      	ldr	r3, [pc, #476]	; (800fb84 <dhcp_parse_reply+0x584>)
 800f9a6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f9aa:	4979      	ldr	r1, [pc, #484]	; (800fb90 <dhcp_parse_reply+0x590>)
 800f9ac:	4877      	ldr	r0, [pc, #476]	; (800fb8c <dhcp_parse_reply+0x58c>)
 800f9ae:	f00c fd21 	bl	801c3f4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f9b2:	4a78      	ldr	r2, [pc, #480]	; (800fb94 <dhcp_parse_reply+0x594>)
 800f9b4:	6a3b      	ldr	r3, [r7, #32]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d174      	bne.n	800faa8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800f9be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9c2:	2b04      	cmp	r3, #4
 800f9c4:	bf28      	it	cs
 800f9c6:	2304      	movcs	r3, #4
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f9cc:	8bfb      	ldrh	r3, [r7, #30]
 800f9ce:	8aba      	ldrh	r2, [r7, #20]
 800f9d0:	f107 0108 	add.w	r1, r7, #8
 800f9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9d6:	f004 fd67 	bl	80144a8 <pbuf_copy_partial>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	461a      	mov	r2, r3
 800f9de:	8abb      	ldrh	r3, [r7, #20]
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d002      	beq.n	800f9ea <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800f9e4:	f06f 0301 	mvn.w	r3, #1
 800f9e8:	e0c8      	b.n	800fb7c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800f9ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	d933      	bls.n	800fa5a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f9f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9f6:	f003 0303 	and.w	r3, r3, #3
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <dhcp_parse_reply+0x414>
 800fa00:	4b60      	ldr	r3, [pc, #384]	; (800fb84 <dhcp_parse_reply+0x584>)
 800fa02:	f240 6281 	movw	r2, #1665	; 0x681
 800fa06:	4964      	ldr	r1, [pc, #400]	; (800fb98 <dhcp_parse_reply+0x598>)
 800fa08:	4860      	ldr	r0, [pc, #384]	; (800fb8c <dhcp_parse_reply+0x58c>)
 800fa0a:	f00c fcf3 	bl	801c3f4 <iprintf>
 800fa0e:	f06f 0305 	mvn.w	r3, #5
 800fa12:	e0b3      	b.n	800fb7c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800fa14:	4a5f      	ldr	r2, [pc, #380]	; (800fb94 <dhcp_parse_reply+0x594>)
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	4413      	add	r3, r2
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fe fc0c 	bl	800e23e <lwip_htonl>
 800fa26:	4602      	mov	r2, r0
 800fa28:	495c      	ldr	r1, [pc, #368]	; (800fb9c <dhcp_parse_reply+0x59c>)
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800fa30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa34:	3b04      	subs	r3, #4
 800fa36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800fa3a:	8bfb      	ldrh	r3, [r7, #30]
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800fa40:	8a7a      	ldrh	r2, [r7, #18]
 800fa42:	8bfb      	ldrh	r3, [r7, #30]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d202      	bcs.n	800fa4e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800fa48:	f06f 0301 	mvn.w	r3, #1
 800fa4c:	e096      	b.n	800fb7c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800fa4e:	8a7b      	ldrh	r3, [r7, #18]
 800fa50:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800fa52:	6a3b      	ldr	r3, [r7, #32]
 800fa54:	3301      	adds	r3, #1
 800fa56:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800fa58:	e79e      	b.n	800f998 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800fa5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa5e:	2b04      	cmp	r3, #4
 800fa60:	d106      	bne.n	800fa70 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fe fbea 	bl	800e23e <lwip_htonl>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	60bb      	str	r3, [r7, #8]
 800fa6e:	e011      	b.n	800fa94 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fa70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d009      	beq.n	800fa8c <dhcp_parse_reply+0x48c>
 800fa78:	4b42      	ldr	r3, [pc, #264]	; (800fb84 <dhcp_parse_reply+0x584>)
 800fa7a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800fa7e:	4948      	ldr	r1, [pc, #288]	; (800fba0 <dhcp_parse_reply+0x5a0>)
 800fa80:	4842      	ldr	r0, [pc, #264]	; (800fb8c <dhcp_parse_reply+0x58c>)
 800fa82:	f00c fcb7 	bl	801c3f4 <iprintf>
 800fa86:	f06f 0305 	mvn.w	r3, #5
 800fa8a:	e077      	b.n	800fb7c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800fa8c:	f107 0308 	add.w	r3, r7, #8
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800fa94:	4a3f      	ldr	r2, [pc, #252]	; (800fb94 <dhcp_parse_reply+0x594>)
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	4413      	add	r3, r2
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	493e      	ldr	r1, [pc, #248]	; (800fb9c <dhcp_parse_reply+0x59c>)
 800faa2:	6a3b      	ldr	r3, [r7, #32]
 800faa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800faa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faaa:	895b      	ldrh	r3, [r3, #10]
 800faac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800faae:	429a      	cmp	r2, r3
 800fab0:	d324      	bcc.n	800fafc <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800fab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab4:	895b      	ldrh	r3, [r3, #10]
 800fab6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800fabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabe:	895b      	ldrh	r3, [r3, #10]
 800fac0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800fac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fac8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800faca:	429a      	cmp	r2, r3
 800facc:	d213      	bcs.n	800faf6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d109      	bne.n	800faee <dhcp_parse_reply+0x4ee>
 800fada:	4b2a      	ldr	r3, [pc, #168]	; (800fb84 <dhcp_parse_reply+0x584>)
 800fadc:	f240 629d 	movw	r2, #1693	; 0x69d
 800fae0:	4930      	ldr	r1, [pc, #192]	; (800fba4 <dhcp_parse_reply+0x5a4>)
 800fae2:	482a      	ldr	r0, [pc, #168]	; (800fb8c <dhcp_parse_reply+0x58c>)
 800fae4:	f00c fc86 	bl	801c3f4 <iprintf>
 800fae8:	f06f 0305 	mvn.w	r3, #5
 800faec:	e046      	b.n	800fb7c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faf4:	e002      	b.n	800fafc <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800faf6:	f06f 0301 	mvn.w	r3, #1
 800fafa:	e03f      	b.n	800fb7c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00a      	beq.n	800fb18 <dhcp_parse_reply+0x518>
 800fb02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d206      	bcs.n	800fb18 <dhcp_parse_reply+0x518>
 800fb0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb0e:	4413      	add	r3, r2
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2bff      	cmp	r3, #255	; 0xff
 800fb14:	f47f adb7 	bne.w	800f686 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800fb18:	4b1e      	ldr	r3, [pc, #120]	; (800fb94 <dhcp_parse_reply+0x594>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d018      	beq.n	800fb52 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fb20:	4b1e      	ldr	r3, [pc, #120]	; (800fb9c <dhcp_parse_reply+0x59c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fb26:	4b1b      	ldr	r3, [pc, #108]	; (800fb94 <dhcp_parse_reply+0x594>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d102      	bne.n	800fb38 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800fb32:	2301      	movs	r3, #1
 800fb34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb36:	e00c      	b.n	800fb52 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d102      	bne.n	800fb44 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb42:	e006      	b.n	800fb52 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d103      	bne.n	800fb52 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800fb5c:	236c      	movs	r3, #108	; 0x6c
 800fb5e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800fb60:	23ec      	movs	r3, #236	; 0xec
 800fb62:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800fb64:	e569      	b.n	800f63a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800fb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d006      	beq.n	800fb7a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800fb70:	232c      	movs	r3, #44	; 0x2c
 800fb72:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fb74:	236c      	movs	r3, #108	; 0x6c
 800fb76:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800fb78:	e55f      	b.n	800f63a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3740      	adds	r7, #64	; 0x40
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0801fef4 	.word	0x0801fef4
 800fb88:	08020198 	.word	0x08020198
 800fb8c:	0801ff70 	.word	0x0801ff70
 800fb90:	080201dc 	.word	0x080201dc
 800fb94:	240048c8 	.word	0x240048c8
 800fb98:	080201f0 	.word	0x080201f0
 800fb9c:	240048d0 	.word	0x240048d0
 800fba0:	08020208 	.word	0x08020208
 800fba4:	0802021c 	.word	0x0802021c

0800fba8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b08a      	sub	sp, #40	; 0x28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fbb6:	4b60      	ldr	r3, [pc, #384]	; (800fd38 <dhcp_recv+0x190>)
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 809d 	beq.w	800fd0a <dhcp_recv+0x162>
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	791b      	ldrb	r3, [r3, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f000 8098 	beq.w	800fd0a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	895b      	ldrh	r3, [r3, #10]
 800fbde:	2b2b      	cmp	r3, #43	; 0x2b
 800fbe0:	f240 8095 	bls.w	800fd0e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	f040 8092 	bne.w	800fd12 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbf4:	e012      	b.n	800fc1c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbfa:	6a3a      	ldr	r2, [r7, #32]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc06:	69b9      	ldr	r1, [r7, #24]
 800fc08:	440b      	add	r3, r1
 800fc0a:	7f1b      	ldrb	r3, [r3, #28]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	f040 8082 	bne.w	800fd16 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc16:	3301      	adds	r3, #1
 800fc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc1c:	6a3b      	ldr	r3, [r7, #32]
 800fc1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d203      	bcs.n	800fc32 <dhcp_recv+0x8a>
 800fc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc2e:	2b05      	cmp	r3, #5
 800fc30:	d9e1      	bls.n	800fbf6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fe fb01 	bl	800e23e <lwip_htonl>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d169      	bne.n	800fd1a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800fc46:	69f9      	ldr	r1, [r7, #28]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff fcd9 	bl	800f600 <dhcp_parse_reply>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d164      	bne.n	800fd1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fc54:	4b39      	ldr	r3, [pc, #228]	; (800fd3c <dhcp_recv+0x194>)
 800fc56:	785b      	ldrb	r3, [r3, #1]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d062      	beq.n	800fd22 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fc62:	4b37      	ldr	r3, [pc, #220]	; (800fd40 <dhcp_recv+0x198>)
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fc68:	7cfb      	ldrb	r3, [r7, #19]
 800fc6a:	2b05      	cmp	r3, #5
 800fc6c:	d12a      	bne.n	800fcc4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	795b      	ldrb	r3, [r3, #5]
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d112      	bne.n	800fc9c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800fc76:	6979      	ldr	r1, [r7, #20]
 800fc78:	6a38      	ldr	r0, [r7, #32]
 800fc7a:	f7fe fe17 	bl	800e8ac <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fc84:	f003 0308 	and.w	r3, r3, #8
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d003      	beq.n	800fc94 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800fc8c:	6a38      	ldr	r0, [r7, #32]
 800fc8e:	f7fe fb85 	bl	800e39c <dhcp_check>
 800fc92:	e049      	b.n	800fd28 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800fc94:	6a38      	ldr	r0, [r7, #32]
 800fc96:	f7ff f867 	bl	800ed68 <dhcp_bind>
 800fc9a:	e045      	b.n	800fd28 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	795b      	ldrb	r3, [r3, #5]
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d007      	beq.n	800fcb4 <dhcp_recv+0x10c>
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	795b      	ldrb	r3, [r3, #5]
 800fca8:	2b04      	cmp	r3, #4
 800fcaa:	d003      	beq.n	800fcb4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fcb0:	2b05      	cmp	r3, #5
 800fcb2:	d139      	bne.n	800fd28 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800fcb4:	6979      	ldr	r1, [r7, #20]
 800fcb6:	6a38      	ldr	r0, [r7, #32]
 800fcb8:	f7fe fdf8 	bl	800e8ac <dhcp_handle_ack>
      dhcp_bind(netif);
 800fcbc:	6a38      	ldr	r0, [r7, #32]
 800fcbe:	f7ff f853 	bl	800ed68 <dhcp_bind>
 800fcc2:	e031      	b.n	800fd28 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fcc4:	7cfb      	ldrb	r3, [r7, #19]
 800fcc6:	2b06      	cmp	r3, #6
 800fcc8:	d113      	bne.n	800fcf2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800fcce:	2b03      	cmp	r3, #3
 800fcd0:	d00b      	beq.n	800fcea <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	795b      	ldrb	r3, [r3, #5]
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d007      	beq.n	800fcea <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fcde:	2b04      	cmp	r3, #4
 800fce0:	d003      	beq.n	800fcea <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	795b      	ldrb	r3, [r3, #5]
 800fce6:	2b05      	cmp	r3, #5
 800fce8:	d103      	bne.n	800fcf2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fcea:	6a38      	ldr	r0, [r7, #32]
 800fcec:	f7fe fb3c 	bl	800e368 <dhcp_handle_nak>
 800fcf0:	e01a      	b.n	800fd28 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fcf2:	7cfb      	ldrb	r3, [r7, #19]
 800fcf4:	2b02      	cmp	r3, #2
 800fcf6:	d116      	bne.n	800fd26 <dhcp_recv+0x17e>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	795b      	ldrb	r3, [r3, #5]
 800fcfc:	2b06      	cmp	r3, #6
 800fcfe:	d112      	bne.n	800fd26 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800fd00:	6979      	ldr	r1, [r7, #20]
 800fd02:	6a38      	ldr	r0, [r7, #32]
 800fd04:	f7fe fb7e 	bl	800e404 <dhcp_handle_offer>
 800fd08:	e00e      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd0a:	bf00      	nop
 800fd0c:	e00c      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd0e:	bf00      	nop
 800fd10:	e00a      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd12:	bf00      	nop
 800fd14:	e008      	b.n	800fd28 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800fd16:	bf00      	nop
 800fd18:	e006      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd1a:	bf00      	nop
 800fd1c:	e004      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd1e:	bf00      	nop
 800fd20:	e002      	b.n	800fd28 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fd22:	bf00      	nop
 800fd24:	e000      	b.n	800fd28 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800fd26:	bf00      	nop
  pbuf_free(p);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f004 f9b7 	bl	801409c <pbuf_free>
}
 800fd2e:	bf00      	nop
 800fd30:	3728      	adds	r7, #40	; 0x28
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	240048f0 	.word	0x240048f0
 800fd3c:	240048c8 	.word	0x240048c8
 800fd40:	240048d0 	.word	0x240048d0

0800fd44 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b088      	sub	sp, #32
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	4613      	mov	r3, r2
 800fd52:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d108      	bne.n	800fd6c <dhcp_create_msg+0x28>
 800fd5a:	4b5f      	ldr	r3, [pc, #380]	; (800fed8 <dhcp_create_msg+0x194>)
 800fd5c:	f240 7269 	movw	r2, #1897	; 0x769
 800fd60:	495e      	ldr	r1, [pc, #376]	; (800fedc <dhcp_create_msg+0x198>)
 800fd62:	485f      	ldr	r0, [pc, #380]	; (800fee0 <dhcp_create_msg+0x19c>)
 800fd64:	f00c fb46 	bl	801c3f4 <iprintf>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	e0b1      	b.n	800fed0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d108      	bne.n	800fd84 <dhcp_create_msg+0x40>
 800fd72:	4b59      	ldr	r3, [pc, #356]	; (800fed8 <dhcp_create_msg+0x194>)
 800fd74:	f240 726a 	movw	r2, #1898	; 0x76a
 800fd78:	495a      	ldr	r1, [pc, #360]	; (800fee4 <dhcp_create_msg+0x1a0>)
 800fd7a:	4859      	ldr	r0, [pc, #356]	; (800fee0 <dhcp_create_msg+0x19c>)
 800fd7c:	f00c fb3a 	bl	801c3f4 <iprintf>
 800fd80:	2300      	movs	r3, #0
 800fd82:	e0a5      	b.n	800fed0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fd84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd88:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fd8c:	2036      	movs	r0, #54	; 0x36
 800fd8e:	f003 fea1 	bl	8013ad4 <pbuf_alloc>
 800fd92:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d101      	bne.n	800fd9e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	e098      	b.n	800fed0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	895b      	ldrh	r3, [r3, #10]
 800fda2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fda6:	d206      	bcs.n	800fdb6 <dhcp_create_msg+0x72>
 800fda8:	4b4b      	ldr	r3, [pc, #300]	; (800fed8 <dhcp_create_msg+0x194>)
 800fdaa:	f240 7271 	movw	r2, #1905	; 0x771
 800fdae:	494e      	ldr	r1, [pc, #312]	; (800fee8 <dhcp_create_msg+0x1a4>)
 800fdb0:	484b      	ldr	r0, [pc, #300]	; (800fee0 <dhcp_create_msg+0x19c>)
 800fdb2:	f00c fb1f 	bl	801c3f4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d103      	bne.n	800fdc4 <dhcp_create_msg+0x80>
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	795b      	ldrb	r3, [r3, #5]
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d10d      	bne.n	800fde0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	799b      	ldrb	r3, [r3, #6]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fdcc:	f00c fb2a 	bl	801c424 <rand>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	4b45      	ldr	r3, [pc, #276]	; (800feec <dhcp_create_msg+0x1a8>)
 800fdd6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fdd8:	4b44      	ldr	r3, [pc, #272]	; (800feec <dhcp_create_msg+0x1a8>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fde6:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fdea:	2100      	movs	r1, #0
 800fdec:	6978      	ldr	r0, [r7, #20]
 800fdee:	f00b feb7 	bl	801bb60 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fe fa16 	bl	800e23e <lwip_htonl>
 800fe12:	4602      	mov	r2, r0
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	2b08      	cmp	r3, #8
 800fe1c:	d010      	beq.n	800fe40 <dhcp_create_msg+0xfc>
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	d00d      	beq.n	800fe40 <dhcp_create_msg+0xfc>
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	2b07      	cmp	r3, #7
 800fe28:	d00a      	beq.n	800fe40 <dhcp_create_msg+0xfc>
 800fe2a:	79fb      	ldrb	r3, [r7, #7]
 800fe2c:	2b03      	cmp	r3, #3
 800fe2e:	d10c      	bne.n	800fe4a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800fe34:	2b05      	cmp	r3, #5
 800fe36:	d003      	beq.n	800fe40 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	795b      	ldrb	r3, [r3, #5]
 800fe3c:	2b04      	cmp	r3, #4
 800fe3e:	d104      	bne.n	800fe4a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	3304      	adds	r3, #4
 800fe44:	681a      	ldr	r2, [r3, #0]
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	83fb      	strh	r3, [r7, #30]
 800fe4e:	e00c      	b.n	800fe6a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800fe50:	8bfa      	ldrh	r2, [r7, #30]
 800fe52:	8bfb      	ldrh	r3, [r7, #30]
 800fe54:	68f9      	ldr	r1, [r7, #12]
 800fe56:	440a      	add	r2, r1
 800fe58:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4413      	add	r3, r2
 800fe60:	460a      	mov	r2, r1
 800fe62:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fe64:	8bfb      	ldrh	r3, [r7, #30]
 800fe66:	3301      	adds	r3, #1
 800fe68:	83fb      	strh	r3, [r7, #30]
 800fe6a:	8bfb      	ldrh	r3, [r7, #30]
 800fe6c:	2b05      	cmp	r3, #5
 800fe6e:	d9ef      	bls.n	800fe50 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fe78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fe82:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fe86:	2200      	movs	r2, #0
 800fe88:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fe8c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800fe90:	2200      	movs	r2, #0
 800fe92:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fe96:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fea0:	2301      	movs	r3, #1
 800fea2:	2235      	movs	r2, #53	; 0x35
 800fea4:	2000      	movs	r0, #0
 800fea6:	f7ff fadb 	bl	800f460 <dhcp_option>
 800feaa:	4603      	mov	r3, r0
 800feac:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800feb4:	79fa      	ldrb	r2, [r7, #7]
 800feb6:	8a7b      	ldrh	r3, [r7, #18]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7ff fb05 	bl	800f4c8 <dhcp_option_byte>
 800febe:	4603      	mov	r3, r0
 800fec0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	8a7a      	ldrh	r2, [r7, #18]
 800fecc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800fece:	69bb      	ldr	r3, [r7, #24]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3720      	adds	r7, #32
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0801fef4 	.word	0x0801fef4
 800fedc:	08020230 	.word	0x08020230
 800fee0:	0801ff70 	.word	0x0801ff70
 800fee4:	08020250 	.word	0x08020250
 800fee8:	08020270 	.word	0x08020270
 800feec:	240041e0 	.word	0x240041e0

0800fef0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	607a      	str	r2, [r7, #4]
 800fefc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800fefe:	89fb      	ldrh	r3, [r7, #14]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	81fa      	strh	r2, [r7, #14]
 800ff04:	461a      	mov	r2, r3
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	4413      	add	r3, r2
 800ff0a:	22ff      	movs	r2, #255	; 0xff
 800ff0c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ff0e:	e007      	b.n	800ff20 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800ff10:	89fb      	ldrh	r3, [r7, #14]
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	81fa      	strh	r2, [r7, #14]
 800ff16:	461a      	mov	r2, r3
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ff20:	89fb      	ldrh	r3, [r7, #14]
 800ff22:	2b43      	cmp	r3, #67	; 0x43
 800ff24:	d904      	bls.n	800ff30 <dhcp_option_trailer+0x40>
 800ff26:	89fb      	ldrh	r3, [r7, #14]
 800ff28:	f003 0303 	and.w	r3, r3, #3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <dhcp_option_trailer+0x46>
 800ff30:	89fb      	ldrh	r3, [r7, #14]
 800ff32:	2b43      	cmp	r3, #67	; 0x43
 800ff34:	d9ec      	bls.n	800ff10 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800ff36:	89fb      	ldrh	r3, [r7, #14]
 800ff38:	33f0      	adds	r3, #240	; 0xf0
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f003 ff26 	bl	8013d90 <pbuf_realloc>
}
 800ff44:	bf00      	nop
 800ff46:	3710      	adds	r7, #16
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d017      	beq.n	800ff8a <dhcp_supplied_address+0x3e>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d013      	beq.n	800ff8a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff66:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	795b      	ldrb	r3, [r3, #5]
 800ff6c:	2b0a      	cmp	r3, #10
 800ff6e:	d007      	beq.n	800ff80 <dhcp_supplied_address+0x34>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	795b      	ldrb	r3, [r3, #5]
 800ff74:	2b05      	cmp	r3, #5
 800ff76:	d003      	beq.n	800ff80 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d101      	bne.n	800ff84 <dhcp_supplied_address+0x38>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e000      	b.n	800ff86 <dhcp_supplied_address+0x3a>
 800ff84:	2300      	movs	r3, #0
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	e000      	b.n	800ff8c <dhcp_supplied_address+0x40>
  }
  return 0;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ffa0:	4915      	ldr	r1, [pc, #84]	; (800fff8 <etharp_free_entry+0x60>)
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	00db      	lsls	r3, r3, #3
 800ffac:	440b      	add	r3, r1
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d013      	beq.n	800ffdc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ffb4:	4910      	ldr	r1, [pc, #64]	; (800fff8 <etharp_free_entry+0x60>)
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	4413      	add	r3, r2
 800ffbe:	00db      	lsls	r3, r3, #3
 800ffc0:	440b      	add	r3, r1
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f004 f869 	bl	801409c <pbuf_free>
    arp_table[i].q = NULL;
 800ffca:	490b      	ldr	r1, [pc, #44]	; (800fff8 <etharp_free_entry+0x60>)
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	4413      	add	r3, r2
 800ffd4:	00db      	lsls	r3, r3, #3
 800ffd6:	440b      	add	r3, r1
 800ffd8:	2200      	movs	r2, #0
 800ffda:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ffdc:	4906      	ldr	r1, [pc, #24]	; (800fff8 <etharp_free_entry+0x60>)
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	00db      	lsls	r3, r3, #3
 800ffe8:	440b      	add	r3, r1
 800ffea:	3314      	adds	r3, #20
 800ffec:	2200      	movs	r2, #0
 800ffee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	240041e4 	.word	0x240041e4

0800fffc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010002:	2300      	movs	r3, #0
 8010004:	607b      	str	r3, [r7, #4]
 8010006:	e096      	b.n	8010136 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010008:	494f      	ldr	r1, [pc, #316]	; (8010148 <etharp_tmr+0x14c>)
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4613      	mov	r3, r2
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	4413      	add	r3, r2
 8010012:	00db      	lsls	r3, r3, #3
 8010014:	440b      	add	r3, r1
 8010016:	3314      	adds	r3, #20
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801001c:	78fb      	ldrb	r3, [r7, #3]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 8086 	beq.w	8010130 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010024:	4948      	ldr	r1, [pc, #288]	; (8010148 <etharp_tmr+0x14c>)
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	4613      	mov	r3, r2
 801002a:	005b      	lsls	r3, r3, #1
 801002c:	4413      	add	r3, r2
 801002e:	00db      	lsls	r3, r3, #3
 8010030:	440b      	add	r3, r1
 8010032:	3312      	adds	r3, #18
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	b298      	uxth	r0, r3
 801003a:	4943      	ldr	r1, [pc, #268]	; (8010148 <etharp_tmr+0x14c>)
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	4613      	mov	r3, r2
 8010040:	005b      	lsls	r3, r3, #1
 8010042:	4413      	add	r3, r2
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	440b      	add	r3, r1
 8010048:	3312      	adds	r3, #18
 801004a:	4602      	mov	r2, r0
 801004c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801004e:	493e      	ldr	r1, [pc, #248]	; (8010148 <etharp_tmr+0x14c>)
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	00db      	lsls	r3, r3, #3
 801005a:	440b      	add	r3, r1
 801005c:	3312      	adds	r3, #18
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010064:	d215      	bcs.n	8010092 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010066:	4938      	ldr	r1, [pc, #224]	; (8010148 <etharp_tmr+0x14c>)
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	4613      	mov	r3, r2
 801006c:	005b      	lsls	r3, r3, #1
 801006e:	4413      	add	r3, r2
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	440b      	add	r3, r1
 8010074:	3314      	adds	r3, #20
 8010076:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010078:	2b01      	cmp	r3, #1
 801007a:	d10e      	bne.n	801009a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801007c:	4932      	ldr	r1, [pc, #200]	; (8010148 <etharp_tmr+0x14c>)
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	4613      	mov	r3, r2
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	4413      	add	r3, r2
 8010086:	00db      	lsls	r3, r3, #3
 8010088:	440b      	add	r3, r1
 801008a:	3312      	adds	r3, #18
 801008c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801008e:	2b04      	cmp	r3, #4
 8010090:	d903      	bls.n	801009a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7ff ff80 	bl	800ff98 <etharp_free_entry>
 8010098:	e04a      	b.n	8010130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801009a:	492b      	ldr	r1, [pc, #172]	; (8010148 <etharp_tmr+0x14c>)
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	4613      	mov	r3, r2
 80100a0:	005b      	lsls	r3, r3, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	00db      	lsls	r3, r3, #3
 80100a6:	440b      	add	r3, r1
 80100a8:	3314      	adds	r3, #20
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d10a      	bne.n	80100c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80100b0:	4925      	ldr	r1, [pc, #148]	; (8010148 <etharp_tmr+0x14c>)
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	4613      	mov	r3, r2
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	4413      	add	r3, r2
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	440b      	add	r3, r1
 80100be:	3314      	adds	r3, #20
 80100c0:	2204      	movs	r2, #4
 80100c2:	701a      	strb	r2, [r3, #0]
 80100c4:	e034      	b.n	8010130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80100c6:	4920      	ldr	r1, [pc, #128]	; (8010148 <etharp_tmr+0x14c>)
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	4613      	mov	r3, r2
 80100cc:	005b      	lsls	r3, r3, #1
 80100ce:	4413      	add	r3, r2
 80100d0:	00db      	lsls	r3, r3, #3
 80100d2:	440b      	add	r3, r1
 80100d4:	3314      	adds	r3, #20
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2b04      	cmp	r3, #4
 80100da:	d10a      	bne.n	80100f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80100dc:	491a      	ldr	r1, [pc, #104]	; (8010148 <etharp_tmr+0x14c>)
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	4613      	mov	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	4413      	add	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	440b      	add	r3, r1
 80100ea:	3314      	adds	r3, #20
 80100ec:	2202      	movs	r2, #2
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	e01e      	b.n	8010130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80100f2:	4915      	ldr	r1, [pc, #84]	; (8010148 <etharp_tmr+0x14c>)
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	4613      	mov	r3, r2
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	4413      	add	r3, r2
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	440b      	add	r3, r1
 8010100:	3314      	adds	r3, #20
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d113      	bne.n	8010130 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010108:	490f      	ldr	r1, [pc, #60]	; (8010148 <etharp_tmr+0x14c>)
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	4613      	mov	r3, r2
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	4413      	add	r3, r2
 8010112:	00db      	lsls	r3, r3, #3
 8010114:	440b      	add	r3, r1
 8010116:	3308      	adds	r3, #8
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	4613      	mov	r3, r2
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	4413      	add	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	4a08      	ldr	r2, [pc, #32]	; (8010148 <etharp_tmr+0x14c>)
 8010126:	4413      	add	r3, r2
 8010128:	3304      	adds	r3, #4
 801012a:	4619      	mov	r1, r3
 801012c:	f000 fe72 	bl	8010e14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3301      	adds	r3, #1
 8010134:	607b      	str	r3, [r7, #4]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b09      	cmp	r3, #9
 801013a:	f77f af65 	ble.w	8010008 <etharp_tmr+0xc>
      }
    }
  }
}
 801013e:	bf00      	nop
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	240041e4 	.word	0x240041e4

0801014c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b08a      	sub	sp, #40	; 0x28
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	460b      	mov	r3, r1
 8010156:	607a      	str	r2, [r7, #4]
 8010158:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801015a:	230a      	movs	r3, #10
 801015c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801015e:	230a      	movs	r3, #10
 8010160:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010162:	230a      	movs	r3, #10
 8010164:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801016a:	230a      	movs	r3, #10
 801016c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801016e:	2300      	movs	r3, #0
 8010170:	83bb      	strh	r3, [r7, #28]
 8010172:	2300      	movs	r3, #0
 8010174:	837b      	strh	r3, [r7, #26]
 8010176:	2300      	movs	r3, #0
 8010178:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801017a:	2300      	movs	r3, #0
 801017c:	843b      	strh	r3, [r7, #32]
 801017e:	e0ae      	b.n	80102de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010184:	49a6      	ldr	r1, [pc, #664]	; (8010420 <etharp_find_entry+0x2d4>)
 8010186:	4613      	mov	r3, r2
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	4413      	add	r3, r2
 801018c:	00db      	lsls	r3, r3, #3
 801018e:	440b      	add	r3, r1
 8010190:	3314      	adds	r3, #20
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801019a:	2b0a      	cmp	r3, #10
 801019c:	d105      	bne.n	80101aa <etharp_find_entry+0x5e>
 801019e:	7dfb      	ldrb	r3, [r7, #23]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d102      	bne.n	80101aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80101a4:	8c3b      	ldrh	r3, [r7, #32]
 80101a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80101a8:	e095      	b.n	80102d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80101aa:	7dfb      	ldrb	r3, [r7, #23]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f000 8092 	beq.w	80102d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d009      	beq.n	80101cc <etharp_find_entry+0x80>
 80101b8:	7dfb      	ldrb	r3, [r7, #23]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d806      	bhi.n	80101cc <etharp_find_entry+0x80>
 80101be:	4b99      	ldr	r3, [pc, #612]	; (8010424 <etharp_find_entry+0x2d8>)
 80101c0:	f240 1223 	movw	r2, #291	; 0x123
 80101c4:	4998      	ldr	r1, [pc, #608]	; (8010428 <etharp_find_entry+0x2dc>)
 80101c6:	4899      	ldr	r0, [pc, #612]	; (801042c <etharp_find_entry+0x2e0>)
 80101c8:	f00c f914 	bl	801c3f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d020      	beq.n	8010214 <etharp_find_entry+0xc8>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6819      	ldr	r1, [r3, #0]
 80101d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101da:	4891      	ldr	r0, [pc, #580]	; (8010420 <etharp_find_entry+0x2d4>)
 80101dc:	4613      	mov	r3, r2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	4413      	add	r3, r2
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	4403      	add	r3, r0
 80101e6:	3304      	adds	r3, #4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4299      	cmp	r1, r3
 80101ec:	d112      	bne.n	8010214 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00c      	beq.n	801020e <etharp_find_entry+0xc2>
 80101f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101f8:	4989      	ldr	r1, [pc, #548]	; (8010420 <etharp_find_entry+0x2d4>)
 80101fa:	4613      	mov	r3, r2
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4413      	add	r3, r2
 8010200:	00db      	lsls	r3, r3, #3
 8010202:	440b      	add	r3, r1
 8010204:	3308      	adds	r3, #8
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	429a      	cmp	r2, r3
 801020c:	d102      	bne.n	8010214 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801020e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010212:	e100      	b.n	8010416 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010214:	7dfb      	ldrb	r3, [r7, #23]
 8010216:	2b01      	cmp	r3, #1
 8010218:	d140      	bne.n	801029c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801021a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801021e:	4980      	ldr	r1, [pc, #512]	; (8010420 <etharp_find_entry+0x2d4>)
 8010220:	4613      	mov	r3, r2
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	4413      	add	r3, r2
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	440b      	add	r3, r1
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d01a      	beq.n	8010266 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010234:	497a      	ldr	r1, [pc, #488]	; (8010420 <etharp_find_entry+0x2d4>)
 8010236:	4613      	mov	r3, r2
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	4413      	add	r3, r2
 801023c:	00db      	lsls	r3, r3, #3
 801023e:	440b      	add	r3, r1
 8010240:	3312      	adds	r3, #18
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	8bba      	ldrh	r2, [r7, #28]
 8010246:	429a      	cmp	r2, r3
 8010248:	d845      	bhi.n	80102d6 <etharp_find_entry+0x18a>
            old_queue = i;
 801024a:	8c3b      	ldrh	r3, [r7, #32]
 801024c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801024e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010252:	4973      	ldr	r1, [pc, #460]	; (8010420 <etharp_find_entry+0x2d4>)
 8010254:	4613      	mov	r3, r2
 8010256:	005b      	lsls	r3, r3, #1
 8010258:	4413      	add	r3, r2
 801025a:	00db      	lsls	r3, r3, #3
 801025c:	440b      	add	r3, r1
 801025e:	3312      	adds	r3, #18
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	83bb      	strh	r3, [r7, #28]
 8010264:	e037      	b.n	80102d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801026a:	496d      	ldr	r1, [pc, #436]	; (8010420 <etharp_find_entry+0x2d4>)
 801026c:	4613      	mov	r3, r2
 801026e:	005b      	lsls	r3, r3, #1
 8010270:	4413      	add	r3, r2
 8010272:	00db      	lsls	r3, r3, #3
 8010274:	440b      	add	r3, r1
 8010276:	3312      	adds	r3, #18
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	8b7a      	ldrh	r2, [r7, #26]
 801027c:	429a      	cmp	r2, r3
 801027e:	d82a      	bhi.n	80102d6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010280:	8c3b      	ldrh	r3, [r7, #32]
 8010282:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010284:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010288:	4965      	ldr	r1, [pc, #404]	; (8010420 <etharp_find_entry+0x2d4>)
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	440b      	add	r3, r1
 8010294:	3312      	adds	r3, #18
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	837b      	strh	r3, [r7, #26]
 801029a:	e01c      	b.n	80102d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801029c:	7dfb      	ldrb	r3, [r7, #23]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d919      	bls.n	80102d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80102a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102a6:	495e      	ldr	r1, [pc, #376]	; (8010420 <etharp_find_entry+0x2d4>)
 80102a8:	4613      	mov	r3, r2
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	4413      	add	r3, r2
 80102ae:	00db      	lsls	r3, r3, #3
 80102b0:	440b      	add	r3, r1
 80102b2:	3312      	adds	r3, #18
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	8b3a      	ldrh	r2, [r7, #24]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d80c      	bhi.n	80102d6 <etharp_find_entry+0x18a>
            old_stable = i;
 80102bc:	8c3b      	ldrh	r3, [r7, #32]
 80102be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80102c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102c4:	4956      	ldr	r1, [pc, #344]	; (8010420 <etharp_find_entry+0x2d4>)
 80102c6:	4613      	mov	r3, r2
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4413      	add	r3, r2
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	440b      	add	r3, r1
 80102d0:	3312      	adds	r3, #18
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102d6:	8c3b      	ldrh	r3, [r7, #32]
 80102d8:	3301      	adds	r3, #1
 80102da:	b29b      	uxth	r3, r3
 80102dc:	843b      	strh	r3, [r7, #32]
 80102de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102e2:	2b09      	cmp	r3, #9
 80102e4:	f77f af4c 	ble.w	8010180 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80102e8:	7afb      	ldrb	r3, [r7, #11]
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d108      	bne.n	8010304 <etharp_find_entry+0x1b8>
 80102f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80102f6:	2b0a      	cmp	r3, #10
 80102f8:	d107      	bne.n	801030a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80102fa:	7afb      	ldrb	r3, [r7, #11]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d102      	bne.n	801030a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010304:	f04f 33ff 	mov.w	r3, #4294967295
 8010308:	e085      	b.n	8010416 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801030a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801030e:	2b09      	cmp	r3, #9
 8010310:	dc02      	bgt.n	8010318 <etharp_find_entry+0x1cc>
    i = empty;
 8010312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010314:	843b      	strh	r3, [r7, #32]
 8010316:	e039      	b.n	801038c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010318:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801031c:	2b09      	cmp	r3, #9
 801031e:	dc14      	bgt.n	801034a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010322:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010328:	493d      	ldr	r1, [pc, #244]	; (8010420 <etharp_find_entry+0x2d4>)
 801032a:	4613      	mov	r3, r2
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	4413      	add	r3, r2
 8010330:	00db      	lsls	r3, r3, #3
 8010332:	440b      	add	r3, r1
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d018      	beq.n	801036c <etharp_find_entry+0x220>
 801033a:	4b3a      	ldr	r3, [pc, #232]	; (8010424 <etharp_find_entry+0x2d8>)
 801033c:	f240 126d 	movw	r2, #365	; 0x16d
 8010340:	493b      	ldr	r1, [pc, #236]	; (8010430 <etharp_find_entry+0x2e4>)
 8010342:	483a      	ldr	r0, [pc, #232]	; (801042c <etharp_find_entry+0x2e0>)
 8010344:	f00c f856 	bl	801c3f4 <iprintf>
 8010348:	e010      	b.n	801036c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801034a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801034e:	2b09      	cmp	r3, #9
 8010350:	dc02      	bgt.n	8010358 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010354:	843b      	strh	r3, [r7, #32]
 8010356:	e009      	b.n	801036c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801035c:	2b09      	cmp	r3, #9
 801035e:	dc02      	bgt.n	8010366 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010360:	8bfb      	ldrh	r3, [r7, #30]
 8010362:	843b      	strh	r3, [r7, #32]
 8010364:	e002      	b.n	801036c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010366:	f04f 33ff 	mov.w	r3, #4294967295
 801036a:	e054      	b.n	8010416 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801036c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010370:	2b09      	cmp	r3, #9
 8010372:	dd06      	ble.n	8010382 <etharp_find_entry+0x236>
 8010374:	4b2b      	ldr	r3, [pc, #172]	; (8010424 <etharp_find_entry+0x2d8>)
 8010376:	f240 127f 	movw	r2, #383	; 0x17f
 801037a:	492e      	ldr	r1, [pc, #184]	; (8010434 <etharp_find_entry+0x2e8>)
 801037c:	482b      	ldr	r0, [pc, #172]	; (801042c <etharp_find_entry+0x2e0>)
 801037e:	f00c f839 	bl	801c3f4 <iprintf>
    etharp_free_entry(i);
 8010382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff fe06 	bl	800ff98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801038c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010390:	2b09      	cmp	r3, #9
 8010392:	dd06      	ble.n	80103a2 <etharp_find_entry+0x256>
 8010394:	4b23      	ldr	r3, [pc, #140]	; (8010424 <etharp_find_entry+0x2d8>)
 8010396:	f240 1283 	movw	r2, #387	; 0x183
 801039a:	4926      	ldr	r1, [pc, #152]	; (8010434 <etharp_find_entry+0x2e8>)
 801039c:	4823      	ldr	r0, [pc, #140]	; (801042c <etharp_find_entry+0x2e0>)
 801039e:	f00c f829 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80103a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103a6:	491e      	ldr	r1, [pc, #120]	; (8010420 <etharp_find_entry+0x2d4>)
 80103a8:	4613      	mov	r3, r2
 80103aa:	005b      	lsls	r3, r3, #1
 80103ac:	4413      	add	r3, r2
 80103ae:	00db      	lsls	r3, r3, #3
 80103b0:	440b      	add	r3, r1
 80103b2:	3314      	adds	r3, #20
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d006      	beq.n	80103c8 <etharp_find_entry+0x27c>
 80103ba:	4b1a      	ldr	r3, [pc, #104]	; (8010424 <etharp_find_entry+0x2d8>)
 80103bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80103c0:	491d      	ldr	r1, [pc, #116]	; (8010438 <etharp_find_entry+0x2ec>)
 80103c2:	481a      	ldr	r0, [pc, #104]	; (801042c <etharp_find_entry+0x2e0>)
 80103c4:	f00c f816 	bl	801c3f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00b      	beq.n	80103e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80103ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6819      	ldr	r1, [r3, #0]
 80103d6:	4812      	ldr	r0, [pc, #72]	; (8010420 <etharp_find_entry+0x2d4>)
 80103d8:	4613      	mov	r3, r2
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	4413      	add	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	4403      	add	r3, r0
 80103e2:	3304      	adds	r3, #4
 80103e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80103e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103ea:	490d      	ldr	r1, [pc, #52]	; (8010420 <etharp_find_entry+0x2d4>)
 80103ec:	4613      	mov	r3, r2
 80103ee:	005b      	lsls	r3, r3, #1
 80103f0:	4413      	add	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	440b      	add	r3, r1
 80103f6:	3312      	adds	r3, #18
 80103f8:	2200      	movs	r2, #0
 80103fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80103fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010400:	4907      	ldr	r1, [pc, #28]	; (8010420 <etharp_find_entry+0x2d4>)
 8010402:	4613      	mov	r3, r2
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	440b      	add	r3, r1
 801040c:	3308      	adds	r3, #8
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3728      	adds	r7, #40	; 0x28
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	240041e4 	.word	0x240041e4
 8010424:	080202b0 	.word	0x080202b0
 8010428:	08020308 	.word	0x08020308
 801042c:	08020348 	.word	0x08020348
 8010430:	08020370 	.word	0x08020370
 8010434:	08020388 	.word	0x08020388
 8010438:	0802039c 	.word	0x0802039c

0801043c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b088      	sub	sp, #32
 8010440:	af02      	add	r7, sp, #8
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
 8010448:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010450:	2b06      	cmp	r3, #6
 8010452:	d006      	beq.n	8010462 <etharp_update_arp_entry+0x26>
 8010454:	4b48      	ldr	r3, [pc, #288]	; (8010578 <etharp_update_arp_entry+0x13c>)
 8010456:	f240 12a9 	movw	r2, #425	; 0x1a9
 801045a:	4948      	ldr	r1, [pc, #288]	; (801057c <etharp_update_arp_entry+0x140>)
 801045c:	4848      	ldr	r0, [pc, #288]	; (8010580 <etharp_update_arp_entry+0x144>)
 801045e:	f00b ffc9 	bl	801c3f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d012      	beq.n	801048e <etharp_update_arp_entry+0x52>
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00e      	beq.n	801048e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68f9      	ldr	r1, [r7, #12]
 8010476:	4618      	mov	r0, r3
 8010478:	f001 fb38 	bl	8011aec <ip4_addr_isbroadcast_u32>
 801047c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801048a:	2be0      	cmp	r3, #224	; 0xe0
 801048c:	d102      	bne.n	8010494 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801048e:	f06f 030f 	mvn.w	r3, #15
 8010492:	e06c      	b.n	801056e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010494:	78fb      	ldrb	r3, [r7, #3]
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	4619      	mov	r1, r3
 801049a:	68b8      	ldr	r0, [r7, #8]
 801049c:	f7ff fe56 	bl	801014c <etharp_find_entry>
 80104a0:	4603      	mov	r3, r0
 80104a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80104a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	da02      	bge.n	80104b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80104ac:	8afb      	ldrh	r3, [r7, #22]
 80104ae:	b25b      	sxtb	r3, r3
 80104b0:	e05d      	b.n	801056e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80104b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104b6:	4933      	ldr	r1, [pc, #204]	; (8010584 <etharp_update_arp_entry+0x148>)
 80104b8:	4613      	mov	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	440b      	add	r3, r1
 80104c2:	3314      	adds	r3, #20
 80104c4:	2202      	movs	r2, #2
 80104c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80104c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104cc:	492d      	ldr	r1, [pc, #180]	; (8010584 <etharp_update_arp_entry+0x148>)
 80104ce:	4613      	mov	r3, r2
 80104d0:	005b      	lsls	r3, r3, #1
 80104d2:	4413      	add	r3, r2
 80104d4:	00db      	lsls	r3, r3, #3
 80104d6:	440b      	add	r3, r1
 80104d8:	3308      	adds	r3, #8
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80104de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104e2:	4613      	mov	r3, r2
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	4413      	add	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	3308      	adds	r3, #8
 80104ec:	4a25      	ldr	r2, [pc, #148]	; (8010584 <etharp_update_arp_entry+0x148>)
 80104ee:	4413      	add	r3, r2
 80104f0:	3304      	adds	r3, #4
 80104f2:	2206      	movs	r2, #6
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f00b fb0a 	bl	801bb10 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80104fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010500:	4920      	ldr	r1, [pc, #128]	; (8010584 <etharp_update_arp_entry+0x148>)
 8010502:	4613      	mov	r3, r2
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	4413      	add	r3, r2
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	440b      	add	r3, r1
 801050c:	3312      	adds	r3, #18
 801050e:	2200      	movs	r2, #0
 8010510:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010516:	491b      	ldr	r1, [pc, #108]	; (8010584 <etharp_update_arp_entry+0x148>)
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d021      	beq.n	801056c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010528:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801052c:	4915      	ldr	r1, [pc, #84]	; (8010584 <etharp_update_arp_entry+0x148>)
 801052e:	4613      	mov	r3, r2
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	4413      	add	r3, r2
 8010534:	00db      	lsls	r3, r3, #3
 8010536:	440b      	add	r3, r1
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801053c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010540:	4910      	ldr	r1, [pc, #64]	; (8010584 <etharp_update_arp_entry+0x148>)
 8010542:	4613      	mov	r3, r2
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	4413      	add	r3, r2
 8010548:	00db      	lsls	r3, r3, #3
 801054a:	440b      	add	r3, r1
 801054c:	2200      	movs	r2, #0
 801054e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6939      	ldr	r1, [r7, #16]
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f000 fcf7 	bl	8010f54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010566:	6938      	ldr	r0, [r7, #16]
 8010568:	f003 fd98 	bl	801409c <pbuf_free>
  }
  return ERR_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3718      	adds	r7, #24
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	080202b0 	.word	0x080202b0
 801057c:	080203c8 	.word	0x080203c8
 8010580:	08020348 	.word	0x08020348
 8010584:	240041e4 	.word	0x240041e4

08010588 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010590:	2300      	movs	r3, #0
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	e01e      	b.n	80105d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010596:	4913      	ldr	r1, [pc, #76]	; (80105e4 <etharp_cleanup_netif+0x5c>)
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	440b      	add	r3, r1
 80105a4:	3314      	adds	r3, #20
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80105aa:	7afb      	ldrb	r3, [r7, #11]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00e      	beq.n	80105ce <etharp_cleanup_netif+0x46>
 80105b0:	490c      	ldr	r1, [pc, #48]	; (80105e4 <etharp_cleanup_netif+0x5c>)
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	4613      	mov	r3, r2
 80105b6:	005b      	lsls	r3, r3, #1
 80105b8:	4413      	add	r3, r2
 80105ba:	00db      	lsls	r3, r3, #3
 80105bc:	440b      	add	r3, r1
 80105be:	3308      	adds	r3, #8
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d102      	bne.n	80105ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f7ff fce5 	bl	800ff98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3301      	adds	r3, #1
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b09      	cmp	r3, #9
 80105d8:	dddd      	ble.n	8010596 <etharp_cleanup_netif+0xe>
    }
  }
}
 80105da:	bf00      	nop
 80105dc:	bf00      	nop
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	240041e4 	.word	0x240041e4

080105e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80105e8:	b5b0      	push	{r4, r5, r7, lr}
 80105ea:	b08a      	sub	sp, #40	; 0x28
 80105ec:	af04      	add	r7, sp, #16
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d107      	bne.n	8010608 <etharp_input+0x20>
 80105f8:	4b3f      	ldr	r3, [pc, #252]	; (80106f8 <etharp_input+0x110>)
 80105fa:	f240 228a 	movw	r2, #650	; 0x28a
 80105fe:	493f      	ldr	r1, [pc, #252]	; (80106fc <etharp_input+0x114>)
 8010600:	483f      	ldr	r0, [pc, #252]	; (8010700 <etharp_input+0x118>)
 8010602:	f00b fef7 	bl	801c3f4 <iprintf>
 8010606:	e074      	b.n	80106f2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	881b      	ldrh	r3, [r3, #0]
 8010612:	b29b      	uxth	r3, r3
 8010614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010618:	d10c      	bne.n	8010634 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801061e:	2b06      	cmp	r3, #6
 8010620:	d108      	bne.n	8010634 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010626:	2b04      	cmp	r3, #4
 8010628:	d104      	bne.n	8010634 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	885b      	ldrh	r3, [r3, #2]
 801062e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010630:	2b08      	cmp	r3, #8
 8010632:	d003      	beq.n	801063c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f003 fd31 	bl	801409c <pbuf_free>
    return;
 801063a:	e05a      	b.n	80106f2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	330e      	adds	r3, #14
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	3318      	adds	r3, #24
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	3304      	adds	r3, #4
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d102      	bne.n	801065c <etharp_input+0x74>
    for_us = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	75fb      	strb	r3, [r7, #23]
 801065a:	e009      	b.n	8010670 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	3304      	adds	r3, #4
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	429a      	cmp	r2, r3
 8010666:	bf0c      	ite	eq
 8010668:	2301      	moveq	r3, #1
 801066a:	2300      	movne	r3, #0
 801066c:	b2db      	uxtb	r3, r3
 801066e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	f103 0208 	add.w	r2, r3, #8
 8010676:	7dfb      	ldrb	r3, [r7, #23]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <etharp_input+0x98>
 801067c:	2301      	movs	r3, #1
 801067e:	e000      	b.n	8010682 <etharp_input+0x9a>
 8010680:	2302      	movs	r3, #2
 8010682:	f107 010c 	add.w	r1, r7, #12
 8010686:	6838      	ldr	r0, [r7, #0]
 8010688:	f7ff fed8 	bl	801043c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	88db      	ldrh	r3, [r3, #6]
 8010690:	b29b      	uxth	r3, r3
 8010692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010696:	d003      	beq.n	80106a0 <etharp_input+0xb8>
 8010698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801069c:	d01e      	beq.n	80106dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801069e:	e025      	b.n	80106ec <etharp_input+0x104>
      if (for_us) {
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d021      	beq.n	80106ea <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80106bc:	693a      	ldr	r2, [r7, #16]
 80106be:	3208      	adds	r2, #8
        etharp_raw(netif,
 80106c0:	2102      	movs	r1, #2
 80106c2:	9103      	str	r1, [sp, #12]
 80106c4:	f107 010c 	add.w	r1, r7, #12
 80106c8:	9102      	str	r1, [sp, #8]
 80106ca:	9201      	str	r2, [sp, #4]
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	462b      	mov	r3, r5
 80106d0:	4622      	mov	r2, r4
 80106d2:	4601      	mov	r1, r0
 80106d4:	6838      	ldr	r0, [r7, #0]
 80106d6:	f000 faef 	bl	8010cb8 <etharp_raw>
      break;
 80106da:	e006      	b.n	80106ea <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80106dc:	f107 030c 	add.w	r3, r7, #12
 80106e0:	4619      	mov	r1, r3
 80106e2:	6838      	ldr	r0, [r7, #0]
 80106e4:	f7fe f9fc 	bl	800eae0 <dhcp_arp_reply>
      break;
 80106e8:	e000      	b.n	80106ec <etharp_input+0x104>
      break;
 80106ea:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f003 fcd5 	bl	801409c <pbuf_free>
}
 80106f2:	3718      	adds	r7, #24
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bdb0      	pop	{r4, r5, r7, pc}
 80106f8:	080202b0 	.word	0x080202b0
 80106fc:	08020420 	.word	0x08020420
 8010700:	08020348 	.word	0x08020348

08010704 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af02      	add	r7, sp, #8
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	4613      	mov	r3, r2
 8010710:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010712:	79fa      	ldrb	r2, [r7, #7]
 8010714:	4944      	ldr	r1, [pc, #272]	; (8010828 <etharp_output_to_arp_index+0x124>)
 8010716:	4613      	mov	r3, r2
 8010718:	005b      	lsls	r3, r3, #1
 801071a:	4413      	add	r3, r2
 801071c:	00db      	lsls	r3, r3, #3
 801071e:	440b      	add	r3, r1
 8010720:	3314      	adds	r3, #20
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d806      	bhi.n	8010736 <etharp_output_to_arp_index+0x32>
 8010728:	4b40      	ldr	r3, [pc, #256]	; (801082c <etharp_output_to_arp_index+0x128>)
 801072a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801072e:	4940      	ldr	r1, [pc, #256]	; (8010830 <etharp_output_to_arp_index+0x12c>)
 8010730:	4840      	ldr	r0, [pc, #256]	; (8010834 <etharp_output_to_arp_index+0x130>)
 8010732:	f00b fe5f 	bl	801c3f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010736:	79fa      	ldrb	r2, [r7, #7]
 8010738:	493b      	ldr	r1, [pc, #236]	; (8010828 <etharp_output_to_arp_index+0x124>)
 801073a:	4613      	mov	r3, r2
 801073c:	005b      	lsls	r3, r3, #1
 801073e:	4413      	add	r3, r2
 8010740:	00db      	lsls	r3, r3, #3
 8010742:	440b      	add	r3, r1
 8010744:	3314      	adds	r3, #20
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2b02      	cmp	r3, #2
 801074a:	d153      	bne.n	80107f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801074c:	79fa      	ldrb	r2, [r7, #7]
 801074e:	4936      	ldr	r1, [pc, #216]	; (8010828 <etharp_output_to_arp_index+0x124>)
 8010750:	4613      	mov	r3, r2
 8010752:	005b      	lsls	r3, r3, #1
 8010754:	4413      	add	r3, r2
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	440b      	add	r3, r1
 801075a:	3312      	adds	r3, #18
 801075c:	881b      	ldrh	r3, [r3, #0]
 801075e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010762:	d919      	bls.n	8010798 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010764:	79fa      	ldrb	r2, [r7, #7]
 8010766:	4613      	mov	r3, r2
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	00db      	lsls	r3, r3, #3
 801076e:	4a2e      	ldr	r2, [pc, #184]	; (8010828 <etharp_output_to_arp_index+0x124>)
 8010770:	4413      	add	r3, r2
 8010772:	3304      	adds	r3, #4
 8010774:	4619      	mov	r1, r3
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f000 fb4c 	bl	8010e14 <etharp_request>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d138      	bne.n	80107f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010782:	79fa      	ldrb	r2, [r7, #7]
 8010784:	4928      	ldr	r1, [pc, #160]	; (8010828 <etharp_output_to_arp_index+0x124>)
 8010786:	4613      	mov	r3, r2
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	4413      	add	r3, r2
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	440b      	add	r3, r1
 8010790:	3314      	adds	r3, #20
 8010792:	2203      	movs	r2, #3
 8010794:	701a      	strb	r2, [r3, #0]
 8010796:	e02d      	b.n	80107f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010798:	79fa      	ldrb	r2, [r7, #7]
 801079a:	4923      	ldr	r1, [pc, #140]	; (8010828 <etharp_output_to_arp_index+0x124>)
 801079c:	4613      	mov	r3, r2
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	4413      	add	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	440b      	add	r3, r1
 80107a6:	3312      	adds	r3, #18
 80107a8:	881b      	ldrh	r3, [r3, #0]
 80107aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80107ae:	d321      	bcc.n	80107f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80107b0:	79fa      	ldrb	r2, [r7, #7]
 80107b2:	4613      	mov	r3, r2
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	4413      	add	r3, r2
 80107b8:	00db      	lsls	r3, r3, #3
 80107ba:	4a1b      	ldr	r2, [pc, #108]	; (8010828 <etharp_output_to_arp_index+0x124>)
 80107bc:	4413      	add	r3, r2
 80107be:	1d19      	adds	r1, r3, #4
 80107c0:	79fa      	ldrb	r2, [r7, #7]
 80107c2:	4613      	mov	r3, r2
 80107c4:	005b      	lsls	r3, r3, #1
 80107c6:	4413      	add	r3, r2
 80107c8:	00db      	lsls	r3, r3, #3
 80107ca:	3308      	adds	r3, #8
 80107cc:	4a16      	ldr	r2, [pc, #88]	; (8010828 <etharp_output_to_arp_index+0x124>)
 80107ce:	4413      	add	r3, r2
 80107d0:	3304      	adds	r3, #4
 80107d2:	461a      	mov	r2, r3
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f000 fafb 	bl	8010dd0 <etharp_request_dst>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d109      	bne.n	80107f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80107e0:	79fa      	ldrb	r2, [r7, #7]
 80107e2:	4911      	ldr	r1, [pc, #68]	; (8010828 <etharp_output_to_arp_index+0x124>)
 80107e4:	4613      	mov	r3, r2
 80107e6:	005b      	lsls	r3, r3, #1
 80107e8:	4413      	add	r3, r2
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	440b      	add	r3, r1
 80107ee:	3314      	adds	r3, #20
 80107f0:	2203      	movs	r2, #3
 80107f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80107fa:	79fa      	ldrb	r2, [r7, #7]
 80107fc:	4613      	mov	r3, r2
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	4413      	add	r3, r2
 8010802:	00db      	lsls	r3, r3, #3
 8010804:	3308      	adds	r3, #8
 8010806:	4a08      	ldr	r2, [pc, #32]	; (8010828 <etharp_output_to_arp_index+0x124>)
 8010808:	4413      	add	r3, r2
 801080a:	3304      	adds	r3, #4
 801080c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010810:	9200      	str	r2, [sp, #0]
 8010812:	460a      	mov	r2, r1
 8010814:	68b9      	ldr	r1, [r7, #8]
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f000 fb9c 	bl	8010f54 <ethernet_output>
 801081c:	4603      	mov	r3, r0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	240041e4 	.word	0x240041e4
 801082c:	080202b0 	.word	0x080202b0
 8010830:	08020440 	.word	0x08020440
 8010834:	08020348 	.word	0x08020348

08010838 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	; 0x28
 801083c:	af02      	add	r7, sp, #8
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d106      	bne.n	801085c <etharp_output+0x24>
 801084e:	4b73      	ldr	r3, [pc, #460]	; (8010a1c <etharp_output+0x1e4>)
 8010850:	f240 321e 	movw	r2, #798	; 0x31e
 8010854:	4972      	ldr	r1, [pc, #456]	; (8010a20 <etharp_output+0x1e8>)
 8010856:	4873      	ldr	r0, [pc, #460]	; (8010a24 <etharp_output+0x1ec>)
 8010858:	f00b fdcc 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d106      	bne.n	8010870 <etharp_output+0x38>
 8010862:	4b6e      	ldr	r3, [pc, #440]	; (8010a1c <etharp_output+0x1e4>)
 8010864:	f240 321f 	movw	r2, #799	; 0x31f
 8010868:	496f      	ldr	r1, [pc, #444]	; (8010a28 <etharp_output+0x1f0>)
 801086a:	486e      	ldr	r0, [pc, #440]	; (8010a24 <etharp_output+0x1ec>)
 801086c:	f00b fdc2 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d106      	bne.n	8010884 <etharp_output+0x4c>
 8010876:	4b69      	ldr	r3, [pc, #420]	; (8010a1c <etharp_output+0x1e4>)
 8010878:	f44f 7248 	mov.w	r2, #800	; 0x320
 801087c:	496b      	ldr	r1, [pc, #428]	; (8010a2c <etharp_output+0x1f4>)
 801087e:	4869      	ldr	r0, [pc, #420]	; (8010a24 <etharp_output+0x1ec>)
 8010880:	f00b fdb8 	bl	801c3f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	68f9      	ldr	r1, [r7, #12]
 801088a:	4618      	mov	r0, r3
 801088c:	f001 f92e 	bl	8011aec <ip4_addr_isbroadcast_u32>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d002      	beq.n	801089c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010896:	4b66      	ldr	r3, [pc, #408]	; (8010a30 <etharp_output+0x1f8>)
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	e0af      	b.n	80109fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108a4:	2be0      	cmp	r3, #224	; 0xe0
 80108a6:	d118      	bne.n	80108da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80108a8:	2301      	movs	r3, #1
 80108aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80108ac:	2300      	movs	r3, #0
 80108ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80108b0:	235e      	movs	r3, #94	; 0x5e
 80108b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	3301      	adds	r3, #1
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	3302      	adds	r3, #2
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	3303      	adds	r3, #3
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80108d2:	f107 0310 	add.w	r3, r7, #16
 80108d6:	61fb      	str	r3, [r7, #28]
 80108d8:	e090      	b.n	80109fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	3304      	adds	r3, #4
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	405a      	eors	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3308      	adds	r3, #8
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4013      	ands	r3, r2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d012      	beq.n	8010918 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80108f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d00b      	beq.n	8010918 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	330c      	adds	r3, #12
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d003      	beq.n	8010912 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	330c      	adds	r3, #12
 801090e:	61bb      	str	r3, [r7, #24]
 8010910:	e002      	b.n	8010918 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010912:	f06f 0303 	mvn.w	r3, #3
 8010916:	e07d      	b.n	8010a14 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010918:	4b46      	ldr	r3, [pc, #280]	; (8010a34 <etharp_output+0x1fc>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	4619      	mov	r1, r3
 801091e:	4a46      	ldr	r2, [pc, #280]	; (8010a38 <etharp_output+0x200>)
 8010920:	460b      	mov	r3, r1
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	440b      	add	r3, r1
 8010926:	00db      	lsls	r3, r3, #3
 8010928:	4413      	add	r3, r2
 801092a:	3314      	adds	r3, #20
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d925      	bls.n	801097e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010932:	4b40      	ldr	r3, [pc, #256]	; (8010a34 <etharp_output+0x1fc>)
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	4619      	mov	r1, r3
 8010938:	4a3f      	ldr	r2, [pc, #252]	; (8010a38 <etharp_output+0x200>)
 801093a:	460b      	mov	r3, r1
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	440b      	add	r3, r1
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	4413      	add	r3, r2
 8010944:	3308      	adds	r3, #8
 8010946:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	429a      	cmp	r2, r3
 801094c:	d117      	bne.n	801097e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4b38      	ldr	r3, [pc, #224]	; (8010a34 <etharp_output+0x1fc>)
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	4618      	mov	r0, r3
 8010958:	4937      	ldr	r1, [pc, #220]	; (8010a38 <etharp_output+0x200>)
 801095a:	4603      	mov	r3, r0
 801095c:	005b      	lsls	r3, r3, #1
 801095e:	4403      	add	r3, r0
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	440b      	add	r3, r1
 8010964:	3304      	adds	r3, #4
 8010966:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010968:	429a      	cmp	r2, r3
 801096a:	d108      	bne.n	801097e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801096c:	4b31      	ldr	r3, [pc, #196]	; (8010a34 <etharp_output+0x1fc>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	461a      	mov	r2, r3
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7ff fec5 	bl	8010704 <etharp_output_to_arp_index>
 801097a:	4603      	mov	r3, r0
 801097c:	e04a      	b.n	8010a14 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801097e:	2300      	movs	r3, #0
 8010980:	75fb      	strb	r3, [r7, #23]
 8010982:	e031      	b.n	80109e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010984:	7dfa      	ldrb	r2, [r7, #23]
 8010986:	492c      	ldr	r1, [pc, #176]	; (8010a38 <etharp_output+0x200>)
 8010988:	4613      	mov	r3, r2
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	4413      	add	r3, r2
 801098e:	00db      	lsls	r3, r3, #3
 8010990:	440b      	add	r3, r1
 8010992:	3314      	adds	r3, #20
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	2b01      	cmp	r3, #1
 8010998:	d923      	bls.n	80109e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801099a:	7dfa      	ldrb	r2, [r7, #23]
 801099c:	4926      	ldr	r1, [pc, #152]	; (8010a38 <etharp_output+0x200>)
 801099e:	4613      	mov	r3, r2
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	4413      	add	r3, r2
 80109a4:	00db      	lsls	r3, r3, #3
 80109a6:	440b      	add	r3, r1
 80109a8:	3308      	adds	r3, #8
 80109aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d117      	bne.n	80109e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	6819      	ldr	r1, [r3, #0]
 80109b6:	7dfa      	ldrb	r2, [r7, #23]
 80109b8:	481f      	ldr	r0, [pc, #124]	; (8010a38 <etharp_output+0x200>)
 80109ba:	4613      	mov	r3, r2
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4413      	add	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	4403      	add	r3, r0
 80109c4:	3304      	adds	r3, #4
 80109c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80109c8:	4299      	cmp	r1, r3
 80109ca:	d10a      	bne.n	80109e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80109cc:	4a19      	ldr	r2, [pc, #100]	; (8010a34 <etharp_output+0x1fc>)
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
 80109d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80109d2:	7dfb      	ldrb	r3, [r7, #23]
 80109d4:	461a      	mov	r2, r3
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7ff fe93 	bl	8010704 <etharp_output_to_arp_index>
 80109de:	4603      	mov	r3, r0
 80109e0:	e018      	b.n	8010a14 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
 80109e4:	3301      	adds	r3, #1
 80109e6:	75fb      	strb	r3, [r7, #23]
 80109e8:	7dfb      	ldrb	r3, [r7, #23]
 80109ea:	2b09      	cmp	r3, #9
 80109ec:	d9ca      	bls.n	8010984 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	69b9      	ldr	r1, [r7, #24]
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f000 f822 	bl	8010a3c <etharp_query>
 80109f8:	4603      	mov	r3, r0
 80109fa:	e00b      	b.n	8010a14 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 faa1 	bl	8010f54 <ethernet_output>
 8010a12:	4603      	mov	r3, r0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	080202b0 	.word	0x080202b0
 8010a20:	08020420 	.word	0x08020420
 8010a24:	08020348 	.word	0x08020348
 8010a28:	08020470 	.word	0x08020470
 8010a2c:	08020410 	.word	0x08020410
 8010a30:	08023110 	.word	0x08023110
 8010a34:	240042d4 	.word	0x240042d4
 8010a38:	240041e4 	.word	0x240041e4

08010a3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b08c      	sub	sp, #48	; 0x30
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	332a      	adds	r3, #42	; 0x2a
 8010a4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010a4e:	23ff      	movs	r3, #255	; 0xff
 8010a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68f9      	ldr	r1, [r7, #12]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f001 f844 	bl	8011aec <ip4_addr_isbroadcast_u32>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d10c      	bne.n	8010a84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a72:	2be0      	cmp	r3, #224	; 0xe0
 8010a74:	d006      	beq.n	8010a84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d003      	beq.n	8010a84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a84:	f06f 030f 	mvn.w	r3, #15
 8010a88:	e101      	b.n	8010c8e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	2101      	movs	r1, #1
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f7ff fb5c 	bl	801014c <etharp_find_entry>
 8010a94:	4603      	mov	r3, r0
 8010a96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010a98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	da02      	bge.n	8010aa6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010aa0:	8a7b      	ldrh	r3, [r7, #18]
 8010aa2:	b25b      	sxtb	r3, r3
 8010aa4:	e0f3      	b.n	8010c8e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010aa6:	8a7b      	ldrh	r3, [r7, #18]
 8010aa8:	2b7e      	cmp	r3, #126	; 0x7e
 8010aaa:	d906      	bls.n	8010aba <etharp_query+0x7e>
 8010aac:	4b7a      	ldr	r3, [pc, #488]	; (8010c98 <etharp_query+0x25c>)
 8010aae:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010ab2:	497a      	ldr	r1, [pc, #488]	; (8010c9c <etharp_query+0x260>)
 8010ab4:	487a      	ldr	r0, [pc, #488]	; (8010ca0 <etharp_query+0x264>)
 8010ab6:	f00b fc9d 	bl	801c3f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010aba:	8a7b      	ldrh	r3, [r7, #18]
 8010abc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010abe:	7c7a      	ldrb	r2, [r7, #17]
 8010ac0:	4978      	ldr	r1, [pc, #480]	; (8010ca4 <etharp_query+0x268>)
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	4413      	add	r3, r2
 8010ac8:	00db      	lsls	r3, r3, #3
 8010aca:	440b      	add	r3, r1
 8010acc:	3314      	adds	r3, #20
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d115      	bne.n	8010b00 <etharp_query+0xc4>
    is_new_entry = 1;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010ad8:	7c7a      	ldrb	r2, [r7, #17]
 8010ada:	4972      	ldr	r1, [pc, #456]	; (8010ca4 <etharp_query+0x268>)
 8010adc:	4613      	mov	r3, r2
 8010ade:	005b      	lsls	r3, r3, #1
 8010ae0:	4413      	add	r3, r2
 8010ae2:	00db      	lsls	r3, r3, #3
 8010ae4:	440b      	add	r3, r1
 8010ae6:	3314      	adds	r3, #20
 8010ae8:	2201      	movs	r2, #1
 8010aea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010aec:	7c7a      	ldrb	r2, [r7, #17]
 8010aee:	496d      	ldr	r1, [pc, #436]	; (8010ca4 <etharp_query+0x268>)
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3308      	adds	r3, #8
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010b00:	7c7a      	ldrb	r2, [r7, #17]
 8010b02:	4968      	ldr	r1, [pc, #416]	; (8010ca4 <etharp_query+0x268>)
 8010b04:	4613      	mov	r3, r2
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	440b      	add	r3, r1
 8010b0e:	3314      	adds	r3, #20
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d011      	beq.n	8010b3a <etharp_query+0xfe>
 8010b16:	7c7a      	ldrb	r2, [r7, #17]
 8010b18:	4962      	ldr	r1, [pc, #392]	; (8010ca4 <etharp_query+0x268>)
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	4413      	add	r3, r2
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	440b      	add	r3, r1
 8010b24:	3314      	adds	r3, #20
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d806      	bhi.n	8010b3a <etharp_query+0xfe>
 8010b2c:	4b5a      	ldr	r3, [pc, #360]	; (8010c98 <etharp_query+0x25c>)
 8010b2e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010b32:	495d      	ldr	r1, [pc, #372]	; (8010ca8 <etharp_query+0x26c>)
 8010b34:	485a      	ldr	r0, [pc, #360]	; (8010ca0 <etharp_query+0x264>)
 8010b36:	f00b fc5d 	bl	801c3f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d102      	bne.n	8010b46 <etharp_query+0x10a>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10c      	bne.n	8010b60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010b46:	68b9      	ldr	r1, [r7, #8]
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f000 f963 	bl	8010e14 <etharp_request>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d102      	bne.n	8010b60 <etharp_query+0x124>
      return result;
 8010b5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b5e:	e096      	b.n	8010c8e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d106      	bne.n	8010b74 <etharp_query+0x138>
 8010b66:	4b4c      	ldr	r3, [pc, #304]	; (8010c98 <etharp_query+0x25c>)
 8010b68:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010b6c:	494f      	ldr	r1, [pc, #316]	; (8010cac <etharp_query+0x270>)
 8010b6e:	484c      	ldr	r0, [pc, #304]	; (8010ca0 <etharp_query+0x264>)
 8010b70:	f00b fc40 	bl	801c3f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010b74:	7c7a      	ldrb	r2, [r7, #17]
 8010b76:	494b      	ldr	r1, [pc, #300]	; (8010ca4 <etharp_query+0x268>)
 8010b78:	4613      	mov	r3, r2
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	440b      	add	r3, r1
 8010b82:	3314      	adds	r3, #20
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d917      	bls.n	8010bba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010b8a:	4a49      	ldr	r2, [pc, #292]	; (8010cb0 <etharp_query+0x274>)
 8010b8c:	7c7b      	ldrb	r3, [r7, #17]
 8010b8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010b90:	7c7a      	ldrb	r2, [r7, #17]
 8010b92:	4613      	mov	r3, r2
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	4413      	add	r3, r2
 8010b98:	00db      	lsls	r3, r3, #3
 8010b9a:	3308      	adds	r3, #8
 8010b9c:	4a41      	ldr	r2, [pc, #260]	; (8010ca4 <etharp_query+0x268>)
 8010b9e:	4413      	add	r3, r2
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ba6:	9200      	str	r2, [sp, #0]
 8010ba8:	697a      	ldr	r2, [r7, #20]
 8010baa:	6879      	ldr	r1, [r7, #4]
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f000 f9d1 	bl	8010f54 <ethernet_output>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bb8:	e067      	b.n	8010c8a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010bba:	7c7a      	ldrb	r2, [r7, #17]
 8010bbc:	4939      	ldr	r1, [pc, #228]	; (8010ca4 <etharp_query+0x268>)
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	00db      	lsls	r3, r3, #3
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3314      	adds	r3, #20
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d15c      	bne.n	8010c8a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010bd8:	e01c      	b.n	8010c14 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	895a      	ldrh	r2, [r3, #10]
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	891b      	ldrh	r3, [r3, #8]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d10a      	bne.n	8010bfc <etharp_query+0x1c0>
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d006      	beq.n	8010bfc <etharp_query+0x1c0>
 8010bee:	4b2a      	ldr	r3, [pc, #168]	; (8010c98 <etharp_query+0x25c>)
 8010bf0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010bf4:	492f      	ldr	r1, [pc, #188]	; (8010cb4 <etharp_query+0x278>)
 8010bf6:	482a      	ldr	r0, [pc, #168]	; (8010ca0 <etharp_query+0x264>)
 8010bf8:	f00b fbfc 	bl	801c3f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	7b1b      	ldrb	r3, [r3, #12]
 8010c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <etharp_query+0x1d2>
        copy_needed = 1;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	61bb      	str	r3, [r7, #24]
        break;
 8010c0c:	e005      	b.n	8010c1a <etharp_query+0x1de>
      }
      p = p->next;
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1df      	bne.n	8010bda <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d007      	beq.n	8010c30 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010c26:	200e      	movs	r0, #14
 8010c28:	f003 fcb0 	bl	801458c <pbuf_clone>
 8010c2c:	61f8      	str	r0, [r7, #28]
 8010c2e:	e004      	b.n	8010c3a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010c34:	69f8      	ldr	r0, [r7, #28]
 8010c36:	f003 fad7 	bl	80141e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d021      	beq.n	8010c84 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010c40:	7c7a      	ldrb	r2, [r7, #17]
 8010c42:	4918      	ldr	r1, [pc, #96]	; (8010ca4 <etharp_query+0x268>)
 8010c44:	4613      	mov	r3, r2
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	440b      	add	r3, r1
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00a      	beq.n	8010c6a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010c54:	7c7a      	ldrb	r2, [r7, #17]
 8010c56:	4913      	ldr	r1, [pc, #76]	; (8010ca4 <etharp_query+0x268>)
 8010c58:	4613      	mov	r3, r2
 8010c5a:	005b      	lsls	r3, r3, #1
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	440b      	add	r3, r1
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f003 fa19 	bl	801409c <pbuf_free>
      }
      arp_table[i].q = p;
 8010c6a:	7c7a      	ldrb	r2, [r7, #17]
 8010c6c:	490d      	ldr	r1, [pc, #52]	; (8010ca4 <etharp_query+0x268>)
 8010c6e:	4613      	mov	r3, r2
 8010c70:	005b      	lsls	r3, r3, #1
 8010c72:	4413      	add	r3, r2
 8010c74:	00db      	lsls	r3, r3, #3
 8010c76:	440b      	add	r3, r1
 8010c78:	69fa      	ldr	r2, [r7, #28]
 8010c7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c82:	e002      	b.n	8010c8a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010c84:	23ff      	movs	r3, #255	; 0xff
 8010c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010c8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3728      	adds	r7, #40	; 0x28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	080202b0 	.word	0x080202b0
 8010c9c:	0802047c 	.word	0x0802047c
 8010ca0:	08020348 	.word	0x08020348
 8010ca4:	240041e4 	.word	0x240041e4
 8010ca8:	0802048c 	.word	0x0802048c
 8010cac:	08020470 	.word	0x08020470
 8010cb0:	240042d4 	.word	0x240042d4
 8010cb4:	080204b4 	.word	0x080204b4

08010cb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b08a      	sub	sp, #40	; 0x28
 8010cbc:	af02      	add	r7, sp, #8
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d106      	bne.n	8010cde <etharp_raw+0x26>
 8010cd0:	4b3a      	ldr	r3, [pc, #232]	; (8010dbc <etharp_raw+0x104>)
 8010cd2:	f240 4257 	movw	r2, #1111	; 0x457
 8010cd6:	493a      	ldr	r1, [pc, #232]	; (8010dc0 <etharp_raw+0x108>)
 8010cd8:	483a      	ldr	r0, [pc, #232]	; (8010dc4 <etharp_raw+0x10c>)
 8010cda:	f00b fb8b 	bl	801c3f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010cde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ce2:	211c      	movs	r1, #28
 8010ce4:	200e      	movs	r0, #14
 8010ce6:	f002 fef5 	bl	8013ad4 <pbuf_alloc>
 8010cea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010cec:	69bb      	ldr	r3, [r7, #24]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d102      	bne.n	8010cf8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf6:	e05d      	b.n	8010db4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	895b      	ldrh	r3, [r3, #10]
 8010cfc:	2b1b      	cmp	r3, #27
 8010cfe:	d806      	bhi.n	8010d0e <etharp_raw+0x56>
 8010d00:	4b2e      	ldr	r3, [pc, #184]	; (8010dbc <etharp_raw+0x104>)
 8010d02:	f240 4262 	movw	r2, #1122	; 0x462
 8010d06:	4930      	ldr	r1, [pc, #192]	; (8010dc8 <etharp_raw+0x110>)
 8010d08:	482e      	ldr	r0, [pc, #184]	; (8010dc4 <etharp_raw+0x10c>)
 8010d0a:	f00b fb73 	bl	801c3f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010d14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fd fa7c 	bl	800e214 <lwip_htons>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	461a      	mov	r2, r3
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d2a:	2b06      	cmp	r3, #6
 8010d2c:	d006      	beq.n	8010d3c <etharp_raw+0x84>
 8010d2e:	4b23      	ldr	r3, [pc, #140]	; (8010dbc <etharp_raw+0x104>)
 8010d30:	f240 4269 	movw	r2, #1129	; 0x469
 8010d34:	4925      	ldr	r1, [pc, #148]	; (8010dcc <etharp_raw+0x114>)
 8010d36:	4823      	ldr	r0, [pc, #140]	; (8010dc4 <etharp_raw+0x10c>)
 8010d38:	f00b fb5c 	bl	801c3f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	3308      	adds	r3, #8
 8010d40:	2206      	movs	r2, #6
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	4618      	mov	r0, r3
 8010d46:	f00a fee3 	bl	801bb10 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	3312      	adds	r3, #18
 8010d4e:	2206      	movs	r2, #6
 8010d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d52:	4618      	mov	r0, r3
 8010d54:	f00a fedc 	bl	801bb10 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	330e      	adds	r3, #14
 8010d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d5e:	6812      	ldr	r2, [r2, #0]
 8010d60:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	3318      	adds	r3, #24
 8010d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d68:	6812      	ldr	r2, [r2, #0]
 8010d6a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	701a      	strb	r2, [r3, #0]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f042 0201 	orr.w	r2, r2, #1
 8010d78:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f042 0208 	orr.w	r2, r2, #8
 8010d82:	709a      	strb	r2, [r3, #2]
 8010d84:	2200      	movs	r2, #0
 8010d86:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2206      	movs	r2, #6
 8010d8c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2204      	movs	r2, #4
 8010d92:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010d94:	f640 0306 	movw	r3, #2054	; 0x806
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	69b9      	ldr	r1, [r7, #24]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f000 f8d7 	bl	8010f54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010da6:	69b8      	ldr	r0, [r7, #24]
 8010da8:	f003 f978 	bl	801409c <pbuf_free>
  p = NULL;
 8010dac:	2300      	movs	r3, #0
 8010dae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3720      	adds	r7, #32
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	080202b0 	.word	0x080202b0
 8010dc0:	08020420 	.word	0x08020420
 8010dc4:	08020348 	.word	0x08020348
 8010dc8:	080204d0 	.word	0x080204d0
 8010dcc:	08020504 	.word	0x08020504

08010dd0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b088      	sub	sp, #32
 8010dd4:	af04      	add	r7, sp, #16
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010dec:	2201      	movs	r2, #1
 8010dee:	9203      	str	r2, [sp, #12]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	9202      	str	r2, [sp, #8]
 8010df4:	4a06      	ldr	r2, [pc, #24]	; (8010e10 <etharp_request_dst+0x40>)
 8010df6:	9201      	str	r2, [sp, #4]
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f7ff ff5a 	bl	8010cb8 <etharp_raw>
 8010e04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	08023118 	.word	0x08023118

08010e14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010e1e:	4a05      	ldr	r2, [pc, #20]	; (8010e34 <etharp_request+0x20>)
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff ffd4 	bl	8010dd0 <etharp_request_dst>
 8010e28:	4603      	mov	r3, r0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3708      	adds	r7, #8
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	08023110 	.word	0x08023110

08010e38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010e42:	230e      	movs	r3, #14
 8010e44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	895b      	ldrh	r3, [r3, #10]
 8010e4a:	2b0e      	cmp	r3, #14
 8010e4c:	d96e      	bls.n	8010f2c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	7bdb      	ldrb	r3, [r3, #15]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d106      	bne.n	8010e64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	7b1a      	ldrb	r2, [r3, #12]
 8010e6e:	7b5b      	ldrb	r3, [r3, #13]
 8010e70:	021b      	lsls	r3, r3, #8
 8010e72:	4313      	orrs	r3, r2
 8010e74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	f003 0301 	and.w	r3, r3, #1
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d023      	beq.n	8010eca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d10f      	bne.n	8010eaa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	785b      	ldrb	r3, [r3, #1]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d11b      	bne.n	8010eca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e96:	2b5e      	cmp	r3, #94	; 0x5e
 8010e98:	d117      	bne.n	8010eca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	7b5b      	ldrb	r3, [r3, #13]
 8010e9e:	f043 0310 	orr.w	r3, r3, #16
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	735a      	strb	r2, [r3, #13]
 8010ea8:	e00f      	b.n	8010eca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	2206      	movs	r2, #6
 8010eae:	4928      	ldr	r1, [pc, #160]	; (8010f50 <ethernet_input+0x118>)
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f00a fe1f 	bl	801baf4 <memcmp>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	7b5b      	ldrb	r3, [r3, #13]
 8010ec0:	f043 0308 	orr.w	r3, r3, #8
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010eca:	89fb      	ldrh	r3, [r7, #14]
 8010ecc:	2b08      	cmp	r3, #8
 8010ece:	d003      	beq.n	8010ed8 <ethernet_input+0xa0>
 8010ed0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010ed4:	d014      	beq.n	8010f00 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010ed6:	e032      	b.n	8010f3e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ede:	f003 0308 	and.w	r3, r3, #8
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d024      	beq.n	8010f30 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ee6:	8afb      	ldrh	r3, [r7, #22]
 8010ee8:	4619      	mov	r1, r3
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f003 f850 	bl	8013f90 <pbuf_remove_header>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d11e      	bne.n	8010f34 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fbdd 	bl	80116b8 <ip4_input>
      break;
 8010efe:	e013      	b.n	8010f28 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f06:	f003 0308 	and.w	r3, r3, #8
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d014      	beq.n	8010f38 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010f0e:	8afb      	ldrh	r3, [r7, #22]
 8010f10:	4619      	mov	r1, r3
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f003 f83c 	bl	8013f90 <pbuf_remove_header>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d10e      	bne.n	8010f3c <ethernet_input+0x104>
        etharp_input(p, netif);
 8010f1e:	6839      	ldr	r1, [r7, #0]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7ff fb61 	bl	80105e8 <etharp_input>
      break;
 8010f26:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	e00c      	b.n	8010f46 <ethernet_input+0x10e>
    goto free_and_return;
 8010f2c:	bf00      	nop
 8010f2e:	e006      	b.n	8010f3e <ethernet_input+0x106>
        goto free_and_return;
 8010f30:	bf00      	nop
 8010f32:	e004      	b.n	8010f3e <ethernet_input+0x106>
        goto free_and_return;
 8010f34:	bf00      	nop
 8010f36:	e002      	b.n	8010f3e <ethernet_input+0x106>
        goto free_and_return;
 8010f38:	bf00      	nop
 8010f3a:	e000      	b.n	8010f3e <ethernet_input+0x106>
        goto free_and_return;
 8010f3c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f003 f8ac 	bl	801409c <pbuf_free>
  return ERR_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	08023110 	.word	0x08023110

08010f54 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b086      	sub	sp, #24
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
 8010f60:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010f62:	8c3b      	ldrh	r3, [r7, #32]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fd f955 	bl	800e214 <lwip_htons>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010f6e:	210e      	movs	r1, #14
 8010f70:	68b8      	ldr	r0, [r7, #8]
 8010f72:	f002 fffd 	bl	8013f70 <pbuf_add_header>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d125      	bne.n	8010fc8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	8afa      	ldrh	r2, [r7, #22]
 8010f86:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	2206      	movs	r2, #6
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f00a fdbe 	bl	801bb10 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	3306      	adds	r3, #6
 8010f98:	2206      	movs	r2, #6
 8010f9a:	6879      	ldr	r1, [r7, #4]
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f00a fdb7 	bl	801bb10 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fa8:	2b06      	cmp	r3, #6
 8010faa:	d006      	beq.n	8010fba <ethernet_output+0x66>
 8010fac:	4b0a      	ldr	r3, [pc, #40]	; (8010fd8 <ethernet_output+0x84>)
 8010fae:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010fb2:	490a      	ldr	r1, [pc, #40]	; (8010fdc <ethernet_output+0x88>)
 8010fb4:	480a      	ldr	r0, [pc, #40]	; (8010fe0 <ethernet_output+0x8c>)
 8010fb6:	f00b fa1d 	bl	801c3f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	699b      	ldr	r3, [r3, #24]
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	4798      	blx	r3
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	e002      	b.n	8010fce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010fc8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010fca:	f06f 0301 	mvn.w	r3, #1
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3718      	adds	r7, #24
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08020548 	.word	0x08020548
 8010fdc:	0802059c 	.word	0x0802059c
 8010fe0:	080205d0 	.word	0x080205d0

08010fe4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <fs_open+0x16>
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d102      	bne.n	8011000 <fs_open+0x1c>
    return ERR_ARG;
 8010ffa:	f06f 030f 	mvn.w	r3, #15
 8010ffe:	e028      	b.n	8011052 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011000:	4b16      	ldr	r3, [pc, #88]	; (801105c <fs_open+0x78>)
 8011002:	60fb      	str	r3, [r7, #12]
 8011004:	e020      	b.n	8011048 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	4619      	mov	r1, r3
 801100c:	6838      	ldr	r0, [r7, #0]
 801100e:	f7ef f967 	bl	80002e0 <strcmp>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d114      	bne.n	8011042 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	689a      	ldr	r2, [r3, #8]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	68da      	ldr	r2, [r3, #12]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	68da      	ldr	r2, [r3, #12]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2200      	movs	r2, #0
 8011034:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7c1a      	ldrb	r2, [r3, #16]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	e007      	b.n	8011052 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1db      	bne.n	8011006 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801104e:	f06f 0305 	mvn.w	r3, #5
}
 8011052:	4618      	mov	r0, r3
 8011054:	3710      	adds	r7, #16
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	080463b4 	.word	0x080463b4

08011060 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b08e      	sub	sp, #56	; 0x38
 8011078:	af04      	add	r7, sp, #16
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801107e:	4b87      	ldr	r3, [pc, #540]	; (801129c <icmp_input+0x228>)
 8011080:	689b      	ldr	r3, [r3, #8]
 8011082:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	f003 030f 	and.w	r3, r3, #15
 801108c:	b2db      	uxtb	r3, r3
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	b2db      	uxtb	r3, r3
 8011092:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011096:	2b13      	cmp	r3, #19
 8011098:	f240 80e8 	bls.w	801126c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	895b      	ldrh	r3, [r3, #10]
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	f240 80e5 	bls.w	8011270 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80110b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f000 80d2 	beq.w	801125e <icmp_input+0x1ea>
 80110ba:	2b08      	cmp	r3, #8
 80110bc:	f040 80d2 	bne.w	8011264 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80110c0:	4b77      	ldr	r3, [pc, #476]	; (80112a0 <icmp_input+0x22c>)
 80110c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110c4:	4b75      	ldr	r3, [pc, #468]	; (801129c <icmp_input+0x228>)
 80110c6:	695b      	ldr	r3, [r3, #20]
 80110c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110cc:	2be0      	cmp	r3, #224	; 0xe0
 80110ce:	f000 80d6 	beq.w	801127e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80110d2:	4b72      	ldr	r3, [pc, #456]	; (801129c <icmp_input+0x228>)
 80110d4:	695b      	ldr	r3, [r3, #20]
 80110d6:	4a71      	ldr	r2, [pc, #452]	; (801129c <icmp_input+0x228>)
 80110d8:	6812      	ldr	r2, [r2, #0]
 80110da:	4611      	mov	r1, r2
 80110dc:	4618      	mov	r0, r3
 80110de:	f000 fd05 	bl	8011aec <ip4_addr_isbroadcast_u32>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f040 80cc 	bne.w	8011282 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	891b      	ldrh	r3, [r3, #8]
 80110ee:	2b07      	cmp	r3, #7
 80110f0:	f240 80c0 	bls.w	8011274 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 f9e0 	bl	80114ba <inet_chksum_pbuf>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f002 ffcb 	bl	801409c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011106:	e0c5      	b.n	8011294 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801110a:	330e      	adds	r3, #14
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f002 ff2e 	bl	8013f70 <pbuf_add_header>
 8011114:	4603      	mov	r3, r0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d04b      	beq.n	80111b2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	891a      	ldrh	r2, [r3, #8]
 801111e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011120:	4413      	add	r3, r2
 8011122:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	891b      	ldrh	r3, [r3, #8]
 8011128:	8b7a      	ldrh	r2, [r7, #26]
 801112a:	429a      	cmp	r2, r3
 801112c:	f0c0 80ab 	bcc.w	8011286 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011130:	8b7b      	ldrh	r3, [r7, #26]
 8011132:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011136:	4619      	mov	r1, r3
 8011138:	200e      	movs	r0, #14
 801113a:	f002 fccb 	bl	8013ad4 <pbuf_alloc>
 801113e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	2b00      	cmp	r3, #0
 8011144:	f000 80a1 	beq.w	801128a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	895b      	ldrh	r3, [r3, #10]
 801114c:	461a      	mov	r2, r3
 801114e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011150:	3308      	adds	r3, #8
 8011152:	429a      	cmp	r2, r3
 8011154:	d203      	bcs.n	801115e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011156:	6978      	ldr	r0, [r7, #20]
 8011158:	f002 ffa0 	bl	801409c <pbuf_free>
          goto icmperr;
 801115c:	e096      	b.n	801128c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011166:	4618      	mov	r0, r3
 8011168:	f00a fcd2 	bl	801bb10 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801116c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801116e:	4619      	mov	r1, r3
 8011170:	6978      	ldr	r0, [r7, #20]
 8011172:	f002 ff0d 	bl	8013f90 <pbuf_remove_header>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d009      	beq.n	8011190 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801117c:	4b49      	ldr	r3, [pc, #292]	; (80112a4 <icmp_input+0x230>)
 801117e:	22b6      	movs	r2, #182	; 0xb6
 8011180:	4949      	ldr	r1, [pc, #292]	; (80112a8 <icmp_input+0x234>)
 8011182:	484a      	ldr	r0, [pc, #296]	; (80112ac <icmp_input+0x238>)
 8011184:	f00b f936 	bl	801c3f4 <iprintf>
          pbuf_free(r);
 8011188:	6978      	ldr	r0, [r7, #20]
 801118a:	f002 ff87 	bl	801409c <pbuf_free>
          goto icmperr;
 801118e:	e07d      	b.n	801128c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	6978      	ldr	r0, [r7, #20]
 8011194:	f003 f8b6 	bl	8014304 <pbuf_copy>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d003      	beq.n	80111a6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801119e:	6978      	ldr	r0, [r7, #20]
 80111a0:	f002 ff7c 	bl	801409c <pbuf_free>
          goto icmperr;
 80111a4:	e072      	b.n	801128c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f002 ff78 	bl	801409c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	607b      	str	r3, [r7, #4]
 80111b0:	e00f      	b.n	80111d2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80111b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111b4:	330e      	adds	r3, #14
 80111b6:	4619      	mov	r1, r3
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f002 fee9 	bl	8013f90 <pbuf_remove_header>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d006      	beq.n	80111d2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80111c4:	4b37      	ldr	r3, [pc, #220]	; (80112a4 <icmp_input+0x230>)
 80111c6:	22c7      	movs	r2, #199	; 0xc7
 80111c8:	4939      	ldr	r1, [pc, #228]	; (80112b0 <icmp_input+0x23c>)
 80111ca:	4838      	ldr	r0, [pc, #224]	; (80112ac <icmp_input+0x238>)
 80111cc:	f00b f912 	bl	801c3f4 <iprintf>
          goto icmperr;
 80111d0:	e05c      	b.n	801128c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80111d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111da:	4619      	mov	r1, r3
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f002 fec7 	bl	8013f70 <pbuf_add_header>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d13c      	bne.n	8011262 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80111f6:	4b29      	ldr	r3, [pc, #164]	; (801129c <icmp_input+0x228>)
 80111f8:	691a      	ldr	r2, [r3, #16]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	2200      	movs	r2, #0
 8011202:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	885b      	ldrh	r3, [r3, #2]
 8011208:	b29b      	uxth	r3, r3
 801120a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801120e:	4293      	cmp	r3, r2
 8011210:	d907      	bls.n	8011222 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	885b      	ldrh	r3, [r3, #2]
 8011216:	b29b      	uxth	r3, r3
 8011218:	3309      	adds	r3, #9
 801121a:	b29a      	uxth	r2, r3
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	805a      	strh	r2, [r3, #2]
 8011220:	e006      	b.n	8011230 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	885b      	ldrh	r3, [r3, #2]
 8011226:	b29b      	uxth	r3, r3
 8011228:	3308      	adds	r3, #8
 801122a:	b29a      	uxth	r2, r3
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	22ff      	movs	r2, #255	; 0xff
 8011234:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	729a      	strb	r2, [r3, #10]
 801123c:	2200      	movs	r2, #0
 801123e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	9302      	str	r3, [sp, #8]
 8011244:	2301      	movs	r3, #1
 8011246:	9301      	str	r3, [sp, #4]
 8011248:	2300      	movs	r3, #0
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	23ff      	movs	r3, #255	; 0xff
 801124e:	2200      	movs	r2, #0
 8011250:	69f9      	ldr	r1, [r7, #28]
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 fb72 	bl	801193c <ip4_output_if>
 8011258:	4603      	mov	r3, r0
 801125a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801125c:	e001      	b.n	8011262 <icmp_input+0x1ee>
      break;
 801125e:	bf00      	nop
 8011260:	e000      	b.n	8011264 <icmp_input+0x1f0>
      break;
 8011262:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f002 ff19 	bl	801409c <pbuf_free>
  return;
 801126a:	e013      	b.n	8011294 <icmp_input+0x220>
    goto lenerr;
 801126c:	bf00      	nop
 801126e:	e002      	b.n	8011276 <icmp_input+0x202>
    goto lenerr;
 8011270:	bf00      	nop
 8011272:	e000      	b.n	8011276 <icmp_input+0x202>
        goto lenerr;
 8011274:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f002 ff10 	bl	801409c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801127c:	e00a      	b.n	8011294 <icmp_input+0x220>
        goto icmperr;
 801127e:	bf00      	nop
 8011280:	e004      	b.n	801128c <icmp_input+0x218>
        goto icmperr;
 8011282:	bf00      	nop
 8011284:	e002      	b.n	801128c <icmp_input+0x218>
          goto icmperr;
 8011286:	bf00      	nop
 8011288:	e000      	b.n	801128c <icmp_input+0x218>
          goto icmperr;
 801128a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f002 ff05 	bl	801409c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011292:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011294:	3728      	adds	r7, #40	; 0x28
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	240048f0 	.word	0x240048f0
 80112a0:	24004904 	.word	0x24004904
 80112a4:	080205f8 	.word	0x080205f8
 80112a8:	0802064c 	.word	0x0802064c
 80112ac:	08020684 	.word	0x08020684
 80112b0:	080206ac 	.word	0x080206ac

080112b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	460b      	mov	r3, r1
 80112be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	461a      	mov	r2, r3
 80112c4:	2103      	movs	r1, #3
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f814 	bl	80112f4 <icmp_send_response>
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80112e0:	78fb      	ldrb	r3, [r7, #3]
 80112e2:	461a      	mov	r2, r3
 80112e4:	210b      	movs	r1, #11
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f000 f804 	bl	80112f4 <icmp_send_response>
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08c      	sub	sp, #48	; 0x30
 80112f8:	af04      	add	r7, sp, #16
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	460b      	mov	r3, r1
 80112fe:	70fb      	strb	r3, [r7, #3]
 8011300:	4613      	mov	r3, r2
 8011302:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011304:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011308:	2124      	movs	r1, #36	; 0x24
 801130a:	2022      	movs	r0, #34	; 0x22
 801130c:	f002 fbe2 	bl	8013ad4 <pbuf_alloc>
 8011310:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d056      	beq.n	80113c6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	895b      	ldrh	r3, [r3, #10]
 801131c:	2b23      	cmp	r3, #35	; 0x23
 801131e:	d806      	bhi.n	801132e <icmp_send_response+0x3a>
 8011320:	4b2b      	ldr	r3, [pc, #172]	; (80113d0 <icmp_send_response+0xdc>)
 8011322:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011326:	492b      	ldr	r1, [pc, #172]	; (80113d4 <icmp_send_response+0xe0>)
 8011328:	482b      	ldr	r0, [pc, #172]	; (80113d8 <icmp_send_response+0xe4>)
 801132a:	f00b f863 	bl	801c3f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	78fa      	ldrb	r2, [r7, #3]
 801133e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	78ba      	ldrb	r2, [r7, #2]
 8011344:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	2200      	movs	r2, #0
 801134a:	711a      	strb	r2, [r3, #4]
 801134c:	2200      	movs	r2, #0
 801134e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	2200      	movs	r2, #0
 8011354:	719a      	strb	r2, [r3, #6]
 8011356:	2200      	movs	r2, #0
 8011358:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	f103 0008 	add.w	r0, r3, #8
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	221c      	movs	r2, #28
 8011368:	4619      	mov	r1, r3
 801136a:	f00a fbd1 	bl	801bb10 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011374:	f107 030c 	add.w	r3, r7, #12
 8011378:	4618      	mov	r0, r3
 801137a:	f000 f903 	bl	8011584 <ip4_route>
 801137e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d01b      	beq.n	80113be <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	2200      	movs	r2, #0
 801138a:	709a      	strb	r2, [r3, #2]
 801138c:	2200      	movs	r2, #0
 801138e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	895b      	ldrh	r3, [r3, #10]
 8011394:	4619      	mov	r1, r3
 8011396:	6978      	ldr	r0, [r7, #20]
 8011398:	f000 f87d 	bl	8011496 <inet_chksum>
 801139c:	4603      	mov	r3, r0
 801139e:	461a      	mov	r2, r3
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80113a4:	f107 020c 	add.w	r2, r7, #12
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	9302      	str	r3, [sp, #8]
 80113ac:	2301      	movs	r3, #1
 80113ae:	9301      	str	r3, [sp, #4]
 80113b0:	2300      	movs	r3, #0
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	23ff      	movs	r3, #255	; 0xff
 80113b6:	2100      	movs	r1, #0
 80113b8:	69f8      	ldr	r0, [r7, #28]
 80113ba:	f000 fabf 	bl	801193c <ip4_output_if>
  }
  pbuf_free(q);
 80113be:	69f8      	ldr	r0, [r7, #28]
 80113c0:	f002 fe6c 	bl	801409c <pbuf_free>
 80113c4:	e000      	b.n	80113c8 <icmp_send_response+0xd4>
    return;
 80113c6:	bf00      	nop
}
 80113c8:	3720      	adds	r7, #32
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	080205f8 	.word	0x080205f8
 80113d4:	080206e0 	.word	0x080206e0
 80113d8:	08020684 	.word	0x08020684

080113dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80113dc:	b480      	push	{r7}
 80113de:	b089      	sub	sp, #36	; 0x24
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	f003 0301 	and.w	r3, r3, #1
 80113f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d00d      	beq.n	801141c <lwip_standard_chksum+0x40>
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	dd0a      	ble.n	801141c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8011406:	69fa      	ldr	r2, [r7, #28]
 8011408:	1c53      	adds	r3, r2, #1
 801140a:	61fb      	str	r3, [r7, #28]
 801140c:	f107 030e 	add.w	r3, r7, #14
 8011410:	3301      	adds	r3, #1
 8011412:	7812      	ldrb	r2, [r2, #0]
 8011414:	701a      	strb	r2, [r3, #0]
    len--;
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	3b01      	subs	r3, #1
 801141a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011420:	e00a      	b.n	8011438 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	1c9a      	adds	r2, r3, #2
 8011426:	61ba      	str	r2, [r7, #24]
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	461a      	mov	r2, r3
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	4413      	add	r3, r2
 8011430:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	3b02      	subs	r3, #2
 8011436:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	2b01      	cmp	r3, #1
 801143c:	dcf1      	bgt.n	8011422 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	dd04      	ble.n	801144e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011444:	f107 030e 	add.w	r3, r7, #14
 8011448:	69ba      	ldr	r2, [r7, #24]
 801144a:	7812      	ldrb	r2, [r2, #0]
 801144c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801144e:	89fb      	ldrh	r3, [r7, #14]
 8011450:	461a      	mov	r2, r3
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	4413      	add	r3, r2
 8011456:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	0c1a      	lsrs	r2, r3, #16
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	b29b      	uxth	r3, r3
 8011460:	4413      	add	r3, r2
 8011462:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	0c1a      	lsrs	r2, r3, #16
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	b29b      	uxth	r3, r3
 801146c:	4413      	add	r3, r2
 801146e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d007      	beq.n	8011486 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	021b      	lsls	r3, r3, #8
 801147a:	b29a      	uxth	r2, r3
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	0a1b      	lsrs	r3, r3, #8
 8011480:	b2db      	uxtb	r3, r3
 8011482:	4313      	orrs	r3, r2
 8011484:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	b29b      	uxth	r3, r3
}
 801148a:	4618      	mov	r0, r3
 801148c:	3724      	adds	r7, #36	; 0x24
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011496:	b580      	push	{r7, lr}
 8011498:	b082      	sub	sp, #8
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
 801149e:	460b      	mov	r3, r1
 80114a0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80114a2:	887b      	ldrh	r3, [r7, #2]
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7ff ff98 	bl	80113dc <lwip_standard_chksum>
 80114ac:	4603      	mov	r3, r0
 80114ae:	43db      	mvns	r3, r3
 80114b0:	b29b      	uxth	r3, r3
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b086      	sub	sp, #24
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	613b      	str	r3, [r7, #16]
 80114ce:	e02b      	b.n	8011528 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	895b      	ldrh	r3, [r3, #10]
 80114d8:	4619      	mov	r1, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f7ff ff7e 	bl	80113dc <lwip_standard_chksum>
 80114e0:	4603      	mov	r3, r0
 80114e2:	461a      	mov	r2, r3
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	4413      	add	r3, r2
 80114e8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	0c1a      	lsrs	r2, r3, #16
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	4413      	add	r3, r2
 80114f4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	895b      	ldrh	r3, [r3, #10]
 80114fa:	f003 0301 	and.w	r3, r3, #1
 80114fe:	b29b      	uxth	r3, r3
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00e      	beq.n	8011522 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	bf0c      	ite	eq
 801150a:	2301      	moveq	r3, #1
 801150c:	2300      	movne	r3, #0
 801150e:	b2db      	uxtb	r3, r3
 8011510:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	021b      	lsls	r3, r3, #8
 8011516:	b29a      	uxth	r2, r3
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	0a1b      	lsrs	r3, r3, #8
 801151c:	b2db      	uxtb	r3, r3
 801151e:	4313      	orrs	r3, r2
 8011520:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	613b      	str	r3, [r7, #16]
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1d0      	bne.n	80114d0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d007      	beq.n	8011544 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	021b      	lsls	r3, r3, #8
 8011538:	b29a      	uxth	r2, r3
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	0a1b      	lsrs	r3, r3, #8
 801153e:	b2db      	uxtb	r3, r3
 8011540:	4313      	orrs	r3, r2
 8011542:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	b29b      	uxth	r3, r3
 8011548:	43db      	mvns	r3, r3
 801154a:	b29b      	uxth	r3, r3
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801155e:	f003 f99f 	bl	80148a0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011562:	f001 fa07 	bl	8012974 <mem_init>
  memp_init();
 8011566:	f001 fd6b 	bl	8013040 <memp_init>
  pbuf_init();
  netif_init();
 801156a:	f001 ff11 	bl	8013390 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801156e:	f009 fdd5 	bl	801b11c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011572:	f003 fa1f 	bl	80149b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011576:	f009 fd17 	bl	801afa8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801157a:	bf00      	nop
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
	...

08011584 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801158c:	4b33      	ldr	r3, [pc, #204]	; (801165c <ip4_route+0xd8>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	60fb      	str	r3, [r7, #12]
 8011592:	e036      	b.n	8011602 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801159a:	f003 0301 	and.w	r3, r3, #1
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d02b      	beq.n	80115fc <ip4_route+0x78>
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80115aa:	089b      	lsrs	r3, r3, #2
 80115ac:	f003 0301 	and.w	r3, r3, #1
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d022      	beq.n	80115fc <ip4_route+0x78>
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3304      	adds	r3, #4
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d01d      	beq.n	80115fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	3304      	adds	r3, #4
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	405a      	eors	r2, r3
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	3308      	adds	r3, #8
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	4013      	ands	r3, r2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	e038      	b.n	801164e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80115e2:	f003 0302 	and.w	r3, r3, #2
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d108      	bne.n	80115fc <ip4_route+0x78>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	330c      	adds	r3, #12
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d101      	bne.n	80115fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	e028      	b.n	801164e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	60fb      	str	r3, [r7, #12]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1c5      	bne.n	8011594 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011608:	4b15      	ldr	r3, [pc, #84]	; (8011660 <ip4_route+0xdc>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d01a      	beq.n	8011646 <ip4_route+0xc2>
 8011610:	4b13      	ldr	r3, [pc, #76]	; (8011660 <ip4_route+0xdc>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b00      	cmp	r3, #0
 801161e:	d012      	beq.n	8011646 <ip4_route+0xc2>
 8011620:	4b0f      	ldr	r3, [pc, #60]	; (8011660 <ip4_route+0xdc>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011628:	f003 0304 	and.w	r3, r3, #4
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00a      	beq.n	8011646 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011630:	4b0b      	ldr	r3, [pc, #44]	; (8011660 <ip4_route+0xdc>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3304      	adds	r3, #4
 8011636:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011638:	2b00      	cmp	r3, #0
 801163a:	d004      	beq.n	8011646 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2b7f      	cmp	r3, #127	; 0x7f
 8011644:	d101      	bne.n	801164a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011646:	2300      	movs	r3, #0
 8011648:	e001      	b.n	801164e <ip4_route+0xca>
  }

  return netif_default;
 801164a:	4b05      	ldr	r3, [pc, #20]	; (8011660 <ip4_route+0xdc>)
 801164c:	681b      	ldr	r3, [r3, #0]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3714      	adds	r7, #20
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop
 801165c:	240079c0 	.word	0x240079c0
 8011660:	240079c4 	.word	0x240079c4

08011664 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011672:	f003 0301 	and.w	r3, r3, #1
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d016      	beq.n	80116aa <ip4_input_accept+0x46>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	3304      	adds	r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d011      	beq.n	80116aa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011686:	4b0b      	ldr	r3, [pc, #44]	; (80116b4 <ip4_input_accept+0x50>)
 8011688:	695a      	ldr	r2, [r3, #20]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3304      	adds	r3, #4
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	429a      	cmp	r2, r3
 8011692:	d008      	beq.n	80116a6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011694:	4b07      	ldr	r3, [pc, #28]	; (80116b4 <ip4_input_accept+0x50>)
 8011696:	695b      	ldr	r3, [r3, #20]
 8011698:	6879      	ldr	r1, [r7, #4]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 fa26 	bl	8011aec <ip4_addr_isbroadcast_u32>
 80116a0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d001      	beq.n	80116aa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80116a6:	2301      	movs	r3, #1
 80116a8:	e000      	b.n	80116ac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80116aa:	2300      	movs	r3, #0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	240048f0 	.word	0x240048f0

080116b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80116c2:	2301      	movs	r3, #1
 80116c4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	091b      	lsrs	r3, r3, #4
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	2b04      	cmp	r3, #4
 80116d6:	d004      	beq.n	80116e2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f002 fcdf 	bl	801409c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80116de:	2300      	movs	r3, #0
 80116e0:	e123      	b.n	801192a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	f003 030f 	and.w	r3, r3, #15
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	885b      	ldrh	r3, [r3, #2]
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fc fd8b 	bl	800e214 <lwip_htons>
 80116fe:	4603      	mov	r3, r0
 8011700:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	891b      	ldrh	r3, [r3, #8]
 8011706:	8a3a      	ldrh	r2, [r7, #16]
 8011708:	429a      	cmp	r2, r3
 801170a:	d204      	bcs.n	8011716 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801170c:	8a3b      	ldrh	r3, [r7, #16]
 801170e:	4619      	mov	r1, r3
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f002 fb3d 	bl	8013d90 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	895b      	ldrh	r3, [r3, #10]
 801171a:	8a7a      	ldrh	r2, [r7, #18]
 801171c:	429a      	cmp	r2, r3
 801171e:	d807      	bhi.n	8011730 <ip4_input+0x78>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	891b      	ldrh	r3, [r3, #8]
 8011724:	8a3a      	ldrh	r2, [r7, #16]
 8011726:	429a      	cmp	r2, r3
 8011728:	d802      	bhi.n	8011730 <ip4_input+0x78>
 801172a:	8a7b      	ldrh	r3, [r7, #18]
 801172c:	2b13      	cmp	r3, #19
 801172e:	d804      	bhi.n	801173a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f002 fcb3 	bl	801409c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	e0f7      	b.n	801192a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	4a7d      	ldr	r2, [pc, #500]	; (8011934 <ip4_input+0x27c>)
 8011740:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	4a7b      	ldr	r2, [pc, #492]	; (8011934 <ip4_input+0x27c>)
 8011748:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801174a:	4b7a      	ldr	r3, [pc, #488]	; (8011934 <ip4_input+0x27c>)
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011752:	2be0      	cmp	r3, #224	; 0xe0
 8011754:	d112      	bne.n	801177c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	b2db      	uxtb	r3, r3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d007      	beq.n	8011776 <ip4_input+0xbe>
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	3304      	adds	r3, #4
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <ip4_input+0xbe>
      netif = inp;
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	61bb      	str	r3, [r7, #24]
 8011774:	e02a      	b.n	80117cc <ip4_input+0x114>
    } else {
      netif = NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	61bb      	str	r3, [r7, #24]
 801177a:	e027      	b.n	80117cc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801177c:	6838      	ldr	r0, [r7, #0]
 801177e:	f7ff ff71 	bl	8011664 <ip4_input_accept>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <ip4_input+0xd6>
      netif = inp;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	61bb      	str	r3, [r7, #24]
 801178c:	e01e      	b.n	80117cc <ip4_input+0x114>
    } else {
      netif = NULL;
 801178e:	2300      	movs	r3, #0
 8011790:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011792:	4b68      	ldr	r3, [pc, #416]	; (8011934 <ip4_input+0x27c>)
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	b2db      	uxtb	r3, r3
 8011798:	2b7f      	cmp	r3, #127	; 0x7f
 801179a:	d017      	beq.n	80117cc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801179c:	4b66      	ldr	r3, [pc, #408]	; (8011938 <ip4_input+0x280>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	61bb      	str	r3, [r7, #24]
 80117a2:	e00e      	b.n	80117c2 <ip4_input+0x10a>
          if (netif == inp) {
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d006      	beq.n	80117ba <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80117ac:	69b8      	ldr	r0, [r7, #24]
 80117ae:	f7ff ff59 	bl	8011664 <ip4_input_accept>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d108      	bne.n	80117ca <ip4_input+0x112>
 80117b8:	e000      	b.n	80117bc <ip4_input+0x104>
            continue;
 80117ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	61bb      	str	r3, [r7, #24]
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1ed      	bne.n	80117a4 <ip4_input+0xec>
 80117c8:	e000      	b.n	80117cc <ip4_input+0x114>
            break;
 80117ca:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d111      	bne.n	80117f6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	7a5b      	ldrb	r3, [r3, #9]
 80117d6:	2b11      	cmp	r3, #17
 80117d8:	d10d      	bne.n	80117f6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80117da:	8a7b      	ldrh	r3, [r7, #18]
 80117dc:	69fa      	ldr	r2, [r7, #28]
 80117de:	4413      	add	r3, r2
 80117e0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	885b      	ldrh	r3, [r3, #2]
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80117ec:	d103      	bne.n	80117f6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d017      	beq.n	801182c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80117fc:	4b4d      	ldr	r3, [pc, #308]	; (8011934 <ip4_input+0x27c>)
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d013      	beq.n	801182c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011804:	4b4b      	ldr	r3, [pc, #300]	; (8011934 <ip4_input+0x27c>)
 8011806:	691b      	ldr	r3, [r3, #16]
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	4618      	mov	r0, r3
 801180c:	f000 f96e 	bl	8011aec <ip4_addr_isbroadcast_u32>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d105      	bne.n	8011822 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011816:	4b47      	ldr	r3, [pc, #284]	; (8011934 <ip4_input+0x27c>)
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801181e:	2be0      	cmp	r3, #224	; 0xe0
 8011820:	d104      	bne.n	801182c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f002 fc3a 	bl	801409c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	e07e      	b.n	801192a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801182c:	69bb      	ldr	r3, [r7, #24]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d104      	bne.n	801183c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f002 fc32 	bl	801409c <pbuf_free>
    return ERR_OK;
 8011838:	2300      	movs	r3, #0
 801183a:	e076      	b.n	801192a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801183c:	69fb      	ldr	r3, [r7, #28]
 801183e:	88db      	ldrh	r3, [r3, #6]
 8011840:	b29b      	uxth	r3, r3
 8011842:	461a      	mov	r2, r3
 8011844:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011848:	4013      	ands	r3, r2
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00b      	beq.n	8011866 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 fc92 	bl	8012178 <ip4_reass>
 8011854:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d101      	bne.n	8011860 <ip4_input+0x1a8>
      return ERR_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	e064      	b.n	801192a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011866:	4a33      	ldr	r2, [pc, #204]	; (8011934 <ip4_input+0x27c>)
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801186c:	4a31      	ldr	r2, [pc, #196]	; (8011934 <ip4_input+0x27c>)
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011872:	4a30      	ldr	r2, [pc, #192]	; (8011934 <ip4_input+0x27c>)
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	f003 030f 	and.w	r3, r3, #15
 8011880:	b2db      	uxtb	r3, r3
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	b2db      	uxtb	r3, r3
 8011886:	b29a      	uxth	r2, r3
 8011888:	4b2a      	ldr	r3, [pc, #168]	; (8011934 <ip4_input+0x27c>)
 801188a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801188c:	8a7b      	ldrh	r3, [r7, #18]
 801188e:	4619      	mov	r1, r3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f002 fb7d 	bl	8013f90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	7a5b      	ldrb	r3, [r3, #9]
 801189a:	2b11      	cmp	r3, #17
 801189c:	d006      	beq.n	80118ac <ip4_input+0x1f4>
 801189e:	2b11      	cmp	r3, #17
 80118a0:	dc13      	bgt.n	80118ca <ip4_input+0x212>
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d00c      	beq.n	80118c0 <ip4_input+0x208>
 80118a6:	2b06      	cmp	r3, #6
 80118a8:	d005      	beq.n	80118b6 <ip4_input+0x1fe>
 80118aa:	e00e      	b.n	80118ca <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f009 fce2 	bl	801b278 <udp_input>
        break;
 80118b4:	e026      	b.n	8011904 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80118b6:	6839      	ldr	r1, [r7, #0]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f004 fee7 	bl	801668c <tcp_input>
        break;
 80118be:	e021      	b.n	8011904 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7ff fbd6 	bl	8011074 <icmp_input>
        break;
 80118c8:	e01c      	b.n	8011904 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80118ca:	4b1a      	ldr	r3, [pc, #104]	; (8011934 <ip4_input+0x27c>)
 80118cc:	695b      	ldr	r3, [r3, #20]
 80118ce:	69b9      	ldr	r1, [r7, #24]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f000 f90b 	bl	8011aec <ip4_addr_isbroadcast_u32>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d10f      	bne.n	80118fc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80118dc:	4b15      	ldr	r3, [pc, #84]	; (8011934 <ip4_input+0x27c>)
 80118de:	695b      	ldr	r3, [r3, #20]
 80118e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80118e4:	2be0      	cmp	r3, #224	; 0xe0
 80118e6:	d009      	beq.n	80118fc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80118e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80118ec:	4619      	mov	r1, r3
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f002 fbc1 	bl	8014076 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80118f4:	2102      	movs	r1, #2
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff fcdc 	bl	80112b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f002 fbcd 	bl	801409c <pbuf_free>
        break;
 8011902:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011904:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <ip4_input+0x27c>)
 8011906:	2200      	movs	r2, #0
 8011908:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801190a:	4b0a      	ldr	r3, [pc, #40]	; (8011934 <ip4_input+0x27c>)
 801190c:	2200      	movs	r2, #0
 801190e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011910:	4b08      	ldr	r3, [pc, #32]	; (8011934 <ip4_input+0x27c>)
 8011912:	2200      	movs	r2, #0
 8011914:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <ip4_input+0x27c>)
 8011918:	2200      	movs	r2, #0
 801191a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801191c:	4b05      	ldr	r3, [pc, #20]	; (8011934 <ip4_input+0x27c>)
 801191e:	2200      	movs	r2, #0
 8011920:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011922:	4b04      	ldr	r3, [pc, #16]	; (8011934 <ip4_input+0x27c>)
 8011924:	2200      	movs	r2, #0
 8011926:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3720      	adds	r7, #32
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	240048f0 	.word	0x240048f0
 8011938:	240079c0 	.word	0x240079c0

0801193c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b08a      	sub	sp, #40	; 0x28
 8011940:	af04      	add	r7, sp, #16
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
 8011948:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d009      	beq.n	8011968 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d003      	beq.n	8011962 <ip4_output_if+0x26>
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d102      	bne.n	8011968 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011964:	3304      	adds	r3, #4
 8011966:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011968:	78fa      	ldrb	r2, [r7, #3]
 801196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196c:	9302      	str	r3, [sp, #8]
 801196e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011972:	9301      	str	r3, [sp, #4]
 8011974:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	4613      	mov	r3, r2
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	6979      	ldr	r1, [r7, #20]
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	f000 f805 	bl	8011990 <ip4_output_if_src>
 8011986:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011988:	4618      	mov	r0, r3
 801198a:	3718      	adds	r7, #24
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b088      	sub	sp, #32
 8011994:	af00      	add	r7, sp, #0
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	607a      	str	r2, [r7, #4]
 801199c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	7b9b      	ldrb	r3, [r3, #14]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d006      	beq.n	80119b4 <ip4_output_if_src+0x24>
 80119a6:	4b4b      	ldr	r3, [pc, #300]	; (8011ad4 <ip4_output_if_src+0x144>)
 80119a8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80119ac:	494a      	ldr	r1, [pc, #296]	; (8011ad8 <ip4_output_if_src+0x148>)
 80119ae:	484b      	ldr	r0, [pc, #300]	; (8011adc <ip4_output_if_src+0x14c>)
 80119b0:	f00a fd20 	bl	801c3f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d060      	beq.n	8011a7c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80119ba:	2314      	movs	r3, #20
 80119bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80119be:	2114      	movs	r1, #20
 80119c0:	68f8      	ldr	r0, [r7, #12]
 80119c2:	f002 fad5 	bl	8013f70 <pbuf_add_header>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80119cc:	f06f 0301 	mvn.w	r3, #1
 80119d0:	e07c      	b.n	8011acc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	895b      	ldrh	r3, [r3, #10]
 80119dc:	2b13      	cmp	r3, #19
 80119de:	d806      	bhi.n	80119ee <ip4_output_if_src+0x5e>
 80119e0:	4b3c      	ldr	r3, [pc, #240]	; (8011ad4 <ip4_output_if_src+0x144>)
 80119e2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80119e6:	493e      	ldr	r1, [pc, #248]	; (8011ae0 <ip4_output_if_src+0x150>)
 80119e8:	483c      	ldr	r0, [pc, #240]	; (8011adc <ip4_output_if_src+0x14c>)
 80119ea:	f00a fd03 	bl	801c3f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	78fa      	ldrb	r2, [r7, #3]
 80119f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80119fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011a04:	8b7b      	ldrh	r3, [r7, #26]
 8011a06:	089b      	lsrs	r3, r3, #2
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011a1c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	891b      	ldrh	r3, [r3, #8]
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fc fbf6 	bl	800e214 <lwip_htons>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	2200      	movs	r2, #0
 8011a34:	719a      	strb	r2, [r3, #6]
 8011a36:	2200      	movs	r2, #0
 8011a38:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011a3a:	4b2a      	ldr	r3, [pc, #168]	; (8011ae4 <ip4_output_if_src+0x154>)
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fc fbe8 	bl	800e214 <lwip_htons>
 8011a44:	4603      	mov	r3, r0
 8011a46:	461a      	mov	r2, r3
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011a4c:	4b25      	ldr	r3, [pc, #148]	; (8011ae4 <ip4_output_if_src+0x154>)
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	3301      	adds	r3, #1
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	4b23      	ldr	r3, [pc, #140]	; (8011ae4 <ip4_output_if_src+0x154>)
 8011a56:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d104      	bne.n	8011a68 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011a5e:	4b22      	ldr	r3, [pc, #136]	; (8011ae8 <ip4_output_if_src+0x158>)
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	60da      	str	r2, [r3, #12]
 8011a66:	e003      	b.n	8011a70 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	2200      	movs	r2, #0
 8011a74:	729a      	strb	r2, [r3, #10]
 8011a76:	2200      	movs	r2, #0
 8011a78:	72da      	strb	r2, [r3, #11]
 8011a7a:	e00f      	b.n	8011a9c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	895b      	ldrh	r3, [r3, #10]
 8011a80:	2b13      	cmp	r3, #19
 8011a82:	d802      	bhi.n	8011a8a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a84:	f06f 0301 	mvn.w	r3, #1
 8011a88:	e020      	b.n	8011acc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011a96:	f107 0314 	add.w	r3, r7, #20
 8011a9a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00c      	beq.n	8011abe <ip4_output_if_src+0x12e>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	891a      	ldrh	r2, [r3, #8]
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d906      	bls.n	8011abe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f000 fd4d 	bl	8012554 <ip4_frag>
 8011aba:	4603      	mov	r3, r0
 8011abc:	e006      	b.n	8011acc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	695b      	ldr	r3, [r3, #20]
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	68f9      	ldr	r1, [r7, #12]
 8011ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ac8:	4798      	blx	r3
 8011aca:	4603      	mov	r3, r0
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3720      	adds	r7, #32
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	0802070c 	.word	0x0802070c
 8011ad8:	08020760 	.word	0x08020760
 8011adc:	0802076c 	.word	0x0802076c
 8011ae0:	08020794 	.word	0x08020794
 8011ae4:	240042d6 	.word	0x240042d6
 8011ae8:	080463c8 	.word	0x080463c8

08011aec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b085      	sub	sp, #20
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b00:	d002      	beq.n	8011b08 <ip4_addr_isbroadcast_u32+0x1c>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d101      	bne.n	8011b0c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e02a      	b.n	8011b62 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b12:	f003 0302 	and.w	r3, r3, #2
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	e021      	b.n	8011b62 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	3304      	adds	r3, #4
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d101      	bne.n	8011b2e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	e019      	b.n	8011b62 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011b2e:	68fa      	ldr	r2, [r7, #12]
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	3304      	adds	r3, #4
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	405a      	eors	r2, r3
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	3308      	adds	r3, #8
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4013      	ands	r3, r2
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10d      	bne.n	8011b60 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	3308      	adds	r3, #8
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	43da      	mvns	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	3308      	adds	r3, #8
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d101      	bne.n	8011b60 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011b60:	2300      	movs	r3, #0
  }
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3714      	adds	r7, #20
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr
	...

08011b70 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011b76:	2300      	movs	r3, #0
 8011b78:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011b7a:	4b12      	ldr	r3, [pc, #72]	; (8011bc4 <ip_reass_tmr+0x54>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011b80:	e018      	b.n	8011bb4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	7fdb      	ldrb	r3, [r3, #31]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00b      	beq.n	8011ba2 <ip_reass_tmr+0x32>
      r->timer--;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	7fdb      	ldrb	r3, [r3, #31]
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	e008      	b.n	8011bb4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011bac:	68b9      	ldr	r1, [r7, #8]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 f80a 	bl	8011bc8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d1e3      	bne.n	8011b82 <ip_reass_tmr+0x12>
    }
  }
}
 8011bba:	bf00      	nop
 8011bbc:	bf00      	nop
 8011bbe:	3710      	adds	r7, #16
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	240042d8 	.word	0x240042d8

08011bc8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b088      	sub	sp, #32
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d105      	bne.n	8011bea <ip_reass_free_complete_datagram+0x22>
 8011bde:	4b45      	ldr	r3, [pc, #276]	; (8011cf4 <ip_reass_free_complete_datagram+0x12c>)
 8011be0:	22ab      	movs	r2, #171	; 0xab
 8011be2:	4945      	ldr	r1, [pc, #276]	; (8011cf8 <ip_reass_free_complete_datagram+0x130>)
 8011be4:	4845      	ldr	r0, [pc, #276]	; (8011cfc <ip_reass_free_complete_datagram+0x134>)
 8011be6:	f00a fc05 	bl	801c3f4 <iprintf>
  if (prev != NULL) {
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00a      	beq.n	8011c06 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d005      	beq.n	8011c06 <ip_reass_free_complete_datagram+0x3e>
 8011bfa:	4b3e      	ldr	r3, [pc, #248]	; (8011cf4 <ip_reass_free_complete_datagram+0x12c>)
 8011bfc:	22ad      	movs	r2, #173	; 0xad
 8011bfe:	4940      	ldr	r1, [pc, #256]	; (8011d00 <ip_reass_free_complete_datagram+0x138>)
 8011c00:	483e      	ldr	r0, [pc, #248]	; (8011cfc <ip_reass_free_complete_datagram+0x134>)
 8011c02:	f00a fbf7 	bl	801c3f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	889b      	ldrh	r3, [r3, #4]
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d12a      	bne.n	8011c6e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	6858      	ldr	r0, [r3, #4]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	2214      	movs	r2, #20
 8011c30:	4619      	mov	r1, r3
 8011c32:	f009 ff6d 	bl	801bb10 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011c36:	2101      	movs	r1, #1
 8011c38:	69b8      	ldr	r0, [r7, #24]
 8011c3a:	f7ff fb4b 	bl	80112d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011c3e:	69b8      	ldr	r0, [r7, #24]
 8011c40:	f002 faba 	bl	80141b8 <pbuf_clen>
 8011c44:	4603      	mov	r3, r0
 8011c46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011c48:	8bfa      	ldrh	r2, [r7, #30]
 8011c4a:	8a7b      	ldrh	r3, [r7, #18]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c52:	db05      	blt.n	8011c60 <ip_reass_free_complete_datagram+0x98>
 8011c54:	4b27      	ldr	r3, [pc, #156]	; (8011cf4 <ip_reass_free_complete_datagram+0x12c>)
 8011c56:	22bc      	movs	r2, #188	; 0xbc
 8011c58:	492a      	ldr	r1, [pc, #168]	; (8011d04 <ip_reass_free_complete_datagram+0x13c>)
 8011c5a:	4828      	ldr	r0, [pc, #160]	; (8011cfc <ip_reass_free_complete_datagram+0x134>)
 8011c5c:	f00a fbca 	bl	801c3f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011c60:	8bfa      	ldrh	r2, [r7, #30]
 8011c62:	8a7b      	ldrh	r3, [r7, #18]
 8011c64:	4413      	add	r3, r2
 8011c66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011c68:	69b8      	ldr	r0, [r7, #24]
 8011c6a:	f002 fa17 	bl	801409c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011c74:	e01f      	b.n	8011cb6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f002 fa96 	bl	80141b8 <pbuf_clen>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011c90:	8bfa      	ldrh	r2, [r7, #30]
 8011c92:	8a7b      	ldrh	r3, [r7, #18]
 8011c94:	4413      	add	r3, r2
 8011c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c9a:	db05      	blt.n	8011ca8 <ip_reass_free_complete_datagram+0xe0>
 8011c9c:	4b15      	ldr	r3, [pc, #84]	; (8011cf4 <ip_reass_free_complete_datagram+0x12c>)
 8011c9e:	22cc      	movs	r2, #204	; 0xcc
 8011ca0:	4918      	ldr	r1, [pc, #96]	; (8011d04 <ip_reass_free_complete_datagram+0x13c>)
 8011ca2:	4816      	ldr	r0, [pc, #88]	; (8011cfc <ip_reass_free_complete_datagram+0x134>)
 8011ca4:	f00a fba6 	bl	801c3f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ca8:	8bfa      	ldrh	r2, [r7, #30]
 8011caa:	8a7b      	ldrh	r3, [r7, #18]
 8011cac:	4413      	add	r3, r2
 8011cae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f002 f9f3 	bl	801409c <pbuf_free>
  while (p != NULL) {
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d1dc      	bne.n	8011c76 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011cbc:	6839      	ldr	r1, [r7, #0]
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 f8c2 	bl	8011e48 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011cc4:	4b10      	ldr	r3, [pc, #64]	; (8011d08 <ip_reass_free_complete_datagram+0x140>)
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	8bfa      	ldrh	r2, [r7, #30]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d905      	bls.n	8011cda <ip_reass_free_complete_datagram+0x112>
 8011cce:	4b09      	ldr	r3, [pc, #36]	; (8011cf4 <ip_reass_free_complete_datagram+0x12c>)
 8011cd0:	22d2      	movs	r2, #210	; 0xd2
 8011cd2:	490e      	ldr	r1, [pc, #56]	; (8011d0c <ip_reass_free_complete_datagram+0x144>)
 8011cd4:	4809      	ldr	r0, [pc, #36]	; (8011cfc <ip_reass_free_complete_datagram+0x134>)
 8011cd6:	f00a fb8d 	bl	801c3f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011cda:	4b0b      	ldr	r3, [pc, #44]	; (8011d08 <ip_reass_free_complete_datagram+0x140>)
 8011cdc:	881a      	ldrh	r2, [r3, #0]
 8011cde:	8bfb      	ldrh	r3, [r7, #30]
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	4b08      	ldr	r3, [pc, #32]	; (8011d08 <ip_reass_free_complete_datagram+0x140>)
 8011ce6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011ce8:	8bfb      	ldrh	r3, [r7, #30]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	080207c4 	.word	0x080207c4
 8011cf8:	0802081c 	.word	0x0802081c
 8011cfc:	08020828 	.word	0x08020828
 8011d00:	08020850 	.word	0x08020850
 8011d04:	08020864 	.word	0x08020864
 8011d08:	240042dc 	.word	0x240042dc
 8011d0c:	08020884 	.word	0x08020884

08011d10 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b08a      	sub	sp, #40	; 0x28
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011d22:	2300      	movs	r3, #0
 8011d24:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011d26:	2300      	movs	r3, #0
 8011d28:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011d2e:	4b28      	ldr	r3, [pc, #160]	; (8011dd0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011d34:	e030      	b.n	8011d98 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	695a      	ldr	r2, [r3, #20]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d10c      	bne.n	8011d5c <ip_reass_remove_oldest_datagram+0x4c>
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	699a      	ldr	r2, [r3, #24]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d106      	bne.n	8011d5c <ip_reass_remove_oldest_datagram+0x4c>
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	899a      	ldrh	r2, [r3, #12]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	889b      	ldrh	r3, [r3, #4]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d014      	beq.n	8011d86 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	3301      	adds	r3, #1
 8011d60:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011d62:	6a3b      	ldr	r3, [r7, #32]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d104      	bne.n	8011d72 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	61bb      	str	r3, [r7, #24]
 8011d70:	e009      	b.n	8011d86 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d74:	7fda      	ldrb	r2, [r3, #31]
 8011d76:	6a3b      	ldr	r3, [r7, #32]
 8011d78:	7fdb      	ldrb	r3, [r3, #31]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d803      	bhi.n	8011d86 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d1cb      	bne.n	8011d36 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011d9e:	6a3b      	ldr	r3, [r7, #32]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d008      	beq.n	8011db6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011da4:	69b9      	ldr	r1, [r7, #24]
 8011da6:	6a38      	ldr	r0, [r7, #32]
 8011da8:	f7ff ff0e 	bl	8011bc8 <ip_reass_free_complete_datagram>
 8011dac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011dae:	697a      	ldr	r2, [r7, #20]
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	4413      	add	r3, r2
 8011db4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	da02      	bge.n	8011dc4 <ip_reass_remove_oldest_datagram+0xb4>
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	dcac      	bgt.n	8011d1e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011dc4:	697b      	ldr	r3, [r7, #20]
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3728      	adds	r7, #40	; 0x28
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	240042d8 	.word	0x240042d8

08011dd4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011dde:	2004      	movs	r0, #4
 8011de0:	f001 f99c 	bl	801311c <memp_malloc>
 8011de4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d110      	bne.n	8011e0e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011dec:	6839      	ldr	r1, [r7, #0]
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7ff ff8e 	bl	8011d10 <ip_reass_remove_oldest_datagram>
 8011df4:	4602      	mov	r2, r0
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	dc03      	bgt.n	8011e04 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011dfc:	2004      	movs	r0, #4
 8011dfe:	f001 f98d 	bl	801311c <memp_malloc>
 8011e02:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e016      	b.n	8011e3c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011e0e:	2220      	movs	r2, #32
 8011e10:	2100      	movs	r1, #0
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f009 fea4 	bl	801bb60 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	220f      	movs	r2, #15
 8011e1c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011e1e:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <ip_reass_enqueue_new_datagram+0x70>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011e26:	4a07      	ldr	r2, [pc, #28]	; (8011e44 <ip_reass_enqueue_new_datagram+0x70>)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	3308      	adds	r3, #8
 8011e30:	2214      	movs	r2, #20
 8011e32:	6879      	ldr	r1, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f009 fe6b 	bl	801bb10 <memcpy>
  return ipr;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	240042d8 	.word	0x240042d8

08011e48 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011e52:	4b10      	ldr	r3, [pc, #64]	; (8011e94 <ip_reass_dequeue_datagram+0x4c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d104      	bne.n	8011e66 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4a0c      	ldr	r2, [pc, #48]	; (8011e94 <ip_reass_dequeue_datagram+0x4c>)
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	e00d      	b.n	8011e82 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d106      	bne.n	8011e7a <ip_reass_dequeue_datagram+0x32>
 8011e6c:	4b0a      	ldr	r3, [pc, #40]	; (8011e98 <ip_reass_dequeue_datagram+0x50>)
 8011e6e:	f240 1245 	movw	r2, #325	; 0x145
 8011e72:	490a      	ldr	r1, [pc, #40]	; (8011e9c <ip_reass_dequeue_datagram+0x54>)
 8011e74:	480a      	ldr	r0, [pc, #40]	; (8011ea0 <ip_reass_dequeue_datagram+0x58>)
 8011e76:	f00a fabd 	bl	801c3f4 <iprintf>
    prev->next = ipr->next;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011e82:	6879      	ldr	r1, [r7, #4]
 8011e84:	2004      	movs	r0, #4
 8011e86:	f001 f9bf 	bl	8013208 <memp_free>
}
 8011e8a:	bf00      	nop
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	240042d8 	.word	0x240042d8
 8011e98:	080207c4 	.word	0x080207c4
 8011e9c:	080208a8 	.word	0x080208a8
 8011ea0:	08020828 	.word	0x08020828

08011ea4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b08c      	sub	sp, #48	; 0x30
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	885b      	ldrh	r3, [r3, #2]
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7fc f9a5 	bl	800e214 <lwip_htons>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	f003 030f 	and.w	r3, r3, #15
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011edc:	7e7b      	ldrb	r3, [r7, #25]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	8b7a      	ldrh	r2, [r7, #26]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d202      	bcs.n	8011eec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eea:	e135      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011eec:	7e7b      	ldrb	r3, [r7, #25]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	8b7a      	ldrh	r2, [r7, #26]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	88db      	ldrh	r3, [r3, #6]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7fc f989 	bl	800e214 <lwip_htons>
 8011f02:	4603      	mov	r3, r0
 8011f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	00db      	lsls	r3, r3, #3
 8011f0c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	2200      	movs	r2, #0
 8011f18:	701a      	strb	r2, [r3, #0]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	705a      	strb	r2, [r3, #1]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	709a      	strb	r2, [r3, #2]
 8011f22:	2200      	movs	r2, #0
 8011f24:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	8afa      	ldrh	r2, [r7, #22]
 8011f2a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011f2c:	8afa      	ldrh	r2, [r7, #22]
 8011f2e:	8b7b      	ldrh	r3, [r7, #26]
 8011f30:	4413      	add	r3, r2
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f36:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3a:	88db      	ldrh	r3, [r3, #6]
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	8afa      	ldrh	r2, [r7, #22]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d902      	bls.n	8011f4a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f44:	f04f 33ff 	mov.w	r3, #4294967295
 8011f48:	e106      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f50:	e068      	b.n	8012024 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5a:	889b      	ldrh	r3, [r3, #4]
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	889b      	ldrh	r3, [r3, #4]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d235      	bcs.n	8011fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d020      	beq.n	8011fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	889b      	ldrh	r3, [r3, #4]
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7c:	88db      	ldrh	r3, [r3, #6]
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d307      	bcc.n	8011f94 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f86:	88db      	ldrh	r3, [r3, #6]
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	889b      	ldrh	r3, [r3, #4]
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d902      	bls.n	8011f9a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f94:	f04f 33ff 	mov.w	r3, #4294967295
 8011f98:	e0de      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	68ba      	ldr	r2, [r7, #8]
 8011f9e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	88db      	ldrh	r3, [r3, #6]
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa8:	889b      	ldrh	r3, [r3, #4]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d03d      	beq.n	801202c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011fb4:	e03a      	b.n	801202c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb8:	88db      	ldrh	r3, [r3, #6]
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	889b      	ldrh	r3, [r3, #4]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d902      	bls.n	8011fcc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fca:	e0c5      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	605a      	str	r2, [r3, #4]
      break;
 8011fd2:	e02b      	b.n	801202c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd6:	889b      	ldrh	r3, [r3, #4]
 8011fd8:	b29a      	uxth	r2, r3
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	889b      	ldrh	r3, [r3, #4]
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d102      	bne.n	8011fea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe8:	e0b6      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	889b      	ldrh	r3, [r3, #4]
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	88db      	ldrh	r3, [r3, #6]
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d202      	bcs.n	8012000 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8011ffe:	e0ab      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012002:	2b00      	cmp	r3, #0
 8012004:	d009      	beq.n	801201a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012008:	88db      	ldrh	r3, [r3, #6]
 801200a:	b29a      	uxth	r2, r3
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	889b      	ldrh	r3, [r3, #4]
 8012010:	b29b      	uxth	r3, r3
 8012012:	429a      	cmp	r2, r3
 8012014:	d001      	beq.n	801201a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012016:	2300      	movs	r3, #0
 8012018:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	2b00      	cmp	r3, #0
 8012028:	d193      	bne.n	8011f52 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801202a:	e000      	b.n	801202e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801202c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012030:	2b00      	cmp	r3, #0
 8012032:	d12d      	bne.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	2b00      	cmp	r3, #0
 8012038:	d01c      	beq.n	8012074 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	88db      	ldrh	r3, [r3, #6]
 801203e:	b29a      	uxth	r2, r3
 8012040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012042:	889b      	ldrh	r3, [r3, #4]
 8012044:	b29b      	uxth	r3, r3
 8012046:	429a      	cmp	r2, r3
 8012048:	d906      	bls.n	8012058 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801204a:	4b45      	ldr	r3, [pc, #276]	; (8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801204c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012050:	4944      	ldr	r1, [pc, #272]	; (8012164 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012052:	4845      	ldr	r0, [pc, #276]	; (8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012054:	f00a f9ce 	bl	801c3f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205a:	68ba      	ldr	r2, [r7, #8]
 801205c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	88db      	ldrh	r3, [r3, #6]
 8012062:	b29a      	uxth	r2, r3
 8012064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012066:	889b      	ldrh	r3, [r3, #4]
 8012068:	b29b      	uxth	r3, r3
 801206a:	429a      	cmp	r2, r3
 801206c:	d010      	beq.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	623b      	str	r3, [r7, #32]
 8012072:	e00d      	b.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d006      	beq.n	801208a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801207c:	4b38      	ldr	r3, [pc, #224]	; (8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801207e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012082:	493a      	ldr	r1, [pc, #232]	; (801216c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012084:	4838      	ldr	r0, [pc, #224]	; (8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012086:	f00a f9b5 	bl	801c3f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	68ba      	ldr	r2, [r7, #8]
 801208e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d105      	bne.n	80120a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	7f9b      	ldrb	r3, [r3, #30]
 801209a:	f003 0301 	and.w	r3, r3, #1
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d059      	beq.n	8012156 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80120a2:	6a3b      	ldr	r3, [r7, #32]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d04f      	beq.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d006      	beq.n	80120be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	889b      	ldrh	r3, [r3, #4]
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	623b      	str	r3, [r7, #32]
 80120c2:	e041      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80120c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80120ce:	e012      	b.n	80120f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80120d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d8:	88db      	ldrh	r3, [r3, #6]
 80120da:	b29a      	uxth	r2, r3
 80120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120de:	889b      	ldrh	r3, [r3, #4]
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d002      	beq.n	80120ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	623b      	str	r3, [r7, #32]
            break;
 80120ea:	e007      	b.n	80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80120ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e9      	bne.n	80120d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d022      	beq.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801210a:	4b15      	ldr	r3, [pc, #84]	; (8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801210c:	f240 12df 	movw	r2, #479	; 0x1df
 8012110:	4917      	ldr	r1, [pc, #92]	; (8012170 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012112:	4815      	ldr	r0, [pc, #84]	; (8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012114:	f00a f96e 	bl	801c3f4 <iprintf>
          LWIP_ASSERT("sanity check",
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012120:	429a      	cmp	r2, r3
 8012122:	d106      	bne.n	8012132 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012124:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012126:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801212a:	4911      	ldr	r1, [pc, #68]	; (8012170 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801212c:	480e      	ldr	r0, [pc, #56]	; (8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801212e:	f00a f961 	bl	801c3f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d006      	beq.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801213a:	4b09      	ldr	r3, [pc, #36]	; (8012160 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801213c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012140:	490c      	ldr	r1, [pc, #48]	; (8012174 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012142:	4809      	ldr	r0, [pc, #36]	; (8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012144:	f00a f956 	bl	801c3f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	2b00      	cmp	r3, #0
 801214c:	bf14      	ite	ne
 801214e:	2301      	movne	r3, #1
 8012150:	2300      	moveq	r3, #0
 8012152:	b2db      	uxtb	r3, r3
 8012154:	e000      	b.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012156:	2300      	movs	r3, #0
}
 8012158:	4618      	mov	r0, r3
 801215a:	3730      	adds	r7, #48	; 0x30
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	080207c4 	.word	0x080207c4
 8012164:	080208c4 	.word	0x080208c4
 8012168:	08020828 	.word	0x08020828
 801216c:	080208e4 	.word	0x080208e4
 8012170:	0802091c 	.word	0x0802091c
 8012174:	0802092c 	.word	0x0802092c

08012178 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b08e      	sub	sp, #56	; 0x38
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	f003 030f 	and.w	r3, r3, #15
 801218e:	b2db      	uxtb	r3, r3
 8012190:	009b      	lsls	r3, r3, #2
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b14      	cmp	r3, #20
 8012196:	f040 8167 	bne.w	8012468 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	88db      	ldrh	r3, [r3, #6]
 801219e:	b29b      	uxth	r3, r3
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fc f837 	bl	800e214 <lwip_htons>
 80121a6:	4603      	mov	r3, r0
 80121a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	00db      	lsls	r3, r3, #3
 80121b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80121b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b4:	885b      	ldrh	r3, [r3, #2]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fc f82b 	bl	800e214 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	f003 030f 	and.w	r3, r3, #15
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	009b      	lsls	r3, r3, #2
 80121ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80121d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121da:	429a      	cmp	r2, r3
 80121dc:	f0c0 8146 	bcc.w	801246c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80121e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f001 ffe3 	bl	80141b8 <pbuf_clen>
 80121f2:	4603      	mov	r3, r0
 80121f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80121f6:	4b9f      	ldr	r3, [pc, #636]	; (8012474 <ip4_reass+0x2fc>)
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	461a      	mov	r2, r3
 80121fc:	8c3b      	ldrh	r3, [r7, #32]
 80121fe:	4413      	add	r3, r2
 8012200:	2b0a      	cmp	r3, #10
 8012202:	dd10      	ble.n	8012226 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012204:	8c3b      	ldrh	r3, [r7, #32]
 8012206:	4619      	mov	r1, r3
 8012208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801220a:	f7ff fd81 	bl	8011d10 <ip_reass_remove_oldest_datagram>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	f000 812d 	beq.w	8012470 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012216:	4b97      	ldr	r3, [pc, #604]	; (8012474 <ip4_reass+0x2fc>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	461a      	mov	r2, r3
 801221c:	8c3b      	ldrh	r3, [r7, #32]
 801221e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012220:	2b0a      	cmp	r3, #10
 8012222:	f300 8125 	bgt.w	8012470 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012226:	4b94      	ldr	r3, [pc, #592]	; (8012478 <ip4_reass+0x300>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	633b      	str	r3, [r7, #48]	; 0x30
 801222c:	e015      	b.n	801225a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012230:	695a      	ldr	r2, [r3, #20]
 8012232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	429a      	cmp	r2, r3
 8012238:	d10c      	bne.n	8012254 <ip4_reass+0xdc>
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	699a      	ldr	r2, [r3, #24]
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	429a      	cmp	r2, r3
 8012244:	d106      	bne.n	8012254 <ip4_reass+0xdc>
 8012246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012248:	899a      	ldrh	r2, [r3, #12]
 801224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224c:	889b      	ldrh	r3, [r3, #4]
 801224e:	b29b      	uxth	r3, r3
 8012250:	429a      	cmp	r2, r3
 8012252:	d006      	beq.n	8012262 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	633b      	str	r3, [r7, #48]	; 0x30
 801225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1e6      	bne.n	801222e <ip4_reass+0xb6>
 8012260:	e000      	b.n	8012264 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012262:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	2b00      	cmp	r3, #0
 8012268:	d109      	bne.n	801227e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801226a:	8c3b      	ldrh	r3, [r7, #32]
 801226c:	4619      	mov	r1, r3
 801226e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012270:	f7ff fdb0 	bl	8011dd4 <ip_reass_enqueue_new_datagram>
 8012274:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	2b00      	cmp	r3, #0
 801227a:	d11c      	bne.n	80122b6 <ip4_reass+0x13e>
      goto nullreturn;
 801227c:	e109      	b.n	8012492 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012280:	88db      	ldrh	r3, [r3, #6]
 8012282:	b29b      	uxth	r3, r3
 8012284:	4618      	mov	r0, r3
 8012286:	f7fb ffc5 	bl	800e214 <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012290:	2b00      	cmp	r3, #0
 8012292:	d110      	bne.n	80122b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012296:	89db      	ldrh	r3, [r3, #14]
 8012298:	4618      	mov	r0, r3
 801229a:	f7fb ffbb 	bl	800e214 <lwip_htons>
 801229e:	4603      	mov	r3, r0
 80122a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d006      	beq.n	80122b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80122a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122aa:	3308      	adds	r3, #8
 80122ac:	2214      	movs	r2, #20
 80122ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122b0:	4618      	mov	r0, r3
 80122b2:	f009 fc2d 	bl	801bb10 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	88db      	ldrh	r3, [r3, #6]
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	f003 0320 	and.w	r3, r3, #32
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bf0c      	ite	eq
 80122c4:	2301      	moveq	r3, #1
 80122c6:	2300      	movne	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00e      	beq.n	80122f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80122d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80122d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d6:	4413      	add	r3, r2
 80122d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80122da:	8b7a      	ldrh	r2, [r7, #26]
 80122dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122de:	429a      	cmp	r2, r3
 80122e0:	f0c0 80a0 	bcc.w	8012424 <ip4_reass+0x2ac>
 80122e4:	8b7b      	ldrh	r3, [r7, #26]
 80122e6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80122ea:	4293      	cmp	r3, r2
 80122ec:	f200 809a 	bhi.w	8012424 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80122f0:	69fa      	ldr	r2, [r7, #28]
 80122f2:	6879      	ldr	r1, [r7, #4]
 80122f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f6:	f7ff fdd5 	bl	8011ea4 <ip_reass_chain_frag_into_datagram_and_validate>
 80122fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012302:	f000 8091 	beq.w	8012428 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012306:	4b5b      	ldr	r3, [pc, #364]	; (8012474 <ip4_reass+0x2fc>)
 8012308:	881a      	ldrh	r2, [r3, #0]
 801230a:	8c3b      	ldrh	r3, [r7, #32]
 801230c:	4413      	add	r3, r2
 801230e:	b29a      	uxth	r2, r3
 8012310:	4b58      	ldr	r3, [pc, #352]	; (8012474 <ip4_reass+0x2fc>)
 8012312:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00d      	beq.n	8012336 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801231a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801231c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801231e:	4413      	add	r3, r2
 8012320:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012324:	8a7a      	ldrh	r2, [r7, #18]
 8012326:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232a:	7f9b      	ldrb	r3, [r3, #30]
 801232c:	f043 0301 	orr.w	r3, r3, #1
 8012330:	b2da      	uxtb	r2, r3
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d171      	bne.n	8012420 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801233e:	8b9b      	ldrh	r3, [r3, #28]
 8012340:	3314      	adds	r3, #20
 8012342:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	3308      	adds	r3, #8
 801235a:	2214      	movs	r2, #20
 801235c:	4619      	mov	r1, r3
 801235e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012360:	f009 fbd6 	bl	801bb10 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012364:	8a3b      	ldrh	r3, [r7, #16]
 8012366:	4618      	mov	r0, r3
 8012368:	f7fb ff54 	bl	800e214 <lwip_htons>
 801236c:	4603      	mov	r3, r0
 801236e:	461a      	mov	r2, r3
 8012370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012372:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	2200      	movs	r2, #0
 8012378:	719a      	strb	r2, [r3, #6]
 801237a:	2200      	movs	r2, #0
 801237c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012380:	2200      	movs	r2, #0
 8012382:	729a      	strb	r2, [r3, #10]
 8012384:	2200      	movs	r2, #0
 8012386:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801238e:	e00d      	b.n	80123ac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012396:	2114      	movs	r1, #20
 8012398:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801239a:	f001 fdf9 	bl	8013f90 <pbuf_remove_header>
      pbuf_cat(p, r);
 801239e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f001 ff49 	bl	8014238 <pbuf_cat>
      r = iprh->next_pbuf;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80123ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1ee      	bne.n	8012390 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80123b2:	4b31      	ldr	r3, [pc, #196]	; (8012478 <ip4_reass+0x300>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d102      	bne.n	80123c2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80123bc:	2300      	movs	r3, #0
 80123be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123c0:	e010      	b.n	80123e4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80123c2:	4b2d      	ldr	r3, [pc, #180]	; (8012478 <ip4_reass+0x300>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123c8:	e007      	b.n	80123da <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80123ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d006      	beq.n	80123e2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1f4      	bne.n	80123ca <ip4_reass+0x252>
 80123e0:	e000      	b.n	80123e4 <ip4_reass+0x26c>
          break;
 80123e2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80123e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123e8:	f7ff fd2e 	bl	8011e48 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f001 fee3 	bl	80141b8 <pbuf_clen>
 80123f2:	4603      	mov	r3, r0
 80123f4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80123f6:	4b1f      	ldr	r3, [pc, #124]	; (8012474 <ip4_reass+0x2fc>)
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	8c3a      	ldrh	r2, [r7, #32]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d906      	bls.n	801240e <ip4_reass+0x296>
 8012400:	4b1e      	ldr	r3, [pc, #120]	; (801247c <ip4_reass+0x304>)
 8012402:	f240 229b 	movw	r2, #667	; 0x29b
 8012406:	491e      	ldr	r1, [pc, #120]	; (8012480 <ip4_reass+0x308>)
 8012408:	481e      	ldr	r0, [pc, #120]	; (8012484 <ip4_reass+0x30c>)
 801240a:	f009 fff3 	bl	801c3f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801240e:	4b19      	ldr	r3, [pc, #100]	; (8012474 <ip4_reass+0x2fc>)
 8012410:	881a      	ldrh	r2, [r3, #0]
 8012412:	8c3b      	ldrh	r3, [r7, #32]
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	b29a      	uxth	r2, r3
 8012418:	4b16      	ldr	r3, [pc, #88]	; (8012474 <ip4_reass+0x2fc>)
 801241a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	e03c      	b.n	801249a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012420:	2300      	movs	r3, #0
 8012422:	e03a      	b.n	801249a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012424:	bf00      	nop
 8012426:	e000      	b.n	801242a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012428:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242c:	2b00      	cmp	r3, #0
 801242e:	d106      	bne.n	801243e <ip4_reass+0x2c6>
 8012430:	4b12      	ldr	r3, [pc, #72]	; (801247c <ip4_reass+0x304>)
 8012432:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012436:	4914      	ldr	r1, [pc, #80]	; (8012488 <ip4_reass+0x310>)
 8012438:	4812      	ldr	r0, [pc, #72]	; (8012484 <ip4_reass+0x30c>)
 801243a:	f009 ffdb 	bl	801c3f4 <iprintf>
  if (ipr->p == NULL) {
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d124      	bne.n	8012490 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012446:	4b0c      	ldr	r3, [pc, #48]	; (8012478 <ip4_reass+0x300>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801244c:	429a      	cmp	r2, r3
 801244e:	d006      	beq.n	801245e <ip4_reass+0x2e6>
 8012450:	4b0a      	ldr	r3, [pc, #40]	; (801247c <ip4_reass+0x304>)
 8012452:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012456:	490d      	ldr	r1, [pc, #52]	; (801248c <ip4_reass+0x314>)
 8012458:	480a      	ldr	r0, [pc, #40]	; (8012484 <ip4_reass+0x30c>)
 801245a:	f009 ffcb 	bl	801c3f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801245e:	2100      	movs	r1, #0
 8012460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012462:	f7ff fcf1 	bl	8011e48 <ip_reass_dequeue_datagram>
 8012466:	e014      	b.n	8012492 <ip4_reass+0x31a>
    goto nullreturn;
 8012468:	bf00      	nop
 801246a:	e012      	b.n	8012492 <ip4_reass+0x31a>
    goto nullreturn;
 801246c:	bf00      	nop
 801246e:	e010      	b.n	8012492 <ip4_reass+0x31a>
      goto nullreturn;
 8012470:	bf00      	nop
 8012472:	e00e      	b.n	8012492 <ip4_reass+0x31a>
 8012474:	240042dc 	.word	0x240042dc
 8012478:	240042d8 	.word	0x240042d8
 801247c:	080207c4 	.word	0x080207c4
 8012480:	08020950 	.word	0x08020950
 8012484:	08020828 	.word	0x08020828
 8012488:	0802096c 	.word	0x0802096c
 801248c:	08020978 	.word	0x08020978
  }

nullreturn:
 8012490:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f001 fe02 	bl	801409c <pbuf_free>
  return NULL;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3738      	adds	r7, #56	; 0x38
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop

080124a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80124a8:	2005      	movs	r0, #5
 80124aa:	f000 fe37 	bl	801311c <memp_malloc>
 80124ae:	4603      	mov	r3, r0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80124c2:	4b07      	ldr	r3, [pc, #28]	; (80124e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80124c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80124c8:	4906      	ldr	r1, [pc, #24]	; (80124e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80124ca:	4807      	ldr	r0, [pc, #28]	; (80124e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80124cc:	f009 ff92 	bl	801c3f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	2005      	movs	r0, #5
 80124d4:	f000 fe98 	bl	8013208 <memp_free>
}
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	080207c4 	.word	0x080207c4
 80124e4:	08020998 	.word	0x08020998
 80124e8:	08020828 	.word	0x08020828

080124ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d106      	bne.n	801250c <ipfrag_free_pbuf_custom+0x20>
 80124fe:	4b11      	ldr	r3, [pc, #68]	; (8012544 <ipfrag_free_pbuf_custom+0x58>)
 8012500:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012504:	4910      	ldr	r1, [pc, #64]	; (8012548 <ipfrag_free_pbuf_custom+0x5c>)
 8012506:	4811      	ldr	r0, [pc, #68]	; (801254c <ipfrag_free_pbuf_custom+0x60>)
 8012508:	f009 ff74 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	429a      	cmp	r2, r3
 8012512:	d006      	beq.n	8012522 <ipfrag_free_pbuf_custom+0x36>
 8012514:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <ipfrag_free_pbuf_custom+0x58>)
 8012516:	f240 22cf 	movw	r2, #719	; 0x2cf
 801251a:	490d      	ldr	r1, [pc, #52]	; (8012550 <ipfrag_free_pbuf_custom+0x64>)
 801251c:	480b      	ldr	r0, [pc, #44]	; (801254c <ipfrag_free_pbuf_custom+0x60>)
 801251e:	f009 ff69 	bl	801c3f4 <iprintf>
  if (pcr->original != NULL) {
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	695b      	ldr	r3, [r3, #20]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d004      	beq.n	8012534 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	695b      	ldr	r3, [r3, #20]
 801252e:	4618      	mov	r0, r3
 8012530:	f001 fdb4 	bl	801409c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f7ff ffbd 	bl	80124b4 <ip_frag_free_pbuf_custom_ref>
}
 801253a:	bf00      	nop
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	080207c4 	.word	0x080207c4
 8012548:	080209a4 	.word	0x080209a4
 801254c:	08020828 	.word	0x08020828
 8012550:	080209b0 	.word	0x080209b0

08012554 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b094      	sub	sp, #80	; 0x50
 8012558:	af02      	add	r7, sp, #8
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801256a:	3b14      	subs	r3, #20
 801256c:	2b00      	cmp	r3, #0
 801256e:	da00      	bge.n	8012572 <ip4_frag+0x1e>
 8012570:	3307      	adds	r3, #7
 8012572:	10db      	asrs	r3, r3, #3
 8012574:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012576:	2314      	movs	r3, #20
 8012578:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012582:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	f003 030f 	and.w	r3, r3, #15
 801258c:	b2db      	uxtb	r3, r3
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	b2db      	uxtb	r3, r3
 8012592:	2b14      	cmp	r3, #20
 8012594:	d002      	beq.n	801259c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012596:	f06f 0305 	mvn.w	r3, #5
 801259a:	e110      	b.n	80127be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	895b      	ldrh	r3, [r3, #10]
 80125a0:	2b13      	cmp	r3, #19
 80125a2:	d809      	bhi.n	80125b8 <ip4_frag+0x64>
 80125a4:	4b88      	ldr	r3, [pc, #544]	; (80127c8 <ip4_frag+0x274>)
 80125a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80125aa:	4988      	ldr	r1, [pc, #544]	; (80127cc <ip4_frag+0x278>)
 80125ac:	4888      	ldr	r0, [pc, #544]	; (80127d0 <ip4_frag+0x27c>)
 80125ae:	f009 ff21 	bl	801c3f4 <iprintf>
 80125b2:	f06f 0305 	mvn.w	r3, #5
 80125b6:	e102      	b.n	80127be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80125b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ba:	88db      	ldrh	r3, [r3, #6]
 80125bc:	b29b      	uxth	r3, r3
 80125be:	4618      	mov	r0, r3
 80125c0:	f7fb fe28 	bl	800e214 <lwip_htons>
 80125c4:	4603      	mov	r3, r0
 80125c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80125c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80125d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	891b      	ldrh	r3, [r3, #8]
 80125de:	3b14      	subs	r3, #20
 80125e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80125e4:	e0e1      	b.n	80127aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80125e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80125e8:	00db      	lsls	r3, r3, #3
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125f0:	4293      	cmp	r3, r2
 80125f2:	bf28      	it	cs
 80125f4:	4613      	movcs	r3, r2
 80125f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80125f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125fc:	2114      	movs	r1, #20
 80125fe:	200e      	movs	r0, #14
 8012600:	f001 fa68 	bl	8013ad4 <pbuf_alloc>
 8012604:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 80d5 	beq.w	80127b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	895b      	ldrh	r3, [r3, #10]
 8012612:	2b13      	cmp	r3, #19
 8012614:	d806      	bhi.n	8012624 <ip4_frag+0xd0>
 8012616:	4b6c      	ldr	r3, [pc, #432]	; (80127c8 <ip4_frag+0x274>)
 8012618:	f44f 7249 	mov.w	r2, #804	; 0x324
 801261c:	496d      	ldr	r1, [pc, #436]	; (80127d4 <ip4_frag+0x280>)
 801261e:	486c      	ldr	r0, [pc, #432]	; (80127d0 <ip4_frag+0x27c>)
 8012620:	f009 fee8 	bl	801c3f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	2214      	movs	r2, #20
 801262a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801262c:	4618      	mov	r0, r3
 801262e:	f009 fa6f 	bl	801bb10 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012638:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801263a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801263e:	e064      	b.n	801270a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	895a      	ldrh	r2, [r3, #10]
 8012644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	895b      	ldrh	r3, [r3, #10]
 801264e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012650:	429a      	cmp	r2, r3
 8012652:	d906      	bls.n	8012662 <ip4_frag+0x10e>
 8012654:	4b5c      	ldr	r3, [pc, #368]	; (80127c8 <ip4_frag+0x274>)
 8012656:	f240 322d 	movw	r2, #813	; 0x32d
 801265a:	495f      	ldr	r1, [pc, #380]	; (80127d8 <ip4_frag+0x284>)
 801265c:	485c      	ldr	r0, [pc, #368]	; (80127d0 <ip4_frag+0x27c>)
 801265e:	f009 fec9 	bl	801c3f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012662:	8bfa      	ldrh	r2, [r7, #30]
 8012664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012668:	4293      	cmp	r3, r2
 801266a:	bf28      	it	cs
 801266c:	4613      	movcs	r3, r2
 801266e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012676:	2b00      	cmp	r3, #0
 8012678:	d105      	bne.n	8012686 <ip4_frag+0x132>
        poff = 0;
 801267a:	2300      	movs	r3, #0
 801267c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	60fb      	str	r3, [r7, #12]
        continue;
 8012684:	e041      	b.n	801270a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012686:	f7ff ff0d 	bl	80124a4 <ip_frag_alloc_pbuf_custom_ref>
 801268a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d103      	bne.n	801269a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012694:	f001 fd02 	bl	801409c <pbuf_free>
        goto memerr;
 8012698:	e08f      	b.n	80127ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801269a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80126a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126a2:	4413      	add	r3, r2
 80126a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80126a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80126ac:	9201      	str	r2, [sp, #4]
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	4603      	mov	r3, r0
 80126b2:	2241      	movs	r2, #65	; 0x41
 80126b4:	2000      	movs	r0, #0
 80126b6:	f001 fb37 	bl	8013d28 <pbuf_alloced_custom>
 80126ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80126c2:	69b8      	ldr	r0, [r7, #24]
 80126c4:	f7ff fef6 	bl	80124b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80126c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126ca:	f001 fce7 	bl	801409c <pbuf_free>
        goto memerr;
 80126ce:	e074      	b.n	80127ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f001 fd89 	bl	80141e8 <pbuf_ref>
      pcr->original = p;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	4a3f      	ldr	r2, [pc, #252]	; (80127dc <ip4_frag+0x288>)
 80126e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80126e2:	6979      	ldr	r1, [r7, #20]
 80126e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126e6:	f001 fda7 	bl	8014238 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80126ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80126ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80126f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d004      	beq.n	801270a <ip4_frag+0x1b6>
        poff = 0;
 8012700:	2300      	movs	r3, #0
 8012702:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801270a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801270e:	2b00      	cmp	r3, #0
 8012710:	d196      	bne.n	8012640 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012712:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012718:	4413      	add	r3, r2
 801271a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012720:	f1a3 0213 	sub.w	r2, r3, #19
 8012724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012728:	429a      	cmp	r2, r3
 801272a:	bfcc      	ite	gt
 801272c:	2301      	movgt	r3, #1
 801272e:	2300      	movle	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801273c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <ip4_frag+0x1f6>
 8012744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012746:	2b00      	cmp	r3, #0
 8012748:	d003      	beq.n	8012752 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801274a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801274c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012750:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012754:	4618      	mov	r0, r3
 8012756:	f7fb fd5d 	bl	800e214 <lwip_htons>
 801275a:	4603      	mov	r3, r0
 801275c:	461a      	mov	r2, r3
 801275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012760:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012764:	3314      	adds	r3, #20
 8012766:	b29b      	uxth	r3, r3
 8012768:	4618      	mov	r0, r3
 801276a:	f7fb fd53 	bl	800e214 <lwip_htons>
 801276e:	4603      	mov	r3, r0
 8012770:	461a      	mov	r2, r3
 8012772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012774:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	2200      	movs	r2, #0
 801277a:	729a      	strb	r2, [r3, #10]
 801277c:	2200      	movs	r2, #0
 801277e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	695b      	ldr	r3, [r3, #20]
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012788:	68b8      	ldr	r0, [r7, #8]
 801278a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801278c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801278e:	f001 fc85 	bl	801409c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012792:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012796:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801279e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80127a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80127a4:	4413      	add	r3, r2
 80127a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80127aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f47f af19 	bne.w	80125e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80127b4:	2300      	movs	r3, #0
 80127b6:	e002      	b.n	80127be <ip4_frag+0x26a>
      goto memerr;
 80127b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3748      	adds	r7, #72	; 0x48
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	080207c4 	.word	0x080207c4
 80127cc:	080209bc 	.word	0x080209bc
 80127d0:	08020828 	.word	0x08020828
 80127d4:	080209d8 	.word	0x080209d8
 80127d8:	080209f8 	.word	0x080209f8
 80127dc:	080124ed 	.word	0x080124ed

080127e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	4603      	mov	r3, r0
 80127e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80127ea:	4b05      	ldr	r3, [pc, #20]	; (8012800 <ptr_to_mem+0x20>)
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	88fb      	ldrh	r3, [r7, #6]
 80127f0:	4413      	add	r3, r2
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	370c      	adds	r7, #12
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	240042e0 	.word	0x240042e0

08012804 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801280c:	4b05      	ldr	r3, [pc, #20]	; (8012824 <mem_to_ptr+0x20>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	b29b      	uxth	r3, r3
}
 8012816:	4618      	mov	r0, r3
 8012818:	370c      	adds	r7, #12
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	240042e0 	.word	0x240042e0

08012828 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012828:	b590      	push	{r4, r7, lr}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012830:	4b47      	ldr	r3, [pc, #284]	; (8012950 <plug_holes+0x128>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	429a      	cmp	r2, r3
 8012838:	d206      	bcs.n	8012848 <plug_holes+0x20>
 801283a:	4b46      	ldr	r3, [pc, #280]	; (8012954 <plug_holes+0x12c>)
 801283c:	f240 12df 	movw	r2, #479	; 0x1df
 8012840:	4945      	ldr	r1, [pc, #276]	; (8012958 <plug_holes+0x130>)
 8012842:	4846      	ldr	r0, [pc, #280]	; (801295c <plug_holes+0x134>)
 8012844:	f009 fdd6 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012848:	4b45      	ldr	r3, [pc, #276]	; (8012960 <plug_holes+0x138>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	429a      	cmp	r2, r3
 8012850:	d306      	bcc.n	8012860 <plug_holes+0x38>
 8012852:	4b40      	ldr	r3, [pc, #256]	; (8012954 <plug_holes+0x12c>)
 8012854:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012858:	4942      	ldr	r1, [pc, #264]	; (8012964 <plug_holes+0x13c>)
 801285a:	4840      	ldr	r0, [pc, #256]	; (801295c <plug_holes+0x134>)
 801285c:	f009 fdca 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	791b      	ldrb	r3, [r3, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d006      	beq.n	8012876 <plug_holes+0x4e>
 8012868:	4b3a      	ldr	r3, [pc, #232]	; (8012954 <plug_holes+0x12c>)
 801286a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801286e:	493e      	ldr	r1, [pc, #248]	; (8012968 <plug_holes+0x140>)
 8012870:	483a      	ldr	r0, [pc, #232]	; (801295c <plug_holes+0x134>)
 8012872:	f009 fdbf 	bl	801c3f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	881b      	ldrh	r3, [r3, #0]
 801287a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801287e:	4293      	cmp	r3, r2
 8012880:	d906      	bls.n	8012890 <plug_holes+0x68>
 8012882:	4b34      	ldr	r3, [pc, #208]	; (8012954 <plug_holes+0x12c>)
 8012884:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012888:	4938      	ldr	r1, [pc, #224]	; (801296c <plug_holes+0x144>)
 801288a:	4834      	ldr	r0, [pc, #208]	; (801295c <plug_holes+0x134>)
 801288c:	f009 fdb2 	bl	801c3f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	881b      	ldrh	r3, [r3, #0]
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff ffa3 	bl	80127e0 <ptr_to_mem>
 801289a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d025      	beq.n	80128f0 <plug_holes+0xc8>
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	791b      	ldrb	r3, [r3, #4]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d121      	bne.n	80128f0 <plug_holes+0xc8>
 80128ac:	4b2c      	ldr	r3, [pc, #176]	; (8012960 <plug_holes+0x138>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	68fa      	ldr	r2, [r7, #12]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d01c      	beq.n	80128f0 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80128b6:	4b2e      	ldr	r3, [pc, #184]	; (8012970 <plug_holes+0x148>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	68fa      	ldr	r2, [r7, #12]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d102      	bne.n	80128c6 <plug_holes+0x9e>
      lfree = mem;
 80128c0:	4a2b      	ldr	r2, [pc, #172]	; (8012970 <plug_holes+0x148>)
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	881a      	ldrh	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d00a      	beq.n	80128f0 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	881b      	ldrh	r3, [r3, #0]
 80128de:	4618      	mov	r0, r3
 80128e0:	f7ff ff7e 	bl	80127e0 <ptr_to_mem>
 80128e4:	4604      	mov	r4, r0
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff ff8c 	bl	8012804 <mem_to_ptr>
 80128ec:	4603      	mov	r3, r0
 80128ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	885b      	ldrh	r3, [r3, #2]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff ff73 	bl	80127e0 <ptr_to_mem>
 80128fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	429a      	cmp	r2, r3
 8012902:	d020      	beq.n	8012946 <plug_holes+0x11e>
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	791b      	ldrb	r3, [r3, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d11c      	bne.n	8012946 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801290c:	4b18      	ldr	r3, [pc, #96]	; (8012970 <plug_holes+0x148>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	429a      	cmp	r2, r3
 8012914:	d102      	bne.n	801291c <plug_holes+0xf4>
      lfree = pmem;
 8012916:	4a16      	ldr	r2, [pc, #88]	; (8012970 <plug_holes+0x148>)
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	881a      	ldrh	r2, [r3, #0]
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801292c:	4293      	cmp	r3, r2
 801292e:	d00a      	beq.n	8012946 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	4618      	mov	r0, r3
 8012936:	f7ff ff53 	bl	80127e0 <ptr_to_mem>
 801293a:	4604      	mov	r4, r0
 801293c:	68b8      	ldr	r0, [r7, #8]
 801293e:	f7ff ff61 	bl	8012804 <mem_to_ptr>
 8012942:	4603      	mov	r3, r0
 8012944:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012946:	bf00      	nop
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	bd90      	pop	{r4, r7, pc}
 801294e:	bf00      	nop
 8012950:	240042e0 	.word	0x240042e0
 8012954:	08020a08 	.word	0x08020a08
 8012958:	08020a58 	.word	0x08020a58
 801295c:	08020a70 	.word	0x08020a70
 8012960:	240042e4 	.word	0x240042e4
 8012964:	08020a98 	.word	0x08020a98
 8012968:	08020ab4 	.word	0x08020ab4
 801296c:	08020ad0 	.word	0x08020ad0
 8012970:	240042ec 	.word	0x240042ec

08012974 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801297a:	4b1d      	ldr	r3, [pc, #116]	; (80129f0 <mem_init+0x7c>)
 801297c:	4a1d      	ldr	r2, [pc, #116]	; (80129f4 <mem_init+0x80>)
 801297e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012980:	4b1b      	ldr	r3, [pc, #108]	; (80129f0 <mem_init+0x7c>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801298c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2200      	movs	r2, #0
 8012992:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801299a:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 801299e:	f7ff ff1f 	bl	80127e0 <ptr_to_mem>
 80129a2:	4603      	mov	r3, r0
 80129a4:	4a14      	ldr	r2, [pc, #80]	; (80129f8 <mem_init+0x84>)
 80129a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80129a8:	4b13      	ldr	r3, [pc, #76]	; (80129f8 <mem_init+0x84>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2201      	movs	r2, #1
 80129ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80129b0:	4b11      	ldr	r3, [pc, #68]	; (80129f8 <mem_init+0x84>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80129ba:	4b0f      	ldr	r3, [pc, #60]	; (80129f8 <mem_init+0x84>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80129c4:	4b0a      	ldr	r3, [pc, #40]	; (80129f0 <mem_init+0x7c>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4a0c      	ldr	r2, [pc, #48]	; (80129fc <mem_init+0x88>)
 80129ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80129cc:	480c      	ldr	r0, [pc, #48]	; (8012a00 <mem_init+0x8c>)
 80129ce:	f001 ff75 	bl	80148bc <sys_mutex_new>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d006      	beq.n	80129e6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80129d8:	4b0a      	ldr	r3, [pc, #40]	; (8012a04 <mem_init+0x90>)
 80129da:	f240 221f 	movw	r2, #543	; 0x21f
 80129de:	490a      	ldr	r1, [pc, #40]	; (8012a08 <mem_init+0x94>)
 80129e0:	480a      	ldr	r0, [pc, #40]	; (8012a0c <mem_init+0x98>)
 80129e2:	f009 fd07 	bl	801c3f4 <iprintf>
  }
}
 80129e6:	bf00      	nop
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	240042e0 	.word	0x240042e0
 80129f4:	30044000 	.word	0x30044000
 80129f8:	240042e4 	.word	0x240042e4
 80129fc:	240042ec 	.word	0x240042ec
 8012a00:	240042e8 	.word	0x240042e8
 8012a04:	08020a08 	.word	0x08020a08
 8012a08:	08020afc 	.word	0x08020afc
 8012a0c:	08020a70 	.word	0x08020a70

08012a10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff fef3 	bl	8012804 <mem_to_ptr>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	881b      	ldrh	r3, [r3, #0]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7ff feda 	bl	80127e0 <ptr_to_mem>
 8012a2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	885b      	ldrh	r3, [r3, #2]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff fed4 	bl	80127e0 <ptr_to_mem>
 8012a38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d819      	bhi.n	8012a7a <mem_link_valid+0x6a>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	885b      	ldrh	r3, [r3, #2]
 8012a4a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d813      	bhi.n	8012a7a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012a56:	8afa      	ldrh	r2, [r7, #22]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d004      	beq.n	8012a66 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	8afa      	ldrh	r2, [r7, #22]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d109      	bne.n	8012a7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012a66:	4b08      	ldr	r3, [pc, #32]	; (8012a88 <mem_link_valid+0x78>)
 8012a68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012a6a:	693a      	ldr	r2, [r7, #16]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d006      	beq.n	8012a7e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	885b      	ldrh	r3, [r3, #2]
 8012a74:	8afa      	ldrh	r2, [r7, #22]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d001      	beq.n	8012a7e <mem_link_valid+0x6e>
    return 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e000      	b.n	8012a80 <mem_link_valid+0x70>
  }
  return 1;
 8012a7e:	2301      	movs	r3, #1
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	240042e4 	.word	0x240042e4

08012a8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b088      	sub	sp, #32
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d070      	beq.n	8012b7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f003 0303 	and.w	r3, r3, #3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d00d      	beq.n	8012ac0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012aa4:	4b37      	ldr	r3, [pc, #220]	; (8012b84 <mem_free+0xf8>)
 8012aa6:	f240 2273 	movw	r2, #627	; 0x273
 8012aaa:	4937      	ldr	r1, [pc, #220]	; (8012b88 <mem_free+0xfc>)
 8012aac:	4837      	ldr	r0, [pc, #220]	; (8012b8c <mem_free+0x100>)
 8012aae:	f009 fca1 	bl	801c3f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012ab2:	f001 ff61 	bl	8014978 <sys_arch_protect>
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f001 ff6b 	bl	8014994 <sys_arch_unprotect>
    return;
 8012abe:	e05e      	b.n	8012b7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	3b08      	subs	r3, #8
 8012ac4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012ac6:	4b32      	ldr	r3, [pc, #200]	; (8012b90 <mem_free+0x104>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	69fa      	ldr	r2, [r7, #28]
 8012acc:	429a      	cmp	r2, r3
 8012ace:	d306      	bcc.n	8012ade <mem_free+0x52>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f103 020c 	add.w	r2, r3, #12
 8012ad6:	4b2f      	ldr	r3, [pc, #188]	; (8012b94 <mem_free+0x108>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d90d      	bls.n	8012afa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012ade:	4b29      	ldr	r3, [pc, #164]	; (8012b84 <mem_free+0xf8>)
 8012ae0:	f240 227f 	movw	r2, #639	; 0x27f
 8012ae4:	492c      	ldr	r1, [pc, #176]	; (8012b98 <mem_free+0x10c>)
 8012ae6:	4829      	ldr	r0, [pc, #164]	; (8012b8c <mem_free+0x100>)
 8012ae8:	f009 fc84 	bl	801c3f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012aec:	f001 ff44 	bl	8014978 <sys_arch_protect>
 8012af0:	6138      	str	r0, [r7, #16]
 8012af2:	6938      	ldr	r0, [r7, #16]
 8012af4:	f001 ff4e 	bl	8014994 <sys_arch_unprotect>
    return;
 8012af8:	e041      	b.n	8012b7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012afa:	4828      	ldr	r0, [pc, #160]	; (8012b9c <mem_free+0x110>)
 8012afc:	f001 fefa 	bl	80148f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	791b      	ldrb	r3, [r3, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d110      	bne.n	8012b2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012b08:	4b1e      	ldr	r3, [pc, #120]	; (8012b84 <mem_free+0xf8>)
 8012b0a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012b0e:	4924      	ldr	r1, [pc, #144]	; (8012ba0 <mem_free+0x114>)
 8012b10:	481e      	ldr	r0, [pc, #120]	; (8012b8c <mem_free+0x100>)
 8012b12:	f009 fc6f 	bl	801c3f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012b16:	4821      	ldr	r0, [pc, #132]	; (8012b9c <mem_free+0x110>)
 8012b18:	f001 fefb 	bl	8014912 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012b1c:	f001 ff2c 	bl	8014978 <sys_arch_protect>
 8012b20:	6178      	str	r0, [r7, #20]
 8012b22:	6978      	ldr	r0, [r7, #20]
 8012b24:	f001 ff36 	bl	8014994 <sys_arch_unprotect>
    return;
 8012b28:	e029      	b.n	8012b7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012b2a:	69f8      	ldr	r0, [r7, #28]
 8012b2c:	f7ff ff70 	bl	8012a10 <mem_link_valid>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d110      	bne.n	8012b58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012b36:	4b13      	ldr	r3, [pc, #76]	; (8012b84 <mem_free+0xf8>)
 8012b38:	f240 2295 	movw	r2, #661	; 0x295
 8012b3c:	4919      	ldr	r1, [pc, #100]	; (8012ba4 <mem_free+0x118>)
 8012b3e:	4813      	ldr	r0, [pc, #76]	; (8012b8c <mem_free+0x100>)
 8012b40:	f009 fc58 	bl	801c3f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012b44:	4815      	ldr	r0, [pc, #84]	; (8012b9c <mem_free+0x110>)
 8012b46:	f001 fee4 	bl	8014912 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012b4a:	f001 ff15 	bl	8014978 <sys_arch_protect>
 8012b4e:	61b8      	str	r0, [r7, #24]
 8012b50:	69b8      	ldr	r0, [r7, #24]
 8012b52:	f001 ff1f 	bl	8014994 <sys_arch_unprotect>
    return;
 8012b56:	e012      	b.n	8012b7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012b5e:	4b12      	ldr	r3, [pc, #72]	; (8012ba8 <mem_free+0x11c>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	69fa      	ldr	r2, [r7, #28]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d202      	bcs.n	8012b6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012b68:	4a0f      	ldr	r2, [pc, #60]	; (8012ba8 <mem_free+0x11c>)
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012b6e:	69f8      	ldr	r0, [r7, #28]
 8012b70:	f7ff fe5a 	bl	8012828 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012b74:	4809      	ldr	r0, [pc, #36]	; (8012b9c <mem_free+0x110>)
 8012b76:	f001 fecc 	bl	8014912 <sys_mutex_unlock>
 8012b7a:	e000      	b.n	8012b7e <mem_free+0xf2>
    return;
 8012b7c:	bf00      	nop
}
 8012b7e:	3720      	adds	r7, #32
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	08020a08 	.word	0x08020a08
 8012b88:	08020b18 	.word	0x08020b18
 8012b8c:	08020a70 	.word	0x08020a70
 8012b90:	240042e0 	.word	0x240042e0
 8012b94:	240042e4 	.word	0x240042e4
 8012b98:	08020b3c 	.word	0x08020b3c
 8012b9c:	240042e8 	.word	0x240042e8
 8012ba0:	08020b58 	.word	0x08020b58
 8012ba4:	08020b80 	.word	0x08020b80
 8012ba8:	240042ec 	.word	0x240042ec

08012bac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b088      	sub	sp, #32
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012bb8:	887b      	ldrh	r3, [r7, #2]
 8012bba:	3303      	adds	r3, #3
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	f023 0303 	bic.w	r3, r3, #3
 8012bc2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012bc4:	8bfb      	ldrh	r3, [r7, #30]
 8012bc6:	2b0b      	cmp	r3, #11
 8012bc8:	d801      	bhi.n	8012bce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012bca:	230c      	movs	r3, #12
 8012bcc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012bce:	8bfb      	ldrh	r3, [r7, #30]
 8012bd0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d803      	bhi.n	8012be0 <mem_trim+0x34>
 8012bd8:	8bfa      	ldrh	r2, [r7, #30]
 8012bda:	887b      	ldrh	r3, [r7, #2]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d201      	bcs.n	8012be4 <mem_trim+0x38>
    return NULL;
 8012be0:	2300      	movs	r3, #0
 8012be2:	e0dc      	b.n	8012d9e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012be4:	4b70      	ldr	r3, [pc, #448]	; (8012da8 <mem_trim+0x1fc>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d304      	bcc.n	8012bf8 <mem_trim+0x4c>
 8012bee:	4b6f      	ldr	r3, [pc, #444]	; (8012dac <mem_trim+0x200>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d306      	bcc.n	8012c06 <mem_trim+0x5a>
 8012bf8:	4b6d      	ldr	r3, [pc, #436]	; (8012db0 <mem_trim+0x204>)
 8012bfa:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012bfe:	496d      	ldr	r1, [pc, #436]	; (8012db4 <mem_trim+0x208>)
 8012c00:	486d      	ldr	r0, [pc, #436]	; (8012db8 <mem_trim+0x20c>)
 8012c02:	f009 fbf7 	bl	801c3f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012c06:	4b68      	ldr	r3, [pc, #416]	; (8012da8 <mem_trim+0x1fc>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d304      	bcc.n	8012c1a <mem_trim+0x6e>
 8012c10:	4b66      	ldr	r3, [pc, #408]	; (8012dac <mem_trim+0x200>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d307      	bcc.n	8012c2a <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c1a:	f001 fead 	bl	8014978 <sys_arch_protect>
 8012c1e:	60b8      	str	r0, [r7, #8]
 8012c20:	68b8      	ldr	r0, [r7, #8]
 8012c22:	f001 feb7 	bl	8014994 <sys_arch_unprotect>
    return rmem;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	e0b9      	b.n	8012d9e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3b08      	subs	r3, #8
 8012c2e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012c30:	69b8      	ldr	r0, [r7, #24]
 8012c32:	f7ff fde7 	bl	8012804 <mem_to_ptr>
 8012c36:	4603      	mov	r3, r0
 8012c38:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	881a      	ldrh	r2, [r3, #0]
 8012c3e:	8afb      	ldrh	r3, [r7, #22]
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	3b08      	subs	r3, #8
 8012c46:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012c48:	8bfa      	ldrh	r2, [r7, #30]
 8012c4a:	8abb      	ldrh	r3, [r7, #20]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d906      	bls.n	8012c5e <mem_trim+0xb2>
 8012c50:	4b57      	ldr	r3, [pc, #348]	; (8012db0 <mem_trim+0x204>)
 8012c52:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012c56:	4959      	ldr	r1, [pc, #356]	; (8012dbc <mem_trim+0x210>)
 8012c58:	4857      	ldr	r0, [pc, #348]	; (8012db8 <mem_trim+0x20c>)
 8012c5a:	f009 fbcb 	bl	801c3f4 <iprintf>
  if (newsize > size) {
 8012c5e:	8bfa      	ldrh	r2, [r7, #30]
 8012c60:	8abb      	ldrh	r3, [r7, #20]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d901      	bls.n	8012c6a <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8012c66:	2300      	movs	r3, #0
 8012c68:	e099      	b.n	8012d9e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8012c6a:	8bfa      	ldrh	r2, [r7, #30]
 8012c6c:	8abb      	ldrh	r3, [r7, #20]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d101      	bne.n	8012c76 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	e093      	b.n	8012d9e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012c76:	4852      	ldr	r0, [pc, #328]	; (8012dc0 <mem_trim+0x214>)
 8012c78:	f001 fe3c 	bl	80148f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fdad 	bl	80127e0 <ptr_to_mem>
 8012c86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	791b      	ldrb	r3, [r3, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d141      	bne.n	8012d14 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	881b      	ldrh	r3, [r3, #0]
 8012c94:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d106      	bne.n	8012caa <mem_trim+0xfe>
 8012c9c:	4b44      	ldr	r3, [pc, #272]	; (8012db0 <mem_trim+0x204>)
 8012c9e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012ca2:	4948      	ldr	r1, [pc, #288]	; (8012dc4 <mem_trim+0x218>)
 8012ca4:	4844      	ldr	r0, [pc, #272]	; (8012db8 <mem_trim+0x20c>)
 8012ca6:	f009 fba5 	bl	801c3f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012cb0:	8afa      	ldrh	r2, [r7, #22]
 8012cb2:	8bfb      	ldrh	r3, [r7, #30]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	3308      	adds	r3, #8
 8012cba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012cbc:	4b42      	ldr	r3, [pc, #264]	; (8012dc8 <mem_trim+0x21c>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	693a      	ldr	r2, [r7, #16]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d106      	bne.n	8012cd4 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff fd89 	bl	80127e0 <ptr_to_mem>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	4a3d      	ldr	r2, [pc, #244]	; (8012dc8 <mem_trim+0x21c>)
 8012cd2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012cd4:	89fb      	ldrh	r3, [r7, #14]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff fd82 	bl	80127e0 <ptr_to_mem>
 8012cdc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	89ba      	ldrh	r2, [r7, #12]
 8012ce8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	8afa      	ldrh	r2, [r7, #22]
 8012cee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	89fa      	ldrh	r2, [r7, #14]
 8012cf4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d049      	beq.n	8012d96 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff fd6a 	bl	80127e0 <ptr_to_mem>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	89fb      	ldrh	r3, [r7, #14]
 8012d10:	8053      	strh	r3, [r2, #2]
 8012d12:	e040      	b.n	8012d96 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012d14:	8bfb      	ldrh	r3, [r7, #30]
 8012d16:	f103 0214 	add.w	r2, r3, #20
 8012d1a:	8abb      	ldrh	r3, [r7, #20]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d83a      	bhi.n	8012d96 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012d20:	8afa      	ldrh	r2, [r7, #22]
 8012d22:	8bfb      	ldrh	r3, [r7, #30]
 8012d24:	4413      	add	r3, r2
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	3308      	adds	r3, #8
 8012d2a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d106      	bne.n	8012d46 <mem_trim+0x19a>
 8012d38:	4b1d      	ldr	r3, [pc, #116]	; (8012db0 <mem_trim+0x204>)
 8012d3a:	f240 3216 	movw	r2, #790	; 0x316
 8012d3e:	4921      	ldr	r1, [pc, #132]	; (8012dc4 <mem_trim+0x218>)
 8012d40:	481d      	ldr	r0, [pc, #116]	; (8012db8 <mem_trim+0x20c>)
 8012d42:	f009 fb57 	bl	801c3f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012d46:	89fb      	ldrh	r3, [r7, #14]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7ff fd49 	bl	80127e0 <ptr_to_mem>
 8012d4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012d50:	4b1d      	ldr	r3, [pc, #116]	; (8012dc8 <mem_trim+0x21c>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	693a      	ldr	r2, [r7, #16]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d202      	bcs.n	8012d60 <mem_trim+0x1b4>
      lfree = mem2;
 8012d5a:	4a1b      	ldr	r2, [pc, #108]	; (8012dc8 <mem_trim+0x21c>)
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	2200      	movs	r2, #0
 8012d64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	881a      	ldrh	r2, [r3, #0]
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	8afa      	ldrh	r2, [r7, #22]
 8012d72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	89fa      	ldrh	r2, [r7, #14]
 8012d78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d007      	beq.n	8012d96 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7ff fd28 	bl	80127e0 <ptr_to_mem>
 8012d90:	4602      	mov	r2, r0
 8012d92:	89fb      	ldrh	r3, [r7, #14]
 8012d94:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d96:	480a      	ldr	r0, [pc, #40]	; (8012dc0 <mem_trim+0x214>)
 8012d98:	f001 fdbb 	bl	8014912 <sys_mutex_unlock>
  return rmem;
 8012d9c:	687b      	ldr	r3, [r7, #4]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3720      	adds	r7, #32
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	240042e0 	.word	0x240042e0
 8012dac:	240042e4 	.word	0x240042e4
 8012db0:	08020a08 	.word	0x08020a08
 8012db4:	08020bb4 	.word	0x08020bb4
 8012db8:	08020a70 	.word	0x08020a70
 8012dbc:	08020bcc 	.word	0x08020bcc
 8012dc0:	240042e8 	.word	0x240042e8
 8012dc4:	08020bec 	.word	0x08020bec
 8012dc8:	240042ec 	.word	0x240042ec

08012dcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012dd6:	88fb      	ldrh	r3, [r7, #6]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d101      	bne.n	8012de0 <mem_malloc+0x14>
    return NULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	e0e6      	b.n	8012fae <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012de0:	88fb      	ldrh	r3, [r7, #6]
 8012de2:	3303      	adds	r3, #3
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	f023 0303 	bic.w	r3, r3, #3
 8012dea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012dec:	8bbb      	ldrh	r3, [r7, #28]
 8012dee:	2b0b      	cmp	r3, #11
 8012df0:	d801      	bhi.n	8012df6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012df2:	230c      	movs	r3, #12
 8012df4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012df6:	8bbb      	ldrh	r3, [r7, #28]
 8012df8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	d803      	bhi.n	8012e08 <mem_malloc+0x3c>
 8012e00:	8bba      	ldrh	r2, [r7, #28]
 8012e02:	88fb      	ldrh	r3, [r7, #6]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d201      	bcs.n	8012e0c <mem_malloc+0x40>
    return NULL;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e0d0      	b.n	8012fae <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012e0c:	486a      	ldr	r0, [pc, #424]	; (8012fb8 <mem_malloc+0x1ec>)
 8012e0e:	f001 fd71 	bl	80148f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012e12:	4b6a      	ldr	r3, [pc, #424]	; (8012fbc <mem_malloc+0x1f0>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7ff fcf4 	bl	8012804 <mem_to_ptr>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	83fb      	strh	r3, [r7, #30]
 8012e20:	e0b9      	b.n	8012f96 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012e22:	8bfb      	ldrh	r3, [r7, #30]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff fcdb 	bl	80127e0 <ptr_to_mem>
 8012e2a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	791b      	ldrb	r3, [r3, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f040 80a9 	bne.w	8012f88 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	8bfb      	ldrh	r3, [r7, #30]
 8012e3e:	1ad3      	subs	r3, r2, r3
 8012e40:	f1a3 0208 	sub.w	r2, r3, #8
 8012e44:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012e46:	429a      	cmp	r2, r3
 8012e48:	f0c0 809e 	bcc.w	8012f88 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	461a      	mov	r2, r3
 8012e52:	8bfb      	ldrh	r3, [r7, #30]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	f1a3 0208 	sub.w	r2, r3, #8
 8012e5a:	8bbb      	ldrh	r3, [r7, #28]
 8012e5c:	3314      	adds	r3, #20
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d335      	bcc.n	8012ece <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012e62:	8bfa      	ldrh	r2, [r7, #30]
 8012e64:	8bbb      	ldrh	r3, [r7, #28]
 8012e66:	4413      	add	r3, r2
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012e6e:	8a7b      	ldrh	r3, [r7, #18]
 8012e70:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d106      	bne.n	8012e86 <mem_malloc+0xba>
 8012e78:	4b51      	ldr	r3, [pc, #324]	; (8012fc0 <mem_malloc+0x1f4>)
 8012e7a:	f240 3287 	movw	r2, #903	; 0x387
 8012e7e:	4951      	ldr	r1, [pc, #324]	; (8012fc4 <mem_malloc+0x1f8>)
 8012e80:	4851      	ldr	r0, [pc, #324]	; (8012fc8 <mem_malloc+0x1fc>)
 8012e82:	f009 fab7 	bl	801c3f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012e86:	8a7b      	ldrh	r3, [r7, #18]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7ff fca9 	bl	80127e0 <ptr_to_mem>
 8012e8e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2200      	movs	r2, #0
 8012e94:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	881a      	ldrh	r2, [r3, #0]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	8bfa      	ldrh	r2, [r7, #30]
 8012ea2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	8a7a      	ldrh	r2, [r7, #18]
 8012ea8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	2201      	movs	r2, #1
 8012eae:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d00b      	beq.n	8012ed4 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff fc8d 	bl	80127e0 <ptr_to_mem>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	8a7b      	ldrh	r3, [r7, #18]
 8012eca:	8053      	strh	r3, [r2, #2]
 8012ecc:	e002      	b.n	8012ed4 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012ed4:	4b39      	ldr	r3, [pc, #228]	; (8012fbc <mem_malloc+0x1f0>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	697a      	ldr	r2, [r7, #20]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d127      	bne.n	8012f2e <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012ede:	4b37      	ldr	r3, [pc, #220]	; (8012fbc <mem_malloc+0x1f0>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012ee4:	e005      	b.n	8012ef2 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fc78 	bl	80127e0 <ptr_to_mem>
 8012ef0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	791b      	ldrb	r3, [r3, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d004      	beq.n	8012f04 <mem_malloc+0x138>
 8012efa:	4b34      	ldr	r3, [pc, #208]	; (8012fcc <mem_malloc+0x200>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	69ba      	ldr	r2, [r7, #24]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d1f0      	bne.n	8012ee6 <mem_malloc+0x11a>
          }
          lfree = cur;
 8012f04:	4a2d      	ldr	r2, [pc, #180]	; (8012fbc <mem_malloc+0x1f0>)
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012f0a:	4b2c      	ldr	r3, [pc, #176]	; (8012fbc <mem_malloc+0x1f0>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	4b2f      	ldr	r3, [pc, #188]	; (8012fcc <mem_malloc+0x200>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d00b      	beq.n	8012f2e <mem_malloc+0x162>
 8012f16:	4b29      	ldr	r3, [pc, #164]	; (8012fbc <mem_malloc+0x1f0>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	791b      	ldrb	r3, [r3, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <mem_malloc+0x162>
 8012f20:	4b27      	ldr	r3, [pc, #156]	; (8012fc0 <mem_malloc+0x1f4>)
 8012f22:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012f26:	492a      	ldr	r1, [pc, #168]	; (8012fd0 <mem_malloc+0x204>)
 8012f28:	4827      	ldr	r0, [pc, #156]	; (8012fc8 <mem_malloc+0x1fc>)
 8012f2a:	f009 fa63 	bl	801c3f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012f2e:	4822      	ldr	r0, [pc, #136]	; (8012fb8 <mem_malloc+0x1ec>)
 8012f30:	f001 fcef 	bl	8014912 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012f34:	8bba      	ldrh	r2, [r7, #28]
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	4413      	add	r3, r2
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	4a23      	ldr	r2, [pc, #140]	; (8012fcc <mem_malloc+0x200>)
 8012f3e:	6812      	ldr	r2, [r2, #0]
 8012f40:	4293      	cmp	r3, r2
 8012f42:	d906      	bls.n	8012f52 <mem_malloc+0x186>
 8012f44:	4b1e      	ldr	r3, [pc, #120]	; (8012fc0 <mem_malloc+0x1f4>)
 8012f46:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012f4a:	4922      	ldr	r1, [pc, #136]	; (8012fd4 <mem_malloc+0x208>)
 8012f4c:	481e      	ldr	r0, [pc, #120]	; (8012fc8 <mem_malloc+0x1fc>)
 8012f4e:	f009 fa51 	bl	801c3f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	f003 0303 	and.w	r3, r3, #3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d006      	beq.n	8012f6a <mem_malloc+0x19e>
 8012f5c:	4b18      	ldr	r3, [pc, #96]	; (8012fc0 <mem_malloc+0x1f4>)
 8012f5e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8012f62:	491d      	ldr	r1, [pc, #116]	; (8012fd8 <mem_malloc+0x20c>)
 8012f64:	4818      	ldr	r0, [pc, #96]	; (8012fc8 <mem_malloc+0x1fc>)
 8012f66:	f009 fa45 	bl	801c3f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	f003 0303 	and.w	r3, r3, #3
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d006      	beq.n	8012f82 <mem_malloc+0x1b6>
 8012f74:	4b12      	ldr	r3, [pc, #72]	; (8012fc0 <mem_malloc+0x1f4>)
 8012f76:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012f7a:	4918      	ldr	r1, [pc, #96]	; (8012fdc <mem_malloc+0x210>)
 8012f7c:	4812      	ldr	r0, [pc, #72]	; (8012fc8 <mem_malloc+0x1fc>)
 8012f7e:	f009 fa39 	bl	801c3f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	3308      	adds	r3, #8
 8012f86:	e012      	b.n	8012fae <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012f88:	8bfb      	ldrh	r3, [r7, #30]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7ff fc28 	bl	80127e0 <ptr_to_mem>
 8012f90:	4603      	mov	r3, r0
 8012f92:	881b      	ldrh	r3, [r3, #0]
 8012f94:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012f96:	8bfa      	ldrh	r2, [r7, #30]
 8012f98:	8bb9      	ldrh	r1, [r7, #28]
 8012f9a:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8012f9e:	1a5b      	subs	r3, r3, r1
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	f4ff af3e 	bcc.w	8012e22 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012fa6:	4804      	ldr	r0, [pc, #16]	; (8012fb8 <mem_malloc+0x1ec>)
 8012fa8:	f001 fcb3 	bl	8014912 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012fac:	2300      	movs	r3, #0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3720      	adds	r7, #32
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	240042e8 	.word	0x240042e8
 8012fbc:	240042ec 	.word	0x240042ec
 8012fc0:	08020a08 	.word	0x08020a08
 8012fc4:	08020bec 	.word	0x08020bec
 8012fc8:	08020a70 	.word	0x08020a70
 8012fcc:	240042e4 	.word	0x240042e4
 8012fd0:	08020c00 	.word	0x08020c00
 8012fd4:	08020c1c 	.word	0x08020c1c
 8012fd8:	08020c4c 	.word	0x08020c4c
 8012fdc:	08020c7c 	.word	0x08020c7c

08012fe0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	2200      	movs	r2, #0
 8012fee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	3303      	adds	r3, #3
 8012ff6:	f023 0303 	bic.w	r3, r3, #3
 8012ffa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	60fb      	str	r3, [r7, #12]
 8013000:	e011      	b.n	8013026 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	461a      	mov	r2, r3
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	4413      	add	r3, r2
 801301e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	3301      	adds	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	885b      	ldrh	r3, [r3, #2]
 801302a:	461a      	mov	r2, r3
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4293      	cmp	r3, r2
 8013030:	dbe7      	blt.n	8013002 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013032:	bf00      	nop
 8013034:	bf00      	nop
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013046:	2300      	movs	r3, #0
 8013048:	80fb      	strh	r3, [r7, #6]
 801304a:	e009      	b.n	8013060 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801304c:	88fb      	ldrh	r3, [r7, #6]
 801304e:	4a08      	ldr	r2, [pc, #32]	; (8013070 <memp_init+0x30>)
 8013050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff ffc3 	bl	8012fe0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	3301      	adds	r3, #1
 801305e:	80fb      	strh	r3, [r7, #6]
 8013060:	88fb      	ldrh	r3, [r7, #6]
 8013062:	2b0c      	cmp	r3, #12
 8013064:	d9f2      	bls.n	801304c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013066:	bf00      	nop
 8013068:	bf00      	nop
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	0804646c 	.word	0x0804646c

08013074 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801307c:	f001 fc7c 	bl	8014978 <sys_arch_protect>
 8013080:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	689b      	ldr	r3, [r3, #8]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d015      	beq.n	80130bc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	689b      	ldr	r3, [r3, #8]
 8013094:	68ba      	ldr	r2, [r7, #8]
 8013096:	6812      	ldr	r2, [r2, #0]
 8013098:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	f003 0303 	and.w	r3, r3, #3
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d006      	beq.n	80130b2 <do_memp_malloc_pool+0x3e>
 80130a4:	4b09      	ldr	r3, [pc, #36]	; (80130cc <do_memp_malloc_pool+0x58>)
 80130a6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80130aa:	4909      	ldr	r1, [pc, #36]	; (80130d0 <do_memp_malloc_pool+0x5c>)
 80130ac:	4809      	ldr	r0, [pc, #36]	; (80130d4 <do_memp_malloc_pool+0x60>)
 80130ae:	f009 f9a1 	bl	801c3f4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f001 fc6e 	bl	8014994 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	e003      	b.n	80130c4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80130bc:	68f8      	ldr	r0, [r7, #12]
 80130be:	f001 fc69 	bl	8014994 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80130c2:	2300      	movs	r3, #0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3710      	adds	r7, #16
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	08020ca0 	.word	0x08020ca0
 80130d0:	08020cf0 	.word	0x08020cf0
 80130d4:	08020d14 	.word	0x08020d14

080130d8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d106      	bne.n	80130f4 <memp_malloc_pool+0x1c>
 80130e6:	4b0a      	ldr	r3, [pc, #40]	; (8013110 <memp_malloc_pool+0x38>)
 80130e8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80130ec:	4909      	ldr	r1, [pc, #36]	; (8013114 <memp_malloc_pool+0x3c>)
 80130ee:	480a      	ldr	r0, [pc, #40]	; (8013118 <memp_malloc_pool+0x40>)
 80130f0:	f009 f980 	bl	801c3f4 <iprintf>
  if (desc == NULL) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <memp_malloc_pool+0x26>
    return NULL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	e003      	b.n	8013106 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7ff ffb8 	bl	8013074 <do_memp_malloc_pool>
 8013104:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013106:	4618      	mov	r0, r3
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	08020ca0 	.word	0x08020ca0
 8013114:	08020d3c 	.word	0x08020d3c
 8013118:	08020d14 	.word	0x08020d14

0801311c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	4603      	mov	r3, r0
 8013124:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013126:	79fb      	ldrb	r3, [r7, #7]
 8013128:	2b0c      	cmp	r3, #12
 801312a:	d908      	bls.n	801313e <memp_malloc+0x22>
 801312c:	4b0a      	ldr	r3, [pc, #40]	; (8013158 <memp_malloc+0x3c>)
 801312e:	f240 1257 	movw	r2, #343	; 0x157
 8013132:	490a      	ldr	r1, [pc, #40]	; (801315c <memp_malloc+0x40>)
 8013134:	480a      	ldr	r0, [pc, #40]	; (8013160 <memp_malloc+0x44>)
 8013136:	f009 f95d 	bl	801c3f4 <iprintf>
 801313a:	2300      	movs	r3, #0
 801313c:	e008      	b.n	8013150 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801313e:	79fb      	ldrb	r3, [r7, #7]
 8013140:	4a08      	ldr	r2, [pc, #32]	; (8013164 <memp_malloc+0x48>)
 8013142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013146:	4618      	mov	r0, r3
 8013148:	f7ff ff94 	bl	8013074 <do_memp_malloc_pool>
 801314c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801314e:	68fb      	ldr	r3, [r7, #12]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	08020ca0 	.word	0x08020ca0
 801315c:	08020d50 	.word	0x08020d50
 8013160:	08020d14 	.word	0x08020d14
 8013164:	0804646c 	.word	0x0804646c

08013168 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	f003 0303 	and.w	r3, r3, #3
 8013178:	2b00      	cmp	r3, #0
 801317a:	d006      	beq.n	801318a <do_memp_free_pool+0x22>
 801317c:	4b0d      	ldr	r3, [pc, #52]	; (80131b4 <do_memp_free_pool+0x4c>)
 801317e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013182:	490d      	ldr	r1, [pc, #52]	; (80131b8 <do_memp_free_pool+0x50>)
 8013184:	480d      	ldr	r0, [pc, #52]	; (80131bc <do_memp_free_pool+0x54>)
 8013186:	f009 f935 	bl	801c3f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801318e:	f001 fbf3 	bl	8014978 <sys_arch_protect>
 8013192:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80131a6:	68b8      	ldr	r0, [r7, #8]
 80131a8:	f001 fbf4 	bl	8014994 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80131ac:	bf00      	nop
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	08020ca0 	.word	0x08020ca0
 80131b8:	08020d70 	.word	0x08020d70
 80131bc:	08020d14 	.word	0x08020d14

080131c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d106      	bne.n	80131de <memp_free_pool+0x1e>
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <memp_free_pool+0x3c>)
 80131d2:	f240 1295 	movw	r2, #405	; 0x195
 80131d6:	490a      	ldr	r1, [pc, #40]	; (8013200 <memp_free_pool+0x40>)
 80131d8:	480a      	ldr	r0, [pc, #40]	; (8013204 <memp_free_pool+0x44>)
 80131da:	f009 f90b 	bl	801c3f4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d007      	beq.n	80131f4 <memp_free_pool+0x34>
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d004      	beq.n	80131f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80131ea:	6839      	ldr	r1, [r7, #0]
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7ff ffbb 	bl	8013168 <do_memp_free_pool>
 80131f2:	e000      	b.n	80131f6 <memp_free_pool+0x36>
    return;
 80131f4:	bf00      	nop
}
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	08020ca0 	.word	0x08020ca0
 8013200:	08020d3c 	.word	0x08020d3c
 8013204:	08020d14 	.word	0x08020d14

08013208 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	4603      	mov	r3, r0
 8013210:	6039      	str	r1, [r7, #0]
 8013212:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	2b0c      	cmp	r3, #12
 8013218:	d907      	bls.n	801322a <memp_free+0x22>
 801321a:	4b0c      	ldr	r3, [pc, #48]	; (801324c <memp_free+0x44>)
 801321c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013220:	490b      	ldr	r1, [pc, #44]	; (8013250 <memp_free+0x48>)
 8013222:	480c      	ldr	r0, [pc, #48]	; (8013254 <memp_free+0x4c>)
 8013224:	f009 f8e6 	bl	801c3f4 <iprintf>
 8013228:	e00c      	b.n	8013244 <memp_free+0x3c>

  if (mem == NULL) {
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d008      	beq.n	8013242 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013230:	79fb      	ldrb	r3, [r7, #7]
 8013232:	4a09      	ldr	r2, [pc, #36]	; (8013258 <memp_free+0x50>)
 8013234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013238:	6839      	ldr	r1, [r7, #0]
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff ff94 	bl	8013168 <do_memp_free_pool>
 8013240:	e000      	b.n	8013244 <memp_free+0x3c>
    return;
 8013242:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	08020ca0 	.word	0x08020ca0
 8013250:	08020d90 	.word	0x08020d90
 8013254:	08020d14 	.word	0x08020d14
 8013258:	0804646c 	.word	0x0804646c

0801325c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d013      	beq.n	8013292 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d00b      	beq.n	801328a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	4618      	mov	r0, r3
 8013278:	f000 ff10 	bl	801409c <pbuf_free>
      buf->p = buf->ptr = NULL;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	605a      	str	r2, [r3, #4]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801328a:	6879      	ldr	r1, [r7, #4]
 801328c:	2006      	movs	r0, #6
 801328e:	f7ff ffbb 	bl	8013208 <memp_free>
  }
}
 8013292:	bf00      	nop
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
	...

0801329c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d108      	bne.n	80132c0 <netbuf_data+0x24>
 80132ae:	4b1b      	ldr	r3, [pc, #108]	; (801331c <netbuf_data+0x80>)
 80132b0:	22c6      	movs	r2, #198	; 0xc6
 80132b2:	491b      	ldr	r1, [pc, #108]	; (8013320 <netbuf_data+0x84>)
 80132b4:	481b      	ldr	r0, [pc, #108]	; (8013324 <netbuf_data+0x88>)
 80132b6:	f009 f89d 	bl	801c3f4 <iprintf>
 80132ba:	f06f 030f 	mvn.w	r3, #15
 80132be:	e029      	b.n	8013314 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d108      	bne.n	80132d8 <netbuf_data+0x3c>
 80132c6:	4b15      	ldr	r3, [pc, #84]	; (801331c <netbuf_data+0x80>)
 80132c8:	22c7      	movs	r2, #199	; 0xc7
 80132ca:	4917      	ldr	r1, [pc, #92]	; (8013328 <netbuf_data+0x8c>)
 80132cc:	4815      	ldr	r0, [pc, #84]	; (8013324 <netbuf_data+0x88>)
 80132ce:	f009 f891 	bl	801c3f4 <iprintf>
 80132d2:	f06f 030f 	mvn.w	r3, #15
 80132d6:	e01d      	b.n	8013314 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d108      	bne.n	80132f0 <netbuf_data+0x54>
 80132de:	4b0f      	ldr	r3, [pc, #60]	; (801331c <netbuf_data+0x80>)
 80132e0:	22c8      	movs	r2, #200	; 0xc8
 80132e2:	4912      	ldr	r1, [pc, #72]	; (801332c <netbuf_data+0x90>)
 80132e4:	480f      	ldr	r0, [pc, #60]	; (8013324 <netbuf_data+0x88>)
 80132e6:	f009 f885 	bl	801c3f4 <iprintf>
 80132ea:	f06f 030f 	mvn.w	r3, #15
 80132ee:	e011      	b.n	8013314 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d102      	bne.n	80132fe <netbuf_data+0x62>
    return ERR_BUF;
 80132f8:	f06f 0301 	mvn.w	r3, #1
 80132fc:	e00a      	b.n	8013314 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	685a      	ldr	r2, [r3, #4]
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	895a      	ldrh	r2, [r3, #10]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8013312:	2300      	movs	r3, #0
}
 8013314:	4618      	mov	r0, r3
 8013316:	3710      	adds	r7, #16
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	08020dac 	.word	0x08020dac
 8013320:	08020ed0 	.word	0x08020ed0
 8013324:	08020e18 	.word	0x08020e18
 8013328:	08020eec 	.word	0x08020eec
 801332c:	08020f0c 	.word	0x08020f0c

08013330 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d108      	bne.n	8013350 <netbuf_next+0x20>
 801333e:	4b11      	ldr	r3, [pc, #68]	; (8013384 <netbuf_next+0x54>)
 8013340:	22e0      	movs	r2, #224	; 0xe0
 8013342:	4911      	ldr	r1, [pc, #68]	; (8013388 <netbuf_next+0x58>)
 8013344:	4811      	ldr	r0, [pc, #68]	; (801338c <netbuf_next+0x5c>)
 8013346:	f009 f855 	bl	801c3f4 <iprintf>
 801334a:	f04f 33ff 	mov.w	r3, #4294967295
 801334e:	e014      	b.n	801337a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d102      	bne.n	8013360 <netbuf_next+0x30>
    return -1;
 801335a:	f04f 33ff 	mov.w	r3, #4294967295
 801335e:	e00c      	b.n	801337a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <netbuf_next+0x48>
    return 1;
 8013374:	2301      	movs	r3, #1
 8013376:	e000      	b.n	801337a <netbuf_next+0x4a>
  }
  return 0;
 8013378:	2300      	movs	r3, #0
}
 801337a:	4618      	mov	r0, r3
 801337c:	3708      	adds	r7, #8
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	08020dac 	.word	0x08020dac
 8013388:	08020f28 	.word	0x08020f28
 801338c:	08020e18 	.word	0x08020e18

08013390 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013390:	b480      	push	{r7}
 8013392:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013394:	bf00      	nop
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
	...

080133a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b086      	sub	sp, #24
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	607a      	str	r2, [r7, #4]
 80133ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d108      	bne.n	80133c6 <netif_add+0x26>
 80133b4:	4b5b      	ldr	r3, [pc, #364]	; (8013524 <netif_add+0x184>)
 80133b6:	f240 1227 	movw	r2, #295	; 0x127
 80133ba:	495b      	ldr	r1, [pc, #364]	; (8013528 <netif_add+0x188>)
 80133bc:	485b      	ldr	r0, [pc, #364]	; (801352c <netif_add+0x18c>)
 80133be:	f009 f819 	bl	801c3f4 <iprintf>
 80133c2:	2300      	movs	r3, #0
 80133c4:	e0a9      	b.n	801351a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d108      	bne.n	80133de <netif_add+0x3e>
 80133cc:	4b55      	ldr	r3, [pc, #340]	; (8013524 <netif_add+0x184>)
 80133ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80133d2:	4957      	ldr	r1, [pc, #348]	; (8013530 <netif_add+0x190>)
 80133d4:	4855      	ldr	r0, [pc, #340]	; (801352c <netif_add+0x18c>)
 80133d6:	f009 f80d 	bl	801c3f4 <iprintf>
 80133da:	2300      	movs	r3, #0
 80133dc:	e09d      	b.n	801351a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d101      	bne.n	80133e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80133e4:	4b53      	ldr	r3, [pc, #332]	; (8013534 <netif_add+0x194>)
 80133e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d101      	bne.n	80133f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80133ee:	4b51      	ldr	r3, [pc, #324]	; (8013534 <netif_add+0x194>)
 80133f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80133f8:	4b4e      	ldr	r3, [pc, #312]	; (8013534 <netif_add+0x194>)
 80133fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2200      	movs	r2, #0
 8013400:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2200      	movs	r2, #0
 8013406:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	4a49      	ldr	r2, [pc, #292]	; (8013538 <netif_add+0x198>)
 8013412:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2200      	movs	r2, #0
 8013418:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2200      	movs	r2, #0
 801341e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	3324      	adds	r3, #36	; 0x24
 8013426:	2204      	movs	r2, #4
 8013428:	2100      	movs	r1, #0
 801342a:	4618      	mov	r0, r3
 801342c:	f008 fb98 	bl	801bb60 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6a3a      	ldr	r2, [r7, #32]
 801343a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801343c:	4b3f      	ldr	r3, [pc, #252]	; (801353c <netif_add+0x19c>)
 801343e:	781a      	ldrb	r2, [r3, #0]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801344a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	68b9      	ldr	r1, [r7, #8]
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f000 f914 	bl	8013680 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	4798      	blx	r3
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d001      	beq.n	8013468 <netif_add+0xc8>
    return NULL;
 8013464:	2300      	movs	r3, #0
 8013466:	e058      	b.n	801351a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801346e:	2bff      	cmp	r3, #255	; 0xff
 8013470:	d103      	bne.n	801347a <netif_add+0xda>
        netif->num = 0;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2200      	movs	r2, #0
 8013476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801347e:	4b30      	ldr	r3, [pc, #192]	; (8013540 <netif_add+0x1a0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	e02b      	b.n	80134de <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013486:	697a      	ldr	r2, [r7, #20]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	429a      	cmp	r2, r3
 801348c:	d106      	bne.n	801349c <netif_add+0xfc>
 801348e:	4b25      	ldr	r3, [pc, #148]	; (8013524 <netif_add+0x184>)
 8013490:	f240 128b 	movw	r2, #395	; 0x18b
 8013494:	492b      	ldr	r1, [pc, #172]	; (8013544 <netif_add+0x1a4>)
 8013496:	4825      	ldr	r0, [pc, #148]	; (801352c <netif_add+0x18c>)
 8013498:	f008 ffac 	bl	801c3f4 <iprintf>
        num_netifs++;
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	3301      	adds	r3, #1
 80134a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	2bff      	cmp	r3, #255	; 0xff
 80134a6:	dd06      	ble.n	80134b6 <netif_add+0x116>
 80134a8:	4b1e      	ldr	r3, [pc, #120]	; (8013524 <netif_add+0x184>)
 80134aa:	f240 128d 	movw	r2, #397	; 0x18d
 80134ae:	4926      	ldr	r1, [pc, #152]	; (8013548 <netif_add+0x1a8>)
 80134b0:	481e      	ldr	r0, [pc, #120]	; (801352c <netif_add+0x18c>)
 80134b2:	f008 ff9f 	bl	801c3f4 <iprintf>
        if (netif2->num == netif->num) {
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d108      	bne.n	80134d8 <netif_add+0x138>
          netif->num++;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80134cc:	3301      	adds	r3, #1
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80134d6:	e005      	b.n	80134e4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	617b      	str	r3, [r7, #20]
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1d0      	bne.n	8013486 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1be      	bne.n	8013468 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80134f0:	2bfe      	cmp	r3, #254	; 0xfe
 80134f2:	d103      	bne.n	80134fc <netif_add+0x15c>
    netif_num = 0;
 80134f4:	4b11      	ldr	r3, [pc, #68]	; (801353c <netif_add+0x19c>)
 80134f6:	2200      	movs	r2, #0
 80134f8:	701a      	strb	r2, [r3, #0]
 80134fa:	e006      	b.n	801350a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013502:	3301      	adds	r3, #1
 8013504:	b2da      	uxtb	r2, r3
 8013506:	4b0d      	ldr	r3, [pc, #52]	; (801353c <netif_add+0x19c>)
 8013508:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801350a:	4b0d      	ldr	r3, [pc, #52]	; (8013540 <netif_add+0x1a0>)
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013512:	4a0b      	ldr	r2, [pc, #44]	; (8013540 <netif_add+0x1a0>)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013518:	68fb      	ldr	r3, [r7, #12]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3718      	adds	r7, #24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	08020f60 	.word	0x08020f60
 8013528:	08021010 	.word	0x08021010
 801352c:	08020fcc 	.word	0x08020fcc
 8013530:	0802102c 	.word	0x0802102c
 8013534:	080463c8 	.word	0x080463c8
 8013538:	08013963 	.word	0x08013963
 801353c:	24004324 	.word	0x24004324
 8013540:	240079c0 	.word	0x240079c0
 8013544:	08021050 	.word	0x08021050
 8013548:	08021064 	.word	0x08021064

0801354c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013556:	6839      	ldr	r1, [r7, #0]
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f003 f845 	bl	80165e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801355e:	6839      	ldr	r1, [r7, #0]
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f008 fa73 	bl	801ba4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013566:	bf00      	nop
 8013568:	3708      	adds	r7, #8
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
	...

08013570 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d106      	bne.n	8013590 <netif_do_set_ipaddr+0x20>
 8013582:	4b1d      	ldr	r3, [pc, #116]	; (80135f8 <netif_do_set_ipaddr+0x88>)
 8013584:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013588:	491c      	ldr	r1, [pc, #112]	; (80135fc <netif_do_set_ipaddr+0x8c>)
 801358a:	481d      	ldr	r0, [pc, #116]	; (8013600 <netif_do_set_ipaddr+0x90>)
 801358c:	f008 ff32 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d106      	bne.n	80135a4 <netif_do_set_ipaddr+0x34>
 8013596:	4b18      	ldr	r3, [pc, #96]	; (80135f8 <netif_do_set_ipaddr+0x88>)
 8013598:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801359c:	4917      	ldr	r1, [pc, #92]	; (80135fc <netif_do_set_ipaddr+0x8c>)
 801359e:	4818      	ldr	r0, [pc, #96]	; (8013600 <netif_do_set_ipaddr+0x90>)
 80135a0:	f008 ff28 	bl	801c3f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	3304      	adds	r3, #4
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d01c      	beq.n	80135ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	3304      	adds	r3, #4
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80135c2:	f107 0314 	add.w	r3, r7, #20
 80135c6:	4619      	mov	r1, r3
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff ffbf 	bl	801354c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d002      	beq.n	80135da <netif_do_set_ipaddr+0x6a>
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	e000      	b.n	80135dc <netif_do_set_ipaddr+0x6c>
 80135da:	2300      	movs	r3, #0
 80135dc:	68fa      	ldr	r2, [r7, #12]
 80135de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80135e0:	2101      	movs	r1, #1
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f000 f8d2 	bl	801378c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80135e8:	2301      	movs	r3, #1
 80135ea:	e000      	b.n	80135ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80135ec:	2300      	movs	r3, #0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3718      	adds	r7, #24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	08020f60 	.word	0x08020f60
 80135fc:	08021094 	.word	0x08021094
 8013600:	08020fcc 	.word	0x08020fcc

08013604 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013604:	b480      	push	{r7}
 8013606:	b085      	sub	sp, #20
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	3308      	adds	r3, #8
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	d00a      	beq.n	8013634 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d002      	beq.n	801362a <netif_do_set_netmask+0x26>
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	e000      	b.n	801362c <netif_do_set_netmask+0x28>
 801362a:	2300      	movs	r3, #0
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013630:	2301      	movs	r3, #1
 8013632:	e000      	b.n	8013636 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013642:	b480      	push	{r7}
 8013644:	b085      	sub	sp, #20
 8013646:	af00      	add	r7, sp, #0
 8013648:	60f8      	str	r0, [r7, #12]
 801364a:	60b9      	str	r1, [r7, #8]
 801364c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	330c      	adds	r3, #12
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	429a      	cmp	r2, r3
 801365a:	d00a      	beq.n	8013672 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d002      	beq.n	8013668 <netif_do_set_gw+0x26>
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	e000      	b.n	801366a <netif_do_set_gw+0x28>
 8013668:	2300      	movs	r3, #0
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801366e:	2301      	movs	r3, #1
 8013670:	e000      	b.n	8013674 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3714      	adds	r7, #20
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801368e:	2300      	movs	r3, #0
 8013690:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013692:	2300      	movs	r3, #0
 8013694:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d101      	bne.n	80136a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801369c:	4b1c      	ldr	r3, [pc, #112]	; (8013710 <netif_set_addr+0x90>)
 801369e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d101      	bne.n	80136aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80136a6:	4b1a      	ldr	r3, [pc, #104]	; (8013710 <netif_set_addr+0x90>)
 80136a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d101      	bne.n	80136b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80136b0:	4b17      	ldr	r3, [pc, #92]	; (8013710 <netif_set_addr+0x90>)
 80136b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <netif_set_addr+0x42>
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d101      	bne.n	80136c6 <netif_set_addr+0x46>
 80136c2:	2301      	movs	r3, #1
 80136c4:	e000      	b.n	80136c8 <netif_set_addr+0x48>
 80136c6:	2300      	movs	r3, #0
 80136c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d006      	beq.n	80136de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80136d0:	f107 0310 	add.w	r3, r7, #16
 80136d4:	461a      	mov	r2, r3
 80136d6:	68b9      	ldr	r1, [r7, #8]
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	f7ff ff49 	bl	8013570 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80136de:	69fa      	ldr	r2, [r7, #28]
 80136e0:	6879      	ldr	r1, [r7, #4]
 80136e2:	68f8      	ldr	r0, [r7, #12]
 80136e4:	f7ff ff8e 	bl	8013604 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80136e8:	69ba      	ldr	r2, [r7, #24]
 80136ea:	6839      	ldr	r1, [r7, #0]
 80136ec:	68f8      	ldr	r0, [r7, #12]
 80136ee:	f7ff ffa8 	bl	8013642 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d106      	bne.n	8013706 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80136f8:	f107 0310 	add.w	r3, r7, #16
 80136fc:	461a      	mov	r2, r3
 80136fe:	68b9      	ldr	r1, [r7, #8]
 8013700:	68f8      	ldr	r0, [r7, #12]
 8013702:	f7ff ff35 	bl	8013570 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013706:	bf00      	nop
 8013708:	3720      	adds	r7, #32
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	080463c8 	.word	0x080463c8

08013714 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013714:	b480      	push	{r7}
 8013716:	b083      	sub	sp, #12
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801371c:	4a04      	ldr	r2, [pc, #16]	; (8013730 <netif_set_default+0x1c>)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013722:	bf00      	nop
 8013724:	370c      	adds	r7, #12
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr
 801372e:	bf00      	nop
 8013730:	240079c4 	.word	0x240079c4

08013734 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d107      	bne.n	8013752 <netif_set_up+0x1e>
 8013742:	4b0f      	ldr	r3, [pc, #60]	; (8013780 <netif_set_up+0x4c>)
 8013744:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013748:	490e      	ldr	r1, [pc, #56]	; (8013784 <netif_set_up+0x50>)
 801374a:	480f      	ldr	r0, [pc, #60]	; (8013788 <netif_set_up+0x54>)
 801374c:	f008 fe52 	bl	801c3f4 <iprintf>
 8013750:	e013      	b.n	801377a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013758:	f003 0301 	and.w	r3, r3, #1
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10c      	bne.n	801377a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013766:	f043 0301 	orr.w	r3, r3, #1
 801376a:	b2da      	uxtb	r2, r3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013772:	2103      	movs	r1, #3
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f000 f809 	bl	801378c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	08020f60 	.word	0x08020f60
 8013784:	08021104 	.word	0x08021104
 8013788:	08020fcc 	.word	0x08020fcc

0801378c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	460b      	mov	r3, r1
 8013796:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d106      	bne.n	80137ac <netif_issue_reports+0x20>
 801379e:	4b18      	ldr	r3, [pc, #96]	; (8013800 <netif_issue_reports+0x74>)
 80137a0:	f240 326d 	movw	r2, #877	; 0x36d
 80137a4:	4917      	ldr	r1, [pc, #92]	; (8013804 <netif_issue_reports+0x78>)
 80137a6:	4818      	ldr	r0, [pc, #96]	; (8013808 <netif_issue_reports+0x7c>)
 80137a8:	f008 fe24 	bl	801c3f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137b2:	f003 0304 	and.w	r3, r3, #4
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d01e      	beq.n	80137f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d017      	beq.n	80137f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80137c8:	78fb      	ldrb	r3, [r7, #3]
 80137ca:	f003 0301 	and.w	r3, r3, #1
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d013      	beq.n	80137fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	3304      	adds	r3, #4
 80137d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d00e      	beq.n	80137fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137e2:	f003 0308 	and.w	r3, r3, #8
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d007      	beq.n	80137fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	3304      	adds	r3, #4
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7fd fb0f 	bl	8010e14 <etharp_request>
 80137f6:	e000      	b.n	80137fa <netif_issue_reports+0x6e>
    return;
 80137f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	08020f60 	.word	0x08020f60
 8013804:	08021120 	.word	0x08021120
 8013808:	08020fcc 	.word	0x08020fcc

0801380c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d107      	bne.n	801382a <netif_set_down+0x1e>
 801381a:	4b12      	ldr	r3, [pc, #72]	; (8013864 <netif_set_down+0x58>)
 801381c:	f240 329b 	movw	r2, #923	; 0x39b
 8013820:	4911      	ldr	r1, [pc, #68]	; (8013868 <netif_set_down+0x5c>)
 8013822:	4812      	ldr	r0, [pc, #72]	; (801386c <netif_set_down+0x60>)
 8013824:	f008 fde6 	bl	801c3f4 <iprintf>
 8013828:	e019      	b.n	801385e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013830:	f003 0301 	and.w	r3, r3, #1
 8013834:	2b00      	cmp	r3, #0
 8013836:	d012      	beq.n	801385e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801383e:	f023 0301 	bic.w	r3, r3, #1
 8013842:	b2da      	uxtb	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013850:	f003 0308 	and.w	r3, r3, #8
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7fc fe95 	bl	8010588 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	08020f60 	.word	0x08020f60
 8013868:	08021144 	.word	0x08021144
 801386c:	08020fcc 	.word	0x08020fcc

08013870 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d107      	bne.n	801388e <netif_set_link_up+0x1e>
 801387e:	4b15      	ldr	r3, [pc, #84]	; (80138d4 <netif_set_link_up+0x64>)
 8013880:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013884:	4914      	ldr	r1, [pc, #80]	; (80138d8 <netif_set_link_up+0x68>)
 8013886:	4815      	ldr	r0, [pc, #84]	; (80138dc <netif_set_link_up+0x6c>)
 8013888:	f008 fdb4 	bl	801c3f4 <iprintf>
 801388c:	e01e      	b.n	80138cc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013894:	f003 0304 	and.w	r3, r3, #4
 8013898:	2b00      	cmp	r3, #0
 801389a:	d117      	bne.n	80138cc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138a2:	f043 0304 	orr.w	r3, r3, #4
 80138a6:	b2da      	uxtb	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7fb f8da 	bl	800ea68 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80138b4:	2103      	movs	r1, #3
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff ff68 	bl	801378c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	69db      	ldr	r3, [r3, #28]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d003      	beq.n	80138cc <netif_set_link_up+0x5c>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	69db      	ldr	r3, [r3, #28]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	08020f60 	.word	0x08020f60
 80138d8:	08021164 	.word	0x08021164
 80138dc:	08020fcc 	.word	0x08020fcc

080138e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d107      	bne.n	80138fe <netif_set_link_down+0x1e>
 80138ee:	4b11      	ldr	r3, [pc, #68]	; (8013934 <netif_set_link_down+0x54>)
 80138f0:	f240 4206 	movw	r2, #1030	; 0x406
 80138f4:	4910      	ldr	r1, [pc, #64]	; (8013938 <netif_set_link_down+0x58>)
 80138f6:	4811      	ldr	r0, [pc, #68]	; (801393c <netif_set_link_down+0x5c>)
 80138f8:	f008 fd7c 	bl	801c3f4 <iprintf>
 80138fc:	e017      	b.n	801392e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013904:	f003 0304 	and.w	r3, r3, #4
 8013908:	2b00      	cmp	r3, #0
 801390a:	d010      	beq.n	801392e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013912:	f023 0304 	bic.w	r3, r3, #4
 8013916:	b2da      	uxtb	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	69db      	ldr	r3, [r3, #28]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d003      	beq.n	801392e <netif_set_link_down+0x4e>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	69db      	ldr	r3, [r3, #28]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}
 8013934:	08020f60 	.word	0x08020f60
 8013938:	08021188 	.word	0x08021188
 801393c:	08020fcc 	.word	0x08020fcc

08013940 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d002      	beq.n	8013956 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	683a      	ldr	r2, [r7, #0]
 8013954:	61da      	str	r2, [r3, #28]
  }
}
 8013956:	bf00      	nop
 8013958:	370c      	adds	r7, #12
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr

08013962 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013962:	b480      	push	{r7}
 8013964:	b085      	sub	sp, #20
 8013966:	af00      	add	r7, sp, #0
 8013968:	60f8      	str	r0, [r7, #12]
 801396a:	60b9      	str	r1, [r7, #8]
 801396c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801396e:	f06f 030b 	mvn.w	r3, #11
}
 8013972:	4618      	mov	r0, r3
 8013974:	3714      	adds	r7, #20
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr
	...

08013980 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013980:	b480      	push	{r7}
 8013982:	b085      	sub	sp, #20
 8013984:	af00      	add	r7, sp, #0
 8013986:	4603      	mov	r3, r0
 8013988:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801398a:	79fb      	ldrb	r3, [r7, #7]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d013      	beq.n	80139b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <netif_get_by_index+0x48>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	60fb      	str	r3, [r7, #12]
 8013996:	e00c      	b.n	80139b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801399e:	3301      	adds	r3, #1
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	79fa      	ldrb	r2, [r7, #7]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d101      	bne.n	80139ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	e006      	b.n	80139ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	60fb      	str	r3, [r7, #12]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d1ef      	bne.n	8013998 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3714      	adds	r7, #20
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	240079c0 	.word	0x240079c0

080139cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80139d2:	f000 ffd1 	bl	8014978 <sys_arch_protect>
 80139d6:	6038      	str	r0, [r7, #0]
 80139d8:	4b0d      	ldr	r3, [pc, #52]	; (8013a10 <pbuf_free_ooseq+0x44>)
 80139da:	2200      	movs	r2, #0
 80139dc:	701a      	strb	r2, [r3, #0]
 80139de:	6838      	ldr	r0, [r7, #0]
 80139e0:	f000 ffd8 	bl	8014994 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80139e4:	4b0b      	ldr	r3, [pc, #44]	; (8013a14 <pbuf_free_ooseq+0x48>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	607b      	str	r3, [r7, #4]
 80139ea:	e00a      	b.n	8013a02 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d003      	beq.n	80139fc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f002 fe35 	bl	8016664 <tcp_free_ooseq>
      return;
 80139fa:	e005      	b.n	8013a08 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	607b      	str	r3, [r7, #4]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d1f1      	bne.n	80139ec <pbuf_free_ooseq+0x20>
    }
  }
}
 8013a08:	3708      	adds	r7, #8
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	240079c8 	.word	0x240079c8
 8013a14:	240079d8 	.word	0x240079d8

08013a18 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013a20:	f7ff ffd4 	bl	80139cc <pbuf_free_ooseq>
}
 8013a24:	bf00      	nop
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013a32:	f000 ffa1 	bl	8014978 <sys_arch_protect>
 8013a36:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013a38:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <pbuf_pool_is_empty+0x4c>)
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013a3e:	4b0e      	ldr	r3, [pc, #56]	; (8013a78 <pbuf_pool_is_empty+0x4c>)
 8013a40:	2201      	movs	r2, #1
 8013a42:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f000 ffa5 	bl	8014994 <sys_arch_unprotect>

  if (!queued) {
 8013a4a:	78fb      	ldrb	r3, [r7, #3]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10f      	bne.n	8013a70 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013a50:	2100      	movs	r1, #0
 8013a52:	480a      	ldr	r0, [pc, #40]	; (8013a7c <pbuf_pool_is_empty+0x50>)
 8013a54:	f007 f924 	bl	801aca0 <tcpip_try_callback>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d008      	beq.n	8013a70 <pbuf_pool_is_empty+0x44>
 8013a5e:	f000 ff8b 	bl	8014978 <sys_arch_protect>
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	4b04      	ldr	r3, [pc, #16]	; (8013a78 <pbuf_pool_is_empty+0x4c>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	701a      	strb	r2, [r3, #0]
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 ff92 	bl	8014994 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013a70:	bf00      	nop
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	240079c8 	.word	0x240079c8
 8013a7c:	08013a19 	.word	0x08013a19

08013a80 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013a80:	b480      	push	{r7}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	4611      	mov	r1, r2
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	460b      	mov	r3, r1
 8013a90:	80fb      	strh	r3, [r7, #6]
 8013a92:	4613      	mov	r3, r2
 8013a94:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	88fa      	ldrh	r2, [r7, #6]
 8013aa6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	88ba      	ldrh	r2, [r7, #4]
 8013aac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013aae:	8b3b      	ldrh	r3, [r7, #24]
 8013ab0:	b2da      	uxtb	r2, r3
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	7f3a      	ldrb	r2, [r7, #28]
 8013aba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2201      	movs	r2, #1
 8013ac0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	73da      	strb	r2, [r3, #15]
}
 8013ac8:	bf00      	nop
 8013aca:	3714      	adds	r7, #20
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr

08013ad4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08c      	sub	sp, #48	; 0x30
 8013ad8:	af02      	add	r7, sp, #8
 8013ada:	4603      	mov	r3, r0
 8013adc:	71fb      	strb	r3, [r7, #7]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	80bb      	strh	r3, [r7, #4]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013ae6:	79fb      	ldrb	r3, [r7, #7]
 8013ae8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013aea:	887b      	ldrh	r3, [r7, #2]
 8013aec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013af0:	d07f      	beq.n	8013bf2 <pbuf_alloc+0x11e>
 8013af2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013af6:	f300 80c8 	bgt.w	8013c8a <pbuf_alloc+0x1b6>
 8013afa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013afe:	d010      	beq.n	8013b22 <pbuf_alloc+0x4e>
 8013b00:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013b04:	f300 80c1 	bgt.w	8013c8a <pbuf_alloc+0x1b6>
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d002      	beq.n	8013b12 <pbuf_alloc+0x3e>
 8013b0c:	2b41      	cmp	r3, #65	; 0x41
 8013b0e:	f040 80bc 	bne.w	8013c8a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013b12:	887a      	ldrh	r2, [r7, #2]
 8013b14:	88bb      	ldrh	r3, [r7, #4]
 8013b16:	4619      	mov	r1, r3
 8013b18:	2000      	movs	r0, #0
 8013b1a:	f000 f8d1 	bl	8013cc0 <pbuf_alloc_reference>
 8013b1e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013b20:	e0bd      	b.n	8013c9e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013b26:	2300      	movs	r3, #0
 8013b28:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013b2a:	88bb      	ldrh	r3, [r7, #4]
 8013b2c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013b2e:	200c      	movs	r0, #12
 8013b30:	f7ff faf4 	bl	801311c <memp_malloc>
 8013b34:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d109      	bne.n	8013b50 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013b3c:	f7ff ff76 	bl	8013a2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d002      	beq.n	8013b4c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b48:	f000 faa8 	bl	801409c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	e0a7      	b.n	8013ca0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013b50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b52:	3303      	adds	r3, #3
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	f023 0303 	bic.w	r3, r3, #3
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	8b7a      	ldrh	r2, [r7, #26]
 8013b64:	4293      	cmp	r3, r2
 8013b66:	bf28      	it	cs
 8013b68:	4613      	movcs	r3, r2
 8013b6a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013b6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b6e:	3310      	adds	r3, #16
 8013b70:	693a      	ldr	r2, [r7, #16]
 8013b72:	4413      	add	r3, r2
 8013b74:	3303      	adds	r3, #3
 8013b76:	f023 0303 	bic.w	r3, r3, #3
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	89f9      	ldrh	r1, [r7, #14]
 8013b7e:	8b7a      	ldrh	r2, [r7, #26]
 8013b80:	2300      	movs	r3, #0
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	887b      	ldrh	r3, [r7, #2]
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4601      	mov	r1, r0
 8013b8c:	6938      	ldr	r0, [r7, #16]
 8013b8e:	f7ff ff77 	bl	8013a80 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	f003 0303 	and.w	r3, r3, #3
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d006      	beq.n	8013bac <pbuf_alloc+0xd8>
 8013b9e:	4b42      	ldr	r3, [pc, #264]	; (8013ca8 <pbuf_alloc+0x1d4>)
 8013ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ba4:	4941      	ldr	r1, [pc, #260]	; (8013cac <pbuf_alloc+0x1d8>)
 8013ba6:	4842      	ldr	r0, [pc, #264]	; (8013cb0 <pbuf_alloc+0x1dc>)
 8013ba8:	f008 fc24 	bl	801c3f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013bac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bae:	3303      	adds	r3, #3
 8013bb0:	f023 0303 	bic.w	r3, r3, #3
 8013bb4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013bb8:	d106      	bne.n	8013bc8 <pbuf_alloc+0xf4>
 8013bba:	4b3b      	ldr	r3, [pc, #236]	; (8013ca8 <pbuf_alloc+0x1d4>)
 8013bbc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013bc0:	493c      	ldr	r1, [pc, #240]	; (8013cb4 <pbuf_alloc+0x1e0>)
 8013bc2:	483b      	ldr	r0, [pc, #236]	; (8013cb0 <pbuf_alloc+0x1dc>)
 8013bc4:	f008 fc16 	bl	801c3f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d102      	bne.n	8013bd4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8013bd2:	e002      	b.n	8013bda <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	693a      	ldr	r2, [r7, #16]
 8013bd8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013bde:	8b7a      	ldrh	r2, [r7, #26]
 8013be0:	89fb      	ldrh	r3, [r7, #14]
 8013be2:	1ad3      	subs	r3, r2, r3
 8013be4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013be6:	2300      	movs	r3, #0
 8013be8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013bea:	8b7b      	ldrh	r3, [r7, #26]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d19e      	bne.n	8013b2e <pbuf_alloc+0x5a>
      break;
 8013bf0:	e055      	b.n	8013c9e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bf4:	3303      	adds	r3, #3
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	f023 0303 	bic.w	r3, r3, #3
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	88bb      	ldrh	r3, [r7, #4]
 8013c00:	3303      	adds	r3, #3
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	f023 0303 	bic.w	r3, r3, #3
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4413      	add	r3, r2
 8013c0c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013c0e:	8b3b      	ldrh	r3, [r7, #24]
 8013c10:	3310      	adds	r3, #16
 8013c12:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013c14:	8b3a      	ldrh	r2, [r7, #24]
 8013c16:	88bb      	ldrh	r3, [r7, #4]
 8013c18:	3303      	adds	r3, #3
 8013c1a:	f023 0303 	bic.w	r3, r3, #3
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d306      	bcc.n	8013c30 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013c22:	8afa      	ldrh	r2, [r7, #22]
 8013c24:	88bb      	ldrh	r3, [r7, #4]
 8013c26:	3303      	adds	r3, #3
 8013c28:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d201      	bcs.n	8013c34 <pbuf_alloc+0x160>
        return NULL;
 8013c30:	2300      	movs	r3, #0
 8013c32:	e035      	b.n	8013ca0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013c34:	8afb      	ldrh	r3, [r7, #22]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7ff f8c8 	bl	8012dcc <mem_malloc>
 8013c3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d101      	bne.n	8013c48 <pbuf_alloc+0x174>
        return NULL;
 8013c44:	2300      	movs	r3, #0
 8013c46:	e02b      	b.n	8013ca0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013c48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c4a:	3310      	adds	r3, #16
 8013c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c4e:	4413      	add	r3, r2
 8013c50:	3303      	adds	r3, #3
 8013c52:	f023 0303 	bic.w	r3, r3, #3
 8013c56:	4618      	mov	r0, r3
 8013c58:	88b9      	ldrh	r1, [r7, #4]
 8013c5a:	88ba      	ldrh	r2, [r7, #4]
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9301      	str	r3, [sp, #4]
 8013c60:	887b      	ldrh	r3, [r7, #2]
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	460b      	mov	r3, r1
 8013c66:	4601      	mov	r1, r0
 8013c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c6a:	f7ff ff09 	bl	8013a80 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	f003 0303 	and.w	r3, r3, #3
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d010      	beq.n	8013c9c <pbuf_alloc+0x1c8>
 8013c7a:	4b0b      	ldr	r3, [pc, #44]	; (8013ca8 <pbuf_alloc+0x1d4>)
 8013c7c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013c80:	490d      	ldr	r1, [pc, #52]	; (8013cb8 <pbuf_alloc+0x1e4>)
 8013c82:	480b      	ldr	r0, [pc, #44]	; (8013cb0 <pbuf_alloc+0x1dc>)
 8013c84:	f008 fbb6 	bl	801c3f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013c88:	e008      	b.n	8013c9c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013c8a:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <pbuf_alloc+0x1d4>)
 8013c8c:	f240 1227 	movw	r2, #295	; 0x127
 8013c90:	490a      	ldr	r1, [pc, #40]	; (8013cbc <pbuf_alloc+0x1e8>)
 8013c92:	4807      	ldr	r0, [pc, #28]	; (8013cb0 <pbuf_alloc+0x1dc>)
 8013c94:	f008 fbae 	bl	801c3f4 <iprintf>
      return NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	e001      	b.n	8013ca0 <pbuf_alloc+0x1cc>
      break;
 8013c9c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3728      	adds	r7, #40	; 0x28
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	080211ac 	.word	0x080211ac
 8013cac:	080211fc 	.word	0x080211fc
 8013cb0:	0802122c 	.word	0x0802122c
 8013cb4:	08021254 	.word	0x08021254
 8013cb8:	08021288 	.word	0x08021288
 8013cbc:	080212b4 	.word	0x080212b4

08013cc0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	460b      	mov	r3, r1
 8013cca:	807b      	strh	r3, [r7, #2]
 8013ccc:	4613      	mov	r3, r2
 8013cce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013cd0:	883b      	ldrh	r3, [r7, #0]
 8013cd2:	2b41      	cmp	r3, #65	; 0x41
 8013cd4:	d009      	beq.n	8013cea <pbuf_alloc_reference+0x2a>
 8013cd6:	883b      	ldrh	r3, [r7, #0]
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d006      	beq.n	8013cea <pbuf_alloc_reference+0x2a>
 8013cdc:	4b0f      	ldr	r3, [pc, #60]	; (8013d1c <pbuf_alloc_reference+0x5c>)
 8013cde:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013ce2:	490f      	ldr	r1, [pc, #60]	; (8013d20 <pbuf_alloc_reference+0x60>)
 8013ce4:	480f      	ldr	r0, [pc, #60]	; (8013d24 <pbuf_alloc_reference+0x64>)
 8013ce6:	f008 fb85 	bl	801c3f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013cea:	200b      	movs	r0, #11
 8013cec:	f7ff fa16 	bl	801311c <memp_malloc>
 8013cf0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d101      	bne.n	8013cfc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	e00b      	b.n	8013d14 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013cfc:	8879      	ldrh	r1, [r7, #2]
 8013cfe:	887a      	ldrh	r2, [r7, #2]
 8013d00:	2300      	movs	r3, #0
 8013d02:	9301      	str	r3, [sp, #4]
 8013d04:	883b      	ldrh	r3, [r7, #0]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	460b      	mov	r3, r1
 8013d0a:	6879      	ldr	r1, [r7, #4]
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f7ff feb7 	bl	8013a80 <pbuf_init_alloced_pbuf>
  return p;
 8013d12:	68fb      	ldr	r3, [r7, #12]
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	080211ac 	.word	0x080211ac
 8013d20:	080212d0 	.word	0x080212d0
 8013d24:	0802122c 	.word	0x0802122c

08013d28 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b088      	sub	sp, #32
 8013d2c:	af02      	add	r7, sp, #8
 8013d2e:	607b      	str	r3, [r7, #4]
 8013d30:	4603      	mov	r3, r0
 8013d32:	73fb      	strb	r3, [r7, #15]
 8013d34:	460b      	mov	r3, r1
 8013d36:	81bb      	strh	r3, [r7, #12]
 8013d38:	4613      	mov	r3, r2
 8013d3a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013d3c:	7bfb      	ldrb	r3, [r7, #15]
 8013d3e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013d40:	8a7b      	ldrh	r3, [r7, #18]
 8013d42:	3303      	adds	r3, #3
 8013d44:	f023 0203 	bic.w	r2, r3, #3
 8013d48:	89bb      	ldrh	r3, [r7, #12]
 8013d4a:	441a      	add	r2, r3
 8013d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d901      	bls.n	8013d56 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013d52:	2300      	movs	r3, #0
 8013d54:	e018      	b.n	8013d88 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013d56:	6a3b      	ldr	r3, [r7, #32]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d007      	beq.n	8013d6c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013d5c:	8a7b      	ldrh	r3, [r7, #18]
 8013d5e:	3303      	adds	r3, #3
 8013d60:	f023 0303 	bic.w	r3, r3, #3
 8013d64:	6a3a      	ldr	r2, [r7, #32]
 8013d66:	4413      	add	r3, r2
 8013d68:	617b      	str	r3, [r7, #20]
 8013d6a:	e001      	b.n	8013d70 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	89b9      	ldrh	r1, [r7, #12]
 8013d74:	89ba      	ldrh	r2, [r7, #12]
 8013d76:	2302      	movs	r3, #2
 8013d78:	9301      	str	r3, [sp, #4]
 8013d7a:	897b      	ldrh	r3, [r7, #10]
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	460b      	mov	r3, r1
 8013d80:	6979      	ldr	r1, [r7, #20]
 8013d82:	f7ff fe7d 	bl	8013a80 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013d86:	687b      	ldr	r3, [r7, #4]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3718      	adds	r7, #24
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <pbuf_realloc+0x20>
 8013da2:	4b3a      	ldr	r3, [pc, #232]	; (8013e8c <pbuf_realloc+0xfc>)
 8013da4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013da8:	4939      	ldr	r1, [pc, #228]	; (8013e90 <pbuf_realloc+0x100>)
 8013daa:	483a      	ldr	r0, [pc, #232]	; (8013e94 <pbuf_realloc+0x104>)
 8013dac:	f008 fb22 	bl	801c3f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	891b      	ldrh	r3, [r3, #8]
 8013db4:	887a      	ldrh	r2, [r7, #2]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d263      	bcs.n	8013e82 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	891a      	ldrh	r2, [r3, #8]
 8013dbe:	887b      	ldrh	r3, [r7, #2]
 8013dc0:	1ad3      	subs	r3, r2, r3
 8013dc2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013dc4:	887b      	ldrh	r3, [r7, #2]
 8013dc6:	817b      	strh	r3, [r7, #10]
  q = p;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013dcc:	e018      	b.n	8013e00 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	895b      	ldrh	r3, [r3, #10]
 8013dd2:	897a      	ldrh	r2, [r7, #10]
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	891a      	ldrh	r2, [r3, #8]
 8013ddc:	893b      	ldrh	r3, [r7, #8]
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d106      	bne.n	8013e00 <pbuf_realloc+0x70>
 8013df2:	4b26      	ldr	r3, [pc, #152]	; (8013e8c <pbuf_realloc+0xfc>)
 8013df4:	f240 12af 	movw	r2, #431	; 0x1af
 8013df8:	4927      	ldr	r1, [pc, #156]	; (8013e98 <pbuf_realloc+0x108>)
 8013dfa:	4826      	ldr	r0, [pc, #152]	; (8013e94 <pbuf_realloc+0x104>)
 8013dfc:	f008 fafa 	bl	801c3f4 <iprintf>
  while (rem_len > q->len) {
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	895b      	ldrh	r3, [r3, #10]
 8013e04:	897a      	ldrh	r2, [r7, #10]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d8e1      	bhi.n	8013dce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	7b1b      	ldrb	r3, [r3, #12]
 8013e0e:	f003 030f 	and.w	r3, r3, #15
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d121      	bne.n	8013e5a <pbuf_realloc+0xca>
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	895b      	ldrh	r3, [r3, #10]
 8013e1a:	897a      	ldrh	r2, [r7, #10]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d01c      	beq.n	8013e5a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	7b5b      	ldrb	r3, [r3, #13]
 8013e24:	f003 0302 	and.w	r3, r3, #2
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d116      	bne.n	8013e5a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	685a      	ldr	r2, [r3, #4]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	1ad3      	subs	r3, r2, r3
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	897b      	ldrh	r3, [r7, #10]
 8013e38:	4413      	add	r3, r2
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	68f8      	ldr	r0, [r7, #12]
 8013e40:	f7fe feb4 	bl	8012bac <mem_trim>
 8013e44:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d106      	bne.n	8013e5a <pbuf_realloc+0xca>
 8013e4c:	4b0f      	ldr	r3, [pc, #60]	; (8013e8c <pbuf_realloc+0xfc>)
 8013e4e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013e52:	4912      	ldr	r1, [pc, #72]	; (8013e9c <pbuf_realloc+0x10c>)
 8013e54:	480f      	ldr	r0, [pc, #60]	; (8013e94 <pbuf_realloc+0x104>)
 8013e56:	f008 facd 	bl	801c3f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	897a      	ldrh	r2, [r7, #10]
 8013e5e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	895a      	ldrh	r2, [r3, #10]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d004      	beq.n	8013e7a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f000 f911 	bl	801409c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	601a      	str	r2, [r3, #0]
 8013e80:	e000      	b.n	8013e84 <pbuf_realloc+0xf4>
    return;
 8013e82:	bf00      	nop

}
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	080211ac 	.word	0x080211ac
 8013e90:	080212e4 	.word	0x080212e4
 8013e94:	0802122c 	.word	0x0802122c
 8013e98:	080212fc 	.word	0x080212fc
 8013e9c:	08021314 	.word	0x08021314

08013ea0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	4613      	mov	r3, r2
 8013eac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d106      	bne.n	8013ec2 <pbuf_add_header_impl+0x22>
 8013eb4:	4b2b      	ldr	r3, [pc, #172]	; (8013f64 <pbuf_add_header_impl+0xc4>)
 8013eb6:	f240 12df 	movw	r2, #479	; 0x1df
 8013eba:	492b      	ldr	r1, [pc, #172]	; (8013f68 <pbuf_add_header_impl+0xc8>)
 8013ebc:	482b      	ldr	r0, [pc, #172]	; (8013f6c <pbuf_add_header_impl+0xcc>)
 8013ebe:	f008 fa99 	bl	801c3f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d003      	beq.n	8013ed0 <pbuf_add_header_impl+0x30>
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ece:	d301      	bcc.n	8013ed4 <pbuf_add_header_impl+0x34>
    return 1;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	e043      	b.n	8013f5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d101      	bne.n	8013ede <pbuf_add_header_impl+0x3e>
    return 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	e03e      	b.n	8013f5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	891a      	ldrh	r2, [r3, #8]
 8013ee6:	8a7b      	ldrh	r3, [r7, #18]
 8013ee8:	4413      	add	r3, r2
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	8a7a      	ldrh	r2, [r7, #18]
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d901      	bls.n	8013ef6 <pbuf_add_header_impl+0x56>
    return 1;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e032      	b.n	8013f5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	7b1b      	ldrb	r3, [r3, #12]
 8013efa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013efc:	8a3b      	ldrh	r3, [r7, #16]
 8013efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00c      	beq.n	8013f20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	685a      	ldr	r2, [r3, #4]
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	425b      	negs	r3, r3
 8013f0e:	4413      	add	r3, r2
 8013f10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	3310      	adds	r3, #16
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d20d      	bcs.n	8013f38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e01d      	b.n	8013f5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013f20:	79fb      	ldrb	r3, [r7, #7]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d006      	beq.n	8013f34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	685a      	ldr	r2, [r3, #4]
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	425b      	negs	r3, r3
 8013f2e:	4413      	add	r3, r2
 8013f30:	617b      	str	r3, [r7, #20]
 8013f32:	e001      	b.n	8013f38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013f34:	2301      	movs	r3, #1
 8013f36:	e011      	b.n	8013f5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	697a      	ldr	r2, [r7, #20]
 8013f3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	895a      	ldrh	r2, [r3, #10]
 8013f42:	8a7b      	ldrh	r3, [r7, #18]
 8013f44:	4413      	add	r3, r2
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	891a      	ldrh	r2, [r3, #8]
 8013f50:	8a7b      	ldrh	r3, [r7, #18]
 8013f52:	4413      	add	r3, r2
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	811a      	strh	r2, [r3, #8]


  return 0;
 8013f5a:	2300      	movs	r3, #0
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3718      	adds	r7, #24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	080211ac 	.word	0x080211ac
 8013f68:	08021330 	.word	0x08021330
 8013f6c:	0802122c 	.word	0x0802122c

08013f70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	6839      	ldr	r1, [r7, #0]
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff ff8e 	bl	8013ea0 <pbuf_add_header_impl>
 8013f84:	4603      	mov	r3, r0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
	...

08013f90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d106      	bne.n	8013fae <pbuf_remove_header+0x1e>
 8013fa0:	4b20      	ldr	r3, [pc, #128]	; (8014024 <pbuf_remove_header+0x94>)
 8013fa2:	f240 224b 	movw	r2, #587	; 0x24b
 8013fa6:	4920      	ldr	r1, [pc, #128]	; (8014028 <pbuf_remove_header+0x98>)
 8013fa8:	4820      	ldr	r0, [pc, #128]	; (801402c <pbuf_remove_header+0x9c>)
 8013faa:	f008 fa23 	bl	801c3f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d003      	beq.n	8013fbc <pbuf_remove_header+0x2c>
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fba:	d301      	bcc.n	8013fc0 <pbuf_remove_header+0x30>
    return 1;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	e02c      	b.n	801401a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d101      	bne.n	8013fca <pbuf_remove_header+0x3a>
    return 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	e027      	b.n	801401a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	895b      	ldrh	r3, [r3, #10]
 8013fd2:	89fa      	ldrh	r2, [r7, #14]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d908      	bls.n	8013fea <pbuf_remove_header+0x5a>
 8013fd8:	4b12      	ldr	r3, [pc, #72]	; (8014024 <pbuf_remove_header+0x94>)
 8013fda:	f240 2255 	movw	r2, #597	; 0x255
 8013fde:	4914      	ldr	r1, [pc, #80]	; (8014030 <pbuf_remove_header+0xa0>)
 8013fe0:	4812      	ldr	r0, [pc, #72]	; (801402c <pbuf_remove_header+0x9c>)
 8013fe2:	f008 fa07 	bl	801c3f4 <iprintf>
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e017      	b.n	801401a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	685b      	ldr	r3, [r3, #4]
 8013fee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	685a      	ldr	r2, [r3, #4]
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	441a      	add	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	895a      	ldrh	r2, [r3, #10]
 8014000:	89fb      	ldrh	r3, [r7, #14]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	891a      	ldrh	r2, [r3, #8]
 801400e:	89fb      	ldrh	r3, [r7, #14]
 8014010:	1ad3      	subs	r3, r2, r3
 8014012:	b29a      	uxth	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014018:	2300      	movs	r3, #0
}
 801401a:	4618      	mov	r0, r3
 801401c:	3710      	adds	r7, #16
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	080211ac 	.word	0x080211ac
 8014028:	08021330 	.word	0x08021330
 801402c:	0802122c 	.word	0x0802122c
 8014030:	0802133c 	.word	0x0802133c

08014034 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	460b      	mov	r3, r1
 801403e:	807b      	strh	r3, [r7, #2]
 8014040:	4613      	mov	r3, r2
 8014042:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014048:	2b00      	cmp	r3, #0
 801404a:	da08      	bge.n	801405e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801404c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014050:	425b      	negs	r3, r3
 8014052:	4619      	mov	r1, r3
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f7ff ff9b 	bl	8013f90 <pbuf_remove_header>
 801405a:	4603      	mov	r3, r0
 801405c:	e007      	b.n	801406e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801405e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014062:	787a      	ldrb	r2, [r7, #1]
 8014064:	4619      	mov	r1, r3
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f7ff ff1a 	bl	8013ea0 <pbuf_add_header_impl>
 801406c:	4603      	mov	r3, r0
  }
}
 801406e:	4618      	mov	r0, r3
 8014070:	3708      	adds	r7, #8
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b082      	sub	sp, #8
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
 801407e:	460b      	mov	r3, r1
 8014080:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014086:	2201      	movs	r2, #1
 8014088:	4619      	mov	r1, r3
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7ff ffd2 	bl	8014034 <pbuf_header_impl>
 8014090:	4603      	mov	r3, r0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
	...

0801409c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b088      	sub	sp, #32
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d10b      	bne.n	80140c2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d106      	bne.n	80140be <pbuf_free+0x22>
 80140b0:	4b3b      	ldr	r3, [pc, #236]	; (80141a0 <pbuf_free+0x104>)
 80140b2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80140b6:	493b      	ldr	r1, [pc, #236]	; (80141a4 <pbuf_free+0x108>)
 80140b8:	483b      	ldr	r0, [pc, #236]	; (80141a8 <pbuf_free+0x10c>)
 80140ba:	f008 f99b 	bl	801c3f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80140be:	2300      	movs	r3, #0
 80140c0:	e069      	b.n	8014196 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80140c6:	e062      	b.n	801418e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80140c8:	f000 fc56 	bl	8014978 <sys_arch_protect>
 80140cc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	7b9b      	ldrb	r3, [r3, #14]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <pbuf_free+0x48>
 80140d6:	4b32      	ldr	r3, [pc, #200]	; (80141a0 <pbuf_free+0x104>)
 80140d8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80140dc:	4933      	ldr	r1, [pc, #204]	; (80141ac <pbuf_free+0x110>)
 80140de:	4832      	ldr	r0, [pc, #200]	; (80141a8 <pbuf_free+0x10c>)
 80140e0:	f008 f988 	bl	801c3f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	7b9b      	ldrb	r3, [r3, #14]
 80140e8:	3b01      	subs	r3, #1
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	739a      	strb	r2, [r3, #14]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	7b9b      	ldrb	r3, [r3, #14]
 80140f4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80140f6:	69b8      	ldr	r0, [r7, #24]
 80140f8:	f000 fc4c 	bl	8014994 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80140fc:	7dfb      	ldrb	r3, [r7, #23]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d143      	bne.n	801418a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	7b1b      	ldrb	r3, [r3, #12]
 801410c:	f003 030f 	and.w	r3, r3, #15
 8014110:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	7b5b      	ldrb	r3, [r3, #13]
 8014116:	f003 0302 	and.w	r3, r3, #2
 801411a:	2b00      	cmp	r3, #0
 801411c:	d011      	beq.n	8014142 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d106      	bne.n	8014138 <pbuf_free+0x9c>
 801412a:	4b1d      	ldr	r3, [pc, #116]	; (80141a0 <pbuf_free+0x104>)
 801412c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014130:	491f      	ldr	r1, [pc, #124]	; (80141b0 <pbuf_free+0x114>)
 8014132:	481d      	ldr	r0, [pc, #116]	; (80141a8 <pbuf_free+0x10c>)
 8014134:	f008 f95e 	bl	801c3f4 <iprintf>
        pc->custom_free_function(p);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	691b      	ldr	r3, [r3, #16]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	4798      	blx	r3
 8014140:	e01d      	b.n	801417e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014142:	7bfb      	ldrb	r3, [r7, #15]
 8014144:	2b02      	cmp	r3, #2
 8014146:	d104      	bne.n	8014152 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014148:	6879      	ldr	r1, [r7, #4]
 801414a:	200c      	movs	r0, #12
 801414c:	f7ff f85c 	bl	8013208 <memp_free>
 8014150:	e015      	b.n	801417e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014152:	7bfb      	ldrb	r3, [r7, #15]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d104      	bne.n	8014162 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014158:	6879      	ldr	r1, [r7, #4]
 801415a:	200b      	movs	r0, #11
 801415c:	f7ff f854 	bl	8013208 <memp_free>
 8014160:	e00d      	b.n	801417e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014162:	7bfb      	ldrb	r3, [r7, #15]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d103      	bne.n	8014170 <pbuf_free+0xd4>
          mem_free(p);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7fe fc8f 	bl	8012a8c <mem_free>
 801416e:	e006      	b.n	801417e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014170:	4b0b      	ldr	r3, [pc, #44]	; (80141a0 <pbuf_free+0x104>)
 8014172:	f240 320f 	movw	r2, #783	; 0x30f
 8014176:	490f      	ldr	r1, [pc, #60]	; (80141b4 <pbuf_free+0x118>)
 8014178:	480b      	ldr	r0, [pc, #44]	; (80141a8 <pbuf_free+0x10c>)
 801417a:	f008 f93b 	bl	801c3f4 <iprintf>
        }
      }
      count++;
 801417e:	7ffb      	ldrb	r3, [r7, #31]
 8014180:	3301      	adds	r3, #1
 8014182:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	607b      	str	r3, [r7, #4]
 8014188:	e001      	b.n	801418e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801418a:	2300      	movs	r3, #0
 801418c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d199      	bne.n	80140c8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014194:	7ffb      	ldrb	r3, [r7, #31]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3720      	adds	r7, #32
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	080211ac 	.word	0x080211ac
 80141a4:	08021330 	.word	0x08021330
 80141a8:	0802122c 	.word	0x0802122c
 80141ac:	0802135c 	.word	0x0802135c
 80141b0:	08021374 	.word	0x08021374
 80141b4:	08021398 	.word	0x08021398

080141b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b085      	sub	sp, #20
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80141c0:	2300      	movs	r3, #0
 80141c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80141c4:	e005      	b.n	80141d2 <pbuf_clen+0x1a>
    ++len;
 80141c6:	89fb      	ldrh	r3, [r7, #14]
 80141c8:	3301      	adds	r3, #1
 80141ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d1f6      	bne.n	80141c6 <pbuf_clen+0xe>
  }
  return len;
 80141d8:	89fb      	ldrh	r3, [r7, #14]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
	...

080141e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b084      	sub	sp, #16
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d016      	beq.n	8014224 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80141f6:	f000 fbbf 	bl	8014978 <sys_arch_protect>
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	7b9b      	ldrb	r3, [r3, #14]
 8014200:	3301      	adds	r3, #1
 8014202:	b2da      	uxtb	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	739a      	strb	r2, [r3, #14]
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	f000 fbc3 	bl	8014994 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	7b9b      	ldrb	r3, [r3, #14]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d106      	bne.n	8014224 <pbuf_ref+0x3c>
 8014216:	4b05      	ldr	r3, [pc, #20]	; (801422c <pbuf_ref+0x44>)
 8014218:	f240 3242 	movw	r2, #834	; 0x342
 801421c:	4904      	ldr	r1, [pc, #16]	; (8014230 <pbuf_ref+0x48>)
 801421e:	4805      	ldr	r0, [pc, #20]	; (8014234 <pbuf_ref+0x4c>)
 8014220:	f008 f8e8 	bl	801c3f4 <iprintf>
  }
}
 8014224:	bf00      	nop
 8014226:	3710      	adds	r7, #16
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	080211ac 	.word	0x080211ac
 8014230:	080213ac 	.word	0x080213ac
 8014234:	0802122c 	.word	0x0802122c

08014238 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d002      	beq.n	801424e <pbuf_cat+0x16>
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d107      	bne.n	801425e <pbuf_cat+0x26>
 801424e:	4b20      	ldr	r3, [pc, #128]	; (80142d0 <pbuf_cat+0x98>)
 8014250:	f240 3259 	movw	r2, #857	; 0x359
 8014254:	491f      	ldr	r1, [pc, #124]	; (80142d4 <pbuf_cat+0x9c>)
 8014256:	4820      	ldr	r0, [pc, #128]	; (80142d8 <pbuf_cat+0xa0>)
 8014258:	f008 f8cc 	bl	801c3f4 <iprintf>
 801425c:	e034      	b.n	80142c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	60fb      	str	r3, [r7, #12]
 8014262:	e00a      	b.n	801427a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	891a      	ldrh	r2, [r3, #8]
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	891b      	ldrh	r3, [r3, #8]
 801426c:	4413      	add	r3, r2
 801426e:	b29a      	uxth	r2, r3
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	60fb      	str	r3, [r7, #12]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1f0      	bne.n	8014264 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	891a      	ldrh	r2, [r3, #8]
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	895b      	ldrh	r3, [r3, #10]
 801428a:	429a      	cmp	r2, r3
 801428c:	d006      	beq.n	801429c <pbuf_cat+0x64>
 801428e:	4b10      	ldr	r3, [pc, #64]	; (80142d0 <pbuf_cat+0x98>)
 8014290:	f240 3262 	movw	r2, #866	; 0x362
 8014294:	4911      	ldr	r1, [pc, #68]	; (80142dc <pbuf_cat+0xa4>)
 8014296:	4810      	ldr	r0, [pc, #64]	; (80142d8 <pbuf_cat+0xa0>)
 8014298:	f008 f8ac 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d006      	beq.n	80142b2 <pbuf_cat+0x7a>
 80142a4:	4b0a      	ldr	r3, [pc, #40]	; (80142d0 <pbuf_cat+0x98>)
 80142a6:	f240 3263 	movw	r2, #867	; 0x363
 80142aa:	490d      	ldr	r1, [pc, #52]	; (80142e0 <pbuf_cat+0xa8>)
 80142ac:	480a      	ldr	r0, [pc, #40]	; (80142d8 <pbuf_cat+0xa0>)
 80142ae:	f008 f8a1 	bl	801c3f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	891a      	ldrh	r2, [r3, #8]
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	891b      	ldrh	r3, [r3, #8]
 80142ba:	4413      	add	r3, r2
 80142bc:	b29a      	uxth	r2, r3
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	683a      	ldr	r2, [r7, #0]
 80142c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	080211ac 	.word	0x080211ac
 80142d4:	080213c0 	.word	0x080213c0
 80142d8:	0802122c 	.word	0x0802122c
 80142dc:	080213f8 	.word	0x080213f8
 80142e0:	08021428 	.word	0x08021428

080142e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80142ee:	6839      	ldr	r1, [r7, #0]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f7ff ffa1 	bl	8014238 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80142f6:	6838      	ldr	r0, [r7, #0]
 80142f8:	f7ff ff76 	bl	80141e8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80142fc:	bf00      	nop
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b086      	sub	sp, #24
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801430e:	2300      	movs	r3, #0
 8014310:	617b      	str	r3, [r7, #20]
 8014312:	2300      	movs	r3, #0
 8014314:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d008      	beq.n	801432e <pbuf_copy+0x2a>
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d005      	beq.n	801432e <pbuf_copy+0x2a>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	891a      	ldrh	r2, [r3, #8]
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	891b      	ldrh	r3, [r3, #8]
 801432a:	429a      	cmp	r2, r3
 801432c:	d209      	bcs.n	8014342 <pbuf_copy+0x3e>
 801432e:	4b57      	ldr	r3, [pc, #348]	; (801448c <pbuf_copy+0x188>)
 8014330:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014334:	4956      	ldr	r1, [pc, #344]	; (8014490 <pbuf_copy+0x18c>)
 8014336:	4857      	ldr	r0, [pc, #348]	; (8014494 <pbuf_copy+0x190>)
 8014338:	f008 f85c 	bl	801c3f4 <iprintf>
 801433c:	f06f 030f 	mvn.w	r3, #15
 8014340:	e09f      	b.n	8014482 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	895b      	ldrh	r3, [r3, #10]
 8014346:	461a      	mov	r2, r3
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	1ad2      	subs	r2, r2, r3
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	895b      	ldrh	r3, [r3, #10]
 8014350:	4619      	mov	r1, r3
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	1acb      	subs	r3, r1, r3
 8014356:	429a      	cmp	r2, r3
 8014358:	d306      	bcc.n	8014368 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	895b      	ldrh	r3, [r3, #10]
 801435e:	461a      	mov	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	e005      	b.n	8014374 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	895b      	ldrh	r3, [r3, #10]
 801436c:	461a      	mov	r2, r3
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	1ad3      	subs	r3, r2, r3
 8014372:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	685a      	ldr	r2, [r3, #4]
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	18d0      	adds	r0, r2, r3
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	685a      	ldr	r2, [r3, #4]
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	4413      	add	r3, r2
 8014384:	68fa      	ldr	r2, [r7, #12]
 8014386:	4619      	mov	r1, r3
 8014388:	f007 fbc2 	bl	801bb10 <memcpy>
    offset_to += len;
 801438c:	697a      	ldr	r2, [r7, #20]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	4413      	add	r3, r2
 8014392:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014394:	693a      	ldr	r2, [r7, #16]
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	4413      	add	r3, r2
 801439a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	895b      	ldrh	r3, [r3, #10]
 80143a0:	461a      	mov	r2, r3
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d906      	bls.n	80143b6 <pbuf_copy+0xb2>
 80143a8:	4b38      	ldr	r3, [pc, #224]	; (801448c <pbuf_copy+0x188>)
 80143aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80143ae:	493a      	ldr	r1, [pc, #232]	; (8014498 <pbuf_copy+0x194>)
 80143b0:	4838      	ldr	r0, [pc, #224]	; (8014494 <pbuf_copy+0x190>)
 80143b2:	f008 f81f 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	895b      	ldrh	r3, [r3, #10]
 80143ba:	461a      	mov	r2, r3
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	4293      	cmp	r3, r2
 80143c0:	d906      	bls.n	80143d0 <pbuf_copy+0xcc>
 80143c2:	4b32      	ldr	r3, [pc, #200]	; (801448c <pbuf_copy+0x188>)
 80143c4:	f240 32da 	movw	r2, #986	; 0x3da
 80143c8:	4934      	ldr	r1, [pc, #208]	; (801449c <pbuf_copy+0x198>)
 80143ca:	4832      	ldr	r0, [pc, #200]	; (8014494 <pbuf_copy+0x190>)
 80143cc:	f008 f812 	bl	801c3f4 <iprintf>
    if (offset_from >= p_from->len) {
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	895b      	ldrh	r3, [r3, #10]
 80143d4:	461a      	mov	r2, r3
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	4293      	cmp	r3, r2
 80143da:	d304      	bcc.n	80143e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80143dc:	2300      	movs	r3, #0
 80143de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	895b      	ldrh	r3, [r3, #10]
 80143ea:	461a      	mov	r2, r3
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d114      	bne.n	801441c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80143f2:	2300      	movs	r3, #0
 80143f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d10c      	bne.n	801441c <pbuf_copy+0x118>
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d009      	beq.n	801441c <pbuf_copy+0x118>
 8014408:	4b20      	ldr	r3, [pc, #128]	; (801448c <pbuf_copy+0x188>)
 801440a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801440e:	4924      	ldr	r1, [pc, #144]	; (80144a0 <pbuf_copy+0x19c>)
 8014410:	4820      	ldr	r0, [pc, #128]	; (8014494 <pbuf_copy+0x190>)
 8014412:	f007 ffef 	bl	801c3f4 <iprintf>
 8014416:	f06f 030f 	mvn.w	r3, #15
 801441a:	e032      	b.n	8014482 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d013      	beq.n	801444a <pbuf_copy+0x146>
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	895a      	ldrh	r2, [r3, #10]
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	891b      	ldrh	r3, [r3, #8]
 801442a:	429a      	cmp	r2, r3
 801442c:	d10d      	bne.n	801444a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d009      	beq.n	801444a <pbuf_copy+0x146>
 8014436:	4b15      	ldr	r3, [pc, #84]	; (801448c <pbuf_copy+0x188>)
 8014438:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801443c:	4919      	ldr	r1, [pc, #100]	; (80144a4 <pbuf_copy+0x1a0>)
 801443e:	4815      	ldr	r0, [pc, #84]	; (8014494 <pbuf_copy+0x190>)
 8014440:	f007 ffd8 	bl	801c3f4 <iprintf>
 8014444:	f06f 0305 	mvn.w	r3, #5
 8014448:	e01b      	b.n	8014482 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d013      	beq.n	8014478 <pbuf_copy+0x174>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	895a      	ldrh	r2, [r3, #10]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	891b      	ldrh	r3, [r3, #8]
 8014458:	429a      	cmp	r2, r3
 801445a:	d10d      	bne.n	8014478 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d009      	beq.n	8014478 <pbuf_copy+0x174>
 8014464:	4b09      	ldr	r3, [pc, #36]	; (801448c <pbuf_copy+0x188>)
 8014466:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801446a:	490e      	ldr	r1, [pc, #56]	; (80144a4 <pbuf_copy+0x1a0>)
 801446c:	4809      	ldr	r0, [pc, #36]	; (8014494 <pbuf_copy+0x190>)
 801446e:	f007 ffc1 	bl	801c3f4 <iprintf>
 8014472:	f06f 0305 	mvn.w	r3, #5
 8014476:	e004      	b.n	8014482 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	f47f af61 	bne.w	8014342 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014480:	2300      	movs	r3, #0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3718      	adds	r7, #24
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	080211ac 	.word	0x080211ac
 8014490:	08021474 	.word	0x08021474
 8014494:	0802122c 	.word	0x0802122c
 8014498:	080214a4 	.word	0x080214a4
 801449c:	080214bc 	.word	0x080214bc
 80144a0:	080214d8 	.word	0x080214d8
 80144a4:	080214e8 	.word	0x080214e8

080144a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b088      	sub	sp, #32
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	60f8      	str	r0, [r7, #12]
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	4611      	mov	r1, r2
 80144b4:	461a      	mov	r2, r3
 80144b6:	460b      	mov	r3, r1
 80144b8:	80fb      	strh	r3, [r7, #6]
 80144ba:	4613      	mov	r3, r2
 80144bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80144be:	2300      	movs	r3, #0
 80144c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d108      	bne.n	80144de <pbuf_copy_partial+0x36>
 80144cc:	4b2b      	ldr	r3, [pc, #172]	; (801457c <pbuf_copy_partial+0xd4>)
 80144ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80144d2:	492b      	ldr	r1, [pc, #172]	; (8014580 <pbuf_copy_partial+0xd8>)
 80144d4:	482b      	ldr	r0, [pc, #172]	; (8014584 <pbuf_copy_partial+0xdc>)
 80144d6:	f007 ff8d 	bl	801c3f4 <iprintf>
 80144da:	2300      	movs	r3, #0
 80144dc:	e04a      	b.n	8014574 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d108      	bne.n	80144f6 <pbuf_copy_partial+0x4e>
 80144e4:	4b25      	ldr	r3, [pc, #148]	; (801457c <pbuf_copy_partial+0xd4>)
 80144e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80144ea:	4927      	ldr	r1, [pc, #156]	; (8014588 <pbuf_copy_partial+0xe0>)
 80144ec:	4825      	ldr	r0, [pc, #148]	; (8014584 <pbuf_copy_partial+0xdc>)
 80144ee:	f007 ff81 	bl	801c3f4 <iprintf>
 80144f2:	2300      	movs	r3, #0
 80144f4:	e03e      	b.n	8014574 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	61fb      	str	r3, [r7, #28]
 80144fa:	e034      	b.n	8014566 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80144fc:	88bb      	ldrh	r3, [r7, #4]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00a      	beq.n	8014518 <pbuf_copy_partial+0x70>
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	895b      	ldrh	r3, [r3, #10]
 8014506:	88ba      	ldrh	r2, [r7, #4]
 8014508:	429a      	cmp	r2, r3
 801450a:	d305      	bcc.n	8014518 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	895b      	ldrh	r3, [r3, #10]
 8014510:	88ba      	ldrh	r2, [r7, #4]
 8014512:	1ad3      	subs	r3, r2, r3
 8014514:	80bb      	strh	r3, [r7, #4]
 8014516:	e023      	b.n	8014560 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	895a      	ldrh	r2, [r3, #10]
 801451c:	88bb      	ldrh	r3, [r7, #4]
 801451e:	1ad3      	subs	r3, r2, r3
 8014520:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014522:	8b3a      	ldrh	r2, [r7, #24]
 8014524:	88fb      	ldrh	r3, [r7, #6]
 8014526:	429a      	cmp	r2, r3
 8014528:	d901      	bls.n	801452e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801452a:	88fb      	ldrh	r3, [r7, #6]
 801452c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801452e:	8b7b      	ldrh	r3, [r7, #26]
 8014530:	68ba      	ldr	r2, [r7, #8]
 8014532:	18d0      	adds	r0, r2, r3
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	685a      	ldr	r2, [r3, #4]
 8014538:	88bb      	ldrh	r3, [r7, #4]
 801453a:	4413      	add	r3, r2
 801453c:	8b3a      	ldrh	r2, [r7, #24]
 801453e:	4619      	mov	r1, r3
 8014540:	f007 fae6 	bl	801bb10 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014544:	8afa      	ldrh	r2, [r7, #22]
 8014546:	8b3b      	ldrh	r3, [r7, #24]
 8014548:	4413      	add	r3, r2
 801454a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801454c:	8b7a      	ldrh	r2, [r7, #26]
 801454e:	8b3b      	ldrh	r3, [r7, #24]
 8014550:	4413      	add	r3, r2
 8014552:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014554:	88fa      	ldrh	r2, [r7, #6]
 8014556:	8b3b      	ldrh	r3, [r7, #24]
 8014558:	1ad3      	subs	r3, r2, r3
 801455a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801455c:	2300      	movs	r3, #0
 801455e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	61fb      	str	r3, [r7, #28]
 8014566:	88fb      	ldrh	r3, [r7, #6]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d002      	beq.n	8014572 <pbuf_copy_partial+0xca>
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1c4      	bne.n	80144fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014572:	8afb      	ldrh	r3, [r7, #22]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3720      	adds	r7, #32
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	080211ac 	.word	0x080211ac
 8014580:	08021514 	.word	0x08021514
 8014584:	0802122c 	.word	0x0802122c
 8014588:	08021534 	.word	0x08021534

0801458c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b084      	sub	sp, #16
 8014590:	af00      	add	r7, sp, #0
 8014592:	4603      	mov	r3, r0
 8014594:	603a      	str	r2, [r7, #0]
 8014596:	71fb      	strb	r3, [r7, #7]
 8014598:	460b      	mov	r3, r1
 801459a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	8919      	ldrh	r1, [r3, #8]
 80145a0:	88ba      	ldrh	r2, [r7, #4]
 80145a2:	79fb      	ldrb	r3, [r7, #7]
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff fa95 	bl	8013ad4 <pbuf_alloc>
 80145aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <pbuf_clone+0x2a>
    return NULL;
 80145b2:	2300      	movs	r3, #0
 80145b4:	e011      	b.n	80145da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80145b6:	6839      	ldr	r1, [r7, #0]
 80145b8:	68f8      	ldr	r0, [r7, #12]
 80145ba:	f7ff fea3 	bl	8014304 <pbuf_copy>
 80145be:	4603      	mov	r3, r0
 80145c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80145c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d006      	beq.n	80145d8 <pbuf_clone+0x4c>
 80145ca:	4b06      	ldr	r3, [pc, #24]	; (80145e4 <pbuf_clone+0x58>)
 80145cc:	f240 5224 	movw	r2, #1316	; 0x524
 80145d0:	4905      	ldr	r1, [pc, #20]	; (80145e8 <pbuf_clone+0x5c>)
 80145d2:	4806      	ldr	r0, [pc, #24]	; (80145ec <pbuf_clone+0x60>)
 80145d4:	f007 ff0e 	bl	801c3f4 <iprintf>
  return q;
 80145d8:	68fb      	ldr	r3, [r7, #12]
}
 80145da:	4618      	mov	r0, r3
 80145dc:	3710      	adds	r7, #16
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}
 80145e2:	bf00      	nop
 80145e4:	080211ac 	.word	0x080211ac
 80145e8:	08021640 	.word	0x08021640
 80145ec:	0802122c 	.word	0x0802122c

080145f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b086      	sub	sp, #24
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	60bb      	str	r3, [r7, #8]
 80145fe:	2304      	movs	r3, #4
 8014600:	60fb      	str	r3, [r7, #12]
 8014602:	2300      	movs	r3, #0
 8014604:	613b      	str	r3, [r7, #16]
 8014606:	2300      	movs	r3, #0
 8014608:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801460a:	f107 0308 	add.w	r3, r7, #8
 801460e:	2100      	movs	r1, #0
 8014610:	4618      	mov	r0, r3
 8014612:	f7f4 fef0 	bl	80093f6 <osMessageCreate>
 8014616:	4602      	mov	r2, r0
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d102      	bne.n	801462a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014624:	f04f 33ff 	mov.w	r3, #4294967295
 8014628:	e000      	b.n	801462c <sys_mbox_new+0x3c>

  return ERR_OK;
 801462a:	2300      	movs	r3, #0
}
 801462c:	4618      	mov	r0, r3
 801462e:	3718      	adds	r7, #24
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4618      	mov	r0, r3
 8014642:	f7f4 ffb5 	bl	80095b0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	4618      	mov	r0, r3
 801464c:	f7f4 ffc6 	bl	80095dc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014650:	bf00      	nop
 8014652:	3708      	adds	r7, #8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	6839      	ldr	r1, [r7, #0]
 8014668:	2200      	movs	r2, #0
 801466a:	4618      	mov	r0, r3
 801466c:	f7f4 feec 	bl	8009448 <osMessagePut>
 8014670:	4603      	mov	r3, r0
 8014672:	2b00      	cmp	r3, #0
 8014674:	d102      	bne.n	801467c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014676:	2300      	movs	r3, #0
 8014678:	73fb      	strb	r3, [r7, #15]
 801467a:	e001      	b.n	8014680 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801467c:	23ff      	movs	r3, #255	; 0xff
 801467e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b08c      	sub	sp, #48	; 0x30
 8014690:	af00      	add	r7, sp, #0
 8014692:	61f8      	str	r0, [r7, #28]
 8014694:	61b9      	str	r1, [r7, #24]
 8014696:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014698:	f7f4 fccb 	bl	8009032 <osKernelSysTick>
 801469c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d017      	beq.n	80146d4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80146a4:	69fb      	ldr	r3, [r7, #28]
 80146a6:	6819      	ldr	r1, [r3, #0]
 80146a8:	f107 0320 	add.w	r3, r7, #32
 80146ac:	697a      	ldr	r2, [r7, #20]
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7f4 ff0a 	bl	80094c8 <osMessageGet>

    if(event.status == osEventMessage)
 80146b4:	6a3b      	ldr	r3, [r7, #32]
 80146b6:	2b10      	cmp	r3, #16
 80146b8:	d109      	bne.n	80146ce <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80146ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146bc:	461a      	mov	r2, r3
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80146c2:	f7f4 fcb6 	bl	8009032 <osKernelSysTick>
 80146c6:	4602      	mov	r2, r0
 80146c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ca:	1ad3      	subs	r3, r2, r3
 80146cc:	e019      	b.n	8014702 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80146ce:	f04f 33ff 	mov.w	r3, #4294967295
 80146d2:	e016      	b.n	8014702 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	6819      	ldr	r1, [r3, #0]
 80146d8:	463b      	mov	r3, r7
 80146da:	f04f 32ff 	mov.w	r2, #4294967295
 80146de:	4618      	mov	r0, r3
 80146e0:	f7f4 fef2 	bl	80094c8 <osMessageGet>
 80146e4:	f107 0320 	add.w	r3, r7, #32
 80146e8:	463a      	mov	r2, r7
 80146ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80146ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	461a      	mov	r2, r3
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80146f8:	f7f4 fc9b 	bl	8009032 <osKernelSysTick>
 80146fc:	4602      	mov	r2, r0
 80146fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014700:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014702:	4618      	mov	r0, r3
 8014704:	3730      	adds	r7, #48	; 0x30
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801470a:	b580      	push	{r7, lr}
 801470c:	b086      	sub	sp, #24
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
 8014712:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6819      	ldr	r1, [r3, #0]
 8014718:	f107 030c 	add.w	r3, r7, #12
 801471c:	2200      	movs	r2, #0
 801471e:	4618      	mov	r0, r3
 8014720:	f7f4 fed2 	bl	80094c8 <osMessageGet>

  if(event.status == osEventMessage)
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2b10      	cmp	r3, #16
 8014728:	d105      	bne.n	8014736 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	461a      	mov	r2, r3
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014732:	2300      	movs	r3, #0
 8014734:	e001      	b.n	801473a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014736:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801473a:	4618      	mov	r0, r3
 801473c:	3718      	adds	r7, #24
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <sys_mbox_valid+0x14>
    return 0;
 8014752:	2300      	movs	r3, #0
 8014754:	e000      	b.n	8014758 <sys_mbox_valid+0x16>
  else
    return 1;
 8014756:	2301      	movs	r3, #1
}
 8014758:	4618      	mov	r0, r3
 801475a:	370c      	adds	r7, #12
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014764:	b480      	push	{r7}
 8014766:	b083      	sub	sp, #12
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2200      	movs	r2, #0
 8014770:	601a      	str	r2, [r3, #0]
}
 8014772:	bf00      	nop
 8014774:	370c      	adds	r7, #12
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr

0801477e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b084      	sub	sp, #16
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
 8014786:	460b      	mov	r3, r1
 8014788:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801478a:	2300      	movs	r3, #0
 801478c:	60bb      	str	r3, [r7, #8]
 801478e:	2300      	movs	r3, #0
 8014790:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014792:	f107 0308 	add.w	r3, r7, #8
 8014796:	2101      	movs	r1, #1
 8014798:	4618      	mov	r0, r3
 801479a:	f7f4 fd63 	bl	8009264 <osSemaphoreCreate>
 801479e:	4602      	mov	r2, r0
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d102      	bne.n	80147b2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80147ac:	f04f 33ff 	mov.w	r3, #4294967295
 80147b0:	e009      	b.n	80147c6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80147b2:	78fb      	ldrb	r3, [r7, #3]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d105      	bne.n	80147c4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2100      	movs	r1, #0
 80147be:	4618      	mov	r0, r3
 80147c0:	f7f4 fd82 	bl	80092c8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80147c4:	2300      	movs	r3, #0
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b084      	sub	sp, #16
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
 80147d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80147d8:	f7f4 fc2b 	bl	8009032 <osKernelSysTick>
 80147dc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d011      	beq.n	8014808 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	6839      	ldr	r1, [r7, #0]
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7f4 fd6c 	bl	80092c8 <osSemaphoreWait>
 80147f0:	4603      	mov	r3, r0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d105      	bne.n	8014802 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80147f6:	f7f4 fc1c 	bl	8009032 <osKernelSysTick>
 80147fa:	4602      	mov	r2, r0
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	1ad3      	subs	r3, r2, r3
 8014800:	e012      	b.n	8014828 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014802:	f04f 33ff 	mov.w	r3, #4294967295
 8014806:	e00f      	b.n	8014828 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014808:	bf00      	nop
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f04f 31ff 	mov.w	r1, #4294967295
 8014812:	4618      	mov	r0, r3
 8014814:	f7f4 fd58 	bl	80092c8 <osSemaphoreWait>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1f5      	bne.n	801480a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801481e:	f7f4 fc08 	bl	8009032 <osKernelSysTick>
 8014822:	4602      	mov	r2, r0
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014828:	4618      	mov	r0, r3
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f7f4 fd91 	bl	8009364 <osSemaphoreRelease>
}
 8014842:	bf00      	nop
 8014844:	3708      	adds	r7, #8
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}

0801484a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801484a:	b580      	push	{r7, lr}
 801484c:	b082      	sub	sp, #8
 801484e:	af00      	add	r7, sp, #0
 8014850:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	4618      	mov	r0, r3
 8014858:	f7f4 fdba 	bl	80093d0 <osSemaphoreDelete>
}
 801485c:	bf00      	nop
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014864:	b480      	push	{r7}
 8014866:	b083      	sub	sp, #12
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d101      	bne.n	8014878 <sys_sem_valid+0x14>
    return 0;
 8014874:	2300      	movs	r3, #0
 8014876:	e000      	b.n	801487a <sys_sem_valid+0x16>
  else
    return 1;
 8014878:	2301      	movs	r3, #1
}
 801487a:	4618      	mov	r0, r3
 801487c:	370c      	adds	r7, #12
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr

08014886 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8014886:	b480      	push	{r7}
 8014888:	b083      	sub	sp, #12
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	601a      	str	r2, [r3, #0]
}
 8014894:	bf00      	nop
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80148a4:	4803      	ldr	r0, [pc, #12]	; (80148b4 <sys_init+0x14>)
 80148a6:	f7f4 fc40 	bl	800912a <osMutexCreate>
 80148aa:	4603      	mov	r3, r0
 80148ac:	4a02      	ldr	r2, [pc, #8]	; (80148b8 <sys_init+0x18>)
 80148ae:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80148b0:	bf00      	nop
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	080464a0 	.word	0x080464a0
 80148b8:	240079d0 	.word	0x240079d0

080148bc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80148c4:	2300      	movs	r3, #0
 80148c6:	60bb      	str	r3, [r7, #8]
 80148c8:	2300      	movs	r3, #0
 80148ca:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80148cc:	f107 0308 	add.w	r3, r7, #8
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7f4 fc2a 	bl	800912a <osMutexCreate>
 80148d6:	4602      	mov	r2, r0
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d102      	bne.n	80148ea <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80148e4:	f04f 33ff 	mov.w	r3, #4294967295
 80148e8:	e000      	b.n	80148ec <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80148ea:	2300      	movs	r3, #0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3710      	adds	r7, #16
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f04f 31ff 	mov.w	r1, #4294967295
 8014904:	4618      	mov	r0, r3
 8014906:	f7f4 fc29 	bl	800915c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b082      	sub	sp, #8
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	4618      	mov	r0, r3
 8014920:	f7f4 fc6a 	bl	80091f8 <osMutexRelease>
}
 8014924:	bf00      	nop
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08c      	sub	sp, #48	; 0x30
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
 8014938:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801493a:	f107 0314 	add.w	r3, r7, #20
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]
 8014942:	605a      	str	r2, [r3, #4]
 8014944:	609a      	str	r2, [r3, #8]
 8014946:	60da      	str	r2, [r3, #12]
 8014948:	611a      	str	r2, [r3, #16]
 801494a:	615a      	str	r2, [r3, #20]
 801494c:	619a      	str	r2, [r3, #24]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	617b      	str	r3, [r7, #20]
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	61bb      	str	r3, [r7, #24]
 8014956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014958:	b21b      	sxth	r3, r3
 801495a:	83bb      	strh	r3, [r7, #28]
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014960:	f107 0314 	add.w	r3, r7, #20
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	f7f4 fb73 	bl	8009052 <osThreadCreate>
 801496c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801496e:	4618      	mov	r0, r3
 8014970:	3730      	adds	r7, #48	; 0x30
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
	...

08014978 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801497c:	4b04      	ldr	r3, [pc, #16]	; (8014990 <sys_arch_protect+0x18>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f04f 31ff 	mov.w	r1, #4294967295
 8014984:	4618      	mov	r0, r3
 8014986:	f7f4 fbe9 	bl	800915c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801498a:	2301      	movs	r3, #1
}
 801498c:	4618      	mov	r0, r3
 801498e:	bd80      	pop	{r7, pc}
 8014990:	240079d0 	.word	0x240079d0

08014994 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801499c:	4b04      	ldr	r3, [pc, #16]	; (80149b0 <sys_arch_unprotect+0x1c>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f4 fc29 	bl	80091f8 <osMutexRelease>
}
 80149a6:	bf00      	nop
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	240079d0 	.word	0x240079d0

080149b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80149b8:	f007 fd34 	bl	801c424 <rand>
 80149bc:	4603      	mov	r3, r0
 80149be:	b29b      	uxth	r3, r3
 80149c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	4b01      	ldr	r3, [pc, #4]	; (80149d4 <tcp_init+0x20>)
 80149ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80149d0:	bf00      	nop
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	2400002c 	.word	0x2400002c

080149d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	7d1b      	ldrb	r3, [r3, #20]
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	d105      	bne.n	80149f4 <tcp_free+0x1c>
 80149e8:	4b06      	ldr	r3, [pc, #24]	; (8014a04 <tcp_free+0x2c>)
 80149ea:	22d4      	movs	r2, #212	; 0xd4
 80149ec:	4906      	ldr	r1, [pc, #24]	; (8014a08 <tcp_free+0x30>)
 80149ee:	4807      	ldr	r0, [pc, #28]	; (8014a0c <tcp_free+0x34>)
 80149f0:	f007 fd00 	bl	801c3f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80149f4:	6879      	ldr	r1, [r7, #4]
 80149f6:	2001      	movs	r0, #1
 80149f8:	f7fe fc06 	bl	8013208 <memp_free>
}
 80149fc:	bf00      	nop
 80149fe:	3708      	adds	r7, #8
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	080216cc 	.word	0x080216cc
 8014a08:	0802171c 	.word	0x0802171c
 8014a0c:	08021730 	.word	0x08021730

08014a10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	7d1b      	ldrb	r3, [r3, #20]
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d105      	bne.n	8014a2c <tcp_free_listen+0x1c>
 8014a20:	4b06      	ldr	r3, [pc, #24]	; (8014a3c <tcp_free_listen+0x2c>)
 8014a22:	22df      	movs	r2, #223	; 0xdf
 8014a24:	4906      	ldr	r1, [pc, #24]	; (8014a40 <tcp_free_listen+0x30>)
 8014a26:	4807      	ldr	r0, [pc, #28]	; (8014a44 <tcp_free_listen+0x34>)
 8014a28:	f007 fce4 	bl	801c3f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014a2c:	6879      	ldr	r1, [r7, #4]
 8014a2e:	2002      	movs	r0, #2
 8014a30:	f7fe fbea 	bl	8013208 <memp_free>
}
 8014a34:	bf00      	nop
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	080216cc 	.word	0x080216cc
 8014a40:	08021758 	.word	0x08021758
 8014a44:	08021730 	.word	0x08021730

08014a48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014a4c:	f001 f8a6 	bl	8015b9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014a50:	4b07      	ldr	r3, [pc, #28]	; (8014a70 <tcp_tmr+0x28>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	3301      	adds	r3, #1
 8014a56:	b2da      	uxtb	r2, r3
 8014a58:	4b05      	ldr	r3, [pc, #20]	; (8014a70 <tcp_tmr+0x28>)
 8014a5a:	701a      	strb	r2, [r3, #0]
 8014a5c:	4b04      	ldr	r3, [pc, #16]	; (8014a70 <tcp_tmr+0x28>)
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	f003 0301 	and.w	r3, r3, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d001      	beq.n	8014a6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014a68:	f000 fd58 	bl	801551c <tcp_slowtmr>
  }
}
 8014a6c:	bf00      	nop
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	24004325 	.word	0x24004325

08014a74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d105      	bne.n	8014a90 <tcp_remove_listener+0x1c>
 8014a84:	4b0d      	ldr	r3, [pc, #52]	; (8014abc <tcp_remove_listener+0x48>)
 8014a86:	22ff      	movs	r2, #255	; 0xff
 8014a88:	490d      	ldr	r1, [pc, #52]	; (8014ac0 <tcp_remove_listener+0x4c>)
 8014a8a:	480e      	ldr	r0, [pc, #56]	; (8014ac4 <tcp_remove_listener+0x50>)
 8014a8c:	f007 fcb2 	bl	801c3f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	60fb      	str	r3, [r7, #12]
 8014a94:	e00a      	b.n	8014aac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d102      	bne.n	8014aa6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	60fb      	str	r3, [r7, #12]
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d1f1      	bne.n	8014a96 <tcp_remove_listener+0x22>
    }
  }
}
 8014ab2:	bf00      	nop
 8014ab4:	bf00      	nop
 8014ab6:	3710      	adds	r7, #16
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	080216cc 	.word	0x080216cc
 8014ac0:	08021774 	.word	0x08021774
 8014ac4:	08021730 	.word	0x08021730

08014ac8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d106      	bne.n	8014ae4 <tcp_listen_closed+0x1c>
 8014ad6:	4b14      	ldr	r3, [pc, #80]	; (8014b28 <tcp_listen_closed+0x60>)
 8014ad8:	f240 1211 	movw	r2, #273	; 0x111
 8014adc:	4913      	ldr	r1, [pc, #76]	; (8014b2c <tcp_listen_closed+0x64>)
 8014ade:	4814      	ldr	r0, [pc, #80]	; (8014b30 <tcp_listen_closed+0x68>)
 8014ae0:	f007 fc88 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	7d1b      	ldrb	r3, [r3, #20]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d006      	beq.n	8014afa <tcp_listen_closed+0x32>
 8014aec:	4b0e      	ldr	r3, [pc, #56]	; (8014b28 <tcp_listen_closed+0x60>)
 8014aee:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014af2:	4910      	ldr	r1, [pc, #64]	; (8014b34 <tcp_listen_closed+0x6c>)
 8014af4:	480e      	ldr	r0, [pc, #56]	; (8014b30 <tcp_listen_closed+0x68>)
 8014af6:	f007 fc7d 	bl	801c3f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014afa:	2301      	movs	r3, #1
 8014afc:	60fb      	str	r3, [r7, #12]
 8014afe:	e00b      	b.n	8014b18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014b00:	4a0d      	ldr	r2, [pc, #52]	; (8014b38 <tcp_listen_closed+0x70>)
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	6879      	ldr	r1, [r7, #4]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7ff ffb1 	bl	8014a74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	3301      	adds	r3, #1
 8014b16:	60fb      	str	r3, [r7, #12]
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2b03      	cmp	r3, #3
 8014b1c:	d9f0      	bls.n	8014b00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014b1e:	bf00      	nop
 8014b20:	bf00      	nop
 8014b22:	3710      	adds	r7, #16
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	080216cc 	.word	0x080216cc
 8014b2c:	0802179c 	.word	0x0802179c
 8014b30:	08021730 	.word	0x08021730
 8014b34:	080217a8 	.word	0x080217a8
 8014b38:	080464c0 	.word	0x080464c0

08014b3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014b3c:	b5b0      	push	{r4, r5, r7, lr}
 8014b3e:	b088      	sub	sp, #32
 8014b40:	af04      	add	r7, sp, #16
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	460b      	mov	r3, r1
 8014b46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d106      	bne.n	8014b5c <tcp_close_shutdown+0x20>
 8014b4e:	4b63      	ldr	r3, [pc, #396]	; (8014cdc <tcp_close_shutdown+0x1a0>)
 8014b50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014b54:	4962      	ldr	r1, [pc, #392]	; (8014ce0 <tcp_close_shutdown+0x1a4>)
 8014b56:	4863      	ldr	r0, [pc, #396]	; (8014ce4 <tcp_close_shutdown+0x1a8>)
 8014b58:	f007 fc4c 	bl	801c3f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014b5c:	78fb      	ldrb	r3, [r7, #3]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d066      	beq.n	8014c30 <tcp_close_shutdown+0xf4>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	7d1b      	ldrb	r3, [r3, #20]
 8014b66:	2b04      	cmp	r3, #4
 8014b68:	d003      	beq.n	8014b72 <tcp_close_shutdown+0x36>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	7d1b      	ldrb	r3, [r3, #20]
 8014b6e:	2b07      	cmp	r3, #7
 8014b70:	d15e      	bne.n	8014c30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d104      	bne.n	8014b84 <tcp_close_shutdown+0x48>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014b82:	d055      	beq.n	8014c30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	8b5b      	ldrh	r3, [r3, #26]
 8014b88:	f003 0310 	and.w	r3, r3, #16
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d106      	bne.n	8014b9e <tcp_close_shutdown+0x62>
 8014b90:	4b52      	ldr	r3, [pc, #328]	; (8014cdc <tcp_close_shutdown+0x1a0>)
 8014b92:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014b96:	4954      	ldr	r1, [pc, #336]	; (8014ce8 <tcp_close_shutdown+0x1ac>)
 8014b98:	4852      	ldr	r0, [pc, #328]	; (8014ce4 <tcp_close_shutdown+0x1a8>)
 8014b9a:	f007 fc2b 	bl	801c3f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014ba6:	687d      	ldr	r5, [r7, #4]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	3304      	adds	r3, #4
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	8ad2      	ldrh	r2, [r2, #22]
 8014bb0:	6879      	ldr	r1, [r7, #4]
 8014bb2:	8b09      	ldrh	r1, [r1, #24]
 8014bb4:	9102      	str	r1, [sp, #8]
 8014bb6:	9201      	str	r2, [sp, #4]
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	462b      	mov	r3, r5
 8014bbc:	4622      	mov	r2, r4
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f005 fdb7 	bl	801a734 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f001 fb98 	bl	80162fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014bcc:	4b47      	ldr	r3, [pc, #284]	; (8014cec <tcp_close_shutdown+0x1b0>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d105      	bne.n	8014be2 <tcp_close_shutdown+0xa6>
 8014bd6:	4b45      	ldr	r3, [pc, #276]	; (8014cec <tcp_close_shutdown+0x1b0>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	4a43      	ldr	r2, [pc, #268]	; (8014cec <tcp_close_shutdown+0x1b0>)
 8014bde:	6013      	str	r3, [r2, #0]
 8014be0:	e013      	b.n	8014c0a <tcp_close_shutdown+0xce>
 8014be2:	4b42      	ldr	r3, [pc, #264]	; (8014cec <tcp_close_shutdown+0x1b0>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	e00c      	b.n	8014c04 <tcp_close_shutdown+0xc8>
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d104      	bne.n	8014bfe <tcp_close_shutdown+0xc2>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	68da      	ldr	r2, [r3, #12]
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	60da      	str	r2, [r3, #12]
 8014bfc:	e005      	b.n	8014c0a <tcp_close_shutdown+0xce>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d1ef      	bne.n	8014bea <tcp_close_shutdown+0xae>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	60da      	str	r2, [r3, #12]
 8014c10:	4b37      	ldr	r3, [pc, #220]	; (8014cf0 <tcp_close_shutdown+0x1b4>)
 8014c12:	2201      	movs	r2, #1
 8014c14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014c16:	4b37      	ldr	r3, [pc, #220]	; (8014cf4 <tcp_close_shutdown+0x1b8>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d102      	bne.n	8014c26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014c20:	f004 f82c 	bl	8018c7c <tcp_trigger_input_pcb_close>
 8014c24:	e002      	b.n	8014c2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff fed6 	bl	80149d8 <tcp_free>
      }
      return ERR_OK;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	e050      	b.n	8014cd2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	7d1b      	ldrb	r3, [r3, #20]
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d03b      	beq.n	8014cb0 <tcp_close_shutdown+0x174>
 8014c38:	2b02      	cmp	r3, #2
 8014c3a:	dc44      	bgt.n	8014cc6 <tcp_close_shutdown+0x18a>
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d002      	beq.n	8014c46 <tcp_close_shutdown+0x10a>
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d02a      	beq.n	8014c9a <tcp_close_shutdown+0x15e>
 8014c44:	e03f      	b.n	8014cc6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	8adb      	ldrh	r3, [r3, #22]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d021      	beq.n	8014c92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014c4e:	4b2a      	ldr	r3, [pc, #168]	; (8014cf8 <tcp_close_shutdown+0x1bc>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d105      	bne.n	8014c64 <tcp_close_shutdown+0x128>
 8014c58:	4b27      	ldr	r3, [pc, #156]	; (8014cf8 <tcp_close_shutdown+0x1bc>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	4a26      	ldr	r2, [pc, #152]	; (8014cf8 <tcp_close_shutdown+0x1bc>)
 8014c60:	6013      	str	r3, [r2, #0]
 8014c62:	e013      	b.n	8014c8c <tcp_close_shutdown+0x150>
 8014c64:	4b24      	ldr	r3, [pc, #144]	; (8014cf8 <tcp_close_shutdown+0x1bc>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	60bb      	str	r3, [r7, #8]
 8014c6a:	e00c      	b.n	8014c86 <tcp_close_shutdown+0x14a>
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d104      	bne.n	8014c80 <tcp_close_shutdown+0x144>
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	68da      	ldr	r2, [r3, #12]
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	60da      	str	r2, [r3, #12]
 8014c7e:	e005      	b.n	8014c8c <tcp_close_shutdown+0x150>
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	60bb      	str	r3, [r7, #8]
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d1ef      	bne.n	8014c6c <tcp_close_shutdown+0x130>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f7ff fea0 	bl	80149d8 <tcp_free>
      break;
 8014c98:	e01a      	b.n	8014cd0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7ff ff14 	bl	8014ac8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	4816      	ldr	r0, [pc, #88]	; (8014cfc <tcp_close_shutdown+0x1c0>)
 8014ca4:	f001 fb7a 	bl	801639c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7ff feb1 	bl	8014a10 <tcp_free_listen>
      break;
 8014cae:	e00f      	b.n	8014cd0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014cb0:	6879      	ldr	r1, [r7, #4]
 8014cb2:	480e      	ldr	r0, [pc, #56]	; (8014cec <tcp_close_shutdown+0x1b0>)
 8014cb4:	f001 fb72 	bl	801639c <tcp_pcb_remove>
 8014cb8:	4b0d      	ldr	r3, [pc, #52]	; (8014cf0 <tcp_close_shutdown+0x1b4>)
 8014cba:	2201      	movs	r2, #1
 8014cbc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f7ff fe8a 	bl	80149d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014cc4:	e004      	b.n	8014cd0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 f81a 	bl	8014d00 <tcp_close_shutdown_fin>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	e000      	b.n	8014cd2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014cd0:	2300      	movs	r3, #0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	080216cc 	.word	0x080216cc
 8014ce0:	080217c0 	.word	0x080217c0
 8014ce4:	08021730 	.word	0x08021730
 8014ce8:	080217e0 	.word	0x080217e0
 8014cec:	240079d8 	.word	0x240079d8
 8014cf0:	240079d4 	.word	0x240079d4
 8014cf4:	240079ec 	.word	0x240079ec
 8014cf8:	240079e4 	.word	0x240079e4
 8014cfc:	240079e0 	.word	0x240079e0

08014d00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d106      	bne.n	8014d1c <tcp_close_shutdown_fin+0x1c>
 8014d0e:	4b2e      	ldr	r3, [pc, #184]	; (8014dc8 <tcp_close_shutdown_fin+0xc8>)
 8014d10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014d14:	492d      	ldr	r1, [pc, #180]	; (8014dcc <tcp_close_shutdown_fin+0xcc>)
 8014d16:	482e      	ldr	r0, [pc, #184]	; (8014dd0 <tcp_close_shutdown_fin+0xd0>)
 8014d18:	f007 fb6c 	bl	801c3f4 <iprintf>

  switch (pcb->state) {
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	7d1b      	ldrb	r3, [r3, #20]
 8014d20:	2b07      	cmp	r3, #7
 8014d22:	d020      	beq.n	8014d66 <tcp_close_shutdown_fin+0x66>
 8014d24:	2b07      	cmp	r3, #7
 8014d26:	dc2b      	bgt.n	8014d80 <tcp_close_shutdown_fin+0x80>
 8014d28:	2b03      	cmp	r3, #3
 8014d2a:	d002      	beq.n	8014d32 <tcp_close_shutdown_fin+0x32>
 8014d2c:	2b04      	cmp	r3, #4
 8014d2e:	d00d      	beq.n	8014d4c <tcp_close_shutdown_fin+0x4c>
 8014d30:	e026      	b.n	8014d80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f004 fe0c 	bl	8019950 <tcp_send_fin>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d11f      	bne.n	8014d84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2205      	movs	r2, #5
 8014d48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d4a:	e01b      	b.n	8014d84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f004 fdff 	bl	8019950 <tcp_send_fin>
 8014d52:	4603      	mov	r3, r0
 8014d54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d114      	bne.n	8014d88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2205      	movs	r2, #5
 8014d62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d64:	e010      	b.n	8014d88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f004 fdf2 	bl	8019950 <tcp_send_fin>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d109      	bne.n	8014d8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2209      	movs	r2, #9
 8014d7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d7e:	e005      	b.n	8014d8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	e01c      	b.n	8014dbe <tcp_close_shutdown_fin+0xbe>
      break;
 8014d84:	bf00      	nop
 8014d86:	e002      	b.n	8014d8e <tcp_close_shutdown_fin+0x8e>
      break;
 8014d88:	bf00      	nop
 8014d8a:	e000      	b.n	8014d8e <tcp_close_shutdown_fin+0x8e>
      break;
 8014d8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d103      	bne.n	8014d9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f004 ff18 	bl	8019bcc <tcp_output>
 8014d9c:	e00d      	b.n	8014dba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014da6:	d108      	bne.n	8014dba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	8b5b      	ldrh	r3, [r3, #26]
 8014dac:	f043 0308 	orr.w	r3, r3, #8
 8014db0:	b29a      	uxth	r2, r3
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014db6:	2300      	movs	r3, #0
 8014db8:	e001      	b.n	8014dbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3710      	adds	r7, #16
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	080216cc 	.word	0x080216cc
 8014dcc:	0802179c 	.word	0x0802179c
 8014dd0:	08021730 	.word	0x08021730

08014dd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d109      	bne.n	8014df6 <tcp_close+0x22>
 8014de2:	4b0f      	ldr	r3, [pc, #60]	; (8014e20 <tcp_close+0x4c>)
 8014de4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014de8:	490e      	ldr	r1, [pc, #56]	; (8014e24 <tcp_close+0x50>)
 8014dea:	480f      	ldr	r0, [pc, #60]	; (8014e28 <tcp_close+0x54>)
 8014dec:	f007 fb02 	bl	801c3f4 <iprintf>
 8014df0:	f06f 030f 	mvn.w	r3, #15
 8014df4:	e00f      	b.n	8014e16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7d1b      	ldrb	r3, [r3, #20]
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d006      	beq.n	8014e0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f043 0310 	orr.w	r3, r3, #16
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f7ff fe94 	bl	8014b3c <tcp_close_shutdown>
 8014e14:	4603      	mov	r3, r0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3708      	adds	r7, #8
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	080216cc 	.word	0x080216cc
 8014e24:	080217fc 	.word	0x080217fc
 8014e28:	08021730 	.word	0x08021730

08014e2c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d109      	bne.n	8014e52 <tcp_shutdown+0x26>
 8014e3e:	4b26      	ldr	r3, [pc, #152]	; (8014ed8 <tcp_shutdown+0xac>)
 8014e40:	f240 2207 	movw	r2, #519	; 0x207
 8014e44:	4925      	ldr	r1, [pc, #148]	; (8014edc <tcp_shutdown+0xb0>)
 8014e46:	4826      	ldr	r0, [pc, #152]	; (8014ee0 <tcp_shutdown+0xb4>)
 8014e48:	f007 fad4 	bl	801c3f4 <iprintf>
 8014e4c:	f06f 030f 	mvn.w	r3, #15
 8014e50:	e03d      	b.n	8014ece <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	7d1b      	ldrb	r3, [r3, #20]
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d102      	bne.n	8014e60 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014e5a:	f06f 030a 	mvn.w	r3, #10
 8014e5e:	e036      	b.n	8014ece <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d01b      	beq.n	8014e9e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	8b5b      	ldrh	r3, [r3, #26]
 8014e6a:	f043 0310 	orr.w	r3, r3, #16
 8014e6e:	b29a      	uxth	r2, r3
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d005      	beq.n	8014e86 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014e7a:	2101      	movs	r1, #1
 8014e7c:	68f8      	ldr	r0, [r7, #12]
 8014e7e:	f7ff fe5d 	bl	8014b3c <tcp_close_shutdown>
 8014e82:	4603      	mov	r3, r0
 8014e84:	e023      	b.n	8014ece <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d007      	beq.n	8014e9e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7ff f902 	bl	801409c <pbuf_free>
      pcb->refused_data = NULL;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d013      	beq.n	8014ecc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	7d1b      	ldrb	r3, [r3, #20]
 8014ea8:	2b04      	cmp	r3, #4
 8014eaa:	dc02      	bgt.n	8014eb2 <tcp_shutdown+0x86>
 8014eac:	2b03      	cmp	r3, #3
 8014eae:	da02      	bge.n	8014eb6 <tcp_shutdown+0x8a>
 8014eb0:	e009      	b.n	8014ec6 <tcp_shutdown+0x9a>
 8014eb2:	2b07      	cmp	r3, #7
 8014eb4:	d107      	bne.n	8014ec6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	4619      	mov	r1, r3
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f7ff fe3d 	bl	8014b3c <tcp_close_shutdown>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	e003      	b.n	8014ece <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014ec6:	f06f 030a 	mvn.w	r3, #10
 8014eca:	e000      	b.n	8014ece <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014ecc:	2300      	movs	r3, #0
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3710      	adds	r7, #16
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	080216cc 	.word	0x080216cc
 8014edc:	08021814 	.word	0x08021814
 8014ee0:	08021730 	.word	0x08021730

08014ee4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b08e      	sub	sp, #56	; 0x38
 8014ee8:	af04      	add	r7, sp, #16
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d107      	bne.n	8014f04 <tcp_abandon+0x20>
 8014ef4:	4b52      	ldr	r3, [pc, #328]	; (8015040 <tcp_abandon+0x15c>)
 8014ef6:	f240 223d 	movw	r2, #573	; 0x23d
 8014efa:	4952      	ldr	r1, [pc, #328]	; (8015044 <tcp_abandon+0x160>)
 8014efc:	4852      	ldr	r0, [pc, #328]	; (8015048 <tcp_abandon+0x164>)
 8014efe:	f007 fa79 	bl	801c3f4 <iprintf>
 8014f02:	e099      	b.n	8015038 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7d1b      	ldrb	r3, [r3, #20]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d106      	bne.n	8014f1a <tcp_abandon+0x36>
 8014f0c:	4b4c      	ldr	r3, [pc, #304]	; (8015040 <tcp_abandon+0x15c>)
 8014f0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014f12:	494e      	ldr	r1, [pc, #312]	; (801504c <tcp_abandon+0x168>)
 8014f14:	484c      	ldr	r0, [pc, #304]	; (8015048 <tcp_abandon+0x164>)
 8014f16:	f007 fa6d 	bl	801c3f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	7d1b      	ldrb	r3, [r3, #20]
 8014f1e:	2b0a      	cmp	r3, #10
 8014f20:	d107      	bne.n	8014f32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	484a      	ldr	r0, [pc, #296]	; (8015050 <tcp_abandon+0x16c>)
 8014f26:	f001 fa39 	bl	801639c <tcp_pcb_remove>
    tcp_free(pcb);
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f7ff fd54 	bl	80149d8 <tcp_free>
 8014f30:	e082      	b.n	8015038 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	691b      	ldr	r3, [r3, #16]
 8014f52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	7d1b      	ldrb	r3, [r3, #20]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d126      	bne.n	8014faa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	8adb      	ldrh	r3, [r3, #22]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d02e      	beq.n	8014fc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f64:	4b3b      	ldr	r3, [pc, #236]	; (8015054 <tcp_abandon+0x170>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d105      	bne.n	8014f7a <tcp_abandon+0x96>
 8014f6e:	4b39      	ldr	r3, [pc, #228]	; (8015054 <tcp_abandon+0x170>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	4a37      	ldr	r2, [pc, #220]	; (8015054 <tcp_abandon+0x170>)
 8014f76:	6013      	str	r3, [r2, #0]
 8014f78:	e013      	b.n	8014fa2 <tcp_abandon+0xbe>
 8014f7a:	4b36      	ldr	r3, [pc, #216]	; (8015054 <tcp_abandon+0x170>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	61fb      	str	r3, [r7, #28]
 8014f80:	e00c      	b.n	8014f9c <tcp_abandon+0xb8>
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d104      	bne.n	8014f96 <tcp_abandon+0xb2>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	68da      	ldr	r2, [r3, #12]
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	60da      	str	r2, [r3, #12]
 8014f94:	e005      	b.n	8014fa2 <tcp_abandon+0xbe>
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	61fb      	str	r3, [r7, #28]
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d1ef      	bne.n	8014f82 <tcp_abandon+0x9e>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	60da      	str	r2, [r3, #12]
 8014fa8:	e00b      	b.n	8014fc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	8adb      	ldrh	r3, [r3, #22]
 8014fb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014fb4:	6879      	ldr	r1, [r7, #4]
 8014fb6:	4828      	ldr	r0, [pc, #160]	; (8015058 <tcp_abandon+0x174>)
 8014fb8:	f001 f9f0 	bl	801639c <tcp_pcb_remove>
 8014fbc:	4b27      	ldr	r3, [pc, #156]	; (801505c <tcp_abandon+0x178>)
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d004      	beq.n	8014fd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f000 fec4 	bl	8015d5c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d004      	beq.n	8014fe6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f000 febb 	bl	8015d5c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d004      	beq.n	8014ff8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 feb2 	bl	8015d5c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d00e      	beq.n	801501c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014ffe:	6879      	ldr	r1, [r7, #4]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	3304      	adds	r3, #4
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	8b12      	ldrh	r2, [r2, #24]
 8015008:	9202      	str	r2, [sp, #8]
 801500a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801500c:	9201      	str	r2, [sp, #4]
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	460b      	mov	r3, r1
 8015012:	697a      	ldr	r2, [r7, #20]
 8015014:	69b9      	ldr	r1, [r7, #24]
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f005 fb8c 	bl	801a734 <tcp_rst>
    }
    last_state = pcb->state;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	7d1b      	ldrb	r3, [r3, #20]
 8015020:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f7ff fcd8 	bl	80149d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d004      	beq.n	8015038 <tcp_abandon+0x154>
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	f06f 010c 	mvn.w	r1, #12
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	4798      	blx	r3
  }
}
 8015038:	3728      	adds	r7, #40	; 0x28
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	080216cc 	.word	0x080216cc
 8015044:	08021830 	.word	0x08021830
 8015048:	08021730 	.word	0x08021730
 801504c:	0802184c 	.word	0x0802184c
 8015050:	240079e8 	.word	0x240079e8
 8015054:	240079e4 	.word	0x240079e4
 8015058:	240079d8 	.word	0x240079d8
 801505c:	240079d4 	.word	0x240079d4

08015060 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015068:	2101      	movs	r1, #1
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7ff ff3a 	bl	8014ee4 <tcp_abandon>
}
 8015070:	bf00      	nop
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b088      	sub	sp, #32
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	4613      	mov	r3, r2
 8015084:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015086:	2304      	movs	r3, #4
 8015088:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d101      	bne.n	8015094 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015090:	4b3e      	ldr	r3, [pc, #248]	; (801518c <tcp_bind+0x114>)
 8015092:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d109      	bne.n	80150ae <tcp_bind+0x36>
 801509a:	4b3d      	ldr	r3, [pc, #244]	; (8015190 <tcp_bind+0x118>)
 801509c:	f240 22a9 	movw	r2, #681	; 0x2a9
 80150a0:	493c      	ldr	r1, [pc, #240]	; (8015194 <tcp_bind+0x11c>)
 80150a2:	483d      	ldr	r0, [pc, #244]	; (8015198 <tcp_bind+0x120>)
 80150a4:	f007 f9a6 	bl	801c3f4 <iprintf>
 80150a8:	f06f 030f 	mvn.w	r3, #15
 80150ac:	e06a      	b.n	8015184 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	7d1b      	ldrb	r3, [r3, #20]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d009      	beq.n	80150ca <tcp_bind+0x52>
 80150b6:	4b36      	ldr	r3, [pc, #216]	; (8015190 <tcp_bind+0x118>)
 80150b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80150bc:	4937      	ldr	r1, [pc, #220]	; (801519c <tcp_bind+0x124>)
 80150be:	4836      	ldr	r0, [pc, #216]	; (8015198 <tcp_bind+0x120>)
 80150c0:	f007 f998 	bl	801c3f4 <iprintf>
 80150c4:	f06f 0305 	mvn.w	r3, #5
 80150c8:	e05c      	b.n	8015184 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80150ca:	88fb      	ldrh	r3, [r7, #6]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d109      	bne.n	80150e4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80150d0:	f000 f9de 	bl	8015490 <tcp_new_port>
 80150d4:	4603      	mov	r3, r0
 80150d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80150d8:	88fb      	ldrh	r3, [r7, #6]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d135      	bne.n	801514a <tcp_bind+0xd2>
      return ERR_BUF;
 80150de:	f06f 0301 	mvn.w	r3, #1
 80150e2:	e04f      	b.n	8015184 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80150e4:	2300      	movs	r3, #0
 80150e6:	61fb      	str	r3, [r7, #28]
 80150e8:	e02b      	b.n	8015142 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80150ea:	4a2d      	ldr	r2, [pc, #180]	; (80151a0 <tcp_bind+0x128>)
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	61bb      	str	r3, [r7, #24]
 80150f6:	e01e      	b.n	8015136 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	8adb      	ldrh	r3, [r3, #22]
 80150fc:	88fa      	ldrh	r2, [r7, #6]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d116      	bne.n	8015130 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015102:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015104:	2b00      	cmp	r3, #0
 8015106:	d010      	beq.n	801512a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d00c      	beq.n	801512a <tcp_bind+0xb2>
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d009      	beq.n	801512a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d005      	beq.n	801512a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801511e:	69bb      	ldr	r3, [r7, #24]
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015126:	429a      	cmp	r2, r3
 8015128:	d102      	bne.n	8015130 <tcp_bind+0xb8>
              return ERR_USE;
 801512a:	f06f 0307 	mvn.w	r3, #7
 801512e:	e029      	b.n	8015184 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	61bb      	str	r3, [r7, #24]
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d1dd      	bne.n	80150f8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	3301      	adds	r3, #1
 8015140:	61fb      	str	r3, [r7, #28]
 8015142:	69fa      	ldr	r2, [r7, #28]
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	429a      	cmp	r2, r3
 8015148:	dbcf      	blt.n	80150ea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d00c      	beq.n	801516a <tcp_bind+0xf2>
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d008      	beq.n	801516a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d002      	beq.n	8015164 <tcp_bind+0xec>
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	e000      	b.n	8015166 <tcp_bind+0xee>
 8015164:	2300      	movs	r3, #0
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	88fa      	ldrh	r2, [r7, #6]
 801516e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015170:	4b0c      	ldr	r3, [pc, #48]	; (80151a4 <tcp_bind+0x12c>)
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	60da      	str	r2, [r3, #12]
 8015178:	4a0a      	ldr	r2, [pc, #40]	; (80151a4 <tcp_bind+0x12c>)
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	6013      	str	r3, [r2, #0]
 801517e:	f005 fe53 	bl	801ae28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3720      	adds	r7, #32
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	080463c8 	.word	0x080463c8
 8015190:	080216cc 	.word	0x080216cc
 8015194:	08021880 	.word	0x08021880
 8015198:	08021730 	.word	0x08021730
 801519c:	08021898 	.word	0x08021898
 80151a0:	080464c0 	.word	0x080464c0
 80151a4:	240079e4 	.word	0x240079e4

080151a8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	4613      	mov	r3, r2
 80151b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d106      	bne.n	80151ca <tcp_accept_null+0x22>
 80151bc:	4b07      	ldr	r3, [pc, #28]	; (80151dc <tcp_accept_null+0x34>)
 80151be:	f240 320f 	movw	r2, #783	; 0x30f
 80151c2:	4907      	ldr	r1, [pc, #28]	; (80151e0 <tcp_accept_null+0x38>)
 80151c4:	4807      	ldr	r0, [pc, #28]	; (80151e4 <tcp_accept_null+0x3c>)
 80151c6:	f007 f915 	bl	801c3f4 <iprintf>

  tcp_abort(pcb);
 80151ca:	68b8      	ldr	r0, [r7, #8]
 80151cc:	f7ff ff48 	bl	8015060 <tcp_abort>

  return ERR_ABRT;
 80151d0:	f06f 030c 	mvn.w	r3, #12
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	080216cc 	.word	0x080216cc
 80151e0:	080218c0 	.word	0x080218c0
 80151e4:	08021730 	.word	0x08021730

080151e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	460b      	mov	r3, r1
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d109      	bne.n	8015214 <tcp_listen_with_backlog_and_err+0x2c>
 8015200:	4b47      	ldr	r3, [pc, #284]	; (8015320 <tcp_listen_with_backlog_and_err+0x138>)
 8015202:	f240 3259 	movw	r2, #857	; 0x359
 8015206:	4947      	ldr	r1, [pc, #284]	; (8015324 <tcp_listen_with_backlog_and_err+0x13c>)
 8015208:	4847      	ldr	r0, [pc, #284]	; (8015328 <tcp_listen_with_backlog_and_err+0x140>)
 801520a:	f007 f8f3 	bl	801c3f4 <iprintf>
 801520e:	23f0      	movs	r3, #240	; 0xf0
 8015210:	76fb      	strb	r3, [r7, #27]
 8015212:	e079      	b.n	8015308 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	7d1b      	ldrb	r3, [r3, #20]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d009      	beq.n	8015230 <tcp_listen_with_backlog_and_err+0x48>
 801521c:	4b40      	ldr	r3, [pc, #256]	; (8015320 <tcp_listen_with_backlog_and_err+0x138>)
 801521e:	f240 325a 	movw	r2, #858	; 0x35a
 8015222:	4942      	ldr	r1, [pc, #264]	; (801532c <tcp_listen_with_backlog_and_err+0x144>)
 8015224:	4840      	ldr	r0, [pc, #256]	; (8015328 <tcp_listen_with_backlog_and_err+0x140>)
 8015226:	f007 f8e5 	bl	801c3f4 <iprintf>
 801522a:	23f1      	movs	r3, #241	; 0xf1
 801522c:	76fb      	strb	r3, [r7, #27]
 801522e:	e06b      	b.n	8015308 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	7d1b      	ldrb	r3, [r3, #20]
 8015234:	2b01      	cmp	r3, #1
 8015236:	d104      	bne.n	8015242 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801523c:	23f7      	movs	r3, #247	; 0xf7
 801523e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015240:	e062      	b.n	8015308 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015242:	2002      	movs	r0, #2
 8015244:	f7fd ff6a 	bl	801311c <memp_malloc>
 8015248:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d102      	bne.n	8015256 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015250:	23ff      	movs	r3, #255	; 0xff
 8015252:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015254:	e058      	b.n	8015308 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	691a      	ldr	r2, [r3, #16]
 801525a:	69fb      	ldr	r3, [r7, #28]
 801525c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	8ada      	ldrh	r2, [r3, #22]
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	2201      	movs	r2, #1
 801526a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	7d5a      	ldrb	r2, [r3, #21]
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	7a5a      	ldrb	r2, [r3, #9]
 8015278:	69fb      	ldr	r3, [r7, #28]
 801527a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	2200      	movs	r2, #0
 8015280:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	7ada      	ldrb	r2, [r3, #11]
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	7a9a      	ldrb	r2, [r3, #10]
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	8adb      	ldrh	r3, [r3, #22]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d021      	beq.n	80152e6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80152a2:	4b23      	ldr	r3, [pc, #140]	; (8015330 <tcp_listen_with_backlog_and_err+0x148>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	68fa      	ldr	r2, [r7, #12]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d105      	bne.n	80152b8 <tcp_listen_with_backlog_and_err+0xd0>
 80152ac:	4b20      	ldr	r3, [pc, #128]	; (8015330 <tcp_listen_with_backlog_and_err+0x148>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	4a1f      	ldr	r2, [pc, #124]	; (8015330 <tcp_listen_with_backlog_and_err+0x148>)
 80152b4:	6013      	str	r3, [r2, #0]
 80152b6:	e013      	b.n	80152e0 <tcp_listen_with_backlog_and_err+0xf8>
 80152b8:	4b1d      	ldr	r3, [pc, #116]	; (8015330 <tcp_listen_with_backlog_and_err+0x148>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	617b      	str	r3, [r7, #20]
 80152be:	e00c      	b.n	80152da <tcp_listen_with_backlog_and_err+0xf2>
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d104      	bne.n	80152d4 <tcp_listen_with_backlog_and_err+0xec>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	68da      	ldr	r2, [r3, #12]
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	60da      	str	r2, [r3, #12]
 80152d2:	e005      	b.n	80152e0 <tcp_listen_with_backlog_and_err+0xf8>
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	617b      	str	r3, [r7, #20]
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1ef      	bne.n	80152c0 <tcp_listen_with_backlog_and_err+0xd8>
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2200      	movs	r2, #0
 80152e4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80152e6:	68f8      	ldr	r0, [r7, #12]
 80152e8:	f7ff fb76 	bl	80149d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	4a11      	ldr	r2, [pc, #68]	; (8015334 <tcp_listen_with_backlog_and_err+0x14c>)
 80152f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80152f2:	4b11      	ldr	r3, [pc, #68]	; (8015338 <tcp_listen_with_backlog_and_err+0x150>)
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	60da      	str	r2, [r3, #12]
 80152fa:	4a0f      	ldr	r2, [pc, #60]	; (8015338 <tcp_listen_with_backlog_and_err+0x150>)
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	6013      	str	r3, [r2, #0]
 8015300:	f005 fd92 	bl	801ae28 <tcp_timer_needed>
  res = ERR_OK;
 8015304:	2300      	movs	r3, #0
 8015306:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d002      	beq.n	8015314 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	7efa      	ldrb	r2, [r7, #27]
 8015312:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015314:	69fb      	ldr	r3, [r7, #28]
}
 8015316:	4618      	mov	r0, r3
 8015318:	3720      	adds	r7, #32
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	080216cc 	.word	0x080216cc
 8015324:	080218e0 	.word	0x080218e0
 8015328:	08021730 	.word	0x08021730
 801532c:	08021910 	.word	0x08021910
 8015330:	240079e4 	.word	0x240079e4
 8015334:	080151a9 	.word	0x080151a9
 8015338:	240079e0 	.word	0x240079e0

0801533c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d106      	bne.n	8015358 <tcp_update_rcv_ann_wnd+0x1c>
 801534a:	4b25      	ldr	r3, [pc, #148]	; (80153e0 <tcp_update_rcv_ann_wnd+0xa4>)
 801534c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015350:	4924      	ldr	r1, [pc, #144]	; (80153e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015352:	4825      	ldr	r0, [pc, #148]	; (80153e8 <tcp_update_rcv_ann_wnd+0xac>)
 8015354:	f007 f84e 	bl	801c3f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015360:	4413      	add	r3, r2
 8015362:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801536c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015370:	bf28      	it	cs
 8015372:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015376:	b292      	uxth	r2, r2
 8015378:	4413      	add	r3, r2
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	1ad3      	subs	r3, r2, r3
 801537e:	2b00      	cmp	r3, #0
 8015380:	db08      	blt.n	8015394 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801538e:	68fa      	ldr	r2, [r7, #12]
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	e020      	b.n	80153d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	2b00      	cmp	r3, #0
 80153a0:	dd03      	ble.n	80153aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2200      	movs	r2, #0
 80153a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80153a8:	e014      	b.n	80153d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80153bc:	d306      	bcc.n	80153cc <tcp_update_rcv_ann_wnd+0x90>
 80153be:	4b08      	ldr	r3, [pc, #32]	; (80153e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80153c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80153c4:	4909      	ldr	r1, [pc, #36]	; (80153ec <tcp_update_rcv_ann_wnd+0xb0>)
 80153c6:	4808      	ldr	r0, [pc, #32]	; (80153e8 <tcp_update_rcv_ann_wnd+0xac>)
 80153c8:	f007 f814 	bl	801c3f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80153d4:	2300      	movs	r3, #0
  }
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	080216cc 	.word	0x080216cc
 80153e4:	08021948 	.word	0x08021948
 80153e8:	08021730 	.word	0x08021730
 80153ec:	0802196c 	.word	0x0802196c

080153f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	460b      	mov	r3, r1
 80153fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d107      	bne.n	8015412 <tcp_recved+0x22>
 8015402:	4b1f      	ldr	r3, [pc, #124]	; (8015480 <tcp_recved+0x90>)
 8015404:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015408:	491e      	ldr	r1, [pc, #120]	; (8015484 <tcp_recved+0x94>)
 801540a:	481f      	ldr	r0, [pc, #124]	; (8015488 <tcp_recved+0x98>)
 801540c:	f006 fff2 	bl	801c3f4 <iprintf>
 8015410:	e032      	b.n	8015478 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	7d1b      	ldrb	r3, [r3, #20]
 8015416:	2b01      	cmp	r3, #1
 8015418:	d106      	bne.n	8015428 <tcp_recved+0x38>
 801541a:	4b19      	ldr	r3, [pc, #100]	; (8015480 <tcp_recved+0x90>)
 801541c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015420:	491a      	ldr	r1, [pc, #104]	; (801548c <tcp_recved+0x9c>)
 8015422:	4819      	ldr	r0, [pc, #100]	; (8015488 <tcp_recved+0x98>)
 8015424:	f006 ffe6 	bl	801c3f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801542c:	887b      	ldrh	r3, [r7, #2]
 801542e:	4413      	add	r3, r2
 8015430:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015432:	89fb      	ldrh	r3, [r7, #14]
 8015434:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015438:	d804      	bhi.n	8015444 <tcp_recved+0x54>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801543e:	89fa      	ldrh	r2, [r7, #14]
 8015440:	429a      	cmp	r2, r3
 8015442:	d204      	bcs.n	801544e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801544a:	851a      	strh	r2, [r3, #40]	; 0x28
 801544c:	e002      	b.n	8015454 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	89fa      	ldrh	r2, [r7, #14]
 8015452:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7ff ff71 	bl	801533c <tcp_update_rcv_ann_wnd>
 801545a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015462:	d309      	bcc.n	8015478 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	8b5b      	ldrh	r3, [r3, #26]
 8015468:	f043 0302 	orr.w	r3, r3, #2
 801546c:	b29a      	uxth	r2, r3
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f004 fbaa 	bl	8019bcc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	080216cc 	.word	0x080216cc
 8015484:	08021988 	.word	0x08021988
 8015488:	08021730 	.word	0x08021730
 801548c:	080219a0 	.word	0x080219a0

08015490 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015496:	2300      	movs	r3, #0
 8015498:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801549a:	4b1e      	ldr	r3, [pc, #120]	; (8015514 <tcp_new_port+0x84>)
 801549c:	881b      	ldrh	r3, [r3, #0]
 801549e:	3301      	adds	r3, #1
 80154a0:	b29a      	uxth	r2, r3
 80154a2:	4b1c      	ldr	r3, [pc, #112]	; (8015514 <tcp_new_port+0x84>)
 80154a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80154a6:	4b1b      	ldr	r3, [pc, #108]	; (8015514 <tcp_new_port+0x84>)
 80154a8:	881b      	ldrh	r3, [r3, #0]
 80154aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154ae:	4293      	cmp	r3, r2
 80154b0:	d103      	bne.n	80154ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80154b2:	4b18      	ldr	r3, [pc, #96]	; (8015514 <tcp_new_port+0x84>)
 80154b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80154b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80154ba:	2300      	movs	r3, #0
 80154bc:	71fb      	strb	r3, [r7, #7]
 80154be:	e01e      	b.n	80154fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154c0:	79fb      	ldrb	r3, [r7, #7]
 80154c2:	4a15      	ldr	r2, [pc, #84]	; (8015518 <tcp_new_port+0x88>)
 80154c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	e011      	b.n	80154f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	8ada      	ldrh	r2, [r3, #22]
 80154d2:	4b10      	ldr	r3, [pc, #64]	; (8015514 <tcp_new_port+0x84>)
 80154d4:	881b      	ldrh	r3, [r3, #0]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d108      	bne.n	80154ec <tcp_new_port+0x5c>
        n++;
 80154da:	88bb      	ldrh	r3, [r7, #4]
 80154dc:	3301      	adds	r3, #1
 80154de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80154e0:	88bb      	ldrh	r3, [r7, #4]
 80154e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154e6:	d3d8      	bcc.n	801549a <tcp_new_port+0xa>
          return 0;
 80154e8:	2300      	movs	r3, #0
 80154ea:	e00d      	b.n	8015508 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	603b      	str	r3, [r7, #0]
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1ea      	bne.n	80154ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80154f8:	79fb      	ldrb	r3, [r7, #7]
 80154fa:	3301      	adds	r3, #1
 80154fc:	71fb      	strb	r3, [r7, #7]
 80154fe:	79fb      	ldrb	r3, [r7, #7]
 8015500:	2b03      	cmp	r3, #3
 8015502:	d9dd      	bls.n	80154c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015504:	4b03      	ldr	r3, [pc, #12]	; (8015514 <tcp_new_port+0x84>)
 8015506:	881b      	ldrh	r3, [r3, #0]
}
 8015508:	4618      	mov	r0, r3
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	2400002c 	.word	0x2400002c
 8015518:	080464c0 	.word	0x080464c0

0801551c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801551c:	b5b0      	push	{r4, r5, r7, lr}
 801551e:	b090      	sub	sp, #64	; 0x40
 8015520:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015522:	2300      	movs	r3, #0
 8015524:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015528:	4b94      	ldr	r3, [pc, #592]	; (801577c <tcp_slowtmr+0x260>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	3301      	adds	r3, #1
 801552e:	4a93      	ldr	r2, [pc, #588]	; (801577c <tcp_slowtmr+0x260>)
 8015530:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015532:	4b93      	ldr	r3, [pc, #588]	; (8015780 <tcp_slowtmr+0x264>)
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	3301      	adds	r3, #1
 8015538:	b2da      	uxtb	r2, r3
 801553a:	4b91      	ldr	r3, [pc, #580]	; (8015780 <tcp_slowtmr+0x264>)
 801553c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801553e:	2300      	movs	r3, #0
 8015540:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015542:	4b90      	ldr	r3, [pc, #576]	; (8015784 <tcp_slowtmr+0x268>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015548:	e29d      	b.n	8015a86 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554c:	7d1b      	ldrb	r3, [r3, #20]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d106      	bne.n	8015560 <tcp_slowtmr+0x44>
 8015552:	4b8d      	ldr	r3, [pc, #564]	; (8015788 <tcp_slowtmr+0x26c>)
 8015554:	f240 42be 	movw	r2, #1214	; 0x4be
 8015558:	498c      	ldr	r1, [pc, #560]	; (801578c <tcp_slowtmr+0x270>)
 801555a:	488d      	ldr	r0, [pc, #564]	; (8015790 <tcp_slowtmr+0x274>)
 801555c:	f006 ff4a 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015562:	7d1b      	ldrb	r3, [r3, #20]
 8015564:	2b01      	cmp	r3, #1
 8015566:	d106      	bne.n	8015576 <tcp_slowtmr+0x5a>
 8015568:	4b87      	ldr	r3, [pc, #540]	; (8015788 <tcp_slowtmr+0x26c>)
 801556a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801556e:	4989      	ldr	r1, [pc, #548]	; (8015794 <tcp_slowtmr+0x278>)
 8015570:	4887      	ldr	r0, [pc, #540]	; (8015790 <tcp_slowtmr+0x274>)
 8015572:	f006 ff3f 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015578:	7d1b      	ldrb	r3, [r3, #20]
 801557a:	2b0a      	cmp	r3, #10
 801557c:	d106      	bne.n	801558c <tcp_slowtmr+0x70>
 801557e:	4b82      	ldr	r3, [pc, #520]	; (8015788 <tcp_slowtmr+0x26c>)
 8015580:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015584:	4984      	ldr	r1, [pc, #528]	; (8015798 <tcp_slowtmr+0x27c>)
 8015586:	4882      	ldr	r0, [pc, #520]	; (8015790 <tcp_slowtmr+0x274>)
 8015588:	f006 ff34 	bl	801c3f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558e:	7f9a      	ldrb	r2, [r3, #30]
 8015590:	4b7b      	ldr	r3, [pc, #492]	; (8015780 <tcp_slowtmr+0x264>)
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	429a      	cmp	r2, r3
 8015596:	d105      	bne.n	80155a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80155a2:	e270      	b.n	8015a86 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80155a4:	4b76      	ldr	r3, [pc, #472]	; (8015780 <tcp_slowtmr+0x264>)
 80155a6:	781a      	ldrb	r2, [r3, #0]
 80155a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80155b2:	2300      	movs	r3, #0
 80155b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80155b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ba:	7d1b      	ldrb	r3, [r3, #20]
 80155bc:	2b02      	cmp	r3, #2
 80155be:	d10a      	bne.n	80155d6 <tcp_slowtmr+0xba>
 80155c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80155c6:	2b05      	cmp	r3, #5
 80155c8:	d905      	bls.n	80155d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80155ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155ce:	3301      	adds	r3, #1
 80155d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155d4:	e11e      	b.n	8015814 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80155dc:	2b0b      	cmp	r3, #11
 80155de:	d905      	bls.n	80155ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80155e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155e4:	3301      	adds	r3, #1
 80155e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155ea:	e113      	b.n	8015814 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d075      	beq.n	80156e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80155f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d006      	beq.n	801560c <tcp_slowtmr+0xf0>
 80155fe:	4b62      	ldr	r3, [pc, #392]	; (8015788 <tcp_slowtmr+0x26c>)
 8015600:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015604:	4965      	ldr	r1, [pc, #404]	; (801579c <tcp_slowtmr+0x280>)
 8015606:	4862      	ldr	r0, [pc, #392]	; (8015790 <tcp_slowtmr+0x274>)
 8015608:	f006 fef4 	bl	801c3f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015610:	2b00      	cmp	r3, #0
 8015612:	d106      	bne.n	8015622 <tcp_slowtmr+0x106>
 8015614:	4b5c      	ldr	r3, [pc, #368]	; (8015788 <tcp_slowtmr+0x26c>)
 8015616:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801561a:	4961      	ldr	r1, [pc, #388]	; (80157a0 <tcp_slowtmr+0x284>)
 801561c:	485c      	ldr	r0, [pc, #368]	; (8015790 <tcp_slowtmr+0x274>)
 801561e:	f006 fee9 	bl	801c3f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015624:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015628:	2b0b      	cmp	r3, #11
 801562a:	d905      	bls.n	8015638 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015630:	3301      	adds	r3, #1
 8015632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015636:	e0ed      	b.n	8015814 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801563e:	3b01      	subs	r3, #1
 8015640:	4a58      	ldr	r2, [pc, #352]	; (80157a4 <tcp_slowtmr+0x288>)
 8015642:	5cd3      	ldrb	r3, [r2, r3]
 8015644:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015648:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801564c:	7c7a      	ldrb	r2, [r7, #17]
 801564e:	429a      	cmp	r2, r3
 8015650:	d907      	bls.n	8015662 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015658:	3301      	adds	r3, #1
 801565a:	b2da      	uxtb	r2, r3
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015664:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015668:	7c7a      	ldrb	r2, [r7, #17]
 801566a:	429a      	cmp	r2, r3
 801566c:	f200 80d2 	bhi.w	8015814 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015670:	2301      	movs	r3, #1
 8015672:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801567a:	2b00      	cmp	r3, #0
 801567c:	d108      	bne.n	8015690 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801567e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015680:	f005 f94c 	bl	801a91c <tcp_zero_window_probe>
 8015684:	4603      	mov	r3, r0
 8015686:	2b00      	cmp	r3, #0
 8015688:	d014      	beq.n	80156b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801568a:	2300      	movs	r3, #0
 801568c:	623b      	str	r3, [r7, #32]
 801568e:	e011      	b.n	80156b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015696:	4619      	mov	r1, r3
 8015698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801569a:	f004 f811 	bl	80196c0 <tcp_split_unsent_seg>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d107      	bne.n	80156b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80156a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156a6:	f004 fa91 	bl	8019bcc <tcp_output>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d101      	bne.n	80156b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80156b0:	2300      	movs	r3, #0
 80156b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f000 80ac 	beq.w	8015814 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80156bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156be:	2200      	movs	r2, #0
 80156c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80156c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156ca:	2b06      	cmp	r3, #6
 80156cc:	f200 80a2 	bhi.w	8015814 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156d6:	3301      	adds	r3, #1
 80156d8:	b2da      	uxtb	r2, r3
 80156da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80156e0:	e098      	b.n	8015814 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80156e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	db0f      	blt.n	801570c <tcp_slowtmr+0x1f0>
 80156ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80156f6:	4293      	cmp	r3, r2
 80156f8:	d008      	beq.n	801570c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015700:	b29b      	uxth	r3, r3
 8015702:	3301      	adds	r3, #1
 8015704:	b29b      	uxth	r3, r3
 8015706:	b21a      	sxth	r2, r3
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015714:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015718:	429a      	cmp	r2, r3
 801571a:	db7b      	blt.n	8015814 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801571c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801571e:	f004 fd47 	bl	801a1b0 <tcp_rexmit_rto_prepare>
 8015722:	4603      	mov	r3, r0
 8015724:	2b00      	cmp	r3, #0
 8015726:	d007      	beq.n	8015738 <tcp_slowtmr+0x21c>
 8015728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801572c:	2b00      	cmp	r3, #0
 801572e:	d171      	bne.n	8015814 <tcp_slowtmr+0x2f8>
 8015730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015734:	2b00      	cmp	r3, #0
 8015736:	d06d      	beq.n	8015814 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573a:	7d1b      	ldrb	r3, [r3, #20]
 801573c:	2b02      	cmp	r3, #2
 801573e:	d03a      	beq.n	80157b6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015746:	2b0c      	cmp	r3, #12
 8015748:	bf28      	it	cs
 801574a:	230c      	movcs	r3, #12
 801574c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015750:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015754:	10db      	asrs	r3, r3, #3
 8015756:	b21b      	sxth	r3, r3
 8015758:	461a      	mov	r2, r3
 801575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015760:	4413      	add	r3, r2
 8015762:	7efa      	ldrb	r2, [r7, #27]
 8015764:	4910      	ldr	r1, [pc, #64]	; (80157a8 <tcp_slowtmr+0x28c>)
 8015766:	5c8a      	ldrb	r2, [r1, r2]
 8015768:	4093      	lsls	r3, r2
 801576a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015772:	4293      	cmp	r3, r2
 8015774:	dc1a      	bgt.n	80157ac <tcp_slowtmr+0x290>
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	b21a      	sxth	r2, r3
 801577a:	e019      	b.n	80157b0 <tcp_slowtmr+0x294>
 801577c:	240079dc 	.word	0x240079dc
 8015780:	24004326 	.word	0x24004326
 8015784:	240079d8 	.word	0x240079d8
 8015788:	080216cc 	.word	0x080216cc
 801578c:	08021a30 	.word	0x08021a30
 8015790:	08021730 	.word	0x08021730
 8015794:	08021a5c 	.word	0x08021a5c
 8015798:	08021a88 	.word	0x08021a88
 801579c:	08021ab8 	.word	0x08021ab8
 80157a0:	08021aec 	.word	0x08021aec
 80157a4:	080464b8 	.word	0x080464b8
 80157a8:	080464a8 	.word	0x080464a8
 80157ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80157b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b8:	2200      	movs	r2, #0
 80157ba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80157c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80157c8:	4293      	cmp	r3, r2
 80157ca:	bf28      	it	cs
 80157cc:	4613      	movcs	r3, r2
 80157ce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80157d0:	8a7b      	ldrh	r3, [r7, #18]
 80157d2:	085b      	lsrs	r3, r3, #1
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80157dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80157e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157e6:	005b      	lsls	r3, r3, #1
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d206      	bcs.n	80157fc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80157ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157f2:	005b      	lsls	r3, r3, #1
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80157fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015808:	2200      	movs	r2, #0
 801580a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801580e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015810:	f004 fd3e 	bl	801a290 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015816:	7d1b      	ldrb	r3, [r3, #20]
 8015818:	2b06      	cmp	r3, #6
 801581a:	d111      	bne.n	8015840 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581e:	8b5b      	ldrh	r3, [r3, #26]
 8015820:	f003 0310 	and.w	r3, r3, #16
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00b      	beq.n	8015840 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015828:	4b9c      	ldr	r3, [pc, #624]	; (8015a9c <tcp_slowtmr+0x580>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582e:	6a1b      	ldr	r3, [r3, #32]
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	2b28      	cmp	r3, #40	; 0x28
 8015834:	d904      	bls.n	8015840 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801583a:	3301      	adds	r3, #1
 801583c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015842:	7a5b      	ldrb	r3, [r3, #9]
 8015844:	f003 0308 	and.w	r3, r3, #8
 8015848:	2b00      	cmp	r3, #0
 801584a:	d04a      	beq.n	80158e2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015850:	2b04      	cmp	r3, #4
 8015852:	d003      	beq.n	801585c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015858:	2b07      	cmp	r3, #7
 801585a:	d142      	bne.n	80158e2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801585c:	4b8f      	ldr	r3, [pc, #572]	; (8015a9c <tcp_slowtmr+0x580>)
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015862:	6a1b      	ldr	r3, [r3, #32]
 8015864:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015868:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801586c:	4b8c      	ldr	r3, [pc, #560]	; (8015aa0 <tcp_slowtmr+0x584>)
 801586e:	440b      	add	r3, r1
 8015870:	498c      	ldr	r1, [pc, #560]	; (8015aa4 <tcp_slowtmr+0x588>)
 8015872:	fba1 1303 	umull	r1, r3, r1, r3
 8015876:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015878:	429a      	cmp	r2, r3
 801587a:	d90a      	bls.n	8015892 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015880:	3301      	adds	r3, #1
 8015882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015886:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801588a:	3301      	adds	r3, #1
 801588c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015890:	e027      	b.n	80158e2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015892:	4b82      	ldr	r3, [pc, #520]	; (8015a9c <tcp_slowtmr+0x580>)
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015898:	6a1b      	ldr	r3, [r3, #32]
 801589a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80158a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80158a8:	4618      	mov	r0, r3
 80158aa:	4b7f      	ldr	r3, [pc, #508]	; (8015aa8 <tcp_slowtmr+0x58c>)
 80158ac:	fb03 f300 	mul.w	r3, r3, r0
 80158b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80158b2:	497c      	ldr	r1, [pc, #496]	; (8015aa4 <tcp_slowtmr+0x588>)
 80158b4:	fba1 1303 	umull	r1, r3, r1, r3
 80158b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d911      	bls.n	80158e2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80158be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158c0:	f004 ffec 	bl	801a89c <tcp_keepalive>
 80158c4:	4603      	mov	r3, r0
 80158c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80158ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d107      	bne.n	80158e2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80158d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80158d8:	3301      	adds	r3, #1
 80158da:	b2da      	uxtb	r2, r3
 80158dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80158e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d011      	beq.n	801590e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80158ea:	4b6c      	ldr	r3, [pc, #432]	; (8015a9c <tcp_slowtmr+0x580>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f0:	6a1b      	ldr	r3, [r3, #32]
 80158f2:	1ad2      	subs	r2, r2, r3
 80158f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80158fa:	4619      	mov	r1, r3
 80158fc:	460b      	mov	r3, r1
 80158fe:	005b      	lsls	r3, r3, #1
 8015900:	440b      	add	r3, r1
 8015902:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015904:	429a      	cmp	r2, r3
 8015906:	d302      	bcc.n	801590e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801590a:	f000 feab 	bl	8016664 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015910:	7d1b      	ldrb	r3, [r3, #20]
 8015912:	2b03      	cmp	r3, #3
 8015914:	d10b      	bne.n	801592e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015916:	4b61      	ldr	r3, [pc, #388]	; (8015a9c <tcp_slowtmr+0x580>)
 8015918:	681a      	ldr	r2, [r3, #0]
 801591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591c:	6a1b      	ldr	r3, [r3, #32]
 801591e:	1ad3      	subs	r3, r2, r3
 8015920:	2b28      	cmp	r3, #40	; 0x28
 8015922:	d904      	bls.n	801592e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015928:	3301      	adds	r3, #1
 801592a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015930:	7d1b      	ldrb	r3, [r3, #20]
 8015932:	2b09      	cmp	r3, #9
 8015934:	d10b      	bne.n	801594e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015936:	4b59      	ldr	r3, [pc, #356]	; (8015a9c <tcp_slowtmr+0x580>)
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593c:	6a1b      	ldr	r3, [r3, #32]
 801593e:	1ad3      	subs	r3, r2, r3
 8015940:	2bf0      	cmp	r3, #240	; 0xf0
 8015942:	d904      	bls.n	801594e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8015944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015948:	3301      	adds	r3, #1
 801594a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801594e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015952:	2b00      	cmp	r3, #0
 8015954:	d060      	beq.n	8015a18 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801595c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801595e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015960:	f000 fccc 	bl	80162fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015966:	2b00      	cmp	r3, #0
 8015968:	d010      	beq.n	801598c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801596a:	4b50      	ldr	r3, [pc, #320]	; (8015aac <tcp_slowtmr+0x590>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015970:	429a      	cmp	r2, r3
 8015972:	d106      	bne.n	8015982 <tcp_slowtmr+0x466>
 8015974:	4b4e      	ldr	r3, [pc, #312]	; (8015ab0 <tcp_slowtmr+0x594>)
 8015976:	f240 526d 	movw	r2, #1389	; 0x56d
 801597a:	494e      	ldr	r1, [pc, #312]	; (8015ab4 <tcp_slowtmr+0x598>)
 801597c:	484e      	ldr	r0, [pc, #312]	; (8015ab8 <tcp_slowtmr+0x59c>)
 801597e:	f006 fd39 	bl	801c3f4 <iprintf>
        prev->next = pcb->next;
 8015982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015984:	68da      	ldr	r2, [r3, #12]
 8015986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015988:	60da      	str	r2, [r3, #12]
 801598a:	e00f      	b.n	80159ac <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801598c:	4b47      	ldr	r3, [pc, #284]	; (8015aac <tcp_slowtmr+0x590>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015992:	429a      	cmp	r2, r3
 8015994:	d006      	beq.n	80159a4 <tcp_slowtmr+0x488>
 8015996:	4b46      	ldr	r3, [pc, #280]	; (8015ab0 <tcp_slowtmr+0x594>)
 8015998:	f240 5271 	movw	r2, #1393	; 0x571
 801599c:	4947      	ldr	r1, [pc, #284]	; (8015abc <tcp_slowtmr+0x5a0>)
 801599e:	4846      	ldr	r0, [pc, #280]	; (8015ab8 <tcp_slowtmr+0x59c>)
 80159a0:	f006 fd28 	bl	801c3f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80159a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	4a40      	ldr	r2, [pc, #256]	; (8015aac <tcp_slowtmr+0x590>)
 80159aa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80159ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d013      	beq.n	80159dc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80159b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80159bc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80159be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c0:	3304      	adds	r3, #4
 80159c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159c4:	8ad2      	ldrh	r2, [r2, #22]
 80159c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159c8:	8b09      	ldrh	r1, [r1, #24]
 80159ca:	9102      	str	r1, [sp, #8]
 80159cc:	9201      	str	r2, [sp, #4]
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	462b      	mov	r3, r5
 80159d2:	4622      	mov	r2, r4
 80159d4:	4601      	mov	r1, r0
 80159d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159d8:	f004 feac 	bl	801a734 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80159dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159de:	691b      	ldr	r3, [r3, #16]
 80159e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80159e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e4:	7d1b      	ldrb	r3, [r3, #20]
 80159e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80159e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80159ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80159f2:	6838      	ldr	r0, [r7, #0]
 80159f4:	f7fe fff0 	bl	80149d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80159f8:	4b31      	ldr	r3, [pc, #196]	; (8015ac0 <tcp_slowtmr+0x5a4>)
 80159fa:	2200      	movs	r2, #0
 80159fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d004      	beq.n	8015a0e <tcp_slowtmr+0x4f2>
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f06f 010c 	mvn.w	r1, #12
 8015a0a:	68b8      	ldr	r0, [r7, #8]
 8015a0c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015a0e:	4b2c      	ldr	r3, [pc, #176]	; (8015ac0 <tcp_slowtmr+0x5a4>)
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d037      	beq.n	8015a86 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8015a16:	e592      	b.n	801553e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a24:	7f1b      	ldrb	r3, [r3, #28]
 8015a26:	3301      	adds	r3, #1
 8015a28:	b2da      	uxtb	r2, r3
 8015a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a30:	7f1a      	ldrb	r2, [r3, #28]
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	7f5b      	ldrb	r3, [r3, #29]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d325      	bcc.n	8015a86 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8015a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015a40:	4b1f      	ldr	r3, [pc, #124]	; (8015ac0 <tcp_slowtmr+0x5a4>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00b      	beq.n	8015a68 <tcp_slowtmr+0x54c>
 8015a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a58:	6912      	ldr	r2, [r2, #16]
 8015a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a5c:	4610      	mov	r0, r2
 8015a5e:	4798      	blx	r3
 8015a60:	4603      	mov	r3, r0
 8015a62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015a66:	e002      	b.n	8015a6e <tcp_slowtmr+0x552>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015a6e:	4b14      	ldr	r3, [pc, #80]	; (8015ac0 <tcp_slowtmr+0x5a4>)
 8015a70:	781b      	ldrb	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d000      	beq.n	8015a78 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8015a76:	e562      	b.n	801553e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015a78:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d102      	bne.n	8015a86 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8015a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a82:	f004 f8a3 	bl	8019bcc <tcp_output>
  while (pcb != NULL) {
 8015a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f47f ad5e 	bne.w	801554a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015a92:	4b0c      	ldr	r3, [pc, #48]	; (8015ac4 <tcp_slowtmr+0x5a8>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015a98:	e069      	b.n	8015b6e <tcp_slowtmr+0x652>
 8015a9a:	bf00      	nop
 8015a9c:	240079dc 	.word	0x240079dc
 8015aa0:	000a4cb8 	.word	0x000a4cb8
 8015aa4:	10624dd3 	.word	0x10624dd3
 8015aa8:	000124f8 	.word	0x000124f8
 8015aac:	240079d8 	.word	0x240079d8
 8015ab0:	080216cc 	.word	0x080216cc
 8015ab4:	08021b24 	.word	0x08021b24
 8015ab8:	08021730 	.word	0x08021730
 8015abc:	08021b50 	.word	0x08021b50
 8015ac0:	240079d4 	.word	0x240079d4
 8015ac4:	240079e8 	.word	0x240079e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aca:	7d1b      	ldrb	r3, [r3, #20]
 8015acc:	2b0a      	cmp	r3, #10
 8015ace:	d006      	beq.n	8015ade <tcp_slowtmr+0x5c2>
 8015ad0:	4b2b      	ldr	r3, [pc, #172]	; (8015b80 <tcp_slowtmr+0x664>)
 8015ad2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015ad6:	492b      	ldr	r1, [pc, #172]	; (8015b84 <tcp_slowtmr+0x668>)
 8015ad8:	482b      	ldr	r0, [pc, #172]	; (8015b88 <tcp_slowtmr+0x66c>)
 8015ada:	f006 fc8b 	bl	801c3f4 <iprintf>
    pcb_remove = 0;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015ae4:	4b29      	ldr	r3, [pc, #164]	; (8015b8c <tcp_slowtmr+0x670>)
 8015ae6:	681a      	ldr	r2, [r3, #0]
 8015ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aea:	6a1b      	ldr	r3, [r3, #32]
 8015aec:	1ad3      	subs	r3, r2, r3
 8015aee:	2bf0      	cmp	r3, #240	; 0xf0
 8015af0:	d904      	bls.n	8015afc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015af6:	3301      	adds	r3, #1
 8015af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d02f      	beq.n	8015b64 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b06:	f000 fbf9 	bl	80162fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d010      	beq.n	8015b32 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015b10:	4b1f      	ldr	r3, [pc, #124]	; (8015b90 <tcp_slowtmr+0x674>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d106      	bne.n	8015b28 <tcp_slowtmr+0x60c>
 8015b1a:	4b19      	ldr	r3, [pc, #100]	; (8015b80 <tcp_slowtmr+0x664>)
 8015b1c:	f240 52af 	movw	r2, #1455	; 0x5af
 8015b20:	491c      	ldr	r1, [pc, #112]	; (8015b94 <tcp_slowtmr+0x678>)
 8015b22:	4819      	ldr	r0, [pc, #100]	; (8015b88 <tcp_slowtmr+0x66c>)
 8015b24:	f006 fc66 	bl	801c3f4 <iprintf>
        prev->next = pcb->next;
 8015b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2a:	68da      	ldr	r2, [r3, #12]
 8015b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2e:	60da      	str	r2, [r3, #12]
 8015b30:	e00f      	b.n	8015b52 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015b32:	4b17      	ldr	r3, [pc, #92]	; (8015b90 <tcp_slowtmr+0x674>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d006      	beq.n	8015b4a <tcp_slowtmr+0x62e>
 8015b3c:	4b10      	ldr	r3, [pc, #64]	; (8015b80 <tcp_slowtmr+0x664>)
 8015b3e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015b42:	4915      	ldr	r1, [pc, #84]	; (8015b98 <tcp_slowtmr+0x67c>)
 8015b44:	4810      	ldr	r0, [pc, #64]	; (8015b88 <tcp_slowtmr+0x66c>)
 8015b46:	f006 fc55 	bl	801c3f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	4a10      	ldr	r2, [pc, #64]	; (8015b90 <tcp_slowtmr+0x674>)
 8015b50:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015b5c:	69f8      	ldr	r0, [r7, #28]
 8015b5e:	f7fe ff3b 	bl	80149d8 <tcp_free>
 8015b62:	e004      	b.n	8015b6e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6a:	68db      	ldr	r3, [r3, #12]
 8015b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d1a9      	bne.n	8015ac8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015b74:	bf00      	nop
 8015b76:	bf00      	nop
 8015b78:	3730      	adds	r7, #48	; 0x30
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	080216cc 	.word	0x080216cc
 8015b84:	08021b7c 	.word	0x08021b7c
 8015b88:	08021730 	.word	0x08021730
 8015b8c:	240079dc 	.word	0x240079dc
 8015b90:	240079e8 	.word	0x240079e8
 8015b94:	08021bac 	.word	0x08021bac
 8015b98:	08021bd4 	.word	0x08021bd4

08015b9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b082      	sub	sp, #8
 8015ba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015ba2:	4b2d      	ldr	r3, [pc, #180]	; (8015c58 <tcp_fasttmr+0xbc>)
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	4b2b      	ldr	r3, [pc, #172]	; (8015c58 <tcp_fasttmr+0xbc>)
 8015bac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015bae:	4b2b      	ldr	r3, [pc, #172]	; (8015c5c <tcp_fasttmr+0xc0>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015bb4:	e048      	b.n	8015c48 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	7f9a      	ldrb	r2, [r3, #30]
 8015bba:	4b27      	ldr	r3, [pc, #156]	; (8015c58 <tcp_fasttmr+0xbc>)
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d03f      	beq.n	8015c42 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015bc2:	4b25      	ldr	r3, [pc, #148]	; (8015c58 <tcp_fasttmr+0xbc>)
 8015bc4:	781a      	ldrb	r2, [r3, #0]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	8b5b      	ldrh	r3, [r3, #26]
 8015bce:	f003 0301 	and.w	r3, r3, #1
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d010      	beq.n	8015bf8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	8b5b      	ldrh	r3, [r3, #26]
 8015bda:	f043 0302 	orr.w	r3, r3, #2
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f003 fff1 	bl	8019bcc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	8b5b      	ldrh	r3, [r3, #26]
 8015bee:	f023 0303 	bic.w	r3, r3, #3
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	8b5b      	ldrh	r3, [r3, #26]
 8015bfc:	f003 0308 	and.w	r3, r3, #8
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d009      	beq.n	8015c18 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	8b5b      	ldrh	r3, [r3, #26]
 8015c08:	f023 0308 	bic.w	r3, r3, #8
 8015c0c:	b29a      	uxth	r2, r3
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f7ff f874 	bl	8014d00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00a      	beq.n	8015c3c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015c26:	4b0e      	ldr	r3, [pc, #56]	; (8015c60 <tcp_fasttmr+0xc4>)
 8015c28:	2200      	movs	r2, #0
 8015c2a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f000 f819 	bl	8015c64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015c32:	4b0b      	ldr	r3, [pc, #44]	; (8015c60 <tcp_fasttmr+0xc4>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d000      	beq.n	8015c3c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015c3a:	e7b8      	b.n	8015bae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	607b      	str	r3, [r7, #4]
 8015c40:	e002      	b.n	8015c48 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1b3      	bne.n	8015bb6 <tcp_fasttmr+0x1a>
    }
  }
}
 8015c4e:	bf00      	nop
 8015c50:	bf00      	nop
 8015c52:	3708      	adds	r7, #8
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	24004326 	.word	0x24004326
 8015c5c:	240079d8 	.word	0x240079d8
 8015c60:	240079d4 	.word	0x240079d4

08015c64 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015c64:	b590      	push	{r4, r7, lr}
 8015c66:	b085      	sub	sp, #20
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d109      	bne.n	8015c86 <tcp_process_refused_data+0x22>
 8015c72:	4b37      	ldr	r3, [pc, #220]	; (8015d50 <tcp_process_refused_data+0xec>)
 8015c74:	f240 6209 	movw	r2, #1545	; 0x609
 8015c78:	4936      	ldr	r1, [pc, #216]	; (8015d54 <tcp_process_refused_data+0xf0>)
 8015c7a:	4837      	ldr	r0, [pc, #220]	; (8015d58 <tcp_process_refused_data+0xf4>)
 8015c7c:	f006 fbba 	bl	801c3f4 <iprintf>
 8015c80:	f06f 030f 	mvn.w	r3, #15
 8015c84:	e060      	b.n	8015d48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c8a:	7b5b      	ldrb	r3, [r3, #13]
 8015c8c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c92:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	2200      	movs	r2, #0
 8015c98:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00b      	beq.n	8015cbc <tcp_process_refused_data+0x58>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6918      	ldr	r0, [r3, #16]
 8015cae:	2300      	movs	r3, #0
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	6879      	ldr	r1, [r7, #4]
 8015cb4:	47a0      	blx	r4
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	73fb      	strb	r3, [r7, #15]
 8015cba:	e007      	b.n	8015ccc <tcp_process_refused_data+0x68>
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	6879      	ldr	r1, [r7, #4]
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	f000 f8a4 	bl	8015e10 <tcp_recv_null>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d12a      	bne.n	8015d2a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015cd4:	7bbb      	ldrb	r3, [r7, #14]
 8015cd6:	f003 0320 	and.w	r3, r3, #32
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d033      	beq.n	8015d46 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015ce6:	d005      	beq.n	8015cf4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cec:	3301      	adds	r3, #1
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d00b      	beq.n	8015d16 <tcp_process_refused_data+0xb2>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6918      	ldr	r0, [r3, #16]
 8015d08:	2300      	movs	r3, #0
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	6879      	ldr	r1, [r7, #4]
 8015d0e:	47a0      	blx	r4
 8015d10:	4603      	mov	r3, r0
 8015d12:	73fb      	strb	r3, [r7, #15]
 8015d14:	e001      	b.n	8015d1a <tcp_process_refused_data+0xb6>
 8015d16:	2300      	movs	r3, #0
 8015d18:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d1e:	f113 0f0d 	cmn.w	r3, #13
 8015d22:	d110      	bne.n	8015d46 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015d24:	f06f 030c 	mvn.w	r3, #12
 8015d28:	e00e      	b.n	8015d48 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d2e:	f113 0f0d 	cmn.w	r3, #13
 8015d32:	d102      	bne.n	8015d3a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015d34:	f06f 030c 	mvn.w	r3, #12
 8015d38:	e006      	b.n	8015d48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	68ba      	ldr	r2, [r7, #8]
 8015d3e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015d40:	f06f 0304 	mvn.w	r3, #4
 8015d44:	e000      	b.n	8015d48 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015d46:	2300      	movs	r3, #0
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3714      	adds	r7, #20
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd90      	pop	{r4, r7, pc}
 8015d50:	080216cc 	.word	0x080216cc
 8015d54:	08021bfc 	.word	0x08021bfc
 8015d58:	08021730 	.word	0x08021730

08015d5c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015d64:	e007      	b.n	8015d76 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f000 f80a 	bl	8015d86 <tcp_seg_free>
    seg = next;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1f4      	bne.n	8015d66 <tcp_segs_free+0xa>
  }
}
 8015d7c:	bf00      	nop
 8015d7e:	bf00      	nop
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b082      	sub	sp, #8
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d00c      	beq.n	8015dae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d004      	beq.n	8015da6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7fe f97b 	bl	801409c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015da6:	6879      	ldr	r1, [r7, #4]
 8015da8:	2003      	movs	r0, #3
 8015daa:	f7fd fa2d 	bl	8013208 <memp_free>
  }
}
 8015dae:	bf00      	nop
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
	...

08015db8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d106      	bne.n	8015dd4 <tcp_seg_copy+0x1c>
 8015dc6:	4b0f      	ldr	r3, [pc, #60]	; (8015e04 <tcp_seg_copy+0x4c>)
 8015dc8:	f240 6282 	movw	r2, #1666	; 0x682
 8015dcc:	490e      	ldr	r1, [pc, #56]	; (8015e08 <tcp_seg_copy+0x50>)
 8015dce:	480f      	ldr	r0, [pc, #60]	; (8015e0c <tcp_seg_copy+0x54>)
 8015dd0:	f006 fb10 	bl	801c3f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015dd4:	2003      	movs	r0, #3
 8015dd6:	f7fd f9a1 	bl	801311c <memp_malloc>
 8015dda:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d101      	bne.n	8015de6 <tcp_seg_copy+0x2e>
    return NULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	e00a      	b.n	8015dfc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015de6:	2210      	movs	r2, #16
 8015de8:	6879      	ldr	r1, [r7, #4]
 8015dea:	68f8      	ldr	r0, [r7, #12]
 8015dec:	f005 fe90 	bl	801bb10 <memcpy>
  pbuf_ref(cseg->p);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fe f9f7 	bl	80141e8 <pbuf_ref>
  return cseg;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3710      	adds	r7, #16
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}
 8015e04:	080216cc 	.word	0x080216cc
 8015e08:	08021c40 	.word	0x08021c40
 8015e0c:	08021730 	.word	0x08021730

08015e10 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
 8015e1c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d109      	bne.n	8015e38 <tcp_recv_null+0x28>
 8015e24:	4b12      	ldr	r3, [pc, #72]	; (8015e70 <tcp_recv_null+0x60>)
 8015e26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015e2a:	4912      	ldr	r1, [pc, #72]	; (8015e74 <tcp_recv_null+0x64>)
 8015e2c:	4812      	ldr	r0, [pc, #72]	; (8015e78 <tcp_recv_null+0x68>)
 8015e2e:	f006 fae1 	bl	801c3f4 <iprintf>
 8015e32:	f06f 030f 	mvn.w	r3, #15
 8015e36:	e016      	b.n	8015e66 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d009      	beq.n	8015e52 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	891b      	ldrh	r3, [r3, #8]
 8015e42:	4619      	mov	r1, r3
 8015e44:	68b8      	ldr	r0, [r7, #8]
 8015e46:	f7ff fad3 	bl	80153f0 <tcp_recved>
    pbuf_free(p);
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7fe f926 	bl	801409c <pbuf_free>
 8015e50:	e008      	b.n	8015e64 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d104      	bne.n	8015e64 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015e5a:	68b8      	ldr	r0, [r7, #8]
 8015e5c:	f7fe ffba 	bl	8014dd4 <tcp_close>
 8015e60:	4603      	mov	r3, r0
 8015e62:	e000      	b.n	8015e66 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015e64:	2300      	movs	r3, #0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
 8015e6e:	bf00      	nop
 8015e70:	080216cc 	.word	0x080216cc
 8015e74:	08021c5c 	.word	0x08021c5c
 8015e78:	08021730 	.word	0x08021730

08015e7c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b086      	sub	sp, #24
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	4603      	mov	r3, r0
 8015e84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	db01      	blt.n	8015e92 <tcp_kill_prio+0x16>
 8015e8e:	79fb      	ldrb	r3, [r7, #7]
 8015e90:	e000      	b.n	8015e94 <tcp_kill_prio+0x18>
 8015e92:	237f      	movs	r3, #127	; 0x7f
 8015e94:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015e96:	7afb      	ldrb	r3, [r7, #11]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d034      	beq.n	8015f06 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015e9c:	7afb      	ldrb	r3, [r7, #11]
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015eaa:	4b19      	ldr	r3, [pc, #100]	; (8015f10 <tcp_kill_prio+0x94>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	617b      	str	r3, [r7, #20]
 8015eb0:	e01f      	b.n	8015ef2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	7d5b      	ldrb	r3, [r3, #21]
 8015eb6:	7afa      	ldrb	r2, [r7, #11]
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	d80c      	bhi.n	8015ed6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015ec0:	7afa      	ldrb	r2, [r7, #11]
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d112      	bne.n	8015eec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015ec6:	4b13      	ldr	r3, [pc, #76]	; (8015f14 <tcp_kill_prio+0x98>)
 8015ec8:	681a      	ldr	r2, [r3, #0]
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	6a1b      	ldr	r3, [r3, #32]
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	68fa      	ldr	r2, [r7, #12]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d80a      	bhi.n	8015eec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015ed6:	4b0f      	ldr	r3, [pc, #60]	; (8015f14 <tcp_kill_prio+0x98>)
 8015ed8:	681a      	ldr	r2, [r3, #0]
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	6a1b      	ldr	r3, [r3, #32]
 8015ede:	1ad3      	subs	r3, r2, r3
 8015ee0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	7d5b      	ldrb	r3, [r3, #21]
 8015eea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	617b      	str	r3, [r7, #20]
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d1dc      	bne.n	8015eb2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d004      	beq.n	8015f08 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015efe:	6938      	ldr	r0, [r7, #16]
 8015f00:	f7ff f8ae 	bl	8015060 <tcp_abort>
 8015f04:	e000      	b.n	8015f08 <tcp_kill_prio+0x8c>
    return;
 8015f06:	bf00      	nop
  }
}
 8015f08:	3718      	adds	r7, #24
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	240079d8 	.word	0x240079d8
 8015f14:	240079dc 	.word	0x240079dc

08015f18 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015f22:	79fb      	ldrb	r3, [r7, #7]
 8015f24:	2b08      	cmp	r3, #8
 8015f26:	d009      	beq.n	8015f3c <tcp_kill_state+0x24>
 8015f28:	79fb      	ldrb	r3, [r7, #7]
 8015f2a:	2b09      	cmp	r3, #9
 8015f2c:	d006      	beq.n	8015f3c <tcp_kill_state+0x24>
 8015f2e:	4b1a      	ldr	r3, [pc, #104]	; (8015f98 <tcp_kill_state+0x80>)
 8015f30:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015f34:	4919      	ldr	r1, [pc, #100]	; (8015f9c <tcp_kill_state+0x84>)
 8015f36:	481a      	ldr	r0, [pc, #104]	; (8015fa0 <tcp_kill_state+0x88>)
 8015f38:	f006 fa5c 	bl	801c3f4 <iprintf>

  inactivity = 0;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f40:	2300      	movs	r3, #0
 8015f42:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f44:	4b17      	ldr	r3, [pc, #92]	; (8015fa4 <tcp_kill_state+0x8c>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	617b      	str	r3, [r7, #20]
 8015f4a:	e017      	b.n	8015f7c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015f4c:	697b      	ldr	r3, [r7, #20]
 8015f4e:	7d1b      	ldrb	r3, [r3, #20]
 8015f50:	79fa      	ldrb	r2, [r7, #7]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d10f      	bne.n	8015f76 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015f56:	4b14      	ldr	r3, [pc, #80]	; (8015fa8 <tcp_kill_state+0x90>)
 8015f58:	681a      	ldr	r2, [r3, #0]
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	6a1b      	ldr	r3, [r3, #32]
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	68fa      	ldr	r2, [r7, #12]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d807      	bhi.n	8015f76 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015f66:	4b10      	ldr	r3, [pc, #64]	; (8015fa8 <tcp_kill_state+0x90>)
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	6a1b      	ldr	r3, [r3, #32]
 8015f6e:	1ad3      	subs	r3, r2, r3
 8015f70:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	617b      	str	r3, [r7, #20]
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d1e4      	bne.n	8015f4c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d003      	beq.n	8015f90 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015f88:	2100      	movs	r1, #0
 8015f8a:	6938      	ldr	r0, [r7, #16]
 8015f8c:	f7fe ffaa 	bl	8014ee4 <tcp_abandon>
  }
}
 8015f90:	bf00      	nop
 8015f92:	3718      	adds	r7, #24
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}
 8015f98:	080216cc 	.word	0x080216cc
 8015f9c:	08021c78 	.word	0x08021c78
 8015fa0:	08021730 	.word	0x08021730
 8015fa4:	240079d8 	.word	0x240079d8
 8015fa8:	240079dc 	.word	0x240079dc

08015fac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fba:	4b12      	ldr	r3, [pc, #72]	; (8016004 <tcp_kill_timewait+0x58>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	60fb      	str	r3, [r7, #12]
 8015fc0:	e012      	b.n	8015fe8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015fc2:	4b11      	ldr	r3, [pc, #68]	; (8016008 <tcp_kill_timewait+0x5c>)
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	6a1b      	ldr	r3, [r3, #32]
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	687a      	ldr	r2, [r7, #4]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d807      	bhi.n	8015fe2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015fd2:	4b0d      	ldr	r3, [pc, #52]	; (8016008 <tcp_kill_timewait+0x5c>)
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	6a1b      	ldr	r3, [r3, #32]
 8015fda:	1ad3      	subs	r3, r2, r3
 8015fdc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	60fb      	str	r3, [r7, #12]
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d1e9      	bne.n	8015fc2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d002      	beq.n	8015ffa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015ff4:	68b8      	ldr	r0, [r7, #8]
 8015ff6:	f7ff f833 	bl	8015060 <tcp_abort>
  }
}
 8015ffa:	bf00      	nop
 8015ffc:	3710      	adds	r7, #16
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop
 8016004:	240079e8 	.word	0x240079e8
 8016008:	240079dc 	.word	0x240079dc

0801600c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016012:	4b10      	ldr	r3, [pc, #64]	; (8016054 <tcp_handle_closepend+0x48>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016018:	e014      	b.n	8016044 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	8b5b      	ldrh	r3, [r3, #26]
 8016024:	f003 0308 	and.w	r3, r3, #8
 8016028:	2b00      	cmp	r3, #0
 801602a:	d009      	beq.n	8016040 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	8b5b      	ldrh	r3, [r3, #26]
 8016030:	f023 0308 	bic.w	r3, r3, #8
 8016034:	b29a      	uxth	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f7fe fe60 	bl	8014d00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1e7      	bne.n	801601a <tcp_handle_closepend+0xe>
  }
}
 801604a:	bf00      	nop
 801604c:	bf00      	nop
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	240079d8 	.word	0x240079d8

08016058 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	4603      	mov	r3, r0
 8016060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016062:	2001      	movs	r0, #1
 8016064:	f7fd f85a 	bl	801311c <memp_malloc>
 8016068:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d126      	bne.n	80160be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016070:	f7ff ffcc 	bl	801600c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016074:	f7ff ff9a 	bl	8015fac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016078:	2001      	movs	r0, #1
 801607a:	f7fd f84f 	bl	801311c <memp_malloc>
 801607e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d11b      	bne.n	80160be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016086:	2009      	movs	r0, #9
 8016088:	f7ff ff46 	bl	8015f18 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801608c:	2001      	movs	r0, #1
 801608e:	f7fd f845 	bl	801311c <memp_malloc>
 8016092:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d111      	bne.n	80160be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801609a:	2008      	movs	r0, #8
 801609c:	f7ff ff3c 	bl	8015f18 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160a0:	2001      	movs	r0, #1
 80160a2:	f7fd f83b 	bl	801311c <memp_malloc>
 80160a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d107      	bne.n	80160be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80160ae:	79fb      	ldrb	r3, [r7, #7]
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7ff fee3 	bl	8015e7c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160b6:	2001      	movs	r0, #1
 80160b8:	f7fd f830 	bl	801311c <memp_malloc>
 80160bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d03f      	beq.n	8016144 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80160c4:	229c      	movs	r2, #156	; 0x9c
 80160c6:	2100      	movs	r1, #0
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	f005 fd49 	bl	801bb60 <memset>
    pcb->prio = prio;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	79fa      	ldrb	r2, [r7, #7]
 80160d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80160da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80160e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	22ff      	movs	r2, #255	; 0xff
 80160f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80160fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2206      	movs	r2, #6
 8016100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2206      	movs	r2, #6
 8016108:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016110:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2201      	movs	r2, #1
 8016116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801611a:	4b0d      	ldr	r3, [pc, #52]	; (8016150 <tcp_alloc+0xf8>)
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016122:	4b0c      	ldr	r3, [pc, #48]	; (8016154 <tcp_alloc+0xfc>)
 8016124:	781a      	ldrb	r2, [r3, #0]
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016130:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	4a08      	ldr	r2, [pc, #32]	; (8016158 <tcp_alloc+0x100>)
 8016138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	4a07      	ldr	r2, [pc, #28]	; (801615c <tcp_alloc+0x104>)
 8016140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016144:	68fb      	ldr	r3, [r7, #12]
}
 8016146:	4618      	mov	r0, r3
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	240079dc 	.word	0x240079dc
 8016154:	24004326 	.word	0x24004326
 8016158:	08015e11 	.word	0x08015e11
 801615c:	006ddd00 	.word	0x006ddd00

08016160 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b084      	sub	sp, #16
 8016164:	af00      	add	r7, sp, #0
 8016166:	4603      	mov	r3, r0
 8016168:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801616a:	2040      	movs	r0, #64	; 0x40
 801616c:	f7ff ff74 	bl	8016058 <tcp_alloc>
 8016170:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016172:	68fb      	ldr	r3, [r7, #12]
}
 8016174:	4618      	mov	r0, r3
 8016176:	3710      	adds	r7, #16
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801617c:	b480      	push	{r7}
 801617e:	b083      	sub	sp, #12
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d002      	beq.n	8016192 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	683a      	ldr	r2, [r7, #0]
 8016190:	611a      	str	r2, [r3, #16]
  }
}
 8016192:	bf00      	nop
 8016194:	370c      	adds	r7, #12
 8016196:	46bd      	mov	sp, r7
 8016198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619c:	4770      	bx	lr
	...

080161a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d00e      	beq.n	80161ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	7d1b      	ldrb	r3, [r3, #20]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d106      	bne.n	80161c6 <tcp_recv+0x26>
 80161b8:	4b07      	ldr	r3, [pc, #28]	; (80161d8 <tcp_recv+0x38>)
 80161ba:	f240 72df 	movw	r2, #2015	; 0x7df
 80161be:	4907      	ldr	r1, [pc, #28]	; (80161dc <tcp_recv+0x3c>)
 80161c0:	4807      	ldr	r0, [pc, #28]	; (80161e0 <tcp_recv+0x40>)
 80161c2:	f006 f917 	bl	801c3f4 <iprintf>
    pcb->recv = recv;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	683a      	ldr	r2, [r7, #0]
 80161ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80161ce:	bf00      	nop
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	080216cc 	.word	0x080216cc
 80161dc:	08021c88 	.word	0x08021c88
 80161e0:	08021730 	.word	0x08021730

080161e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d00e      	beq.n	8016212 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	7d1b      	ldrb	r3, [r3, #20]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d106      	bne.n	801620a <tcp_sent+0x26>
 80161fc:	4b07      	ldr	r3, [pc, #28]	; (801621c <tcp_sent+0x38>)
 80161fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8016202:	4907      	ldr	r1, [pc, #28]	; (8016220 <tcp_sent+0x3c>)
 8016204:	4807      	ldr	r0, [pc, #28]	; (8016224 <tcp_sent+0x40>)
 8016206:	f006 f8f5 	bl	801c3f4 <iprintf>
    pcb->sent = sent;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	683a      	ldr	r2, [r7, #0]
 801620e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8016212:	bf00      	nop
 8016214:	3708      	adds	r7, #8
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	080216cc 	.word	0x080216cc
 8016220:	08021cb0 	.word	0x08021cb0
 8016224:	08021730 	.word	0x08021730

08016228 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00e      	beq.n	8016256 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	7d1b      	ldrb	r3, [r3, #20]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d106      	bne.n	801624e <tcp_err+0x26>
 8016240:	4b07      	ldr	r3, [pc, #28]	; (8016260 <tcp_err+0x38>)
 8016242:	f640 020d 	movw	r2, #2061	; 0x80d
 8016246:	4907      	ldr	r1, [pc, #28]	; (8016264 <tcp_err+0x3c>)
 8016248:	4807      	ldr	r0, [pc, #28]	; (8016268 <tcp_err+0x40>)
 801624a:	f006 f8d3 	bl	801c3f4 <iprintf>
    pcb->errf = err;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	683a      	ldr	r2, [r7, #0]
 8016252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016256:	bf00      	nop
 8016258:	3708      	adds	r7, #8
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	080216cc 	.word	0x080216cc
 8016264:	08021cd8 	.word	0x08021cd8
 8016268:	08021730 	.word	0x08021730

0801626c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801626c:	b480      	push	{r7}
 801626e:	b085      	sub	sp, #20
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
 8016274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d008      	beq.n	801628e <tcp_accept+0x22>
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	7d1b      	ldrb	r3, [r3, #20]
 8016280:	2b01      	cmp	r3, #1
 8016282:	d104      	bne.n	801628e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	619a      	str	r2, [r3, #24]
  }
}
 801628e:	bf00      	nop
 8016290:	3714      	adds	r7, #20
 8016292:	46bd      	mov	sp, r7
 8016294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016298:	4770      	bx	lr
	...

0801629c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	60b9      	str	r1, [r7, #8]
 80162a6:	4613      	mov	r3, r2
 80162a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d107      	bne.n	80162c0 <tcp_poll+0x24>
 80162b0:	4b0e      	ldr	r3, [pc, #56]	; (80162ec <tcp_poll+0x50>)
 80162b2:	f640 023d 	movw	r2, #2109	; 0x83d
 80162b6:	490e      	ldr	r1, [pc, #56]	; (80162f0 <tcp_poll+0x54>)
 80162b8:	480e      	ldr	r0, [pc, #56]	; (80162f4 <tcp_poll+0x58>)
 80162ba:	f006 f89b 	bl	801c3f4 <iprintf>
 80162be:	e011      	b.n	80162e4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	7d1b      	ldrb	r3, [r3, #20]
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d106      	bne.n	80162d6 <tcp_poll+0x3a>
 80162c8:	4b08      	ldr	r3, [pc, #32]	; (80162ec <tcp_poll+0x50>)
 80162ca:	f640 023e 	movw	r2, #2110	; 0x83e
 80162ce:	490a      	ldr	r1, [pc, #40]	; (80162f8 <tcp_poll+0x5c>)
 80162d0:	4808      	ldr	r0, [pc, #32]	; (80162f4 <tcp_poll+0x58>)
 80162d2:	f006 f88f 	bl	801c3f4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	68ba      	ldr	r2, [r7, #8]
 80162da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	79fa      	ldrb	r2, [r7, #7]
 80162e2:	775a      	strb	r2, [r3, #29]
}
 80162e4:	3710      	adds	r7, #16
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	080216cc 	.word	0x080216cc
 80162f0:	08021d00 	.word	0x08021d00
 80162f4:	08021730 	.word	0x08021730
 80162f8:	08021d18 	.word	0x08021d18

080162fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d107      	bne.n	801631a <tcp_pcb_purge+0x1e>
 801630a:	4b21      	ldr	r3, [pc, #132]	; (8016390 <tcp_pcb_purge+0x94>)
 801630c:	f640 0251 	movw	r2, #2129	; 0x851
 8016310:	4920      	ldr	r1, [pc, #128]	; (8016394 <tcp_pcb_purge+0x98>)
 8016312:	4821      	ldr	r0, [pc, #132]	; (8016398 <tcp_pcb_purge+0x9c>)
 8016314:	f006 f86e 	bl	801c3f4 <iprintf>
 8016318:	e037      	b.n	801638a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	7d1b      	ldrb	r3, [r3, #20]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d033      	beq.n	801638a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016326:	2b0a      	cmp	r3, #10
 8016328:	d02f      	beq.n	801638a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801632e:	2b01      	cmp	r3, #1
 8016330:	d02b      	beq.n	801638a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016336:	2b00      	cmp	r3, #0
 8016338:	d007      	beq.n	801634a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801633e:	4618      	mov	r0, r3
 8016340:	f7fd feac 	bl	801409c <pbuf_free>
      pcb->refused_data = NULL;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2200      	movs	r2, #0
 8016348:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801634e:	2b00      	cmp	r3, #0
 8016350:	d002      	beq.n	8016358 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f000 f986 	bl	8016664 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801635e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016364:	4618      	mov	r0, r3
 8016366:	f7ff fcf9 	bl	8015d5c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801636e:	4618      	mov	r0, r3
 8016370:	f7ff fcf4 	bl	8015d5c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2200      	movs	r2, #0
 8016378:	66da      	str	r2, [r3, #108]	; 0x6c
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	080216cc 	.word	0x080216cc
 8016394:	08021d38 	.word	0x08021d38
 8016398:	08021730 	.word	0x08021730

0801639c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d106      	bne.n	80163ba <tcp_pcb_remove+0x1e>
 80163ac:	4b3e      	ldr	r3, [pc, #248]	; (80164a8 <tcp_pcb_remove+0x10c>)
 80163ae:	f640 0283 	movw	r2, #2179	; 0x883
 80163b2:	493e      	ldr	r1, [pc, #248]	; (80164ac <tcp_pcb_remove+0x110>)
 80163b4:	483e      	ldr	r0, [pc, #248]	; (80164b0 <tcp_pcb_remove+0x114>)
 80163b6:	f006 f81d 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d106      	bne.n	80163ce <tcp_pcb_remove+0x32>
 80163c0:	4b39      	ldr	r3, [pc, #228]	; (80164a8 <tcp_pcb_remove+0x10c>)
 80163c2:	f640 0284 	movw	r2, #2180	; 0x884
 80163c6:	493b      	ldr	r1, [pc, #236]	; (80164b4 <tcp_pcb_remove+0x118>)
 80163c8:	4839      	ldr	r0, [pc, #228]	; (80164b0 <tcp_pcb_remove+0x114>)
 80163ca:	f006 f813 	bl	801c3f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	683a      	ldr	r2, [r7, #0]
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d105      	bne.n	80163e4 <tcp_pcb_remove+0x48>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	68da      	ldr	r2, [r3, #12]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	601a      	str	r2, [r3, #0]
 80163e2:	e013      	b.n	801640c <tcp_pcb_remove+0x70>
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60fb      	str	r3, [r7, #12]
 80163ea:	e00c      	b.n	8016406 <tcp_pcb_remove+0x6a>
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	683a      	ldr	r2, [r7, #0]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d104      	bne.n	8016400 <tcp_pcb_remove+0x64>
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	68da      	ldr	r2, [r3, #12]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	60da      	str	r2, [r3, #12]
 80163fe:	e005      	b.n	801640c <tcp_pcb_remove+0x70>
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	60fb      	str	r3, [r7, #12]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d1ef      	bne.n	80163ec <tcp_pcb_remove+0x50>
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2200      	movs	r2, #0
 8016410:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016412:	6838      	ldr	r0, [r7, #0]
 8016414:	f7ff ff72 	bl	80162fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	7d1b      	ldrb	r3, [r3, #20]
 801641c:	2b0a      	cmp	r3, #10
 801641e:	d013      	beq.n	8016448 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016424:	2b01      	cmp	r3, #1
 8016426:	d00f      	beq.n	8016448 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	8b5b      	ldrh	r3, [r3, #26]
 801642c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016430:	2b00      	cmp	r3, #0
 8016432:	d009      	beq.n	8016448 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	8b5b      	ldrh	r3, [r3, #26]
 8016438:	f043 0302 	orr.w	r3, r3, #2
 801643c:	b29a      	uxth	r2, r3
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016442:	6838      	ldr	r0, [r7, #0]
 8016444:	f003 fbc2 	bl	8019bcc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	7d1b      	ldrb	r3, [r3, #20]
 801644c:	2b01      	cmp	r3, #1
 801644e:	d020      	beq.n	8016492 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016454:	2b00      	cmp	r3, #0
 8016456:	d006      	beq.n	8016466 <tcp_pcb_remove+0xca>
 8016458:	4b13      	ldr	r3, [pc, #76]	; (80164a8 <tcp_pcb_remove+0x10c>)
 801645a:	f640 0293 	movw	r2, #2195	; 0x893
 801645e:	4916      	ldr	r1, [pc, #88]	; (80164b8 <tcp_pcb_remove+0x11c>)
 8016460:	4813      	ldr	r0, [pc, #76]	; (80164b0 <tcp_pcb_remove+0x114>)
 8016462:	f005 ffc7 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <tcp_pcb_remove+0xe0>
 801646e:	4b0e      	ldr	r3, [pc, #56]	; (80164a8 <tcp_pcb_remove+0x10c>)
 8016470:	f640 0294 	movw	r2, #2196	; 0x894
 8016474:	4911      	ldr	r1, [pc, #68]	; (80164bc <tcp_pcb_remove+0x120>)
 8016476:	480e      	ldr	r0, [pc, #56]	; (80164b0 <tcp_pcb_remove+0x114>)
 8016478:	f005 ffbc 	bl	801c3f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016480:	2b00      	cmp	r3, #0
 8016482:	d006      	beq.n	8016492 <tcp_pcb_remove+0xf6>
 8016484:	4b08      	ldr	r3, [pc, #32]	; (80164a8 <tcp_pcb_remove+0x10c>)
 8016486:	f640 0296 	movw	r2, #2198	; 0x896
 801648a:	490d      	ldr	r1, [pc, #52]	; (80164c0 <tcp_pcb_remove+0x124>)
 801648c:	4808      	ldr	r0, [pc, #32]	; (80164b0 <tcp_pcb_remove+0x114>)
 801648e:	f005 ffb1 	bl	801c3f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	2200      	movs	r2, #0
 8016496:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	2200      	movs	r2, #0
 801649c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801649e:	bf00      	nop
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	080216cc 	.word	0x080216cc
 80164ac:	08021d54 	.word	0x08021d54
 80164b0:	08021730 	.word	0x08021730
 80164b4:	08021d70 	.word	0x08021d70
 80164b8:	08021d90 	.word	0x08021d90
 80164bc:	08021da8 	.word	0x08021da8
 80164c0:	08021dc4 	.word	0x08021dc4

080164c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d106      	bne.n	80164e0 <tcp_next_iss+0x1c>
 80164d2:	4b0a      	ldr	r3, [pc, #40]	; (80164fc <tcp_next_iss+0x38>)
 80164d4:	f640 02af 	movw	r2, #2223	; 0x8af
 80164d8:	4909      	ldr	r1, [pc, #36]	; (8016500 <tcp_next_iss+0x3c>)
 80164da:	480a      	ldr	r0, [pc, #40]	; (8016504 <tcp_next_iss+0x40>)
 80164dc:	f005 ff8a 	bl	801c3f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80164e0:	4b09      	ldr	r3, [pc, #36]	; (8016508 <tcp_next_iss+0x44>)
 80164e2:	681a      	ldr	r2, [r3, #0]
 80164e4:	4b09      	ldr	r3, [pc, #36]	; (801650c <tcp_next_iss+0x48>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	4413      	add	r3, r2
 80164ea:	4a07      	ldr	r2, [pc, #28]	; (8016508 <tcp_next_iss+0x44>)
 80164ec:	6013      	str	r3, [r2, #0]
  return iss;
 80164ee:	4b06      	ldr	r3, [pc, #24]	; (8016508 <tcp_next_iss+0x44>)
 80164f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3708      	adds	r7, #8
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	080216cc 	.word	0x080216cc
 8016500:	08021ddc 	.word	0x08021ddc
 8016504:	08021730 	.word	0x08021730
 8016508:	24000030 	.word	0x24000030
 801650c:	240079dc 	.word	0x240079dc

08016510 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	4603      	mov	r3, r0
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
 801651c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d106      	bne.n	8016532 <tcp_eff_send_mss_netif+0x22>
 8016524:	4b14      	ldr	r3, [pc, #80]	; (8016578 <tcp_eff_send_mss_netif+0x68>)
 8016526:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801652a:	4914      	ldr	r1, [pc, #80]	; (801657c <tcp_eff_send_mss_netif+0x6c>)
 801652c:	4814      	ldr	r0, [pc, #80]	; (8016580 <tcp_eff_send_mss_netif+0x70>)
 801652e:	f005 ff61 	bl	801c3f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d101      	bne.n	801653c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016538:	89fb      	ldrh	r3, [r7, #14]
 801653a:	e019      	b.n	8016570 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016540:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016542:	8afb      	ldrh	r3, [r7, #22]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d012      	beq.n	801656e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016548:	2328      	movs	r3, #40	; 0x28
 801654a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801654c:	8afa      	ldrh	r2, [r7, #22]
 801654e:	8abb      	ldrh	r3, [r7, #20]
 8016550:	429a      	cmp	r2, r3
 8016552:	d904      	bls.n	801655e <tcp_eff_send_mss_netif+0x4e>
 8016554:	8afa      	ldrh	r2, [r7, #22]
 8016556:	8abb      	ldrh	r3, [r7, #20]
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	b29b      	uxth	r3, r3
 801655c:	e000      	b.n	8016560 <tcp_eff_send_mss_netif+0x50>
 801655e:	2300      	movs	r3, #0
 8016560:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016562:	8a7a      	ldrh	r2, [r7, #18]
 8016564:	89fb      	ldrh	r3, [r7, #14]
 8016566:	4293      	cmp	r3, r2
 8016568:	bf28      	it	cs
 801656a:	4613      	movcs	r3, r2
 801656c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801656e:	89fb      	ldrh	r3, [r7, #14]
}
 8016570:	4618      	mov	r0, r3
 8016572:	3718      	adds	r7, #24
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}
 8016578:	080216cc 	.word	0x080216cc
 801657c:	08021df8 	.word	0x08021df8
 8016580:	08021730 	.word	0x08021730

08016584 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b084      	sub	sp, #16
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d119      	bne.n	80165cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016598:	4b10      	ldr	r3, [pc, #64]	; (80165dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801659a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801659e:	4910      	ldr	r1, [pc, #64]	; (80165e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80165a0:	4810      	ldr	r0, [pc, #64]	; (80165e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80165a2:	f005 ff27 	bl	801c3f4 <iprintf>

  while (pcb != NULL) {
 80165a6:	e011      	b.n	80165cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d108      	bne.n	80165c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	68db      	ldr	r3, [r3, #12]
 80165b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80165ba:	68f8      	ldr	r0, [r7, #12]
 80165bc:	f7fe fd50 	bl	8015060 <tcp_abort>
      pcb = next;
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	60fb      	str	r3, [r7, #12]
 80165c4:	e002      	b.n	80165cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1ea      	bne.n	80165a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80165d2:	bf00      	nop
 80165d4:	bf00      	nop
 80165d6:	3710      	adds	r7, #16
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	080216cc 	.word	0x080216cc
 80165e0:	08021e20 	.word	0x08021e20
 80165e4:	08021730 	.word	0x08021730

080165e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b084      	sub	sp, #16
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d02a      	beq.n	801664e <tcp_netif_ip_addr_changed+0x66>
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d026      	beq.n	801664e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016600:	4b15      	ldr	r3, [pc, #84]	; (8016658 <tcp_netif_ip_addr_changed+0x70>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	4619      	mov	r1, r3
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7ff ffbc 	bl	8016584 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801660c:	4b13      	ldr	r3, [pc, #76]	; (801665c <tcp_netif_ip_addr_changed+0x74>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4619      	mov	r1, r3
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f7ff ffb6 	bl	8016584 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d017      	beq.n	801664e <tcp_netif_ip_addr_changed+0x66>
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d013      	beq.n	801664e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016626:	4b0e      	ldr	r3, [pc, #56]	; (8016660 <tcp_netif_ip_addr_changed+0x78>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	60fb      	str	r3, [r7, #12]
 801662c:	e00c      	b.n	8016648 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681a      	ldr	r2, [r3, #0]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	429a      	cmp	r2, r3
 8016638:	d103      	bne.n	8016642 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	60fb      	str	r3, [r7, #12]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d1ef      	bne.n	801662e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801664e:	bf00      	nop
 8016650:	3710      	adds	r7, #16
 8016652:	46bd      	mov	sp, r7
 8016654:	bd80      	pop	{r7, pc}
 8016656:	bf00      	nop
 8016658:	240079d8 	.word	0x240079d8
 801665c:	240079e4 	.word	0x240079e4
 8016660:	240079e0 	.word	0x240079e0

08016664 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016670:	2b00      	cmp	r3, #0
 8016672:	d007      	beq.n	8016684 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016678:	4618      	mov	r0, r3
 801667a:	f7ff fb6f 	bl	8015d5c <tcp_segs_free>
    pcb->ooseq = NULL;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2200      	movs	r2, #0
 8016682:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016684:	bf00      	nop
 8016686:	3708      	adds	r7, #8
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}

0801668c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801668c:	b590      	push	{r4, r7, lr}
 801668e:	b08d      	sub	sp, #52	; 0x34
 8016690:	af04      	add	r7, sp, #16
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d105      	bne.n	80166a8 <tcp_input+0x1c>
 801669c:	4b9b      	ldr	r3, [pc, #620]	; (801690c <tcp_input+0x280>)
 801669e:	2283      	movs	r2, #131	; 0x83
 80166a0:	499b      	ldr	r1, [pc, #620]	; (8016910 <tcp_input+0x284>)
 80166a2:	489c      	ldr	r0, [pc, #624]	; (8016914 <tcp_input+0x288>)
 80166a4:	f005 fea6 	bl	801c3f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	4a9a      	ldr	r2, [pc, #616]	; (8016918 <tcp_input+0x28c>)
 80166ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	895b      	ldrh	r3, [r3, #10]
 80166b4:	2b13      	cmp	r3, #19
 80166b6:	f240 83c4 	bls.w	8016e42 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80166ba:	4b98      	ldr	r3, [pc, #608]	; (801691c <tcp_input+0x290>)
 80166bc:	695b      	ldr	r3, [r3, #20]
 80166be:	4a97      	ldr	r2, [pc, #604]	; (801691c <tcp_input+0x290>)
 80166c0:	6812      	ldr	r2, [r2, #0]
 80166c2:	4611      	mov	r1, r2
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fb fa11 	bl	8011aec <ip4_addr_isbroadcast_u32>
 80166ca:	4603      	mov	r3, r0
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	f040 83ba 	bne.w	8016e46 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80166d2:	4b92      	ldr	r3, [pc, #584]	; (801691c <tcp_input+0x290>)
 80166d4:	695b      	ldr	r3, [r3, #20]
 80166d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80166da:	2be0      	cmp	r3, #224	; 0xe0
 80166dc:	f000 83b3 	beq.w	8016e46 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80166e0:	4b8d      	ldr	r3, [pc, #564]	; (8016918 <tcp_input+0x28c>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	899b      	ldrh	r3, [r3, #12]
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7f7 fd93 	bl	800e214 <lwip_htons>
 80166ee:	4603      	mov	r3, r0
 80166f0:	0b1b      	lsrs	r3, r3, #12
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80166fa:	7cbb      	ldrb	r3, [r7, #18]
 80166fc:	2b13      	cmp	r3, #19
 80166fe:	f240 83a4 	bls.w	8016e4a <tcp_input+0x7be>
 8016702:	7cbb      	ldrb	r3, [r7, #18]
 8016704:	b29a      	uxth	r2, r3
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	891b      	ldrh	r3, [r3, #8]
 801670a:	429a      	cmp	r2, r3
 801670c:	f200 839d 	bhi.w	8016e4a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016710:	7cbb      	ldrb	r3, [r7, #18]
 8016712:	b29b      	uxth	r3, r3
 8016714:	3b14      	subs	r3, #20
 8016716:	b29a      	uxth	r2, r3
 8016718:	4b81      	ldr	r3, [pc, #516]	; (8016920 <tcp_input+0x294>)
 801671a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801671c:	4b81      	ldr	r3, [pc, #516]	; (8016924 <tcp_input+0x298>)
 801671e:	2200      	movs	r2, #0
 8016720:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	895a      	ldrh	r2, [r3, #10]
 8016726:	7cbb      	ldrb	r3, [r7, #18]
 8016728:	b29b      	uxth	r3, r3
 801672a:	429a      	cmp	r2, r3
 801672c:	d309      	bcc.n	8016742 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801672e:	4b7c      	ldr	r3, [pc, #496]	; (8016920 <tcp_input+0x294>)
 8016730:	881a      	ldrh	r2, [r3, #0]
 8016732:	4b7d      	ldr	r3, [pc, #500]	; (8016928 <tcp_input+0x29c>)
 8016734:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016736:	7cbb      	ldrb	r3, [r7, #18]
 8016738:	4619      	mov	r1, r3
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f7fd fc28 	bl	8013f90 <pbuf_remove_header>
 8016740:	e04e      	b.n	80167e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d105      	bne.n	8016756 <tcp_input+0xca>
 801674a:	4b70      	ldr	r3, [pc, #448]	; (801690c <tcp_input+0x280>)
 801674c:	22c2      	movs	r2, #194	; 0xc2
 801674e:	4977      	ldr	r1, [pc, #476]	; (801692c <tcp_input+0x2a0>)
 8016750:	4870      	ldr	r0, [pc, #448]	; (8016914 <tcp_input+0x288>)
 8016752:	f005 fe4f 	bl	801c3f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016756:	2114      	movs	r1, #20
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7fd fc19 	bl	8013f90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	895a      	ldrh	r2, [r3, #10]
 8016762:	4b71      	ldr	r3, [pc, #452]	; (8016928 <tcp_input+0x29c>)
 8016764:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016766:	4b6e      	ldr	r3, [pc, #440]	; (8016920 <tcp_input+0x294>)
 8016768:	881a      	ldrh	r2, [r3, #0]
 801676a:	4b6f      	ldr	r3, [pc, #444]	; (8016928 <tcp_input+0x29c>)
 801676c:	881b      	ldrh	r3, [r3, #0]
 801676e:	1ad3      	subs	r3, r2, r3
 8016770:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016772:	4b6d      	ldr	r3, [pc, #436]	; (8016928 <tcp_input+0x29c>)
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	4619      	mov	r1, r3
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f7fd fc09 	bl	8013f90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	895b      	ldrh	r3, [r3, #10]
 8016784:	8a3a      	ldrh	r2, [r7, #16]
 8016786:	429a      	cmp	r2, r3
 8016788:	f200 8361 	bhi.w	8016e4e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	4a64      	ldr	r2, [pc, #400]	; (8016924 <tcp_input+0x298>)
 8016794:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	8a3a      	ldrh	r2, [r7, #16]
 801679c:	4611      	mov	r1, r2
 801679e:	4618      	mov	r0, r3
 80167a0:	f7fd fbf6 	bl	8013f90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	891a      	ldrh	r2, [r3, #8]
 80167a8:	8a3b      	ldrh	r3, [r7, #16]
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	895b      	ldrh	r3, [r3, #10]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d005      	beq.n	80167c6 <tcp_input+0x13a>
 80167ba:	4b54      	ldr	r3, [pc, #336]	; (801690c <tcp_input+0x280>)
 80167bc:	22df      	movs	r2, #223	; 0xdf
 80167be:	495c      	ldr	r1, [pc, #368]	; (8016930 <tcp_input+0x2a4>)
 80167c0:	4854      	ldr	r0, [pc, #336]	; (8016914 <tcp_input+0x288>)
 80167c2:	f005 fe17 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	891a      	ldrh	r2, [r3, #8]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	891b      	ldrh	r3, [r3, #8]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d005      	beq.n	80167e0 <tcp_input+0x154>
 80167d4:	4b4d      	ldr	r3, [pc, #308]	; (801690c <tcp_input+0x280>)
 80167d6:	22e0      	movs	r2, #224	; 0xe0
 80167d8:	4956      	ldr	r1, [pc, #344]	; (8016934 <tcp_input+0x2a8>)
 80167da:	484e      	ldr	r0, [pc, #312]	; (8016914 <tcp_input+0x288>)
 80167dc:	f005 fe0a 	bl	801c3f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80167e0:	4b4d      	ldr	r3, [pc, #308]	; (8016918 <tcp_input+0x28c>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	4a4b      	ldr	r2, [pc, #300]	; (8016918 <tcp_input+0x28c>)
 80167ea:	6814      	ldr	r4, [r2, #0]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7f7 fd11 	bl	800e214 <lwip_htons>
 80167f2:	4603      	mov	r3, r0
 80167f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80167f6:	4b48      	ldr	r3, [pc, #288]	; (8016918 <tcp_input+0x28c>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	885b      	ldrh	r3, [r3, #2]
 80167fc:	b29b      	uxth	r3, r3
 80167fe:	4a46      	ldr	r2, [pc, #280]	; (8016918 <tcp_input+0x28c>)
 8016800:	6814      	ldr	r4, [r2, #0]
 8016802:	4618      	mov	r0, r3
 8016804:	f7f7 fd06 	bl	800e214 <lwip_htons>
 8016808:	4603      	mov	r3, r0
 801680a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801680c:	4b42      	ldr	r3, [pc, #264]	; (8016918 <tcp_input+0x28c>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	4a41      	ldr	r2, [pc, #260]	; (8016918 <tcp_input+0x28c>)
 8016814:	6814      	ldr	r4, [r2, #0]
 8016816:	4618      	mov	r0, r3
 8016818:	f7f7 fd11 	bl	800e23e <lwip_htonl>
 801681c:	4603      	mov	r3, r0
 801681e:	6063      	str	r3, [r4, #4]
 8016820:	6863      	ldr	r3, [r4, #4]
 8016822:	4a45      	ldr	r2, [pc, #276]	; (8016938 <tcp_input+0x2ac>)
 8016824:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016826:	4b3c      	ldr	r3, [pc, #240]	; (8016918 <tcp_input+0x28c>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	689b      	ldr	r3, [r3, #8]
 801682c:	4a3a      	ldr	r2, [pc, #232]	; (8016918 <tcp_input+0x28c>)
 801682e:	6814      	ldr	r4, [r2, #0]
 8016830:	4618      	mov	r0, r3
 8016832:	f7f7 fd04 	bl	800e23e <lwip_htonl>
 8016836:	4603      	mov	r3, r0
 8016838:	60a3      	str	r3, [r4, #8]
 801683a:	68a3      	ldr	r3, [r4, #8]
 801683c:	4a3f      	ldr	r2, [pc, #252]	; (801693c <tcp_input+0x2b0>)
 801683e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016840:	4b35      	ldr	r3, [pc, #212]	; (8016918 <tcp_input+0x28c>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	89db      	ldrh	r3, [r3, #14]
 8016846:	b29b      	uxth	r3, r3
 8016848:	4a33      	ldr	r2, [pc, #204]	; (8016918 <tcp_input+0x28c>)
 801684a:	6814      	ldr	r4, [r2, #0]
 801684c:	4618      	mov	r0, r3
 801684e:	f7f7 fce1 	bl	800e214 <lwip_htons>
 8016852:	4603      	mov	r3, r0
 8016854:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016856:	4b30      	ldr	r3, [pc, #192]	; (8016918 <tcp_input+0x28c>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	899b      	ldrh	r3, [r3, #12]
 801685c:	b29b      	uxth	r3, r3
 801685e:	4618      	mov	r0, r3
 8016860:	f7f7 fcd8 	bl	800e214 <lwip_htons>
 8016864:	4603      	mov	r3, r0
 8016866:	b2db      	uxtb	r3, r3
 8016868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801686c:	b2da      	uxtb	r2, r3
 801686e:	4b34      	ldr	r3, [pc, #208]	; (8016940 <tcp_input+0x2b4>)
 8016870:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	891a      	ldrh	r2, [r3, #8]
 8016876:	4b33      	ldr	r3, [pc, #204]	; (8016944 <tcp_input+0x2b8>)
 8016878:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801687a:	4b31      	ldr	r3, [pc, #196]	; (8016940 <tcp_input+0x2b4>)
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	f003 0303 	and.w	r3, r3, #3
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00c      	beq.n	80168a0 <tcp_input+0x214>
    tcplen++;
 8016886:	4b2f      	ldr	r3, [pc, #188]	; (8016944 <tcp_input+0x2b8>)
 8016888:	881b      	ldrh	r3, [r3, #0]
 801688a:	3301      	adds	r3, #1
 801688c:	b29a      	uxth	r2, r3
 801688e:	4b2d      	ldr	r3, [pc, #180]	; (8016944 <tcp_input+0x2b8>)
 8016890:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	891a      	ldrh	r2, [r3, #8]
 8016896:	4b2b      	ldr	r3, [pc, #172]	; (8016944 <tcp_input+0x2b8>)
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	429a      	cmp	r2, r3
 801689c:	f200 82d9 	bhi.w	8016e52 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80168a0:	2300      	movs	r3, #0
 80168a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80168a4:	4b28      	ldr	r3, [pc, #160]	; (8016948 <tcp_input+0x2bc>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	61fb      	str	r3, [r7, #28]
 80168aa:	e09d      	b.n	80169e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	7d1b      	ldrb	r3, [r3, #20]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d105      	bne.n	80168c0 <tcp_input+0x234>
 80168b4:	4b15      	ldr	r3, [pc, #84]	; (801690c <tcp_input+0x280>)
 80168b6:	22fb      	movs	r2, #251	; 0xfb
 80168b8:	4924      	ldr	r1, [pc, #144]	; (801694c <tcp_input+0x2c0>)
 80168ba:	4816      	ldr	r0, [pc, #88]	; (8016914 <tcp_input+0x288>)
 80168bc:	f005 fd9a 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	7d1b      	ldrb	r3, [r3, #20]
 80168c4:	2b0a      	cmp	r3, #10
 80168c6:	d105      	bne.n	80168d4 <tcp_input+0x248>
 80168c8:	4b10      	ldr	r3, [pc, #64]	; (801690c <tcp_input+0x280>)
 80168ca:	22fc      	movs	r2, #252	; 0xfc
 80168cc:	4920      	ldr	r1, [pc, #128]	; (8016950 <tcp_input+0x2c4>)
 80168ce:	4811      	ldr	r0, [pc, #68]	; (8016914 <tcp_input+0x288>)
 80168d0:	f005 fd90 	bl	801c3f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	7d1b      	ldrb	r3, [r3, #20]
 80168d8:	2b01      	cmp	r3, #1
 80168da:	d105      	bne.n	80168e8 <tcp_input+0x25c>
 80168dc:	4b0b      	ldr	r3, [pc, #44]	; (801690c <tcp_input+0x280>)
 80168de:	22fd      	movs	r2, #253	; 0xfd
 80168e0:	491c      	ldr	r1, [pc, #112]	; (8016954 <tcp_input+0x2c8>)
 80168e2:	480c      	ldr	r0, [pc, #48]	; (8016914 <tcp_input+0x288>)
 80168e4:	f005 fd86 	bl	801c3f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168e8:	69fb      	ldr	r3, [r7, #28]
 80168ea:	7a1b      	ldrb	r3, [r3, #8]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d033      	beq.n	8016958 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	7a1a      	ldrb	r2, [r3, #8]
 80168f4:	4b09      	ldr	r3, [pc, #36]	; (801691c <tcp_input+0x290>)
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80168fc:	3301      	adds	r3, #1
 80168fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016900:	429a      	cmp	r2, r3
 8016902:	d029      	beq.n	8016958 <tcp_input+0x2cc>
      prev = pcb;
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	61bb      	str	r3, [r7, #24]
      continue;
 8016908:	e06b      	b.n	80169e2 <tcp_input+0x356>
 801690a:	bf00      	nop
 801690c:	08021e54 	.word	0x08021e54
 8016910:	08021ea8 	.word	0x08021ea8
 8016914:	08021ec0 	.word	0x08021ec0
 8016918:	24004338 	.word	0x24004338
 801691c:	240048f0 	.word	0x240048f0
 8016920:	2400433c 	.word	0x2400433c
 8016924:	24004340 	.word	0x24004340
 8016928:	2400433e 	.word	0x2400433e
 801692c:	08021ee8 	.word	0x08021ee8
 8016930:	08021ef8 	.word	0x08021ef8
 8016934:	08021f04 	.word	0x08021f04
 8016938:	24004348 	.word	0x24004348
 801693c:	2400434c 	.word	0x2400434c
 8016940:	24004354 	.word	0x24004354
 8016944:	24004352 	.word	0x24004352
 8016948:	240079d8 	.word	0x240079d8
 801694c:	08021f24 	.word	0x08021f24
 8016950:	08021f4c 	.word	0x08021f4c
 8016954:	08021f78 	.word	0x08021f78
    }

    if (pcb->remote_port == tcphdr->src &&
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	8b1a      	ldrh	r2, [r3, #24]
 801695c:	4b94      	ldr	r3, [pc, #592]	; (8016bb0 <tcp_input+0x524>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	b29b      	uxth	r3, r3
 8016964:	429a      	cmp	r2, r3
 8016966:	d13a      	bne.n	80169de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	8ada      	ldrh	r2, [r3, #22]
 801696c:	4b90      	ldr	r3, [pc, #576]	; (8016bb0 <tcp_input+0x524>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	885b      	ldrh	r3, [r3, #2]
 8016972:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016974:	429a      	cmp	r2, r3
 8016976:	d132      	bne.n	80169de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	685a      	ldr	r2, [r3, #4]
 801697c:	4b8d      	ldr	r3, [pc, #564]	; (8016bb4 <tcp_input+0x528>)
 801697e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016980:	429a      	cmp	r2, r3
 8016982:	d12c      	bne.n	80169de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	4b8a      	ldr	r3, [pc, #552]	; (8016bb4 <tcp_input+0x528>)
 801698a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801698c:	429a      	cmp	r2, r3
 801698e:	d126      	bne.n	80169de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	68db      	ldr	r3, [r3, #12]
 8016994:	69fa      	ldr	r2, [r7, #28]
 8016996:	429a      	cmp	r2, r3
 8016998:	d106      	bne.n	80169a8 <tcp_input+0x31c>
 801699a:	4b87      	ldr	r3, [pc, #540]	; (8016bb8 <tcp_input+0x52c>)
 801699c:	f240 120d 	movw	r2, #269	; 0x10d
 80169a0:	4986      	ldr	r1, [pc, #536]	; (8016bbc <tcp_input+0x530>)
 80169a2:	4887      	ldr	r0, [pc, #540]	; (8016bc0 <tcp_input+0x534>)
 80169a4:	f005 fd26 	bl	801c3f4 <iprintf>
      if (prev != NULL) {
 80169a8:	69bb      	ldr	r3, [r7, #24]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d00a      	beq.n	80169c4 <tcp_input+0x338>
        prev->next = pcb->next;
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	68da      	ldr	r2, [r3, #12]
 80169b2:	69bb      	ldr	r3, [r7, #24]
 80169b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80169b6:	4b83      	ldr	r3, [pc, #524]	; (8016bc4 <tcp_input+0x538>)
 80169b8:	681a      	ldr	r2, [r3, #0]
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80169be:	4a81      	ldr	r2, [pc, #516]	; (8016bc4 <tcp_input+0x538>)
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80169c4:	69fb      	ldr	r3, [r7, #28]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	69fa      	ldr	r2, [r7, #28]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d111      	bne.n	80169f2 <tcp_input+0x366>
 80169ce:	4b7a      	ldr	r3, [pc, #488]	; (8016bb8 <tcp_input+0x52c>)
 80169d0:	f240 1215 	movw	r2, #277	; 0x115
 80169d4:	497c      	ldr	r1, [pc, #496]	; (8016bc8 <tcp_input+0x53c>)
 80169d6:	487a      	ldr	r0, [pc, #488]	; (8016bc0 <tcp_input+0x534>)
 80169d8:	f005 fd0c 	bl	801c3f4 <iprintf>
      break;
 80169dc:	e009      	b.n	80169f2 <tcp_input+0x366>
    }
    prev = pcb;
 80169de:	69fb      	ldr	r3, [r7, #28]
 80169e0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80169e2:	69fb      	ldr	r3, [r7, #28]
 80169e4:	68db      	ldr	r3, [r3, #12]
 80169e6:	61fb      	str	r3, [r7, #28]
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f47f af5e 	bne.w	80168ac <tcp_input+0x220>
 80169f0:	e000      	b.n	80169f4 <tcp_input+0x368>
      break;
 80169f2:	bf00      	nop
  }

  if (pcb == NULL) {
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	f040 8095 	bne.w	8016b26 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80169fc:	4b73      	ldr	r3, [pc, #460]	; (8016bcc <tcp_input+0x540>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	61fb      	str	r3, [r7, #28]
 8016a02:	e03f      	b.n	8016a84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	7d1b      	ldrb	r3, [r3, #20]
 8016a08:	2b0a      	cmp	r3, #10
 8016a0a:	d006      	beq.n	8016a1a <tcp_input+0x38e>
 8016a0c:	4b6a      	ldr	r3, [pc, #424]	; (8016bb8 <tcp_input+0x52c>)
 8016a0e:	f240 121f 	movw	r2, #287	; 0x11f
 8016a12:	496f      	ldr	r1, [pc, #444]	; (8016bd0 <tcp_input+0x544>)
 8016a14:	486a      	ldr	r0, [pc, #424]	; (8016bc0 <tcp_input+0x534>)
 8016a16:	f005 fced 	bl	801c3f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a1a:	69fb      	ldr	r3, [r7, #28]
 8016a1c:	7a1b      	ldrb	r3, [r3, #8]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d009      	beq.n	8016a36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	7a1a      	ldrb	r2, [r3, #8]
 8016a26:	4b63      	ldr	r3, [pc, #396]	; (8016bb4 <tcp_input+0x528>)
 8016a28:	685b      	ldr	r3, [r3, #4]
 8016a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016a2e:	3301      	adds	r3, #1
 8016a30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d122      	bne.n	8016a7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	8b1a      	ldrh	r2, [r3, #24]
 8016a3a:	4b5d      	ldr	r3, [pc, #372]	; (8016bb0 <tcp_input+0x524>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	881b      	ldrh	r3, [r3, #0]
 8016a40:	b29b      	uxth	r3, r3
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d11b      	bne.n	8016a7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	8ada      	ldrh	r2, [r3, #22]
 8016a4a:	4b59      	ldr	r3, [pc, #356]	; (8016bb0 <tcp_input+0x524>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	885b      	ldrh	r3, [r3, #2]
 8016a50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d113      	bne.n	8016a7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	685a      	ldr	r2, [r3, #4]
 8016a5a:	4b56      	ldr	r3, [pc, #344]	; (8016bb4 <tcp_input+0x528>)
 8016a5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d10d      	bne.n	8016a7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	4b53      	ldr	r3, [pc, #332]	; (8016bb4 <tcp_input+0x528>)
 8016a68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d107      	bne.n	8016a7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016a6e:	69f8      	ldr	r0, [r7, #28]
 8016a70:	f000 fb54 	bl	801711c <tcp_timewait_input>
        }
        pbuf_free(p);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f7fd fb11 	bl	801409c <pbuf_free>
        return;
 8016a7a:	e1f0      	b.n	8016e5e <tcp_input+0x7d2>
        continue;
 8016a7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	68db      	ldr	r3, [r3, #12]
 8016a82:	61fb      	str	r3, [r7, #28]
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d1bc      	bne.n	8016a04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016a8e:	4b51      	ldr	r3, [pc, #324]	; (8016bd4 <tcp_input+0x548>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	617b      	str	r3, [r7, #20]
 8016a94:	e02a      	b.n	8016aec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	7a1b      	ldrb	r3, [r3, #8]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d00c      	beq.n	8016ab8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	7a1a      	ldrb	r2, [r3, #8]
 8016aa2:	4b44      	ldr	r3, [pc, #272]	; (8016bb4 <tcp_input+0x528>)
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016aaa:	3301      	adds	r3, #1
 8016aac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d002      	beq.n	8016ab8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	61bb      	str	r3, [r7, #24]
        continue;
 8016ab6:	e016      	b.n	8016ae6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	8ada      	ldrh	r2, [r3, #22]
 8016abc:	4b3c      	ldr	r3, [pc, #240]	; (8016bb0 <tcp_input+0x524>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	885b      	ldrh	r3, [r3, #2]
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d10c      	bne.n	8016ae2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	681a      	ldr	r2, [r3, #0]
 8016acc:	4b39      	ldr	r3, [pc, #228]	; (8016bb4 <tcp_input+0x528>)
 8016ace:	695b      	ldr	r3, [r3, #20]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d00f      	beq.n	8016af4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d00d      	beq.n	8016af6 <tcp_input+0x46a>
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d009      	beq.n	8016af6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	617b      	str	r3, [r7, #20]
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1d1      	bne.n	8016a96 <tcp_input+0x40a>
 8016af2:	e000      	b.n	8016af6 <tcp_input+0x46a>
            break;
 8016af4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d014      	beq.n	8016b26 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016afc:	69bb      	ldr	r3, [r7, #24]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d00a      	beq.n	8016b18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	68da      	ldr	r2, [r3, #12]
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016b0a:	4b32      	ldr	r3, [pc, #200]	; (8016bd4 <tcp_input+0x548>)
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016b12:	4a30      	ldr	r2, [pc, #192]	; (8016bd4 <tcp_input+0x548>)
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016b18:	6978      	ldr	r0, [r7, #20]
 8016b1a:	f000 fa01 	bl	8016f20 <tcp_listen_input>
      }
      pbuf_free(p);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f7fd fabc 	bl	801409c <pbuf_free>
      return;
 8016b24:	e19b      	b.n	8016e5e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f000 8160 	beq.w	8016dee <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016b2e:	4b2a      	ldr	r3, [pc, #168]	; (8016bd8 <tcp_input+0x54c>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	891a      	ldrh	r2, [r3, #8]
 8016b38:	4b27      	ldr	r3, [pc, #156]	; (8016bd8 <tcp_input+0x54c>)
 8016b3a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016b3c:	4a26      	ldr	r2, [pc, #152]	; (8016bd8 <tcp_input+0x54c>)
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016b42:	4b1b      	ldr	r3, [pc, #108]	; (8016bb0 <tcp_input+0x524>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	4a24      	ldr	r2, [pc, #144]	; (8016bd8 <tcp_input+0x54c>)
 8016b48:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016b4a:	4b24      	ldr	r3, [pc, #144]	; (8016bdc <tcp_input+0x550>)
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016b50:	4b23      	ldr	r3, [pc, #140]	; (8016be0 <tcp_input+0x554>)
 8016b52:	2200      	movs	r2, #0
 8016b54:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016b56:	4b23      	ldr	r3, [pc, #140]	; (8016be4 <tcp_input+0x558>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016b5c:	4b22      	ldr	r3, [pc, #136]	; (8016be8 <tcp_input+0x55c>)
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	f003 0308 	and.w	r3, r3, #8
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d006      	beq.n	8016b76 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	7b5b      	ldrb	r3, [r3, #13]
 8016b6c:	f043 0301 	orr.w	r3, r3, #1
 8016b70:	b2da      	uxtb	r2, r3
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d038      	beq.n	8016bf0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b7e:	69f8      	ldr	r0, [r7, #28]
 8016b80:	f7ff f870 	bl	8015c64 <tcp_process_refused_data>
 8016b84:	4603      	mov	r3, r0
 8016b86:	f113 0f0d 	cmn.w	r3, #13
 8016b8a:	d007      	beq.n	8016b9c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b8c:	69fb      	ldr	r3, [r7, #28]
 8016b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d02d      	beq.n	8016bf0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b94:	4b15      	ldr	r3, [pc, #84]	; (8016bec <tcp_input+0x560>)
 8016b96:	881b      	ldrh	r3, [r3, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d029      	beq.n	8016bf0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016b9c:	69fb      	ldr	r3, [r7, #28]
 8016b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	f040 8104 	bne.w	8016dae <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016ba6:	69f8      	ldr	r0, [r7, #28]
 8016ba8:	f003 fe16 	bl	801a7d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016bac:	e0ff      	b.n	8016dae <tcp_input+0x722>
 8016bae:	bf00      	nop
 8016bb0:	24004338 	.word	0x24004338
 8016bb4:	240048f0 	.word	0x240048f0
 8016bb8:	08021e54 	.word	0x08021e54
 8016bbc:	08021fa0 	.word	0x08021fa0
 8016bc0:	08021ec0 	.word	0x08021ec0
 8016bc4:	240079d8 	.word	0x240079d8
 8016bc8:	08021fcc 	.word	0x08021fcc
 8016bcc:	240079e8 	.word	0x240079e8
 8016bd0:	08021ff8 	.word	0x08021ff8
 8016bd4:	240079e0 	.word	0x240079e0
 8016bd8:	24004328 	.word	0x24004328
 8016bdc:	24004358 	.word	0x24004358
 8016be0:	24004355 	.word	0x24004355
 8016be4:	24004350 	.word	0x24004350
 8016be8:	24004354 	.word	0x24004354
 8016bec:	24004352 	.word	0x24004352
      }
    }
    tcp_input_pcb = pcb;
 8016bf0:	4a9c      	ldr	r2, [pc, #624]	; (8016e64 <tcp_input+0x7d8>)
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016bf6:	69f8      	ldr	r0, [r7, #28]
 8016bf8:	f000 fb0a 	bl	8017210 <tcp_process>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016c00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c04:	f113 0f0d 	cmn.w	r3, #13
 8016c08:	f000 80d3 	beq.w	8016db2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8016c0c:	4b96      	ldr	r3, [pc, #600]	; (8016e68 <tcp_input+0x7dc>)
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	f003 0308 	and.w	r3, r3, #8
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d015      	beq.n	8016c44 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d008      	beq.n	8016c34 <tcp_input+0x5a8>
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c28:	69fa      	ldr	r2, [r7, #28]
 8016c2a:	6912      	ldr	r2, [r2, #16]
 8016c2c:	f06f 010d 	mvn.w	r1, #13
 8016c30:	4610      	mov	r0, r2
 8016c32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c34:	69f9      	ldr	r1, [r7, #28]
 8016c36:	488d      	ldr	r0, [pc, #564]	; (8016e6c <tcp_input+0x7e0>)
 8016c38:	f7ff fbb0 	bl	801639c <tcp_pcb_remove>
        tcp_free(pcb);
 8016c3c:	69f8      	ldr	r0, [r7, #28]
 8016c3e:	f7fd fecb 	bl	80149d8 <tcp_free>
 8016c42:	e0c1      	b.n	8016dc8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8016c44:	2300      	movs	r3, #0
 8016c46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016c48:	4b89      	ldr	r3, [pc, #548]	; (8016e70 <tcp_input+0x7e4>)
 8016c4a:	881b      	ldrh	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d01d      	beq.n	8016c8c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016c50:	4b87      	ldr	r3, [pc, #540]	; (8016e70 <tcp_input+0x7e4>)
 8016c52:	881b      	ldrh	r3, [r3, #0]
 8016c54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016c56:	69fb      	ldr	r3, [r7, #28]
 8016c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d00a      	beq.n	8016c76 <tcp_input+0x5ea>
 8016c60:	69fb      	ldr	r3, [r7, #28]
 8016c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c66:	69fa      	ldr	r2, [r7, #28]
 8016c68:	6910      	ldr	r0, [r2, #16]
 8016c6a:	89fa      	ldrh	r2, [r7, #14]
 8016c6c:	69f9      	ldr	r1, [r7, #28]
 8016c6e:	4798      	blx	r3
 8016c70:	4603      	mov	r3, r0
 8016c72:	74fb      	strb	r3, [r7, #19]
 8016c74:	e001      	b.n	8016c7a <tcp_input+0x5ee>
 8016c76:	2300      	movs	r3, #0
 8016c78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016c7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c7e:	f113 0f0d 	cmn.w	r3, #13
 8016c82:	f000 8098 	beq.w	8016db6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016c86:	4b7a      	ldr	r3, [pc, #488]	; (8016e70 <tcp_input+0x7e4>)
 8016c88:	2200      	movs	r2, #0
 8016c8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016c8c:	69f8      	ldr	r0, [r7, #28]
 8016c8e:	f000 f907 	bl	8016ea0 <tcp_input_delayed_close>
 8016c92:	4603      	mov	r3, r0
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f040 8090 	bne.w	8016dba <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016c9a:	4b76      	ldr	r3, [pc, #472]	; (8016e74 <tcp_input+0x7e8>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d041      	beq.n	8016d26 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016ca2:	69fb      	ldr	r3, [r7, #28]
 8016ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d006      	beq.n	8016cb8 <tcp_input+0x62c>
 8016caa:	4b73      	ldr	r3, [pc, #460]	; (8016e78 <tcp_input+0x7ec>)
 8016cac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016cb0:	4972      	ldr	r1, [pc, #456]	; (8016e7c <tcp_input+0x7f0>)
 8016cb2:	4873      	ldr	r0, [pc, #460]	; (8016e80 <tcp_input+0x7f4>)
 8016cb4:	f005 fb9e 	bl	801c3f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	8b5b      	ldrh	r3, [r3, #26]
 8016cbc:	f003 0310 	and.w	r3, r3, #16
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d008      	beq.n	8016cd6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016cc4:	4b6b      	ldr	r3, [pc, #428]	; (8016e74 <tcp_input+0x7e8>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7fd f9e7 	bl	801409c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016cce:	69f8      	ldr	r0, [r7, #28]
 8016cd0:	f7fe f9c6 	bl	8015060 <tcp_abort>
            goto aborted;
 8016cd4:	e078      	b.n	8016dc8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d00c      	beq.n	8016cfa <tcp_input+0x66e>
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016ce6:	69fb      	ldr	r3, [r7, #28]
 8016ce8:	6918      	ldr	r0, [r3, #16]
 8016cea:	4b62      	ldr	r3, [pc, #392]	; (8016e74 <tcp_input+0x7e8>)
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	2300      	movs	r3, #0
 8016cf0:	69f9      	ldr	r1, [r7, #28]
 8016cf2:	47a0      	blx	r4
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	74fb      	strb	r3, [r7, #19]
 8016cf8:	e008      	b.n	8016d0c <tcp_input+0x680>
 8016cfa:	4b5e      	ldr	r3, [pc, #376]	; (8016e74 <tcp_input+0x7e8>)
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	2300      	movs	r3, #0
 8016d00:	69f9      	ldr	r1, [r7, #28]
 8016d02:	2000      	movs	r0, #0
 8016d04:	f7ff f884 	bl	8015e10 <tcp_recv_null>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016d0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d10:	f113 0f0d 	cmn.w	r3, #13
 8016d14:	d053      	beq.n	8016dbe <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016d16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d003      	beq.n	8016d26 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016d1e:	4b55      	ldr	r3, [pc, #340]	; (8016e74 <tcp_input+0x7e8>)
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016d26:	4b50      	ldr	r3, [pc, #320]	; (8016e68 <tcp_input+0x7dc>)
 8016d28:	781b      	ldrb	r3, [r3, #0]
 8016d2a:	f003 0320 	and.w	r3, r3, #32
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d030      	beq.n	8016d94 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d009      	beq.n	8016d4e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d3e:	7b5a      	ldrb	r2, [r3, #13]
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d44:	f042 0220 	orr.w	r2, r2, #32
 8016d48:	b2d2      	uxtb	r2, r2
 8016d4a:	735a      	strb	r2, [r3, #13]
 8016d4c:	e022      	b.n	8016d94 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016d4e:	69fb      	ldr	r3, [r7, #28]
 8016d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d56:	d005      	beq.n	8016d64 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d00b      	beq.n	8016d86 <tcp_input+0x6fa>
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	6918      	ldr	r0, [r3, #16]
 8016d78:	2300      	movs	r3, #0
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	69f9      	ldr	r1, [r7, #28]
 8016d7e:	47a0      	blx	r4
 8016d80:	4603      	mov	r3, r0
 8016d82:	74fb      	strb	r3, [r7, #19]
 8016d84:	e001      	b.n	8016d8a <tcp_input+0x6fe>
 8016d86:	2300      	movs	r3, #0
 8016d88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d8e:	f113 0f0d 	cmn.w	r3, #13
 8016d92:	d016      	beq.n	8016dc2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016d94:	4b33      	ldr	r3, [pc, #204]	; (8016e64 <tcp_input+0x7d8>)
 8016d96:	2200      	movs	r2, #0
 8016d98:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016d9a:	69f8      	ldr	r0, [r7, #28]
 8016d9c:	f000 f880 	bl	8016ea0 <tcp_input_delayed_close>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d10f      	bne.n	8016dc6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016da6:	69f8      	ldr	r0, [r7, #28]
 8016da8:	f002 ff10 	bl	8019bcc <tcp_output>
 8016dac:	e00c      	b.n	8016dc8 <tcp_input+0x73c>
        goto aborted;
 8016dae:	bf00      	nop
 8016db0:	e00a      	b.n	8016dc8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016db2:	bf00      	nop
 8016db4:	e008      	b.n	8016dc8 <tcp_input+0x73c>
              goto aborted;
 8016db6:	bf00      	nop
 8016db8:	e006      	b.n	8016dc8 <tcp_input+0x73c>
          goto aborted;
 8016dba:	bf00      	nop
 8016dbc:	e004      	b.n	8016dc8 <tcp_input+0x73c>
            goto aborted;
 8016dbe:	bf00      	nop
 8016dc0:	e002      	b.n	8016dc8 <tcp_input+0x73c>
              goto aborted;
 8016dc2:	bf00      	nop
 8016dc4:	e000      	b.n	8016dc8 <tcp_input+0x73c>
          goto aborted;
 8016dc6:	bf00      	nop
    tcp_input_pcb = NULL;
 8016dc8:	4b26      	ldr	r3, [pc, #152]	; (8016e64 <tcp_input+0x7d8>)
 8016dca:	2200      	movs	r2, #0
 8016dcc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016dce:	4b29      	ldr	r3, [pc, #164]	; (8016e74 <tcp_input+0x7e8>)
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016dd4:	4b2b      	ldr	r3, [pc, #172]	; (8016e84 <tcp_input+0x7f8>)
 8016dd6:	685b      	ldr	r3, [r3, #4]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d03f      	beq.n	8016e5c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016ddc:	4b29      	ldr	r3, [pc, #164]	; (8016e84 <tcp_input+0x7f8>)
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7fd f95b 	bl	801409c <pbuf_free>
      inseg.p = NULL;
 8016de6:	4b27      	ldr	r3, [pc, #156]	; (8016e84 <tcp_input+0x7f8>)
 8016de8:	2200      	movs	r2, #0
 8016dea:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016dec:	e036      	b.n	8016e5c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016dee:	4b26      	ldr	r3, [pc, #152]	; (8016e88 <tcp_input+0x7fc>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	899b      	ldrh	r3, [r3, #12]
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7f7 fa0c 	bl	800e214 <lwip_htons>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	b2db      	uxtb	r3, r3
 8016e00:	f003 0304 	and.w	r3, r3, #4
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d118      	bne.n	8016e3a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e08:	4b20      	ldr	r3, [pc, #128]	; (8016e8c <tcp_input+0x800>)
 8016e0a:	6819      	ldr	r1, [r3, #0]
 8016e0c:	4b20      	ldr	r3, [pc, #128]	; (8016e90 <tcp_input+0x804>)
 8016e0e:	881b      	ldrh	r3, [r3, #0]
 8016e10:	461a      	mov	r2, r3
 8016e12:	4b20      	ldr	r3, [pc, #128]	; (8016e94 <tcp_input+0x808>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e18:	4b1b      	ldr	r3, [pc, #108]	; (8016e88 <tcp_input+0x7fc>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e1c:	885b      	ldrh	r3, [r3, #2]
 8016e1e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e20:	4a19      	ldr	r2, [pc, #100]	; (8016e88 <tcp_input+0x7fc>)
 8016e22:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e24:	8812      	ldrh	r2, [r2, #0]
 8016e26:	b292      	uxth	r2, r2
 8016e28:	9202      	str	r2, [sp, #8]
 8016e2a:	9301      	str	r3, [sp, #4]
 8016e2c:	4b1a      	ldr	r3, [pc, #104]	; (8016e98 <tcp_input+0x80c>)
 8016e2e:	9300      	str	r3, [sp, #0]
 8016e30:	4b1a      	ldr	r3, [pc, #104]	; (8016e9c <tcp_input+0x810>)
 8016e32:	4602      	mov	r2, r0
 8016e34:	2000      	movs	r0, #0
 8016e36:	f003 fc7d 	bl	801a734 <tcp_rst>
    pbuf_free(p);
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7fd f92e 	bl	801409c <pbuf_free>
  return;
 8016e40:	e00c      	b.n	8016e5c <tcp_input+0x7d0>
    goto dropped;
 8016e42:	bf00      	nop
 8016e44:	e006      	b.n	8016e54 <tcp_input+0x7c8>
    goto dropped;
 8016e46:	bf00      	nop
 8016e48:	e004      	b.n	8016e54 <tcp_input+0x7c8>
    goto dropped;
 8016e4a:	bf00      	nop
 8016e4c:	e002      	b.n	8016e54 <tcp_input+0x7c8>
      goto dropped;
 8016e4e:	bf00      	nop
 8016e50:	e000      	b.n	8016e54 <tcp_input+0x7c8>
      goto dropped;
 8016e52:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7fd f921 	bl	801409c <pbuf_free>
 8016e5a:	e000      	b.n	8016e5e <tcp_input+0x7d2>
  return;
 8016e5c:	bf00      	nop
}
 8016e5e:	3724      	adds	r7, #36	; 0x24
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd90      	pop	{r4, r7, pc}
 8016e64:	240079ec 	.word	0x240079ec
 8016e68:	24004355 	.word	0x24004355
 8016e6c:	240079d8 	.word	0x240079d8
 8016e70:	24004350 	.word	0x24004350
 8016e74:	24004358 	.word	0x24004358
 8016e78:	08021e54 	.word	0x08021e54
 8016e7c:	08022028 	.word	0x08022028
 8016e80:	08021ec0 	.word	0x08021ec0
 8016e84:	24004328 	.word	0x24004328
 8016e88:	24004338 	.word	0x24004338
 8016e8c:	2400434c 	.word	0x2400434c
 8016e90:	24004352 	.word	0x24004352
 8016e94:	24004348 	.word	0x24004348
 8016e98:	24004900 	.word	0x24004900
 8016e9c:	24004904 	.word	0x24004904

08016ea0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d106      	bne.n	8016ebc <tcp_input_delayed_close+0x1c>
 8016eae:	4b17      	ldr	r3, [pc, #92]	; (8016f0c <tcp_input_delayed_close+0x6c>)
 8016eb0:	f240 225a 	movw	r2, #602	; 0x25a
 8016eb4:	4916      	ldr	r1, [pc, #88]	; (8016f10 <tcp_input_delayed_close+0x70>)
 8016eb6:	4817      	ldr	r0, [pc, #92]	; (8016f14 <tcp_input_delayed_close+0x74>)
 8016eb8:	f005 fa9c 	bl	801c3f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016ebc:	4b16      	ldr	r3, [pc, #88]	; (8016f18 <tcp_input_delayed_close+0x78>)
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	f003 0310 	and.w	r3, r3, #16
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d01c      	beq.n	8016f02 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	8b5b      	ldrh	r3, [r3, #26]
 8016ecc:	f003 0310 	and.w	r3, r3, #16
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d10d      	bne.n	8016ef0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d008      	beq.n	8016ef0 <tcp_input_delayed_close+0x50>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ee4:	687a      	ldr	r2, [r7, #4]
 8016ee6:	6912      	ldr	r2, [r2, #16]
 8016ee8:	f06f 010e 	mvn.w	r1, #14
 8016eec:	4610      	mov	r0, r2
 8016eee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016ef0:	6879      	ldr	r1, [r7, #4]
 8016ef2:	480a      	ldr	r0, [pc, #40]	; (8016f1c <tcp_input_delayed_close+0x7c>)
 8016ef4:	f7ff fa52 	bl	801639c <tcp_pcb_remove>
    tcp_free(pcb);
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f7fd fd6d 	bl	80149d8 <tcp_free>
    return 1;
 8016efe:	2301      	movs	r3, #1
 8016f00:	e000      	b.n	8016f04 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016f02:	2300      	movs	r3, #0
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	08021e54 	.word	0x08021e54
 8016f10:	08022044 	.word	0x08022044
 8016f14:	08021ec0 	.word	0x08021ec0
 8016f18:	24004355 	.word	0x24004355
 8016f1c:	240079d8 	.word	0x240079d8

08016f20 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016f20:	b590      	push	{r4, r7, lr}
 8016f22:	b08b      	sub	sp, #44	; 0x2c
 8016f24:	af04      	add	r7, sp, #16
 8016f26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016f28:	4b6f      	ldr	r3, [pc, #444]	; (80170e8 <tcp_listen_input+0x1c8>)
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	f003 0304 	and.w	r3, r3, #4
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	f040 80d2 	bne.w	80170da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d106      	bne.n	8016f4a <tcp_listen_input+0x2a>
 8016f3c:	4b6b      	ldr	r3, [pc, #428]	; (80170ec <tcp_listen_input+0x1cc>)
 8016f3e:	f240 2281 	movw	r2, #641	; 0x281
 8016f42:	496b      	ldr	r1, [pc, #428]	; (80170f0 <tcp_listen_input+0x1d0>)
 8016f44:	486b      	ldr	r0, [pc, #428]	; (80170f4 <tcp_listen_input+0x1d4>)
 8016f46:	f005 fa55 	bl	801c3f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016f4a:	4b67      	ldr	r3, [pc, #412]	; (80170e8 <tcp_listen_input+0x1c8>)
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	f003 0310 	and.w	r3, r3, #16
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d019      	beq.n	8016f8a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f56:	4b68      	ldr	r3, [pc, #416]	; (80170f8 <tcp_listen_input+0x1d8>)
 8016f58:	6819      	ldr	r1, [r3, #0]
 8016f5a:	4b68      	ldr	r3, [pc, #416]	; (80170fc <tcp_listen_input+0x1dc>)
 8016f5c:	881b      	ldrh	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	4b67      	ldr	r3, [pc, #412]	; (8017100 <tcp_listen_input+0x1e0>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f66:	4b67      	ldr	r3, [pc, #412]	; (8017104 <tcp_listen_input+0x1e4>)
 8016f68:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f6a:	885b      	ldrh	r3, [r3, #2]
 8016f6c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f6e:	4a65      	ldr	r2, [pc, #404]	; (8017104 <tcp_listen_input+0x1e4>)
 8016f70:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f72:	8812      	ldrh	r2, [r2, #0]
 8016f74:	b292      	uxth	r2, r2
 8016f76:	9202      	str	r2, [sp, #8]
 8016f78:	9301      	str	r3, [sp, #4]
 8016f7a:	4b63      	ldr	r3, [pc, #396]	; (8017108 <tcp_listen_input+0x1e8>)
 8016f7c:	9300      	str	r3, [sp, #0]
 8016f7e:	4b63      	ldr	r3, [pc, #396]	; (801710c <tcp_listen_input+0x1ec>)
 8016f80:	4602      	mov	r2, r0
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f003 fbd6 	bl	801a734 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016f88:	e0a9      	b.n	80170de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016f8a:	4b57      	ldr	r3, [pc, #348]	; (80170e8 <tcp_listen_input+0x1c8>)
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	f003 0302 	and.w	r3, r3, #2
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	f000 80a3 	beq.w	80170de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	7d5b      	ldrb	r3, [r3, #21]
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7ff f85b 	bl	8016058 <tcp_alloc>
 8016fa2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016fa4:	697b      	ldr	r3, [r7, #20]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d111      	bne.n	8016fce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	699b      	ldr	r3, [r3, #24]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d00a      	beq.n	8016fc8 <tcp_listen_input+0xa8>
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	699b      	ldr	r3, [r3, #24]
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	6910      	ldr	r0, [r2, #16]
 8016fba:	f04f 32ff 	mov.w	r2, #4294967295
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	4798      	blx	r3
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	73bb      	strb	r3, [r7, #14]
      return;
 8016fc6:	e08b      	b.n	80170e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016fc8:	23f0      	movs	r3, #240	; 0xf0
 8016fca:	73bb      	strb	r3, [r7, #14]
      return;
 8016fcc:	e088      	b.n	80170e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016fce:	4b50      	ldr	r3, [pc, #320]	; (8017110 <tcp_listen_input+0x1f0>)
 8016fd0:	695a      	ldr	r2, [r3, #20]
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016fd6:	4b4e      	ldr	r3, [pc, #312]	; (8017110 <tcp_listen_input+0x1f0>)
 8016fd8:	691a      	ldr	r2, [r3, #16]
 8016fda:	697b      	ldr	r3, [r7, #20]
 8016fdc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	8ada      	ldrh	r2, [r3, #22]
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016fe6:	4b47      	ldr	r3, [pc, #284]	; (8017104 <tcp_listen_input+0x1e4>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	881b      	ldrh	r3, [r3, #0]
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	2203      	movs	r2, #3
 8016ff6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016ff8:	4b41      	ldr	r3, [pc, #260]	; (8017100 <tcp_listen_input+0x1e0>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	1c5a      	adds	r2, r3, #1
 8016ffe:	697b      	ldr	r3, [r7, #20]
 8017000:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801700a:	6978      	ldr	r0, [r7, #20]
 801700c:	f7ff fa5a 	bl	80164c4 <tcp_next_iss>
 8017010:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	693a      	ldr	r2, [r7, #16]
 8017016:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	693a      	ldr	r2, [r7, #16]
 801701c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	693a      	ldr	r2, [r7, #16]
 8017022:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	693a      	ldr	r2, [r7, #16]
 8017028:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801702a:	4b35      	ldr	r3, [pc, #212]	; (8017100 <tcp_listen_input+0x1e0>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	1e5a      	subs	r2, r3, #1
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	691a      	ldr	r2, [r3, #16]
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	7a5b      	ldrb	r3, [r3, #9]
 8017046:	f003 030c 	and.w	r3, r3, #12
 801704a:	b2da      	uxtb	r2, r3
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	7a1a      	ldrb	r2, [r3, #8]
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017058:	4b2e      	ldr	r3, [pc, #184]	; (8017114 <tcp_listen_input+0x1f4>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	60da      	str	r2, [r3, #12]
 8017060:	4a2c      	ldr	r2, [pc, #176]	; (8017114 <tcp_listen_input+0x1f4>)
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	6013      	str	r3, [r2, #0]
 8017066:	f003 fedf 	bl	801ae28 <tcp_timer_needed>
 801706a:	4b2b      	ldr	r3, [pc, #172]	; (8017118 <tcp_listen_input+0x1f8>)
 801706c:	2201      	movs	r2, #1
 801706e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017070:	6978      	ldr	r0, [r7, #20]
 8017072:	f001 fd8d 	bl	8018b90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017076:	4b23      	ldr	r3, [pc, #140]	; (8017104 <tcp_listen_input+0x1e4>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	89db      	ldrh	r3, [r3, #14]
 801707c:	b29a      	uxth	r2, r3
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017094:	697b      	ldr	r3, [r7, #20]
 8017096:	3304      	adds	r3, #4
 8017098:	4618      	mov	r0, r3
 801709a:	f7fa fa73 	bl	8011584 <ip4_route>
 801709e:	4601      	mov	r1, r0
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	3304      	adds	r3, #4
 80170a4:	461a      	mov	r2, r3
 80170a6:	4620      	mov	r0, r4
 80170a8:	f7ff fa32 	bl	8016510 <tcp_eff_send_mss_netif>
 80170ac:	4603      	mov	r3, r0
 80170ae:	461a      	mov	r2, r3
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80170b4:	2112      	movs	r1, #18
 80170b6:	6978      	ldr	r0, [r7, #20]
 80170b8:	f002 fc9a 	bl	80199f0 <tcp_enqueue_flags>
 80170bc:	4603      	mov	r3, r0
 80170be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80170c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d004      	beq.n	80170d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80170c8:	2100      	movs	r1, #0
 80170ca:	6978      	ldr	r0, [r7, #20]
 80170cc:	f7fd ff0a 	bl	8014ee4 <tcp_abandon>
      return;
 80170d0:	e006      	b.n	80170e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80170d2:	6978      	ldr	r0, [r7, #20]
 80170d4:	f002 fd7a 	bl	8019bcc <tcp_output>
  return;
 80170d8:	e001      	b.n	80170de <tcp_listen_input+0x1be>
    return;
 80170da:	bf00      	nop
 80170dc:	e000      	b.n	80170e0 <tcp_listen_input+0x1c0>
  return;
 80170de:	bf00      	nop
}
 80170e0:	371c      	adds	r7, #28
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd90      	pop	{r4, r7, pc}
 80170e6:	bf00      	nop
 80170e8:	24004354 	.word	0x24004354
 80170ec:	08021e54 	.word	0x08021e54
 80170f0:	0802206c 	.word	0x0802206c
 80170f4:	08021ec0 	.word	0x08021ec0
 80170f8:	2400434c 	.word	0x2400434c
 80170fc:	24004352 	.word	0x24004352
 8017100:	24004348 	.word	0x24004348
 8017104:	24004338 	.word	0x24004338
 8017108:	24004900 	.word	0x24004900
 801710c:	24004904 	.word	0x24004904
 8017110:	240048f0 	.word	0x240048f0
 8017114:	240079d8 	.word	0x240079d8
 8017118:	240079d4 	.word	0x240079d4

0801711c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b086      	sub	sp, #24
 8017120:	af04      	add	r7, sp, #16
 8017122:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017124:	4b2f      	ldr	r3, [pc, #188]	; (80171e4 <tcp_timewait_input+0xc8>)
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	f003 0304 	and.w	r3, r3, #4
 801712c:	2b00      	cmp	r3, #0
 801712e:	d153      	bne.n	80171d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d106      	bne.n	8017144 <tcp_timewait_input+0x28>
 8017136:	4b2c      	ldr	r3, [pc, #176]	; (80171e8 <tcp_timewait_input+0xcc>)
 8017138:	f240 22ee 	movw	r2, #750	; 0x2ee
 801713c:	492b      	ldr	r1, [pc, #172]	; (80171ec <tcp_timewait_input+0xd0>)
 801713e:	482c      	ldr	r0, [pc, #176]	; (80171f0 <tcp_timewait_input+0xd4>)
 8017140:	f005 f958 	bl	801c3f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017144:	4b27      	ldr	r3, [pc, #156]	; (80171e4 <tcp_timewait_input+0xc8>)
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	f003 0302 	and.w	r3, r3, #2
 801714c:	2b00      	cmp	r3, #0
 801714e:	d02a      	beq.n	80171a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017150:	4b28      	ldr	r3, [pc, #160]	; (80171f4 <tcp_timewait_input+0xd8>)
 8017152:	681a      	ldr	r2, [r3, #0]
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	2b00      	cmp	r3, #0
 801715c:	db2d      	blt.n	80171ba <tcp_timewait_input+0x9e>
 801715e:	4b25      	ldr	r3, [pc, #148]	; (80171f4 <tcp_timewait_input+0xd8>)
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017166:	6879      	ldr	r1, [r7, #4]
 8017168:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801716a:	440b      	add	r3, r1
 801716c:	1ad3      	subs	r3, r2, r3
 801716e:	2b00      	cmp	r3, #0
 8017170:	dc23      	bgt.n	80171ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017172:	4b21      	ldr	r3, [pc, #132]	; (80171f8 <tcp_timewait_input+0xdc>)
 8017174:	6819      	ldr	r1, [r3, #0]
 8017176:	4b21      	ldr	r3, [pc, #132]	; (80171fc <tcp_timewait_input+0xe0>)
 8017178:	881b      	ldrh	r3, [r3, #0]
 801717a:	461a      	mov	r2, r3
 801717c:	4b1d      	ldr	r3, [pc, #116]	; (80171f4 <tcp_timewait_input+0xd8>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017182:	4b1f      	ldr	r3, [pc, #124]	; (8017200 <tcp_timewait_input+0xe4>)
 8017184:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017186:	885b      	ldrh	r3, [r3, #2]
 8017188:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801718a:	4a1d      	ldr	r2, [pc, #116]	; (8017200 <tcp_timewait_input+0xe4>)
 801718c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801718e:	8812      	ldrh	r2, [r2, #0]
 8017190:	b292      	uxth	r2, r2
 8017192:	9202      	str	r2, [sp, #8]
 8017194:	9301      	str	r3, [sp, #4]
 8017196:	4b1b      	ldr	r3, [pc, #108]	; (8017204 <tcp_timewait_input+0xe8>)
 8017198:	9300      	str	r3, [sp, #0]
 801719a:	4b1b      	ldr	r3, [pc, #108]	; (8017208 <tcp_timewait_input+0xec>)
 801719c:	4602      	mov	r2, r0
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f003 fac8 	bl	801a734 <tcp_rst>
      return;
 80171a4:	e01b      	b.n	80171de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80171a6:	4b0f      	ldr	r3, [pc, #60]	; (80171e4 <tcp_timewait_input+0xc8>)
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	f003 0301 	and.w	r3, r3, #1
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d003      	beq.n	80171ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80171b2:	4b16      	ldr	r3, [pc, #88]	; (801720c <tcp_timewait_input+0xf0>)
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80171ba:	4b10      	ldr	r3, [pc, #64]	; (80171fc <tcp_timewait_input+0xe0>)
 80171bc:	881b      	ldrh	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d00c      	beq.n	80171dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	8b5b      	ldrh	r3, [r3, #26]
 80171c6:	f043 0302 	orr.w	r3, r3, #2
 80171ca:	b29a      	uxth	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f002 fcfb 	bl	8019bcc <tcp_output>
  }
  return;
 80171d6:	e001      	b.n	80171dc <tcp_timewait_input+0xc0>
    return;
 80171d8:	bf00      	nop
 80171da:	e000      	b.n	80171de <tcp_timewait_input+0xc2>
  return;
 80171dc:	bf00      	nop
}
 80171de:	3708      	adds	r7, #8
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	24004354 	.word	0x24004354
 80171e8:	08021e54 	.word	0x08021e54
 80171ec:	0802208c 	.word	0x0802208c
 80171f0:	08021ec0 	.word	0x08021ec0
 80171f4:	24004348 	.word	0x24004348
 80171f8:	2400434c 	.word	0x2400434c
 80171fc:	24004352 	.word	0x24004352
 8017200:	24004338 	.word	0x24004338
 8017204:	24004900 	.word	0x24004900
 8017208:	24004904 	.word	0x24004904
 801720c:	240079dc 	.word	0x240079dc

08017210 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017210:	b590      	push	{r4, r7, lr}
 8017212:	b08d      	sub	sp, #52	; 0x34
 8017214:	af04      	add	r7, sp, #16
 8017216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017218:	2300      	movs	r3, #0
 801721a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801721c:	2300      	movs	r3, #0
 801721e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d106      	bne.n	8017234 <tcp_process+0x24>
 8017226:	4ba5      	ldr	r3, [pc, #660]	; (80174bc <tcp_process+0x2ac>)
 8017228:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801722c:	49a4      	ldr	r1, [pc, #656]	; (80174c0 <tcp_process+0x2b0>)
 801722e:	48a5      	ldr	r0, [pc, #660]	; (80174c4 <tcp_process+0x2b4>)
 8017230:	f005 f8e0 	bl	801c3f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017234:	4ba4      	ldr	r3, [pc, #656]	; (80174c8 <tcp_process+0x2b8>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	f003 0304 	and.w	r3, r3, #4
 801723c:	2b00      	cmp	r3, #0
 801723e:	d04e      	beq.n	80172de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	7d1b      	ldrb	r3, [r3, #20]
 8017244:	2b02      	cmp	r3, #2
 8017246:	d108      	bne.n	801725a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801724c:	4b9f      	ldr	r3, [pc, #636]	; (80174cc <tcp_process+0x2bc>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	429a      	cmp	r2, r3
 8017252:	d123      	bne.n	801729c <tcp_process+0x8c>
        acceptable = 1;
 8017254:	2301      	movs	r3, #1
 8017256:	76fb      	strb	r3, [r7, #27]
 8017258:	e020      	b.n	801729c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801725e:	4b9c      	ldr	r3, [pc, #624]	; (80174d0 <tcp_process+0x2c0>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	429a      	cmp	r2, r3
 8017264:	d102      	bne.n	801726c <tcp_process+0x5c>
        acceptable = 1;
 8017266:	2301      	movs	r3, #1
 8017268:	76fb      	strb	r3, [r7, #27]
 801726a:	e017      	b.n	801729c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801726c:	4b98      	ldr	r3, [pc, #608]	; (80174d0 <tcp_process+0x2c0>)
 801726e:	681a      	ldr	r2, [r3, #0]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017274:	1ad3      	subs	r3, r2, r3
 8017276:	2b00      	cmp	r3, #0
 8017278:	db10      	blt.n	801729c <tcp_process+0x8c>
 801727a:	4b95      	ldr	r3, [pc, #596]	; (80174d0 <tcp_process+0x2c0>)
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017282:	6879      	ldr	r1, [r7, #4]
 8017284:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017286:	440b      	add	r3, r1
 8017288:	1ad3      	subs	r3, r2, r3
 801728a:	2b00      	cmp	r3, #0
 801728c:	dc06      	bgt.n	801729c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	8b5b      	ldrh	r3, [r3, #26]
 8017292:	f043 0302 	orr.w	r3, r3, #2
 8017296:	b29a      	uxth	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801729c:	7efb      	ldrb	r3, [r7, #27]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d01b      	beq.n	80172da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	7d1b      	ldrb	r3, [r3, #20]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d106      	bne.n	80172b8 <tcp_process+0xa8>
 80172aa:	4b84      	ldr	r3, [pc, #528]	; (80174bc <tcp_process+0x2ac>)
 80172ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 80172b0:	4988      	ldr	r1, [pc, #544]	; (80174d4 <tcp_process+0x2c4>)
 80172b2:	4884      	ldr	r0, [pc, #528]	; (80174c4 <tcp_process+0x2b4>)
 80172b4:	f005 f89e 	bl	801c3f4 <iprintf>
      recv_flags |= TF_RESET;
 80172b8:	4b87      	ldr	r3, [pc, #540]	; (80174d8 <tcp_process+0x2c8>)
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	f043 0308 	orr.w	r3, r3, #8
 80172c0:	b2da      	uxtb	r2, r3
 80172c2:	4b85      	ldr	r3, [pc, #532]	; (80174d8 <tcp_process+0x2c8>)
 80172c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	8b5b      	ldrh	r3, [r3, #26]
 80172ca:	f023 0301 	bic.w	r3, r3, #1
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80172d4:	f06f 030d 	mvn.w	r3, #13
 80172d8:	e37a      	b.n	80179d0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80172da:	2300      	movs	r3, #0
 80172dc:	e378      	b.n	80179d0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80172de:	4b7a      	ldr	r3, [pc, #488]	; (80174c8 <tcp_process+0x2b8>)
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	f003 0302 	and.w	r3, r3, #2
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d010      	beq.n	801730c <tcp_process+0xfc>
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	7d1b      	ldrb	r3, [r3, #20]
 80172ee:	2b02      	cmp	r3, #2
 80172f0:	d00c      	beq.n	801730c <tcp_process+0xfc>
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	7d1b      	ldrb	r3, [r3, #20]
 80172f6:	2b03      	cmp	r3, #3
 80172f8:	d008      	beq.n	801730c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	8b5b      	ldrh	r3, [r3, #26]
 80172fe:	f043 0302 	orr.w	r3, r3, #2
 8017302:	b29a      	uxth	r2, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017308:	2300      	movs	r3, #0
 801730a:	e361      	b.n	80179d0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	8b5b      	ldrh	r3, [r3, #26]
 8017310:	f003 0310 	and.w	r3, r3, #16
 8017314:	2b00      	cmp	r3, #0
 8017316:	d103      	bne.n	8017320 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017318:	4b70      	ldr	r3, [pc, #448]	; (80174dc <tcp_process+0x2cc>)
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2200      	movs	r2, #0
 8017324:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2200      	movs	r2, #0
 801732c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f001 fc2d 	bl	8018b90 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	7d1b      	ldrb	r3, [r3, #20]
 801733a:	3b02      	subs	r3, #2
 801733c:	2b07      	cmp	r3, #7
 801733e:	f200 8337 	bhi.w	80179b0 <tcp_process+0x7a0>
 8017342:	a201      	add	r2, pc, #4	; (adr r2, 8017348 <tcp_process+0x138>)
 8017344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017348:	08017369 	.word	0x08017369
 801734c:	08017599 	.word	0x08017599
 8017350:	08017711 	.word	0x08017711
 8017354:	0801773b 	.word	0x0801773b
 8017358:	0801785f 	.word	0x0801785f
 801735c:	08017711 	.word	0x08017711
 8017360:	080178eb 	.word	0x080178eb
 8017364:	0801797b 	.word	0x0801797b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017368:	4b57      	ldr	r3, [pc, #348]	; (80174c8 <tcp_process+0x2b8>)
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	f003 0310 	and.w	r3, r3, #16
 8017370:	2b00      	cmp	r3, #0
 8017372:	f000 80e4 	beq.w	801753e <tcp_process+0x32e>
 8017376:	4b54      	ldr	r3, [pc, #336]	; (80174c8 <tcp_process+0x2b8>)
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	f003 0302 	and.w	r3, r3, #2
 801737e:	2b00      	cmp	r3, #0
 8017380:	f000 80dd 	beq.w	801753e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017388:	1c5a      	adds	r2, r3, #1
 801738a:	4b50      	ldr	r3, [pc, #320]	; (80174cc <tcp_process+0x2bc>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	429a      	cmp	r2, r3
 8017390:	f040 80d5 	bne.w	801753e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017394:	4b4e      	ldr	r3, [pc, #312]	; (80174d0 <tcp_process+0x2c0>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	1c5a      	adds	r2, r3, #1
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80173a6:	4b49      	ldr	r3, [pc, #292]	; (80174cc <tcp_process+0x2bc>)
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80173ae:	4b4c      	ldr	r3, [pc, #304]	; (80174e0 <tcp_process+0x2d0>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	89db      	ldrh	r3, [r3, #14]
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80173c8:	4b41      	ldr	r3, [pc, #260]	; (80174d0 <tcp_process+0x2c0>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	1e5a      	subs	r2, r3, #1
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2204      	movs	r2, #4
 80173d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	3304      	adds	r3, #4
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7fa f8cf 	bl	8011584 <ip4_route>
 80173e6:	4601      	mov	r1, r0
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	3304      	adds	r3, #4
 80173ec:	461a      	mov	r2, r3
 80173ee:	4620      	mov	r0, r4
 80173f0:	f7ff f88e 	bl	8016510 <tcp_eff_send_mss_netif>
 80173f4:	4603      	mov	r3, r0
 80173f6:	461a      	mov	r2, r3
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017400:	009a      	lsls	r2, r3, #2
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017406:	005b      	lsls	r3, r3, #1
 8017408:	f241 111c 	movw	r1, #4380	; 0x111c
 801740c:	428b      	cmp	r3, r1
 801740e:	bf38      	it	cc
 8017410:	460b      	movcc	r3, r1
 8017412:	429a      	cmp	r2, r3
 8017414:	d204      	bcs.n	8017420 <tcp_process+0x210>
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801741a:	009b      	lsls	r3, r3, #2
 801741c:	b29b      	uxth	r3, r3
 801741e:	e00d      	b.n	801743c <tcp_process+0x22c>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017424:	005b      	lsls	r3, r3, #1
 8017426:	f241 121c 	movw	r2, #4380	; 0x111c
 801742a:	4293      	cmp	r3, r2
 801742c:	d904      	bls.n	8017438 <tcp_process+0x228>
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017432:	005b      	lsls	r3, r3, #1
 8017434:	b29b      	uxth	r3, r3
 8017436:	e001      	b.n	801743c <tcp_process+0x22c>
 8017438:	f241 131c 	movw	r3, #4380	; 0x111c
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017448:	2b00      	cmp	r3, #0
 801744a:	d106      	bne.n	801745a <tcp_process+0x24a>
 801744c:	4b1b      	ldr	r3, [pc, #108]	; (80174bc <tcp_process+0x2ac>)
 801744e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017452:	4924      	ldr	r1, [pc, #144]	; (80174e4 <tcp_process+0x2d4>)
 8017454:	481b      	ldr	r0, [pc, #108]	; (80174c4 <tcp_process+0x2b4>)
 8017456:	f004 ffcd 	bl	801c3f4 <iprintf>
        --pcb->snd_queuelen;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017460:	3b01      	subs	r3, #1
 8017462:	b29a      	uxth	r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801746e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d111      	bne.n	801749a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801747a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d106      	bne.n	8017490 <tcp_process+0x280>
 8017482:	4b0e      	ldr	r3, [pc, #56]	; (80174bc <tcp_process+0x2ac>)
 8017484:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017488:	4917      	ldr	r1, [pc, #92]	; (80174e8 <tcp_process+0x2d8>)
 801748a:	480e      	ldr	r0, [pc, #56]	; (80174c4 <tcp_process+0x2b4>)
 801748c:	f004 ffb2 	bl	801c3f4 <iprintf>
          pcb->unsent = rseg->next;
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	66da      	str	r2, [r3, #108]	; 0x6c
 8017498:	e003      	b.n	80174a2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80174a2:	69f8      	ldr	r0, [r7, #28]
 80174a4:	f7fe fc6f 	bl	8015d86 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d11d      	bne.n	80174ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174b6:	861a      	strh	r2, [r3, #48]	; 0x30
 80174b8:	e01f      	b.n	80174fa <tcp_process+0x2ea>
 80174ba:	bf00      	nop
 80174bc:	08021e54 	.word	0x08021e54
 80174c0:	080220ac 	.word	0x080220ac
 80174c4:	08021ec0 	.word	0x08021ec0
 80174c8:	24004354 	.word	0x24004354
 80174cc:	2400434c 	.word	0x2400434c
 80174d0:	24004348 	.word	0x24004348
 80174d4:	080220c8 	.word	0x080220c8
 80174d8:	24004355 	.word	0x24004355
 80174dc:	240079dc 	.word	0x240079dc
 80174e0:	24004338 	.word	0x24004338
 80174e4:	080220e8 	.word	0x080220e8
 80174e8:	08022100 	.word	0x08022100
        } else {
          pcb->rtime = 0;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2200      	movs	r2, #0
 80174f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2200      	movs	r2, #0
 80174f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017500:	2b00      	cmp	r3, #0
 8017502:	d00a      	beq.n	801751a <tcp_process+0x30a>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	6910      	ldr	r0, [r2, #16]
 801750e:	2200      	movs	r2, #0
 8017510:	6879      	ldr	r1, [r7, #4]
 8017512:	4798      	blx	r3
 8017514:	4603      	mov	r3, r0
 8017516:	76bb      	strb	r3, [r7, #26]
 8017518:	e001      	b.n	801751e <tcp_process+0x30e>
 801751a:	2300      	movs	r3, #0
 801751c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801751e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017522:	f113 0f0d 	cmn.w	r3, #13
 8017526:	d102      	bne.n	801752e <tcp_process+0x31e>
          return ERR_ABRT;
 8017528:	f06f 030c 	mvn.w	r3, #12
 801752c:	e250      	b.n	80179d0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	8b5b      	ldrh	r3, [r3, #26]
 8017532:	f043 0302 	orr.w	r3, r3, #2
 8017536:	b29a      	uxth	r2, r3
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801753c:	e23a      	b.n	80179b4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801753e:	4b9d      	ldr	r3, [pc, #628]	; (80177b4 <tcp_process+0x5a4>)
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	f003 0310 	and.w	r3, r3, #16
 8017546:	2b00      	cmp	r3, #0
 8017548:	f000 8234 	beq.w	80179b4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801754c:	4b9a      	ldr	r3, [pc, #616]	; (80177b8 <tcp_process+0x5a8>)
 801754e:	6819      	ldr	r1, [r3, #0]
 8017550:	4b9a      	ldr	r3, [pc, #616]	; (80177bc <tcp_process+0x5ac>)
 8017552:	881b      	ldrh	r3, [r3, #0]
 8017554:	461a      	mov	r2, r3
 8017556:	4b9a      	ldr	r3, [pc, #616]	; (80177c0 <tcp_process+0x5b0>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801755c:	4b99      	ldr	r3, [pc, #612]	; (80177c4 <tcp_process+0x5b4>)
 801755e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017560:	885b      	ldrh	r3, [r3, #2]
 8017562:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017564:	4a97      	ldr	r2, [pc, #604]	; (80177c4 <tcp_process+0x5b4>)
 8017566:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017568:	8812      	ldrh	r2, [r2, #0]
 801756a:	b292      	uxth	r2, r2
 801756c:	9202      	str	r2, [sp, #8]
 801756e:	9301      	str	r3, [sp, #4]
 8017570:	4b95      	ldr	r3, [pc, #596]	; (80177c8 <tcp_process+0x5b8>)
 8017572:	9300      	str	r3, [sp, #0]
 8017574:	4b95      	ldr	r3, [pc, #596]	; (80177cc <tcp_process+0x5bc>)
 8017576:	4602      	mov	r2, r0
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f003 f8db 	bl	801a734 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017584:	2b05      	cmp	r3, #5
 8017586:	f200 8215 	bhi.w	80179b4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2200      	movs	r2, #0
 801758e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017590:	6878      	ldr	r0, [r7, #4]
 8017592:	f002 fea5 	bl	801a2e0 <tcp_rexmit_rto>
      break;
 8017596:	e20d      	b.n	80179b4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017598:	4b86      	ldr	r3, [pc, #536]	; (80177b4 <tcp_process+0x5a4>)
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	f003 0310 	and.w	r3, r3, #16
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	f000 80a1 	beq.w	80176e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175a6:	4b84      	ldr	r3, [pc, #528]	; (80177b8 <tcp_process+0x5a8>)
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175ae:	1ad3      	subs	r3, r2, r3
 80175b0:	3b01      	subs	r3, #1
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	db7e      	blt.n	80176b4 <tcp_process+0x4a4>
 80175b6:	4b80      	ldr	r3, [pc, #512]	; (80177b8 <tcp_process+0x5a8>)
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80175be:	1ad3      	subs	r3, r2, r3
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	dc77      	bgt.n	80176b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2204      	movs	r2, #4
 80175c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d102      	bne.n	80175d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80175d2:	23fa      	movs	r3, #250	; 0xfa
 80175d4:	76bb      	strb	r3, [r7, #26]
 80175d6:	e01d      	b.n	8017614 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175dc:	699b      	ldr	r3, [r3, #24]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d106      	bne.n	80175f0 <tcp_process+0x3e0>
 80175e2:	4b7b      	ldr	r3, [pc, #492]	; (80177d0 <tcp_process+0x5c0>)
 80175e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80175e8:	497a      	ldr	r1, [pc, #488]	; (80177d4 <tcp_process+0x5c4>)
 80175ea:	487b      	ldr	r0, [pc, #492]	; (80177d8 <tcp_process+0x5c8>)
 80175ec:	f004 ff02 	bl	801c3f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d00a      	beq.n	8017610 <tcp_process+0x400>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175fe:	699b      	ldr	r3, [r3, #24]
 8017600:	687a      	ldr	r2, [r7, #4]
 8017602:	6910      	ldr	r0, [r2, #16]
 8017604:	2200      	movs	r2, #0
 8017606:	6879      	ldr	r1, [r7, #4]
 8017608:	4798      	blx	r3
 801760a:	4603      	mov	r3, r0
 801760c:	76bb      	strb	r3, [r7, #26]
 801760e:	e001      	b.n	8017614 <tcp_process+0x404>
 8017610:	23f0      	movs	r3, #240	; 0xf0
 8017612:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017614:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d00a      	beq.n	8017632 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801761c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017620:	f113 0f0d 	cmn.w	r3, #13
 8017624:	d002      	beq.n	801762c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f7fd fd1a 	bl	8015060 <tcp_abort>
            }
            return ERR_ABRT;
 801762c:	f06f 030c 	mvn.w	r3, #12
 8017630:	e1ce      	b.n	80179d0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f000 fae0 	bl	8017bf8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017638:	4b68      	ldr	r3, [pc, #416]	; (80177dc <tcp_process+0x5cc>)
 801763a:	881b      	ldrh	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d005      	beq.n	801764c <tcp_process+0x43c>
            recv_acked--;
 8017640:	4b66      	ldr	r3, [pc, #408]	; (80177dc <tcp_process+0x5cc>)
 8017642:	881b      	ldrh	r3, [r3, #0]
 8017644:	3b01      	subs	r3, #1
 8017646:	b29a      	uxth	r2, r3
 8017648:	4b64      	ldr	r3, [pc, #400]	; (80177dc <tcp_process+0x5cc>)
 801764a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017650:	009a      	lsls	r2, r3, #2
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017656:	005b      	lsls	r3, r3, #1
 8017658:	f241 111c 	movw	r1, #4380	; 0x111c
 801765c:	428b      	cmp	r3, r1
 801765e:	bf38      	it	cc
 8017660:	460b      	movcc	r3, r1
 8017662:	429a      	cmp	r2, r3
 8017664:	d204      	bcs.n	8017670 <tcp_process+0x460>
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801766a:	009b      	lsls	r3, r3, #2
 801766c:	b29b      	uxth	r3, r3
 801766e:	e00d      	b.n	801768c <tcp_process+0x47c>
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017674:	005b      	lsls	r3, r3, #1
 8017676:	f241 121c 	movw	r2, #4380	; 0x111c
 801767a:	4293      	cmp	r3, r2
 801767c:	d904      	bls.n	8017688 <tcp_process+0x478>
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017682:	005b      	lsls	r3, r3, #1
 8017684:	b29b      	uxth	r3, r3
 8017686:	e001      	b.n	801768c <tcp_process+0x47c>
 8017688:	f241 131c 	movw	r3, #4380	; 0x111c
 801768c:	687a      	ldr	r2, [r7, #4]
 801768e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017692:	4b53      	ldr	r3, [pc, #332]	; (80177e0 <tcp_process+0x5d0>)
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	f003 0320 	and.w	r3, r3, #32
 801769a:	2b00      	cmp	r3, #0
 801769c:	d037      	beq.n	801770e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	8b5b      	ldrh	r3, [r3, #26]
 80176a2:	f043 0302 	orr.w	r3, r3, #2
 80176a6:	b29a      	uxth	r2, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2207      	movs	r2, #7
 80176b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80176b2:	e02c      	b.n	801770e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176b4:	4b40      	ldr	r3, [pc, #256]	; (80177b8 <tcp_process+0x5a8>)
 80176b6:	6819      	ldr	r1, [r3, #0]
 80176b8:	4b40      	ldr	r3, [pc, #256]	; (80177bc <tcp_process+0x5ac>)
 80176ba:	881b      	ldrh	r3, [r3, #0]
 80176bc:	461a      	mov	r2, r3
 80176be:	4b40      	ldr	r3, [pc, #256]	; (80177c0 <tcp_process+0x5b0>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176c4:	4b3f      	ldr	r3, [pc, #252]	; (80177c4 <tcp_process+0x5b4>)
 80176c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176c8:	885b      	ldrh	r3, [r3, #2]
 80176ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176cc:	4a3d      	ldr	r2, [pc, #244]	; (80177c4 <tcp_process+0x5b4>)
 80176ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176d0:	8812      	ldrh	r2, [r2, #0]
 80176d2:	b292      	uxth	r2, r2
 80176d4:	9202      	str	r2, [sp, #8]
 80176d6:	9301      	str	r3, [sp, #4]
 80176d8:	4b3b      	ldr	r3, [pc, #236]	; (80177c8 <tcp_process+0x5b8>)
 80176da:	9300      	str	r3, [sp, #0]
 80176dc:	4b3b      	ldr	r3, [pc, #236]	; (80177cc <tcp_process+0x5bc>)
 80176de:	4602      	mov	r2, r0
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f003 f827 	bl	801a734 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80176e6:	e167      	b.n	80179b8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80176e8:	4b32      	ldr	r3, [pc, #200]	; (80177b4 <tcp_process+0x5a4>)
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	f003 0302 	and.w	r3, r3, #2
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	f000 8161 	beq.w	80179b8 <tcp_process+0x7a8>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176fa:	1e5a      	subs	r2, r3, #1
 80176fc:	4b30      	ldr	r3, [pc, #192]	; (80177c0 <tcp_process+0x5b0>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	f040 8159 	bne.w	80179b8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f002 fe0c 	bl	801a324 <tcp_rexmit>
      break;
 801770c:	e154      	b.n	80179b8 <tcp_process+0x7a8>
 801770e:	e153      	b.n	80179b8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f000 fa71 	bl	8017bf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017716:	4b32      	ldr	r3, [pc, #200]	; (80177e0 <tcp_process+0x5d0>)
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	f003 0320 	and.w	r3, r3, #32
 801771e:	2b00      	cmp	r3, #0
 8017720:	f000 814c 	beq.w	80179bc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	8b5b      	ldrh	r3, [r3, #26]
 8017728:	f043 0302 	orr.w	r3, r3, #2
 801772c:	b29a      	uxth	r2, r3
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2207      	movs	r2, #7
 8017736:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017738:	e140      	b.n	80179bc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f000 fa5c 	bl	8017bf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017740:	4b27      	ldr	r3, [pc, #156]	; (80177e0 <tcp_process+0x5d0>)
 8017742:	781b      	ldrb	r3, [r3, #0]
 8017744:	f003 0320 	and.w	r3, r3, #32
 8017748:	2b00      	cmp	r3, #0
 801774a:	d071      	beq.n	8017830 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801774c:	4b19      	ldr	r3, [pc, #100]	; (80177b4 <tcp_process+0x5a4>)
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f003 0310 	and.w	r3, r3, #16
 8017754:	2b00      	cmp	r3, #0
 8017756:	d060      	beq.n	801781a <tcp_process+0x60a>
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801775c:	4b16      	ldr	r3, [pc, #88]	; (80177b8 <tcp_process+0x5a8>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	429a      	cmp	r2, r3
 8017762:	d15a      	bne.n	801781a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017768:	2b00      	cmp	r3, #0
 801776a:	d156      	bne.n	801781a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	8b5b      	ldrh	r3, [r3, #26]
 8017770:	f043 0302 	orr.w	r3, r3, #2
 8017774:	b29a      	uxth	r2, r3
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f7fe fdbe 	bl	80162fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017780:	4b18      	ldr	r3, [pc, #96]	; (80177e4 <tcp_process+0x5d4>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	429a      	cmp	r2, r3
 8017788:	d105      	bne.n	8017796 <tcp_process+0x586>
 801778a:	4b16      	ldr	r3, [pc, #88]	; (80177e4 <tcp_process+0x5d4>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	68db      	ldr	r3, [r3, #12]
 8017790:	4a14      	ldr	r2, [pc, #80]	; (80177e4 <tcp_process+0x5d4>)
 8017792:	6013      	str	r3, [r2, #0]
 8017794:	e02e      	b.n	80177f4 <tcp_process+0x5e4>
 8017796:	4b13      	ldr	r3, [pc, #76]	; (80177e4 <tcp_process+0x5d4>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	617b      	str	r3, [r7, #20]
 801779c:	e027      	b.n	80177ee <tcp_process+0x5de>
 801779e:	697b      	ldr	r3, [r7, #20]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d11f      	bne.n	80177e8 <tcp_process+0x5d8>
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	68da      	ldr	r2, [r3, #12]
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	60da      	str	r2, [r3, #12]
 80177b0:	e020      	b.n	80177f4 <tcp_process+0x5e4>
 80177b2:	bf00      	nop
 80177b4:	24004354 	.word	0x24004354
 80177b8:	2400434c 	.word	0x2400434c
 80177bc:	24004352 	.word	0x24004352
 80177c0:	24004348 	.word	0x24004348
 80177c4:	24004338 	.word	0x24004338
 80177c8:	24004900 	.word	0x24004900
 80177cc:	24004904 	.word	0x24004904
 80177d0:	08021e54 	.word	0x08021e54
 80177d4:	08022114 	.word	0x08022114
 80177d8:	08021ec0 	.word	0x08021ec0
 80177dc:	24004350 	.word	0x24004350
 80177e0:	24004355 	.word	0x24004355
 80177e4:	240079d8 	.word	0x240079d8
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	617b      	str	r3, [r7, #20]
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d1d4      	bne.n	801779e <tcp_process+0x58e>
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2200      	movs	r2, #0
 80177f8:	60da      	str	r2, [r3, #12]
 80177fa:	4b77      	ldr	r3, [pc, #476]	; (80179d8 <tcp_process+0x7c8>)
 80177fc:	2201      	movs	r2, #1
 80177fe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	220a      	movs	r2, #10
 8017804:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017806:	4b75      	ldr	r3, [pc, #468]	; (80179dc <tcp_process+0x7cc>)
 8017808:	681a      	ldr	r2, [r3, #0]
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	60da      	str	r2, [r3, #12]
 801780e:	4a73      	ldr	r2, [pc, #460]	; (80179dc <tcp_process+0x7cc>)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6013      	str	r3, [r2, #0]
 8017814:	f003 fb08 	bl	801ae28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017818:	e0d2      	b.n	80179c0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	8b5b      	ldrh	r3, [r3, #26]
 801781e:	f043 0302 	orr.w	r3, r3, #2
 8017822:	b29a      	uxth	r2, r3
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2208      	movs	r2, #8
 801782c:	751a      	strb	r2, [r3, #20]
      break;
 801782e:	e0c7      	b.n	80179c0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017830:	4b6b      	ldr	r3, [pc, #428]	; (80179e0 <tcp_process+0x7d0>)
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	f003 0310 	and.w	r3, r3, #16
 8017838:	2b00      	cmp	r3, #0
 801783a:	f000 80c1 	beq.w	80179c0 <tcp_process+0x7b0>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017842:	4b68      	ldr	r3, [pc, #416]	; (80179e4 <tcp_process+0x7d4>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	429a      	cmp	r2, r3
 8017848:	f040 80ba 	bne.w	80179c0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017850:	2b00      	cmp	r3, #0
 8017852:	f040 80b5 	bne.w	80179c0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2206      	movs	r2, #6
 801785a:	751a      	strb	r2, [r3, #20]
      break;
 801785c:	e0b0      	b.n	80179c0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f000 f9ca 	bl	8017bf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017864:	4b60      	ldr	r3, [pc, #384]	; (80179e8 <tcp_process+0x7d8>)
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	f003 0320 	and.w	r3, r3, #32
 801786c:	2b00      	cmp	r3, #0
 801786e:	f000 80a9 	beq.w	80179c4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	8b5b      	ldrh	r3, [r3, #26]
 8017876:	f043 0302 	orr.w	r3, r3, #2
 801787a:	b29a      	uxth	r2, r3
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f7fe fd3b 	bl	80162fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017886:	4b59      	ldr	r3, [pc, #356]	; (80179ec <tcp_process+0x7dc>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	429a      	cmp	r2, r3
 801788e:	d105      	bne.n	801789c <tcp_process+0x68c>
 8017890:	4b56      	ldr	r3, [pc, #344]	; (80179ec <tcp_process+0x7dc>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	68db      	ldr	r3, [r3, #12]
 8017896:	4a55      	ldr	r2, [pc, #340]	; (80179ec <tcp_process+0x7dc>)
 8017898:	6013      	str	r3, [r2, #0]
 801789a:	e013      	b.n	80178c4 <tcp_process+0x6b4>
 801789c:	4b53      	ldr	r3, [pc, #332]	; (80179ec <tcp_process+0x7dc>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	613b      	str	r3, [r7, #16]
 80178a2:	e00c      	b.n	80178be <tcp_process+0x6ae>
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	68db      	ldr	r3, [r3, #12]
 80178a8:	687a      	ldr	r2, [r7, #4]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d104      	bne.n	80178b8 <tcp_process+0x6a8>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	68da      	ldr	r2, [r3, #12]
 80178b2:	693b      	ldr	r3, [r7, #16]
 80178b4:	60da      	str	r2, [r3, #12]
 80178b6:	e005      	b.n	80178c4 <tcp_process+0x6b4>
 80178b8:	693b      	ldr	r3, [r7, #16]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	613b      	str	r3, [r7, #16]
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d1ef      	bne.n	80178a4 <tcp_process+0x694>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2200      	movs	r2, #0
 80178c8:	60da      	str	r2, [r3, #12]
 80178ca:	4b43      	ldr	r3, [pc, #268]	; (80179d8 <tcp_process+0x7c8>)
 80178cc:	2201      	movs	r2, #1
 80178ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	220a      	movs	r2, #10
 80178d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80178d6:	4b41      	ldr	r3, [pc, #260]	; (80179dc <tcp_process+0x7cc>)
 80178d8:	681a      	ldr	r2, [r3, #0]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	60da      	str	r2, [r3, #12]
 80178de:	4a3f      	ldr	r2, [pc, #252]	; (80179dc <tcp_process+0x7cc>)
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6013      	str	r3, [r2, #0]
 80178e4:	f003 faa0 	bl	801ae28 <tcp_timer_needed>
      }
      break;
 80178e8:	e06c      	b.n	80179c4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f000 f984 	bl	8017bf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80178f0:	4b3b      	ldr	r3, [pc, #236]	; (80179e0 <tcp_process+0x7d0>)
 80178f2:	781b      	ldrb	r3, [r3, #0]
 80178f4:	f003 0310 	and.w	r3, r3, #16
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d065      	beq.n	80179c8 <tcp_process+0x7b8>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017900:	4b38      	ldr	r3, [pc, #224]	; (80179e4 <tcp_process+0x7d4>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	429a      	cmp	r2, r3
 8017906:	d15f      	bne.n	80179c8 <tcp_process+0x7b8>
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801790c:	2b00      	cmp	r3, #0
 801790e:	d15b      	bne.n	80179c8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f7fe fcf3 	bl	80162fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017916:	4b35      	ldr	r3, [pc, #212]	; (80179ec <tcp_process+0x7dc>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	687a      	ldr	r2, [r7, #4]
 801791c:	429a      	cmp	r2, r3
 801791e:	d105      	bne.n	801792c <tcp_process+0x71c>
 8017920:	4b32      	ldr	r3, [pc, #200]	; (80179ec <tcp_process+0x7dc>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	68db      	ldr	r3, [r3, #12]
 8017926:	4a31      	ldr	r2, [pc, #196]	; (80179ec <tcp_process+0x7dc>)
 8017928:	6013      	str	r3, [r2, #0]
 801792a:	e013      	b.n	8017954 <tcp_process+0x744>
 801792c:	4b2f      	ldr	r3, [pc, #188]	; (80179ec <tcp_process+0x7dc>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	60fb      	str	r3, [r7, #12]
 8017932:	e00c      	b.n	801794e <tcp_process+0x73e>
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	68db      	ldr	r3, [r3, #12]
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	429a      	cmp	r2, r3
 801793c:	d104      	bne.n	8017948 <tcp_process+0x738>
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	68da      	ldr	r2, [r3, #12]
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	60da      	str	r2, [r3, #12]
 8017946:	e005      	b.n	8017954 <tcp_process+0x744>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	68db      	ldr	r3, [r3, #12]
 801794c:	60fb      	str	r3, [r7, #12]
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d1ef      	bne.n	8017934 <tcp_process+0x724>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2200      	movs	r2, #0
 8017958:	60da      	str	r2, [r3, #12]
 801795a:	4b1f      	ldr	r3, [pc, #124]	; (80179d8 <tcp_process+0x7c8>)
 801795c:	2201      	movs	r2, #1
 801795e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	220a      	movs	r2, #10
 8017964:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017966:	4b1d      	ldr	r3, [pc, #116]	; (80179dc <tcp_process+0x7cc>)
 8017968:	681a      	ldr	r2, [r3, #0]
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	60da      	str	r2, [r3, #12]
 801796e:	4a1b      	ldr	r2, [pc, #108]	; (80179dc <tcp_process+0x7cc>)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6013      	str	r3, [r2, #0]
 8017974:	f003 fa58 	bl	801ae28 <tcp_timer_needed>
      }
      break;
 8017978:	e026      	b.n	80179c8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 f93c 	bl	8017bf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017980:	4b17      	ldr	r3, [pc, #92]	; (80179e0 <tcp_process+0x7d0>)
 8017982:	781b      	ldrb	r3, [r3, #0]
 8017984:	f003 0310 	and.w	r3, r3, #16
 8017988:	2b00      	cmp	r3, #0
 801798a:	d01f      	beq.n	80179cc <tcp_process+0x7bc>
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017990:	4b14      	ldr	r3, [pc, #80]	; (80179e4 <tcp_process+0x7d4>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	429a      	cmp	r2, r3
 8017996:	d119      	bne.n	80179cc <tcp_process+0x7bc>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801799c:	2b00      	cmp	r3, #0
 801799e:	d115      	bne.n	80179cc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80179a0:	4b11      	ldr	r3, [pc, #68]	; (80179e8 <tcp_process+0x7d8>)
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	f043 0310 	orr.w	r3, r3, #16
 80179a8:	b2da      	uxtb	r2, r3
 80179aa:	4b0f      	ldr	r3, [pc, #60]	; (80179e8 <tcp_process+0x7d8>)
 80179ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80179ae:	e00d      	b.n	80179cc <tcp_process+0x7bc>
    default:
      break;
 80179b0:	bf00      	nop
 80179b2:	e00c      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179b4:	bf00      	nop
 80179b6:	e00a      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179b8:	bf00      	nop
 80179ba:	e008      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179bc:	bf00      	nop
 80179be:	e006      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179c0:	bf00      	nop
 80179c2:	e004      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179c4:	bf00      	nop
 80179c6:	e002      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179c8:	bf00      	nop
 80179ca:	e000      	b.n	80179ce <tcp_process+0x7be>
      break;
 80179cc:	bf00      	nop
  }
  return ERR_OK;
 80179ce:	2300      	movs	r3, #0
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3724      	adds	r7, #36	; 0x24
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd90      	pop	{r4, r7, pc}
 80179d8:	240079d4 	.word	0x240079d4
 80179dc:	240079e8 	.word	0x240079e8
 80179e0:	24004354 	.word	0x24004354
 80179e4:	2400434c 	.word	0x2400434c
 80179e8:	24004355 	.word	0x24004355
 80179ec:	240079d8 	.word	0x240079d8

080179f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80179f0:	b590      	push	{r4, r7, lr}
 80179f2:	b085      	sub	sp, #20
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d106      	bne.n	8017a0e <tcp_oos_insert_segment+0x1e>
 8017a00:	4b3b      	ldr	r3, [pc, #236]	; (8017af0 <tcp_oos_insert_segment+0x100>)
 8017a02:	f240 421f 	movw	r2, #1055	; 0x41f
 8017a06:	493b      	ldr	r1, [pc, #236]	; (8017af4 <tcp_oos_insert_segment+0x104>)
 8017a08:	483b      	ldr	r0, [pc, #236]	; (8017af8 <tcp_oos_insert_segment+0x108>)
 8017a0a:	f004 fcf3 	bl	801c3f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	899b      	ldrh	r3, [r3, #12]
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f6 fbfc 	bl	800e214 <lwip_htons>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d028      	beq.n	8017a7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017a28:	6838      	ldr	r0, [r7, #0]
 8017a2a:	f7fe f997 	bl	8015d5c <tcp_segs_free>
    next = NULL;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	603b      	str	r3, [r7, #0]
 8017a32:	e056      	b.n	8017ae2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017a34:	683b      	ldr	r3, [r7, #0]
 8017a36:	68db      	ldr	r3, [r3, #12]
 8017a38:	899b      	ldrh	r3, [r3, #12]
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f6 fbe9 	bl	800e214 <lwip_htons>
 8017a42:	4603      	mov	r3, r0
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	f003 0301 	and.w	r3, r3, #1
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d00d      	beq.n	8017a6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	68db      	ldr	r3, [r3, #12]
 8017a52:	899b      	ldrh	r3, [r3, #12]
 8017a54:	b29c      	uxth	r4, r3
 8017a56:	2001      	movs	r0, #1
 8017a58:	f7f6 fbdc 	bl	800e214 <lwip_htons>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	461a      	mov	r2, r3
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	4322      	orrs	r2, r4
 8017a66:	b292      	uxth	r2, r2
 8017a68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f7fe f986 	bl	8015d86 <tcp_seg_free>
    while (next &&
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d00e      	beq.n	8017a9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	891b      	ldrh	r3, [r3, #8]
 8017a84:	461a      	mov	r2, r3
 8017a86:	4b1d      	ldr	r3, [pc, #116]	; (8017afc <tcp_oos_insert_segment+0x10c>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	441a      	add	r2, r3
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	68db      	ldr	r3, [r3, #12]
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	6839      	ldr	r1, [r7, #0]
 8017a94:	8909      	ldrh	r1, [r1, #8]
 8017a96:	440b      	add	r3, r1
 8017a98:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	daca      	bge.n	8017a34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d01e      	beq.n	8017ae2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	891b      	ldrh	r3, [r3, #8]
 8017aa8:	461a      	mov	r2, r3
 8017aaa:	4b14      	ldr	r3, [pc, #80]	; (8017afc <tcp_oos_insert_segment+0x10c>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	441a      	add	r2, r3
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dd12      	ble.n	8017ae2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	b29a      	uxth	r2, r3
 8017ac4:	4b0d      	ldr	r3, [pc, #52]	; (8017afc <tcp_oos_insert_segment+0x10c>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	b29b      	uxth	r3, r3
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	b29a      	uxth	r2, r3
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	685a      	ldr	r2, [r3, #4]
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	891b      	ldrh	r3, [r3, #8]
 8017ada:	4619      	mov	r1, r3
 8017adc:	4610      	mov	r0, r2
 8017ade:	f7fc f957 	bl	8013d90 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	683a      	ldr	r2, [r7, #0]
 8017ae6:	601a      	str	r2, [r3, #0]
}
 8017ae8:	bf00      	nop
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd90      	pop	{r4, r7, pc}
 8017af0:	08021e54 	.word	0x08021e54
 8017af4:	08022134 	.word	0x08022134
 8017af8:	08021ec0 	.word	0x08021ec0
 8017afc:	24004348 	.word	0x24004348

08017b00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017b00:	b5b0      	push	{r4, r5, r7, lr}
 8017b02:	b086      	sub	sp, #24
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	60b9      	str	r1, [r7, #8]
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017b0e:	e03e      	b.n	8017b8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017b1a:	697b      	ldr	r3, [r7, #20]
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7fc fb4a 	bl	80141b8 <pbuf_clen>
 8017b24:	4603      	mov	r3, r0
 8017b26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b2e:	8a7a      	ldrh	r2, [r7, #18]
 8017b30:	429a      	cmp	r2, r3
 8017b32:	d906      	bls.n	8017b42 <tcp_free_acked_segments+0x42>
 8017b34:	4b2a      	ldr	r3, [pc, #168]	; (8017be0 <tcp_free_acked_segments+0xe0>)
 8017b36:	f240 4257 	movw	r2, #1111	; 0x457
 8017b3a:	492a      	ldr	r1, [pc, #168]	; (8017be4 <tcp_free_acked_segments+0xe4>)
 8017b3c:	482a      	ldr	r0, [pc, #168]	; (8017be8 <tcp_free_acked_segments+0xe8>)
 8017b3e:	f004 fc59 	bl	801c3f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017b48:	8a7b      	ldrh	r3, [r7, #18]
 8017b4a:	1ad3      	subs	r3, r2, r3
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	891a      	ldrh	r2, [r3, #8]
 8017b58:	4b24      	ldr	r3, [pc, #144]	; (8017bec <tcp_free_acked_segments+0xec>)
 8017b5a:	881b      	ldrh	r3, [r3, #0]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	b29a      	uxth	r2, r3
 8017b60:	4b22      	ldr	r3, [pc, #136]	; (8017bec <tcp_free_acked_segments+0xec>)
 8017b62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017b64:	6978      	ldr	r0, [r7, #20]
 8017b66:	f7fe f90e 	bl	8015d86 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d00c      	beq.n	8017b8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d109      	bne.n	8017b8e <tcp_free_acked_segments+0x8e>
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d106      	bne.n	8017b8e <tcp_free_acked_segments+0x8e>
 8017b80:	4b17      	ldr	r3, [pc, #92]	; (8017be0 <tcp_free_acked_segments+0xe0>)
 8017b82:	f240 4261 	movw	r2, #1121	; 0x461
 8017b86:	491a      	ldr	r1, [pc, #104]	; (8017bf0 <tcp_free_acked_segments+0xf0>)
 8017b88:	4817      	ldr	r0, [pc, #92]	; (8017be8 <tcp_free_acked_segments+0xe8>)
 8017b8a:	f004 fc33 	bl	801c3f4 <iprintf>
  while (seg_list != NULL &&
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d020      	beq.n	8017bd6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	68db      	ldr	r3, [r3, #12]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f6 fb4f 	bl	800e23e <lwip_htonl>
 8017ba0:	4604      	mov	r4, r0
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	891b      	ldrh	r3, [r3, #8]
 8017ba6:	461d      	mov	r5, r3
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	68db      	ldr	r3, [r3, #12]
 8017bac:	899b      	ldrh	r3, [r3, #12]
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7f6 fb2f 	bl	800e214 <lwip_htons>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	b2db      	uxtb	r3, r3
 8017bba:	f003 0303 	and.w	r3, r3, #3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d001      	beq.n	8017bc6 <tcp_free_acked_segments+0xc6>
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	e000      	b.n	8017bc8 <tcp_free_acked_segments+0xc8>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	442b      	add	r3, r5
 8017bca:	18e2      	adds	r2, r4, r3
 8017bcc:	4b09      	ldr	r3, [pc, #36]	; (8017bf4 <tcp_free_acked_segments+0xf4>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	dd9c      	ble.n	8017b10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017bd6:	68bb      	ldr	r3, [r7, #8]
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3718      	adds	r7, #24
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bdb0      	pop	{r4, r5, r7, pc}
 8017be0:	08021e54 	.word	0x08021e54
 8017be4:	0802215c 	.word	0x0802215c
 8017be8:	08021ec0 	.word	0x08021ec0
 8017bec:	24004350 	.word	0x24004350
 8017bf0:	08022184 	.word	0x08022184
 8017bf4:	2400434c 	.word	0x2400434c

08017bf8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017bf8:	b5b0      	push	{r4, r5, r7, lr}
 8017bfa:	b094      	sub	sp, #80	; 0x50
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017c00:	2300      	movs	r3, #0
 8017c02:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d106      	bne.n	8017c18 <tcp_receive+0x20>
 8017c0a:	4ba6      	ldr	r3, [pc, #664]	; (8017ea4 <tcp_receive+0x2ac>)
 8017c0c:	f240 427b 	movw	r2, #1147	; 0x47b
 8017c10:	49a5      	ldr	r1, [pc, #660]	; (8017ea8 <tcp_receive+0x2b0>)
 8017c12:	48a6      	ldr	r0, [pc, #664]	; (8017eac <tcp_receive+0x2b4>)
 8017c14:	f004 fbee 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	7d1b      	ldrb	r3, [r3, #20]
 8017c1c:	2b03      	cmp	r3, #3
 8017c1e:	d806      	bhi.n	8017c2e <tcp_receive+0x36>
 8017c20:	4ba0      	ldr	r3, [pc, #640]	; (8017ea4 <tcp_receive+0x2ac>)
 8017c22:	f240 427c 	movw	r2, #1148	; 0x47c
 8017c26:	49a2      	ldr	r1, [pc, #648]	; (8017eb0 <tcp_receive+0x2b8>)
 8017c28:	48a0      	ldr	r0, [pc, #640]	; (8017eac <tcp_receive+0x2b4>)
 8017c2a:	f004 fbe3 	bl	801c3f4 <iprintf>

  if (flags & TCP_ACK) {
 8017c2e:	4ba1      	ldr	r3, [pc, #644]	; (8017eb4 <tcp_receive+0x2bc>)
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	f003 0310 	and.w	r3, r3, #16
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	f000 8263 	beq.w	8018102 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c42:	461a      	mov	r2, r3
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c48:	4413      	add	r3, r2
 8017c4a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c50:	4b99      	ldr	r3, [pc, #612]	; (8017eb8 <tcp_receive+0x2c0>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	1ad3      	subs	r3, r2, r3
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	db1b      	blt.n	8017c92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c5e:	4b96      	ldr	r3, [pc, #600]	; (8017eb8 <tcp_receive+0x2c0>)
 8017c60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017c62:	429a      	cmp	r2, r3
 8017c64:	d106      	bne.n	8017c74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c6a:	4b94      	ldr	r3, [pc, #592]	; (8017ebc <tcp_receive+0x2c4>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	1ad3      	subs	r3, r2, r3
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	db0e      	blt.n	8017c92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c78:	4b90      	ldr	r3, [pc, #576]	; (8017ebc <tcp_receive+0x2c4>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d125      	bne.n	8017ccc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c80:	4b8f      	ldr	r3, [pc, #572]	; (8017ec0 <tcp_receive+0x2c8>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	89db      	ldrh	r3, [r3, #14]
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d91c      	bls.n	8017ccc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017c92:	4b8b      	ldr	r3, [pc, #556]	; (8017ec0 <tcp_receive+0x2c8>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	89db      	ldrh	r3, [r3, #14]
 8017c98:	b29a      	uxth	r2, r3
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d205      	bcs.n	8017cbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017cbc:	4b7e      	ldr	r3, [pc, #504]	; (8017eb8 <tcp_receive+0x2c0>)
 8017cbe:	681a      	ldr	r2, [r3, #0]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017cc4:	4b7d      	ldr	r3, [pc, #500]	; (8017ebc <tcp_receive+0x2c4>)
 8017cc6:	681a      	ldr	r2, [r3, #0]
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017ccc:	4b7b      	ldr	r3, [pc, #492]	; (8017ebc <tcp_receive+0x2c4>)
 8017cce:	681a      	ldr	r2, [r3, #0]
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd4:	1ad3      	subs	r3, r2, r3
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	dc58      	bgt.n	8017d8c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017cda:	4b7a      	ldr	r3, [pc, #488]	; (8017ec4 <tcp_receive+0x2cc>)
 8017cdc:	881b      	ldrh	r3, [r3, #0]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d14b      	bne.n	8017d7a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017cec:	4413      	add	r3, r2
 8017cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d142      	bne.n	8017d7a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	db3d      	blt.n	8017d7a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017d02:	4b6e      	ldr	r3, [pc, #440]	; (8017ebc <tcp_receive+0x2c4>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	429a      	cmp	r2, r3
 8017d08:	d137      	bne.n	8017d7a <tcp_receive+0x182>
              found_dupack = 1;
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d14:	2bff      	cmp	r3, #255	; 0xff
 8017d16:	d007      	beq.n	8017d28 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d1e:	3301      	adds	r3, #1
 8017d20:	b2da      	uxtb	r2, r3
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d2e:	2b03      	cmp	r3, #3
 8017d30:	d91b      	bls.n	8017d6a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d3c:	4413      	add	r3, r2
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d30a      	bcc.n	8017d60 <tcp_receive+0x168>
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d54:	4413      	add	r3, r2
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017d5e:	e004      	b.n	8017d6a <tcp_receive+0x172>
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d70:	2b02      	cmp	r3, #2
 8017d72:	d902      	bls.n	8017d7a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f002 fb41 	bl	801a3fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f040 8160 	bne.w	8018042 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2200      	movs	r2, #0
 8017d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d8a:	e15a      	b.n	8018042 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d8c:	4b4b      	ldr	r3, [pc, #300]	; (8017ebc <tcp_receive+0x2c4>)
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d94:	1ad3      	subs	r3, r2, r3
 8017d96:	3b01      	subs	r3, #1
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	f2c0 814d 	blt.w	8018038 <tcp_receive+0x440>
 8017d9e:	4b47      	ldr	r3, [pc, #284]	; (8017ebc <tcp_receive+0x2c4>)
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017da6:	1ad3      	subs	r3, r2, r3
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	f300 8145 	bgt.w	8018038 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	8b5b      	ldrh	r3, [r3, #26]
 8017db2:	f003 0304 	and.w	r3, r3, #4
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d010      	beq.n	8017ddc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	8b5b      	ldrh	r3, [r3, #26]
 8017dbe:	f023 0304 	bic.w	r3, r3, #4
 8017dc2:	b29a      	uxth	r2, r3
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2200      	movs	r2, #0
 8017de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017dea:	10db      	asrs	r3, r3, #3
 8017dec:	b21b      	sxth	r3, r3
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017df6:	b29b      	uxth	r3, r3
 8017df8:	4413      	add	r3, r2
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	b21a      	sxth	r2, r3
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017e04:	4b2d      	ldr	r3, [pc, #180]	; (8017ebc <tcp_receive+0x2c4>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	b29a      	uxth	r2, r3
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	1ad3      	subs	r3, r2, r3
 8017e12:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2200      	movs	r2, #0
 8017e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017e1c:	4b27      	ldr	r3, [pc, #156]	; (8017ebc <tcp_receive+0x2c4>)
 8017e1e:	681a      	ldr	r2, [r3, #0]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	7d1b      	ldrb	r3, [r3, #20]
 8017e28:	2b03      	cmp	r3, #3
 8017e2a:	f240 8096 	bls.w	8017f5a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d244      	bcs.n	8017ec8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	8b5b      	ldrh	r3, [r3, #26]
 8017e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d001      	beq.n	8017e4e <tcp_receive+0x256>
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	e000      	b.n	8017e50 <tcp_receive+0x258>
 8017e4e:	2302      	movs	r3, #2
 8017e50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e5e:	fb12 f303 	smulbb	r3, r2, r3
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017e66:	4293      	cmp	r3, r2
 8017e68:	bf28      	it	cs
 8017e6a:	4613      	movcs	r3, r2
 8017e6c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e76:	4413      	add	r3, r2
 8017e78:	b29a      	uxth	r2, r3
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d309      	bcc.n	8017e98 <tcp_receive+0x2a0>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e8c:	4413      	add	r3, r2
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e96:	e060      	b.n	8017f5a <tcp_receive+0x362>
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017ea2:	e05a      	b.n	8017f5a <tcp_receive+0x362>
 8017ea4:	08021e54 	.word	0x08021e54
 8017ea8:	080221a4 	.word	0x080221a4
 8017eac:	08021ec0 	.word	0x08021ec0
 8017eb0:	080221c0 	.word	0x080221c0
 8017eb4:	24004354 	.word	0x24004354
 8017eb8:	24004348 	.word	0x24004348
 8017ebc:	2400434c 	.word	0x2400434c
 8017ec0:	24004338 	.word	0x24004338
 8017ec4:	24004352 	.word	0x24004352
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ece:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ed0:	4413      	add	r3, r2
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d309      	bcc.n	8017ef2 <tcp_receive+0x2fa>
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ee6:	4413      	add	r3, r2
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017ef0:	e004      	b.n	8017efc <tcp_receive+0x304>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d326      	bcc.n	8017f5a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f18:	1ad3      	subs	r3, r2, r3
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f2c:	4413      	add	r3, r2
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d30a      	bcc.n	8017f50 <tcp_receive+0x358>
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f44:	4413      	add	r3, r2
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f4e:	e004      	b.n	8017f5a <tcp_receive+0x362>
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f62:	4a98      	ldr	r2, [pc, #608]	; (80181c4 <tcp_receive+0x5cc>)
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7ff fdcb 	bl	8017b00 <tcp_free_acked_segments>
 8017f6a:	4602      	mov	r2, r0
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f78:	4a93      	ldr	r2, [pc, #588]	; (80181c8 <tcp_receive+0x5d0>)
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7ff fdc0 	bl	8017b00 <tcp_free_acked_segments>
 8017f80:	4602      	mov	r2, r0
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d104      	bne.n	8017f98 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f94:	861a      	strh	r2, [r3, #48]	; 0x30
 8017f96:	e002      	b.n	8017f9e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d103      	bne.n	8017fb4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017fba:	4b84      	ldr	r3, [pc, #528]	; (80181cc <tcp_receive+0x5d4>)
 8017fbc:	881b      	ldrh	r3, [r3, #0]
 8017fbe:	4413      	add	r3, r2
 8017fc0:	b29a      	uxth	r2, r3
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	8b5b      	ldrh	r3, [r3, #26]
 8017fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d035      	beq.n	8018040 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d118      	bne.n	801800e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d00c      	beq.n	8017ffe <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f6 f924 	bl	800e23e <lwip_htonl>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	dc20      	bgt.n	8018040 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	8b5b      	ldrh	r3, [r3, #26]
 8018002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018006:	b29a      	uxth	r2, r3
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801800c:	e018      	b.n	8018040 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018016:	68db      	ldr	r3, [r3, #12]
 8018018:	685b      	ldr	r3, [r3, #4]
 801801a:	4618      	mov	r0, r3
 801801c:	f7f6 f90f 	bl	800e23e <lwip_htonl>
 8018020:	4603      	mov	r3, r0
 8018022:	1ae3      	subs	r3, r4, r3
 8018024:	2b00      	cmp	r3, #0
 8018026:	dc0b      	bgt.n	8018040 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	8b5b      	ldrh	r3, [r3, #26]
 801802c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018030:	b29a      	uxth	r2, r3
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018036:	e003      	b.n	8018040 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f002 fbcd 	bl	801a7d8 <tcp_send_empty_ack>
 801803e:	e000      	b.n	8018042 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018040:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018046:	2b00      	cmp	r3, #0
 8018048:	d05b      	beq.n	8018102 <tcp_receive+0x50a>
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801804e:	4b60      	ldr	r3, [pc, #384]	; (80181d0 <tcp_receive+0x5d8>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	1ad3      	subs	r3, r2, r3
 8018054:	2b00      	cmp	r3, #0
 8018056:	da54      	bge.n	8018102 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018058:	4b5e      	ldr	r3, [pc, #376]	; (80181d4 <tcp_receive+0x5dc>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	b29a      	uxth	r2, r3
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018062:	b29b      	uxth	r3, r3
 8018064:	1ad3      	subs	r3, r2, r3
 8018066:	b29b      	uxth	r3, r3
 8018068:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801806c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018076:	10db      	asrs	r3, r3, #3
 8018078:	b21b      	sxth	r3, r3
 801807a:	b29b      	uxth	r3, r3
 801807c:	1ad3      	subs	r3, r2, r3
 801807e:	b29b      	uxth	r3, r3
 8018080:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801808a:	b29a      	uxth	r2, r3
 801808c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018090:	4413      	add	r3, r2
 8018092:	b29b      	uxth	r3, r3
 8018094:	b21a      	sxth	r2, r3
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801809a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801809e:	2b00      	cmp	r3, #0
 80180a0:	da05      	bge.n	80180ae <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80180a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80180a6:	425b      	negs	r3, r3
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80180ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80180b8:	109b      	asrs	r3, r3, #2
 80180ba:	b21b      	sxth	r3, r3
 80180bc:	b29b      	uxth	r3, r3
 80180be:	1ad3      	subs	r3, r2, r3
 80180c0:	b29b      	uxth	r3, r3
 80180c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80180d2:	4413      	add	r3, r2
 80180d4:	b29b      	uxth	r3, r3
 80180d6:	b21a      	sxth	r2, r3
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80180e2:	10db      	asrs	r3, r3, #3
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	4413      	add	r3, r2
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	b21a      	sxth	r2, r3
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2200      	movs	r2, #0
 8018100:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018102:	4b35      	ldr	r3, [pc, #212]	; (80181d8 <tcp_receive+0x5e0>)
 8018104:	881b      	ldrh	r3, [r3, #0]
 8018106:	2b00      	cmp	r3, #0
 8018108:	f000 84e1 	beq.w	8018ace <tcp_receive+0xed6>
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	7d1b      	ldrb	r3, [r3, #20]
 8018110:	2b06      	cmp	r3, #6
 8018112:	f200 84dc 	bhi.w	8018ace <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801811a:	4b30      	ldr	r3, [pc, #192]	; (80181dc <tcp_receive+0x5e4>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	1ad3      	subs	r3, r2, r3
 8018120:	3b01      	subs	r3, #1
 8018122:	2b00      	cmp	r3, #0
 8018124:	f2c0 808e 	blt.w	8018244 <tcp_receive+0x64c>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801812c:	4b2a      	ldr	r3, [pc, #168]	; (80181d8 <tcp_receive+0x5e0>)
 801812e:	881b      	ldrh	r3, [r3, #0]
 8018130:	4619      	mov	r1, r3
 8018132:	4b2a      	ldr	r3, [pc, #168]	; (80181dc <tcp_receive+0x5e4>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	440b      	add	r3, r1
 8018138:	1ad3      	subs	r3, r2, r3
 801813a:	3301      	adds	r3, #1
 801813c:	2b00      	cmp	r3, #0
 801813e:	f300 8081 	bgt.w	8018244 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018142:	4b27      	ldr	r3, [pc, #156]	; (80181e0 <tcp_receive+0x5e8>)
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801814c:	4b23      	ldr	r3, [pc, #140]	; (80181dc <tcp_receive+0x5e4>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	1ad3      	subs	r3, r2, r3
 8018152:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018154:	4b22      	ldr	r3, [pc, #136]	; (80181e0 <tcp_receive+0x5e8>)
 8018156:	685b      	ldr	r3, [r3, #4]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d106      	bne.n	801816a <tcp_receive+0x572>
 801815c:	4b21      	ldr	r3, [pc, #132]	; (80181e4 <tcp_receive+0x5ec>)
 801815e:	f240 5294 	movw	r2, #1428	; 0x594
 8018162:	4921      	ldr	r1, [pc, #132]	; (80181e8 <tcp_receive+0x5f0>)
 8018164:	4821      	ldr	r0, [pc, #132]	; (80181ec <tcp_receive+0x5f4>)
 8018166:	f004 f945 	bl	801c3f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018170:	4293      	cmp	r3, r2
 8018172:	d906      	bls.n	8018182 <tcp_receive+0x58a>
 8018174:	4b1b      	ldr	r3, [pc, #108]	; (80181e4 <tcp_receive+0x5ec>)
 8018176:	f240 5295 	movw	r2, #1429	; 0x595
 801817a:	491d      	ldr	r1, [pc, #116]	; (80181f0 <tcp_receive+0x5f8>)
 801817c:	481b      	ldr	r0, [pc, #108]	; (80181ec <tcp_receive+0x5f4>)
 801817e:	f004 f939 	bl	801c3f4 <iprintf>
      off = (u16_t)off32;
 8018182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018184:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018188:	4b15      	ldr	r3, [pc, #84]	; (80181e0 <tcp_receive+0x5e8>)
 801818a:	685b      	ldr	r3, [r3, #4]
 801818c:	891b      	ldrh	r3, [r3, #8]
 801818e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018192:	429a      	cmp	r2, r3
 8018194:	d906      	bls.n	80181a4 <tcp_receive+0x5ac>
 8018196:	4b13      	ldr	r3, [pc, #76]	; (80181e4 <tcp_receive+0x5ec>)
 8018198:	f240 5297 	movw	r2, #1431	; 0x597
 801819c:	4915      	ldr	r1, [pc, #84]	; (80181f4 <tcp_receive+0x5fc>)
 801819e:	4813      	ldr	r0, [pc, #76]	; (80181ec <tcp_receive+0x5f4>)
 80181a0:	f004 f928 	bl	801c3f4 <iprintf>
      inseg.len -= off;
 80181a4:	4b0e      	ldr	r3, [pc, #56]	; (80181e0 <tcp_receive+0x5e8>)
 80181a6:	891a      	ldrh	r2, [r3, #8]
 80181a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80181ac:	1ad3      	subs	r3, r2, r3
 80181ae:	b29a      	uxth	r2, r3
 80181b0:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <tcp_receive+0x5e8>)
 80181b2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80181b4:	4b0a      	ldr	r3, [pc, #40]	; (80181e0 <tcp_receive+0x5e8>)
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	891a      	ldrh	r2, [r3, #8]
 80181ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80181be:	1ad3      	subs	r3, r2, r3
 80181c0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80181c2:	e029      	b.n	8018218 <tcp_receive+0x620>
 80181c4:	080221dc 	.word	0x080221dc
 80181c8:	080221e4 	.word	0x080221e4
 80181cc:	24004350 	.word	0x24004350
 80181d0:	2400434c 	.word	0x2400434c
 80181d4:	240079dc 	.word	0x240079dc
 80181d8:	24004352 	.word	0x24004352
 80181dc:	24004348 	.word	0x24004348
 80181e0:	24004328 	.word	0x24004328
 80181e4:	08021e54 	.word	0x08021e54
 80181e8:	080221ec 	.word	0x080221ec
 80181ec:	08021ec0 	.word	0x08021ec0
 80181f0:	080221fc 	.word	0x080221fc
 80181f4:	0802220c 	.word	0x0802220c
        off -= p->len;
 80181f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181fa:	895b      	ldrh	r3, [r3, #10]
 80181fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018200:	1ad3      	subs	r3, r2, r3
 8018202:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018208:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801820a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801820c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801820e:	2200      	movs	r2, #0
 8018210:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801821a:	895b      	ldrh	r3, [r3, #10]
 801821c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018220:	429a      	cmp	r2, r3
 8018222:	d8e9      	bhi.n	80181f8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018228:	4619      	mov	r1, r3
 801822a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801822c:	f7fb feb0 	bl	8013f90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018234:	4a91      	ldr	r2, [pc, #580]	; (801847c <tcp_receive+0x884>)
 8018236:	6013      	str	r3, [r2, #0]
 8018238:	4b91      	ldr	r3, [pc, #580]	; (8018480 <tcp_receive+0x888>)
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	4a8f      	ldr	r2, [pc, #572]	; (801847c <tcp_receive+0x884>)
 801823e:	6812      	ldr	r2, [r2, #0]
 8018240:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018242:	e00d      	b.n	8018260 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018244:	4b8d      	ldr	r3, [pc, #564]	; (801847c <tcp_receive+0x884>)
 8018246:	681a      	ldr	r2, [r3, #0]
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801824c:	1ad3      	subs	r3, r2, r3
 801824e:	2b00      	cmp	r3, #0
 8018250:	da06      	bge.n	8018260 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	8b5b      	ldrh	r3, [r3, #26]
 8018256:	f043 0302 	orr.w	r3, r3, #2
 801825a:	b29a      	uxth	r2, r3
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018260:	4b86      	ldr	r3, [pc, #536]	; (801847c <tcp_receive+0x884>)
 8018262:	681a      	ldr	r2, [r3, #0]
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018268:	1ad3      	subs	r3, r2, r3
 801826a:	2b00      	cmp	r3, #0
 801826c:	f2c0 842a 	blt.w	8018ac4 <tcp_receive+0xecc>
 8018270:	4b82      	ldr	r3, [pc, #520]	; (801847c <tcp_receive+0x884>)
 8018272:	681a      	ldr	r2, [r3, #0]
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018278:	6879      	ldr	r1, [r7, #4]
 801827a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801827c:	440b      	add	r3, r1
 801827e:	1ad3      	subs	r3, r2, r3
 8018280:	3301      	adds	r3, #1
 8018282:	2b00      	cmp	r3, #0
 8018284:	f300 841e 	bgt.w	8018ac4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801828c:	4b7b      	ldr	r3, [pc, #492]	; (801847c <tcp_receive+0x884>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	429a      	cmp	r2, r3
 8018292:	f040 829a 	bne.w	80187ca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018296:	4b7a      	ldr	r3, [pc, #488]	; (8018480 <tcp_receive+0x888>)
 8018298:	891c      	ldrh	r4, [r3, #8]
 801829a:	4b79      	ldr	r3, [pc, #484]	; (8018480 <tcp_receive+0x888>)
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	899b      	ldrh	r3, [r3, #12]
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7f5 ffb6 	bl	800e214 <lwip_htons>
 80182a8:	4603      	mov	r3, r0
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	f003 0303 	and.w	r3, r3, #3
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <tcp_receive+0x6c0>
 80182b4:	2301      	movs	r3, #1
 80182b6:	e000      	b.n	80182ba <tcp_receive+0x6c2>
 80182b8:	2300      	movs	r3, #0
 80182ba:	4423      	add	r3, r4
 80182bc:	b29a      	uxth	r2, r3
 80182be:	4b71      	ldr	r3, [pc, #452]	; (8018484 <tcp_receive+0x88c>)
 80182c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80182c6:	4b6f      	ldr	r3, [pc, #444]	; (8018484 <tcp_receive+0x88c>)
 80182c8:	881b      	ldrh	r3, [r3, #0]
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d275      	bcs.n	80183ba <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80182ce:	4b6c      	ldr	r3, [pc, #432]	; (8018480 <tcp_receive+0x888>)
 80182d0:	68db      	ldr	r3, [r3, #12]
 80182d2:	899b      	ldrh	r3, [r3, #12]
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	4618      	mov	r0, r3
 80182d8:	f7f5 ff9c 	bl	800e214 <lwip_htons>
 80182dc:	4603      	mov	r3, r0
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	f003 0301 	and.w	r3, r3, #1
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d01f      	beq.n	8018328 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80182e8:	4b65      	ldr	r3, [pc, #404]	; (8018480 <tcp_receive+0x888>)
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	899b      	ldrh	r3, [r3, #12]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	b21b      	sxth	r3, r3
 80182f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80182f6:	b21c      	sxth	r4, r3
 80182f8:	4b61      	ldr	r3, [pc, #388]	; (8018480 <tcp_receive+0x888>)
 80182fa:	68db      	ldr	r3, [r3, #12]
 80182fc:	899b      	ldrh	r3, [r3, #12]
 80182fe:	b29b      	uxth	r3, r3
 8018300:	4618      	mov	r0, r3
 8018302:	f7f5 ff87 	bl	800e214 <lwip_htons>
 8018306:	4603      	mov	r3, r0
 8018308:	b2db      	uxtb	r3, r3
 801830a:	b29b      	uxth	r3, r3
 801830c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018310:	b29b      	uxth	r3, r3
 8018312:	4618      	mov	r0, r3
 8018314:	f7f5 ff7e 	bl	800e214 <lwip_htons>
 8018318:	4603      	mov	r3, r0
 801831a:	b21b      	sxth	r3, r3
 801831c:	4323      	orrs	r3, r4
 801831e:	b21a      	sxth	r2, r3
 8018320:	4b57      	ldr	r3, [pc, #348]	; (8018480 <tcp_receive+0x888>)
 8018322:	68db      	ldr	r3, [r3, #12]
 8018324:	b292      	uxth	r2, r2
 8018326:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801832c:	4b54      	ldr	r3, [pc, #336]	; (8018480 <tcp_receive+0x888>)
 801832e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018330:	4b53      	ldr	r3, [pc, #332]	; (8018480 <tcp_receive+0x888>)
 8018332:	68db      	ldr	r3, [r3, #12]
 8018334:	899b      	ldrh	r3, [r3, #12]
 8018336:	b29b      	uxth	r3, r3
 8018338:	4618      	mov	r0, r3
 801833a:	f7f5 ff6b 	bl	800e214 <lwip_htons>
 801833e:	4603      	mov	r3, r0
 8018340:	b2db      	uxtb	r3, r3
 8018342:	f003 0302 	and.w	r3, r3, #2
 8018346:	2b00      	cmp	r3, #0
 8018348:	d005      	beq.n	8018356 <tcp_receive+0x75e>
            inseg.len -= 1;
 801834a:	4b4d      	ldr	r3, [pc, #308]	; (8018480 <tcp_receive+0x888>)
 801834c:	891b      	ldrh	r3, [r3, #8]
 801834e:	3b01      	subs	r3, #1
 8018350:	b29a      	uxth	r2, r3
 8018352:	4b4b      	ldr	r3, [pc, #300]	; (8018480 <tcp_receive+0x888>)
 8018354:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018356:	4b4a      	ldr	r3, [pc, #296]	; (8018480 <tcp_receive+0x888>)
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	4a49      	ldr	r2, [pc, #292]	; (8018480 <tcp_receive+0x888>)
 801835c:	8912      	ldrh	r2, [r2, #8]
 801835e:	4611      	mov	r1, r2
 8018360:	4618      	mov	r0, r3
 8018362:	f7fb fd15 	bl	8013d90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018366:	4b46      	ldr	r3, [pc, #280]	; (8018480 <tcp_receive+0x888>)
 8018368:	891c      	ldrh	r4, [r3, #8]
 801836a:	4b45      	ldr	r3, [pc, #276]	; (8018480 <tcp_receive+0x888>)
 801836c:	68db      	ldr	r3, [r3, #12]
 801836e:	899b      	ldrh	r3, [r3, #12]
 8018370:	b29b      	uxth	r3, r3
 8018372:	4618      	mov	r0, r3
 8018374:	f7f5 ff4e 	bl	800e214 <lwip_htons>
 8018378:	4603      	mov	r3, r0
 801837a:	b2db      	uxtb	r3, r3
 801837c:	f003 0303 	and.w	r3, r3, #3
 8018380:	2b00      	cmp	r3, #0
 8018382:	d001      	beq.n	8018388 <tcp_receive+0x790>
 8018384:	2301      	movs	r3, #1
 8018386:	e000      	b.n	801838a <tcp_receive+0x792>
 8018388:	2300      	movs	r3, #0
 801838a:	4423      	add	r3, r4
 801838c:	b29a      	uxth	r2, r3
 801838e:	4b3d      	ldr	r3, [pc, #244]	; (8018484 <tcp_receive+0x88c>)
 8018390:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018392:	4b3c      	ldr	r3, [pc, #240]	; (8018484 <tcp_receive+0x88c>)
 8018394:	881b      	ldrh	r3, [r3, #0]
 8018396:	461a      	mov	r2, r3
 8018398:	4b38      	ldr	r3, [pc, #224]	; (801847c <tcp_receive+0x884>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	441a      	add	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a2:	6879      	ldr	r1, [r7, #4]
 80183a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80183a6:	440b      	add	r3, r1
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d006      	beq.n	80183ba <tcp_receive+0x7c2>
 80183ac:	4b36      	ldr	r3, [pc, #216]	; (8018488 <tcp_receive+0x890>)
 80183ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80183b2:	4936      	ldr	r1, [pc, #216]	; (801848c <tcp_receive+0x894>)
 80183b4:	4836      	ldr	r0, [pc, #216]	; (8018490 <tcp_receive+0x898>)
 80183b6:	f004 f81d 	bl	801c3f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183be:	2b00      	cmp	r3, #0
 80183c0:	f000 80e7 	beq.w	8018592 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80183c4:	4b2e      	ldr	r3, [pc, #184]	; (8018480 <tcp_receive+0x888>)
 80183c6:	68db      	ldr	r3, [r3, #12]
 80183c8:	899b      	ldrh	r3, [r3, #12]
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7f5 ff21 	bl	800e214 <lwip_htons>
 80183d2:	4603      	mov	r3, r0
 80183d4:	b2db      	uxtb	r3, r3
 80183d6:	f003 0301 	and.w	r3, r3, #1
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d010      	beq.n	8018400 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80183de:	e00a      	b.n	80183f6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80183f0:	68f8      	ldr	r0, [r7, #12]
 80183f2:	f7fd fcc8 	bl	8015d86 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d1f0      	bne.n	80183e0 <tcp_receive+0x7e8>
 80183fe:	e0c8      	b.n	8018592 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018404:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018406:	e052      	b.n	80184ae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801840a:	68db      	ldr	r3, [r3, #12]
 801840c:	899b      	ldrh	r3, [r3, #12]
 801840e:	b29b      	uxth	r3, r3
 8018410:	4618      	mov	r0, r3
 8018412:	f7f5 feff 	bl	800e214 <lwip_htons>
 8018416:	4603      	mov	r3, r0
 8018418:	b2db      	uxtb	r3, r3
 801841a:	f003 0301 	and.w	r3, r3, #1
 801841e:	2b00      	cmp	r3, #0
 8018420:	d03d      	beq.n	801849e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018422:	4b17      	ldr	r3, [pc, #92]	; (8018480 <tcp_receive+0x888>)
 8018424:	68db      	ldr	r3, [r3, #12]
 8018426:	899b      	ldrh	r3, [r3, #12]
 8018428:	b29b      	uxth	r3, r3
 801842a:	4618      	mov	r0, r3
 801842c:	f7f5 fef2 	bl	800e214 <lwip_htons>
 8018430:	4603      	mov	r3, r0
 8018432:	b2db      	uxtb	r3, r3
 8018434:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018438:	2b00      	cmp	r3, #0
 801843a:	d130      	bne.n	801849e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801843c:	4b10      	ldr	r3, [pc, #64]	; (8018480 <tcp_receive+0x888>)
 801843e:	68db      	ldr	r3, [r3, #12]
 8018440:	899b      	ldrh	r3, [r3, #12]
 8018442:	b29c      	uxth	r4, r3
 8018444:	2001      	movs	r0, #1
 8018446:	f7f5 fee5 	bl	800e214 <lwip_htons>
 801844a:	4603      	mov	r3, r0
 801844c:	461a      	mov	r2, r3
 801844e:	4b0c      	ldr	r3, [pc, #48]	; (8018480 <tcp_receive+0x888>)
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	4322      	orrs	r2, r4
 8018454:	b292      	uxth	r2, r2
 8018456:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018458:	4b09      	ldr	r3, [pc, #36]	; (8018480 <tcp_receive+0x888>)
 801845a:	891c      	ldrh	r4, [r3, #8]
 801845c:	4b08      	ldr	r3, [pc, #32]	; (8018480 <tcp_receive+0x888>)
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	899b      	ldrh	r3, [r3, #12]
 8018462:	b29b      	uxth	r3, r3
 8018464:	4618      	mov	r0, r3
 8018466:	f7f5 fed5 	bl	800e214 <lwip_htons>
 801846a:	4603      	mov	r3, r0
 801846c:	b2db      	uxtb	r3, r3
 801846e:	f003 0303 	and.w	r3, r3, #3
 8018472:	2b00      	cmp	r3, #0
 8018474:	d00e      	beq.n	8018494 <tcp_receive+0x89c>
 8018476:	2301      	movs	r3, #1
 8018478:	e00d      	b.n	8018496 <tcp_receive+0x89e>
 801847a:	bf00      	nop
 801847c:	24004348 	.word	0x24004348
 8018480:	24004328 	.word	0x24004328
 8018484:	24004352 	.word	0x24004352
 8018488:	08021e54 	.word	0x08021e54
 801848c:	0802221c 	.word	0x0802221c
 8018490:	08021ec0 	.word	0x08021ec0
 8018494:	2300      	movs	r3, #0
 8018496:	4423      	add	r3, r4
 8018498:	b29a      	uxth	r2, r3
 801849a:	4b98      	ldr	r3, [pc, #608]	; (80186fc <tcp_receive+0xb04>)
 801849c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801849e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80184a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80184a8:	6938      	ldr	r0, [r7, #16]
 80184aa:	f7fd fc6c 	bl	8015d86 <tcp_seg_free>
            while (next &&
 80184ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d00e      	beq.n	80184d2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80184b4:	4b91      	ldr	r3, [pc, #580]	; (80186fc <tcp_receive+0xb04>)
 80184b6:	881b      	ldrh	r3, [r3, #0]
 80184b8:	461a      	mov	r2, r3
 80184ba:	4b91      	ldr	r3, [pc, #580]	; (8018700 <tcp_receive+0xb08>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	441a      	add	r2, r3
 80184c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80184c8:	8909      	ldrh	r1, [r1, #8]
 80184ca:	440b      	add	r3, r1
 80184cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	da9a      	bge.n	8018408 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80184d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d059      	beq.n	801858c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80184d8:	4b88      	ldr	r3, [pc, #544]	; (80186fc <tcp_receive+0xb04>)
 80184da:	881b      	ldrh	r3, [r3, #0]
 80184dc:	461a      	mov	r2, r3
 80184de:	4b88      	ldr	r3, [pc, #544]	; (8018700 <tcp_receive+0xb08>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	441a      	add	r2, r3
 80184e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184e6:	68db      	ldr	r3, [r3, #12]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	dd4d      	ble.n	801858c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80184f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	b29a      	uxth	r2, r3
 80184f8:	4b81      	ldr	r3, [pc, #516]	; (8018700 <tcp_receive+0xb08>)
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	1ad3      	subs	r3, r2, r3
 8018500:	b29a      	uxth	r2, r3
 8018502:	4b80      	ldr	r3, [pc, #512]	; (8018704 <tcp_receive+0xb0c>)
 8018504:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018506:	4b7f      	ldr	r3, [pc, #508]	; (8018704 <tcp_receive+0xb0c>)
 8018508:	68db      	ldr	r3, [r3, #12]
 801850a:	899b      	ldrh	r3, [r3, #12]
 801850c:	b29b      	uxth	r3, r3
 801850e:	4618      	mov	r0, r3
 8018510:	f7f5 fe80 	bl	800e214 <lwip_htons>
 8018514:	4603      	mov	r3, r0
 8018516:	b2db      	uxtb	r3, r3
 8018518:	f003 0302 	and.w	r3, r3, #2
 801851c:	2b00      	cmp	r3, #0
 801851e:	d005      	beq.n	801852c <tcp_receive+0x934>
                inseg.len -= 1;
 8018520:	4b78      	ldr	r3, [pc, #480]	; (8018704 <tcp_receive+0xb0c>)
 8018522:	891b      	ldrh	r3, [r3, #8]
 8018524:	3b01      	subs	r3, #1
 8018526:	b29a      	uxth	r2, r3
 8018528:	4b76      	ldr	r3, [pc, #472]	; (8018704 <tcp_receive+0xb0c>)
 801852a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801852c:	4b75      	ldr	r3, [pc, #468]	; (8018704 <tcp_receive+0xb0c>)
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	4a74      	ldr	r2, [pc, #464]	; (8018704 <tcp_receive+0xb0c>)
 8018532:	8912      	ldrh	r2, [r2, #8]
 8018534:	4611      	mov	r1, r2
 8018536:	4618      	mov	r0, r3
 8018538:	f7fb fc2a 	bl	8013d90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801853c:	4b71      	ldr	r3, [pc, #452]	; (8018704 <tcp_receive+0xb0c>)
 801853e:	891c      	ldrh	r4, [r3, #8]
 8018540:	4b70      	ldr	r3, [pc, #448]	; (8018704 <tcp_receive+0xb0c>)
 8018542:	68db      	ldr	r3, [r3, #12]
 8018544:	899b      	ldrh	r3, [r3, #12]
 8018546:	b29b      	uxth	r3, r3
 8018548:	4618      	mov	r0, r3
 801854a:	f7f5 fe63 	bl	800e214 <lwip_htons>
 801854e:	4603      	mov	r3, r0
 8018550:	b2db      	uxtb	r3, r3
 8018552:	f003 0303 	and.w	r3, r3, #3
 8018556:	2b00      	cmp	r3, #0
 8018558:	d001      	beq.n	801855e <tcp_receive+0x966>
 801855a:	2301      	movs	r3, #1
 801855c:	e000      	b.n	8018560 <tcp_receive+0x968>
 801855e:	2300      	movs	r3, #0
 8018560:	4423      	add	r3, r4
 8018562:	b29a      	uxth	r2, r3
 8018564:	4b65      	ldr	r3, [pc, #404]	; (80186fc <tcp_receive+0xb04>)
 8018566:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018568:	4b64      	ldr	r3, [pc, #400]	; (80186fc <tcp_receive+0xb04>)
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	461a      	mov	r2, r3
 801856e:	4b64      	ldr	r3, [pc, #400]	; (8018700 <tcp_receive+0xb08>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	441a      	add	r2, r3
 8018574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018576:	68db      	ldr	r3, [r3, #12]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	429a      	cmp	r2, r3
 801857c:	d006      	beq.n	801858c <tcp_receive+0x994>
 801857e:	4b62      	ldr	r3, [pc, #392]	; (8018708 <tcp_receive+0xb10>)
 8018580:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018584:	4961      	ldr	r1, [pc, #388]	; (801870c <tcp_receive+0xb14>)
 8018586:	4862      	ldr	r0, [pc, #392]	; (8018710 <tcp_receive+0xb18>)
 8018588:	f003 ff34 	bl	801c3f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018590:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018592:	4b5a      	ldr	r3, [pc, #360]	; (80186fc <tcp_receive+0xb04>)
 8018594:	881b      	ldrh	r3, [r3, #0]
 8018596:	461a      	mov	r2, r3
 8018598:	4b59      	ldr	r3, [pc, #356]	; (8018700 <tcp_receive+0xb08>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	441a      	add	r2, r3
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80185a6:	4b55      	ldr	r3, [pc, #340]	; (80186fc <tcp_receive+0xb04>)
 80185a8:	881b      	ldrh	r3, [r3, #0]
 80185aa:	429a      	cmp	r2, r3
 80185ac:	d206      	bcs.n	80185bc <tcp_receive+0x9c4>
 80185ae:	4b56      	ldr	r3, [pc, #344]	; (8018708 <tcp_receive+0xb10>)
 80185b0:	f240 6207 	movw	r2, #1543	; 0x607
 80185b4:	4957      	ldr	r1, [pc, #348]	; (8018714 <tcp_receive+0xb1c>)
 80185b6:	4856      	ldr	r0, [pc, #344]	; (8018710 <tcp_receive+0xb18>)
 80185b8:	f003 ff1c 	bl	801c3f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80185c0:	4b4e      	ldr	r3, [pc, #312]	; (80186fc <tcp_receive+0xb04>)
 80185c2:	881b      	ldrh	r3, [r3, #0]
 80185c4:	1ad3      	subs	r3, r2, r3
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f7fc feb5 	bl	801533c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80185d2:	4b4c      	ldr	r3, [pc, #304]	; (8018704 <tcp_receive+0xb0c>)
 80185d4:	685b      	ldr	r3, [r3, #4]
 80185d6:	891b      	ldrh	r3, [r3, #8]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d006      	beq.n	80185ea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80185dc:	4b49      	ldr	r3, [pc, #292]	; (8018704 <tcp_receive+0xb0c>)
 80185de:	685b      	ldr	r3, [r3, #4]
 80185e0:	4a4d      	ldr	r2, [pc, #308]	; (8018718 <tcp_receive+0xb20>)
 80185e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80185e4:	4b47      	ldr	r3, [pc, #284]	; (8018704 <tcp_receive+0xb0c>)
 80185e6:	2200      	movs	r2, #0
 80185e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80185ea:	4b46      	ldr	r3, [pc, #280]	; (8018704 <tcp_receive+0xb0c>)
 80185ec:	68db      	ldr	r3, [r3, #12]
 80185ee:	899b      	ldrh	r3, [r3, #12]
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7f5 fe0e 	bl	800e214 <lwip_htons>
 80185f8:	4603      	mov	r3, r0
 80185fa:	b2db      	uxtb	r3, r3
 80185fc:	f003 0301 	and.w	r3, r3, #1
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 80b8 	beq.w	8018776 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018606:	4b45      	ldr	r3, [pc, #276]	; (801871c <tcp_receive+0xb24>)
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	f043 0320 	orr.w	r3, r3, #32
 801860e:	b2da      	uxtb	r2, r3
 8018610:	4b42      	ldr	r3, [pc, #264]	; (801871c <tcp_receive+0xb24>)
 8018612:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018614:	e0af      	b.n	8018776 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801861a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018620:	68db      	ldr	r3, [r3, #12]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	4a36      	ldr	r2, [pc, #216]	; (8018700 <tcp_receive+0xb08>)
 8018626:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	891b      	ldrh	r3, [r3, #8]
 801862c:	461c      	mov	r4, r3
 801862e:	68bb      	ldr	r3, [r7, #8]
 8018630:	68db      	ldr	r3, [r3, #12]
 8018632:	899b      	ldrh	r3, [r3, #12]
 8018634:	b29b      	uxth	r3, r3
 8018636:	4618      	mov	r0, r3
 8018638:	f7f5 fdec 	bl	800e214 <lwip_htons>
 801863c:	4603      	mov	r3, r0
 801863e:	b2db      	uxtb	r3, r3
 8018640:	f003 0303 	and.w	r3, r3, #3
 8018644:	2b00      	cmp	r3, #0
 8018646:	d001      	beq.n	801864c <tcp_receive+0xa54>
 8018648:	2301      	movs	r3, #1
 801864a:	e000      	b.n	801864e <tcp_receive+0xa56>
 801864c:	2300      	movs	r3, #0
 801864e:	191a      	adds	r2, r3, r4
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018654:	441a      	add	r2, r3
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801865e:	461c      	mov	r4, r3
 8018660:	68bb      	ldr	r3, [r7, #8]
 8018662:	891b      	ldrh	r3, [r3, #8]
 8018664:	461d      	mov	r5, r3
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	899b      	ldrh	r3, [r3, #12]
 801866c:	b29b      	uxth	r3, r3
 801866e:	4618      	mov	r0, r3
 8018670:	f7f5 fdd0 	bl	800e214 <lwip_htons>
 8018674:	4603      	mov	r3, r0
 8018676:	b2db      	uxtb	r3, r3
 8018678:	f003 0303 	and.w	r3, r3, #3
 801867c:	2b00      	cmp	r3, #0
 801867e:	d001      	beq.n	8018684 <tcp_receive+0xa8c>
 8018680:	2301      	movs	r3, #1
 8018682:	e000      	b.n	8018686 <tcp_receive+0xa8e>
 8018684:	2300      	movs	r3, #0
 8018686:	442b      	add	r3, r5
 8018688:	429c      	cmp	r4, r3
 801868a:	d206      	bcs.n	801869a <tcp_receive+0xaa2>
 801868c:	4b1e      	ldr	r3, [pc, #120]	; (8018708 <tcp_receive+0xb10>)
 801868e:	f240 622b 	movw	r2, #1579	; 0x62b
 8018692:	4923      	ldr	r1, [pc, #140]	; (8018720 <tcp_receive+0xb28>)
 8018694:	481e      	ldr	r0, [pc, #120]	; (8018710 <tcp_receive+0xb18>)
 8018696:	f003 fead 	bl	801c3f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	891b      	ldrh	r3, [r3, #8]
 801869e:	461c      	mov	r4, r3
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	899b      	ldrh	r3, [r3, #12]
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7f5 fdb3 	bl	800e214 <lwip_htons>
 80186ae:	4603      	mov	r3, r0
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	f003 0303 	and.w	r3, r3, #3
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d001      	beq.n	80186be <tcp_receive+0xac6>
 80186ba:	2301      	movs	r3, #1
 80186bc:	e000      	b.n	80186c0 <tcp_receive+0xac8>
 80186be:	2300      	movs	r3, #0
 80186c0:	1919      	adds	r1, r3, r4
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80186c6:	b28b      	uxth	r3, r1
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	b29a      	uxth	r2, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f7fc fe33 	bl	801533c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	891b      	ldrh	r3, [r3, #8]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d028      	beq.n	8018732 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80186e0:	4b0d      	ldr	r3, [pc, #52]	; (8018718 <tcp_receive+0xb20>)
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d01d      	beq.n	8018724 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80186e8:	4b0b      	ldr	r3, [pc, #44]	; (8018718 <tcp_receive+0xb20>)
 80186ea:	681a      	ldr	r2, [r3, #0]
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	4619      	mov	r1, r3
 80186f2:	4610      	mov	r0, r2
 80186f4:	f7fb fda0 	bl	8014238 <pbuf_cat>
 80186f8:	e018      	b.n	801872c <tcp_receive+0xb34>
 80186fa:	bf00      	nop
 80186fc:	24004352 	.word	0x24004352
 8018700:	24004348 	.word	0x24004348
 8018704:	24004328 	.word	0x24004328
 8018708:	08021e54 	.word	0x08021e54
 801870c:	08022254 	.word	0x08022254
 8018710:	08021ec0 	.word	0x08021ec0
 8018714:	08022290 	.word	0x08022290
 8018718:	24004358 	.word	0x24004358
 801871c:	24004355 	.word	0x24004355
 8018720:	080222b0 	.word	0x080222b0
            } else {
              recv_data = cseg->p;
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	4a70      	ldr	r2, [pc, #448]	; (80188ec <tcp_receive+0xcf4>)
 801872a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	2200      	movs	r2, #0
 8018730:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	68db      	ldr	r3, [r3, #12]
 8018736:	899b      	ldrh	r3, [r3, #12]
 8018738:	b29b      	uxth	r3, r3
 801873a:	4618      	mov	r0, r3
 801873c:	f7f5 fd6a 	bl	800e214 <lwip_htons>
 8018740:	4603      	mov	r3, r0
 8018742:	b2db      	uxtb	r3, r3
 8018744:	f003 0301 	and.w	r3, r3, #1
 8018748:	2b00      	cmp	r3, #0
 801874a:	d00d      	beq.n	8018768 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801874c:	4b68      	ldr	r3, [pc, #416]	; (80188f0 <tcp_receive+0xcf8>)
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	f043 0320 	orr.w	r3, r3, #32
 8018754:	b2da      	uxtb	r2, r3
 8018756:	4b66      	ldr	r3, [pc, #408]	; (80188f0 <tcp_receive+0xcf8>)
 8018758:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	7d1b      	ldrb	r3, [r3, #20]
 801875e:	2b04      	cmp	r3, #4
 8018760:	d102      	bne.n	8018768 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2207      	movs	r2, #7
 8018766:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018770:	68b8      	ldr	r0, [r7, #8]
 8018772:	f7fd fb08 	bl	8015d86 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801877a:	2b00      	cmp	r3, #0
 801877c:	d008      	beq.n	8018790 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018782:	68db      	ldr	r3, [r3, #12]
 8018784:	685a      	ldr	r2, [r3, #4]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801878a:	429a      	cmp	r2, r3
 801878c:	f43f af43 	beq.w	8018616 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	8b5b      	ldrh	r3, [r3, #26]
 8018794:	f003 0301 	and.w	r3, r3, #1
 8018798:	2b00      	cmp	r3, #0
 801879a:	d00e      	beq.n	80187ba <tcp_receive+0xbc2>
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	8b5b      	ldrh	r3, [r3, #26]
 80187a0:	f023 0301 	bic.w	r3, r3, #1
 80187a4:	b29a      	uxth	r2, r3
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	835a      	strh	r2, [r3, #26]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	8b5b      	ldrh	r3, [r3, #26]
 80187ae:	f043 0302 	orr.w	r3, r3, #2
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80187b8:	e188      	b.n	8018acc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	8b5b      	ldrh	r3, [r3, #26]
 80187be:	f043 0301 	orr.w	r3, r3, #1
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80187c8:	e180      	b.n	8018acc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d106      	bne.n	80187e0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80187d2:	4848      	ldr	r0, [pc, #288]	; (80188f4 <tcp_receive+0xcfc>)
 80187d4:	f7fd faf0 	bl	8015db8 <tcp_seg_copy>
 80187d8:	4602      	mov	r2, r0
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	675a      	str	r2, [r3, #116]	; 0x74
 80187de:	e16d      	b.n	8018abc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80187e0:	2300      	movs	r3, #0
 80187e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80187ea:	e157      	b.n	8018a9c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80187ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ee:	68db      	ldr	r3, [r3, #12]
 80187f0:	685a      	ldr	r2, [r3, #4]
 80187f2:	4b41      	ldr	r3, [pc, #260]	; (80188f8 <tcp_receive+0xd00>)
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d11d      	bne.n	8018836 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80187fa:	4b3e      	ldr	r3, [pc, #248]	; (80188f4 <tcp_receive+0xcfc>)
 80187fc:	891a      	ldrh	r2, [r3, #8]
 80187fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018800:	891b      	ldrh	r3, [r3, #8]
 8018802:	429a      	cmp	r2, r3
 8018804:	f240 814f 	bls.w	8018aa6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018808:	483a      	ldr	r0, [pc, #232]	; (80188f4 <tcp_receive+0xcfc>)
 801880a:	f7fd fad5 	bl	8015db8 <tcp_seg_copy>
 801880e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018810:	697b      	ldr	r3, [r7, #20]
 8018812:	2b00      	cmp	r3, #0
 8018814:	f000 8149 	beq.w	8018aaa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801881a:	2b00      	cmp	r3, #0
 801881c:	d003      	beq.n	8018826 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018820:	697a      	ldr	r2, [r7, #20]
 8018822:	601a      	str	r2, [r3, #0]
 8018824:	e002      	b.n	801882c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	697a      	ldr	r2, [r7, #20]
 801882a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801882c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801882e:	6978      	ldr	r0, [r7, #20]
 8018830:	f7ff f8de 	bl	80179f0 <tcp_oos_insert_segment>
                }
                break;
 8018834:	e139      	b.n	8018aaa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018838:	2b00      	cmp	r3, #0
 801883a:	d117      	bne.n	801886c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801883c:	4b2e      	ldr	r3, [pc, #184]	; (80188f8 <tcp_receive+0xd00>)
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018842:	68db      	ldr	r3, [r3, #12]
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	1ad3      	subs	r3, r2, r3
 8018848:	2b00      	cmp	r3, #0
 801884a:	da57      	bge.n	80188fc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801884c:	4829      	ldr	r0, [pc, #164]	; (80188f4 <tcp_receive+0xcfc>)
 801884e:	f7fd fab3 	bl	8015db8 <tcp_seg_copy>
 8018852:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018854:	69bb      	ldr	r3, [r7, #24]
 8018856:	2b00      	cmp	r3, #0
 8018858:	f000 8129 	beq.w	8018aae <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	69ba      	ldr	r2, [r7, #24]
 8018860:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018864:	69b8      	ldr	r0, [r7, #24]
 8018866:	f7ff f8c3 	bl	80179f0 <tcp_oos_insert_segment>
                  }
                  break;
 801886a:	e120      	b.n	8018aae <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801886c:	4b22      	ldr	r3, [pc, #136]	; (80188f8 <tcp_receive+0xd00>)
 801886e:	681a      	ldr	r2, [r3, #0]
 8018870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018872:	68db      	ldr	r3, [r3, #12]
 8018874:	685b      	ldr	r3, [r3, #4]
 8018876:	1ad3      	subs	r3, r2, r3
 8018878:	3b01      	subs	r3, #1
 801887a:	2b00      	cmp	r3, #0
 801887c:	db3e      	blt.n	80188fc <tcp_receive+0xd04>
 801887e:	4b1e      	ldr	r3, [pc, #120]	; (80188f8 <tcp_receive+0xd00>)
 8018880:	681a      	ldr	r2, [r3, #0]
 8018882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018884:	68db      	ldr	r3, [r3, #12]
 8018886:	685b      	ldr	r3, [r3, #4]
 8018888:	1ad3      	subs	r3, r2, r3
 801888a:	3301      	adds	r3, #1
 801888c:	2b00      	cmp	r3, #0
 801888e:	dc35      	bgt.n	80188fc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018890:	4818      	ldr	r0, [pc, #96]	; (80188f4 <tcp_receive+0xcfc>)
 8018892:	f7fd fa91 	bl	8015db8 <tcp_seg_copy>
 8018896:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	2b00      	cmp	r3, #0
 801889c:	f000 8109 	beq.w	8018ab2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80188a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	685b      	ldr	r3, [r3, #4]
 80188a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80188a8:	8912      	ldrh	r2, [r2, #8]
 80188aa:	441a      	add	r2, r3
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <tcp_receive+0xd00>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	1ad3      	subs	r3, r2, r3
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	dd12      	ble.n	80188dc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80188b6:	4b10      	ldr	r3, [pc, #64]	; (80188f8 <tcp_receive+0xd00>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	b29a      	uxth	r2, r3
 80188bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188be:	68db      	ldr	r3, [r3, #12]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	1ad3      	subs	r3, r2, r3
 80188c6:	b29a      	uxth	r2, r3
 80188c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80188cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ce:	685a      	ldr	r2, [r3, #4]
 80188d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188d2:	891b      	ldrh	r3, [r3, #8]
 80188d4:	4619      	mov	r1, r3
 80188d6:	4610      	mov	r0, r2
 80188d8:	f7fb fa5a 	bl	8013d90 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80188dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188de:	69fa      	ldr	r2, [r7, #28]
 80188e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80188e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188e4:	69f8      	ldr	r0, [r7, #28]
 80188e6:	f7ff f883 	bl	80179f0 <tcp_oos_insert_segment>
                  }
                  break;
 80188ea:	e0e2      	b.n	8018ab2 <tcp_receive+0xeba>
 80188ec:	24004358 	.word	0x24004358
 80188f0:	24004355 	.word	0x24004355
 80188f4:	24004328 	.word	0x24004328
 80188f8:	24004348 	.word	0x24004348
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80188fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	2b00      	cmp	r3, #0
 8018906:	f040 80c6 	bne.w	8018a96 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801890a:	4b80      	ldr	r3, [pc, #512]	; (8018b0c <tcp_receive+0xf14>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018910:	68db      	ldr	r3, [r3, #12]
 8018912:	685b      	ldr	r3, [r3, #4]
 8018914:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018916:	2b00      	cmp	r3, #0
 8018918:	f340 80bd 	ble.w	8018a96 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801891e:	68db      	ldr	r3, [r3, #12]
 8018920:	899b      	ldrh	r3, [r3, #12]
 8018922:	b29b      	uxth	r3, r3
 8018924:	4618      	mov	r0, r3
 8018926:	f7f5 fc75 	bl	800e214 <lwip_htons>
 801892a:	4603      	mov	r3, r0
 801892c:	b2db      	uxtb	r3, r3
 801892e:	f003 0301 	and.w	r3, r3, #1
 8018932:	2b00      	cmp	r3, #0
 8018934:	f040 80bf 	bne.w	8018ab6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018938:	4875      	ldr	r0, [pc, #468]	; (8018b10 <tcp_receive+0xf18>)
 801893a:	f7fd fa3d 	bl	8015db8 <tcp_seg_copy>
 801893e:	4602      	mov	r2, r0
 8018940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018942:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	2b00      	cmp	r3, #0
 801894a:	f000 80b6 	beq.w	8018aba <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018950:	68db      	ldr	r3, [r3, #12]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018956:	8912      	ldrh	r2, [r2, #8]
 8018958:	441a      	add	r2, r3
 801895a:	4b6c      	ldr	r3, [pc, #432]	; (8018b0c <tcp_receive+0xf14>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	1ad3      	subs	r3, r2, r3
 8018960:	2b00      	cmp	r3, #0
 8018962:	dd12      	ble.n	801898a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018964:	4b69      	ldr	r3, [pc, #420]	; (8018b0c <tcp_receive+0xf14>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	b29a      	uxth	r2, r3
 801896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801896c:	68db      	ldr	r3, [r3, #12]
 801896e:	685b      	ldr	r3, [r3, #4]
 8018970:	b29b      	uxth	r3, r3
 8018972:	1ad3      	subs	r3, r2, r3
 8018974:	b29a      	uxth	r2, r3
 8018976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018978:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801897c:	685a      	ldr	r2, [r3, #4]
 801897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018980:	891b      	ldrh	r3, [r3, #8]
 8018982:	4619      	mov	r1, r3
 8018984:	4610      	mov	r0, r2
 8018986:	f7fb fa03 	bl	8013d90 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801898a:	4b62      	ldr	r3, [pc, #392]	; (8018b14 <tcp_receive+0xf1c>)
 801898c:	881b      	ldrh	r3, [r3, #0]
 801898e:	461a      	mov	r2, r3
 8018990:	4b5e      	ldr	r3, [pc, #376]	; (8018b0c <tcp_receive+0xf14>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	441a      	add	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801899a:	6879      	ldr	r1, [r7, #4]
 801899c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801899e:	440b      	add	r3, r1
 80189a0:	1ad3      	subs	r3, r2, r3
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f340 8089 	ble.w	8018aba <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80189a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	68db      	ldr	r3, [r3, #12]
 80189ae:	899b      	ldrh	r3, [r3, #12]
 80189b0:	b29b      	uxth	r3, r3
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7f5 fc2e 	bl	800e214 <lwip_htons>
 80189b8:	4603      	mov	r3, r0
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	f003 0301 	and.w	r3, r3, #1
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d022      	beq.n	8018a0a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80189c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	68db      	ldr	r3, [r3, #12]
 80189ca:	899b      	ldrh	r3, [r3, #12]
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	b21b      	sxth	r3, r3
 80189d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80189d4:	b21c      	sxth	r4, r3
 80189d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	68db      	ldr	r3, [r3, #12]
 80189dc:	899b      	ldrh	r3, [r3, #12]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7f5 fc17 	bl	800e214 <lwip_htons>
 80189e6:	4603      	mov	r3, r0
 80189e8:	b2db      	uxtb	r3, r3
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7f5 fc0e 	bl	800e214 <lwip_htons>
 80189f8:	4603      	mov	r3, r0
 80189fa:	b21b      	sxth	r3, r3
 80189fc:	4323      	orrs	r3, r4
 80189fe:	b21a      	sxth	r2, r3
 8018a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	68db      	ldr	r3, [r3, #12]
 8018a06:	b292      	uxth	r2, r2
 8018a08:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a14:	4413      	add	r3, r2
 8018a16:	b299      	uxth	r1, r3
 8018a18:	4b3c      	ldr	r3, [pc, #240]	; (8018b0c <tcp_receive+0xf14>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	b29a      	uxth	r2, r3
 8018a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	1a8a      	subs	r2, r1, r2
 8018a24:	b292      	uxth	r2, r2
 8018a26:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	685a      	ldr	r2, [r3, #4]
 8018a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	891b      	ldrh	r3, [r3, #8]
 8018a34:	4619      	mov	r1, r3
 8018a36:	4610      	mov	r0, r2
 8018a38:	f7fb f9aa 	bl	8013d90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	891c      	ldrh	r4, [r3, #8]
 8018a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	68db      	ldr	r3, [r3, #12]
 8018a48:	899b      	ldrh	r3, [r3, #12]
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7f5 fbe1 	bl	800e214 <lwip_htons>
 8018a52:	4603      	mov	r3, r0
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	f003 0303 	and.w	r3, r3, #3
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d001      	beq.n	8018a62 <tcp_receive+0xe6a>
 8018a5e:	2301      	movs	r3, #1
 8018a60:	e000      	b.n	8018a64 <tcp_receive+0xe6c>
 8018a62:	2300      	movs	r3, #0
 8018a64:	4423      	add	r3, r4
 8018a66:	b29a      	uxth	r2, r3
 8018a68:	4b2a      	ldr	r3, [pc, #168]	; (8018b14 <tcp_receive+0xf1c>)
 8018a6a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018a6c:	4b29      	ldr	r3, [pc, #164]	; (8018b14 <tcp_receive+0xf1c>)
 8018a6e:	881b      	ldrh	r3, [r3, #0]
 8018a70:	461a      	mov	r2, r3
 8018a72:	4b26      	ldr	r3, [pc, #152]	; (8018b0c <tcp_receive+0xf14>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	441a      	add	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7c:	6879      	ldr	r1, [r7, #4]
 8018a7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a80:	440b      	add	r3, r1
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d019      	beq.n	8018aba <tcp_receive+0xec2>
 8018a86:	4b24      	ldr	r3, [pc, #144]	; (8018b18 <tcp_receive+0xf20>)
 8018a88:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018a8c:	4923      	ldr	r1, [pc, #140]	; (8018b1c <tcp_receive+0xf24>)
 8018a8e:	4824      	ldr	r0, [pc, #144]	; (8018b20 <tcp_receive+0xf28>)
 8018a90:	f003 fcb0 	bl	801c3f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018a94:	e011      	b.n	8018aba <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f47f aea4 	bne.w	80187ec <tcp_receive+0xbf4>
 8018aa4:	e00a      	b.n	8018abc <tcp_receive+0xec4>
                break;
 8018aa6:	bf00      	nop
 8018aa8:	e008      	b.n	8018abc <tcp_receive+0xec4>
                break;
 8018aaa:	bf00      	nop
 8018aac:	e006      	b.n	8018abc <tcp_receive+0xec4>
                  break;
 8018aae:	bf00      	nop
 8018ab0:	e004      	b.n	8018abc <tcp_receive+0xec4>
                  break;
 8018ab2:	bf00      	nop
 8018ab4:	e002      	b.n	8018abc <tcp_receive+0xec4>
                  break;
 8018ab6:	bf00      	nop
 8018ab8:	e000      	b.n	8018abc <tcp_receive+0xec4>
                break;
 8018aba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018abc:	6878      	ldr	r0, [r7, #4]
 8018abe:	f001 fe8b 	bl	801a7d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018ac2:	e003      	b.n	8018acc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f001 fe87 	bl	801a7d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018aca:	e01a      	b.n	8018b02 <tcp_receive+0xf0a>
 8018acc:	e019      	b.n	8018b02 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018ace:	4b0f      	ldr	r3, [pc, #60]	; (8018b0c <tcp_receive+0xf14>)
 8018ad0:	681a      	ldr	r2, [r3, #0]
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ad6:	1ad3      	subs	r3, r2, r3
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	db0a      	blt.n	8018af2 <tcp_receive+0xefa>
 8018adc:	4b0b      	ldr	r3, [pc, #44]	; (8018b0c <tcp_receive+0xf14>)
 8018ade:	681a      	ldr	r2, [r3, #0]
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ae4:	6879      	ldr	r1, [r7, #4]
 8018ae6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ae8:	440b      	add	r3, r1
 8018aea:	1ad3      	subs	r3, r2, r3
 8018aec:	3301      	adds	r3, #1
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	dd07      	ble.n	8018b02 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	8b5b      	ldrh	r3, [r3, #26]
 8018af6:	f043 0302 	orr.w	r3, r3, #2
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018b00:	e7ff      	b.n	8018b02 <tcp_receive+0xf0a>
 8018b02:	bf00      	nop
 8018b04:	3750      	adds	r7, #80	; 0x50
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bdb0      	pop	{r4, r5, r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	24004348 	.word	0x24004348
 8018b10:	24004328 	.word	0x24004328
 8018b14:	24004352 	.word	0x24004352
 8018b18:	08021e54 	.word	0x08021e54
 8018b1c:	0802221c 	.word	0x0802221c
 8018b20:	08021ec0 	.word	0x08021ec0

08018b24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018b24:	b480      	push	{r7}
 8018b26:	b083      	sub	sp, #12
 8018b28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018b2a:	4b15      	ldr	r3, [pc, #84]	; (8018b80 <tcp_get_next_optbyte+0x5c>)
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	1c5a      	adds	r2, r3, #1
 8018b30:	b291      	uxth	r1, r2
 8018b32:	4a13      	ldr	r2, [pc, #76]	; (8018b80 <tcp_get_next_optbyte+0x5c>)
 8018b34:	8011      	strh	r1, [r2, #0]
 8018b36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018b38:	4b12      	ldr	r3, [pc, #72]	; (8018b84 <tcp_get_next_optbyte+0x60>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d004      	beq.n	8018b4a <tcp_get_next_optbyte+0x26>
 8018b40:	4b11      	ldr	r3, [pc, #68]	; (8018b88 <tcp_get_next_optbyte+0x64>)
 8018b42:	881b      	ldrh	r3, [r3, #0]
 8018b44:	88fa      	ldrh	r2, [r7, #6]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d208      	bcs.n	8018b5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018b4a:	4b10      	ldr	r3, [pc, #64]	; (8018b8c <tcp_get_next_optbyte+0x68>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	3314      	adds	r3, #20
 8018b50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018b52:	88fb      	ldrh	r3, [r7, #6]
 8018b54:	683a      	ldr	r2, [r7, #0]
 8018b56:	4413      	add	r3, r2
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	e00b      	b.n	8018b74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018b5c:	88fb      	ldrh	r3, [r7, #6]
 8018b5e:	b2da      	uxtb	r2, r3
 8018b60:	4b09      	ldr	r3, [pc, #36]	; (8018b88 <tcp_get_next_optbyte+0x64>)
 8018b62:	881b      	ldrh	r3, [r3, #0]
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	1ad3      	subs	r3, r2, r3
 8018b68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018b6a:	4b06      	ldr	r3, [pc, #24]	; (8018b84 <tcp_get_next_optbyte+0x60>)
 8018b6c:	681a      	ldr	r2, [r3, #0]
 8018b6e:	797b      	ldrb	r3, [r7, #5]
 8018b70:	4413      	add	r3, r2
 8018b72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	370c      	adds	r7, #12
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7e:	4770      	bx	lr
 8018b80:	24004344 	.word	0x24004344
 8018b84:	24004340 	.word	0x24004340
 8018b88:	2400433e 	.word	0x2400433e
 8018b8c:	24004338 	.word	0x24004338

08018b90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d106      	bne.n	8018bac <tcp_parseopt+0x1c>
 8018b9e:	4b32      	ldr	r3, [pc, #200]	; (8018c68 <tcp_parseopt+0xd8>)
 8018ba0:	f240 727d 	movw	r2, #1917	; 0x77d
 8018ba4:	4931      	ldr	r1, [pc, #196]	; (8018c6c <tcp_parseopt+0xdc>)
 8018ba6:	4832      	ldr	r0, [pc, #200]	; (8018c70 <tcp_parseopt+0xe0>)
 8018ba8:	f003 fc24 	bl	801c3f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018bac:	4b31      	ldr	r3, [pc, #196]	; (8018c74 <tcp_parseopt+0xe4>)
 8018bae:	881b      	ldrh	r3, [r3, #0]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d055      	beq.n	8018c60 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018bb4:	4b30      	ldr	r3, [pc, #192]	; (8018c78 <tcp_parseopt+0xe8>)
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	801a      	strh	r2, [r3, #0]
 8018bba:	e045      	b.n	8018c48 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018bbc:	f7ff ffb2 	bl	8018b24 <tcp_get_next_optbyte>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018bc4:	7bfb      	ldrb	r3, [r7, #15]
 8018bc6:	2b02      	cmp	r3, #2
 8018bc8:	d006      	beq.n	8018bd8 <tcp_parseopt+0x48>
 8018bca:	2b02      	cmp	r3, #2
 8018bcc:	dc2b      	bgt.n	8018c26 <tcp_parseopt+0x96>
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d041      	beq.n	8018c56 <tcp_parseopt+0xc6>
 8018bd2:	2b01      	cmp	r3, #1
 8018bd4:	d127      	bne.n	8018c26 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018bd6:	e037      	b.n	8018c48 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018bd8:	f7ff ffa4 	bl	8018b24 <tcp_get_next_optbyte>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	2b04      	cmp	r3, #4
 8018be0:	d13b      	bne.n	8018c5a <tcp_parseopt+0xca>
 8018be2:	4b25      	ldr	r3, [pc, #148]	; (8018c78 <tcp_parseopt+0xe8>)
 8018be4:	881b      	ldrh	r3, [r3, #0]
 8018be6:	3301      	adds	r3, #1
 8018be8:	4a22      	ldr	r2, [pc, #136]	; (8018c74 <tcp_parseopt+0xe4>)
 8018bea:	8812      	ldrh	r2, [r2, #0]
 8018bec:	4293      	cmp	r3, r2
 8018bee:	da34      	bge.n	8018c5a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018bf0:	f7ff ff98 	bl	8018b24 <tcp_get_next_optbyte>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	021b      	lsls	r3, r3, #8
 8018bfa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018bfc:	f7ff ff92 	bl	8018b24 <tcp_get_next_optbyte>
 8018c00:	4603      	mov	r3, r0
 8018c02:	b29a      	uxth	r2, r3
 8018c04:	89bb      	ldrh	r3, [r7, #12]
 8018c06:	4313      	orrs	r3, r2
 8018c08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018c0a:	89bb      	ldrh	r3, [r7, #12]
 8018c0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018c10:	d804      	bhi.n	8018c1c <tcp_parseopt+0x8c>
 8018c12:	89bb      	ldrh	r3, [r7, #12]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d001      	beq.n	8018c1c <tcp_parseopt+0x8c>
 8018c18:	89ba      	ldrh	r2, [r7, #12]
 8018c1a:	e001      	b.n	8018c20 <tcp_parseopt+0x90>
 8018c1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018c24:	e010      	b.n	8018c48 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018c26:	f7ff ff7d 	bl	8018b24 <tcp_get_next_optbyte>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018c2e:	7afb      	ldrb	r3, [r7, #11]
 8018c30:	2b01      	cmp	r3, #1
 8018c32:	d914      	bls.n	8018c5e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018c34:	7afb      	ldrb	r3, [r7, #11]
 8018c36:	b29a      	uxth	r2, r3
 8018c38:	4b0f      	ldr	r3, [pc, #60]	; (8018c78 <tcp_parseopt+0xe8>)
 8018c3a:	881b      	ldrh	r3, [r3, #0]
 8018c3c:	4413      	add	r3, r2
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	3b02      	subs	r3, #2
 8018c42:	b29a      	uxth	r2, r3
 8018c44:	4b0c      	ldr	r3, [pc, #48]	; (8018c78 <tcp_parseopt+0xe8>)
 8018c46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c48:	4b0b      	ldr	r3, [pc, #44]	; (8018c78 <tcp_parseopt+0xe8>)
 8018c4a:	881a      	ldrh	r2, [r3, #0]
 8018c4c:	4b09      	ldr	r3, [pc, #36]	; (8018c74 <tcp_parseopt+0xe4>)
 8018c4e:	881b      	ldrh	r3, [r3, #0]
 8018c50:	429a      	cmp	r2, r3
 8018c52:	d3b3      	bcc.n	8018bbc <tcp_parseopt+0x2c>
 8018c54:	e004      	b.n	8018c60 <tcp_parseopt+0xd0>
          return;
 8018c56:	bf00      	nop
 8018c58:	e002      	b.n	8018c60 <tcp_parseopt+0xd0>
            return;
 8018c5a:	bf00      	nop
 8018c5c:	e000      	b.n	8018c60 <tcp_parseopt+0xd0>
            return;
 8018c5e:	bf00      	nop
      }
    }
  }
}
 8018c60:	3710      	adds	r7, #16
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	08021e54 	.word	0x08021e54
 8018c6c:	080222d8 	.word	0x080222d8
 8018c70:	08021ec0 	.word	0x08021ec0
 8018c74:	2400433c 	.word	0x2400433c
 8018c78:	24004344 	.word	0x24004344

08018c7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018c80:	4b05      	ldr	r3, [pc, #20]	; (8018c98 <tcp_trigger_input_pcb_close+0x1c>)
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	f043 0310 	orr.w	r3, r3, #16
 8018c88:	b2da      	uxtb	r2, r3
 8018c8a:	4b03      	ldr	r3, [pc, #12]	; (8018c98 <tcp_trigger_input_pcb_close+0x1c>)
 8018c8c:	701a      	strb	r2, [r3, #0]
}
 8018c8e:	bf00      	nop
 8018c90:	46bd      	mov	sp, r7
 8018c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c96:	4770      	bx	lr
 8018c98:	24004355 	.word	0x24004355

08018c9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b084      	sub	sp, #16
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d00a      	beq.n	8018cc4 <tcp_route+0x28>
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	7a1b      	ldrb	r3, [r3, #8]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d006      	beq.n	8018cc4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	7a1b      	ldrb	r3, [r3, #8]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7fa fe60 	bl	8013980 <netif_get_by_index>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	e003      	b.n	8018ccc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f7f8 fc5d 	bl	8011584 <ip4_route>
 8018cca:	4603      	mov	r3, r0
  }
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	3710      	adds	r7, #16
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018cd4:	b590      	push	{r4, r7, lr}
 8018cd6:	b087      	sub	sp, #28
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	60f8      	str	r0, [r7, #12]
 8018cdc:	60b9      	str	r1, [r7, #8]
 8018cde:	603b      	str	r3, [r7, #0]
 8018ce0:	4613      	mov	r3, r2
 8018ce2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d105      	bne.n	8018cf6 <tcp_create_segment+0x22>
 8018cea:	4b44      	ldr	r3, [pc, #272]	; (8018dfc <tcp_create_segment+0x128>)
 8018cec:	22a3      	movs	r2, #163	; 0xa3
 8018cee:	4944      	ldr	r1, [pc, #272]	; (8018e00 <tcp_create_segment+0x12c>)
 8018cf0:	4844      	ldr	r0, [pc, #272]	; (8018e04 <tcp_create_segment+0x130>)
 8018cf2:	f003 fb7f 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d105      	bne.n	8018d08 <tcp_create_segment+0x34>
 8018cfc:	4b3f      	ldr	r3, [pc, #252]	; (8018dfc <tcp_create_segment+0x128>)
 8018cfe:	22a4      	movs	r2, #164	; 0xa4
 8018d00:	4941      	ldr	r1, [pc, #260]	; (8018e08 <tcp_create_segment+0x134>)
 8018d02:	4840      	ldr	r0, [pc, #256]	; (8018e04 <tcp_create_segment+0x130>)
 8018d04:	f003 fb76 	bl	801c3f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d0c:	009b      	lsls	r3, r3, #2
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	f003 0304 	and.w	r3, r3, #4
 8018d14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018d16:	2003      	movs	r0, #3
 8018d18:	f7fa fa00 	bl	801311c <memp_malloc>
 8018d1c:	6138      	str	r0, [r7, #16]
 8018d1e:	693b      	ldr	r3, [r7, #16]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d104      	bne.n	8018d2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018d24:	68b8      	ldr	r0, [r7, #8]
 8018d26:	f7fb f9b9 	bl	801409c <pbuf_free>
    return NULL;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	e061      	b.n	8018df2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018d2e:	693b      	ldr	r3, [r7, #16]
 8018d30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018d36:	693b      	ldr	r3, [r7, #16]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018d3c:	693b      	ldr	r3, [r7, #16]
 8018d3e:	68ba      	ldr	r2, [r7, #8]
 8018d40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	891a      	ldrh	r2, [r3, #8]
 8018d46:	7dfb      	ldrb	r3, [r7, #23]
 8018d48:	b29b      	uxth	r3, r3
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d205      	bcs.n	8018d5a <tcp_create_segment+0x86>
 8018d4e:	4b2b      	ldr	r3, [pc, #172]	; (8018dfc <tcp_create_segment+0x128>)
 8018d50:	22b0      	movs	r2, #176	; 0xb0
 8018d52:	492e      	ldr	r1, [pc, #184]	; (8018e0c <tcp_create_segment+0x138>)
 8018d54:	482b      	ldr	r0, [pc, #172]	; (8018e04 <tcp_create_segment+0x130>)
 8018d56:	f003 fb4d 	bl	801c3f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8018d5a:	68bb      	ldr	r3, [r7, #8]
 8018d5c:	891a      	ldrh	r2, [r3, #8]
 8018d5e:	7dfb      	ldrb	r3, [r7, #23]
 8018d60:	b29b      	uxth	r3, r3
 8018d62:	1ad3      	subs	r3, r2, r3
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	693b      	ldr	r3, [r7, #16]
 8018d68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018d6a:	2114      	movs	r1, #20
 8018d6c:	68b8      	ldr	r0, [r7, #8]
 8018d6e:	f7fb f8ff 	bl	8013f70 <pbuf_add_header>
 8018d72:	4603      	mov	r3, r0
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d004      	beq.n	8018d82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018d78:	6938      	ldr	r0, [r7, #16]
 8018d7a:	f7fd f804 	bl	8015d86 <tcp_seg_free>
    return NULL;
 8018d7e:	2300      	movs	r3, #0
 8018d80:	e037      	b.n	8018df2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	685a      	ldr	r2, [r3, #4]
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	8ada      	ldrh	r2, [r3, #22]
 8018d90:	693b      	ldr	r3, [r7, #16]
 8018d92:	68dc      	ldr	r4, [r3, #12]
 8018d94:	4610      	mov	r0, r2
 8018d96:	f7f5 fa3d 	bl	800e214 <lwip_htons>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	8b1a      	ldrh	r2, [r3, #24]
 8018da2:	693b      	ldr	r3, [r7, #16]
 8018da4:	68dc      	ldr	r4, [r3, #12]
 8018da6:	4610      	mov	r0, r2
 8018da8:	f7f5 fa34 	bl	800e214 <lwip_htons>
 8018dac:	4603      	mov	r3, r0
 8018dae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	68dc      	ldr	r4, [r3, #12]
 8018db4:	6838      	ldr	r0, [r7, #0]
 8018db6:	f7f5 fa42 	bl	800e23e <lwip_htonl>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018dbe:	7dfb      	ldrb	r3, [r7, #23]
 8018dc0:	089b      	lsrs	r3, r3, #2
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	3305      	adds	r3, #5
 8018dc8:	b29b      	uxth	r3, r3
 8018dca:	031b      	lsls	r3, r3, #12
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	79fb      	ldrb	r3, [r7, #7]
 8018dd0:	b29b      	uxth	r3, r3
 8018dd2:	4313      	orrs	r3, r2
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	68dc      	ldr	r4, [r3, #12]
 8018dda:	4610      	mov	r0, r2
 8018ddc:	f7f5 fa1a 	bl	800e214 <lwip_htons>
 8018de0:	4603      	mov	r3, r0
 8018de2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018de4:	693b      	ldr	r3, [r7, #16]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	2200      	movs	r2, #0
 8018dea:	749a      	strb	r2, [r3, #18]
 8018dec:	2200      	movs	r2, #0
 8018dee:	74da      	strb	r2, [r3, #19]
  return seg;
 8018df0:	693b      	ldr	r3, [r7, #16]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	371c      	adds	r7, #28
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd90      	pop	{r4, r7, pc}
 8018dfa:	bf00      	nop
 8018dfc:	080222f4 	.word	0x080222f4
 8018e00:	08022348 	.word	0x08022348
 8018e04:	08022368 	.word	0x08022368
 8018e08:	08022390 	.word	0x08022390
 8018e0c:	080223b4 	.word	0x080223b4

08018e10 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b086      	sub	sp, #24
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	607b      	str	r3, [r7, #4]
 8018e18:	4603      	mov	r3, r0
 8018e1a:	73fb      	strb	r3, [r7, #15]
 8018e1c:	460b      	mov	r3, r1
 8018e1e:	81bb      	strh	r3, [r7, #12]
 8018e20:	4613      	mov	r3, r2
 8018e22:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018e24:	89bb      	ldrh	r3, [r7, #12]
 8018e26:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d105      	bne.n	8018e3a <tcp_pbuf_prealloc+0x2a>
 8018e2e:	4b30      	ldr	r3, [pc, #192]	; (8018ef0 <tcp_pbuf_prealloc+0xe0>)
 8018e30:	22e8      	movs	r2, #232	; 0xe8
 8018e32:	4930      	ldr	r1, [pc, #192]	; (8018ef4 <tcp_pbuf_prealloc+0xe4>)
 8018e34:	4830      	ldr	r0, [pc, #192]	; (8018ef8 <tcp_pbuf_prealloc+0xe8>)
 8018e36:	f003 fadd 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d105      	bne.n	8018e4c <tcp_pbuf_prealloc+0x3c>
 8018e40:	4b2b      	ldr	r3, [pc, #172]	; (8018ef0 <tcp_pbuf_prealloc+0xe0>)
 8018e42:	22e9      	movs	r2, #233	; 0xe9
 8018e44:	492d      	ldr	r1, [pc, #180]	; (8018efc <tcp_pbuf_prealloc+0xec>)
 8018e46:	482c      	ldr	r0, [pc, #176]	; (8018ef8 <tcp_pbuf_prealloc+0xe8>)
 8018e48:	f003 fad4 	bl	801c3f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018e4c:	89ba      	ldrh	r2, [r7, #12]
 8018e4e:	897b      	ldrh	r3, [r7, #10]
 8018e50:	429a      	cmp	r2, r3
 8018e52:	d221      	bcs.n	8018e98 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e58:	f003 0302 	and.w	r3, r3, #2
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d111      	bne.n	8018e84 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018e60:	6a3b      	ldr	r3, [r7, #32]
 8018e62:	8b5b      	ldrh	r3, [r3, #26]
 8018e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d115      	bne.n	8018e98 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018e6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d007      	beq.n	8018e84 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018e74:	6a3b      	ldr	r3, [r7, #32]
 8018e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d103      	bne.n	8018e84 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018e7c:	6a3b      	ldr	r3, [r7, #32]
 8018e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d009      	beq.n	8018e98 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018e84:	89bb      	ldrh	r3, [r7, #12]
 8018e86:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018e8a:	f023 0203 	bic.w	r2, r3, #3
 8018e8e:	897b      	ldrh	r3, [r7, #10]
 8018e90:	4293      	cmp	r3, r2
 8018e92:	bf28      	it	cs
 8018e94:	4613      	movcs	r3, r2
 8018e96:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018e98:	8af9      	ldrh	r1, [r7, #22]
 8018e9a:	7bfb      	ldrb	r3, [r7, #15]
 8018e9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7fa fe17 	bl	8013ad4 <pbuf_alloc>
 8018ea6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018ea8:	693b      	ldr	r3, [r7, #16]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d101      	bne.n	8018eb2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	e019      	b.n	8018ee6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018eb2:	693b      	ldr	r3, [r7, #16]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d006      	beq.n	8018ec8 <tcp_pbuf_prealloc+0xb8>
 8018eba:	4b0d      	ldr	r3, [pc, #52]	; (8018ef0 <tcp_pbuf_prealloc+0xe0>)
 8018ebc:	f240 120b 	movw	r2, #267	; 0x10b
 8018ec0:	490f      	ldr	r1, [pc, #60]	; (8018f00 <tcp_pbuf_prealloc+0xf0>)
 8018ec2:	480d      	ldr	r0, [pc, #52]	; (8018ef8 <tcp_pbuf_prealloc+0xe8>)
 8018ec4:	f003 fa96 	bl	801c3f4 <iprintf>
  *oversize = p->len - length;
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	895a      	ldrh	r2, [r3, #10]
 8018ecc:	89bb      	ldrh	r3, [r7, #12]
 8018ece:	1ad3      	subs	r3, r2, r3
 8018ed0:	b29a      	uxth	r2, r3
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	89ba      	ldrh	r2, [r7, #12]
 8018eda:	811a      	strh	r2, [r3, #8]
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	891a      	ldrh	r2, [r3, #8]
 8018ee0:	693b      	ldr	r3, [r7, #16]
 8018ee2:	815a      	strh	r2, [r3, #10]
  return p;
 8018ee4:	693b      	ldr	r3, [r7, #16]
}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	080222f4 	.word	0x080222f4
 8018ef4:	080223cc 	.word	0x080223cc
 8018ef8:	08022368 	.word	0x08022368
 8018efc:	080223f0 	.word	0x080223f0
 8018f00:	08022410 	.word	0x08022410

08018f04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b082      	sub	sp, #8
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	460b      	mov	r3, r1
 8018f0e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d106      	bne.n	8018f24 <tcp_write_checks+0x20>
 8018f16:	4b33      	ldr	r3, [pc, #204]	; (8018fe4 <tcp_write_checks+0xe0>)
 8018f18:	f240 1233 	movw	r2, #307	; 0x133
 8018f1c:	4932      	ldr	r1, [pc, #200]	; (8018fe8 <tcp_write_checks+0xe4>)
 8018f1e:	4833      	ldr	r0, [pc, #204]	; (8018fec <tcp_write_checks+0xe8>)
 8018f20:	f003 fa68 	bl	801c3f4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	7d1b      	ldrb	r3, [r3, #20]
 8018f28:	2b04      	cmp	r3, #4
 8018f2a:	d00e      	beq.n	8018f4a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018f30:	2b07      	cmp	r3, #7
 8018f32:	d00a      	beq.n	8018f4a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018f38:	2b02      	cmp	r3, #2
 8018f3a:	d006      	beq.n	8018f4a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018f40:	2b03      	cmp	r3, #3
 8018f42:	d002      	beq.n	8018f4a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018f44:	f06f 030a 	mvn.w	r3, #10
 8018f48:	e048      	b.n	8018fdc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018f4a:	887b      	ldrh	r3, [r7, #2]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d101      	bne.n	8018f54 <tcp_write_checks+0x50>
    return ERR_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e043      	b.n	8018fdc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018f5a:	887a      	ldrh	r2, [r7, #2]
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	d909      	bls.n	8018f74 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	8b5b      	ldrh	r3, [r3, #26]
 8018f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f68:	b29a      	uxth	r2, r3
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f72:	e033      	b.n	8018fdc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f7a:	2b08      	cmp	r3, #8
 8018f7c:	d909      	bls.n	8018f92 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	8b5b      	ldrh	r3, [r3, #26]
 8018f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f86:	b29a      	uxth	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f90:	e024      	b.n	8018fdc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d00f      	beq.n	8018fbc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d11a      	bne.n	8018fda <tcp_write_checks+0xd6>
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d116      	bne.n	8018fda <tcp_write_checks+0xd6>
 8018fac:	4b0d      	ldr	r3, [pc, #52]	; (8018fe4 <tcp_write_checks+0xe0>)
 8018fae:	f240 1255 	movw	r2, #341	; 0x155
 8018fb2:	490f      	ldr	r1, [pc, #60]	; (8018ff0 <tcp_write_checks+0xec>)
 8018fb4:	480d      	ldr	r0, [pc, #52]	; (8018fec <tcp_write_checks+0xe8>)
 8018fb6:	f003 fa1d 	bl	801c3f4 <iprintf>
 8018fba:	e00e      	b.n	8018fda <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d103      	bne.n	8018fcc <tcp_write_checks+0xc8>
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d006      	beq.n	8018fda <tcp_write_checks+0xd6>
 8018fcc:	4b05      	ldr	r3, [pc, #20]	; (8018fe4 <tcp_write_checks+0xe0>)
 8018fce:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018fd2:	4908      	ldr	r1, [pc, #32]	; (8018ff4 <tcp_write_checks+0xf0>)
 8018fd4:	4805      	ldr	r0, [pc, #20]	; (8018fec <tcp_write_checks+0xe8>)
 8018fd6:	f003 fa0d 	bl	801c3f4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018fda:	2300      	movs	r3, #0
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3708      	adds	r7, #8
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	080222f4 	.word	0x080222f4
 8018fe8:	08022424 	.word	0x08022424
 8018fec:	08022368 	.word	0x08022368
 8018ff0:	08022444 	.word	0x08022444
 8018ff4:	08022480 	.word	0x08022480

08018ff8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018ff8:	b590      	push	{r4, r7, lr}
 8018ffa:	b09b      	sub	sp, #108	; 0x6c
 8018ffc:	af04      	add	r7, sp, #16
 8018ffe:	60f8      	str	r0, [r7, #12]
 8019000:	60b9      	str	r1, [r7, #8]
 8019002:	4611      	mov	r1, r2
 8019004:	461a      	mov	r2, r3
 8019006:	460b      	mov	r3, r1
 8019008:	80fb      	strh	r3, [r7, #6]
 801900a:	4613      	mov	r3, r2
 801900c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801900e:	2300      	movs	r3, #0
 8019010:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019012:	2300      	movs	r3, #0
 8019014:	653b      	str	r3, [r7, #80]	; 0x50
 8019016:	2300      	movs	r3, #0
 8019018:	64fb      	str	r3, [r7, #76]	; 0x4c
 801901a:	2300      	movs	r3, #0
 801901c:	64bb      	str	r3, [r7, #72]	; 0x48
 801901e:	2300      	movs	r3, #0
 8019020:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019022:	2300      	movs	r3, #0
 8019024:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019028:	2300      	movs	r3, #0
 801902a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801902e:	2300      	movs	r3, #0
 8019030:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019032:	2300      	movs	r3, #0
 8019034:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019036:	2300      	movs	r3, #0
 8019038:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d109      	bne.n	8019054 <tcp_write+0x5c>
 8019040:	4ba4      	ldr	r3, [pc, #656]	; (80192d4 <tcp_write+0x2dc>)
 8019042:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019046:	49a4      	ldr	r1, [pc, #656]	; (80192d8 <tcp_write+0x2e0>)
 8019048:	48a4      	ldr	r0, [pc, #656]	; (80192dc <tcp_write+0x2e4>)
 801904a:	f003 f9d3 	bl	801c3f4 <iprintf>
 801904e:	f06f 030f 	mvn.w	r3, #15
 8019052:	e32a      	b.n	80196aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801905a:	085b      	lsrs	r3, r3, #1
 801905c:	b29a      	uxth	r2, r3
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019062:	4293      	cmp	r3, r2
 8019064:	bf28      	it	cs
 8019066:	4613      	movcs	r3, r2
 8019068:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801906a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801906c:	2b00      	cmp	r3, #0
 801906e:	d102      	bne.n	8019076 <tcp_write+0x7e>
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019074:	e000      	b.n	8019078 <tcp_write+0x80>
 8019076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019078:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d109      	bne.n	8019094 <tcp_write+0x9c>
 8019080:	4b94      	ldr	r3, [pc, #592]	; (80192d4 <tcp_write+0x2dc>)
 8019082:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019086:	4996      	ldr	r1, [pc, #600]	; (80192e0 <tcp_write+0x2e8>)
 8019088:	4894      	ldr	r0, [pc, #592]	; (80192dc <tcp_write+0x2e4>)
 801908a:	f003 f9b3 	bl	801c3f4 <iprintf>
 801908e:	f06f 030f 	mvn.w	r3, #15
 8019092:	e30a      	b.n	80196aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019094:	88fb      	ldrh	r3, [r7, #6]
 8019096:	4619      	mov	r1, r3
 8019098:	68f8      	ldr	r0, [r7, #12]
 801909a:	f7ff ff33 	bl	8018f04 <tcp_write_checks>
 801909e:	4603      	mov	r3, r0
 80190a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80190a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d002      	beq.n	80190b2 <tcp_write+0xba>
    return err;
 80190ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80190b0:	e2fb      	b.n	80196aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190bc:	2300      	movs	r3, #0
 80190be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f000 80f6 	beq.w	80192b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190d0:	653b      	str	r3, [r7, #80]	; 0x50
 80190d2:	e002      	b.n	80190da <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80190d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80190da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d1f8      	bne.n	80190d4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80190e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190e4:	7a9b      	ldrb	r3, [r3, #10]
 80190e6:	009b      	lsls	r3, r3, #2
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	f003 0304 	and.w	r3, r3, #4
 80190ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80190f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80190f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190f4:	891b      	ldrh	r3, [r3, #8]
 80190f6:	4619      	mov	r1, r3
 80190f8:	8c3b      	ldrh	r3, [r7, #32]
 80190fa:	440b      	add	r3, r1
 80190fc:	429a      	cmp	r2, r3
 80190fe:	da06      	bge.n	801910e <tcp_write+0x116>
 8019100:	4b74      	ldr	r3, [pc, #464]	; (80192d4 <tcp_write+0x2dc>)
 8019102:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019106:	4977      	ldr	r1, [pc, #476]	; (80192e4 <tcp_write+0x2ec>)
 8019108:	4874      	ldr	r0, [pc, #464]	; (80192dc <tcp_write+0x2e4>)
 801910a:	f003 f973 	bl	801c3f4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801910e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019110:	891a      	ldrh	r2, [r3, #8]
 8019112:	8c3b      	ldrh	r3, [r7, #32]
 8019114:	4413      	add	r3, r2
 8019116:	b29b      	uxth	r3, r3
 8019118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801911a:	1ad3      	subs	r3, r2, r3
 801911c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019124:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019126:	8a7b      	ldrh	r3, [r7, #18]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d026      	beq.n	801917a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801912c:	8a7b      	ldrh	r3, [r7, #18]
 801912e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019130:	429a      	cmp	r2, r3
 8019132:	d206      	bcs.n	8019142 <tcp_write+0x14a>
 8019134:	4b67      	ldr	r3, [pc, #412]	; (80192d4 <tcp_write+0x2dc>)
 8019136:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801913a:	496b      	ldr	r1, [pc, #428]	; (80192e8 <tcp_write+0x2f0>)
 801913c:	4867      	ldr	r0, [pc, #412]	; (80192dc <tcp_write+0x2e4>)
 801913e:	f003 f959 	bl	801c3f4 <iprintf>
      seg = last_unsent;
 8019142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019144:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019146:	8a7b      	ldrh	r3, [r7, #18]
 8019148:	88fa      	ldrh	r2, [r7, #6]
 801914a:	4293      	cmp	r3, r2
 801914c:	bf28      	it	cs
 801914e:	4613      	movcs	r3, r2
 8019150:	b29b      	uxth	r3, r3
 8019152:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019154:	4293      	cmp	r3, r2
 8019156:	bf28      	it	cs
 8019158:	4613      	movcs	r3, r2
 801915a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801915c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019162:	4413      	add	r3, r2
 8019164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019168:	8a7a      	ldrh	r2, [r7, #18]
 801916a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801916c:	1ad3      	subs	r3, r2, r3
 801916e:	b29b      	uxth	r3, r3
 8019170:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019172:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019176:	1ad3      	subs	r3, r2, r3
 8019178:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801917a:	8a7b      	ldrh	r3, [r7, #18]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d00b      	beq.n	8019198 <tcp_write+0x1a0>
 8019180:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019184:	88fb      	ldrh	r3, [r7, #6]
 8019186:	429a      	cmp	r2, r3
 8019188:	d006      	beq.n	8019198 <tcp_write+0x1a0>
 801918a:	4b52      	ldr	r3, [pc, #328]	; (80192d4 <tcp_write+0x2dc>)
 801918c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019190:	4956      	ldr	r1, [pc, #344]	; (80192ec <tcp_write+0x2f4>)
 8019192:	4852      	ldr	r0, [pc, #328]	; (80192dc <tcp_write+0x2e4>)
 8019194:	f003 f92e 	bl	801c3f4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019198:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801919c:	88fb      	ldrh	r3, [r7, #6]
 801919e:	429a      	cmp	r2, r3
 80191a0:	f080 8167 	bcs.w	8019472 <tcp_write+0x47a>
 80191a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	f000 8163 	beq.w	8019472 <tcp_write+0x47a>
 80191ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191ae:	891b      	ldrh	r3, [r3, #8]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	f000 815e 	beq.w	8019472 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80191b6:	88fa      	ldrh	r2, [r7, #6]
 80191b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80191bc:	1ad2      	subs	r2, r2, r3
 80191be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191c0:	4293      	cmp	r3, r2
 80191c2:	bfa8      	it	ge
 80191c4:	4613      	movge	r3, r2
 80191c6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80191c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191ca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80191cc:	797b      	ldrb	r3, [r7, #5]
 80191ce:	f003 0301 	and.w	r3, r3, #1
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d027      	beq.n	8019226 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80191d6:	f107 0012 	add.w	r0, r7, #18
 80191da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191dc:	8bf9      	ldrh	r1, [r7, #30]
 80191de:	2301      	movs	r3, #1
 80191e0:	9302      	str	r3, [sp, #8]
 80191e2:	797b      	ldrb	r3, [r7, #5]
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	9300      	str	r3, [sp, #0]
 80191ea:	4603      	mov	r3, r0
 80191ec:	2000      	movs	r0, #0
 80191ee:	f7ff fe0f 	bl	8018e10 <tcp_pbuf_prealloc>
 80191f2:	6578      	str	r0, [r7, #84]	; 0x54
 80191f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f000 8225 	beq.w	8019646 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80191fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191fe:	6858      	ldr	r0, [r3, #4]
 8019200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019204:	68ba      	ldr	r2, [r7, #8]
 8019206:	4413      	add	r3, r2
 8019208:	8bfa      	ldrh	r2, [r7, #30]
 801920a:	4619      	mov	r1, r3
 801920c:	f002 fc80 	bl	801bb10 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019210:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019212:	f7fa ffd1 	bl	80141b8 <pbuf_clen>
 8019216:	4603      	mov	r3, r0
 8019218:	461a      	mov	r2, r3
 801921a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801921e:	4413      	add	r3, r2
 8019220:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019224:	e041      	b.n	80192aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019228:	685b      	ldr	r3, [r3, #4]
 801922a:	637b      	str	r3, [r7, #52]	; 0x34
 801922c:	e002      	b.n	8019234 <tcp_write+0x23c>
 801922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	637b      	str	r3, [r7, #52]	; 0x34
 8019234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d1f8      	bne.n	801922e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801923e:	7b1b      	ldrb	r3, [r3, #12]
 8019240:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019244:	2b00      	cmp	r3, #0
 8019246:	d115      	bne.n	8019274 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801924a:	685b      	ldr	r3, [r3, #4]
 801924c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801924e:	8952      	ldrh	r2, [r2, #10]
 8019250:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019252:	68ba      	ldr	r2, [r7, #8]
 8019254:	429a      	cmp	r2, r3
 8019256:	d10d      	bne.n	8019274 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801925c:	2b00      	cmp	r3, #0
 801925e:	d006      	beq.n	801926e <tcp_write+0x276>
 8019260:	4b1c      	ldr	r3, [pc, #112]	; (80192d4 <tcp_write+0x2dc>)
 8019262:	f240 2231 	movw	r2, #561	; 0x231
 8019266:	4922      	ldr	r1, [pc, #136]	; (80192f0 <tcp_write+0x2f8>)
 8019268:	481c      	ldr	r0, [pc, #112]	; (80192dc <tcp_write+0x2e4>)
 801926a:	f003 f8c3 	bl	801c3f4 <iprintf>
          extendlen = seglen;
 801926e:	8bfb      	ldrh	r3, [r7, #30]
 8019270:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8019272:	e01a      	b.n	80192aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019274:	8bfb      	ldrh	r3, [r7, #30]
 8019276:	2201      	movs	r2, #1
 8019278:	4619      	mov	r1, r3
 801927a:	2000      	movs	r0, #0
 801927c:	f7fa fc2a 	bl	8013ad4 <pbuf_alloc>
 8019280:	6578      	str	r0, [r7, #84]	; 0x54
 8019282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019284:	2b00      	cmp	r3, #0
 8019286:	f000 81e0 	beq.w	801964a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801928a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801928e:	68ba      	ldr	r2, [r7, #8]
 8019290:	441a      	add	r2, r3
 8019292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019294:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019296:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019298:	f7fa ff8e 	bl	80141b8 <pbuf_clen>
 801929c:	4603      	mov	r3, r0
 801929e:	461a      	mov	r2, r3
 80192a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80192a4:	4413      	add	r3, r2
 80192a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80192aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192ae:	8bfb      	ldrh	r3, [r7, #30]
 80192b0:	4413      	add	r3, r2
 80192b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80192b6:	e0dc      	b.n	8019472 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80192be:	2b00      	cmp	r3, #0
 80192c0:	f000 80d7 	beq.w	8019472 <tcp_write+0x47a>
 80192c4:	4b03      	ldr	r3, [pc, #12]	; (80192d4 <tcp_write+0x2dc>)
 80192c6:	f240 224a 	movw	r2, #586	; 0x24a
 80192ca:	490a      	ldr	r1, [pc, #40]	; (80192f4 <tcp_write+0x2fc>)
 80192cc:	4803      	ldr	r0, [pc, #12]	; (80192dc <tcp_write+0x2e4>)
 80192ce:	f003 f891 	bl	801c3f4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80192d2:	e0ce      	b.n	8019472 <tcp_write+0x47a>
 80192d4:	080222f4 	.word	0x080222f4
 80192d8:	080224b4 	.word	0x080224b4
 80192dc:	08022368 	.word	0x08022368
 80192e0:	080224cc 	.word	0x080224cc
 80192e4:	08022500 	.word	0x08022500
 80192e8:	08022518 	.word	0x08022518
 80192ec:	08022538 	.word	0x08022538
 80192f0:	08022558 	.word	0x08022558
 80192f4:	08022584 	.word	0x08022584
    struct pbuf *p;
    u16_t left = len - pos;
 80192f8:	88fa      	ldrh	r2, [r7, #6]
 80192fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192fe:	1ad3      	subs	r3, r2, r3
 8019300:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019302:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019306:	b29b      	uxth	r3, r3
 8019308:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801930a:	1ad3      	subs	r3, r2, r3
 801930c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801930e:	8b7a      	ldrh	r2, [r7, #26]
 8019310:	8bbb      	ldrh	r3, [r7, #28]
 8019312:	4293      	cmp	r3, r2
 8019314:	bf28      	it	cs
 8019316:	4613      	movcs	r3, r2
 8019318:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801931a:	797b      	ldrb	r3, [r7, #5]
 801931c:	f003 0301 	and.w	r3, r3, #1
 8019320:	2b00      	cmp	r3, #0
 8019322:	d036      	beq.n	8019392 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019324:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019328:	b29a      	uxth	r2, r3
 801932a:	8b3b      	ldrh	r3, [r7, #24]
 801932c:	4413      	add	r3, r2
 801932e:	b299      	uxth	r1, r3
 8019330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019332:	2b00      	cmp	r3, #0
 8019334:	bf0c      	ite	eq
 8019336:	2301      	moveq	r3, #1
 8019338:	2300      	movne	r3, #0
 801933a:	b2db      	uxtb	r3, r3
 801933c:	f107 0012 	add.w	r0, r7, #18
 8019340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019342:	9302      	str	r3, [sp, #8]
 8019344:	797b      	ldrb	r3, [r7, #5]
 8019346:	9301      	str	r3, [sp, #4]
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	4603      	mov	r3, r0
 801934e:	2036      	movs	r0, #54	; 0x36
 8019350:	f7ff fd5e 	bl	8018e10 <tcp_pbuf_prealloc>
 8019354:	6338      	str	r0, [r7, #48]	; 0x30
 8019356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019358:	2b00      	cmp	r3, #0
 801935a:	f000 8178 	beq.w	801964e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019360:	895b      	ldrh	r3, [r3, #10]
 8019362:	8b3a      	ldrh	r2, [r7, #24]
 8019364:	429a      	cmp	r2, r3
 8019366:	d906      	bls.n	8019376 <tcp_write+0x37e>
 8019368:	4b8c      	ldr	r3, [pc, #560]	; (801959c <tcp_write+0x5a4>)
 801936a:	f240 2266 	movw	r2, #614	; 0x266
 801936e:	498c      	ldr	r1, [pc, #560]	; (80195a0 <tcp_write+0x5a8>)
 8019370:	488c      	ldr	r0, [pc, #560]	; (80195a4 <tcp_write+0x5ac>)
 8019372:	f003 f83f 	bl	801c3f4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019378:	685a      	ldr	r2, [r3, #4]
 801937a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801937e:	18d0      	adds	r0, r2, r3
 8019380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	4413      	add	r3, r2
 8019388:	8b3a      	ldrh	r2, [r7, #24]
 801938a:	4619      	mov	r1, r3
 801938c:	f002 fbc0 	bl	801bb10 <memcpy>
 8019390:	e02f      	b.n	80193f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019392:	8a7b      	ldrh	r3, [r7, #18]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d006      	beq.n	80193a6 <tcp_write+0x3ae>
 8019398:	4b80      	ldr	r3, [pc, #512]	; (801959c <tcp_write+0x5a4>)
 801939a:	f240 2271 	movw	r2, #625	; 0x271
 801939e:	4982      	ldr	r1, [pc, #520]	; (80195a8 <tcp_write+0x5b0>)
 80193a0:	4880      	ldr	r0, [pc, #512]	; (80195a4 <tcp_write+0x5ac>)
 80193a2:	f003 f827 	bl	801c3f4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80193a6:	8b3b      	ldrh	r3, [r7, #24]
 80193a8:	2201      	movs	r2, #1
 80193aa:	4619      	mov	r1, r3
 80193ac:	2036      	movs	r0, #54	; 0x36
 80193ae:	f7fa fb91 	bl	8013ad4 <pbuf_alloc>
 80193b2:	6178      	str	r0, [r7, #20]
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	f000 814b 	beq.w	8019652 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80193bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193c0:	68ba      	ldr	r2, [r7, #8]
 80193c2:	441a      	add	r2, r3
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80193c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193cc:	b29b      	uxth	r3, r3
 80193ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80193d2:	4619      	mov	r1, r3
 80193d4:	2036      	movs	r0, #54	; 0x36
 80193d6:	f7fa fb7d 	bl	8013ad4 <pbuf_alloc>
 80193da:	6338      	str	r0, [r7, #48]	; 0x30
 80193dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d103      	bne.n	80193ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80193e2:	6978      	ldr	r0, [r7, #20]
 80193e4:	f7fa fe5a 	bl	801409c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80193e8:	e136      	b.n	8019658 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80193ea:	6979      	ldr	r1, [r7, #20]
 80193ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193ee:	f7fa ff23 	bl	8014238 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80193f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193f4:	f7fa fee0 	bl	80141b8 <pbuf_clen>
 80193f8:	4603      	mov	r3, r0
 80193fa:	461a      	mov	r2, r3
 80193fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019400:	4413      	add	r3, r2
 8019402:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019406:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801940a:	2b09      	cmp	r3, #9
 801940c:	d903      	bls.n	8019416 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801940e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019410:	f7fa fe44 	bl	801409c <pbuf_free>
      goto memerr;
 8019414:	e120      	b.n	8019658 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801941a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801941e:	441a      	add	r2, r3
 8019420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	4613      	mov	r3, r2
 8019428:	2200      	movs	r2, #0
 801942a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801942c:	68f8      	ldr	r0, [r7, #12]
 801942e:	f7ff fc51 	bl	8018cd4 <tcp_create_segment>
 8019432:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019436:	2b00      	cmp	r3, #0
 8019438:	f000 810d 	beq.w	8019656 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801943c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801943e:	2b00      	cmp	r3, #0
 8019440:	d102      	bne.n	8019448 <tcp_write+0x450>
      queue = seg;
 8019442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019444:	647b      	str	r3, [r7, #68]	; 0x44
 8019446:	e00c      	b.n	8019462 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801944a:	2b00      	cmp	r3, #0
 801944c:	d106      	bne.n	801945c <tcp_write+0x464>
 801944e:	4b53      	ldr	r3, [pc, #332]	; (801959c <tcp_write+0x5a4>)
 8019450:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019454:	4955      	ldr	r1, [pc, #340]	; (80195ac <tcp_write+0x5b4>)
 8019456:	4853      	ldr	r0, [pc, #332]	; (80195a4 <tcp_write+0x5ac>)
 8019458:	f002 ffcc 	bl	801c3f4 <iprintf>
      prev_seg->next = seg;
 801945c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801945e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019460:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019464:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019466:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801946a:	8b3b      	ldrh	r3, [r7, #24]
 801946c:	4413      	add	r3, r2
 801946e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019472:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019476:	88fb      	ldrh	r3, [r7, #6]
 8019478:	429a      	cmp	r2, r3
 801947a:	f4ff af3d 	bcc.w	80192f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801947e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019480:	2b00      	cmp	r3, #0
 8019482:	d02c      	beq.n	80194de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	62fb      	str	r3, [r7, #44]	; 0x2c
 801948a:	e01e      	b.n	80194ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948e:	891a      	ldrh	r2, [r3, #8]
 8019490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019492:	4413      	add	r3, r2
 8019494:	b29a      	uxth	r2, r3
 8019496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019498:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d110      	bne.n	80194c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80194a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a4:	685b      	ldr	r3, [r3, #4]
 80194a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194a8:	8952      	ldrh	r2, [r2, #10]
 80194aa:	4413      	add	r3, r2
 80194ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80194ae:	68b9      	ldr	r1, [r7, #8]
 80194b0:	4618      	mov	r0, r3
 80194b2:	f002 fb2d 	bl	801bb10 <memcpy>
        p->len += oversize_used;
 80194b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b8:	895a      	ldrh	r2, [r3, #10]
 80194ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194bc:	4413      	add	r3, r2
 80194be:	b29a      	uxth	r2, r3
 80194c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80194c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d1dd      	bne.n	801948c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80194d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194d2:	891a      	ldrh	r2, [r3, #8]
 80194d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194d6:	4413      	add	r3, r2
 80194d8:	b29a      	uxth	r2, r3
 80194da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80194de:	8a7a      	ldrh	r2, [r7, #18]
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80194e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d018      	beq.n	801951e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80194ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d106      	bne.n	8019500 <tcp_write+0x508>
 80194f2:	4b2a      	ldr	r3, [pc, #168]	; (801959c <tcp_write+0x5a4>)
 80194f4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80194f8:	492d      	ldr	r1, [pc, #180]	; (80195b0 <tcp_write+0x5b8>)
 80194fa:	482a      	ldr	r0, [pc, #168]	; (80195a4 <tcp_write+0x5ac>)
 80194fc:	f002 ff7a 	bl	801c3f4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019502:	685b      	ldr	r3, [r3, #4]
 8019504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019506:	4618      	mov	r0, r3
 8019508:	f7fa fe96 	bl	8014238 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801950c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801950e:	891a      	ldrh	r2, [r3, #8]
 8019510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019512:	891b      	ldrh	r3, [r3, #8]
 8019514:	4413      	add	r3, r2
 8019516:	b29a      	uxth	r2, r3
 8019518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801951a:	811a      	strh	r2, [r3, #8]
 801951c:	e037      	b.n	801958e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801951e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019520:	2b00      	cmp	r3, #0
 8019522:	d034      	beq.n	801958e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019526:	2b00      	cmp	r3, #0
 8019528:	d003      	beq.n	8019532 <tcp_write+0x53a>
 801952a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801952c:	685b      	ldr	r3, [r3, #4]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d106      	bne.n	8019540 <tcp_write+0x548>
 8019532:	4b1a      	ldr	r3, [pc, #104]	; (801959c <tcp_write+0x5a4>)
 8019534:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019538:	491e      	ldr	r1, [pc, #120]	; (80195b4 <tcp_write+0x5bc>)
 801953a:	481a      	ldr	r0, [pc, #104]	; (80195a4 <tcp_write+0x5ac>)
 801953c:	f002 ff5a 	bl	801c3f4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019542:	685b      	ldr	r3, [r3, #4]
 8019544:	62bb      	str	r3, [r7, #40]	; 0x28
 8019546:	e009      	b.n	801955c <tcp_write+0x564>
      p->tot_len += extendlen;
 8019548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954a:	891a      	ldrh	r2, [r3, #8]
 801954c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801954e:	4413      	add	r3, r2
 8019550:	b29a      	uxth	r2, r3
 8019552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019554:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	62bb      	str	r3, [r7, #40]	; 0x28
 801955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d1f1      	bne.n	8019548 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019566:	891a      	ldrh	r2, [r3, #8]
 8019568:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801956a:	4413      	add	r3, r2
 801956c:	b29a      	uxth	r2, r3
 801956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019570:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019574:	895a      	ldrh	r2, [r3, #10]
 8019576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019578:	4413      	add	r3, r2
 801957a:	b29a      	uxth	r2, r3
 801957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019582:	891a      	ldrh	r2, [r3, #8]
 8019584:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019586:	4413      	add	r3, r2
 8019588:	b29a      	uxth	r2, r3
 801958a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801958c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801958e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019590:	2b00      	cmp	r3, #0
 8019592:	d111      	bne.n	80195b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019598:	66da      	str	r2, [r3, #108]	; 0x6c
 801959a:	e010      	b.n	80195be <tcp_write+0x5c6>
 801959c:	080222f4 	.word	0x080222f4
 80195a0:	080225b4 	.word	0x080225b4
 80195a4:	08022368 	.word	0x08022368
 80195a8:	080225f4 	.word	0x080225f4
 80195ac:	08022604 	.word	0x08022604
 80195b0:	08022618 	.word	0x08022618
 80195b4:	08022650 	.word	0x08022650
  } else {
    last_unsent->next = queue;
 80195b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80195c2:	88fb      	ldrh	r3, [r7, #6]
 80195c4:	441a      	add	r2, r3
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80195d0:	88fb      	ldrh	r3, [r7, #6]
 80195d2:	1ad3      	subs	r3, r2, r3
 80195d4:	b29a      	uxth	r2, r3
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80195e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d00e      	beq.n	801960e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d10a      	bne.n	801960e <tcp_write+0x616>
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d106      	bne.n	801960e <tcp_write+0x616>
 8019600:	4b2c      	ldr	r3, [pc, #176]	; (80196b4 <tcp_write+0x6bc>)
 8019602:	f240 3212 	movw	r2, #786	; 0x312
 8019606:	492c      	ldr	r1, [pc, #176]	; (80196b8 <tcp_write+0x6c0>)
 8019608:	482c      	ldr	r0, [pc, #176]	; (80196bc <tcp_write+0x6c4>)
 801960a:	f002 fef3 	bl	801c3f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801960e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019610:	2b00      	cmp	r3, #0
 8019612:	d016      	beq.n	8019642 <tcp_write+0x64a>
 8019614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019616:	68db      	ldr	r3, [r3, #12]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d012      	beq.n	8019642 <tcp_write+0x64a>
 801961c:	797b      	ldrb	r3, [r7, #5]
 801961e:	f003 0302 	and.w	r3, r3, #2
 8019622:	2b00      	cmp	r3, #0
 8019624:	d10d      	bne.n	8019642 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	899b      	ldrh	r3, [r3, #12]
 801962c:	b29c      	uxth	r4, r3
 801962e:	2008      	movs	r0, #8
 8019630:	f7f4 fdf0 	bl	800e214 <lwip_htons>
 8019634:	4603      	mov	r3, r0
 8019636:	461a      	mov	r2, r3
 8019638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801963a:	68db      	ldr	r3, [r3, #12]
 801963c:	4322      	orrs	r2, r4
 801963e:	b292      	uxth	r2, r2
 8019640:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019642:	2300      	movs	r3, #0
 8019644:	e031      	b.n	80196aa <tcp_write+0x6b2>
          goto memerr;
 8019646:	bf00      	nop
 8019648:	e006      	b.n	8019658 <tcp_write+0x660>
            goto memerr;
 801964a:	bf00      	nop
 801964c:	e004      	b.n	8019658 <tcp_write+0x660>
        goto memerr;
 801964e:	bf00      	nop
 8019650:	e002      	b.n	8019658 <tcp_write+0x660>
        goto memerr;
 8019652:	bf00      	nop
 8019654:	e000      	b.n	8019658 <tcp_write+0x660>
      goto memerr;
 8019656:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	8b5b      	ldrh	r3, [r3, #26]
 801965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019660:	b29a      	uxth	r2, r3
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019668:	2b00      	cmp	r3, #0
 801966a:	d002      	beq.n	8019672 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801966c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801966e:	f7fa fd15 	bl	801409c <pbuf_free>
  }
  if (queue != NULL) {
 8019672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019674:	2b00      	cmp	r3, #0
 8019676:	d002      	beq.n	801967e <tcp_write+0x686>
    tcp_segs_free(queue);
 8019678:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801967a:	f7fc fb6f 	bl	8015d5c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019684:	2b00      	cmp	r3, #0
 8019686:	d00e      	beq.n	80196a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801968c:	2b00      	cmp	r3, #0
 801968e:	d10a      	bne.n	80196a6 <tcp_write+0x6ae>
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019694:	2b00      	cmp	r3, #0
 8019696:	d106      	bne.n	80196a6 <tcp_write+0x6ae>
 8019698:	4b06      	ldr	r3, [pc, #24]	; (80196b4 <tcp_write+0x6bc>)
 801969a:	f240 3227 	movw	r2, #807	; 0x327
 801969e:	4906      	ldr	r1, [pc, #24]	; (80196b8 <tcp_write+0x6c0>)
 80196a0:	4806      	ldr	r0, [pc, #24]	; (80196bc <tcp_write+0x6c4>)
 80196a2:	f002 fea7 	bl	801c3f4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80196a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	375c      	adds	r7, #92	; 0x5c
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd90      	pop	{r4, r7, pc}
 80196b2:	bf00      	nop
 80196b4:	080222f4 	.word	0x080222f4
 80196b8:	08022688 	.word	0x08022688
 80196bc:	08022368 	.word	0x08022368

080196c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80196c0:	b590      	push	{r4, r7, lr}
 80196c2:	b08b      	sub	sp, #44	; 0x2c
 80196c4:	af02      	add	r7, sp, #8
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	460b      	mov	r3, r1
 80196ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80196cc:	2300      	movs	r3, #0
 80196ce:	61fb      	str	r3, [r7, #28]
 80196d0:	2300      	movs	r3, #0
 80196d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80196d4:	2300      	movs	r3, #0
 80196d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d106      	bne.n	80196ec <tcp_split_unsent_seg+0x2c>
 80196de:	4b95      	ldr	r3, [pc, #596]	; (8019934 <tcp_split_unsent_seg+0x274>)
 80196e0:	f240 324b 	movw	r2, #843	; 0x34b
 80196e4:	4994      	ldr	r1, [pc, #592]	; (8019938 <tcp_split_unsent_seg+0x278>)
 80196e6:	4895      	ldr	r0, [pc, #596]	; (801993c <tcp_split_unsent_seg+0x27c>)
 80196e8:	f002 fe84 	bl	801c3f4 <iprintf>

  useg = pcb->unsent;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80196f2:	697b      	ldr	r3, [r7, #20]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d102      	bne.n	80196fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80196f8:	f04f 33ff 	mov.w	r3, #4294967295
 80196fc:	e116      	b.n	801992c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80196fe:	887b      	ldrh	r3, [r7, #2]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d109      	bne.n	8019718 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019704:	4b8b      	ldr	r3, [pc, #556]	; (8019934 <tcp_split_unsent_seg+0x274>)
 8019706:	f240 3253 	movw	r2, #851	; 0x353
 801970a:	498d      	ldr	r1, [pc, #564]	; (8019940 <tcp_split_unsent_seg+0x280>)
 801970c:	488b      	ldr	r0, [pc, #556]	; (801993c <tcp_split_unsent_seg+0x27c>)
 801970e:	f002 fe71 	bl	801c3f4 <iprintf>
    return ERR_VAL;
 8019712:	f06f 0305 	mvn.w	r3, #5
 8019716:	e109      	b.n	801992c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	891b      	ldrh	r3, [r3, #8]
 801971c:	887a      	ldrh	r2, [r7, #2]
 801971e:	429a      	cmp	r2, r3
 8019720:	d301      	bcc.n	8019726 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019722:	2300      	movs	r3, #0
 8019724:	e102      	b.n	801992c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801972a:	887a      	ldrh	r2, [r7, #2]
 801972c:	429a      	cmp	r2, r3
 801972e:	d906      	bls.n	801973e <tcp_split_unsent_seg+0x7e>
 8019730:	4b80      	ldr	r3, [pc, #512]	; (8019934 <tcp_split_unsent_seg+0x274>)
 8019732:	f240 325b 	movw	r2, #859	; 0x35b
 8019736:	4983      	ldr	r1, [pc, #524]	; (8019944 <tcp_split_unsent_seg+0x284>)
 8019738:	4880      	ldr	r0, [pc, #512]	; (801993c <tcp_split_unsent_seg+0x27c>)
 801973a:	f002 fe5b 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	891b      	ldrh	r3, [r3, #8]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d106      	bne.n	8019754 <tcp_split_unsent_seg+0x94>
 8019746:	4b7b      	ldr	r3, [pc, #492]	; (8019934 <tcp_split_unsent_seg+0x274>)
 8019748:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801974c:	497e      	ldr	r1, [pc, #504]	; (8019948 <tcp_split_unsent_seg+0x288>)
 801974e:	487b      	ldr	r0, [pc, #492]	; (801993c <tcp_split_unsent_seg+0x27c>)
 8019750:	f002 fe50 	bl	801c3f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	7a9b      	ldrb	r3, [r3, #10]
 8019758:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801975a:	7bfb      	ldrb	r3, [r7, #15]
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	b2db      	uxtb	r3, r3
 8019760:	f003 0304 	and.w	r3, r3, #4
 8019764:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	891a      	ldrh	r2, [r3, #8]
 801976a:	887b      	ldrh	r3, [r7, #2]
 801976c:	1ad3      	subs	r3, r2, r3
 801976e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019770:	7bbb      	ldrb	r3, [r7, #14]
 8019772:	b29a      	uxth	r2, r3
 8019774:	89bb      	ldrh	r3, [r7, #12]
 8019776:	4413      	add	r3, r2
 8019778:	b29b      	uxth	r3, r3
 801977a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801977e:	4619      	mov	r1, r3
 8019780:	2036      	movs	r0, #54	; 0x36
 8019782:	f7fa f9a7 	bl	8013ad4 <pbuf_alloc>
 8019786:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	2b00      	cmp	r3, #0
 801978c:	f000 80b7 	beq.w	80198fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019790:	697b      	ldr	r3, [r7, #20]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	891a      	ldrh	r2, [r3, #8]
 8019796:	697b      	ldr	r3, [r7, #20]
 8019798:	891b      	ldrh	r3, [r3, #8]
 801979a:	1ad3      	subs	r3, r2, r3
 801979c:	b29a      	uxth	r2, r3
 801979e:	887b      	ldrh	r3, [r7, #2]
 80197a0:	4413      	add	r3, r2
 80197a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	6858      	ldr	r0, [r3, #4]
 80197a8:	693b      	ldr	r3, [r7, #16]
 80197aa:	685a      	ldr	r2, [r3, #4]
 80197ac:	7bbb      	ldrb	r3, [r7, #14]
 80197ae:	18d1      	adds	r1, r2, r3
 80197b0:	897b      	ldrh	r3, [r7, #10]
 80197b2:	89ba      	ldrh	r2, [r7, #12]
 80197b4:	f7fa fe78 	bl	80144a8 <pbuf_copy_partial>
 80197b8:	4603      	mov	r3, r0
 80197ba:	461a      	mov	r2, r3
 80197bc:	89bb      	ldrh	r3, [r7, #12]
 80197be:	4293      	cmp	r3, r2
 80197c0:	f040 809f 	bne.w	8019902 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80197c4:	697b      	ldr	r3, [r7, #20]
 80197c6:	68db      	ldr	r3, [r3, #12]
 80197c8:	899b      	ldrh	r3, [r3, #12]
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	4618      	mov	r0, r3
 80197ce:	f7f4 fd21 	bl	800e214 <lwip_htons>
 80197d2:	4603      	mov	r3, r0
 80197d4:	b2db      	uxtb	r3, r3
 80197d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80197dc:	2300      	movs	r3, #0
 80197de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80197e0:	7efb      	ldrb	r3, [r7, #27]
 80197e2:	f003 0308 	and.w	r3, r3, #8
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d007      	beq.n	80197fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80197ea:	7efb      	ldrb	r3, [r7, #27]
 80197ec:	f023 0308 	bic.w	r3, r3, #8
 80197f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80197f2:	7ebb      	ldrb	r3, [r7, #26]
 80197f4:	f043 0308 	orr.w	r3, r3, #8
 80197f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80197fa:	7efb      	ldrb	r3, [r7, #27]
 80197fc:	f003 0301 	and.w	r3, r3, #1
 8019800:	2b00      	cmp	r3, #0
 8019802:	d007      	beq.n	8019814 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019804:	7efb      	ldrb	r3, [r7, #27]
 8019806:	f023 0301 	bic.w	r3, r3, #1
 801980a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801980c:	7ebb      	ldrb	r3, [r7, #26]
 801980e:	f043 0301 	orr.w	r3, r3, #1
 8019812:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019814:	697b      	ldr	r3, [r7, #20]
 8019816:	68db      	ldr	r3, [r3, #12]
 8019818:	685b      	ldr	r3, [r3, #4]
 801981a:	4618      	mov	r0, r3
 801981c:	f7f4 fd0f 	bl	800e23e <lwip_htonl>
 8019820:	4602      	mov	r2, r0
 8019822:	887b      	ldrh	r3, [r7, #2]
 8019824:	18d1      	adds	r1, r2, r3
 8019826:	7eba      	ldrb	r2, [r7, #26]
 8019828:	7bfb      	ldrb	r3, [r7, #15]
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	460b      	mov	r3, r1
 801982e:	6939      	ldr	r1, [r7, #16]
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f7ff fa4f 	bl	8018cd4 <tcp_create_segment>
 8019836:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d063      	beq.n	8019906 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	685b      	ldr	r3, [r3, #4]
 8019842:	4618      	mov	r0, r3
 8019844:	f7fa fcb8 	bl	80141b8 <pbuf_clen>
 8019848:	4603      	mov	r3, r0
 801984a:	461a      	mov	r2, r3
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019852:	1a9b      	subs	r3, r3, r2
 8019854:	b29a      	uxth	r2, r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	6858      	ldr	r0, [r3, #4]
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	891a      	ldrh	r2, [r3, #8]
 8019866:	89bb      	ldrh	r3, [r7, #12]
 8019868:	1ad3      	subs	r3, r2, r3
 801986a:	b29b      	uxth	r3, r3
 801986c:	4619      	mov	r1, r3
 801986e:	f7fa fa8f 	bl	8013d90 <pbuf_realloc>
  useg->len -= remainder;
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	891a      	ldrh	r2, [r3, #8]
 8019876:	89bb      	ldrh	r3, [r7, #12]
 8019878:	1ad3      	subs	r3, r2, r3
 801987a:	b29a      	uxth	r2, r3
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	68db      	ldr	r3, [r3, #12]
 8019884:	899b      	ldrh	r3, [r3, #12]
 8019886:	b29c      	uxth	r4, r3
 8019888:	7efb      	ldrb	r3, [r7, #27]
 801988a:	b29b      	uxth	r3, r3
 801988c:	4618      	mov	r0, r3
 801988e:	f7f4 fcc1 	bl	800e214 <lwip_htons>
 8019892:	4603      	mov	r3, r0
 8019894:	461a      	mov	r2, r3
 8019896:	697b      	ldr	r3, [r7, #20]
 8019898:	68db      	ldr	r3, [r3, #12]
 801989a:	4322      	orrs	r2, r4
 801989c:	b292      	uxth	r2, r2
 801989e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80198a0:	697b      	ldr	r3, [r7, #20]
 80198a2:	685b      	ldr	r3, [r3, #4]
 80198a4:	4618      	mov	r0, r3
 80198a6:	f7fa fc87 	bl	80141b8 <pbuf_clen>
 80198aa:	4603      	mov	r3, r0
 80198ac:	461a      	mov	r2, r3
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198b4:	4413      	add	r3, r2
 80198b6:	b29a      	uxth	r2, r3
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80198be:	69fb      	ldr	r3, [r7, #28]
 80198c0:	685b      	ldr	r3, [r3, #4]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7fa fc78 	bl	80141b8 <pbuf_clen>
 80198c8:	4603      	mov	r3, r0
 80198ca:	461a      	mov	r2, r3
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198d2:	4413      	add	r3, r2
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	681a      	ldr	r2, [r3, #0]
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	69fa      	ldr	r2, [r7, #28]
 80198e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80198ea:	69fb      	ldr	r3, [r7, #28]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d103      	bne.n	80198fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80198fa:	2300      	movs	r3, #0
 80198fc:	e016      	b.n	801992c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80198fe:	bf00      	nop
 8019900:	e002      	b.n	8019908 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019902:	bf00      	nop
 8019904:	e000      	b.n	8019908 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019906:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d006      	beq.n	801991c <tcp_split_unsent_seg+0x25c>
 801990e:	4b09      	ldr	r3, [pc, #36]	; (8019934 <tcp_split_unsent_seg+0x274>)
 8019910:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019914:	490d      	ldr	r1, [pc, #52]	; (801994c <tcp_split_unsent_seg+0x28c>)
 8019916:	4809      	ldr	r0, [pc, #36]	; (801993c <tcp_split_unsent_seg+0x27c>)
 8019918:	f002 fd6c 	bl	801c3f4 <iprintf>
  if (p != NULL) {
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d002      	beq.n	8019928 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019922:	6938      	ldr	r0, [r7, #16]
 8019924:	f7fa fbba 	bl	801409c <pbuf_free>
  }

  return ERR_MEM;
 8019928:	f04f 33ff 	mov.w	r3, #4294967295
}
 801992c:	4618      	mov	r0, r3
 801992e:	3724      	adds	r7, #36	; 0x24
 8019930:	46bd      	mov	sp, r7
 8019932:	bd90      	pop	{r4, r7, pc}
 8019934:	080222f4 	.word	0x080222f4
 8019938:	080226a8 	.word	0x080226a8
 801993c:	08022368 	.word	0x08022368
 8019940:	080226cc 	.word	0x080226cc
 8019944:	080226f0 	.word	0x080226f0
 8019948:	08022700 	.word	0x08022700
 801994c:	08022710 	.word	0x08022710

08019950 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019950:	b590      	push	{r4, r7, lr}
 8019952:	b085      	sub	sp, #20
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d106      	bne.n	801996c <tcp_send_fin+0x1c>
 801995e:	4b21      	ldr	r3, [pc, #132]	; (80199e4 <tcp_send_fin+0x94>)
 8019960:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019964:	4920      	ldr	r1, [pc, #128]	; (80199e8 <tcp_send_fin+0x98>)
 8019966:	4821      	ldr	r0, [pc, #132]	; (80199ec <tcp_send_fin+0x9c>)
 8019968:	f002 fd44 	bl	801c3f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019970:	2b00      	cmp	r3, #0
 8019972:	d02e      	beq.n	80199d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019978:	60fb      	str	r3, [r7, #12]
 801997a:	e002      	b.n	8019982 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d1f8      	bne.n	801997c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	68db      	ldr	r3, [r3, #12]
 801998e:	899b      	ldrh	r3, [r3, #12]
 8019990:	b29b      	uxth	r3, r3
 8019992:	4618      	mov	r0, r3
 8019994:	f7f4 fc3e 	bl	800e214 <lwip_htons>
 8019998:	4603      	mov	r3, r0
 801999a:	b2db      	uxtb	r3, r3
 801999c:	f003 0307 	and.w	r3, r3, #7
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d116      	bne.n	80199d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	899b      	ldrh	r3, [r3, #12]
 80199aa:	b29c      	uxth	r4, r3
 80199ac:	2001      	movs	r0, #1
 80199ae:	f7f4 fc31 	bl	800e214 <lwip_htons>
 80199b2:	4603      	mov	r3, r0
 80199b4:	461a      	mov	r2, r3
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	68db      	ldr	r3, [r3, #12]
 80199ba:	4322      	orrs	r2, r4
 80199bc:	b292      	uxth	r2, r2
 80199be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	8b5b      	ldrh	r3, [r3, #26]
 80199c4:	f043 0320 	orr.w	r3, r3, #32
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80199ce:	2300      	movs	r3, #0
 80199d0:	e004      	b.n	80199dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80199d2:	2101      	movs	r1, #1
 80199d4:	6878      	ldr	r0, [r7, #4]
 80199d6:	f000 f80b 	bl	80199f0 <tcp_enqueue_flags>
 80199da:	4603      	mov	r3, r0
}
 80199dc:	4618      	mov	r0, r3
 80199de:	3714      	adds	r7, #20
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd90      	pop	{r4, r7, pc}
 80199e4:	080222f4 	.word	0x080222f4
 80199e8:	0802271c 	.word	0x0802271c
 80199ec:	08022368 	.word	0x08022368

080199f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b08a      	sub	sp, #40	; 0x28
 80199f4:	af02      	add	r7, sp, #8
 80199f6:	6078      	str	r0, [r7, #4]
 80199f8:	460b      	mov	r3, r1
 80199fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80199fc:	2300      	movs	r3, #0
 80199fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019a00:	2300      	movs	r3, #0
 8019a02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019a04:	78fb      	ldrb	r3, [r7, #3]
 8019a06:	f003 0303 	and.w	r3, r3, #3
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d106      	bne.n	8019a1c <tcp_enqueue_flags+0x2c>
 8019a0e:	4b67      	ldr	r3, [pc, #412]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019a10:	f240 4211 	movw	r2, #1041	; 0x411
 8019a14:	4966      	ldr	r1, [pc, #408]	; (8019bb0 <tcp_enqueue_flags+0x1c0>)
 8019a16:	4867      	ldr	r0, [pc, #412]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019a18:	f002 fcec 	bl	801c3f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d106      	bne.n	8019a30 <tcp_enqueue_flags+0x40>
 8019a22:	4b62      	ldr	r3, [pc, #392]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019a24:	f240 4213 	movw	r2, #1043	; 0x413
 8019a28:	4963      	ldr	r1, [pc, #396]	; (8019bb8 <tcp_enqueue_flags+0x1c8>)
 8019a2a:	4862      	ldr	r0, [pc, #392]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019a2c:	f002 fce2 	bl	801c3f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019a30:	78fb      	ldrb	r3, [r7, #3]
 8019a32:	f003 0302 	and.w	r3, r3, #2
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d001      	beq.n	8019a3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a3e:	7ffb      	ldrb	r3, [r7, #31]
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	b2db      	uxtb	r3, r3
 8019a44:	f003 0304 	and.w	r3, r3, #4
 8019a48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019a4a:	7dfb      	ldrb	r3, [r7, #23]
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a52:	4619      	mov	r1, r3
 8019a54:	2036      	movs	r0, #54	; 0x36
 8019a56:	f7fa f83d 	bl	8013ad4 <pbuf_alloc>
 8019a5a:	6138      	str	r0, [r7, #16]
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d109      	bne.n	8019a76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	8b5b      	ldrh	r3, [r3, #26]
 8019a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a6a:	b29a      	uxth	r2, r3
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019a70:	f04f 33ff 	mov.w	r3, #4294967295
 8019a74:	e095      	b.n	8019ba2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019a76:	693b      	ldr	r3, [r7, #16]
 8019a78:	895a      	ldrh	r2, [r3, #10]
 8019a7a:	7dfb      	ldrb	r3, [r7, #23]
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d206      	bcs.n	8019a90 <tcp_enqueue_flags+0xa0>
 8019a82:	4b4a      	ldr	r3, [pc, #296]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019a84:	f240 4239 	movw	r2, #1081	; 0x439
 8019a88:	494c      	ldr	r1, [pc, #304]	; (8019bbc <tcp_enqueue_flags+0x1cc>)
 8019a8a:	484a      	ldr	r0, [pc, #296]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019a8c:	f002 fcb2 	bl	801c3f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019a94:	78fa      	ldrb	r2, [r7, #3]
 8019a96:	7ffb      	ldrb	r3, [r7, #31]
 8019a98:	9300      	str	r3, [sp, #0]
 8019a9a:	460b      	mov	r3, r1
 8019a9c:	6939      	ldr	r1, [r7, #16]
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f7ff f918 	bl	8018cd4 <tcp_create_segment>
 8019aa4:	60f8      	str	r0, [r7, #12]
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d109      	bne.n	8019ac0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	8b5b      	ldrh	r3, [r3, #26]
 8019ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ab4:	b29a      	uxth	r2, r3
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019aba:	f04f 33ff 	mov.w	r3, #4294967295
 8019abe:	e070      	b.n	8019ba2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	68db      	ldr	r3, [r3, #12]
 8019ac4:	f003 0303 	and.w	r3, r3, #3
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d006      	beq.n	8019ada <tcp_enqueue_flags+0xea>
 8019acc:	4b37      	ldr	r3, [pc, #220]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019ace:	f240 4242 	movw	r2, #1090	; 0x442
 8019ad2:	493b      	ldr	r1, [pc, #236]	; (8019bc0 <tcp_enqueue_flags+0x1d0>)
 8019ad4:	4837      	ldr	r0, [pc, #220]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019ad6:	f002 fc8d 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	891b      	ldrh	r3, [r3, #8]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d006      	beq.n	8019af0 <tcp_enqueue_flags+0x100>
 8019ae2:	4b32      	ldr	r3, [pc, #200]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019ae4:	f240 4243 	movw	r2, #1091	; 0x443
 8019ae8:	4936      	ldr	r1, [pc, #216]	; (8019bc4 <tcp_enqueue_flags+0x1d4>)
 8019aea:	4832      	ldr	r0, [pc, #200]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019aec:	f002 fc82 	bl	801c3f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d103      	bne.n	8019b00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	68fa      	ldr	r2, [r7, #12]
 8019afc:	66da      	str	r2, [r3, #108]	; 0x6c
 8019afe:	e00d      	b.n	8019b1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b04:	61bb      	str	r3, [r7, #24]
 8019b06:	e002      	b.n	8019b0e <tcp_enqueue_flags+0x11e>
 8019b08:	69bb      	ldr	r3, [r7, #24]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	61bb      	str	r3, [r7, #24]
 8019b0e:	69bb      	ldr	r3, [r7, #24]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d1f8      	bne.n	8019b08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019b16:	69bb      	ldr	r3, [r7, #24]
 8019b18:	68fa      	ldr	r2, [r7, #12]
 8019b1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2200      	movs	r2, #0
 8019b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019b24:	78fb      	ldrb	r3, [r7, #3]
 8019b26:	f003 0302 	and.w	r3, r3, #2
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d104      	bne.n	8019b38 <tcp_enqueue_flags+0x148>
 8019b2e:	78fb      	ldrb	r3, [r7, #3]
 8019b30:	f003 0301 	and.w	r3, r3, #1
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d004      	beq.n	8019b42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b3c:	1c5a      	adds	r2, r3, #1
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019b42:	78fb      	ldrb	r3, [r7, #3]
 8019b44:	f003 0301 	and.w	r3, r3, #1
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d006      	beq.n	8019b5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	8b5b      	ldrh	r3, [r3, #26]
 8019b50:	f043 0320 	orr.w	r3, r3, #32
 8019b54:	b29a      	uxth	r2, r3
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7fa fb2a 	bl	80141b8 <pbuf_clen>
 8019b64:	4603      	mov	r3, r0
 8019b66:	461a      	mov	r2, r3
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b6e:	4413      	add	r3, r2
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d00e      	beq.n	8019ba0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d10a      	bne.n	8019ba0 <tcp_enqueue_flags+0x1b0>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d106      	bne.n	8019ba0 <tcp_enqueue_flags+0x1b0>
 8019b92:	4b06      	ldr	r3, [pc, #24]	; (8019bac <tcp_enqueue_flags+0x1bc>)
 8019b94:	f240 4265 	movw	r2, #1125	; 0x465
 8019b98:	490b      	ldr	r1, [pc, #44]	; (8019bc8 <tcp_enqueue_flags+0x1d8>)
 8019b9a:	4806      	ldr	r0, [pc, #24]	; (8019bb4 <tcp_enqueue_flags+0x1c4>)
 8019b9c:	f002 fc2a 	bl	801c3f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019ba0:	2300      	movs	r3, #0
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3720      	adds	r7, #32
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	080222f4 	.word	0x080222f4
 8019bb0:	08022738 	.word	0x08022738
 8019bb4:	08022368 	.word	0x08022368
 8019bb8:	08022790 	.word	0x08022790
 8019bbc:	080227b0 	.word	0x080227b0
 8019bc0:	080227ec 	.word	0x080227ec
 8019bc4:	08022804 	.word	0x08022804
 8019bc8:	08022830 	.word	0x08022830

08019bcc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019bcc:	b5b0      	push	{r4, r5, r7, lr}
 8019bce:	b08a      	sub	sp, #40	; 0x28
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d106      	bne.n	8019be8 <tcp_output+0x1c>
 8019bda:	4b9e      	ldr	r3, [pc, #632]	; (8019e54 <tcp_output+0x288>)
 8019bdc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019be0:	499d      	ldr	r1, [pc, #628]	; (8019e58 <tcp_output+0x28c>)
 8019be2:	489e      	ldr	r0, [pc, #632]	; (8019e5c <tcp_output+0x290>)
 8019be4:	f002 fc06 	bl	801c3f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	7d1b      	ldrb	r3, [r3, #20]
 8019bec:	2b01      	cmp	r3, #1
 8019bee:	d106      	bne.n	8019bfe <tcp_output+0x32>
 8019bf0:	4b98      	ldr	r3, [pc, #608]	; (8019e54 <tcp_output+0x288>)
 8019bf2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019bf6:	499a      	ldr	r1, [pc, #616]	; (8019e60 <tcp_output+0x294>)
 8019bf8:	4898      	ldr	r0, [pc, #608]	; (8019e5c <tcp_output+0x290>)
 8019bfa:	f002 fbfb 	bl	801c3f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019bfe:	4b99      	ldr	r3, [pc, #612]	; (8019e64 <tcp_output+0x298>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	687a      	ldr	r2, [r7, #4]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d101      	bne.n	8019c0c <tcp_output+0x40>
    return ERR_OK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	e1ce      	b.n	8019faa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019c18:	4293      	cmp	r3, r2
 8019c1a:	bf28      	it	cs
 8019c1c:	4613      	movcs	r3, r2
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d10b      	bne.n	8019c46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	8b5b      	ldrh	r3, [r3, #26]
 8019c32:	f003 0302 	and.w	r3, r3, #2
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	f000 81aa 	beq.w	8019f90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019c3c:	6878      	ldr	r0, [r7, #4]
 8019c3e:	f000 fdcb 	bl	801a7d8 <tcp_send_empty_ack>
 8019c42:	4603      	mov	r3, r0
 8019c44:	e1b1      	b.n	8019faa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019c46:	6879      	ldr	r1, [r7, #4]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	3304      	adds	r3, #4
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	6878      	ldr	r0, [r7, #4]
 8019c50:	f7ff f824 	bl	8018c9c <tcp_route>
 8019c54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d102      	bne.n	8019c62 <tcp_output+0x96>
    return ERR_RTE;
 8019c5c:	f06f 0303 	mvn.w	r3, #3
 8019c60:	e1a3      	b.n	8019faa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d003      	beq.n	8019c70 <tcp_output+0xa4>
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d111      	bne.n	8019c94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019c70:	697b      	ldr	r3, [r7, #20]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d002      	beq.n	8019c7c <tcp_output+0xb0>
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	3304      	adds	r3, #4
 8019c7a:	e000      	b.n	8019c7e <tcp_output+0xb2>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019c80:	693b      	ldr	r3, [r7, #16]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d102      	bne.n	8019c8c <tcp_output+0xc0>
      return ERR_RTE;
 8019c86:	f06f 0303 	mvn.w	r3, #3
 8019c8a:	e18e      	b.n	8019faa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019c8c:	693b      	ldr	r3, [r7, #16]
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c96:	68db      	ldr	r3, [r3, #12]
 8019c98:	685b      	ldr	r3, [r3, #4]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7f4 facf 	bl	800e23e <lwip_htonl>
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ca6:	1ad3      	subs	r3, r2, r3
 8019ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019caa:	8912      	ldrh	r2, [r2, #8]
 8019cac:	4413      	add	r3, r2
 8019cae:	69ba      	ldr	r2, [r7, #24]
 8019cb0:	429a      	cmp	r2, r3
 8019cb2:	d227      	bcs.n	8019d04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019cba:	461a      	mov	r2, r3
 8019cbc:	69bb      	ldr	r3, [r7, #24]
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d114      	bne.n	8019cec <tcp_output+0x120>
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d110      	bne.n	8019cec <tcp_output+0x120>
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d10b      	bne.n	8019cec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2201      	movs	r2, #1
 8019ce0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	8b5b      	ldrh	r3, [r3, #26]
 8019cf0:	f003 0302 	and.w	r3, r3, #2
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	f000 814d 	beq.w	8019f94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019cfa:	6878      	ldr	r0, [r7, #4]
 8019cfc:	f000 fd6c 	bl	801a7d8 <tcp_send_empty_ack>
 8019d00:	4603      	mov	r3, r0
 8019d02:	e152      	b.n	8019faa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	2200      	movs	r2, #0
 8019d08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019d12:	6a3b      	ldr	r3, [r7, #32]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	f000 811c 	beq.w	8019f52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019d1a:	e002      	b.n	8019d22 <tcp_output+0x156>
 8019d1c:	6a3b      	ldr	r3, [r7, #32]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	623b      	str	r3, [r7, #32]
 8019d22:	6a3b      	ldr	r3, [r7, #32]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d1f8      	bne.n	8019d1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019d2a:	e112      	b.n	8019f52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2e:	68db      	ldr	r3, [r3, #12]
 8019d30:	899b      	ldrh	r3, [r3, #12]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7f4 fa6d 	bl	800e214 <lwip_htons>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	b2db      	uxtb	r3, r3
 8019d3e:	f003 0304 	and.w	r3, r3, #4
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d006      	beq.n	8019d54 <tcp_output+0x188>
 8019d46:	4b43      	ldr	r3, [pc, #268]	; (8019e54 <tcp_output+0x288>)
 8019d48:	f240 5236 	movw	r2, #1334	; 0x536
 8019d4c:	4946      	ldr	r1, [pc, #280]	; (8019e68 <tcp_output+0x29c>)
 8019d4e:	4843      	ldr	r0, [pc, #268]	; (8019e5c <tcp_output+0x290>)
 8019d50:	f002 fb50 	bl	801c3f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d01f      	beq.n	8019d9c <tcp_output+0x1d0>
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	8b5b      	ldrh	r3, [r3, #26]
 8019d60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d119      	bne.n	8019d9c <tcp_output+0x1d0>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d00b      	beq.n	8019d88 <tcp_output+0x1bc>
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d110      	bne.n	8019d9c <tcp_output+0x1d0>
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d7e:	891a      	ldrh	r2, [r3, #8]
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d209      	bcs.n	8019d9c <tcp_output+0x1d0>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d004      	beq.n	8019d9c <tcp_output+0x1d0>
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d98:	2b08      	cmp	r3, #8
 8019d9a:	d901      	bls.n	8019da0 <tcp_output+0x1d4>
 8019d9c:	2301      	movs	r3, #1
 8019d9e:	e000      	b.n	8019da2 <tcp_output+0x1d6>
 8019da0:	2300      	movs	r3, #0
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d106      	bne.n	8019db4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	8b5b      	ldrh	r3, [r3, #26]
 8019daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	f000 80e4 	beq.w	8019f7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	7d1b      	ldrb	r3, [r3, #20]
 8019db8:	2b02      	cmp	r3, #2
 8019dba:	d00d      	beq.n	8019dd8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dbe:	68db      	ldr	r3, [r3, #12]
 8019dc0:	899b      	ldrh	r3, [r3, #12]
 8019dc2:	b29c      	uxth	r4, r3
 8019dc4:	2010      	movs	r0, #16
 8019dc6:	f7f4 fa25 	bl	800e214 <lwip_htons>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	461a      	mov	r2, r3
 8019dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd0:	68db      	ldr	r3, [r3, #12]
 8019dd2:	4322      	orrs	r2, r4
 8019dd4:	b292      	uxth	r2, r2
 8019dd6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019dd8:	697a      	ldr	r2, [r7, #20]
 8019dda:	6879      	ldr	r1, [r7, #4]
 8019ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dde:	f000 f909 	bl	8019ff4 <tcp_output_segment>
 8019de2:	4603      	mov	r3, r0
 8019de4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d009      	beq.n	8019e02 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	8b5b      	ldrh	r3, [r3, #26]
 8019df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	835a      	strh	r2, [r3, #26]
      return err;
 8019dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e00:	e0d3      	b.n	8019faa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	7d1b      	ldrb	r3, [r3, #20]
 8019e0e:	2b02      	cmp	r3, #2
 8019e10:	d006      	beq.n	8019e20 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	8b5b      	ldrh	r3, [r3, #26]
 8019e16:	f023 0303 	bic.w	r3, r3, #3
 8019e1a:	b29a      	uxth	r2, r3
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e22:	68db      	ldr	r3, [r3, #12]
 8019e24:	685b      	ldr	r3, [r3, #4]
 8019e26:	4618      	mov	r0, r3
 8019e28:	f7f4 fa09 	bl	800e23e <lwip_htonl>
 8019e2c:	4604      	mov	r4, r0
 8019e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e30:	891b      	ldrh	r3, [r3, #8]
 8019e32:	461d      	mov	r5, r3
 8019e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e36:	68db      	ldr	r3, [r3, #12]
 8019e38:	899b      	ldrh	r3, [r3, #12]
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f4 f9e9 	bl	800e214 <lwip_htons>
 8019e42:	4603      	mov	r3, r0
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	f003 0303 	and.w	r3, r3, #3
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d00e      	beq.n	8019e6c <tcp_output+0x2a0>
 8019e4e:	2301      	movs	r3, #1
 8019e50:	e00d      	b.n	8019e6e <tcp_output+0x2a2>
 8019e52:	bf00      	nop
 8019e54:	080222f4 	.word	0x080222f4
 8019e58:	08022858 	.word	0x08022858
 8019e5c:	08022368 	.word	0x08022368
 8019e60:	08022870 	.word	0x08022870
 8019e64:	240079ec 	.word	0x240079ec
 8019e68:	08022898 	.word	0x08022898
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	442b      	add	r3, r5
 8019e70:	4423      	add	r3, r4
 8019e72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	1ad3      	subs	r3, r2, r3
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	da02      	bge.n	8019e86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	68ba      	ldr	r2, [r7, #8]
 8019e84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e88:	891b      	ldrh	r3, [r3, #8]
 8019e8a:	461c      	mov	r4, r3
 8019e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	899b      	ldrh	r3, [r3, #12]
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7f4 f9bd 	bl	800e214 <lwip_htons>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	f003 0303 	and.w	r3, r3, #3
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d001      	beq.n	8019eaa <tcp_output+0x2de>
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	e000      	b.n	8019eac <tcp_output+0x2e0>
 8019eaa:	2300      	movs	r3, #0
 8019eac:	4423      	add	r3, r4
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d049      	beq.n	8019f46 <tcp_output+0x37a>
      seg->next = NULL;
 8019eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d105      	bne.n	8019ecc <tcp_output+0x300>
        pcb->unacked = seg;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ec4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec8:	623b      	str	r3, [r7, #32]
 8019eca:	e03f      	b.n	8019f4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ece:	68db      	ldr	r3, [r3, #12]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f7f4 f9b3 	bl	800e23e <lwip_htonl>
 8019ed8:	4604      	mov	r4, r0
 8019eda:	6a3b      	ldr	r3, [r7, #32]
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	685b      	ldr	r3, [r3, #4]
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	f7f4 f9ac 	bl	800e23e <lwip_htonl>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	1ae3      	subs	r3, r4, r3
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	da24      	bge.n	8019f38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	3370      	adds	r3, #112	; 0x70
 8019ef2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019ef4:	e002      	b.n	8019efc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019ef6:	69fb      	ldr	r3, [r7, #28]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019efc:	69fb      	ldr	r3, [r7, #28]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d011      	beq.n	8019f28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019f04:	69fb      	ldr	r3, [r7, #28]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	68db      	ldr	r3, [r3, #12]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7f4 f996 	bl	800e23e <lwip_htonl>
 8019f12:	4604      	mov	r4, r0
 8019f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f16:	68db      	ldr	r3, [r3, #12]
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7f4 f98f 	bl	800e23e <lwip_htonl>
 8019f20:	4603      	mov	r3, r0
 8019f22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	dbe6      	blt.n	8019ef6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	681a      	ldr	r2, [r3, #0]
 8019f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f34:	601a      	str	r2, [r3, #0]
 8019f36:	e009      	b.n	8019f4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019f38:	6a3b      	ldr	r3, [r7, #32]
 8019f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019f3e:	6a3b      	ldr	r3, [r7, #32]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	623b      	str	r3, [r7, #32]
 8019f44:	e002      	b.n	8019f4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f48:	f7fb ff1d 	bl	8015d86 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d012      	beq.n	8019f7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5a:	68db      	ldr	r3, [r3, #12]
 8019f5c:	685b      	ldr	r3, [r3, #4]
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f7f4 f96d 	bl	800e23e <lwip_htonl>
 8019f64:	4602      	mov	r2, r0
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f6a:	1ad3      	subs	r3, r2, r3
 8019f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f6e:	8912      	ldrh	r2, [r2, #8]
 8019f70:	4413      	add	r3, r2
  while (seg != NULL &&
 8019f72:	69ba      	ldr	r2, [r7, #24]
 8019f74:	429a      	cmp	r2, r3
 8019f76:	f4bf aed9 	bcs.w	8019d2c <tcp_output+0x160>
 8019f7a:	e000      	b.n	8019f7e <tcp_output+0x3b2>
      break;
 8019f7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d108      	bne.n	8019f98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019f8e:	e004      	b.n	8019f9a <tcp_output+0x3ce>
    goto output_done;
 8019f90:	bf00      	nop
 8019f92:	e002      	b.n	8019f9a <tcp_output+0x3ce>
    goto output_done;
 8019f94:	bf00      	nop
 8019f96:	e000      	b.n	8019f9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019f98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	8b5b      	ldrh	r3, [r3, #26]
 8019f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019fa2:	b29a      	uxth	r2, r3
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019fa8:	2300      	movs	r3, #0
}
 8019faa:	4618      	mov	r0, r3
 8019fac:	3728      	adds	r7, #40	; 0x28
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8019fb2:	bf00      	nop

08019fb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d106      	bne.n	8019fd0 <tcp_output_segment_busy+0x1c>
 8019fc2:	4b09      	ldr	r3, [pc, #36]	; (8019fe8 <tcp_output_segment_busy+0x34>)
 8019fc4:	f240 529a 	movw	r2, #1434	; 0x59a
 8019fc8:	4908      	ldr	r1, [pc, #32]	; (8019fec <tcp_output_segment_busy+0x38>)
 8019fca:	4809      	ldr	r0, [pc, #36]	; (8019ff0 <tcp_output_segment_busy+0x3c>)
 8019fcc:	f002 fa12 	bl	801c3f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	685b      	ldr	r3, [r3, #4]
 8019fd4:	7b9b      	ldrb	r3, [r3, #14]
 8019fd6:	2b01      	cmp	r3, #1
 8019fd8:	d001      	beq.n	8019fde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019fda:	2301      	movs	r3, #1
 8019fdc:	e000      	b.n	8019fe0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019fde:	2300      	movs	r3, #0
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3708      	adds	r7, #8
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	bd80      	pop	{r7, pc}
 8019fe8:	080222f4 	.word	0x080222f4
 8019fec:	080228b0 	.word	0x080228b0
 8019ff0:	08022368 	.word	0x08022368

08019ff4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019ff4:	b5b0      	push	{r4, r5, r7, lr}
 8019ff6:	b08c      	sub	sp, #48	; 0x30
 8019ff8:	af04      	add	r7, sp, #16
 8019ffa:	60f8      	str	r0, [r7, #12]
 8019ffc:	60b9      	str	r1, [r7, #8]
 8019ffe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d106      	bne.n	801a014 <tcp_output_segment+0x20>
 801a006:	4b63      	ldr	r3, [pc, #396]	; (801a194 <tcp_output_segment+0x1a0>)
 801a008:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a00c:	4962      	ldr	r1, [pc, #392]	; (801a198 <tcp_output_segment+0x1a4>)
 801a00e:	4863      	ldr	r0, [pc, #396]	; (801a19c <tcp_output_segment+0x1a8>)
 801a010:	f002 f9f0 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d106      	bne.n	801a028 <tcp_output_segment+0x34>
 801a01a:	4b5e      	ldr	r3, [pc, #376]	; (801a194 <tcp_output_segment+0x1a0>)
 801a01c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a020:	495f      	ldr	r1, [pc, #380]	; (801a1a0 <tcp_output_segment+0x1ac>)
 801a022:	485e      	ldr	r0, [pc, #376]	; (801a19c <tcp_output_segment+0x1a8>)
 801a024:	f002 f9e6 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d106      	bne.n	801a03c <tcp_output_segment+0x48>
 801a02e:	4b59      	ldr	r3, [pc, #356]	; (801a194 <tcp_output_segment+0x1a0>)
 801a030:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a034:	495b      	ldr	r1, [pc, #364]	; (801a1a4 <tcp_output_segment+0x1b0>)
 801a036:	4859      	ldr	r0, [pc, #356]	; (801a19c <tcp_output_segment+0x1a8>)
 801a038:	f002 f9dc 	bl	801c3f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a03c:	68f8      	ldr	r0, [r7, #12]
 801a03e:	f7ff ffb9 	bl	8019fb4 <tcp_output_segment_busy>
 801a042:	4603      	mov	r3, r0
 801a044:	2b00      	cmp	r3, #0
 801a046:	d001      	beq.n	801a04c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a048:	2300      	movs	r3, #0
 801a04a:	e09f      	b.n	801a18c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	68dc      	ldr	r4, [r3, #12]
 801a054:	4610      	mov	r0, r2
 801a056:	f7f4 f8f2 	bl	800e23e <lwip_htonl>
 801a05a:	4603      	mov	r3, r0
 801a05c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	68dc      	ldr	r4, [r3, #12]
 801a066:	4610      	mov	r0, r2
 801a068:	f7f4 f8d4 	bl	800e214 <lwip_htons>
 801a06c:	4603      	mov	r3, r0
 801a06e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a074:	68ba      	ldr	r2, [r7, #8]
 801a076:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a078:	441a      	add	r2, r3
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	68db      	ldr	r3, [r3, #12]
 801a082:	3314      	adds	r3, #20
 801a084:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	7a9b      	ldrb	r3, [r3, #10]
 801a08a:	f003 0301 	and.w	r3, r3, #1
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d015      	beq.n	801a0be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	3304      	adds	r3, #4
 801a096:	461a      	mov	r2, r3
 801a098:	6879      	ldr	r1, [r7, #4]
 801a09a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a09e:	f7fc fa37 	bl	8016510 <tcp_eff_send_mss_netif>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a0a6:	8b7b      	ldrh	r3, [r7, #26]
 801a0a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7f4 f8c6 	bl	800e23e <lwip_htonl>
 801a0b2:	4602      	mov	r2, r0
 801a0b4:	69fb      	ldr	r3, [r7, #28]
 801a0b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a0b8:	69fb      	ldr	r3, [r7, #28]
 801a0ba:	3304      	adds	r3, #4
 801a0bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	da02      	bge.n	801a0ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a0c8:	68bb      	ldr	r3, [r7, #8]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d10c      	bne.n	801a0f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a0d6:	4b34      	ldr	r3, [pc, #208]	; (801a1a8 <tcp_output_segment+0x1b4>)
 801a0d8:	681a      	ldr	r2, [r3, #0]
 801a0da:	68bb      	ldr	r3, [r7, #8]
 801a0dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	68db      	ldr	r3, [r3, #12]
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	f7f4 f8aa 	bl	800e23e <lwip_htonl>
 801a0ea:	4602      	mov	r2, r0
 801a0ec:	68bb      	ldr	r3, [r7, #8]
 801a0ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	68da      	ldr	r2, [r3, #12]
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	1ad3      	subs	r3, r2, r3
 801a0fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	8959      	ldrh	r1, [r3, #10]
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	685b      	ldr	r3, [r3, #4]
 801a108:	8b3a      	ldrh	r2, [r7, #24]
 801a10a:	1a8a      	subs	r2, r1, r2
 801a10c:	b292      	uxth	r2, r2
 801a10e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	685b      	ldr	r3, [r3, #4]
 801a114:	8919      	ldrh	r1, [r3, #8]
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	685b      	ldr	r3, [r3, #4]
 801a11a:	8b3a      	ldrh	r2, [r7, #24]
 801a11c:	1a8a      	subs	r2, r1, r2
 801a11e:	b292      	uxth	r2, r2
 801a120:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	685b      	ldr	r3, [r3, #4]
 801a126:	68fa      	ldr	r2, [r7, #12]
 801a128:	68d2      	ldr	r2, [r2, #12]
 801a12a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	68db      	ldr	r3, [r3, #12]
 801a130:	2200      	movs	r2, #0
 801a132:	741a      	strb	r2, [r3, #16]
 801a134:	2200      	movs	r2, #0
 801a136:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	68db      	ldr	r3, [r3, #12]
 801a13c:	f103 0214 	add.w	r2, r3, #20
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	7a9b      	ldrb	r3, [r3, #10]
 801a144:	009b      	lsls	r3, r3, #2
 801a146:	f003 0304 	and.w	r3, r3, #4
 801a14a:	4413      	add	r3, r2
 801a14c:	69fa      	ldr	r2, [r7, #28]
 801a14e:	429a      	cmp	r2, r3
 801a150:	d006      	beq.n	801a160 <tcp_output_segment+0x16c>
 801a152:	4b10      	ldr	r3, [pc, #64]	; (801a194 <tcp_output_segment+0x1a0>)
 801a154:	f240 621c 	movw	r2, #1564	; 0x61c
 801a158:	4914      	ldr	r1, [pc, #80]	; (801a1ac <tcp_output_segment+0x1b8>)
 801a15a:	4810      	ldr	r0, [pc, #64]	; (801a19c <tcp_output_segment+0x1a8>)
 801a15c:	f002 f94a 	bl	801c3f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	6858      	ldr	r0, [r3, #4]
 801a164:	68b9      	ldr	r1, [r7, #8]
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	1d1c      	adds	r4, r3, #4
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	7add      	ldrb	r5, [r3, #11]
 801a16e:	68bb      	ldr	r3, [r7, #8]
 801a170:	7a9b      	ldrb	r3, [r3, #10]
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	9202      	str	r2, [sp, #8]
 801a176:	2206      	movs	r2, #6
 801a178:	9201      	str	r2, [sp, #4]
 801a17a:	9300      	str	r3, [sp, #0]
 801a17c:	462b      	mov	r3, r5
 801a17e:	4622      	mov	r2, r4
 801a180:	f7f7 fbdc 	bl	801193c <ip4_output_if>
 801a184:	4603      	mov	r3, r0
 801a186:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	3720      	adds	r7, #32
 801a190:	46bd      	mov	sp, r7
 801a192:	bdb0      	pop	{r4, r5, r7, pc}
 801a194:	080222f4 	.word	0x080222f4
 801a198:	080228d8 	.word	0x080228d8
 801a19c:	08022368 	.word	0x08022368
 801a1a0:	080228f8 	.word	0x080228f8
 801a1a4:	08022918 	.word	0x08022918
 801a1a8:	240079dc 	.word	0x240079dc
 801a1ac:	0802293c 	.word	0x0802293c

0801a1b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a1b0:	b5b0      	push	{r4, r5, r7, lr}
 801a1b2:	b084      	sub	sp, #16
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d106      	bne.n	801a1cc <tcp_rexmit_rto_prepare+0x1c>
 801a1be:	4b31      	ldr	r3, [pc, #196]	; (801a284 <tcp_rexmit_rto_prepare+0xd4>)
 801a1c0:	f240 6263 	movw	r2, #1635	; 0x663
 801a1c4:	4930      	ldr	r1, [pc, #192]	; (801a288 <tcp_rexmit_rto_prepare+0xd8>)
 801a1c6:	4831      	ldr	r0, [pc, #196]	; (801a28c <tcp_rexmit_rto_prepare+0xdc>)
 801a1c8:	f002 f914 	bl	801c3f4 <iprintf>

  if (pcb->unacked == NULL) {
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d102      	bne.n	801a1da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a1d4:	f06f 0305 	mvn.w	r3, #5
 801a1d8:	e050      	b.n	801a27c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1de:	60fb      	str	r3, [r7, #12]
 801a1e0:	e00b      	b.n	801a1fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a1e2:	68f8      	ldr	r0, [r7, #12]
 801a1e4:	f7ff fee6 	bl	8019fb4 <tcp_output_segment_busy>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d002      	beq.n	801a1f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a1ee:	f06f 0305 	mvn.w	r3, #5
 801a1f2:	e043      	b.n	801a27c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	60fb      	str	r3, [r7, #12]
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d1ef      	bne.n	801a1e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a202:	68f8      	ldr	r0, [r7, #12]
 801a204:	f7ff fed6 	bl	8019fb4 <tcp_output_segment_busy>
 801a208:	4603      	mov	r3, r0
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d002      	beq.n	801a214 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a20e:	f06f 0305 	mvn.w	r3, #5
 801a212:	e033      	b.n	801a27c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	2200      	movs	r2, #0
 801a228:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	8b5b      	ldrh	r3, [r3, #26]
 801a22e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a232:	b29a      	uxth	r2, r3
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	68db      	ldr	r3, [r3, #12]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	4618      	mov	r0, r3
 801a240:	f7f3 fffd 	bl	800e23e <lwip_htonl>
 801a244:	4604      	mov	r4, r0
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	891b      	ldrh	r3, [r3, #8]
 801a24a:	461d      	mov	r5, r3
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	68db      	ldr	r3, [r3, #12]
 801a250:	899b      	ldrh	r3, [r3, #12]
 801a252:	b29b      	uxth	r3, r3
 801a254:	4618      	mov	r0, r3
 801a256:	f7f3 ffdd 	bl	800e214 <lwip_htons>
 801a25a:	4603      	mov	r3, r0
 801a25c:	b2db      	uxtb	r3, r3
 801a25e:	f003 0303 	and.w	r3, r3, #3
 801a262:	2b00      	cmp	r3, #0
 801a264:	d001      	beq.n	801a26a <tcp_rexmit_rto_prepare+0xba>
 801a266:	2301      	movs	r3, #1
 801a268:	e000      	b.n	801a26c <tcp_rexmit_rto_prepare+0xbc>
 801a26a:	2300      	movs	r3, #0
 801a26c:	442b      	add	r3, r5
 801a26e:	18e2      	adds	r2, r4, r3
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2200      	movs	r2, #0
 801a278:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a27a:	2300      	movs	r3, #0
}
 801a27c:	4618      	mov	r0, r3
 801a27e:	3710      	adds	r7, #16
 801a280:	46bd      	mov	sp, r7
 801a282:	bdb0      	pop	{r4, r5, r7, pc}
 801a284:	080222f4 	.word	0x080222f4
 801a288:	08022950 	.word	0x08022950
 801a28c:	08022368 	.word	0x08022368

0801a290 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d106      	bne.n	801a2ac <tcp_rexmit_rto_commit+0x1c>
 801a29e:	4b0d      	ldr	r3, [pc, #52]	; (801a2d4 <tcp_rexmit_rto_commit+0x44>)
 801a2a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a2a4:	490c      	ldr	r1, [pc, #48]	; (801a2d8 <tcp_rexmit_rto_commit+0x48>)
 801a2a6:	480d      	ldr	r0, [pc, #52]	; (801a2dc <tcp_rexmit_rto_commit+0x4c>)
 801a2a8:	f002 f8a4 	bl	801c3f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a2b2:	2bff      	cmp	r3, #255	; 0xff
 801a2b4:	d007      	beq.n	801a2c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a2bc:	3301      	adds	r3, #1
 801a2be:	b2da      	uxtb	r2, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f7ff fc80 	bl	8019bcc <tcp_output>
}
 801a2cc:	bf00      	nop
 801a2ce:	3708      	adds	r7, #8
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}
 801a2d4:	080222f4 	.word	0x080222f4
 801a2d8:	08022974 	.word	0x08022974
 801a2dc:	08022368 	.word	0x08022368

0801a2e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d106      	bne.n	801a2fc <tcp_rexmit_rto+0x1c>
 801a2ee:	4b0a      	ldr	r3, [pc, #40]	; (801a318 <tcp_rexmit_rto+0x38>)
 801a2f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a2f4:	4909      	ldr	r1, [pc, #36]	; (801a31c <tcp_rexmit_rto+0x3c>)
 801a2f6:	480a      	ldr	r0, [pc, #40]	; (801a320 <tcp_rexmit_rto+0x40>)
 801a2f8:	f002 f87c 	bl	801c3f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	f7ff ff57 	bl	801a1b0 <tcp_rexmit_rto_prepare>
 801a302:	4603      	mov	r3, r0
 801a304:	2b00      	cmp	r3, #0
 801a306:	d102      	bne.n	801a30e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f7ff ffc1 	bl	801a290 <tcp_rexmit_rto_commit>
  }
}
 801a30e:	bf00      	nop
 801a310:	3708      	adds	r7, #8
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}
 801a316:	bf00      	nop
 801a318:	080222f4 	.word	0x080222f4
 801a31c:	08022998 	.word	0x08022998
 801a320:	08022368 	.word	0x08022368

0801a324 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a324:	b590      	push	{r4, r7, lr}
 801a326:	b085      	sub	sp, #20
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d106      	bne.n	801a340 <tcp_rexmit+0x1c>
 801a332:	4b2f      	ldr	r3, [pc, #188]	; (801a3f0 <tcp_rexmit+0xcc>)
 801a334:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a338:	492e      	ldr	r1, [pc, #184]	; (801a3f4 <tcp_rexmit+0xd0>)
 801a33a:	482f      	ldr	r0, [pc, #188]	; (801a3f8 <tcp_rexmit+0xd4>)
 801a33c:	f002 f85a 	bl	801c3f4 <iprintf>

  if (pcb->unacked == NULL) {
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a344:	2b00      	cmp	r3, #0
 801a346:	d102      	bne.n	801a34e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a348:	f06f 0305 	mvn.w	r3, #5
 801a34c:	e04c      	b.n	801a3e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a352:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a354:	68b8      	ldr	r0, [r7, #8]
 801a356:	f7ff fe2d 	bl	8019fb4 <tcp_output_segment_busy>
 801a35a:	4603      	mov	r3, r0
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d002      	beq.n	801a366 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a360:	f06f 0305 	mvn.w	r3, #5
 801a364:	e040      	b.n	801a3e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	681a      	ldr	r2, [r3, #0]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	336c      	adds	r3, #108	; 0x6c
 801a372:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a374:	e002      	b.n	801a37c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d011      	beq.n	801a3a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	68db      	ldr	r3, [r3, #12]
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	4618      	mov	r0, r3
 801a38e:	f7f3 ff56 	bl	800e23e <lwip_htonl>
 801a392:	4604      	mov	r4, r0
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	68db      	ldr	r3, [r3, #12]
 801a398:	685b      	ldr	r3, [r3, #4]
 801a39a:	4618      	mov	r0, r3
 801a39c:	f7f3 ff4f 	bl	800e23e <lwip_htonl>
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	dbe6      	blt.n	801a376 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	68ba      	ldr	r2, [r7, #8]
 801a3b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d103      	bne.n	801a3c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3cc:	2bff      	cmp	r3, #255	; 0xff
 801a3ce:	d007      	beq.n	801a3e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	b2da      	uxtb	r2, r3
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a3e6:	2300      	movs	r3, #0
}
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	3714      	adds	r7, #20
 801a3ec:	46bd      	mov	sp, r7
 801a3ee:	bd90      	pop	{r4, r7, pc}
 801a3f0:	080222f4 	.word	0x080222f4
 801a3f4:	080229b4 	.word	0x080229b4
 801a3f8:	08022368 	.word	0x08022368

0801a3fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b082      	sub	sp, #8
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d106      	bne.n	801a418 <tcp_rexmit_fast+0x1c>
 801a40a:	4b2a      	ldr	r3, [pc, #168]	; (801a4b4 <tcp_rexmit_fast+0xb8>)
 801a40c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a410:	4929      	ldr	r1, [pc, #164]	; (801a4b8 <tcp_rexmit_fast+0xbc>)
 801a412:	482a      	ldr	r0, [pc, #168]	; (801a4bc <tcp_rexmit_fast+0xc0>)
 801a414:	f001 ffee 	bl	801c3f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d045      	beq.n	801a4ac <tcp_rexmit_fast+0xb0>
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	8b5b      	ldrh	r3, [r3, #26]
 801a424:	f003 0304 	and.w	r3, r3, #4
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d13f      	bne.n	801a4ac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a42c:	6878      	ldr	r0, [r7, #4]
 801a42e:	f7ff ff79 	bl	801a324 <tcp_rexmit>
 801a432:	4603      	mov	r3, r0
 801a434:	2b00      	cmp	r3, #0
 801a436:	d139      	bne.n	801a4ac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a444:	4293      	cmp	r3, r2
 801a446:	bf28      	it	cs
 801a448:	4613      	movcs	r3, r2
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	da00      	bge.n	801a452 <tcp_rexmit_fast+0x56>
 801a450:	3301      	adds	r3, #1
 801a452:	105b      	asrs	r3, r3, #1
 801a454:	b29a      	uxth	r2, r3
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a462:	461a      	mov	r2, r3
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a468:	005b      	lsls	r3, r3, #1
 801a46a:	429a      	cmp	r2, r3
 801a46c:	d206      	bcs.n	801a47c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a472:	005b      	lsls	r3, r3, #1
 801a474:	b29a      	uxth	r2, r3
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a486:	4619      	mov	r1, r3
 801a488:	0049      	lsls	r1, r1, #1
 801a48a:	440b      	add	r3, r1
 801a48c:	b29b      	uxth	r3, r3
 801a48e:	4413      	add	r3, r2
 801a490:	b29a      	uxth	r2, r3
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	8b5b      	ldrh	r3, [r3, #26]
 801a49c:	f043 0304 	orr.w	r3, r3, #4
 801a4a0:	b29a      	uxth	r2, r3
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a4ac:	bf00      	nop
 801a4ae:	3708      	adds	r7, #8
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}
 801a4b4:	080222f4 	.word	0x080222f4
 801a4b8:	080229cc 	.word	0x080229cc
 801a4bc:	08022368 	.word	0x08022368

0801a4c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b086      	sub	sp, #24
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	60f8      	str	r0, [r7, #12]
 801a4c8:	607b      	str	r3, [r7, #4]
 801a4ca:	460b      	mov	r3, r1
 801a4cc:	817b      	strh	r3, [r7, #10]
 801a4ce:	4613      	mov	r3, r2
 801a4d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a4d2:	897a      	ldrh	r2, [r7, #10]
 801a4d4:	893b      	ldrh	r3, [r7, #8]
 801a4d6:	4413      	add	r3, r2
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	3314      	adds	r3, #20
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	2022      	movs	r0, #34	; 0x22
 801a4e6:	f7f9 faf5 	bl	8013ad4 <pbuf_alloc>
 801a4ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d04d      	beq.n	801a58e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a4f2:	897b      	ldrh	r3, [r7, #10]
 801a4f4:	3313      	adds	r3, #19
 801a4f6:	697a      	ldr	r2, [r7, #20]
 801a4f8:	8952      	ldrh	r2, [r2, #10]
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	db06      	blt.n	801a50c <tcp_output_alloc_header_common+0x4c>
 801a4fe:	4b26      	ldr	r3, [pc, #152]	; (801a598 <tcp_output_alloc_header_common+0xd8>)
 801a500:	f240 7223 	movw	r2, #1827	; 0x723
 801a504:	4925      	ldr	r1, [pc, #148]	; (801a59c <tcp_output_alloc_header_common+0xdc>)
 801a506:	4826      	ldr	r0, [pc, #152]	; (801a5a0 <tcp_output_alloc_header_common+0xe0>)
 801a508:	f001 ff74 	bl	801c3f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a512:	8c3b      	ldrh	r3, [r7, #32]
 801a514:	4618      	mov	r0, r3
 801a516:	f7f3 fe7d 	bl	800e214 <lwip_htons>
 801a51a:	4603      	mov	r3, r0
 801a51c:	461a      	mov	r2, r3
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a524:	4618      	mov	r0, r3
 801a526:	f7f3 fe75 	bl	800e214 <lwip_htons>
 801a52a:	4603      	mov	r3, r0
 801a52c:	461a      	mov	r2, r3
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	687a      	ldr	r2, [r7, #4]
 801a536:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a538:	68f8      	ldr	r0, [r7, #12]
 801a53a:	f7f3 fe80 	bl	800e23e <lwip_htonl>
 801a53e:	4602      	mov	r2, r0
 801a540:	693b      	ldr	r3, [r7, #16]
 801a542:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a544:	897b      	ldrh	r3, [r7, #10]
 801a546:	089b      	lsrs	r3, r3, #2
 801a548:	b29b      	uxth	r3, r3
 801a54a:	3305      	adds	r3, #5
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	031b      	lsls	r3, r3, #12
 801a550:	b29a      	uxth	r2, r3
 801a552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a556:	b29b      	uxth	r3, r3
 801a558:	4313      	orrs	r3, r2
 801a55a:	b29b      	uxth	r3, r3
 801a55c:	4618      	mov	r0, r3
 801a55e:	f7f3 fe59 	bl	800e214 <lwip_htons>
 801a562:	4603      	mov	r3, r0
 801a564:	461a      	mov	r2, r3
 801a566:	693b      	ldr	r3, [r7, #16]
 801a568:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a56a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a56c:	4618      	mov	r0, r3
 801a56e:	f7f3 fe51 	bl	800e214 <lwip_htons>
 801a572:	4603      	mov	r3, r0
 801a574:	461a      	mov	r2, r3
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a57a:	693b      	ldr	r3, [r7, #16]
 801a57c:	2200      	movs	r2, #0
 801a57e:	741a      	strb	r2, [r3, #16]
 801a580:	2200      	movs	r2, #0
 801a582:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	2200      	movs	r2, #0
 801a588:	749a      	strb	r2, [r3, #18]
 801a58a:	2200      	movs	r2, #0
 801a58c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a58e:	697b      	ldr	r3, [r7, #20]
}
 801a590:	4618      	mov	r0, r3
 801a592:	3718      	adds	r7, #24
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	080222f4 	.word	0x080222f4
 801a59c:	080229ec 	.word	0x080229ec
 801a5a0:	08022368 	.word	0x08022368

0801a5a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a5a4:	b5b0      	push	{r4, r5, r7, lr}
 801a5a6:	b08a      	sub	sp, #40	; 0x28
 801a5a8:	af04      	add	r7, sp, #16
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	607b      	str	r3, [r7, #4]
 801a5ae:	460b      	mov	r3, r1
 801a5b0:	817b      	strh	r3, [r7, #10]
 801a5b2:	4613      	mov	r3, r2
 801a5b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d106      	bne.n	801a5ca <tcp_output_alloc_header+0x26>
 801a5bc:	4b15      	ldr	r3, [pc, #84]	; (801a614 <tcp_output_alloc_header+0x70>)
 801a5be:	f240 7242 	movw	r2, #1858	; 0x742
 801a5c2:	4915      	ldr	r1, [pc, #84]	; (801a618 <tcp_output_alloc_header+0x74>)
 801a5c4:	4815      	ldr	r0, [pc, #84]	; (801a61c <tcp_output_alloc_header+0x78>)
 801a5c6:	f001 ff15 	bl	801c3f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	8adb      	ldrh	r3, [r3, #22]
 801a5d2:	68fa      	ldr	r2, [r7, #12]
 801a5d4:	8b12      	ldrh	r2, [r2, #24]
 801a5d6:	68f9      	ldr	r1, [r7, #12]
 801a5d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a5da:	893d      	ldrh	r5, [r7, #8]
 801a5dc:	897c      	ldrh	r4, [r7, #10]
 801a5de:	9103      	str	r1, [sp, #12]
 801a5e0:	2110      	movs	r1, #16
 801a5e2:	9102      	str	r1, [sp, #8]
 801a5e4:	9201      	str	r2, [sp, #4]
 801a5e6:	9300      	str	r3, [sp, #0]
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	462a      	mov	r2, r5
 801a5ec:	4621      	mov	r1, r4
 801a5ee:	f7ff ff67 	bl	801a4c0 <tcp_output_alloc_header_common>
 801a5f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a5f4:	697b      	ldr	r3, [r7, #20]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d006      	beq.n	801a608 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5fe:	68fa      	ldr	r2, [r7, #12]
 801a600:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a602:	441a      	add	r2, r3
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a608:	697b      	ldr	r3, [r7, #20]
}
 801a60a:	4618      	mov	r0, r3
 801a60c:	3718      	adds	r7, #24
 801a60e:	46bd      	mov	sp, r7
 801a610:	bdb0      	pop	{r4, r5, r7, pc}
 801a612:	bf00      	nop
 801a614:	080222f4 	.word	0x080222f4
 801a618:	08022a1c 	.word	0x08022a1c
 801a61c:	08022368 	.word	0x08022368

0801a620 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a620:	b580      	push	{r7, lr}
 801a622:	b088      	sub	sp, #32
 801a624:	af00      	add	r7, sp, #0
 801a626:	60f8      	str	r0, [r7, #12]
 801a628:	60b9      	str	r1, [r7, #8]
 801a62a:	4611      	mov	r1, r2
 801a62c:	461a      	mov	r2, r3
 801a62e:	460b      	mov	r3, r1
 801a630:	71fb      	strb	r3, [r7, #7]
 801a632:	4613      	mov	r3, r2
 801a634:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a636:	2300      	movs	r3, #0
 801a638:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a63a:	68bb      	ldr	r3, [r7, #8]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d106      	bne.n	801a64e <tcp_output_fill_options+0x2e>
 801a640:	4b13      	ldr	r3, [pc, #76]	; (801a690 <tcp_output_fill_options+0x70>)
 801a642:	f240 7256 	movw	r2, #1878	; 0x756
 801a646:	4913      	ldr	r1, [pc, #76]	; (801a694 <tcp_output_fill_options+0x74>)
 801a648:	4813      	ldr	r0, [pc, #76]	; (801a698 <tcp_output_fill_options+0x78>)
 801a64a:	f001 fed3 	bl	801c3f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	3314      	adds	r3, #20
 801a658:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a65a:	69bb      	ldr	r3, [r7, #24]
 801a65c:	f103 0214 	add.w	r2, r3, #20
 801a660:	8bfb      	ldrh	r3, [r7, #30]
 801a662:	009b      	lsls	r3, r3, #2
 801a664:	4619      	mov	r1, r3
 801a666:	79fb      	ldrb	r3, [r7, #7]
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	f003 0304 	and.w	r3, r3, #4
 801a66e:	440b      	add	r3, r1
 801a670:	4413      	add	r3, r2
 801a672:	697a      	ldr	r2, [r7, #20]
 801a674:	429a      	cmp	r2, r3
 801a676:	d006      	beq.n	801a686 <tcp_output_fill_options+0x66>
 801a678:	4b05      	ldr	r3, [pc, #20]	; (801a690 <tcp_output_fill_options+0x70>)
 801a67a:	f240 7275 	movw	r2, #1909	; 0x775
 801a67e:	4907      	ldr	r1, [pc, #28]	; (801a69c <tcp_output_fill_options+0x7c>)
 801a680:	4805      	ldr	r0, [pc, #20]	; (801a698 <tcp_output_fill_options+0x78>)
 801a682:	f001 feb7 	bl	801c3f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a686:	bf00      	nop
 801a688:	3720      	adds	r7, #32
 801a68a:	46bd      	mov	sp, r7
 801a68c:	bd80      	pop	{r7, pc}
 801a68e:	bf00      	nop
 801a690:	080222f4 	.word	0x080222f4
 801a694:	08022a44 	.word	0x08022a44
 801a698:	08022368 	.word	0x08022368
 801a69c:	0802293c 	.word	0x0802293c

0801a6a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b08a      	sub	sp, #40	; 0x28
 801a6a4:	af04      	add	r7, sp, #16
 801a6a6:	60f8      	str	r0, [r7, #12]
 801a6a8:	60b9      	str	r1, [r7, #8]
 801a6aa:	607a      	str	r2, [r7, #4]
 801a6ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a6ae:	68bb      	ldr	r3, [r7, #8]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d106      	bne.n	801a6c2 <tcp_output_control_segment+0x22>
 801a6b4:	4b1c      	ldr	r3, [pc, #112]	; (801a728 <tcp_output_control_segment+0x88>)
 801a6b6:	f240 7287 	movw	r2, #1927	; 0x787
 801a6ba:	491c      	ldr	r1, [pc, #112]	; (801a72c <tcp_output_control_segment+0x8c>)
 801a6bc:	481c      	ldr	r0, [pc, #112]	; (801a730 <tcp_output_control_segment+0x90>)
 801a6be:	f001 fe99 	bl	801c3f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a6c2:	683a      	ldr	r2, [r7, #0]
 801a6c4:	6879      	ldr	r1, [r7, #4]
 801a6c6:	68f8      	ldr	r0, [r7, #12]
 801a6c8:	f7fe fae8 	bl	8018c9c <tcp_route>
 801a6cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a6ce:	693b      	ldr	r3, [r7, #16]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d102      	bne.n	801a6da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a6d4:	23fc      	movs	r3, #252	; 0xfc
 801a6d6:	75fb      	strb	r3, [r7, #23]
 801a6d8:	e01c      	b.n	801a714 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d006      	beq.n	801a6ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	7adb      	ldrb	r3, [r3, #11]
 801a6e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	7a9b      	ldrb	r3, [r3, #10]
 801a6ea:	757b      	strb	r3, [r7, #21]
 801a6ec:	e003      	b.n	801a6f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a6ee:	23ff      	movs	r3, #255	; 0xff
 801a6f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a6f6:	7dba      	ldrb	r2, [r7, #22]
 801a6f8:	693b      	ldr	r3, [r7, #16]
 801a6fa:	9302      	str	r3, [sp, #8]
 801a6fc:	2306      	movs	r3, #6
 801a6fe:	9301      	str	r3, [sp, #4]
 801a700:	7d7b      	ldrb	r3, [r7, #21]
 801a702:	9300      	str	r3, [sp, #0]
 801a704:	4613      	mov	r3, r2
 801a706:	683a      	ldr	r2, [r7, #0]
 801a708:	6879      	ldr	r1, [r7, #4]
 801a70a:	68b8      	ldr	r0, [r7, #8]
 801a70c:	f7f7 f916 	bl	801193c <ip4_output_if>
 801a710:	4603      	mov	r3, r0
 801a712:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a714:	68b8      	ldr	r0, [r7, #8]
 801a716:	f7f9 fcc1 	bl	801409c <pbuf_free>
  return err;
 801a71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3718      	adds	r7, #24
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	080222f4 	.word	0x080222f4
 801a72c:	08022a6c 	.word	0x08022a6c
 801a730:	08022368 	.word	0x08022368

0801a734 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a734:	b590      	push	{r4, r7, lr}
 801a736:	b08b      	sub	sp, #44	; 0x2c
 801a738:	af04      	add	r7, sp, #16
 801a73a:	60f8      	str	r0, [r7, #12]
 801a73c:	60b9      	str	r1, [r7, #8]
 801a73e:	607a      	str	r2, [r7, #4]
 801a740:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d106      	bne.n	801a756 <tcp_rst+0x22>
 801a748:	4b1f      	ldr	r3, [pc, #124]	; (801a7c8 <tcp_rst+0x94>)
 801a74a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a74e:	491f      	ldr	r1, [pc, #124]	; (801a7cc <tcp_rst+0x98>)
 801a750:	481f      	ldr	r0, [pc, #124]	; (801a7d0 <tcp_rst+0x9c>)
 801a752:	f001 fe4f 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d106      	bne.n	801a76a <tcp_rst+0x36>
 801a75c:	4b1a      	ldr	r3, [pc, #104]	; (801a7c8 <tcp_rst+0x94>)
 801a75e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a762:	491c      	ldr	r1, [pc, #112]	; (801a7d4 <tcp_rst+0xa0>)
 801a764:	481a      	ldr	r0, [pc, #104]	; (801a7d0 <tcp_rst+0x9c>)
 801a766:	f001 fe45 	bl	801c3f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a76a:	2300      	movs	r3, #0
 801a76c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a76e:	f246 0308 	movw	r3, #24584	; 0x6008
 801a772:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a774:	7dfb      	ldrb	r3, [r7, #23]
 801a776:	b29c      	uxth	r4, r3
 801a778:	68b8      	ldr	r0, [r7, #8]
 801a77a:	f7f3 fd60 	bl	800e23e <lwip_htonl>
 801a77e:	4602      	mov	r2, r0
 801a780:	8abb      	ldrh	r3, [r7, #20]
 801a782:	9303      	str	r3, [sp, #12]
 801a784:	2314      	movs	r3, #20
 801a786:	9302      	str	r3, [sp, #8]
 801a788:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a78a:	9301      	str	r3, [sp, #4]
 801a78c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a78e:	9300      	str	r3, [sp, #0]
 801a790:	4613      	mov	r3, r2
 801a792:	2200      	movs	r2, #0
 801a794:	4621      	mov	r1, r4
 801a796:	6878      	ldr	r0, [r7, #4]
 801a798:	f7ff fe92 	bl	801a4c0 <tcp_output_alloc_header_common>
 801a79c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a79e:	693b      	ldr	r3, [r7, #16]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d00c      	beq.n	801a7be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a7a4:	7dfb      	ldrb	r3, [r7, #23]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	6939      	ldr	r1, [r7, #16]
 801a7aa:	68f8      	ldr	r0, [r7, #12]
 801a7ac:	f7ff ff38 	bl	801a620 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b2:	683a      	ldr	r2, [r7, #0]
 801a7b4:	6939      	ldr	r1, [r7, #16]
 801a7b6:	68f8      	ldr	r0, [r7, #12]
 801a7b8:	f7ff ff72 	bl	801a6a0 <tcp_output_control_segment>
 801a7bc:	e000      	b.n	801a7c0 <tcp_rst+0x8c>
    return;
 801a7be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a7c0:	371c      	adds	r7, #28
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd90      	pop	{r4, r7, pc}
 801a7c6:	bf00      	nop
 801a7c8:	080222f4 	.word	0x080222f4
 801a7cc:	08022a98 	.word	0x08022a98
 801a7d0:	08022368 	.word	0x08022368
 801a7d4:	08022ab4 	.word	0x08022ab4

0801a7d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a7d8:	b590      	push	{r4, r7, lr}
 801a7da:	b087      	sub	sp, #28
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d106      	bne.n	801a7fc <tcp_send_empty_ack+0x24>
 801a7ee:	4b28      	ldr	r3, [pc, #160]	; (801a890 <tcp_send_empty_ack+0xb8>)
 801a7f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a7f4:	4927      	ldr	r1, [pc, #156]	; (801a894 <tcp_send_empty_ack+0xbc>)
 801a7f6:	4828      	ldr	r0, [pc, #160]	; (801a898 <tcp_send_empty_ack+0xc0>)
 801a7f8:	f001 fdfc 	bl	801c3f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a7fc:	7dfb      	ldrb	r3, [r7, #23]
 801a7fe:	009b      	lsls	r3, r3, #2
 801a800:	b2db      	uxtb	r3, r3
 801a802:	f003 0304 	and.w	r3, r3, #4
 801a806:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a808:	7d7b      	ldrb	r3, [r7, #21]
 801a80a:	b29c      	uxth	r4, r3
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a810:	4618      	mov	r0, r3
 801a812:	f7f3 fd14 	bl	800e23e <lwip_htonl>
 801a816:	4603      	mov	r3, r0
 801a818:	2200      	movs	r2, #0
 801a81a:	4621      	mov	r1, r4
 801a81c:	6878      	ldr	r0, [r7, #4]
 801a81e:	f7ff fec1 	bl	801a5a4 <tcp_output_alloc_header>
 801a822:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d109      	bne.n	801a83e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	8b5b      	ldrh	r3, [r3, #26]
 801a82e:	f043 0303 	orr.w	r3, r3, #3
 801a832:	b29a      	uxth	r2, r3
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a838:	f06f 0301 	mvn.w	r3, #1
 801a83c:	e023      	b.n	801a886 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a83e:	7dbb      	ldrb	r3, [r7, #22]
 801a840:	7dfa      	ldrb	r2, [r7, #23]
 801a842:	6939      	ldr	r1, [r7, #16]
 801a844:	6878      	ldr	r0, [r7, #4]
 801a846:	f7ff feeb 	bl	801a620 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a84a:	687a      	ldr	r2, [r7, #4]
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	3304      	adds	r3, #4
 801a850:	6939      	ldr	r1, [r7, #16]
 801a852:	6878      	ldr	r0, [r7, #4]
 801a854:	f7ff ff24 	bl	801a6a0 <tcp_output_control_segment>
 801a858:	4603      	mov	r3, r0
 801a85a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a85c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d007      	beq.n	801a874 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	8b5b      	ldrh	r3, [r3, #26]
 801a868:	f043 0303 	orr.w	r3, r3, #3
 801a86c:	b29a      	uxth	r2, r3
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	835a      	strh	r2, [r3, #26]
 801a872:	e006      	b.n	801a882 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	8b5b      	ldrh	r3, [r3, #26]
 801a878:	f023 0303 	bic.w	r3, r3, #3
 801a87c:	b29a      	uxth	r2, r3
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a886:	4618      	mov	r0, r3
 801a888:	371c      	adds	r7, #28
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd90      	pop	{r4, r7, pc}
 801a88e:	bf00      	nop
 801a890:	080222f4 	.word	0x080222f4
 801a894:	08022ad0 	.word	0x08022ad0
 801a898:	08022368 	.word	0x08022368

0801a89c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a89c:	b590      	push	{r4, r7, lr}
 801a89e:	b087      	sub	sp, #28
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d106      	bne.n	801a8bc <tcp_keepalive+0x20>
 801a8ae:	4b18      	ldr	r3, [pc, #96]	; (801a910 <tcp_keepalive+0x74>)
 801a8b0:	f640 0224 	movw	r2, #2084	; 0x824
 801a8b4:	4917      	ldr	r1, [pc, #92]	; (801a914 <tcp_keepalive+0x78>)
 801a8b6:	4818      	ldr	r0, [pc, #96]	; (801a918 <tcp_keepalive+0x7c>)
 801a8b8:	f001 fd9c 	bl	801c3f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a8bc:	7dfb      	ldrb	r3, [r7, #23]
 801a8be:	b29c      	uxth	r4, r3
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8c4:	3b01      	subs	r3, #1
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	f7f3 fcb9 	bl	800e23e <lwip_htonl>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	4621      	mov	r1, r4
 801a8d2:	6878      	ldr	r0, [r7, #4]
 801a8d4:	f7ff fe66 	bl	801a5a4 <tcp_output_alloc_header>
 801a8d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d102      	bne.n	801a8e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8e4:	e010      	b.n	801a908 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a8e6:	7dfb      	ldrb	r3, [r7, #23]
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	6939      	ldr	r1, [r7, #16]
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f7ff fe97 	bl	801a620 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a8f2:	687a      	ldr	r2, [r7, #4]
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	3304      	adds	r3, #4
 801a8f8:	6939      	ldr	r1, [r7, #16]
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f7ff fed0 	bl	801a6a0 <tcp_output_control_segment>
 801a900:	4603      	mov	r3, r0
 801a902:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	371c      	adds	r7, #28
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd90      	pop	{r4, r7, pc}
 801a910:	080222f4 	.word	0x080222f4
 801a914:	08022af0 	.word	0x08022af0
 801a918:	08022368 	.word	0x08022368

0801a91c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a91c:	b590      	push	{r4, r7, lr}
 801a91e:	b08b      	sub	sp, #44	; 0x2c
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a924:	2300      	movs	r3, #0
 801a926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d106      	bne.n	801a93e <tcp_zero_window_probe+0x22>
 801a930:	4b4c      	ldr	r3, [pc, #304]	; (801aa64 <tcp_zero_window_probe+0x148>)
 801a932:	f640 024f 	movw	r2, #2127	; 0x84f
 801a936:	494c      	ldr	r1, [pc, #304]	; (801aa68 <tcp_zero_window_probe+0x14c>)
 801a938:	484c      	ldr	r0, [pc, #304]	; (801aa6c <tcp_zero_window_probe+0x150>)
 801a93a:	f001 fd5b 	bl	801c3f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a942:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a944:	6a3b      	ldr	r3, [r7, #32]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d101      	bne.n	801a94e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a94a:	2300      	movs	r3, #0
 801a94c:	e086      	b.n	801aa5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a954:	2bff      	cmp	r3, #255	; 0xff
 801a956:	d007      	beq.n	801a968 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a95e:	3301      	adds	r3, #1
 801a960:	b2da      	uxtb	r2, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a968:	6a3b      	ldr	r3, [r7, #32]
 801a96a:	68db      	ldr	r3, [r3, #12]
 801a96c:	899b      	ldrh	r3, [r3, #12]
 801a96e:	b29b      	uxth	r3, r3
 801a970:	4618      	mov	r0, r3
 801a972:	f7f3 fc4f 	bl	800e214 <lwip_htons>
 801a976:	4603      	mov	r3, r0
 801a978:	b2db      	uxtb	r3, r3
 801a97a:	f003 0301 	and.w	r3, r3, #1
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d005      	beq.n	801a98e <tcp_zero_window_probe+0x72>
 801a982:	6a3b      	ldr	r3, [r7, #32]
 801a984:	891b      	ldrh	r3, [r3, #8]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d101      	bne.n	801a98e <tcp_zero_window_probe+0x72>
 801a98a:	2301      	movs	r3, #1
 801a98c:	e000      	b.n	801a990 <tcp_zero_window_probe+0x74>
 801a98e:	2300      	movs	r3, #0
 801a990:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a992:	7ffb      	ldrb	r3, [r7, #31]
 801a994:	2b00      	cmp	r3, #0
 801a996:	bf0c      	ite	eq
 801a998:	2301      	moveq	r3, #1
 801a99a:	2300      	movne	r3, #0
 801a99c:	b2db      	uxtb	r3, r3
 801a99e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9a4:	b299      	uxth	r1, r3
 801a9a6:	6a3b      	ldr	r3, [r7, #32]
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	8bba      	ldrh	r2, [r7, #28]
 801a9ae:	6878      	ldr	r0, [r7, #4]
 801a9b0:	f7ff fdf8 	bl	801a5a4 <tcp_output_alloc_header>
 801a9b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a9b6:	69bb      	ldr	r3, [r7, #24]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d102      	bne.n	801a9c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a9bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c0:	e04c      	b.n	801aa5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	685b      	ldr	r3, [r3, #4]
 801a9c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a9c8:	7ffb      	ldrb	r3, [r7, #31]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d011      	beq.n	801a9f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a9ce:	697b      	ldr	r3, [r7, #20]
 801a9d0:	899b      	ldrh	r3, [r3, #12]
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	b21b      	sxth	r3, r3
 801a9d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a9da:	b21c      	sxth	r4, r3
 801a9dc:	2011      	movs	r0, #17
 801a9de:	f7f3 fc19 	bl	800e214 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	b21b      	sxth	r3, r3
 801a9e6:	4323      	orrs	r3, r4
 801a9e8:	b21b      	sxth	r3, r3
 801a9ea:	b29a      	uxth	r2, r3
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	819a      	strh	r2, [r3, #12]
 801a9f0:	e010      	b.n	801aa14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a9f2:	69bb      	ldr	r3, [r7, #24]
 801a9f4:	685b      	ldr	r3, [r3, #4]
 801a9f6:	3314      	adds	r3, #20
 801a9f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a9fa:	6a3b      	ldr	r3, [r7, #32]
 801a9fc:	6858      	ldr	r0, [r3, #4]
 801a9fe:	6a3b      	ldr	r3, [r7, #32]
 801aa00:	685b      	ldr	r3, [r3, #4]
 801aa02:	891a      	ldrh	r2, [r3, #8]
 801aa04:	6a3b      	ldr	r3, [r7, #32]
 801aa06:	891b      	ldrh	r3, [r3, #8]
 801aa08:	1ad3      	subs	r3, r2, r3
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	6939      	ldr	r1, [r7, #16]
 801aa10:	f7f9 fd4a 	bl	80144a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801aa14:	6a3b      	ldr	r3, [r7, #32]
 801aa16:	68db      	ldr	r3, [r3, #12]
 801aa18:	685b      	ldr	r3, [r3, #4]
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7f3 fc0f 	bl	800e23e <lwip_htonl>
 801aa20:	4603      	mov	r3, r0
 801aa22:	3301      	adds	r3, #1
 801aa24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	1ad3      	subs	r3, r2, r3
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	da02      	bge.n	801aa38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	68fa      	ldr	r2, [r7, #12]
 801aa36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aa38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	69b9      	ldr	r1, [r7, #24]
 801aa40:	6878      	ldr	r0, [r7, #4]
 801aa42:	f7ff fded 	bl	801a620 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	3304      	adds	r3, #4
 801aa4c:	69b9      	ldr	r1, [r7, #24]
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	f7ff fe26 	bl	801a6a0 <tcp_output_control_segment>
 801aa54:	4603      	mov	r3, r0
 801aa56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aa58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	372c      	adds	r7, #44	; 0x2c
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd90      	pop	{r4, r7, pc}
 801aa64:	080222f4 	.word	0x080222f4
 801aa68:	08022b0c 	.word	0x08022b0c
 801aa6c:	08022368 	.word	0x08022368

0801aa70 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801aa7a:	f000 fb17 	bl	801b0ac <sys_timeouts_sleeptime>
 801aa7e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa86:	d10b      	bne.n	801aaa0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801aa88:	4813      	ldr	r0, [pc, #76]	; (801aad8 <tcpip_timeouts_mbox_fetch+0x68>)
 801aa8a:	f7f9 ff42 	bl	8014912 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801aa8e:	2200      	movs	r2, #0
 801aa90:	6839      	ldr	r1, [r7, #0]
 801aa92:	6878      	ldr	r0, [r7, #4]
 801aa94:	f7f9 fdfa 	bl	801468c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801aa98:	480f      	ldr	r0, [pc, #60]	; (801aad8 <tcpip_timeouts_mbox_fetch+0x68>)
 801aa9a:	f7f9 ff2b 	bl	80148f4 <sys_mutex_lock>
    return;
 801aa9e:	e018      	b.n	801aad2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d102      	bne.n	801aaac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801aaa6:	f000 fac7 	bl	801b038 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801aaaa:	e7e6      	b.n	801aa7a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801aaac:	480a      	ldr	r0, [pc, #40]	; (801aad8 <tcpip_timeouts_mbox_fetch+0x68>)
 801aaae:	f7f9 ff30 	bl	8014912 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801aab2:	68fa      	ldr	r2, [r7, #12]
 801aab4:	6839      	ldr	r1, [r7, #0]
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f7f9 fde8 	bl	801468c <sys_arch_mbox_fetch>
 801aabc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801aabe:	4806      	ldr	r0, [pc, #24]	; (801aad8 <tcpip_timeouts_mbox_fetch+0x68>)
 801aac0:	f7f9 ff18 	bl	80148f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801aac4:	68bb      	ldr	r3, [r7, #8]
 801aac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaca:	d102      	bne.n	801aad2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801aacc:	f000 fab4 	bl	801b038 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801aad0:	e7d3      	b.n	801aa7a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801aad2:	3710      	adds	r7, #16
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}
 801aad8:	240079f0 	.word	0x240079f0

0801aadc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b084      	sub	sp, #16
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801aae4:	4810      	ldr	r0, [pc, #64]	; (801ab28 <tcpip_thread+0x4c>)
 801aae6:	f7f9 ff05 	bl	80148f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801aaea:	4b10      	ldr	r3, [pc, #64]	; (801ab2c <tcpip_thread+0x50>)
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d005      	beq.n	801aafe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801aaf2:	4b0e      	ldr	r3, [pc, #56]	; (801ab2c <tcpip_thread+0x50>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	4a0e      	ldr	r2, [pc, #56]	; (801ab30 <tcpip_thread+0x54>)
 801aaf8:	6812      	ldr	r2, [r2, #0]
 801aafa:	4610      	mov	r0, r2
 801aafc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801aafe:	f107 030c 	add.w	r3, r7, #12
 801ab02:	4619      	mov	r1, r3
 801ab04:	480b      	ldr	r0, [pc, #44]	; (801ab34 <tcpip_thread+0x58>)
 801ab06:	f7ff ffb3 	bl	801aa70 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d106      	bne.n	801ab1e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ab10:	4b09      	ldr	r3, [pc, #36]	; (801ab38 <tcpip_thread+0x5c>)
 801ab12:	2291      	movs	r2, #145	; 0x91
 801ab14:	4909      	ldr	r1, [pc, #36]	; (801ab3c <tcpip_thread+0x60>)
 801ab16:	480a      	ldr	r0, [pc, #40]	; (801ab40 <tcpip_thread+0x64>)
 801ab18:	f001 fc6c 	bl	801c3f4 <iprintf>
      continue;
 801ab1c:	e003      	b.n	801ab26 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	4618      	mov	r0, r3
 801ab22:	f000 f80f 	bl	801ab44 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801ab26:	e7ea      	b.n	801aafe <tcpip_thread+0x22>
 801ab28:	240079f0 	.word	0x240079f0
 801ab2c:	2400435c 	.word	0x2400435c
 801ab30:	24004360 	.word	0x24004360
 801ab34:	24004364 	.word	0x24004364
 801ab38:	08022b30 	.word	0x08022b30
 801ab3c:	08022b80 	.word	0x08022b80
 801ab40:	08022ba0 	.word	0x08022ba0

0801ab44 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b082      	sub	sp, #8
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	781b      	ldrb	r3, [r3, #0]
 801ab50:	2b02      	cmp	r3, #2
 801ab52:	d026      	beq.n	801aba2 <tcpip_thread_handle_msg+0x5e>
 801ab54:	2b02      	cmp	r3, #2
 801ab56:	dc2b      	bgt.n	801abb0 <tcpip_thread_handle_msg+0x6c>
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d002      	beq.n	801ab62 <tcpip_thread_handle_msg+0x1e>
 801ab5c:	2b01      	cmp	r3, #1
 801ab5e:	d015      	beq.n	801ab8c <tcpip_thread_handle_msg+0x48>
 801ab60:	e026      	b.n	801abb0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	68db      	ldr	r3, [r3, #12]
 801ab66:	687a      	ldr	r2, [r7, #4]
 801ab68:	6850      	ldr	r0, [r2, #4]
 801ab6a:	687a      	ldr	r2, [r7, #4]
 801ab6c:	6892      	ldr	r2, [r2, #8]
 801ab6e:	4611      	mov	r1, r2
 801ab70:	4798      	blx	r3
 801ab72:	4603      	mov	r3, r0
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d004      	beq.n	801ab82 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f7f9 fa8d 	bl	801409c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ab82:	6879      	ldr	r1, [r7, #4]
 801ab84:	2009      	movs	r0, #9
 801ab86:	f7f8 fb3f 	bl	8013208 <memp_free>
      break;
 801ab8a:	e018      	b.n	801abbe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	685b      	ldr	r3, [r3, #4]
 801ab90:	687a      	ldr	r2, [r7, #4]
 801ab92:	6892      	ldr	r2, [r2, #8]
 801ab94:	4610      	mov	r0, r2
 801ab96:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801ab98:	6879      	ldr	r1, [r7, #4]
 801ab9a:	2008      	movs	r0, #8
 801ab9c:	f7f8 fb34 	bl	8013208 <memp_free>
      break;
 801aba0:	e00d      	b.n	801abbe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	685b      	ldr	r3, [r3, #4]
 801aba6:	687a      	ldr	r2, [r7, #4]
 801aba8:	6892      	ldr	r2, [r2, #8]
 801abaa:	4610      	mov	r0, r2
 801abac:	4798      	blx	r3
      break;
 801abae:	e006      	b.n	801abbe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801abb0:	4b05      	ldr	r3, [pc, #20]	; (801abc8 <tcpip_thread_handle_msg+0x84>)
 801abb2:	22cf      	movs	r2, #207	; 0xcf
 801abb4:	4905      	ldr	r1, [pc, #20]	; (801abcc <tcpip_thread_handle_msg+0x88>)
 801abb6:	4806      	ldr	r0, [pc, #24]	; (801abd0 <tcpip_thread_handle_msg+0x8c>)
 801abb8:	f001 fc1c 	bl	801c3f4 <iprintf>
      break;
 801abbc:	bf00      	nop
  }
}
 801abbe:	bf00      	nop
 801abc0:	3708      	adds	r7, #8
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
 801abc6:	bf00      	nop
 801abc8:	08022b30 	.word	0x08022b30
 801abcc:	08022b80 	.word	0x08022b80
 801abd0:	08022ba0 	.word	0x08022ba0

0801abd4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b086      	sub	sp, #24
 801abd8:	af00      	add	r7, sp, #0
 801abda:	60f8      	str	r0, [r7, #12]
 801abdc:	60b9      	str	r1, [r7, #8]
 801abde:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801abe0:	481a      	ldr	r0, [pc, #104]	; (801ac4c <tcpip_inpkt+0x78>)
 801abe2:	f7f9 fdae 	bl	8014742 <sys_mbox_valid>
 801abe6:	4603      	mov	r3, r0
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d105      	bne.n	801abf8 <tcpip_inpkt+0x24>
 801abec:	4b18      	ldr	r3, [pc, #96]	; (801ac50 <tcpip_inpkt+0x7c>)
 801abee:	22fc      	movs	r2, #252	; 0xfc
 801abf0:	4918      	ldr	r1, [pc, #96]	; (801ac54 <tcpip_inpkt+0x80>)
 801abf2:	4819      	ldr	r0, [pc, #100]	; (801ac58 <tcpip_inpkt+0x84>)
 801abf4:	f001 fbfe 	bl	801c3f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801abf8:	2009      	movs	r0, #9
 801abfa:	f7f8 fa8f 	bl	801311c <memp_malloc>
 801abfe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d102      	bne.n	801ac0c <tcpip_inpkt+0x38>
    return ERR_MEM;
 801ac06:	f04f 33ff 	mov.w	r3, #4294967295
 801ac0a:	e01a      	b.n	801ac42 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801ac0c:	697b      	ldr	r3, [r7, #20]
 801ac0e:	2200      	movs	r2, #0
 801ac10:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	68fa      	ldr	r2, [r7, #12]
 801ac16:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801ac18:	697b      	ldr	r3, [r7, #20]
 801ac1a:	68ba      	ldr	r2, [r7, #8]
 801ac1c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	687a      	ldr	r2, [r7, #4]
 801ac22:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801ac24:	6979      	ldr	r1, [r7, #20]
 801ac26:	4809      	ldr	r0, [pc, #36]	; (801ac4c <tcpip_inpkt+0x78>)
 801ac28:	f7f9 fd16 	bl	8014658 <sys_mbox_trypost>
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d006      	beq.n	801ac40 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ac32:	6979      	ldr	r1, [r7, #20]
 801ac34:	2009      	movs	r0, #9
 801ac36:	f7f8 fae7 	bl	8013208 <memp_free>
    return ERR_MEM;
 801ac3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac3e:	e000      	b.n	801ac42 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801ac40:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3718      	adds	r7, #24
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}
 801ac4a:	bf00      	nop
 801ac4c:	24004364 	.word	0x24004364
 801ac50:	08022b30 	.word	0x08022b30
 801ac54:	08022bc8 	.word	0x08022bc8
 801ac58:	08022ba0 	.word	0x08022ba0

0801ac5c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b082      	sub	sp, #8
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
 801ac64:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ac6c:	f003 0318 	and.w	r3, r3, #24
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d006      	beq.n	801ac82 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801ac74:	4a08      	ldr	r2, [pc, #32]	; (801ac98 <tcpip_input+0x3c>)
 801ac76:	6839      	ldr	r1, [r7, #0]
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7ff ffab 	bl	801abd4 <tcpip_inpkt>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	e005      	b.n	801ac8e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801ac82:	4a06      	ldr	r2, [pc, #24]	; (801ac9c <tcpip_input+0x40>)
 801ac84:	6839      	ldr	r1, [r7, #0]
 801ac86:	6878      	ldr	r0, [r7, #4]
 801ac88:	f7ff ffa4 	bl	801abd4 <tcpip_inpkt>
 801ac8c:	4603      	mov	r3, r0
}
 801ac8e:	4618      	mov	r0, r3
 801ac90:	3708      	adds	r7, #8
 801ac92:	46bd      	mov	sp, r7
 801ac94:	bd80      	pop	{r7, pc}
 801ac96:	bf00      	nop
 801ac98:	08010e39 	.word	0x08010e39
 801ac9c:	080116b9 	.word	0x080116b9

0801aca0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b084      	sub	sp, #16
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
 801aca8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801acaa:	4819      	ldr	r0, [pc, #100]	; (801ad10 <tcpip_try_callback+0x70>)
 801acac:	f7f9 fd49 	bl	8014742 <sys_mbox_valid>
 801acb0:	4603      	mov	r3, r0
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d106      	bne.n	801acc4 <tcpip_try_callback+0x24>
 801acb6:	4b17      	ldr	r3, [pc, #92]	; (801ad14 <tcpip_try_callback+0x74>)
 801acb8:	f240 125d 	movw	r2, #349	; 0x15d
 801acbc:	4916      	ldr	r1, [pc, #88]	; (801ad18 <tcpip_try_callback+0x78>)
 801acbe:	4817      	ldr	r0, [pc, #92]	; (801ad1c <tcpip_try_callback+0x7c>)
 801acc0:	f001 fb98 	bl	801c3f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801acc4:	2008      	movs	r0, #8
 801acc6:	f7f8 fa29 	bl	801311c <memp_malloc>
 801acca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d102      	bne.n	801acd8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801acd2:	f04f 33ff 	mov.w	r3, #4294967295
 801acd6:	e017      	b.n	801ad08 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	2201      	movs	r2, #1
 801acdc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	683a      	ldr	r2, [r7, #0]
 801ace8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801acea:	68f9      	ldr	r1, [r7, #12]
 801acec:	4808      	ldr	r0, [pc, #32]	; (801ad10 <tcpip_try_callback+0x70>)
 801acee:	f7f9 fcb3 	bl	8014658 <sys_mbox_trypost>
 801acf2:	4603      	mov	r3, r0
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d006      	beq.n	801ad06 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801acf8:	68f9      	ldr	r1, [r7, #12]
 801acfa:	2008      	movs	r0, #8
 801acfc:	f7f8 fa84 	bl	8013208 <memp_free>
    return ERR_MEM;
 801ad00:	f04f 33ff 	mov.w	r3, #4294967295
 801ad04:	e000      	b.n	801ad08 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801ad06:	2300      	movs	r3, #0
}
 801ad08:	4618      	mov	r0, r3
 801ad0a:	3710      	adds	r7, #16
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd80      	pop	{r7, pc}
 801ad10:	24004364 	.word	0x24004364
 801ad14:	08022b30 	.word	0x08022b30
 801ad18:	08022bc8 	.word	0x08022bc8
 801ad1c:	08022ba0 	.word	0x08022ba0

0801ad20 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	60f8      	str	r0, [r7, #12]
 801ad28:	60b9      	str	r1, [r7, #8]
 801ad2a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801ad2c:	4806      	ldr	r0, [pc, #24]	; (801ad48 <tcpip_send_msg_wait_sem+0x28>)
 801ad2e:	f7f9 fde1 	bl	80148f4 <sys_mutex_lock>
  fn(apimsg);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	68b8      	ldr	r0, [r7, #8]
 801ad36:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801ad38:	4803      	ldr	r0, [pc, #12]	; (801ad48 <tcpip_send_msg_wait_sem+0x28>)
 801ad3a:	f7f9 fdea 	bl	8014912 <sys_mutex_unlock>
  return ERR_OK;
 801ad3e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801ad40:	4618      	mov	r0, r3
 801ad42:	3710      	adds	r7, #16
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}
 801ad48:	240079f0 	.word	0x240079f0

0801ad4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b084      	sub	sp, #16
 801ad50:	af02      	add	r7, sp, #8
 801ad52:	6078      	str	r0, [r7, #4]
 801ad54:	6039      	str	r1, [r7, #0]
  lwip_init();
 801ad56:	f7f6 fbfd 	bl	8011554 <lwip_init>

  tcpip_init_done = initfunc;
 801ad5a:	4a17      	ldr	r2, [pc, #92]	; (801adb8 <tcpip_init+0x6c>)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801ad60:	4a16      	ldr	r2, [pc, #88]	; (801adbc <tcpip_init+0x70>)
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801ad66:	2106      	movs	r1, #6
 801ad68:	4815      	ldr	r0, [pc, #84]	; (801adc0 <tcpip_init+0x74>)
 801ad6a:	f7f9 fc41 	bl	80145f0 <sys_mbox_new>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d006      	beq.n	801ad82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801ad74:	4b13      	ldr	r3, [pc, #76]	; (801adc4 <tcpip_init+0x78>)
 801ad76:	f240 2261 	movw	r2, #609	; 0x261
 801ad7a:	4913      	ldr	r1, [pc, #76]	; (801adc8 <tcpip_init+0x7c>)
 801ad7c:	4813      	ldr	r0, [pc, #76]	; (801adcc <tcpip_init+0x80>)
 801ad7e:	f001 fb39 	bl	801c3f4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801ad82:	4813      	ldr	r0, [pc, #76]	; (801add0 <tcpip_init+0x84>)
 801ad84:	f7f9 fd9a 	bl	80148bc <sys_mutex_new>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d006      	beq.n	801ad9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801ad8e:	4b0d      	ldr	r3, [pc, #52]	; (801adc4 <tcpip_init+0x78>)
 801ad90:	f240 2265 	movw	r2, #613	; 0x265
 801ad94:	490f      	ldr	r1, [pc, #60]	; (801add4 <tcpip_init+0x88>)
 801ad96:	480d      	ldr	r0, [pc, #52]	; (801adcc <tcpip_init+0x80>)
 801ad98:	f001 fb2c 	bl	801c3f4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	9300      	str	r3, [sp, #0]
 801ada0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ada4:	2200      	movs	r2, #0
 801ada6:	490c      	ldr	r1, [pc, #48]	; (801add8 <tcpip_init+0x8c>)
 801ada8:	480c      	ldr	r0, [pc, #48]	; (801addc <tcpip_init+0x90>)
 801adaa:	f7f9 fdbf 	bl	801492c <sys_thread_new>
}
 801adae:	bf00      	nop
 801adb0:	3708      	adds	r7, #8
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}
 801adb6:	bf00      	nop
 801adb8:	2400435c 	.word	0x2400435c
 801adbc:	24004360 	.word	0x24004360
 801adc0:	24004364 	.word	0x24004364
 801adc4:	08022b30 	.word	0x08022b30
 801adc8:	08022bd8 	.word	0x08022bd8
 801adcc:	08022ba0 	.word	0x08022ba0
 801add0:	240079f0 	.word	0x240079f0
 801add4:	08022bfc 	.word	0x08022bfc
 801add8:	0801aadd 	.word	0x0801aadd
 801addc:	08022c20 	.word	0x08022c20

0801ade0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801ade8:	f7f9 fe2e 	bl	8014a48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801adec:	4b0a      	ldr	r3, [pc, #40]	; (801ae18 <tcpip_tcp_timer+0x38>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d103      	bne.n	801adfc <tcpip_tcp_timer+0x1c>
 801adf4:	4b09      	ldr	r3, [pc, #36]	; (801ae1c <tcpip_tcp_timer+0x3c>)
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d005      	beq.n	801ae08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801adfc:	2200      	movs	r2, #0
 801adfe:	4908      	ldr	r1, [pc, #32]	; (801ae20 <tcpip_tcp_timer+0x40>)
 801ae00:	20fa      	movs	r0, #250	; 0xfa
 801ae02:	f000 f8f3 	bl	801afec <sys_timeout>
 801ae06:	e003      	b.n	801ae10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801ae08:	4b06      	ldr	r3, [pc, #24]	; (801ae24 <tcpip_tcp_timer+0x44>)
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	601a      	str	r2, [r3, #0]
  }
}
 801ae0e:	bf00      	nop
 801ae10:	bf00      	nop
 801ae12:	3708      	adds	r7, #8
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}
 801ae18:	240079d8 	.word	0x240079d8
 801ae1c:	240079e8 	.word	0x240079e8
 801ae20:	0801ade1 	.word	0x0801ade1
 801ae24:	24004370 	.word	0x24004370

0801ae28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ae2c:	4b0a      	ldr	r3, [pc, #40]	; (801ae58 <tcp_timer_needed+0x30>)
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d10f      	bne.n	801ae54 <tcp_timer_needed+0x2c>
 801ae34:	4b09      	ldr	r3, [pc, #36]	; (801ae5c <tcp_timer_needed+0x34>)
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d103      	bne.n	801ae44 <tcp_timer_needed+0x1c>
 801ae3c:	4b08      	ldr	r3, [pc, #32]	; (801ae60 <tcp_timer_needed+0x38>)
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d007      	beq.n	801ae54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ae44:	4b04      	ldr	r3, [pc, #16]	; (801ae58 <tcp_timer_needed+0x30>)
 801ae46:	2201      	movs	r2, #1
 801ae48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ae4a:	2200      	movs	r2, #0
 801ae4c:	4905      	ldr	r1, [pc, #20]	; (801ae64 <tcp_timer_needed+0x3c>)
 801ae4e:	20fa      	movs	r0, #250	; 0xfa
 801ae50:	f000 f8cc 	bl	801afec <sys_timeout>
  }
}
 801ae54:	bf00      	nop
 801ae56:	bd80      	pop	{r7, pc}
 801ae58:	24004370 	.word	0x24004370
 801ae5c:	240079d8 	.word	0x240079d8
 801ae60:	240079e8 	.word	0x240079e8
 801ae64:	0801ade1 	.word	0x0801ade1

0801ae68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b086      	sub	sp, #24
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	60f8      	str	r0, [r7, #12]
 801ae70:	60b9      	str	r1, [r7, #8]
 801ae72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ae74:	200a      	movs	r0, #10
 801ae76:	f7f8 f951 	bl	801311c <memp_malloc>
 801ae7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d109      	bne.n	801ae96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ae82:	693b      	ldr	r3, [r7, #16]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d151      	bne.n	801af2c <sys_timeout_abs+0xc4>
 801ae88:	4b2a      	ldr	r3, [pc, #168]	; (801af34 <sys_timeout_abs+0xcc>)
 801ae8a:	22be      	movs	r2, #190	; 0xbe
 801ae8c:	492a      	ldr	r1, [pc, #168]	; (801af38 <sys_timeout_abs+0xd0>)
 801ae8e:	482b      	ldr	r0, [pc, #172]	; (801af3c <sys_timeout_abs+0xd4>)
 801ae90:	f001 fab0 	bl	801c3f4 <iprintf>
    return;
 801ae94:	e04a      	b.n	801af2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ae96:	693b      	ldr	r3, [r7, #16]
 801ae98:	2200      	movs	r2, #0
 801ae9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ae9c:	693b      	ldr	r3, [r7, #16]
 801ae9e:	68ba      	ldr	r2, [r7, #8]
 801aea0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	687a      	ldr	r2, [r7, #4]
 801aea6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801aea8:	693b      	ldr	r3, [r7, #16]
 801aeaa:	68fa      	ldr	r2, [r7, #12]
 801aeac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801aeae:	4b24      	ldr	r3, [pc, #144]	; (801af40 <sys_timeout_abs+0xd8>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d103      	bne.n	801aebe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801aeb6:	4a22      	ldr	r2, [pc, #136]	; (801af40 <sys_timeout_abs+0xd8>)
 801aeb8:	693b      	ldr	r3, [r7, #16]
 801aeba:	6013      	str	r3, [r2, #0]
    return;
 801aebc:	e037      	b.n	801af2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801aebe:	693b      	ldr	r3, [r7, #16]
 801aec0:	685a      	ldr	r2, [r3, #4]
 801aec2:	4b1f      	ldr	r3, [pc, #124]	; (801af40 <sys_timeout_abs+0xd8>)
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	1ad3      	subs	r3, r2, r3
 801aeca:	0fdb      	lsrs	r3, r3, #31
 801aecc:	f003 0301 	and.w	r3, r3, #1
 801aed0:	b2db      	uxtb	r3, r3
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d007      	beq.n	801aee6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801aed6:	4b1a      	ldr	r3, [pc, #104]	; (801af40 <sys_timeout_abs+0xd8>)
 801aed8:	681a      	ldr	r2, [r3, #0]
 801aeda:	693b      	ldr	r3, [r7, #16]
 801aedc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801aede:	4a18      	ldr	r2, [pc, #96]	; (801af40 <sys_timeout_abs+0xd8>)
 801aee0:	693b      	ldr	r3, [r7, #16]
 801aee2:	6013      	str	r3, [r2, #0]
 801aee4:	e023      	b.n	801af2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801aee6:	4b16      	ldr	r3, [pc, #88]	; (801af40 <sys_timeout_abs+0xd8>)
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	617b      	str	r3, [r7, #20]
 801aeec:	e01a      	b.n	801af24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801aeee:	697b      	ldr	r3, [r7, #20]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d00b      	beq.n	801af0e <sys_timeout_abs+0xa6>
 801aef6:	693b      	ldr	r3, [r7, #16]
 801aef8:	685a      	ldr	r2, [r3, #4]
 801aefa:	697b      	ldr	r3, [r7, #20]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	685b      	ldr	r3, [r3, #4]
 801af00:	1ad3      	subs	r3, r2, r3
 801af02:	0fdb      	lsrs	r3, r3, #31
 801af04:	f003 0301 	and.w	r3, r3, #1
 801af08:	b2db      	uxtb	r3, r3
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d007      	beq.n	801af1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801af0e:	697b      	ldr	r3, [r7, #20]
 801af10:	681a      	ldr	r2, [r3, #0]
 801af12:	693b      	ldr	r3, [r7, #16]
 801af14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	693a      	ldr	r2, [r7, #16]
 801af1a:	601a      	str	r2, [r3, #0]
        break;
 801af1c:	e007      	b.n	801af2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	617b      	str	r3, [r7, #20]
 801af24:	697b      	ldr	r3, [r7, #20]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d1e1      	bne.n	801aeee <sys_timeout_abs+0x86>
 801af2a:	e000      	b.n	801af2e <sys_timeout_abs+0xc6>
    return;
 801af2c:	bf00      	nop
      }
    }
  }
}
 801af2e:	3718      	adds	r7, #24
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}
 801af34:	08022c30 	.word	0x08022c30
 801af38:	08022c84 	.word	0x08022c84
 801af3c:	08022cc4 	.word	0x08022cc4
 801af40:	24004368 	.word	0x24004368

0801af44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b086      	sub	sp, #24
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	685b      	ldr	r3, [r3, #4]
 801af54:	4798      	blx	r3

  now = sys_now();
 801af56:	f7ed ff5f 	bl	8008e18 <sys_now>
 801af5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801af5c:	697b      	ldr	r3, [r7, #20]
 801af5e:	681a      	ldr	r2, [r3, #0]
 801af60:	4b0f      	ldr	r3, [pc, #60]	; (801afa0 <lwip_cyclic_timer+0x5c>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4413      	add	r3, r2
 801af66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801af68:	68fa      	ldr	r2, [r7, #12]
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	1ad3      	subs	r3, r2, r3
 801af6e:	0fdb      	lsrs	r3, r3, #31
 801af70:	f003 0301 	and.w	r3, r3, #1
 801af74:	b2db      	uxtb	r3, r3
 801af76:	2b00      	cmp	r3, #0
 801af78:	d009      	beq.n	801af8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	681a      	ldr	r2, [r3, #0]
 801af7e:	693b      	ldr	r3, [r7, #16]
 801af80:	4413      	add	r3, r2
 801af82:	687a      	ldr	r2, [r7, #4]
 801af84:	4907      	ldr	r1, [pc, #28]	; (801afa4 <lwip_cyclic_timer+0x60>)
 801af86:	4618      	mov	r0, r3
 801af88:	f7ff ff6e 	bl	801ae68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801af8c:	e004      	b.n	801af98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	4904      	ldr	r1, [pc, #16]	; (801afa4 <lwip_cyclic_timer+0x60>)
 801af92:	68f8      	ldr	r0, [r7, #12]
 801af94:	f7ff ff68 	bl	801ae68 <sys_timeout_abs>
}
 801af98:	bf00      	nop
 801af9a:	3718      	adds	r7, #24
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	2400436c 	.word	0x2400436c
 801afa4:	0801af45 	.word	0x0801af45

0801afa8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b082      	sub	sp, #8
 801afac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801afae:	2301      	movs	r3, #1
 801afb0:	607b      	str	r3, [r7, #4]
 801afb2:	e00e      	b.n	801afd2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801afb4:	4a0b      	ldr	r2, [pc, #44]	; (801afe4 <sys_timeouts_init+0x3c>)
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	00db      	lsls	r3, r3, #3
 801afc0:	4a08      	ldr	r2, [pc, #32]	; (801afe4 <sys_timeouts_init+0x3c>)
 801afc2:	4413      	add	r3, r2
 801afc4:	461a      	mov	r2, r3
 801afc6:	4908      	ldr	r1, [pc, #32]	; (801afe8 <sys_timeouts_init+0x40>)
 801afc8:	f000 f810 	bl	801afec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	3301      	adds	r3, #1
 801afd0:	607b      	str	r3, [r7, #4]
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	2b04      	cmp	r3, #4
 801afd6:	d9ed      	bls.n	801afb4 <sys_timeouts_init+0xc>
  }
}
 801afd8:	bf00      	nop
 801afda:	bf00      	nop
 801afdc:	3708      	adds	r7, #8
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}
 801afe2:	bf00      	nop
 801afe4:	080464d0 	.word	0x080464d0
 801afe8:	0801af45 	.word	0x0801af45

0801afec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b086      	sub	sp, #24
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801affe:	d306      	bcc.n	801b00e <sys_timeout+0x22>
 801b000:	4b0a      	ldr	r3, [pc, #40]	; (801b02c <sys_timeout+0x40>)
 801b002:	f240 1229 	movw	r2, #297	; 0x129
 801b006:	490a      	ldr	r1, [pc, #40]	; (801b030 <sys_timeout+0x44>)
 801b008:	480a      	ldr	r0, [pc, #40]	; (801b034 <sys_timeout+0x48>)
 801b00a:	f001 f9f3 	bl	801c3f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b00e:	f7ed ff03 	bl	8008e18 <sys_now>
 801b012:	4602      	mov	r2, r0
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	4413      	add	r3, r2
 801b018:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	68b9      	ldr	r1, [r7, #8]
 801b01e:	6978      	ldr	r0, [r7, #20]
 801b020:	f7ff ff22 	bl	801ae68 <sys_timeout_abs>
#endif
}
 801b024:	bf00      	nop
 801b026:	3718      	adds	r7, #24
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	08022c30 	.word	0x08022c30
 801b030:	08022cec 	.word	0x08022cec
 801b034:	08022cc4 	.word	0x08022cc4

0801b038 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b084      	sub	sp, #16
 801b03c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b03e:	f7ed feeb 	bl	8008e18 <sys_now>
 801b042:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b044:	4b17      	ldr	r3, [pc, #92]	; (801b0a4 <sys_check_timeouts+0x6c>)
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b04a:	68bb      	ldr	r3, [r7, #8]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d022      	beq.n	801b096 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	685b      	ldr	r3, [r3, #4]
 801b054:	68fa      	ldr	r2, [r7, #12]
 801b056:	1ad3      	subs	r3, r2, r3
 801b058:	0fdb      	lsrs	r3, r3, #31
 801b05a:	f003 0301 	and.w	r3, r3, #1
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	2b00      	cmp	r3, #0
 801b062:	d11a      	bne.n	801b09a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4a0e      	ldr	r2, [pc, #56]	; (801b0a4 <sys_check_timeouts+0x6c>)
 801b06a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b06c:	68bb      	ldr	r3, [r7, #8]
 801b06e:	689b      	ldr	r3, [r3, #8]
 801b070:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	68db      	ldr	r3, [r3, #12]
 801b076:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	685b      	ldr	r3, [r3, #4]
 801b07c:	4a0a      	ldr	r2, [pc, #40]	; (801b0a8 <sys_check_timeouts+0x70>)
 801b07e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b080:	68b9      	ldr	r1, [r7, #8]
 801b082:	200a      	movs	r0, #10
 801b084:	f7f8 f8c0 	bl	8013208 <memp_free>
    if (handler != NULL) {
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d0da      	beq.n	801b044 <sys_check_timeouts+0xc>
      handler(arg);
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	6838      	ldr	r0, [r7, #0]
 801b092:	4798      	blx	r3
  do {
 801b094:	e7d6      	b.n	801b044 <sys_check_timeouts+0xc>
      return;
 801b096:	bf00      	nop
 801b098:	e000      	b.n	801b09c <sys_check_timeouts+0x64>
      return;
 801b09a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b09c:	3710      	adds	r7, #16
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	24004368 	.word	0x24004368
 801b0a8:	2400436c 	.word	0x2400436c

0801b0ac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b0b2:	4b16      	ldr	r3, [pc, #88]	; (801b10c <sys_timeouts_sleeptime+0x60>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d102      	bne.n	801b0c0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b0ba:	f04f 33ff 	mov.w	r3, #4294967295
 801b0be:	e020      	b.n	801b102 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b0c0:	f7ed feaa 	bl	8008e18 <sys_now>
 801b0c4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b0c6:	4b11      	ldr	r3, [pc, #68]	; (801b10c <sys_timeouts_sleeptime+0x60>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	685a      	ldr	r2, [r3, #4]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	1ad3      	subs	r3, r2, r3
 801b0d0:	0fdb      	lsrs	r3, r3, #31
 801b0d2:	f003 0301 	and.w	r3, r3, #1
 801b0d6:	b2db      	uxtb	r3, r3
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d001      	beq.n	801b0e0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	e010      	b.n	801b102 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b0e0:	4b0a      	ldr	r3, [pc, #40]	; (801b10c <sys_timeouts_sleeptime+0x60>)
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	685a      	ldr	r2, [r3, #4]
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	1ad3      	subs	r3, r2, r3
 801b0ea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b0ec:	683b      	ldr	r3, [r7, #0]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	da06      	bge.n	801b100 <sys_timeouts_sleeptime+0x54>
 801b0f2:	4b07      	ldr	r3, [pc, #28]	; (801b110 <sys_timeouts_sleeptime+0x64>)
 801b0f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b0f8:	4906      	ldr	r1, [pc, #24]	; (801b114 <sys_timeouts_sleeptime+0x68>)
 801b0fa:	4807      	ldr	r0, [pc, #28]	; (801b118 <sys_timeouts_sleeptime+0x6c>)
 801b0fc:	f001 f97a 	bl	801c3f4 <iprintf>
    return ret;
 801b100:	683b      	ldr	r3, [r7, #0]
  }
}
 801b102:	4618      	mov	r0, r3
 801b104:	3708      	adds	r7, #8
 801b106:	46bd      	mov	sp, r7
 801b108:	bd80      	pop	{r7, pc}
 801b10a:	bf00      	nop
 801b10c:	24004368 	.word	0x24004368
 801b110:	08022c30 	.word	0x08022c30
 801b114:	08022d24 	.word	0x08022d24
 801b118:	08022cc4 	.word	0x08022cc4

0801b11c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b11c:	b580      	push	{r7, lr}
 801b11e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b120:	f001 f980 	bl	801c424 <rand>
 801b124:	4603      	mov	r3, r0
 801b126:	b29b      	uxth	r3, r3
 801b128:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b12c:	b29b      	uxth	r3, r3
 801b12e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801b132:	b29a      	uxth	r2, r3
 801b134:	4b01      	ldr	r3, [pc, #4]	; (801b13c <udp_init+0x20>)
 801b136:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b138:	bf00      	nop
 801b13a:	bd80      	pop	{r7, pc}
 801b13c:	24000034 	.word	0x24000034

0801b140 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b140:	b480      	push	{r7}
 801b142:	b083      	sub	sp, #12
 801b144:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b146:	2300      	movs	r3, #0
 801b148:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b14a:	4b17      	ldr	r3, [pc, #92]	; (801b1a8 <udp_new_port+0x68>)
 801b14c:	881b      	ldrh	r3, [r3, #0]
 801b14e:	1c5a      	adds	r2, r3, #1
 801b150:	b291      	uxth	r1, r2
 801b152:	4a15      	ldr	r2, [pc, #84]	; (801b1a8 <udp_new_port+0x68>)
 801b154:	8011      	strh	r1, [r2, #0]
 801b156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b15a:	4293      	cmp	r3, r2
 801b15c:	d103      	bne.n	801b166 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b15e:	4b12      	ldr	r3, [pc, #72]	; (801b1a8 <udp_new_port+0x68>)
 801b160:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b164:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b166:	4b11      	ldr	r3, [pc, #68]	; (801b1ac <udp_new_port+0x6c>)
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	603b      	str	r3, [r7, #0]
 801b16c:	e011      	b.n	801b192 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b16e:	683b      	ldr	r3, [r7, #0]
 801b170:	8a5a      	ldrh	r2, [r3, #18]
 801b172:	4b0d      	ldr	r3, [pc, #52]	; (801b1a8 <udp_new_port+0x68>)
 801b174:	881b      	ldrh	r3, [r3, #0]
 801b176:	429a      	cmp	r2, r3
 801b178:	d108      	bne.n	801b18c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b17a:	88fb      	ldrh	r3, [r7, #6]
 801b17c:	3301      	adds	r3, #1
 801b17e:	80fb      	strh	r3, [r7, #6]
 801b180:	88fb      	ldrh	r3, [r7, #6]
 801b182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b186:	d3e0      	bcc.n	801b14a <udp_new_port+0xa>
        return 0;
 801b188:	2300      	movs	r3, #0
 801b18a:	e007      	b.n	801b19c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	68db      	ldr	r3, [r3, #12]
 801b190:	603b      	str	r3, [r7, #0]
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d1ea      	bne.n	801b16e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b198:	4b03      	ldr	r3, [pc, #12]	; (801b1a8 <udp_new_port+0x68>)
 801b19a:	881b      	ldrh	r3, [r3, #0]
}
 801b19c:	4618      	mov	r0, r3
 801b19e:	370c      	adds	r7, #12
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a6:	4770      	bx	lr
 801b1a8:	24000034 	.word	0x24000034
 801b1ac:	240079f4 	.word	0x240079f4

0801b1b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b084      	sub	sp, #16
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	60f8      	str	r0, [r7, #12]
 801b1b8:	60b9      	str	r1, [r7, #8]
 801b1ba:	4613      	mov	r3, r2
 801b1bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d105      	bne.n	801b1d0 <udp_input_local_match+0x20>
 801b1c4:	4b27      	ldr	r3, [pc, #156]	; (801b264 <udp_input_local_match+0xb4>)
 801b1c6:	2287      	movs	r2, #135	; 0x87
 801b1c8:	4927      	ldr	r1, [pc, #156]	; (801b268 <udp_input_local_match+0xb8>)
 801b1ca:	4828      	ldr	r0, [pc, #160]	; (801b26c <udp_input_local_match+0xbc>)
 801b1cc:	f001 f912 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d105      	bne.n	801b1e2 <udp_input_local_match+0x32>
 801b1d6:	4b23      	ldr	r3, [pc, #140]	; (801b264 <udp_input_local_match+0xb4>)
 801b1d8:	2288      	movs	r2, #136	; 0x88
 801b1da:	4925      	ldr	r1, [pc, #148]	; (801b270 <udp_input_local_match+0xc0>)
 801b1dc:	4823      	ldr	r0, [pc, #140]	; (801b26c <udp_input_local_match+0xbc>)
 801b1de:	f001 f909 	bl	801c3f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	7a1b      	ldrb	r3, [r3, #8]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d00b      	beq.n	801b202 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	7a1a      	ldrb	r2, [r3, #8]
 801b1ee:	4b21      	ldr	r3, [pc, #132]	; (801b274 <udp_input_local_match+0xc4>)
 801b1f0:	685b      	ldr	r3, [r3, #4]
 801b1f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b1f6:	3301      	adds	r3, #1
 801b1f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d001      	beq.n	801b202 <udp_input_local_match+0x52>
    return 0;
 801b1fe:	2300      	movs	r3, #0
 801b200:	e02b      	b.n	801b25a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b202:	79fb      	ldrb	r3, [r7, #7]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d018      	beq.n	801b23a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d013      	beq.n	801b236 <udp_input_local_match+0x86>
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d00f      	beq.n	801b236 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b216:	4b17      	ldr	r3, [pc, #92]	; (801b274 <udp_input_local_match+0xc4>)
 801b218:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b21e:	d00a      	beq.n	801b236 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	4b13      	ldr	r3, [pc, #76]	; (801b274 <udp_input_local_match+0xc4>)
 801b226:	695b      	ldr	r3, [r3, #20]
 801b228:	405a      	eors	r2, r3
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	3308      	adds	r3, #8
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b232:	2b00      	cmp	r3, #0
 801b234:	d110      	bne.n	801b258 <udp_input_local_match+0xa8>
          return 1;
 801b236:	2301      	movs	r3, #1
 801b238:	e00f      	b.n	801b25a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d009      	beq.n	801b254 <udp_input_local_match+0xa4>
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d005      	beq.n	801b254 <udp_input_local_match+0xa4>
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	681a      	ldr	r2, [r3, #0]
 801b24c:	4b09      	ldr	r3, [pc, #36]	; (801b274 <udp_input_local_match+0xc4>)
 801b24e:	695b      	ldr	r3, [r3, #20]
 801b250:	429a      	cmp	r2, r3
 801b252:	d101      	bne.n	801b258 <udp_input_local_match+0xa8>
        return 1;
 801b254:	2301      	movs	r3, #1
 801b256:	e000      	b.n	801b25a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b258:	2300      	movs	r3, #0
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	3710      	adds	r7, #16
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd80      	pop	{r7, pc}
 801b262:	bf00      	nop
 801b264:	08022d38 	.word	0x08022d38
 801b268:	08022d88 	.word	0x08022d88
 801b26c:	08022dac 	.word	0x08022dac
 801b270:	08022dd4 	.word	0x08022dd4
 801b274:	240048f0 	.word	0x240048f0

0801b278 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b278:	b590      	push	{r4, r7, lr}
 801b27a:	b08d      	sub	sp, #52	; 0x34
 801b27c:	af02      	add	r7, sp, #8
 801b27e:	6078      	str	r0, [r7, #4]
 801b280:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b282:	2300      	movs	r3, #0
 801b284:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d105      	bne.n	801b298 <udp_input+0x20>
 801b28c:	4b7c      	ldr	r3, [pc, #496]	; (801b480 <udp_input+0x208>)
 801b28e:	22cf      	movs	r2, #207	; 0xcf
 801b290:	497c      	ldr	r1, [pc, #496]	; (801b484 <udp_input+0x20c>)
 801b292:	487d      	ldr	r0, [pc, #500]	; (801b488 <udp_input+0x210>)
 801b294:	f001 f8ae 	bl	801c3f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d105      	bne.n	801b2aa <udp_input+0x32>
 801b29e:	4b78      	ldr	r3, [pc, #480]	; (801b480 <udp_input+0x208>)
 801b2a0:	22d0      	movs	r2, #208	; 0xd0
 801b2a2:	497a      	ldr	r1, [pc, #488]	; (801b48c <udp_input+0x214>)
 801b2a4:	4878      	ldr	r0, [pc, #480]	; (801b488 <udp_input+0x210>)
 801b2a6:	f001 f8a5 	bl	801c3f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	895b      	ldrh	r3, [r3, #10]
 801b2ae:	2b07      	cmp	r3, #7
 801b2b0:	d803      	bhi.n	801b2ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b2b2:	6878      	ldr	r0, [r7, #4]
 801b2b4:	f7f8 fef2 	bl	801409c <pbuf_free>
    goto end;
 801b2b8:	e0de      	b.n	801b478 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b2c0:	4b73      	ldr	r3, [pc, #460]	; (801b490 <udp_input+0x218>)
 801b2c2:	695b      	ldr	r3, [r3, #20]
 801b2c4:	4a72      	ldr	r2, [pc, #456]	; (801b490 <udp_input+0x218>)
 801b2c6:	6812      	ldr	r2, [r2, #0]
 801b2c8:	4611      	mov	r1, r2
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7f6 fc0e 	bl	8011aec <ip4_addr_isbroadcast_u32>
 801b2d0:	4603      	mov	r3, r0
 801b2d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b2d4:	697b      	ldr	r3, [r7, #20]
 801b2d6:	881b      	ldrh	r3, [r3, #0]
 801b2d8:	b29b      	uxth	r3, r3
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7f2 ff9a 	bl	800e214 <lwip_htons>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	885b      	ldrh	r3, [r3, #2]
 801b2e8:	b29b      	uxth	r3, r3
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f7f2 ff92 	bl	800e214 <lwip_htons>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b300:	4b64      	ldr	r3, [pc, #400]	; (801b494 <udp_input+0x21c>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	627b      	str	r3, [r7, #36]	; 0x24
 801b306:	e054      	b.n	801b3b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b30a:	8a5b      	ldrh	r3, [r3, #18]
 801b30c:	89fa      	ldrh	r2, [r7, #14]
 801b30e:	429a      	cmp	r2, r3
 801b310:	d14a      	bne.n	801b3a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b312:	7cfb      	ldrb	r3, [r7, #19]
 801b314:	461a      	mov	r2, r3
 801b316:	6839      	ldr	r1, [r7, #0]
 801b318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b31a:	f7ff ff49 	bl	801b1b0 <udp_input_local_match>
 801b31e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b320:	2b00      	cmp	r3, #0
 801b322:	d041      	beq.n	801b3a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b326:	7c1b      	ldrb	r3, [r3, #16]
 801b328:	f003 0304 	and.w	r3, r3, #4
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d11d      	bne.n	801b36c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b330:	69fb      	ldr	r3, [r7, #28]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d102      	bne.n	801b33c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b338:	61fb      	str	r3, [r7, #28]
 801b33a:	e017      	b.n	801b36c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b33c:	7cfb      	ldrb	r3, [r7, #19]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d014      	beq.n	801b36c <udp_input+0xf4>
 801b342:	4b53      	ldr	r3, [pc, #332]	; (801b490 <udp_input+0x218>)
 801b344:	695b      	ldr	r3, [r3, #20]
 801b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b34a:	d10f      	bne.n	801b36c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	681a      	ldr	r2, [r3, #0]
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	3304      	adds	r3, #4
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	429a      	cmp	r2, r3
 801b358:	d008      	beq.n	801b36c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	3304      	adds	r3, #4
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	429a      	cmp	r2, r3
 801b366:	d101      	bne.n	801b36c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b36a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b36e:	8a9b      	ldrh	r3, [r3, #20]
 801b370:	8a3a      	ldrh	r2, [r7, #16]
 801b372:	429a      	cmp	r2, r3
 801b374:	d118      	bne.n	801b3a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b378:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d005      	beq.n	801b38a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b380:	685a      	ldr	r2, [r3, #4]
 801b382:	4b43      	ldr	r3, [pc, #268]	; (801b490 <udp_input+0x218>)
 801b384:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b386:	429a      	cmp	r2, r3
 801b388:	d10e      	bne.n	801b3a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b38a:	6a3b      	ldr	r3, [r7, #32]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d014      	beq.n	801b3ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b392:	68da      	ldr	r2, [r3, #12]
 801b394:	6a3b      	ldr	r3, [r7, #32]
 801b396:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b398:	4b3e      	ldr	r3, [pc, #248]	; (801b494 <udp_input+0x21c>)
 801b39a:	681a      	ldr	r2, [r3, #0]
 801b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b39e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b3a0:	4a3c      	ldr	r2, [pc, #240]	; (801b494 <udp_input+0x21c>)
 801b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b3a6:	e008      	b.n	801b3ba <udp_input+0x142>
      }
    }

    prev = pcb;
 801b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ae:	68db      	ldr	r3, [r3, #12]
 801b3b0:	627b      	str	r3, [r7, #36]	; 0x24
 801b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d1a7      	bne.n	801b308 <udp_input+0x90>
 801b3b8:	e000      	b.n	801b3bc <udp_input+0x144>
        break;
 801b3ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d101      	bne.n	801b3c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b3c2:	69fb      	ldr	r3, [r7, #28]
 801b3c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d002      	beq.n	801b3d2 <udp_input+0x15a>
    for_us = 1;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	76fb      	strb	r3, [r7, #27]
 801b3d0:	e00a      	b.n	801b3e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	3304      	adds	r3, #4
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	4b2d      	ldr	r3, [pc, #180]	; (801b490 <udp_input+0x218>)
 801b3da:	695b      	ldr	r3, [r3, #20]
 801b3dc:	429a      	cmp	r2, r3
 801b3de:	bf0c      	ite	eq
 801b3e0:	2301      	moveq	r3, #1
 801b3e2:	2300      	movne	r3, #0
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b3e8:	7efb      	ldrb	r3, [r7, #27]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d041      	beq.n	801b472 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b3ee:	2108      	movs	r1, #8
 801b3f0:	6878      	ldr	r0, [r7, #4]
 801b3f2:	f7f8 fdcd 	bl	8013f90 <pbuf_remove_header>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d00a      	beq.n	801b412 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b3fc:	4b20      	ldr	r3, [pc, #128]	; (801b480 <udp_input+0x208>)
 801b3fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b402:	4925      	ldr	r1, [pc, #148]	; (801b498 <udp_input+0x220>)
 801b404:	4820      	ldr	r0, [pc, #128]	; (801b488 <udp_input+0x210>)
 801b406:	f000 fff5 	bl	801c3f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f7f8 fe46 	bl	801409c <pbuf_free>
      goto end;
 801b410:	e032      	b.n	801b478 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b414:	2b00      	cmp	r3, #0
 801b416:	d012      	beq.n	801b43e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41a:	699b      	ldr	r3, [r3, #24]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d00a      	beq.n	801b436 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b422:	699c      	ldr	r4, [r3, #24]
 801b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b426:	69d8      	ldr	r0, [r3, #28]
 801b428:	8a3b      	ldrh	r3, [r7, #16]
 801b42a:	9300      	str	r3, [sp, #0]
 801b42c:	4b1b      	ldr	r3, [pc, #108]	; (801b49c <udp_input+0x224>)
 801b42e:	687a      	ldr	r2, [r7, #4]
 801b430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b432:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b434:	e021      	b.n	801b47a <udp_input+0x202>
        pbuf_free(p);
 801b436:	6878      	ldr	r0, [r7, #4]
 801b438:	f7f8 fe30 	bl	801409c <pbuf_free>
        goto end;
 801b43c:	e01c      	b.n	801b478 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b43e:	7cfb      	ldrb	r3, [r7, #19]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d112      	bne.n	801b46a <udp_input+0x1f2>
 801b444:	4b12      	ldr	r3, [pc, #72]	; (801b490 <udp_input+0x218>)
 801b446:	695b      	ldr	r3, [r3, #20]
 801b448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b44c:	2be0      	cmp	r3, #224	; 0xe0
 801b44e:	d00c      	beq.n	801b46a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b450:	4b0f      	ldr	r3, [pc, #60]	; (801b490 <udp_input+0x218>)
 801b452:	899b      	ldrh	r3, [r3, #12]
 801b454:	3308      	adds	r3, #8
 801b456:	b29b      	uxth	r3, r3
 801b458:	b21b      	sxth	r3, r3
 801b45a:	4619      	mov	r1, r3
 801b45c:	6878      	ldr	r0, [r7, #4]
 801b45e:	f7f8 fe0a 	bl	8014076 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b462:	2103      	movs	r1, #3
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f7f5 ff25 	bl	80112b4 <icmp_dest_unreach>
      pbuf_free(p);
 801b46a:	6878      	ldr	r0, [r7, #4]
 801b46c:	f7f8 fe16 	bl	801409c <pbuf_free>
  return;
 801b470:	e003      	b.n	801b47a <udp_input+0x202>
    pbuf_free(p);
 801b472:	6878      	ldr	r0, [r7, #4]
 801b474:	f7f8 fe12 	bl	801409c <pbuf_free>
  return;
 801b478:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b47a:	372c      	adds	r7, #44	; 0x2c
 801b47c:	46bd      	mov	sp, r7
 801b47e:	bd90      	pop	{r4, r7, pc}
 801b480:	08022d38 	.word	0x08022d38
 801b484:	08022dfc 	.word	0x08022dfc
 801b488:	08022dac 	.word	0x08022dac
 801b48c:	08022e14 	.word	0x08022e14
 801b490:	240048f0 	.word	0x240048f0
 801b494:	240079f4 	.word	0x240079f4
 801b498:	08022e30 	.word	0x08022e30
 801b49c:	24004900 	.word	0x24004900

0801b4a0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b088      	sub	sp, #32
 801b4a4:	af02      	add	r7, sp, #8
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	60b9      	str	r1, [r7, #8]
 801b4aa:	607a      	str	r2, [r7, #4]
 801b4ac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d109      	bne.n	801b4c8 <udp_sendto_if+0x28>
 801b4b4:	4b2e      	ldr	r3, [pc, #184]	; (801b570 <udp_sendto_if+0xd0>)
 801b4b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b4ba:	492e      	ldr	r1, [pc, #184]	; (801b574 <udp_sendto_if+0xd4>)
 801b4bc:	482e      	ldr	r0, [pc, #184]	; (801b578 <udp_sendto_if+0xd8>)
 801b4be:	f000 ff99 	bl	801c3f4 <iprintf>
 801b4c2:	f06f 030f 	mvn.w	r3, #15
 801b4c6:	e04f      	b.n	801b568 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b4c8:	68bb      	ldr	r3, [r7, #8]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d109      	bne.n	801b4e2 <udp_sendto_if+0x42>
 801b4ce:	4b28      	ldr	r3, [pc, #160]	; (801b570 <udp_sendto_if+0xd0>)
 801b4d0:	f240 2281 	movw	r2, #641	; 0x281
 801b4d4:	4929      	ldr	r1, [pc, #164]	; (801b57c <udp_sendto_if+0xdc>)
 801b4d6:	4828      	ldr	r0, [pc, #160]	; (801b578 <udp_sendto_if+0xd8>)
 801b4d8:	f000 ff8c 	bl	801c3f4 <iprintf>
 801b4dc:	f06f 030f 	mvn.w	r3, #15
 801b4e0:	e042      	b.n	801b568 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d109      	bne.n	801b4fc <udp_sendto_if+0x5c>
 801b4e8:	4b21      	ldr	r3, [pc, #132]	; (801b570 <udp_sendto_if+0xd0>)
 801b4ea:	f240 2282 	movw	r2, #642	; 0x282
 801b4ee:	4924      	ldr	r1, [pc, #144]	; (801b580 <udp_sendto_if+0xe0>)
 801b4f0:	4821      	ldr	r0, [pc, #132]	; (801b578 <udp_sendto_if+0xd8>)
 801b4f2:	f000 ff7f 	bl	801c3f4 <iprintf>
 801b4f6:	f06f 030f 	mvn.w	r3, #15
 801b4fa:	e035      	b.n	801b568 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b4fc:	6a3b      	ldr	r3, [r7, #32]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d109      	bne.n	801b516 <udp_sendto_if+0x76>
 801b502:	4b1b      	ldr	r3, [pc, #108]	; (801b570 <udp_sendto_if+0xd0>)
 801b504:	f240 2283 	movw	r2, #643	; 0x283
 801b508:	491e      	ldr	r1, [pc, #120]	; (801b584 <udp_sendto_if+0xe4>)
 801b50a:	481b      	ldr	r0, [pc, #108]	; (801b578 <udp_sendto_if+0xd8>)
 801b50c:	f000 ff72 	bl	801c3f4 <iprintf>
 801b510:	f06f 030f 	mvn.w	r3, #15
 801b514:	e028      	b.n	801b568 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d009      	beq.n	801b530 <udp_sendto_if+0x90>
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d005      	beq.n	801b530 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b52c:	2be0      	cmp	r3, #224	; 0xe0
 801b52e:	d103      	bne.n	801b538 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b530:	6a3b      	ldr	r3, [r7, #32]
 801b532:	3304      	adds	r3, #4
 801b534:	617b      	str	r3, [r7, #20]
 801b536:	e00b      	b.n	801b550 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	6a3b      	ldr	r3, [r7, #32]
 801b53e:	3304      	adds	r3, #4
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	429a      	cmp	r2, r3
 801b544:	d002      	beq.n	801b54c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b546:	f06f 0303 	mvn.w	r3, #3
 801b54a:	e00d      	b.n	801b568 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b550:	887a      	ldrh	r2, [r7, #2]
 801b552:	697b      	ldr	r3, [r7, #20]
 801b554:	9301      	str	r3, [sp, #4]
 801b556:	6a3b      	ldr	r3, [r7, #32]
 801b558:	9300      	str	r3, [sp, #0]
 801b55a:	4613      	mov	r3, r2
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	68b9      	ldr	r1, [r7, #8]
 801b560:	68f8      	ldr	r0, [r7, #12]
 801b562:	f000 f811 	bl	801b588 <udp_sendto_if_src>
 801b566:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b568:	4618      	mov	r0, r3
 801b56a:	3718      	adds	r7, #24
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd80      	pop	{r7, pc}
 801b570:	08022d38 	.word	0x08022d38
 801b574:	08022ecc 	.word	0x08022ecc
 801b578:	08022dac 	.word	0x08022dac
 801b57c:	08022ee8 	.word	0x08022ee8
 801b580:	08022f04 	.word	0x08022f04
 801b584:	08022f24 	.word	0x08022f24

0801b588 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b08c      	sub	sp, #48	; 0x30
 801b58c:	af04      	add	r7, sp, #16
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	607a      	str	r2, [r7, #4]
 801b594:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d109      	bne.n	801b5b0 <udp_sendto_if_src+0x28>
 801b59c:	4b65      	ldr	r3, [pc, #404]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b59e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b5a2:	4965      	ldr	r1, [pc, #404]	; (801b738 <udp_sendto_if_src+0x1b0>)
 801b5a4:	4865      	ldr	r0, [pc, #404]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b5a6:	f000 ff25 	bl	801c3f4 <iprintf>
 801b5aa:	f06f 030f 	mvn.w	r3, #15
 801b5ae:	e0bc      	b.n	801b72a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b5b0:	68bb      	ldr	r3, [r7, #8]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d109      	bne.n	801b5ca <udp_sendto_if_src+0x42>
 801b5b6:	4b5f      	ldr	r3, [pc, #380]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b5b8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b5bc:	4960      	ldr	r1, [pc, #384]	; (801b740 <udp_sendto_if_src+0x1b8>)
 801b5be:	485f      	ldr	r0, [pc, #380]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b5c0:	f000 ff18 	bl	801c3f4 <iprintf>
 801b5c4:	f06f 030f 	mvn.w	r3, #15
 801b5c8:	e0af      	b.n	801b72a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d109      	bne.n	801b5e4 <udp_sendto_if_src+0x5c>
 801b5d0:	4b58      	ldr	r3, [pc, #352]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b5d2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b5d6:	495b      	ldr	r1, [pc, #364]	; (801b744 <udp_sendto_if_src+0x1bc>)
 801b5d8:	4858      	ldr	r0, [pc, #352]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b5da:	f000 ff0b 	bl	801c3f4 <iprintf>
 801b5de:	f06f 030f 	mvn.w	r3, #15
 801b5e2:	e0a2      	b.n	801b72a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d109      	bne.n	801b5fe <udp_sendto_if_src+0x76>
 801b5ea:	4b52      	ldr	r3, [pc, #328]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b5ec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b5f0:	4955      	ldr	r1, [pc, #340]	; (801b748 <udp_sendto_if_src+0x1c0>)
 801b5f2:	4852      	ldr	r0, [pc, #328]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b5f4:	f000 fefe 	bl	801c3f4 <iprintf>
 801b5f8:	f06f 030f 	mvn.w	r3, #15
 801b5fc:	e095      	b.n	801b72a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b600:	2b00      	cmp	r3, #0
 801b602:	d109      	bne.n	801b618 <udp_sendto_if_src+0x90>
 801b604:	4b4b      	ldr	r3, [pc, #300]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b606:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b60a:	4950      	ldr	r1, [pc, #320]	; (801b74c <udp_sendto_if_src+0x1c4>)
 801b60c:	484b      	ldr	r0, [pc, #300]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b60e:	f000 fef1 	bl	801c3f4 <iprintf>
 801b612:	f06f 030f 	mvn.w	r3, #15
 801b616:	e088      	b.n	801b72a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	8a5b      	ldrh	r3, [r3, #18]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d10f      	bne.n	801b640 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b620:	68f9      	ldr	r1, [r7, #12]
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	8a5b      	ldrh	r3, [r3, #18]
 801b626:	461a      	mov	r2, r3
 801b628:	68f8      	ldr	r0, [r7, #12]
 801b62a:	f000 f893 	bl	801b754 <udp_bind>
 801b62e:	4603      	mov	r3, r0
 801b630:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b632:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d002      	beq.n	801b640 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b63a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b63e:	e074      	b.n	801b72a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	891b      	ldrh	r3, [r3, #8]
 801b644:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b648:	4293      	cmp	r3, r2
 801b64a:	d902      	bls.n	801b652 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b64c:	f04f 33ff 	mov.w	r3, #4294967295
 801b650:	e06b      	b.n	801b72a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b652:	2108      	movs	r1, #8
 801b654:	68b8      	ldr	r0, [r7, #8]
 801b656:	f7f8 fc8b 	bl	8013f70 <pbuf_add_header>
 801b65a:	4603      	mov	r3, r0
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d015      	beq.n	801b68c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b660:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b664:	2108      	movs	r1, #8
 801b666:	2022      	movs	r0, #34	; 0x22
 801b668:	f7f8 fa34 	bl	8013ad4 <pbuf_alloc>
 801b66c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b66e:	69fb      	ldr	r3, [r7, #28]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d102      	bne.n	801b67a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b674:	f04f 33ff 	mov.w	r3, #4294967295
 801b678:	e057      	b.n	801b72a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	891b      	ldrh	r3, [r3, #8]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d006      	beq.n	801b690 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b682:	68b9      	ldr	r1, [r7, #8]
 801b684:	69f8      	ldr	r0, [r7, #28]
 801b686:	f7f8 fe2d 	bl	80142e4 <pbuf_chain>
 801b68a:	e001      	b.n	801b690 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b690:	69fb      	ldr	r3, [r7, #28]
 801b692:	895b      	ldrh	r3, [r3, #10]
 801b694:	2b07      	cmp	r3, #7
 801b696:	d806      	bhi.n	801b6a6 <udp_sendto_if_src+0x11e>
 801b698:	4b26      	ldr	r3, [pc, #152]	; (801b734 <udp_sendto_if_src+0x1ac>)
 801b69a:	f240 320d 	movw	r2, #781	; 0x30d
 801b69e:	492c      	ldr	r1, [pc, #176]	; (801b750 <udp_sendto_if_src+0x1c8>)
 801b6a0:	4826      	ldr	r0, [pc, #152]	; (801b73c <udp_sendto_if_src+0x1b4>)
 801b6a2:	f000 fea7 	bl	801c3f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b6a6:	69fb      	ldr	r3, [r7, #28]
 801b6a8:	685b      	ldr	r3, [r3, #4]
 801b6aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	8a5b      	ldrh	r3, [r3, #18]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f7f2 fdaf 	bl	800e214 <lwip_htons>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	461a      	mov	r2, r3
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b6be:	887b      	ldrh	r3, [r7, #2]
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	f7f2 fda7 	bl	800e214 <lwip_htons>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	461a      	mov	r2, r3
 801b6ca:	697b      	ldr	r3, [r7, #20]
 801b6cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b6ce:	697b      	ldr	r3, [r7, #20]
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	719a      	strb	r2, [r3, #6]
 801b6d4:	2200      	movs	r2, #0
 801b6d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b6d8:	69fb      	ldr	r3, [r7, #28]
 801b6da:	891b      	ldrh	r3, [r3, #8]
 801b6dc:	4618      	mov	r0, r3
 801b6de:	f7f2 fd99 	bl	800e214 <lwip_htons>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	461a      	mov	r2, r3
 801b6e6:	697b      	ldr	r3, [r7, #20]
 801b6e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b6ea:	2311      	movs	r3, #17
 801b6ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	7adb      	ldrb	r3, [r3, #11]
 801b6f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	7a9b      	ldrb	r3, [r3, #10]
 801b6f8:	7cb9      	ldrb	r1, [r7, #18]
 801b6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6fc:	9202      	str	r2, [sp, #8]
 801b6fe:	7cfa      	ldrb	r2, [r7, #19]
 801b700:	9201      	str	r2, [sp, #4]
 801b702:	9300      	str	r3, [sp, #0]
 801b704:	460b      	mov	r3, r1
 801b706:	687a      	ldr	r2, [r7, #4]
 801b708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b70a:	69f8      	ldr	r0, [r7, #28]
 801b70c:	f7f6 f940 	bl	8011990 <ip4_output_if_src>
 801b710:	4603      	mov	r3, r0
 801b712:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b714:	69fa      	ldr	r2, [r7, #28]
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	429a      	cmp	r2, r3
 801b71a:	d004      	beq.n	801b726 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b71c:	69f8      	ldr	r0, [r7, #28]
 801b71e:	f7f8 fcbd 	bl	801409c <pbuf_free>
    q = NULL;
 801b722:	2300      	movs	r3, #0
 801b724:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b726:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b72a:	4618      	mov	r0, r3
 801b72c:	3720      	adds	r7, #32
 801b72e:	46bd      	mov	sp, r7
 801b730:	bd80      	pop	{r7, pc}
 801b732:	bf00      	nop
 801b734:	08022d38 	.word	0x08022d38
 801b738:	08022f44 	.word	0x08022f44
 801b73c:	08022dac 	.word	0x08022dac
 801b740:	08022f64 	.word	0x08022f64
 801b744:	08022f84 	.word	0x08022f84
 801b748:	08022fa8 	.word	0x08022fa8
 801b74c:	08022fcc 	.word	0x08022fcc
 801b750:	08022ff0 	.word	0x08022ff0

0801b754 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b754:	b580      	push	{r7, lr}
 801b756:	b086      	sub	sp, #24
 801b758:	af00      	add	r7, sp, #0
 801b75a:	60f8      	str	r0, [r7, #12]
 801b75c:	60b9      	str	r1, [r7, #8]
 801b75e:	4613      	mov	r3, r2
 801b760:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d101      	bne.n	801b76c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b768:	4b39      	ldr	r3, [pc, #228]	; (801b850 <udp_bind+0xfc>)
 801b76a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d109      	bne.n	801b786 <udp_bind+0x32>
 801b772:	4b38      	ldr	r3, [pc, #224]	; (801b854 <udp_bind+0x100>)
 801b774:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b778:	4937      	ldr	r1, [pc, #220]	; (801b858 <udp_bind+0x104>)
 801b77a:	4838      	ldr	r0, [pc, #224]	; (801b85c <udp_bind+0x108>)
 801b77c:	f000 fe3a 	bl	801c3f4 <iprintf>
 801b780:	f06f 030f 	mvn.w	r3, #15
 801b784:	e060      	b.n	801b848 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b786:	2300      	movs	r3, #0
 801b788:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b78a:	4b35      	ldr	r3, [pc, #212]	; (801b860 <udp_bind+0x10c>)
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	617b      	str	r3, [r7, #20]
 801b790:	e009      	b.n	801b7a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b792:	68fa      	ldr	r2, [r7, #12]
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	429a      	cmp	r2, r3
 801b798:	d102      	bne.n	801b7a0 <udp_bind+0x4c>
      rebind = 1;
 801b79a:	2301      	movs	r3, #1
 801b79c:	74fb      	strb	r3, [r7, #19]
      break;
 801b79e:	e005      	b.n	801b7ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b7a0:	697b      	ldr	r3, [r7, #20]
 801b7a2:	68db      	ldr	r3, [r3, #12]
 801b7a4:	617b      	str	r3, [r7, #20]
 801b7a6:	697b      	ldr	r3, [r7, #20]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d1f2      	bne.n	801b792 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b7ac:	88fb      	ldrh	r3, [r7, #6]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d109      	bne.n	801b7c6 <udp_bind+0x72>
    port = udp_new_port();
 801b7b2:	f7ff fcc5 	bl	801b140 <udp_new_port>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b7ba:	88fb      	ldrh	r3, [r7, #6]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d12c      	bne.n	801b81a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b7c0:	f06f 0307 	mvn.w	r3, #7
 801b7c4:	e040      	b.n	801b848 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b7c6:	4b26      	ldr	r3, [pc, #152]	; (801b860 <udp_bind+0x10c>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	617b      	str	r3, [r7, #20]
 801b7cc:	e022      	b.n	801b814 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b7ce:	68fa      	ldr	r2, [r7, #12]
 801b7d0:	697b      	ldr	r3, [r7, #20]
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d01b      	beq.n	801b80e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b7d6:	697b      	ldr	r3, [r7, #20]
 801b7d8:	8a5b      	ldrh	r3, [r3, #18]
 801b7da:	88fa      	ldrh	r2, [r7, #6]
 801b7dc:	429a      	cmp	r2, r3
 801b7de:	d116      	bne.n	801b80e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	681a      	ldr	r2, [r3, #0]
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	d00d      	beq.n	801b808 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b7ec:	68bb      	ldr	r3, [r7, #8]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d00a      	beq.n	801b808 <udp_bind+0xb4>
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d006      	beq.n	801b808 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b7fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d003      	beq.n	801b808 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d102      	bne.n	801b80e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b808:	f06f 0307 	mvn.w	r3, #7
 801b80c:	e01c      	b.n	801b848 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b80e:	697b      	ldr	r3, [r7, #20]
 801b810:	68db      	ldr	r3, [r3, #12]
 801b812:	617b      	str	r3, [r7, #20]
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d1d9      	bne.n	801b7ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d002      	beq.n	801b826 <udp_bind+0xd2>
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	e000      	b.n	801b828 <udp_bind+0xd4>
 801b826:	2300      	movs	r3, #0
 801b828:	68fa      	ldr	r2, [r7, #12]
 801b82a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	88fa      	ldrh	r2, [r7, #6]
 801b830:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b832:	7cfb      	ldrb	r3, [r7, #19]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d106      	bne.n	801b846 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b838:	4b09      	ldr	r3, [pc, #36]	; (801b860 <udp_bind+0x10c>)
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b840:	4a07      	ldr	r2, [pc, #28]	; (801b860 <udp_bind+0x10c>)
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b846:	2300      	movs	r3, #0
}
 801b848:	4618      	mov	r0, r3
 801b84a:	3718      	adds	r7, #24
 801b84c:	46bd      	mov	sp, r7
 801b84e:	bd80      	pop	{r7, pc}
 801b850:	080463c8 	.word	0x080463c8
 801b854:	08022d38 	.word	0x08022d38
 801b858:	08023020 	.word	0x08023020
 801b85c:	08022dac 	.word	0x08022dac
 801b860:	240079f4 	.word	0x240079f4

0801b864 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b086      	sub	sp, #24
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
 801b86e:	4613      	mov	r3, r2
 801b870:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d109      	bne.n	801b88c <udp_connect+0x28>
 801b878:	4b2c      	ldr	r3, [pc, #176]	; (801b92c <udp_connect+0xc8>)
 801b87a:	f240 4235 	movw	r2, #1077	; 0x435
 801b87e:	492c      	ldr	r1, [pc, #176]	; (801b930 <udp_connect+0xcc>)
 801b880:	482c      	ldr	r0, [pc, #176]	; (801b934 <udp_connect+0xd0>)
 801b882:	f000 fdb7 	bl	801c3f4 <iprintf>
 801b886:	f06f 030f 	mvn.w	r3, #15
 801b88a:	e04b      	b.n	801b924 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d109      	bne.n	801b8a6 <udp_connect+0x42>
 801b892:	4b26      	ldr	r3, [pc, #152]	; (801b92c <udp_connect+0xc8>)
 801b894:	f240 4236 	movw	r2, #1078	; 0x436
 801b898:	4927      	ldr	r1, [pc, #156]	; (801b938 <udp_connect+0xd4>)
 801b89a:	4826      	ldr	r0, [pc, #152]	; (801b934 <udp_connect+0xd0>)
 801b89c:	f000 fdaa 	bl	801c3f4 <iprintf>
 801b8a0:	f06f 030f 	mvn.w	r3, #15
 801b8a4:	e03e      	b.n	801b924 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	8a5b      	ldrh	r3, [r3, #18]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d10f      	bne.n	801b8ce <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b8ae:	68f9      	ldr	r1, [r7, #12]
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	8a5b      	ldrh	r3, [r3, #18]
 801b8b4:	461a      	mov	r2, r3
 801b8b6:	68f8      	ldr	r0, [r7, #12]
 801b8b8:	f7ff ff4c 	bl	801b754 <udp_bind>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d002      	beq.n	801b8ce <udp_connect+0x6a>
      return err;
 801b8c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b8cc:	e02a      	b.n	801b924 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d002      	beq.n	801b8da <udp_connect+0x76>
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	e000      	b.n	801b8dc <udp_connect+0x78>
 801b8da:	2300      	movs	r3, #0
 801b8dc:	68fa      	ldr	r2, [r7, #12]
 801b8de:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	88fa      	ldrh	r2, [r7, #6]
 801b8e4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	7c1b      	ldrb	r3, [r3, #16]
 801b8ea:	f043 0304 	orr.w	r3, r3, #4
 801b8ee:	b2da      	uxtb	r2, r3
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b8f4:	4b11      	ldr	r3, [pc, #68]	; (801b93c <udp_connect+0xd8>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	617b      	str	r3, [r7, #20]
 801b8fa:	e008      	b.n	801b90e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b8fc:	68fa      	ldr	r2, [r7, #12]
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	429a      	cmp	r2, r3
 801b902:	d101      	bne.n	801b908 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b904:	2300      	movs	r3, #0
 801b906:	e00d      	b.n	801b924 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b908:	697b      	ldr	r3, [r7, #20]
 801b90a:	68db      	ldr	r3, [r3, #12]
 801b90c:	617b      	str	r3, [r7, #20]
 801b90e:	697b      	ldr	r3, [r7, #20]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d1f3      	bne.n	801b8fc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b914:	4b09      	ldr	r3, [pc, #36]	; (801b93c <udp_connect+0xd8>)
 801b916:	681a      	ldr	r2, [r3, #0]
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b91c:	4a07      	ldr	r2, [pc, #28]	; (801b93c <udp_connect+0xd8>)
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b922:	2300      	movs	r3, #0
}
 801b924:	4618      	mov	r0, r3
 801b926:	3718      	adds	r7, #24
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	08022d38 	.word	0x08022d38
 801b930:	08023038 	.word	0x08023038
 801b934:	08022dac 	.word	0x08022dac
 801b938:	08023054 	.word	0x08023054
 801b93c:	240079f4 	.word	0x240079f4

0801b940 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b084      	sub	sp, #16
 801b944:	af00      	add	r7, sp, #0
 801b946:	60f8      	str	r0, [r7, #12]
 801b948:	60b9      	str	r1, [r7, #8]
 801b94a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d107      	bne.n	801b962 <udp_recv+0x22>
 801b952:	4b08      	ldr	r3, [pc, #32]	; (801b974 <udp_recv+0x34>)
 801b954:	f240 428a 	movw	r2, #1162	; 0x48a
 801b958:	4907      	ldr	r1, [pc, #28]	; (801b978 <udp_recv+0x38>)
 801b95a:	4808      	ldr	r0, [pc, #32]	; (801b97c <udp_recv+0x3c>)
 801b95c:	f000 fd4a 	bl	801c3f4 <iprintf>
 801b960:	e005      	b.n	801b96e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	68ba      	ldr	r2, [r7, #8]
 801b966:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	687a      	ldr	r2, [r7, #4]
 801b96c:	61da      	str	r2, [r3, #28]
}
 801b96e:	3710      	adds	r7, #16
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}
 801b974:	08022d38 	.word	0x08022d38
 801b978:	0802308c 	.word	0x0802308c
 801b97c:	08022dac 	.word	0x08022dac

0801b980 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b084      	sub	sp, #16
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d107      	bne.n	801b99e <udp_remove+0x1e>
 801b98e:	4b19      	ldr	r3, [pc, #100]	; (801b9f4 <udp_remove+0x74>)
 801b990:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b994:	4918      	ldr	r1, [pc, #96]	; (801b9f8 <udp_remove+0x78>)
 801b996:	4819      	ldr	r0, [pc, #100]	; (801b9fc <udp_remove+0x7c>)
 801b998:	f000 fd2c 	bl	801c3f4 <iprintf>
 801b99c:	e026      	b.n	801b9ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b99e:	4b18      	ldr	r3, [pc, #96]	; (801ba00 <udp_remove+0x80>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	687a      	ldr	r2, [r7, #4]
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d105      	bne.n	801b9b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b9a8:	4b15      	ldr	r3, [pc, #84]	; (801ba00 <udp_remove+0x80>)
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	68db      	ldr	r3, [r3, #12]
 801b9ae:	4a14      	ldr	r2, [pc, #80]	; (801ba00 <udp_remove+0x80>)
 801b9b0:	6013      	str	r3, [r2, #0]
 801b9b2:	e017      	b.n	801b9e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b9b4:	4b12      	ldr	r3, [pc, #72]	; (801ba00 <udp_remove+0x80>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	60fb      	str	r3, [r7, #12]
 801b9ba:	e010      	b.n	801b9de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d009      	beq.n	801b9d8 <udp_remove+0x58>
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	68db      	ldr	r3, [r3, #12]
 801b9c8:	687a      	ldr	r2, [r7, #4]
 801b9ca:	429a      	cmp	r2, r3
 801b9cc:	d104      	bne.n	801b9d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	68da      	ldr	r2, [r3, #12]
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	60da      	str	r2, [r3, #12]
        break;
 801b9d6:	e005      	b.n	801b9e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	68db      	ldr	r3, [r3, #12]
 801b9dc:	60fb      	str	r3, [r7, #12]
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d1eb      	bne.n	801b9bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b9e4:	6879      	ldr	r1, [r7, #4]
 801b9e6:	2000      	movs	r0, #0
 801b9e8:	f7f7 fc0e 	bl	8013208 <memp_free>
}
 801b9ec:	3710      	adds	r7, #16
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd80      	pop	{r7, pc}
 801b9f2:	bf00      	nop
 801b9f4:	08022d38 	.word	0x08022d38
 801b9f8:	080230a4 	.word	0x080230a4
 801b9fc:	08022dac 	.word	0x08022dac
 801ba00:	240079f4 	.word	0x240079f4

0801ba04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b082      	sub	sp, #8
 801ba08:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ba0a:	2000      	movs	r0, #0
 801ba0c:	f7f7 fb86 	bl	801311c <memp_malloc>
 801ba10:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d007      	beq.n	801ba28 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ba18:	2220      	movs	r2, #32
 801ba1a:	2100      	movs	r1, #0
 801ba1c:	6878      	ldr	r0, [r7, #4]
 801ba1e:	f000 f89f 	bl	801bb60 <memset>
    pcb->ttl = UDP_TTL;
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	22ff      	movs	r2, #255	; 0xff
 801ba26:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ba28:	687b      	ldr	r3, [r7, #4]
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	3708      	adds	r7, #8
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}

0801ba32 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ba32:	b580      	push	{r7, lr}
 801ba34:	b084      	sub	sp, #16
 801ba36:	af00      	add	r7, sp, #0
 801ba38:	4603      	mov	r3, r0
 801ba3a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ba3c:	f7ff ffe2 	bl	801ba04 <udp_new>
 801ba40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ba42:	68fb      	ldr	r3, [r7, #12]
}
 801ba44:	4618      	mov	r0, r3
 801ba46:	3710      	adds	r7, #16
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd80      	pop	{r7, pc}

0801ba4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ba4c:	b480      	push	{r7}
 801ba4e:	b085      	sub	sp, #20
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
 801ba54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d01e      	beq.n	801ba9a <udp_netif_ip_addr_changed+0x4e>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d01a      	beq.n	801ba9a <udp_netif_ip_addr_changed+0x4e>
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d017      	beq.n	801ba9a <udp_netif_ip_addr_changed+0x4e>
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d013      	beq.n	801ba9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ba72:	4b0d      	ldr	r3, [pc, #52]	; (801baa8 <udp_netif_ip_addr_changed+0x5c>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	60fb      	str	r3, [r7, #12]
 801ba78:	e00c      	b.n	801ba94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	681a      	ldr	r2, [r3, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d103      	bne.n	801ba8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ba86:	683b      	ldr	r3, [r7, #0]
 801ba88:	681a      	ldr	r2, [r3, #0]
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	68db      	ldr	r3, [r3, #12]
 801ba92:	60fb      	str	r3, [r7, #12]
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d1ef      	bne.n	801ba7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ba9a:	bf00      	nop
 801ba9c:	3714      	adds	r7, #20
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa4:	4770      	bx	lr
 801baa6:	bf00      	nop
 801baa8:	240079f4 	.word	0x240079f4

0801baac <__libc_init_array>:
 801baac:	b570      	push	{r4, r5, r6, lr}
 801baae:	4d0d      	ldr	r5, [pc, #52]	; (801bae4 <__libc_init_array+0x38>)
 801bab0:	4c0d      	ldr	r4, [pc, #52]	; (801bae8 <__libc_init_array+0x3c>)
 801bab2:	1b64      	subs	r4, r4, r5
 801bab4:	10a4      	asrs	r4, r4, #2
 801bab6:	2600      	movs	r6, #0
 801bab8:	42a6      	cmp	r6, r4
 801baba:	d109      	bne.n	801bad0 <__libc_init_array+0x24>
 801babc:	4d0b      	ldr	r5, [pc, #44]	; (801baec <__libc_init_array+0x40>)
 801babe:	4c0c      	ldr	r4, [pc, #48]	; (801baf0 <__libc_init_array+0x44>)
 801bac0:	f003 fb76 	bl	801f1b0 <_init>
 801bac4:	1b64      	subs	r4, r4, r5
 801bac6:	10a4      	asrs	r4, r4, #2
 801bac8:	2600      	movs	r6, #0
 801baca:	42a6      	cmp	r6, r4
 801bacc:	d105      	bne.n	801bada <__libc_init_array+0x2e>
 801bace:	bd70      	pop	{r4, r5, r6, pc}
 801bad0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bad4:	4798      	blx	r3
 801bad6:	3601      	adds	r6, #1
 801bad8:	e7ee      	b.n	801bab8 <__libc_init_array+0xc>
 801bada:	f855 3b04 	ldr.w	r3, [r5], #4
 801bade:	4798      	blx	r3
 801bae0:	3601      	adds	r6, #1
 801bae2:	e7f2      	b.n	801baca <__libc_init_array+0x1e>
 801bae4:	08046964 	.word	0x08046964
 801bae8:	08046964 	.word	0x08046964
 801baec:	08046964 	.word	0x08046964
 801baf0:	08046968 	.word	0x08046968

0801baf4 <memcmp>:
 801baf4:	b530      	push	{r4, r5, lr}
 801baf6:	3901      	subs	r1, #1
 801baf8:	2400      	movs	r4, #0
 801bafa:	42a2      	cmp	r2, r4
 801bafc:	d101      	bne.n	801bb02 <memcmp+0xe>
 801bafe:	2000      	movs	r0, #0
 801bb00:	e005      	b.n	801bb0e <memcmp+0x1a>
 801bb02:	5d03      	ldrb	r3, [r0, r4]
 801bb04:	3401      	adds	r4, #1
 801bb06:	5d0d      	ldrb	r5, [r1, r4]
 801bb08:	42ab      	cmp	r3, r5
 801bb0a:	d0f6      	beq.n	801bafa <memcmp+0x6>
 801bb0c:	1b58      	subs	r0, r3, r5
 801bb0e:	bd30      	pop	{r4, r5, pc}

0801bb10 <memcpy>:
 801bb10:	440a      	add	r2, r1
 801bb12:	4291      	cmp	r1, r2
 801bb14:	f100 33ff 	add.w	r3, r0, #4294967295
 801bb18:	d100      	bne.n	801bb1c <memcpy+0xc>
 801bb1a:	4770      	bx	lr
 801bb1c:	b510      	push	{r4, lr}
 801bb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb26:	4291      	cmp	r1, r2
 801bb28:	d1f9      	bne.n	801bb1e <memcpy+0xe>
 801bb2a:	bd10      	pop	{r4, pc}

0801bb2c <memmove>:
 801bb2c:	4288      	cmp	r0, r1
 801bb2e:	b510      	push	{r4, lr}
 801bb30:	eb01 0402 	add.w	r4, r1, r2
 801bb34:	d902      	bls.n	801bb3c <memmove+0x10>
 801bb36:	4284      	cmp	r4, r0
 801bb38:	4623      	mov	r3, r4
 801bb3a:	d807      	bhi.n	801bb4c <memmove+0x20>
 801bb3c:	1e43      	subs	r3, r0, #1
 801bb3e:	42a1      	cmp	r1, r4
 801bb40:	d008      	beq.n	801bb54 <memmove+0x28>
 801bb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bb4a:	e7f8      	b.n	801bb3e <memmove+0x12>
 801bb4c:	4402      	add	r2, r0
 801bb4e:	4601      	mov	r1, r0
 801bb50:	428a      	cmp	r2, r1
 801bb52:	d100      	bne.n	801bb56 <memmove+0x2a>
 801bb54:	bd10      	pop	{r4, pc}
 801bb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bb5e:	e7f7      	b.n	801bb50 <memmove+0x24>

0801bb60 <memset>:
 801bb60:	4402      	add	r2, r0
 801bb62:	4603      	mov	r3, r0
 801bb64:	4293      	cmp	r3, r2
 801bb66:	d100      	bne.n	801bb6a <memset+0xa>
 801bb68:	4770      	bx	lr
 801bb6a:	f803 1b01 	strb.w	r1, [r3], #1
 801bb6e:	e7f9      	b.n	801bb64 <memset+0x4>

0801bb70 <__cvt>:
 801bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb72:	ed2d 8b02 	vpush	{d8}
 801bb76:	eeb0 8b40 	vmov.f64	d8, d0
 801bb7a:	b085      	sub	sp, #20
 801bb7c:	4617      	mov	r7, r2
 801bb7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bb80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bb82:	ee18 2a90 	vmov	r2, s17
 801bb86:	f025 0520 	bic.w	r5, r5, #32
 801bb8a:	2a00      	cmp	r2, #0
 801bb8c:	bfb6      	itet	lt
 801bb8e:	222d      	movlt	r2, #45	; 0x2d
 801bb90:	2200      	movge	r2, #0
 801bb92:	eeb1 8b40 	vneglt.f64	d8, d0
 801bb96:	2d46      	cmp	r5, #70	; 0x46
 801bb98:	460c      	mov	r4, r1
 801bb9a:	701a      	strb	r2, [r3, #0]
 801bb9c:	d004      	beq.n	801bba8 <__cvt+0x38>
 801bb9e:	2d45      	cmp	r5, #69	; 0x45
 801bba0:	d100      	bne.n	801bba4 <__cvt+0x34>
 801bba2:	3401      	adds	r4, #1
 801bba4:	2102      	movs	r1, #2
 801bba6:	e000      	b.n	801bbaa <__cvt+0x3a>
 801bba8:	2103      	movs	r1, #3
 801bbaa:	ab03      	add	r3, sp, #12
 801bbac:	9301      	str	r3, [sp, #4]
 801bbae:	ab02      	add	r3, sp, #8
 801bbb0:	9300      	str	r3, [sp, #0]
 801bbb2:	4622      	mov	r2, r4
 801bbb4:	4633      	mov	r3, r6
 801bbb6:	eeb0 0b48 	vmov.f64	d0, d8
 801bbba:	f000 fe79 	bl	801c8b0 <_dtoa_r>
 801bbbe:	2d47      	cmp	r5, #71	; 0x47
 801bbc0:	d109      	bne.n	801bbd6 <__cvt+0x66>
 801bbc2:	07fb      	lsls	r3, r7, #31
 801bbc4:	d407      	bmi.n	801bbd6 <__cvt+0x66>
 801bbc6:	9b03      	ldr	r3, [sp, #12]
 801bbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bbca:	1a1b      	subs	r3, r3, r0
 801bbcc:	6013      	str	r3, [r2, #0]
 801bbce:	b005      	add	sp, #20
 801bbd0:	ecbd 8b02 	vpop	{d8}
 801bbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbd6:	2d46      	cmp	r5, #70	; 0x46
 801bbd8:	eb00 0204 	add.w	r2, r0, r4
 801bbdc:	d10c      	bne.n	801bbf8 <__cvt+0x88>
 801bbde:	7803      	ldrb	r3, [r0, #0]
 801bbe0:	2b30      	cmp	r3, #48	; 0x30
 801bbe2:	d107      	bne.n	801bbf4 <__cvt+0x84>
 801bbe4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbec:	bf1c      	itt	ne
 801bbee:	f1c4 0401 	rsbne	r4, r4, #1
 801bbf2:	6034      	strne	r4, [r6, #0]
 801bbf4:	6833      	ldr	r3, [r6, #0]
 801bbf6:	441a      	add	r2, r3
 801bbf8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc00:	bf08      	it	eq
 801bc02:	9203      	streq	r2, [sp, #12]
 801bc04:	2130      	movs	r1, #48	; 0x30
 801bc06:	9b03      	ldr	r3, [sp, #12]
 801bc08:	4293      	cmp	r3, r2
 801bc0a:	d2dc      	bcs.n	801bbc6 <__cvt+0x56>
 801bc0c:	1c5c      	adds	r4, r3, #1
 801bc0e:	9403      	str	r4, [sp, #12]
 801bc10:	7019      	strb	r1, [r3, #0]
 801bc12:	e7f8      	b.n	801bc06 <__cvt+0x96>

0801bc14 <__exponent>:
 801bc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc16:	4603      	mov	r3, r0
 801bc18:	2900      	cmp	r1, #0
 801bc1a:	bfb8      	it	lt
 801bc1c:	4249      	neglt	r1, r1
 801bc1e:	f803 2b02 	strb.w	r2, [r3], #2
 801bc22:	bfb4      	ite	lt
 801bc24:	222d      	movlt	r2, #45	; 0x2d
 801bc26:	222b      	movge	r2, #43	; 0x2b
 801bc28:	2909      	cmp	r1, #9
 801bc2a:	7042      	strb	r2, [r0, #1]
 801bc2c:	dd2a      	ble.n	801bc84 <__exponent+0x70>
 801bc2e:	f10d 0407 	add.w	r4, sp, #7
 801bc32:	46a4      	mov	ip, r4
 801bc34:	270a      	movs	r7, #10
 801bc36:	46a6      	mov	lr, r4
 801bc38:	460a      	mov	r2, r1
 801bc3a:	fb91 f6f7 	sdiv	r6, r1, r7
 801bc3e:	fb07 1516 	mls	r5, r7, r6, r1
 801bc42:	3530      	adds	r5, #48	; 0x30
 801bc44:	2a63      	cmp	r2, #99	; 0x63
 801bc46:	f104 34ff 	add.w	r4, r4, #4294967295
 801bc4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bc4e:	4631      	mov	r1, r6
 801bc50:	dcf1      	bgt.n	801bc36 <__exponent+0x22>
 801bc52:	3130      	adds	r1, #48	; 0x30
 801bc54:	f1ae 0502 	sub.w	r5, lr, #2
 801bc58:	f804 1c01 	strb.w	r1, [r4, #-1]
 801bc5c:	1c44      	adds	r4, r0, #1
 801bc5e:	4629      	mov	r1, r5
 801bc60:	4561      	cmp	r1, ip
 801bc62:	d30a      	bcc.n	801bc7a <__exponent+0x66>
 801bc64:	f10d 0209 	add.w	r2, sp, #9
 801bc68:	eba2 020e 	sub.w	r2, r2, lr
 801bc6c:	4565      	cmp	r5, ip
 801bc6e:	bf88      	it	hi
 801bc70:	2200      	movhi	r2, #0
 801bc72:	4413      	add	r3, r2
 801bc74:	1a18      	subs	r0, r3, r0
 801bc76:	b003      	add	sp, #12
 801bc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bc82:	e7ed      	b.n	801bc60 <__exponent+0x4c>
 801bc84:	2330      	movs	r3, #48	; 0x30
 801bc86:	3130      	adds	r1, #48	; 0x30
 801bc88:	7083      	strb	r3, [r0, #2]
 801bc8a:	70c1      	strb	r1, [r0, #3]
 801bc8c:	1d03      	adds	r3, r0, #4
 801bc8e:	e7f1      	b.n	801bc74 <__exponent+0x60>

0801bc90 <_printf_float>:
 801bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc94:	b08b      	sub	sp, #44	; 0x2c
 801bc96:	460c      	mov	r4, r1
 801bc98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bc9c:	4616      	mov	r6, r2
 801bc9e:	461f      	mov	r7, r3
 801bca0:	4605      	mov	r5, r0
 801bca2:	f001 fc95 	bl	801d5d0 <_localeconv_r>
 801bca6:	f8d0 b000 	ldr.w	fp, [r0]
 801bcaa:	4658      	mov	r0, fp
 801bcac:	f7e4 fb22 	bl	80002f4 <strlen>
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	9308      	str	r3, [sp, #32]
 801bcb4:	f8d8 3000 	ldr.w	r3, [r8]
 801bcb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801bcbc:	6822      	ldr	r2, [r4, #0]
 801bcbe:	3307      	adds	r3, #7
 801bcc0:	f023 0307 	bic.w	r3, r3, #7
 801bcc4:	f103 0108 	add.w	r1, r3, #8
 801bcc8:	f8c8 1000 	str.w	r1, [r8]
 801bccc:	4682      	mov	sl, r0
 801bcce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bcd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801bcd6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801bf38 <_printf_float+0x2a8>
 801bcda:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801bcde:	eeb0 6bc0 	vabs.f64	d6, d0
 801bce2:	eeb4 6b47 	vcmp.f64	d6, d7
 801bce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcea:	dd24      	ble.n	801bd36 <_printf_float+0xa6>
 801bcec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcf4:	d502      	bpl.n	801bcfc <_printf_float+0x6c>
 801bcf6:	232d      	movs	r3, #45	; 0x2d
 801bcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bcfc:	4b90      	ldr	r3, [pc, #576]	; (801bf40 <_printf_float+0x2b0>)
 801bcfe:	4891      	ldr	r0, [pc, #580]	; (801bf44 <_printf_float+0x2b4>)
 801bd00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801bd04:	bf94      	ite	ls
 801bd06:	4698      	movls	r8, r3
 801bd08:	4680      	movhi	r8, r0
 801bd0a:	2303      	movs	r3, #3
 801bd0c:	6123      	str	r3, [r4, #16]
 801bd0e:	f022 0204 	bic.w	r2, r2, #4
 801bd12:	2300      	movs	r3, #0
 801bd14:	6022      	str	r2, [r4, #0]
 801bd16:	9304      	str	r3, [sp, #16]
 801bd18:	9700      	str	r7, [sp, #0]
 801bd1a:	4633      	mov	r3, r6
 801bd1c:	aa09      	add	r2, sp, #36	; 0x24
 801bd1e:	4621      	mov	r1, r4
 801bd20:	4628      	mov	r0, r5
 801bd22:	f000 f9d3 	bl	801c0cc <_printf_common>
 801bd26:	3001      	adds	r0, #1
 801bd28:	f040 808a 	bne.w	801be40 <_printf_float+0x1b0>
 801bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd30:	b00b      	add	sp, #44	; 0x2c
 801bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd36:	eeb4 0b40 	vcmp.f64	d0, d0
 801bd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd3e:	d709      	bvc.n	801bd54 <_printf_float+0xc4>
 801bd40:	ee10 3a90 	vmov	r3, s1
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	bfbc      	itt	lt
 801bd48:	232d      	movlt	r3, #45	; 0x2d
 801bd4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bd4e:	487e      	ldr	r0, [pc, #504]	; (801bf48 <_printf_float+0x2b8>)
 801bd50:	4b7e      	ldr	r3, [pc, #504]	; (801bf4c <_printf_float+0x2bc>)
 801bd52:	e7d5      	b.n	801bd00 <_printf_float+0x70>
 801bd54:	6863      	ldr	r3, [r4, #4]
 801bd56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801bd5a:	9104      	str	r1, [sp, #16]
 801bd5c:	1c59      	adds	r1, r3, #1
 801bd5e:	d13c      	bne.n	801bdda <_printf_float+0x14a>
 801bd60:	2306      	movs	r3, #6
 801bd62:	6063      	str	r3, [r4, #4]
 801bd64:	2300      	movs	r3, #0
 801bd66:	9303      	str	r3, [sp, #12]
 801bd68:	ab08      	add	r3, sp, #32
 801bd6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bd6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bd72:	ab07      	add	r3, sp, #28
 801bd74:	6861      	ldr	r1, [r4, #4]
 801bd76:	9300      	str	r3, [sp, #0]
 801bd78:	6022      	str	r2, [r4, #0]
 801bd7a:	f10d 031b 	add.w	r3, sp, #27
 801bd7e:	4628      	mov	r0, r5
 801bd80:	f7ff fef6 	bl	801bb70 <__cvt>
 801bd84:	9b04      	ldr	r3, [sp, #16]
 801bd86:	9907      	ldr	r1, [sp, #28]
 801bd88:	2b47      	cmp	r3, #71	; 0x47
 801bd8a:	4680      	mov	r8, r0
 801bd8c:	d108      	bne.n	801bda0 <_printf_float+0x110>
 801bd8e:	1cc8      	adds	r0, r1, #3
 801bd90:	db02      	blt.n	801bd98 <_printf_float+0x108>
 801bd92:	6863      	ldr	r3, [r4, #4]
 801bd94:	4299      	cmp	r1, r3
 801bd96:	dd41      	ble.n	801be1c <_printf_float+0x18c>
 801bd98:	f1a9 0902 	sub.w	r9, r9, #2
 801bd9c:	fa5f f989 	uxtb.w	r9, r9
 801bda0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bda4:	d820      	bhi.n	801bde8 <_printf_float+0x158>
 801bda6:	3901      	subs	r1, #1
 801bda8:	464a      	mov	r2, r9
 801bdaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bdae:	9107      	str	r1, [sp, #28]
 801bdb0:	f7ff ff30 	bl	801bc14 <__exponent>
 801bdb4:	9a08      	ldr	r2, [sp, #32]
 801bdb6:	9004      	str	r0, [sp, #16]
 801bdb8:	1813      	adds	r3, r2, r0
 801bdba:	2a01      	cmp	r2, #1
 801bdbc:	6123      	str	r3, [r4, #16]
 801bdbe:	dc02      	bgt.n	801bdc6 <_printf_float+0x136>
 801bdc0:	6822      	ldr	r2, [r4, #0]
 801bdc2:	07d2      	lsls	r2, r2, #31
 801bdc4:	d501      	bpl.n	801bdca <_printf_float+0x13a>
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	6123      	str	r3, [r4, #16]
 801bdca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d0a2      	beq.n	801bd18 <_printf_float+0x88>
 801bdd2:	232d      	movs	r3, #45	; 0x2d
 801bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bdd8:	e79e      	b.n	801bd18 <_printf_float+0x88>
 801bdda:	9904      	ldr	r1, [sp, #16]
 801bddc:	2947      	cmp	r1, #71	; 0x47
 801bdde:	d1c1      	bne.n	801bd64 <_printf_float+0xd4>
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d1bf      	bne.n	801bd64 <_printf_float+0xd4>
 801bde4:	2301      	movs	r3, #1
 801bde6:	e7bc      	b.n	801bd62 <_printf_float+0xd2>
 801bde8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801bdec:	d118      	bne.n	801be20 <_printf_float+0x190>
 801bdee:	2900      	cmp	r1, #0
 801bdf0:	6863      	ldr	r3, [r4, #4]
 801bdf2:	dd0b      	ble.n	801be0c <_printf_float+0x17c>
 801bdf4:	6121      	str	r1, [r4, #16]
 801bdf6:	b913      	cbnz	r3, 801bdfe <_printf_float+0x16e>
 801bdf8:	6822      	ldr	r2, [r4, #0]
 801bdfa:	07d0      	lsls	r0, r2, #31
 801bdfc:	d502      	bpl.n	801be04 <_printf_float+0x174>
 801bdfe:	3301      	adds	r3, #1
 801be00:	440b      	add	r3, r1
 801be02:	6123      	str	r3, [r4, #16]
 801be04:	2300      	movs	r3, #0
 801be06:	65a1      	str	r1, [r4, #88]	; 0x58
 801be08:	9304      	str	r3, [sp, #16]
 801be0a:	e7de      	b.n	801bdca <_printf_float+0x13a>
 801be0c:	b913      	cbnz	r3, 801be14 <_printf_float+0x184>
 801be0e:	6822      	ldr	r2, [r4, #0]
 801be10:	07d2      	lsls	r2, r2, #31
 801be12:	d501      	bpl.n	801be18 <_printf_float+0x188>
 801be14:	3302      	adds	r3, #2
 801be16:	e7f4      	b.n	801be02 <_printf_float+0x172>
 801be18:	2301      	movs	r3, #1
 801be1a:	e7f2      	b.n	801be02 <_printf_float+0x172>
 801be1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801be20:	9b08      	ldr	r3, [sp, #32]
 801be22:	4299      	cmp	r1, r3
 801be24:	db05      	blt.n	801be32 <_printf_float+0x1a2>
 801be26:	6823      	ldr	r3, [r4, #0]
 801be28:	6121      	str	r1, [r4, #16]
 801be2a:	07d8      	lsls	r0, r3, #31
 801be2c:	d5ea      	bpl.n	801be04 <_printf_float+0x174>
 801be2e:	1c4b      	adds	r3, r1, #1
 801be30:	e7e7      	b.n	801be02 <_printf_float+0x172>
 801be32:	2900      	cmp	r1, #0
 801be34:	bfd4      	ite	le
 801be36:	f1c1 0202 	rsble	r2, r1, #2
 801be3a:	2201      	movgt	r2, #1
 801be3c:	4413      	add	r3, r2
 801be3e:	e7e0      	b.n	801be02 <_printf_float+0x172>
 801be40:	6823      	ldr	r3, [r4, #0]
 801be42:	055a      	lsls	r2, r3, #21
 801be44:	d407      	bmi.n	801be56 <_printf_float+0x1c6>
 801be46:	6923      	ldr	r3, [r4, #16]
 801be48:	4642      	mov	r2, r8
 801be4a:	4631      	mov	r1, r6
 801be4c:	4628      	mov	r0, r5
 801be4e:	47b8      	blx	r7
 801be50:	3001      	adds	r0, #1
 801be52:	d12a      	bne.n	801beaa <_printf_float+0x21a>
 801be54:	e76a      	b.n	801bd2c <_printf_float+0x9c>
 801be56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801be5a:	f240 80e2 	bls.w	801c022 <_printf_float+0x392>
 801be5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801be62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be6a:	d133      	bne.n	801bed4 <_printf_float+0x244>
 801be6c:	4a38      	ldr	r2, [pc, #224]	; (801bf50 <_printf_float+0x2c0>)
 801be6e:	2301      	movs	r3, #1
 801be70:	4631      	mov	r1, r6
 801be72:	4628      	mov	r0, r5
 801be74:	47b8      	blx	r7
 801be76:	3001      	adds	r0, #1
 801be78:	f43f af58 	beq.w	801bd2c <_printf_float+0x9c>
 801be7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801be80:	429a      	cmp	r2, r3
 801be82:	db02      	blt.n	801be8a <_printf_float+0x1fa>
 801be84:	6823      	ldr	r3, [r4, #0]
 801be86:	07d8      	lsls	r0, r3, #31
 801be88:	d50f      	bpl.n	801beaa <_printf_float+0x21a>
 801be8a:	4653      	mov	r3, sl
 801be8c:	465a      	mov	r2, fp
 801be8e:	4631      	mov	r1, r6
 801be90:	4628      	mov	r0, r5
 801be92:	47b8      	blx	r7
 801be94:	3001      	adds	r0, #1
 801be96:	f43f af49 	beq.w	801bd2c <_printf_float+0x9c>
 801be9a:	f04f 0800 	mov.w	r8, #0
 801be9e:	f104 091a 	add.w	r9, r4, #26
 801bea2:	9b08      	ldr	r3, [sp, #32]
 801bea4:	3b01      	subs	r3, #1
 801bea6:	4543      	cmp	r3, r8
 801bea8:	dc09      	bgt.n	801bebe <_printf_float+0x22e>
 801beaa:	6823      	ldr	r3, [r4, #0]
 801beac:	079b      	lsls	r3, r3, #30
 801beae:	f100 8108 	bmi.w	801c0c2 <_printf_float+0x432>
 801beb2:	68e0      	ldr	r0, [r4, #12]
 801beb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beb6:	4298      	cmp	r0, r3
 801beb8:	bfb8      	it	lt
 801beba:	4618      	movlt	r0, r3
 801bebc:	e738      	b.n	801bd30 <_printf_float+0xa0>
 801bebe:	2301      	movs	r3, #1
 801bec0:	464a      	mov	r2, r9
 801bec2:	4631      	mov	r1, r6
 801bec4:	4628      	mov	r0, r5
 801bec6:	47b8      	blx	r7
 801bec8:	3001      	adds	r0, #1
 801beca:	f43f af2f 	beq.w	801bd2c <_printf_float+0x9c>
 801bece:	f108 0801 	add.w	r8, r8, #1
 801bed2:	e7e6      	b.n	801bea2 <_printf_float+0x212>
 801bed4:	9b07      	ldr	r3, [sp, #28]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	dc3c      	bgt.n	801bf54 <_printf_float+0x2c4>
 801beda:	4a1d      	ldr	r2, [pc, #116]	; (801bf50 <_printf_float+0x2c0>)
 801bedc:	2301      	movs	r3, #1
 801bede:	4631      	mov	r1, r6
 801bee0:	4628      	mov	r0, r5
 801bee2:	47b8      	blx	r7
 801bee4:	3001      	adds	r0, #1
 801bee6:	f43f af21 	beq.w	801bd2c <_printf_float+0x9c>
 801beea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801beee:	4313      	orrs	r3, r2
 801bef0:	d102      	bne.n	801bef8 <_printf_float+0x268>
 801bef2:	6823      	ldr	r3, [r4, #0]
 801bef4:	07d9      	lsls	r1, r3, #31
 801bef6:	d5d8      	bpl.n	801beaa <_printf_float+0x21a>
 801bef8:	4653      	mov	r3, sl
 801befa:	465a      	mov	r2, fp
 801befc:	4631      	mov	r1, r6
 801befe:	4628      	mov	r0, r5
 801bf00:	47b8      	blx	r7
 801bf02:	3001      	adds	r0, #1
 801bf04:	f43f af12 	beq.w	801bd2c <_printf_float+0x9c>
 801bf08:	f04f 0900 	mov.w	r9, #0
 801bf0c:	f104 0a1a 	add.w	sl, r4, #26
 801bf10:	9b07      	ldr	r3, [sp, #28]
 801bf12:	425b      	negs	r3, r3
 801bf14:	454b      	cmp	r3, r9
 801bf16:	dc01      	bgt.n	801bf1c <_printf_float+0x28c>
 801bf18:	9b08      	ldr	r3, [sp, #32]
 801bf1a:	e795      	b.n	801be48 <_printf_float+0x1b8>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	4652      	mov	r2, sl
 801bf20:	4631      	mov	r1, r6
 801bf22:	4628      	mov	r0, r5
 801bf24:	47b8      	blx	r7
 801bf26:	3001      	adds	r0, #1
 801bf28:	f43f af00 	beq.w	801bd2c <_printf_float+0x9c>
 801bf2c:	f109 0901 	add.w	r9, r9, #1
 801bf30:	e7ee      	b.n	801bf10 <_printf_float+0x280>
 801bf32:	bf00      	nop
 801bf34:	f3af 8000 	nop.w
 801bf38:	ffffffff 	.word	0xffffffff
 801bf3c:	7fefffff 	.word	0x7fefffff
 801bf40:	08046600 	.word	0x08046600
 801bf44:	08046604 	.word	0x08046604
 801bf48:	0804660c 	.word	0x0804660c
 801bf4c:	08046608 	.word	0x08046608
 801bf50:	08046939 	.word	0x08046939
 801bf54:	9a08      	ldr	r2, [sp, #32]
 801bf56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	bfa8      	it	ge
 801bf5c:	461a      	movge	r2, r3
 801bf5e:	2a00      	cmp	r2, #0
 801bf60:	4691      	mov	r9, r2
 801bf62:	dc38      	bgt.n	801bfd6 <_printf_float+0x346>
 801bf64:	2300      	movs	r3, #0
 801bf66:	9305      	str	r3, [sp, #20]
 801bf68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bf6c:	f104 021a 	add.w	r2, r4, #26
 801bf70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bf72:	9905      	ldr	r1, [sp, #20]
 801bf74:	9304      	str	r3, [sp, #16]
 801bf76:	eba3 0309 	sub.w	r3, r3, r9
 801bf7a:	428b      	cmp	r3, r1
 801bf7c:	dc33      	bgt.n	801bfe6 <_printf_float+0x356>
 801bf7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bf82:	429a      	cmp	r2, r3
 801bf84:	db3c      	blt.n	801c000 <_printf_float+0x370>
 801bf86:	6823      	ldr	r3, [r4, #0]
 801bf88:	07da      	lsls	r2, r3, #31
 801bf8a:	d439      	bmi.n	801c000 <_printf_float+0x370>
 801bf8c:	9a08      	ldr	r2, [sp, #32]
 801bf8e:	9b04      	ldr	r3, [sp, #16]
 801bf90:	9907      	ldr	r1, [sp, #28]
 801bf92:	1ad3      	subs	r3, r2, r3
 801bf94:	eba2 0901 	sub.w	r9, r2, r1
 801bf98:	4599      	cmp	r9, r3
 801bf9a:	bfa8      	it	ge
 801bf9c:	4699      	movge	r9, r3
 801bf9e:	f1b9 0f00 	cmp.w	r9, #0
 801bfa2:	dc35      	bgt.n	801c010 <_printf_float+0x380>
 801bfa4:	f04f 0800 	mov.w	r8, #0
 801bfa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bfac:	f104 0a1a 	add.w	sl, r4, #26
 801bfb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bfb4:	1a9b      	subs	r3, r3, r2
 801bfb6:	eba3 0309 	sub.w	r3, r3, r9
 801bfba:	4543      	cmp	r3, r8
 801bfbc:	f77f af75 	ble.w	801beaa <_printf_float+0x21a>
 801bfc0:	2301      	movs	r3, #1
 801bfc2:	4652      	mov	r2, sl
 801bfc4:	4631      	mov	r1, r6
 801bfc6:	4628      	mov	r0, r5
 801bfc8:	47b8      	blx	r7
 801bfca:	3001      	adds	r0, #1
 801bfcc:	f43f aeae 	beq.w	801bd2c <_printf_float+0x9c>
 801bfd0:	f108 0801 	add.w	r8, r8, #1
 801bfd4:	e7ec      	b.n	801bfb0 <_printf_float+0x320>
 801bfd6:	4613      	mov	r3, r2
 801bfd8:	4631      	mov	r1, r6
 801bfda:	4642      	mov	r2, r8
 801bfdc:	4628      	mov	r0, r5
 801bfde:	47b8      	blx	r7
 801bfe0:	3001      	adds	r0, #1
 801bfe2:	d1bf      	bne.n	801bf64 <_printf_float+0x2d4>
 801bfe4:	e6a2      	b.n	801bd2c <_printf_float+0x9c>
 801bfe6:	2301      	movs	r3, #1
 801bfe8:	4631      	mov	r1, r6
 801bfea:	4628      	mov	r0, r5
 801bfec:	9204      	str	r2, [sp, #16]
 801bfee:	47b8      	blx	r7
 801bff0:	3001      	adds	r0, #1
 801bff2:	f43f ae9b 	beq.w	801bd2c <_printf_float+0x9c>
 801bff6:	9b05      	ldr	r3, [sp, #20]
 801bff8:	9a04      	ldr	r2, [sp, #16]
 801bffa:	3301      	adds	r3, #1
 801bffc:	9305      	str	r3, [sp, #20]
 801bffe:	e7b7      	b.n	801bf70 <_printf_float+0x2e0>
 801c000:	4653      	mov	r3, sl
 801c002:	465a      	mov	r2, fp
 801c004:	4631      	mov	r1, r6
 801c006:	4628      	mov	r0, r5
 801c008:	47b8      	blx	r7
 801c00a:	3001      	adds	r0, #1
 801c00c:	d1be      	bne.n	801bf8c <_printf_float+0x2fc>
 801c00e:	e68d      	b.n	801bd2c <_printf_float+0x9c>
 801c010:	9a04      	ldr	r2, [sp, #16]
 801c012:	464b      	mov	r3, r9
 801c014:	4442      	add	r2, r8
 801c016:	4631      	mov	r1, r6
 801c018:	4628      	mov	r0, r5
 801c01a:	47b8      	blx	r7
 801c01c:	3001      	adds	r0, #1
 801c01e:	d1c1      	bne.n	801bfa4 <_printf_float+0x314>
 801c020:	e684      	b.n	801bd2c <_printf_float+0x9c>
 801c022:	9a08      	ldr	r2, [sp, #32]
 801c024:	2a01      	cmp	r2, #1
 801c026:	dc01      	bgt.n	801c02c <_printf_float+0x39c>
 801c028:	07db      	lsls	r3, r3, #31
 801c02a:	d537      	bpl.n	801c09c <_printf_float+0x40c>
 801c02c:	2301      	movs	r3, #1
 801c02e:	4642      	mov	r2, r8
 801c030:	4631      	mov	r1, r6
 801c032:	4628      	mov	r0, r5
 801c034:	47b8      	blx	r7
 801c036:	3001      	adds	r0, #1
 801c038:	f43f ae78 	beq.w	801bd2c <_printf_float+0x9c>
 801c03c:	4653      	mov	r3, sl
 801c03e:	465a      	mov	r2, fp
 801c040:	4631      	mov	r1, r6
 801c042:	4628      	mov	r0, r5
 801c044:	47b8      	blx	r7
 801c046:	3001      	adds	r0, #1
 801c048:	f43f ae70 	beq.w	801bd2c <_printf_float+0x9c>
 801c04c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801c050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c058:	d01b      	beq.n	801c092 <_printf_float+0x402>
 801c05a:	9b08      	ldr	r3, [sp, #32]
 801c05c:	f108 0201 	add.w	r2, r8, #1
 801c060:	3b01      	subs	r3, #1
 801c062:	4631      	mov	r1, r6
 801c064:	4628      	mov	r0, r5
 801c066:	47b8      	blx	r7
 801c068:	3001      	adds	r0, #1
 801c06a:	d10e      	bne.n	801c08a <_printf_float+0x3fa>
 801c06c:	e65e      	b.n	801bd2c <_printf_float+0x9c>
 801c06e:	2301      	movs	r3, #1
 801c070:	464a      	mov	r2, r9
 801c072:	4631      	mov	r1, r6
 801c074:	4628      	mov	r0, r5
 801c076:	47b8      	blx	r7
 801c078:	3001      	adds	r0, #1
 801c07a:	f43f ae57 	beq.w	801bd2c <_printf_float+0x9c>
 801c07e:	f108 0801 	add.w	r8, r8, #1
 801c082:	9b08      	ldr	r3, [sp, #32]
 801c084:	3b01      	subs	r3, #1
 801c086:	4543      	cmp	r3, r8
 801c088:	dcf1      	bgt.n	801c06e <_printf_float+0x3de>
 801c08a:	9b04      	ldr	r3, [sp, #16]
 801c08c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c090:	e6db      	b.n	801be4a <_printf_float+0x1ba>
 801c092:	f04f 0800 	mov.w	r8, #0
 801c096:	f104 091a 	add.w	r9, r4, #26
 801c09a:	e7f2      	b.n	801c082 <_printf_float+0x3f2>
 801c09c:	2301      	movs	r3, #1
 801c09e:	4642      	mov	r2, r8
 801c0a0:	e7df      	b.n	801c062 <_printf_float+0x3d2>
 801c0a2:	2301      	movs	r3, #1
 801c0a4:	464a      	mov	r2, r9
 801c0a6:	4631      	mov	r1, r6
 801c0a8:	4628      	mov	r0, r5
 801c0aa:	47b8      	blx	r7
 801c0ac:	3001      	adds	r0, #1
 801c0ae:	f43f ae3d 	beq.w	801bd2c <_printf_float+0x9c>
 801c0b2:	f108 0801 	add.w	r8, r8, #1
 801c0b6:	68e3      	ldr	r3, [r4, #12]
 801c0b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c0ba:	1a5b      	subs	r3, r3, r1
 801c0bc:	4543      	cmp	r3, r8
 801c0be:	dcf0      	bgt.n	801c0a2 <_printf_float+0x412>
 801c0c0:	e6f7      	b.n	801beb2 <_printf_float+0x222>
 801c0c2:	f04f 0800 	mov.w	r8, #0
 801c0c6:	f104 0919 	add.w	r9, r4, #25
 801c0ca:	e7f4      	b.n	801c0b6 <_printf_float+0x426>

0801c0cc <_printf_common>:
 801c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0d0:	4616      	mov	r6, r2
 801c0d2:	4699      	mov	r9, r3
 801c0d4:	688a      	ldr	r2, [r1, #8]
 801c0d6:	690b      	ldr	r3, [r1, #16]
 801c0d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c0dc:	4293      	cmp	r3, r2
 801c0de:	bfb8      	it	lt
 801c0e0:	4613      	movlt	r3, r2
 801c0e2:	6033      	str	r3, [r6, #0]
 801c0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c0e8:	4607      	mov	r7, r0
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	b10a      	cbz	r2, 801c0f2 <_printf_common+0x26>
 801c0ee:	3301      	adds	r3, #1
 801c0f0:	6033      	str	r3, [r6, #0]
 801c0f2:	6823      	ldr	r3, [r4, #0]
 801c0f4:	0699      	lsls	r1, r3, #26
 801c0f6:	bf42      	ittt	mi
 801c0f8:	6833      	ldrmi	r3, [r6, #0]
 801c0fa:	3302      	addmi	r3, #2
 801c0fc:	6033      	strmi	r3, [r6, #0]
 801c0fe:	6825      	ldr	r5, [r4, #0]
 801c100:	f015 0506 	ands.w	r5, r5, #6
 801c104:	d106      	bne.n	801c114 <_printf_common+0x48>
 801c106:	f104 0a19 	add.w	sl, r4, #25
 801c10a:	68e3      	ldr	r3, [r4, #12]
 801c10c:	6832      	ldr	r2, [r6, #0]
 801c10e:	1a9b      	subs	r3, r3, r2
 801c110:	42ab      	cmp	r3, r5
 801c112:	dc26      	bgt.n	801c162 <_printf_common+0x96>
 801c114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c118:	1e13      	subs	r3, r2, #0
 801c11a:	6822      	ldr	r2, [r4, #0]
 801c11c:	bf18      	it	ne
 801c11e:	2301      	movne	r3, #1
 801c120:	0692      	lsls	r2, r2, #26
 801c122:	d42b      	bmi.n	801c17c <_printf_common+0xb0>
 801c124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c128:	4649      	mov	r1, r9
 801c12a:	4638      	mov	r0, r7
 801c12c:	47c0      	blx	r8
 801c12e:	3001      	adds	r0, #1
 801c130:	d01e      	beq.n	801c170 <_printf_common+0xa4>
 801c132:	6823      	ldr	r3, [r4, #0]
 801c134:	68e5      	ldr	r5, [r4, #12]
 801c136:	6832      	ldr	r2, [r6, #0]
 801c138:	f003 0306 	and.w	r3, r3, #6
 801c13c:	2b04      	cmp	r3, #4
 801c13e:	bf08      	it	eq
 801c140:	1aad      	subeq	r5, r5, r2
 801c142:	68a3      	ldr	r3, [r4, #8]
 801c144:	6922      	ldr	r2, [r4, #16]
 801c146:	bf0c      	ite	eq
 801c148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c14c:	2500      	movne	r5, #0
 801c14e:	4293      	cmp	r3, r2
 801c150:	bfc4      	itt	gt
 801c152:	1a9b      	subgt	r3, r3, r2
 801c154:	18ed      	addgt	r5, r5, r3
 801c156:	2600      	movs	r6, #0
 801c158:	341a      	adds	r4, #26
 801c15a:	42b5      	cmp	r5, r6
 801c15c:	d11a      	bne.n	801c194 <_printf_common+0xc8>
 801c15e:	2000      	movs	r0, #0
 801c160:	e008      	b.n	801c174 <_printf_common+0xa8>
 801c162:	2301      	movs	r3, #1
 801c164:	4652      	mov	r2, sl
 801c166:	4649      	mov	r1, r9
 801c168:	4638      	mov	r0, r7
 801c16a:	47c0      	blx	r8
 801c16c:	3001      	adds	r0, #1
 801c16e:	d103      	bne.n	801c178 <_printf_common+0xac>
 801c170:	f04f 30ff 	mov.w	r0, #4294967295
 801c174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c178:	3501      	adds	r5, #1
 801c17a:	e7c6      	b.n	801c10a <_printf_common+0x3e>
 801c17c:	18e1      	adds	r1, r4, r3
 801c17e:	1c5a      	adds	r2, r3, #1
 801c180:	2030      	movs	r0, #48	; 0x30
 801c182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c186:	4422      	add	r2, r4
 801c188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c18c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c190:	3302      	adds	r3, #2
 801c192:	e7c7      	b.n	801c124 <_printf_common+0x58>
 801c194:	2301      	movs	r3, #1
 801c196:	4622      	mov	r2, r4
 801c198:	4649      	mov	r1, r9
 801c19a:	4638      	mov	r0, r7
 801c19c:	47c0      	blx	r8
 801c19e:	3001      	adds	r0, #1
 801c1a0:	d0e6      	beq.n	801c170 <_printf_common+0xa4>
 801c1a2:	3601      	adds	r6, #1
 801c1a4:	e7d9      	b.n	801c15a <_printf_common+0x8e>
	...

0801c1a8 <_printf_i>:
 801c1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1ac:	460c      	mov	r4, r1
 801c1ae:	4691      	mov	r9, r2
 801c1b0:	7e27      	ldrb	r7, [r4, #24]
 801c1b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c1b4:	2f78      	cmp	r7, #120	; 0x78
 801c1b6:	4680      	mov	r8, r0
 801c1b8:	469a      	mov	sl, r3
 801c1ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c1be:	d807      	bhi.n	801c1d0 <_printf_i+0x28>
 801c1c0:	2f62      	cmp	r7, #98	; 0x62
 801c1c2:	d80a      	bhi.n	801c1da <_printf_i+0x32>
 801c1c4:	2f00      	cmp	r7, #0
 801c1c6:	f000 80d8 	beq.w	801c37a <_printf_i+0x1d2>
 801c1ca:	2f58      	cmp	r7, #88	; 0x58
 801c1cc:	f000 80a3 	beq.w	801c316 <_printf_i+0x16e>
 801c1d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c1d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c1d8:	e03a      	b.n	801c250 <_printf_i+0xa8>
 801c1da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c1de:	2b15      	cmp	r3, #21
 801c1e0:	d8f6      	bhi.n	801c1d0 <_printf_i+0x28>
 801c1e2:	a001      	add	r0, pc, #4	; (adr r0, 801c1e8 <_printf_i+0x40>)
 801c1e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c1e8:	0801c241 	.word	0x0801c241
 801c1ec:	0801c255 	.word	0x0801c255
 801c1f0:	0801c1d1 	.word	0x0801c1d1
 801c1f4:	0801c1d1 	.word	0x0801c1d1
 801c1f8:	0801c1d1 	.word	0x0801c1d1
 801c1fc:	0801c1d1 	.word	0x0801c1d1
 801c200:	0801c255 	.word	0x0801c255
 801c204:	0801c1d1 	.word	0x0801c1d1
 801c208:	0801c1d1 	.word	0x0801c1d1
 801c20c:	0801c1d1 	.word	0x0801c1d1
 801c210:	0801c1d1 	.word	0x0801c1d1
 801c214:	0801c361 	.word	0x0801c361
 801c218:	0801c285 	.word	0x0801c285
 801c21c:	0801c343 	.word	0x0801c343
 801c220:	0801c1d1 	.word	0x0801c1d1
 801c224:	0801c1d1 	.word	0x0801c1d1
 801c228:	0801c383 	.word	0x0801c383
 801c22c:	0801c1d1 	.word	0x0801c1d1
 801c230:	0801c285 	.word	0x0801c285
 801c234:	0801c1d1 	.word	0x0801c1d1
 801c238:	0801c1d1 	.word	0x0801c1d1
 801c23c:	0801c34b 	.word	0x0801c34b
 801c240:	680b      	ldr	r3, [r1, #0]
 801c242:	1d1a      	adds	r2, r3, #4
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	600a      	str	r2, [r1, #0]
 801c248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c24c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c250:	2301      	movs	r3, #1
 801c252:	e0a3      	b.n	801c39c <_printf_i+0x1f4>
 801c254:	6825      	ldr	r5, [r4, #0]
 801c256:	6808      	ldr	r0, [r1, #0]
 801c258:	062e      	lsls	r6, r5, #24
 801c25a:	f100 0304 	add.w	r3, r0, #4
 801c25e:	d50a      	bpl.n	801c276 <_printf_i+0xce>
 801c260:	6805      	ldr	r5, [r0, #0]
 801c262:	600b      	str	r3, [r1, #0]
 801c264:	2d00      	cmp	r5, #0
 801c266:	da03      	bge.n	801c270 <_printf_i+0xc8>
 801c268:	232d      	movs	r3, #45	; 0x2d
 801c26a:	426d      	negs	r5, r5
 801c26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c270:	485e      	ldr	r0, [pc, #376]	; (801c3ec <_printf_i+0x244>)
 801c272:	230a      	movs	r3, #10
 801c274:	e019      	b.n	801c2aa <_printf_i+0x102>
 801c276:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c27a:	6805      	ldr	r5, [r0, #0]
 801c27c:	600b      	str	r3, [r1, #0]
 801c27e:	bf18      	it	ne
 801c280:	b22d      	sxthne	r5, r5
 801c282:	e7ef      	b.n	801c264 <_printf_i+0xbc>
 801c284:	680b      	ldr	r3, [r1, #0]
 801c286:	6825      	ldr	r5, [r4, #0]
 801c288:	1d18      	adds	r0, r3, #4
 801c28a:	6008      	str	r0, [r1, #0]
 801c28c:	0628      	lsls	r0, r5, #24
 801c28e:	d501      	bpl.n	801c294 <_printf_i+0xec>
 801c290:	681d      	ldr	r5, [r3, #0]
 801c292:	e002      	b.n	801c29a <_printf_i+0xf2>
 801c294:	0669      	lsls	r1, r5, #25
 801c296:	d5fb      	bpl.n	801c290 <_printf_i+0xe8>
 801c298:	881d      	ldrh	r5, [r3, #0]
 801c29a:	4854      	ldr	r0, [pc, #336]	; (801c3ec <_printf_i+0x244>)
 801c29c:	2f6f      	cmp	r7, #111	; 0x6f
 801c29e:	bf0c      	ite	eq
 801c2a0:	2308      	moveq	r3, #8
 801c2a2:	230a      	movne	r3, #10
 801c2a4:	2100      	movs	r1, #0
 801c2a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c2aa:	6866      	ldr	r6, [r4, #4]
 801c2ac:	60a6      	str	r6, [r4, #8]
 801c2ae:	2e00      	cmp	r6, #0
 801c2b0:	bfa2      	ittt	ge
 801c2b2:	6821      	ldrge	r1, [r4, #0]
 801c2b4:	f021 0104 	bicge.w	r1, r1, #4
 801c2b8:	6021      	strge	r1, [r4, #0]
 801c2ba:	b90d      	cbnz	r5, 801c2c0 <_printf_i+0x118>
 801c2bc:	2e00      	cmp	r6, #0
 801c2be:	d04d      	beq.n	801c35c <_printf_i+0x1b4>
 801c2c0:	4616      	mov	r6, r2
 801c2c2:	fbb5 f1f3 	udiv	r1, r5, r3
 801c2c6:	fb03 5711 	mls	r7, r3, r1, r5
 801c2ca:	5dc7      	ldrb	r7, [r0, r7]
 801c2cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c2d0:	462f      	mov	r7, r5
 801c2d2:	42bb      	cmp	r3, r7
 801c2d4:	460d      	mov	r5, r1
 801c2d6:	d9f4      	bls.n	801c2c2 <_printf_i+0x11a>
 801c2d8:	2b08      	cmp	r3, #8
 801c2da:	d10b      	bne.n	801c2f4 <_printf_i+0x14c>
 801c2dc:	6823      	ldr	r3, [r4, #0]
 801c2de:	07df      	lsls	r7, r3, #31
 801c2e0:	d508      	bpl.n	801c2f4 <_printf_i+0x14c>
 801c2e2:	6923      	ldr	r3, [r4, #16]
 801c2e4:	6861      	ldr	r1, [r4, #4]
 801c2e6:	4299      	cmp	r1, r3
 801c2e8:	bfde      	ittt	le
 801c2ea:	2330      	movle	r3, #48	; 0x30
 801c2ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c2f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c2f4:	1b92      	subs	r2, r2, r6
 801c2f6:	6122      	str	r2, [r4, #16]
 801c2f8:	f8cd a000 	str.w	sl, [sp]
 801c2fc:	464b      	mov	r3, r9
 801c2fe:	aa03      	add	r2, sp, #12
 801c300:	4621      	mov	r1, r4
 801c302:	4640      	mov	r0, r8
 801c304:	f7ff fee2 	bl	801c0cc <_printf_common>
 801c308:	3001      	adds	r0, #1
 801c30a:	d14c      	bne.n	801c3a6 <_printf_i+0x1fe>
 801c30c:	f04f 30ff 	mov.w	r0, #4294967295
 801c310:	b004      	add	sp, #16
 801c312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c316:	4835      	ldr	r0, [pc, #212]	; (801c3ec <_printf_i+0x244>)
 801c318:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c31c:	6823      	ldr	r3, [r4, #0]
 801c31e:	680e      	ldr	r6, [r1, #0]
 801c320:	061f      	lsls	r7, r3, #24
 801c322:	f856 5b04 	ldr.w	r5, [r6], #4
 801c326:	600e      	str	r6, [r1, #0]
 801c328:	d514      	bpl.n	801c354 <_printf_i+0x1ac>
 801c32a:	07d9      	lsls	r1, r3, #31
 801c32c:	bf44      	itt	mi
 801c32e:	f043 0320 	orrmi.w	r3, r3, #32
 801c332:	6023      	strmi	r3, [r4, #0]
 801c334:	b91d      	cbnz	r5, 801c33e <_printf_i+0x196>
 801c336:	6823      	ldr	r3, [r4, #0]
 801c338:	f023 0320 	bic.w	r3, r3, #32
 801c33c:	6023      	str	r3, [r4, #0]
 801c33e:	2310      	movs	r3, #16
 801c340:	e7b0      	b.n	801c2a4 <_printf_i+0xfc>
 801c342:	6823      	ldr	r3, [r4, #0]
 801c344:	f043 0320 	orr.w	r3, r3, #32
 801c348:	6023      	str	r3, [r4, #0]
 801c34a:	2378      	movs	r3, #120	; 0x78
 801c34c:	4828      	ldr	r0, [pc, #160]	; (801c3f0 <_printf_i+0x248>)
 801c34e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c352:	e7e3      	b.n	801c31c <_printf_i+0x174>
 801c354:	065e      	lsls	r6, r3, #25
 801c356:	bf48      	it	mi
 801c358:	b2ad      	uxthmi	r5, r5
 801c35a:	e7e6      	b.n	801c32a <_printf_i+0x182>
 801c35c:	4616      	mov	r6, r2
 801c35e:	e7bb      	b.n	801c2d8 <_printf_i+0x130>
 801c360:	680b      	ldr	r3, [r1, #0]
 801c362:	6826      	ldr	r6, [r4, #0]
 801c364:	6960      	ldr	r0, [r4, #20]
 801c366:	1d1d      	adds	r5, r3, #4
 801c368:	600d      	str	r5, [r1, #0]
 801c36a:	0635      	lsls	r5, r6, #24
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	d501      	bpl.n	801c374 <_printf_i+0x1cc>
 801c370:	6018      	str	r0, [r3, #0]
 801c372:	e002      	b.n	801c37a <_printf_i+0x1d2>
 801c374:	0671      	lsls	r1, r6, #25
 801c376:	d5fb      	bpl.n	801c370 <_printf_i+0x1c8>
 801c378:	8018      	strh	r0, [r3, #0]
 801c37a:	2300      	movs	r3, #0
 801c37c:	6123      	str	r3, [r4, #16]
 801c37e:	4616      	mov	r6, r2
 801c380:	e7ba      	b.n	801c2f8 <_printf_i+0x150>
 801c382:	680b      	ldr	r3, [r1, #0]
 801c384:	1d1a      	adds	r2, r3, #4
 801c386:	600a      	str	r2, [r1, #0]
 801c388:	681e      	ldr	r6, [r3, #0]
 801c38a:	6862      	ldr	r2, [r4, #4]
 801c38c:	2100      	movs	r1, #0
 801c38e:	4630      	mov	r0, r6
 801c390:	f7e3 ffbe 	bl	8000310 <memchr>
 801c394:	b108      	cbz	r0, 801c39a <_printf_i+0x1f2>
 801c396:	1b80      	subs	r0, r0, r6
 801c398:	6060      	str	r0, [r4, #4]
 801c39a:	6863      	ldr	r3, [r4, #4]
 801c39c:	6123      	str	r3, [r4, #16]
 801c39e:	2300      	movs	r3, #0
 801c3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3a4:	e7a8      	b.n	801c2f8 <_printf_i+0x150>
 801c3a6:	6923      	ldr	r3, [r4, #16]
 801c3a8:	4632      	mov	r2, r6
 801c3aa:	4649      	mov	r1, r9
 801c3ac:	4640      	mov	r0, r8
 801c3ae:	47d0      	blx	sl
 801c3b0:	3001      	adds	r0, #1
 801c3b2:	d0ab      	beq.n	801c30c <_printf_i+0x164>
 801c3b4:	6823      	ldr	r3, [r4, #0]
 801c3b6:	079b      	lsls	r3, r3, #30
 801c3b8:	d413      	bmi.n	801c3e2 <_printf_i+0x23a>
 801c3ba:	68e0      	ldr	r0, [r4, #12]
 801c3bc:	9b03      	ldr	r3, [sp, #12]
 801c3be:	4298      	cmp	r0, r3
 801c3c0:	bfb8      	it	lt
 801c3c2:	4618      	movlt	r0, r3
 801c3c4:	e7a4      	b.n	801c310 <_printf_i+0x168>
 801c3c6:	2301      	movs	r3, #1
 801c3c8:	4632      	mov	r2, r6
 801c3ca:	4649      	mov	r1, r9
 801c3cc:	4640      	mov	r0, r8
 801c3ce:	47d0      	blx	sl
 801c3d0:	3001      	adds	r0, #1
 801c3d2:	d09b      	beq.n	801c30c <_printf_i+0x164>
 801c3d4:	3501      	adds	r5, #1
 801c3d6:	68e3      	ldr	r3, [r4, #12]
 801c3d8:	9903      	ldr	r1, [sp, #12]
 801c3da:	1a5b      	subs	r3, r3, r1
 801c3dc:	42ab      	cmp	r3, r5
 801c3de:	dcf2      	bgt.n	801c3c6 <_printf_i+0x21e>
 801c3e0:	e7eb      	b.n	801c3ba <_printf_i+0x212>
 801c3e2:	2500      	movs	r5, #0
 801c3e4:	f104 0619 	add.w	r6, r4, #25
 801c3e8:	e7f5      	b.n	801c3d6 <_printf_i+0x22e>
 801c3ea:	bf00      	nop
 801c3ec:	08046610 	.word	0x08046610
 801c3f0:	08046621 	.word	0x08046621

0801c3f4 <iprintf>:
 801c3f4:	b40f      	push	{r0, r1, r2, r3}
 801c3f6:	4b0a      	ldr	r3, [pc, #40]	; (801c420 <iprintf+0x2c>)
 801c3f8:	b513      	push	{r0, r1, r4, lr}
 801c3fa:	681c      	ldr	r4, [r3, #0]
 801c3fc:	b124      	cbz	r4, 801c408 <iprintf+0x14>
 801c3fe:	69a3      	ldr	r3, [r4, #24]
 801c400:	b913      	cbnz	r3, 801c408 <iprintf+0x14>
 801c402:	4620      	mov	r0, r4
 801c404:	f001 f834 	bl	801d470 <__sinit>
 801c408:	ab05      	add	r3, sp, #20
 801c40a:	9a04      	ldr	r2, [sp, #16]
 801c40c:	68a1      	ldr	r1, [r4, #8]
 801c40e:	9301      	str	r3, [sp, #4]
 801c410:	4620      	mov	r0, r4
 801c412:	f002 f88f 	bl	801e534 <_vfiprintf_r>
 801c416:	b002      	add	sp, #8
 801c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c41c:	b004      	add	sp, #16
 801c41e:	4770      	bx	lr
 801c420:	24000038 	.word	0x24000038

0801c424 <rand>:
 801c424:	4b17      	ldr	r3, [pc, #92]	; (801c484 <rand+0x60>)
 801c426:	b510      	push	{r4, lr}
 801c428:	681c      	ldr	r4, [r3, #0]
 801c42a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c42c:	b9b3      	cbnz	r3, 801c45c <rand+0x38>
 801c42e:	2018      	movs	r0, #24
 801c430:	f001 f8e8 	bl	801d604 <malloc>
 801c434:	63a0      	str	r0, [r4, #56]	; 0x38
 801c436:	b928      	cbnz	r0, 801c444 <rand+0x20>
 801c438:	4602      	mov	r2, r0
 801c43a:	4b13      	ldr	r3, [pc, #76]	; (801c488 <rand+0x64>)
 801c43c:	4813      	ldr	r0, [pc, #76]	; (801c48c <rand+0x68>)
 801c43e:	214e      	movs	r1, #78	; 0x4e
 801c440:	f000 f97a 	bl	801c738 <__assert_func>
 801c444:	4a12      	ldr	r2, [pc, #72]	; (801c490 <rand+0x6c>)
 801c446:	4b13      	ldr	r3, [pc, #76]	; (801c494 <rand+0x70>)
 801c448:	e9c0 2300 	strd	r2, r3, [r0]
 801c44c:	4b12      	ldr	r3, [pc, #72]	; (801c498 <rand+0x74>)
 801c44e:	6083      	str	r3, [r0, #8]
 801c450:	230b      	movs	r3, #11
 801c452:	8183      	strh	r3, [r0, #12]
 801c454:	2201      	movs	r2, #1
 801c456:	2300      	movs	r3, #0
 801c458:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c45c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c45e:	480f      	ldr	r0, [pc, #60]	; (801c49c <rand+0x78>)
 801c460:	690a      	ldr	r2, [r1, #16]
 801c462:	694b      	ldr	r3, [r1, #20]
 801c464:	4c0e      	ldr	r4, [pc, #56]	; (801c4a0 <rand+0x7c>)
 801c466:	4350      	muls	r0, r2
 801c468:	fb04 0003 	mla	r0, r4, r3, r0
 801c46c:	fba2 3404 	umull	r3, r4, r2, r4
 801c470:	1c5a      	adds	r2, r3, #1
 801c472:	4404      	add	r4, r0
 801c474:	f144 0000 	adc.w	r0, r4, #0
 801c478:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801c47c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c480:	bd10      	pop	{r4, pc}
 801c482:	bf00      	nop
 801c484:	24000038 	.word	0x24000038
 801c488:	08046632 	.word	0x08046632
 801c48c:	08046649 	.word	0x08046649
 801c490:	abcd330e 	.word	0xabcd330e
 801c494:	e66d1234 	.word	0xe66d1234
 801c498:	0005deec 	.word	0x0005deec
 801c49c:	5851f42d 	.word	0x5851f42d
 801c4a0:	4c957f2d 	.word	0x4c957f2d

0801c4a4 <siprintf>:
 801c4a4:	b40e      	push	{r1, r2, r3}
 801c4a6:	b500      	push	{lr}
 801c4a8:	b09c      	sub	sp, #112	; 0x70
 801c4aa:	ab1d      	add	r3, sp, #116	; 0x74
 801c4ac:	9002      	str	r0, [sp, #8]
 801c4ae:	9006      	str	r0, [sp, #24]
 801c4b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c4b4:	4809      	ldr	r0, [pc, #36]	; (801c4dc <siprintf+0x38>)
 801c4b6:	9107      	str	r1, [sp, #28]
 801c4b8:	9104      	str	r1, [sp, #16]
 801c4ba:	4909      	ldr	r1, [pc, #36]	; (801c4e0 <siprintf+0x3c>)
 801c4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4c0:	9105      	str	r1, [sp, #20]
 801c4c2:	6800      	ldr	r0, [r0, #0]
 801c4c4:	9301      	str	r3, [sp, #4]
 801c4c6:	a902      	add	r1, sp, #8
 801c4c8:	f001 fd38 	bl	801df3c <_svfiprintf_r>
 801c4cc:	9b02      	ldr	r3, [sp, #8]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	701a      	strb	r2, [r3, #0]
 801c4d2:	b01c      	add	sp, #112	; 0x70
 801c4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c4d8:	b003      	add	sp, #12
 801c4da:	4770      	bx	lr
 801c4dc:	24000038 	.word	0x24000038
 801c4e0:	ffff0208 	.word	0xffff0208

0801c4e4 <siscanf>:
 801c4e4:	b40e      	push	{r1, r2, r3}
 801c4e6:	b510      	push	{r4, lr}
 801c4e8:	b09f      	sub	sp, #124	; 0x7c
 801c4ea:	ac21      	add	r4, sp, #132	; 0x84
 801c4ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c4f0:	f854 2b04 	ldr.w	r2, [r4], #4
 801c4f4:	9201      	str	r2, [sp, #4]
 801c4f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c4fa:	9004      	str	r0, [sp, #16]
 801c4fc:	9008      	str	r0, [sp, #32]
 801c4fe:	f7e3 fef9 	bl	80002f4 <strlen>
 801c502:	4b0c      	ldr	r3, [pc, #48]	; (801c534 <siscanf+0x50>)
 801c504:	9005      	str	r0, [sp, #20]
 801c506:	9009      	str	r0, [sp, #36]	; 0x24
 801c508:	930d      	str	r3, [sp, #52]	; 0x34
 801c50a:	480b      	ldr	r0, [pc, #44]	; (801c538 <siscanf+0x54>)
 801c50c:	9a01      	ldr	r2, [sp, #4]
 801c50e:	6800      	ldr	r0, [r0, #0]
 801c510:	9403      	str	r4, [sp, #12]
 801c512:	2300      	movs	r3, #0
 801c514:	9311      	str	r3, [sp, #68]	; 0x44
 801c516:	9316      	str	r3, [sp, #88]	; 0x58
 801c518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c51c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c520:	a904      	add	r1, sp, #16
 801c522:	4623      	mov	r3, r4
 801c524:	f001 fe64 	bl	801e1f0 <__ssvfiscanf_r>
 801c528:	b01f      	add	sp, #124	; 0x7c
 801c52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c52e:	b003      	add	sp, #12
 801c530:	4770      	bx	lr
 801c532:	bf00      	nop
 801c534:	0801c55f 	.word	0x0801c55f
 801c538:	24000038 	.word	0x24000038

0801c53c <__sread>:
 801c53c:	b510      	push	{r4, lr}
 801c53e:	460c      	mov	r4, r1
 801c540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c544:	f002 fa72 	bl	801ea2c <_read_r>
 801c548:	2800      	cmp	r0, #0
 801c54a:	bfab      	itete	ge
 801c54c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c54e:	89a3      	ldrhlt	r3, [r4, #12]
 801c550:	181b      	addge	r3, r3, r0
 801c552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c556:	bfac      	ite	ge
 801c558:	6563      	strge	r3, [r4, #84]	; 0x54
 801c55a:	81a3      	strhlt	r3, [r4, #12]
 801c55c:	bd10      	pop	{r4, pc}

0801c55e <__seofread>:
 801c55e:	2000      	movs	r0, #0
 801c560:	4770      	bx	lr

0801c562 <__swrite>:
 801c562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c566:	461f      	mov	r7, r3
 801c568:	898b      	ldrh	r3, [r1, #12]
 801c56a:	05db      	lsls	r3, r3, #23
 801c56c:	4605      	mov	r5, r0
 801c56e:	460c      	mov	r4, r1
 801c570:	4616      	mov	r6, r2
 801c572:	d505      	bpl.n	801c580 <__swrite+0x1e>
 801c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c578:	2302      	movs	r3, #2
 801c57a:	2200      	movs	r2, #0
 801c57c:	f001 f830 	bl	801d5e0 <_lseek_r>
 801c580:	89a3      	ldrh	r3, [r4, #12]
 801c582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c58a:	81a3      	strh	r3, [r4, #12]
 801c58c:	4632      	mov	r2, r6
 801c58e:	463b      	mov	r3, r7
 801c590:	4628      	mov	r0, r5
 801c592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c596:	f000 b8bd 	b.w	801c714 <_write_r>

0801c59a <__sseek>:
 801c59a:	b510      	push	{r4, lr}
 801c59c:	460c      	mov	r4, r1
 801c59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5a2:	f001 f81d 	bl	801d5e0 <_lseek_r>
 801c5a6:	1c43      	adds	r3, r0, #1
 801c5a8:	89a3      	ldrh	r3, [r4, #12]
 801c5aa:	bf15      	itete	ne
 801c5ac:	6560      	strne	r0, [r4, #84]	; 0x54
 801c5ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c5b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c5b6:	81a3      	strheq	r3, [r4, #12]
 801c5b8:	bf18      	it	ne
 801c5ba:	81a3      	strhne	r3, [r4, #12]
 801c5bc:	bd10      	pop	{r4, pc}

0801c5be <__sclose>:
 801c5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5c2:	f000 b8d7 	b.w	801c774 <_close_r>

0801c5c6 <strcat>:
 801c5c6:	b510      	push	{r4, lr}
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	7814      	ldrb	r4, [r2, #0]
 801c5cc:	4613      	mov	r3, r2
 801c5ce:	3201      	adds	r2, #1
 801c5d0:	2c00      	cmp	r4, #0
 801c5d2:	d1fa      	bne.n	801c5ca <strcat+0x4>
 801c5d4:	3b01      	subs	r3, #1
 801c5d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c5da:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c5de:	2a00      	cmp	r2, #0
 801c5e0:	d1f9      	bne.n	801c5d6 <strcat+0x10>
 801c5e2:	bd10      	pop	{r4, pc}

0801c5e4 <strncmp>:
 801c5e4:	b510      	push	{r4, lr}
 801c5e6:	b16a      	cbz	r2, 801c604 <strncmp+0x20>
 801c5e8:	3901      	subs	r1, #1
 801c5ea:	1884      	adds	r4, r0, r2
 801c5ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c5f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c5f4:	4293      	cmp	r3, r2
 801c5f6:	d103      	bne.n	801c600 <strncmp+0x1c>
 801c5f8:	42a0      	cmp	r0, r4
 801c5fa:	d001      	beq.n	801c600 <strncmp+0x1c>
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d1f5      	bne.n	801c5ec <strncmp+0x8>
 801c600:	1a98      	subs	r0, r3, r2
 801c602:	bd10      	pop	{r4, pc}
 801c604:	4610      	mov	r0, r2
 801c606:	e7fc      	b.n	801c602 <strncmp+0x1e>

0801c608 <_strtol_l.isra.0>:
 801c608:	2b01      	cmp	r3, #1
 801c60a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c60e:	d001      	beq.n	801c614 <_strtol_l.isra.0+0xc>
 801c610:	2b24      	cmp	r3, #36	; 0x24
 801c612:	d906      	bls.n	801c622 <_strtol_l.isra.0+0x1a>
 801c614:	f000 fece 	bl	801d3b4 <__errno>
 801c618:	2316      	movs	r3, #22
 801c61a:	6003      	str	r3, [r0, #0]
 801c61c:	2000      	movs	r0, #0
 801c61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c622:	4f3a      	ldr	r7, [pc, #232]	; (801c70c <_strtol_l.isra.0+0x104>)
 801c624:	468e      	mov	lr, r1
 801c626:	4676      	mov	r6, lr
 801c628:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c62c:	5de5      	ldrb	r5, [r4, r7]
 801c62e:	f015 0508 	ands.w	r5, r5, #8
 801c632:	d1f8      	bne.n	801c626 <_strtol_l.isra.0+0x1e>
 801c634:	2c2d      	cmp	r4, #45	; 0x2d
 801c636:	d134      	bne.n	801c6a2 <_strtol_l.isra.0+0x9a>
 801c638:	f89e 4000 	ldrb.w	r4, [lr]
 801c63c:	f04f 0801 	mov.w	r8, #1
 801c640:	f106 0e02 	add.w	lr, r6, #2
 801c644:	2b00      	cmp	r3, #0
 801c646:	d05c      	beq.n	801c702 <_strtol_l.isra.0+0xfa>
 801c648:	2b10      	cmp	r3, #16
 801c64a:	d10c      	bne.n	801c666 <_strtol_l.isra.0+0x5e>
 801c64c:	2c30      	cmp	r4, #48	; 0x30
 801c64e:	d10a      	bne.n	801c666 <_strtol_l.isra.0+0x5e>
 801c650:	f89e 4000 	ldrb.w	r4, [lr]
 801c654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c658:	2c58      	cmp	r4, #88	; 0x58
 801c65a:	d14d      	bne.n	801c6f8 <_strtol_l.isra.0+0xf0>
 801c65c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c660:	2310      	movs	r3, #16
 801c662:	f10e 0e02 	add.w	lr, lr, #2
 801c666:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c66a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c66e:	2600      	movs	r6, #0
 801c670:	fbbc f9f3 	udiv	r9, ip, r3
 801c674:	4635      	mov	r5, r6
 801c676:	fb03 ca19 	mls	sl, r3, r9, ip
 801c67a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c67e:	2f09      	cmp	r7, #9
 801c680:	d818      	bhi.n	801c6b4 <_strtol_l.isra.0+0xac>
 801c682:	463c      	mov	r4, r7
 801c684:	42a3      	cmp	r3, r4
 801c686:	dd24      	ble.n	801c6d2 <_strtol_l.isra.0+0xca>
 801c688:	2e00      	cmp	r6, #0
 801c68a:	db1f      	blt.n	801c6cc <_strtol_l.isra.0+0xc4>
 801c68c:	45a9      	cmp	r9, r5
 801c68e:	d31d      	bcc.n	801c6cc <_strtol_l.isra.0+0xc4>
 801c690:	d101      	bne.n	801c696 <_strtol_l.isra.0+0x8e>
 801c692:	45a2      	cmp	sl, r4
 801c694:	db1a      	blt.n	801c6cc <_strtol_l.isra.0+0xc4>
 801c696:	fb05 4503 	mla	r5, r5, r3, r4
 801c69a:	2601      	movs	r6, #1
 801c69c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c6a0:	e7eb      	b.n	801c67a <_strtol_l.isra.0+0x72>
 801c6a2:	2c2b      	cmp	r4, #43	; 0x2b
 801c6a4:	bf08      	it	eq
 801c6a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c6aa:	46a8      	mov	r8, r5
 801c6ac:	bf08      	it	eq
 801c6ae:	f106 0e02 	addeq.w	lr, r6, #2
 801c6b2:	e7c7      	b.n	801c644 <_strtol_l.isra.0+0x3c>
 801c6b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c6b8:	2f19      	cmp	r7, #25
 801c6ba:	d801      	bhi.n	801c6c0 <_strtol_l.isra.0+0xb8>
 801c6bc:	3c37      	subs	r4, #55	; 0x37
 801c6be:	e7e1      	b.n	801c684 <_strtol_l.isra.0+0x7c>
 801c6c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c6c4:	2f19      	cmp	r7, #25
 801c6c6:	d804      	bhi.n	801c6d2 <_strtol_l.isra.0+0xca>
 801c6c8:	3c57      	subs	r4, #87	; 0x57
 801c6ca:	e7db      	b.n	801c684 <_strtol_l.isra.0+0x7c>
 801c6cc:	f04f 36ff 	mov.w	r6, #4294967295
 801c6d0:	e7e4      	b.n	801c69c <_strtol_l.isra.0+0x94>
 801c6d2:	2e00      	cmp	r6, #0
 801c6d4:	da05      	bge.n	801c6e2 <_strtol_l.isra.0+0xda>
 801c6d6:	2322      	movs	r3, #34	; 0x22
 801c6d8:	6003      	str	r3, [r0, #0]
 801c6da:	4665      	mov	r5, ip
 801c6dc:	b942      	cbnz	r2, 801c6f0 <_strtol_l.isra.0+0xe8>
 801c6de:	4628      	mov	r0, r5
 801c6e0:	e79d      	b.n	801c61e <_strtol_l.isra.0+0x16>
 801c6e2:	f1b8 0f00 	cmp.w	r8, #0
 801c6e6:	d000      	beq.n	801c6ea <_strtol_l.isra.0+0xe2>
 801c6e8:	426d      	negs	r5, r5
 801c6ea:	2a00      	cmp	r2, #0
 801c6ec:	d0f7      	beq.n	801c6de <_strtol_l.isra.0+0xd6>
 801c6ee:	b10e      	cbz	r6, 801c6f4 <_strtol_l.isra.0+0xec>
 801c6f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c6f4:	6011      	str	r1, [r2, #0]
 801c6f6:	e7f2      	b.n	801c6de <_strtol_l.isra.0+0xd6>
 801c6f8:	2430      	movs	r4, #48	; 0x30
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d1b3      	bne.n	801c666 <_strtol_l.isra.0+0x5e>
 801c6fe:	2308      	movs	r3, #8
 801c700:	e7b1      	b.n	801c666 <_strtol_l.isra.0+0x5e>
 801c702:	2c30      	cmp	r4, #48	; 0x30
 801c704:	d0a4      	beq.n	801c650 <_strtol_l.isra.0+0x48>
 801c706:	230a      	movs	r3, #10
 801c708:	e7ad      	b.n	801c666 <_strtol_l.isra.0+0x5e>
 801c70a:	bf00      	nop
 801c70c:	080464f9 	.word	0x080464f9

0801c710 <_strtol_r>:
 801c710:	f7ff bf7a 	b.w	801c608 <_strtol_l.isra.0>

0801c714 <_write_r>:
 801c714:	b538      	push	{r3, r4, r5, lr}
 801c716:	4d07      	ldr	r5, [pc, #28]	; (801c734 <_write_r+0x20>)
 801c718:	4604      	mov	r4, r0
 801c71a:	4608      	mov	r0, r1
 801c71c:	4611      	mov	r1, r2
 801c71e:	2200      	movs	r2, #0
 801c720:	602a      	str	r2, [r5, #0]
 801c722:	461a      	mov	r2, r3
 801c724:	f7e5 fb8f 	bl	8001e46 <_write>
 801c728:	1c43      	adds	r3, r0, #1
 801c72a:	d102      	bne.n	801c732 <_write_r+0x1e>
 801c72c:	682b      	ldr	r3, [r5, #0]
 801c72e:	b103      	cbz	r3, 801c732 <_write_r+0x1e>
 801c730:	6023      	str	r3, [r4, #0]
 801c732:	bd38      	pop	{r3, r4, r5, pc}
 801c734:	240079cc 	.word	0x240079cc

0801c738 <__assert_func>:
 801c738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c73a:	4614      	mov	r4, r2
 801c73c:	461a      	mov	r2, r3
 801c73e:	4b09      	ldr	r3, [pc, #36]	; (801c764 <__assert_func+0x2c>)
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	4605      	mov	r5, r0
 801c744:	68d8      	ldr	r0, [r3, #12]
 801c746:	b14c      	cbz	r4, 801c75c <__assert_func+0x24>
 801c748:	4b07      	ldr	r3, [pc, #28]	; (801c768 <__assert_func+0x30>)
 801c74a:	9100      	str	r1, [sp, #0]
 801c74c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c750:	4906      	ldr	r1, [pc, #24]	; (801c76c <__assert_func+0x34>)
 801c752:	462b      	mov	r3, r5
 801c754:	f000 ff0a 	bl	801d56c <fiprintf>
 801c758:	f002 fb3c 	bl	801edd4 <abort>
 801c75c:	4b04      	ldr	r3, [pc, #16]	; (801c770 <__assert_func+0x38>)
 801c75e:	461c      	mov	r4, r3
 801c760:	e7f3      	b.n	801c74a <__assert_func+0x12>
 801c762:	bf00      	nop
 801c764:	24000038 	.word	0x24000038
 801c768:	080466a8 	.word	0x080466a8
 801c76c:	080466b5 	.word	0x080466b5
 801c770:	080466e3 	.word	0x080466e3

0801c774 <_close_r>:
 801c774:	b538      	push	{r3, r4, r5, lr}
 801c776:	4d06      	ldr	r5, [pc, #24]	; (801c790 <_close_r+0x1c>)
 801c778:	2300      	movs	r3, #0
 801c77a:	4604      	mov	r4, r0
 801c77c:	4608      	mov	r0, r1
 801c77e:	602b      	str	r3, [r5, #0]
 801c780:	f7e5 fb7d 	bl	8001e7e <_close>
 801c784:	1c43      	adds	r3, r0, #1
 801c786:	d102      	bne.n	801c78e <_close_r+0x1a>
 801c788:	682b      	ldr	r3, [r5, #0]
 801c78a:	b103      	cbz	r3, 801c78e <_close_r+0x1a>
 801c78c:	6023      	str	r3, [r4, #0]
 801c78e:	bd38      	pop	{r3, r4, r5, pc}
 801c790:	240079cc 	.word	0x240079cc

0801c794 <quorem>:
 801c794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c798:	6903      	ldr	r3, [r0, #16]
 801c79a:	690c      	ldr	r4, [r1, #16]
 801c79c:	42a3      	cmp	r3, r4
 801c79e:	4607      	mov	r7, r0
 801c7a0:	f2c0 8081 	blt.w	801c8a6 <quorem+0x112>
 801c7a4:	3c01      	subs	r4, #1
 801c7a6:	f101 0814 	add.w	r8, r1, #20
 801c7aa:	f100 0514 	add.w	r5, r0, #20
 801c7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c7b2:	9301      	str	r3, [sp, #4]
 801c7b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c7b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c7bc:	3301      	adds	r3, #1
 801c7be:	429a      	cmp	r2, r3
 801c7c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c7c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c7c8:	fbb2 f6f3 	udiv	r6, r2, r3
 801c7cc:	d331      	bcc.n	801c832 <quorem+0x9e>
 801c7ce:	f04f 0e00 	mov.w	lr, #0
 801c7d2:	4640      	mov	r0, r8
 801c7d4:	46ac      	mov	ip, r5
 801c7d6:	46f2      	mov	sl, lr
 801c7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 801c7dc:	b293      	uxth	r3, r2
 801c7de:	fb06 e303 	mla	r3, r6, r3, lr
 801c7e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c7e6:	b29b      	uxth	r3, r3
 801c7e8:	ebaa 0303 	sub.w	r3, sl, r3
 801c7ec:	0c12      	lsrs	r2, r2, #16
 801c7ee:	f8dc a000 	ldr.w	sl, [ip]
 801c7f2:	fb06 e202 	mla	r2, r6, r2, lr
 801c7f6:	fa13 f38a 	uxtah	r3, r3, sl
 801c7fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c7fe:	fa1f fa82 	uxth.w	sl, r2
 801c802:	f8dc 2000 	ldr.w	r2, [ip]
 801c806:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c80a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c80e:	b29b      	uxth	r3, r3
 801c810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c814:	4581      	cmp	r9, r0
 801c816:	f84c 3b04 	str.w	r3, [ip], #4
 801c81a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c81e:	d2db      	bcs.n	801c7d8 <quorem+0x44>
 801c820:	f855 300b 	ldr.w	r3, [r5, fp]
 801c824:	b92b      	cbnz	r3, 801c832 <quorem+0x9e>
 801c826:	9b01      	ldr	r3, [sp, #4]
 801c828:	3b04      	subs	r3, #4
 801c82a:	429d      	cmp	r5, r3
 801c82c:	461a      	mov	r2, r3
 801c82e:	d32e      	bcc.n	801c88e <quorem+0xfa>
 801c830:	613c      	str	r4, [r7, #16]
 801c832:	4638      	mov	r0, r7
 801c834:	f001 f96c 	bl	801db10 <__mcmp>
 801c838:	2800      	cmp	r0, #0
 801c83a:	db24      	blt.n	801c886 <quorem+0xf2>
 801c83c:	3601      	adds	r6, #1
 801c83e:	4628      	mov	r0, r5
 801c840:	f04f 0c00 	mov.w	ip, #0
 801c844:	f858 2b04 	ldr.w	r2, [r8], #4
 801c848:	f8d0 e000 	ldr.w	lr, [r0]
 801c84c:	b293      	uxth	r3, r2
 801c84e:	ebac 0303 	sub.w	r3, ip, r3
 801c852:	0c12      	lsrs	r2, r2, #16
 801c854:	fa13 f38e 	uxtah	r3, r3, lr
 801c858:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c85c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c860:	b29b      	uxth	r3, r3
 801c862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c866:	45c1      	cmp	r9, r8
 801c868:	f840 3b04 	str.w	r3, [r0], #4
 801c86c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c870:	d2e8      	bcs.n	801c844 <quorem+0xb0>
 801c872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c87a:	b922      	cbnz	r2, 801c886 <quorem+0xf2>
 801c87c:	3b04      	subs	r3, #4
 801c87e:	429d      	cmp	r5, r3
 801c880:	461a      	mov	r2, r3
 801c882:	d30a      	bcc.n	801c89a <quorem+0x106>
 801c884:	613c      	str	r4, [r7, #16]
 801c886:	4630      	mov	r0, r6
 801c888:	b003      	add	sp, #12
 801c88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c88e:	6812      	ldr	r2, [r2, #0]
 801c890:	3b04      	subs	r3, #4
 801c892:	2a00      	cmp	r2, #0
 801c894:	d1cc      	bne.n	801c830 <quorem+0x9c>
 801c896:	3c01      	subs	r4, #1
 801c898:	e7c7      	b.n	801c82a <quorem+0x96>
 801c89a:	6812      	ldr	r2, [r2, #0]
 801c89c:	3b04      	subs	r3, #4
 801c89e:	2a00      	cmp	r2, #0
 801c8a0:	d1f0      	bne.n	801c884 <quorem+0xf0>
 801c8a2:	3c01      	subs	r4, #1
 801c8a4:	e7eb      	b.n	801c87e <quorem+0xea>
 801c8a6:	2000      	movs	r0, #0
 801c8a8:	e7ee      	b.n	801c888 <quorem+0xf4>
 801c8aa:	0000      	movs	r0, r0
 801c8ac:	0000      	movs	r0, r0
	...

0801c8b0 <_dtoa_r>:
 801c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8b4:	ec59 8b10 	vmov	r8, r9, d0
 801c8b8:	b095      	sub	sp, #84	; 0x54
 801c8ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c8bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c8be:	9107      	str	r1, [sp, #28]
 801c8c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801c8c4:	4606      	mov	r6, r0
 801c8c6:	9209      	str	r2, [sp, #36]	; 0x24
 801c8c8:	9310      	str	r3, [sp, #64]	; 0x40
 801c8ca:	b975      	cbnz	r5, 801c8ea <_dtoa_r+0x3a>
 801c8cc:	2010      	movs	r0, #16
 801c8ce:	f000 fe99 	bl	801d604 <malloc>
 801c8d2:	4602      	mov	r2, r0
 801c8d4:	6270      	str	r0, [r6, #36]	; 0x24
 801c8d6:	b920      	cbnz	r0, 801c8e2 <_dtoa_r+0x32>
 801c8d8:	4bab      	ldr	r3, [pc, #684]	; (801cb88 <_dtoa_r+0x2d8>)
 801c8da:	21ea      	movs	r1, #234	; 0xea
 801c8dc:	48ab      	ldr	r0, [pc, #684]	; (801cb8c <_dtoa_r+0x2dc>)
 801c8de:	f7ff ff2b 	bl	801c738 <__assert_func>
 801c8e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c8e6:	6005      	str	r5, [r0, #0]
 801c8e8:	60c5      	str	r5, [r0, #12]
 801c8ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c8ec:	6819      	ldr	r1, [r3, #0]
 801c8ee:	b151      	cbz	r1, 801c906 <_dtoa_r+0x56>
 801c8f0:	685a      	ldr	r2, [r3, #4]
 801c8f2:	604a      	str	r2, [r1, #4]
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	4093      	lsls	r3, r2
 801c8f8:	608b      	str	r3, [r1, #8]
 801c8fa:	4630      	mov	r0, r6
 801c8fc:	f000 feca 	bl	801d694 <_Bfree>
 801c900:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c902:	2200      	movs	r2, #0
 801c904:	601a      	str	r2, [r3, #0]
 801c906:	f1b9 0300 	subs.w	r3, r9, #0
 801c90a:	bfbb      	ittet	lt
 801c90c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c910:	9303      	strlt	r3, [sp, #12]
 801c912:	2300      	movge	r3, #0
 801c914:	2201      	movlt	r2, #1
 801c916:	bfac      	ite	ge
 801c918:	6023      	strge	r3, [r4, #0]
 801c91a:	6022      	strlt	r2, [r4, #0]
 801c91c:	4b9c      	ldr	r3, [pc, #624]	; (801cb90 <_dtoa_r+0x2e0>)
 801c91e:	9c03      	ldr	r4, [sp, #12]
 801c920:	43a3      	bics	r3, r4
 801c922:	d11a      	bne.n	801c95a <_dtoa_r+0xaa>
 801c924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c926:	f242 730f 	movw	r3, #9999	; 0x270f
 801c92a:	6013      	str	r3, [r2, #0]
 801c92c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c930:	ea53 0308 	orrs.w	r3, r3, r8
 801c934:	f000 8512 	beq.w	801d35c <_dtoa_r+0xaac>
 801c938:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c93a:	b953      	cbnz	r3, 801c952 <_dtoa_r+0xa2>
 801c93c:	4b95      	ldr	r3, [pc, #596]	; (801cb94 <_dtoa_r+0x2e4>)
 801c93e:	e01f      	b.n	801c980 <_dtoa_r+0xd0>
 801c940:	4b95      	ldr	r3, [pc, #596]	; (801cb98 <_dtoa_r+0x2e8>)
 801c942:	9300      	str	r3, [sp, #0]
 801c944:	3308      	adds	r3, #8
 801c946:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c948:	6013      	str	r3, [r2, #0]
 801c94a:	9800      	ldr	r0, [sp, #0]
 801c94c:	b015      	add	sp, #84	; 0x54
 801c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c952:	4b90      	ldr	r3, [pc, #576]	; (801cb94 <_dtoa_r+0x2e4>)
 801c954:	9300      	str	r3, [sp, #0]
 801c956:	3303      	adds	r3, #3
 801c958:	e7f5      	b.n	801c946 <_dtoa_r+0x96>
 801c95a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c95e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c966:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c96a:	d10b      	bne.n	801c984 <_dtoa_r+0xd4>
 801c96c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c96e:	2301      	movs	r3, #1
 801c970:	6013      	str	r3, [r2, #0]
 801c972:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c974:	2b00      	cmp	r3, #0
 801c976:	f000 84ee 	beq.w	801d356 <_dtoa_r+0xaa6>
 801c97a:	4888      	ldr	r0, [pc, #544]	; (801cb9c <_dtoa_r+0x2ec>)
 801c97c:	6018      	str	r0, [r3, #0]
 801c97e:	1e43      	subs	r3, r0, #1
 801c980:	9300      	str	r3, [sp, #0]
 801c982:	e7e2      	b.n	801c94a <_dtoa_r+0x9a>
 801c984:	a913      	add	r1, sp, #76	; 0x4c
 801c986:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c98a:	aa12      	add	r2, sp, #72	; 0x48
 801c98c:	4630      	mov	r0, r6
 801c98e:	f001 f963 	bl	801dc58 <__d2b>
 801c992:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c996:	4605      	mov	r5, r0
 801c998:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c99a:	2900      	cmp	r1, #0
 801c99c:	d047      	beq.n	801ca2e <_dtoa_r+0x17e>
 801c99e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c9a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c9a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c9a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c9ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c9b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c9b4:	2400      	movs	r4, #0
 801c9b6:	ec43 2b16 	vmov	d6, r2, r3
 801c9ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c9be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801cb70 <_dtoa_r+0x2c0>
 801c9c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c9c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801cb78 <_dtoa_r+0x2c8>
 801c9ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c9ce:	eeb0 7b46 	vmov.f64	d7, d6
 801c9d2:	ee06 1a90 	vmov	s13, r1
 801c9d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801c9da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801cb80 <_dtoa_r+0x2d0>
 801c9de:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c9e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c9e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ee:	ee16 ba90 	vmov	fp, s13
 801c9f2:	9411      	str	r4, [sp, #68]	; 0x44
 801c9f4:	d508      	bpl.n	801ca08 <_dtoa_r+0x158>
 801c9f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c9fa:	eeb4 6b47 	vcmp.f64	d6, d7
 801c9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca02:	bf18      	it	ne
 801ca04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801ca08:	f1bb 0f16 	cmp.w	fp, #22
 801ca0c:	d832      	bhi.n	801ca74 <_dtoa_r+0x1c4>
 801ca0e:	4b64      	ldr	r3, [pc, #400]	; (801cba0 <_dtoa_r+0x2f0>)
 801ca10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ca14:	ed93 7b00 	vldr	d7, [r3]
 801ca18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801ca1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ca20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca24:	d501      	bpl.n	801ca2a <_dtoa_r+0x17a>
 801ca26:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	e023      	b.n	801ca76 <_dtoa_r+0x1c6>
 801ca2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ca30:	4401      	add	r1, r0
 801ca32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801ca36:	2b20      	cmp	r3, #32
 801ca38:	bfc3      	ittte	gt
 801ca3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ca3e:	fa04 f303 	lslgt.w	r3, r4, r3
 801ca42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801ca46:	f1c3 0320 	rsble	r3, r3, #32
 801ca4a:	bfc6      	itte	gt
 801ca4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 801ca50:	ea43 0308 	orrgt.w	r3, r3, r8
 801ca54:	fa08 f303 	lslle.w	r3, r8, r3
 801ca58:	ee07 3a90 	vmov	s15, r3
 801ca5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ca60:	3901      	subs	r1, #1
 801ca62:	ed8d 7b00 	vstr	d7, [sp]
 801ca66:	9c01      	ldr	r4, [sp, #4]
 801ca68:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801ca70:	2401      	movs	r4, #1
 801ca72:	e7a0      	b.n	801c9b6 <_dtoa_r+0x106>
 801ca74:	2301      	movs	r3, #1
 801ca76:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca78:	1a43      	subs	r3, r0, r1
 801ca7a:	1e5a      	subs	r2, r3, #1
 801ca7c:	bf45      	ittet	mi
 801ca7e:	f1c3 0301 	rsbmi	r3, r3, #1
 801ca82:	9305      	strmi	r3, [sp, #20]
 801ca84:	2300      	movpl	r3, #0
 801ca86:	2300      	movmi	r3, #0
 801ca88:	9206      	str	r2, [sp, #24]
 801ca8a:	bf54      	ite	pl
 801ca8c:	9305      	strpl	r3, [sp, #20]
 801ca8e:	9306      	strmi	r3, [sp, #24]
 801ca90:	f1bb 0f00 	cmp.w	fp, #0
 801ca94:	db18      	blt.n	801cac8 <_dtoa_r+0x218>
 801ca96:	9b06      	ldr	r3, [sp, #24]
 801ca98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801ca9c:	445b      	add	r3, fp
 801ca9e:	9306      	str	r3, [sp, #24]
 801caa0:	2300      	movs	r3, #0
 801caa2:	9a07      	ldr	r2, [sp, #28]
 801caa4:	2a09      	cmp	r2, #9
 801caa6:	d849      	bhi.n	801cb3c <_dtoa_r+0x28c>
 801caa8:	2a05      	cmp	r2, #5
 801caaa:	bfc4      	itt	gt
 801caac:	3a04      	subgt	r2, #4
 801caae:	9207      	strgt	r2, [sp, #28]
 801cab0:	9a07      	ldr	r2, [sp, #28]
 801cab2:	f1a2 0202 	sub.w	r2, r2, #2
 801cab6:	bfcc      	ite	gt
 801cab8:	2400      	movgt	r4, #0
 801caba:	2401      	movle	r4, #1
 801cabc:	2a03      	cmp	r2, #3
 801cabe:	d848      	bhi.n	801cb52 <_dtoa_r+0x2a2>
 801cac0:	e8df f002 	tbb	[pc, r2]
 801cac4:	3a2c2e0b 	.word	0x3a2c2e0b
 801cac8:	9b05      	ldr	r3, [sp, #20]
 801caca:	2200      	movs	r2, #0
 801cacc:	eba3 030b 	sub.w	r3, r3, fp
 801cad0:	9305      	str	r3, [sp, #20]
 801cad2:	920e      	str	r2, [sp, #56]	; 0x38
 801cad4:	f1cb 0300 	rsb	r3, fp, #0
 801cad8:	e7e3      	b.n	801caa2 <_dtoa_r+0x1f2>
 801cada:	2200      	movs	r2, #0
 801cadc:	9208      	str	r2, [sp, #32]
 801cade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cae0:	2a00      	cmp	r2, #0
 801cae2:	dc39      	bgt.n	801cb58 <_dtoa_r+0x2a8>
 801cae4:	f04f 0a01 	mov.w	sl, #1
 801cae8:	46d1      	mov	r9, sl
 801caea:	4652      	mov	r2, sl
 801caec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801caf0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801caf2:	2100      	movs	r1, #0
 801caf4:	6079      	str	r1, [r7, #4]
 801caf6:	2004      	movs	r0, #4
 801caf8:	f100 0c14 	add.w	ip, r0, #20
 801cafc:	4594      	cmp	ip, r2
 801cafe:	6879      	ldr	r1, [r7, #4]
 801cb00:	d92f      	bls.n	801cb62 <_dtoa_r+0x2b2>
 801cb02:	4630      	mov	r0, r6
 801cb04:	930c      	str	r3, [sp, #48]	; 0x30
 801cb06:	f000 fd85 	bl	801d614 <_Balloc>
 801cb0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb0c:	9000      	str	r0, [sp, #0]
 801cb0e:	4602      	mov	r2, r0
 801cb10:	2800      	cmp	r0, #0
 801cb12:	d149      	bne.n	801cba8 <_dtoa_r+0x2f8>
 801cb14:	4b23      	ldr	r3, [pc, #140]	; (801cba4 <_dtoa_r+0x2f4>)
 801cb16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cb1a:	e6df      	b.n	801c8dc <_dtoa_r+0x2c>
 801cb1c:	2201      	movs	r2, #1
 801cb1e:	e7dd      	b.n	801cadc <_dtoa_r+0x22c>
 801cb20:	2200      	movs	r2, #0
 801cb22:	9208      	str	r2, [sp, #32]
 801cb24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb26:	eb0b 0a02 	add.w	sl, fp, r2
 801cb2a:	f10a 0901 	add.w	r9, sl, #1
 801cb2e:	464a      	mov	r2, r9
 801cb30:	2a01      	cmp	r2, #1
 801cb32:	bfb8      	it	lt
 801cb34:	2201      	movlt	r2, #1
 801cb36:	e7db      	b.n	801caf0 <_dtoa_r+0x240>
 801cb38:	2201      	movs	r2, #1
 801cb3a:	e7f2      	b.n	801cb22 <_dtoa_r+0x272>
 801cb3c:	2401      	movs	r4, #1
 801cb3e:	2200      	movs	r2, #0
 801cb40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801cb44:	f04f 3aff 	mov.w	sl, #4294967295
 801cb48:	2100      	movs	r1, #0
 801cb4a:	46d1      	mov	r9, sl
 801cb4c:	2212      	movs	r2, #18
 801cb4e:	9109      	str	r1, [sp, #36]	; 0x24
 801cb50:	e7ce      	b.n	801caf0 <_dtoa_r+0x240>
 801cb52:	2201      	movs	r2, #1
 801cb54:	9208      	str	r2, [sp, #32]
 801cb56:	e7f5      	b.n	801cb44 <_dtoa_r+0x294>
 801cb58:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801cb5c:	46d1      	mov	r9, sl
 801cb5e:	4652      	mov	r2, sl
 801cb60:	e7c6      	b.n	801caf0 <_dtoa_r+0x240>
 801cb62:	3101      	adds	r1, #1
 801cb64:	6079      	str	r1, [r7, #4]
 801cb66:	0040      	lsls	r0, r0, #1
 801cb68:	e7c6      	b.n	801caf8 <_dtoa_r+0x248>
 801cb6a:	bf00      	nop
 801cb6c:	f3af 8000 	nop.w
 801cb70:	636f4361 	.word	0x636f4361
 801cb74:	3fd287a7 	.word	0x3fd287a7
 801cb78:	8b60c8b3 	.word	0x8b60c8b3
 801cb7c:	3fc68a28 	.word	0x3fc68a28
 801cb80:	509f79fb 	.word	0x509f79fb
 801cb84:	3fd34413 	.word	0x3fd34413
 801cb88:	08046632 	.word	0x08046632
 801cb8c:	080466f1 	.word	0x080466f1
 801cb90:	7ff00000 	.word	0x7ff00000
 801cb94:	080466ed 	.word	0x080466ed
 801cb98:	080466e4 	.word	0x080466e4
 801cb9c:	0804693a 	.word	0x0804693a
 801cba0:	08046850 	.word	0x08046850
 801cba4:	08046750 	.word	0x08046750
 801cba8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cbaa:	9900      	ldr	r1, [sp, #0]
 801cbac:	6011      	str	r1, [r2, #0]
 801cbae:	f1b9 0f0e 	cmp.w	r9, #14
 801cbb2:	d872      	bhi.n	801cc9a <_dtoa_r+0x3ea>
 801cbb4:	2c00      	cmp	r4, #0
 801cbb6:	d070      	beq.n	801cc9a <_dtoa_r+0x3ea>
 801cbb8:	f1bb 0f00 	cmp.w	fp, #0
 801cbbc:	f340 80a6 	ble.w	801cd0c <_dtoa_r+0x45c>
 801cbc0:	49ca      	ldr	r1, [pc, #808]	; (801ceec <_dtoa_r+0x63c>)
 801cbc2:	f00b 020f 	and.w	r2, fp, #15
 801cbc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cbca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cbce:	ed92 7b00 	vldr	d7, [r2]
 801cbd2:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cbd6:	f000 808d 	beq.w	801ccf4 <_dtoa_r+0x444>
 801cbda:	4ac5      	ldr	r2, [pc, #788]	; (801cef0 <_dtoa_r+0x640>)
 801cbdc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801cbe0:	ed92 6b08 	vldr	d6, [r2, #32]
 801cbe4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801cbe8:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cbec:	f001 010f 	and.w	r1, r1, #15
 801cbf0:	2203      	movs	r2, #3
 801cbf2:	48bf      	ldr	r0, [pc, #764]	; (801cef0 <_dtoa_r+0x640>)
 801cbf4:	2900      	cmp	r1, #0
 801cbf6:	d17f      	bne.n	801ccf8 <_dtoa_r+0x448>
 801cbf8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cbfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cc00:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cc04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cc06:	2900      	cmp	r1, #0
 801cc08:	f000 80b2 	beq.w	801cd70 <_dtoa_r+0x4c0>
 801cc0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cc10:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cc14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc1c:	f140 80a8 	bpl.w	801cd70 <_dtoa_r+0x4c0>
 801cc20:	f1b9 0f00 	cmp.w	r9, #0
 801cc24:	f000 80a4 	beq.w	801cd70 <_dtoa_r+0x4c0>
 801cc28:	f1ba 0f00 	cmp.w	sl, #0
 801cc2c:	dd31      	ble.n	801cc92 <_dtoa_r+0x3e2>
 801cc2e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801cc32:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc36:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cc3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801cc3e:	3201      	adds	r2, #1
 801cc40:	4650      	mov	r0, sl
 801cc42:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cc46:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801cc4a:	ee07 2a90 	vmov	s15, r2
 801cc4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cc52:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cc56:	ed8d 5b02 	vstr	d5, [sp, #8]
 801cc5a:	9c03      	ldr	r4, [sp, #12]
 801cc5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801cc60:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801cc64:	2800      	cmp	r0, #0
 801cc66:	f040 8086 	bne.w	801cd76 <_dtoa_r+0x4c6>
 801cc6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cc6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cc72:	ec42 1b17 	vmov	d7, r1, r2
 801cc76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc7e:	f300 8272 	bgt.w	801d166 <_dtoa_r+0x8b6>
 801cc82:	eeb1 7b47 	vneg.f64	d7, d7
 801cc86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8e:	f100 8267 	bmi.w	801d160 <_dtoa_r+0x8b0>
 801cc92:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801cc96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801cc9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc9c:	2a00      	cmp	r2, #0
 801cc9e:	f2c0 8129 	blt.w	801cef4 <_dtoa_r+0x644>
 801cca2:	f1bb 0f0e 	cmp.w	fp, #14
 801cca6:	f300 8125 	bgt.w	801cef4 <_dtoa_r+0x644>
 801ccaa:	4b90      	ldr	r3, [pc, #576]	; (801ceec <_dtoa_r+0x63c>)
 801ccac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ccb0:	ed93 6b00 	vldr	d6, [r3]
 801ccb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	f280 80c3 	bge.w	801ce42 <_dtoa_r+0x592>
 801ccbc:	f1b9 0f00 	cmp.w	r9, #0
 801ccc0:	f300 80bf 	bgt.w	801ce42 <_dtoa_r+0x592>
 801ccc4:	f040 824c 	bne.w	801d160 <_dtoa_r+0x8b0>
 801ccc8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cccc:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ccd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ccd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ccd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccdc:	464c      	mov	r4, r9
 801ccde:	464f      	mov	r7, r9
 801cce0:	f280 8222 	bge.w	801d128 <_dtoa_r+0x878>
 801cce4:	f8dd 8000 	ldr.w	r8, [sp]
 801cce8:	2331      	movs	r3, #49	; 0x31
 801ccea:	f808 3b01 	strb.w	r3, [r8], #1
 801ccee:	f10b 0b01 	add.w	fp, fp, #1
 801ccf2:	e21e      	b.n	801d132 <_dtoa_r+0x882>
 801ccf4:	2202      	movs	r2, #2
 801ccf6:	e77c      	b.n	801cbf2 <_dtoa_r+0x342>
 801ccf8:	07cc      	lsls	r4, r1, #31
 801ccfa:	d504      	bpl.n	801cd06 <_dtoa_r+0x456>
 801ccfc:	ed90 6b00 	vldr	d6, [r0]
 801cd00:	3201      	adds	r2, #1
 801cd02:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd06:	1049      	asrs	r1, r1, #1
 801cd08:	3008      	adds	r0, #8
 801cd0a:	e773      	b.n	801cbf4 <_dtoa_r+0x344>
 801cd0c:	d02e      	beq.n	801cd6c <_dtoa_r+0x4bc>
 801cd0e:	f1cb 0100 	rsb	r1, fp, #0
 801cd12:	4a76      	ldr	r2, [pc, #472]	; (801ceec <_dtoa_r+0x63c>)
 801cd14:	f001 000f 	and.w	r0, r1, #15
 801cd18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cd1c:	ed92 7b00 	vldr	d7, [r2]
 801cd20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801cd24:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801cd2c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801cd30:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801cd34:	486e      	ldr	r0, [pc, #440]	; (801cef0 <_dtoa_r+0x640>)
 801cd36:	1109      	asrs	r1, r1, #4
 801cd38:	2400      	movs	r4, #0
 801cd3a:	2202      	movs	r2, #2
 801cd3c:	b939      	cbnz	r1, 801cd4e <_dtoa_r+0x49e>
 801cd3e:	2c00      	cmp	r4, #0
 801cd40:	f43f af60 	beq.w	801cc04 <_dtoa_r+0x354>
 801cd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd4c:	e75a      	b.n	801cc04 <_dtoa_r+0x354>
 801cd4e:	07cf      	lsls	r7, r1, #31
 801cd50:	d509      	bpl.n	801cd66 <_dtoa_r+0x4b6>
 801cd52:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801cd56:	ed90 7b00 	vldr	d7, [r0]
 801cd5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801cd62:	3201      	adds	r2, #1
 801cd64:	2401      	movs	r4, #1
 801cd66:	1049      	asrs	r1, r1, #1
 801cd68:	3008      	adds	r0, #8
 801cd6a:	e7e7      	b.n	801cd3c <_dtoa_r+0x48c>
 801cd6c:	2202      	movs	r2, #2
 801cd6e:	e749      	b.n	801cc04 <_dtoa_r+0x354>
 801cd70:	465f      	mov	r7, fp
 801cd72:	4648      	mov	r0, r9
 801cd74:	e765      	b.n	801cc42 <_dtoa_r+0x392>
 801cd76:	ec42 1b17 	vmov	d7, r1, r2
 801cd7a:	4a5c      	ldr	r2, [pc, #368]	; (801ceec <_dtoa_r+0x63c>)
 801cd7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cd80:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cd84:	9a00      	ldr	r2, [sp, #0]
 801cd86:	1814      	adds	r4, r2, r0
 801cd88:	9a08      	ldr	r2, [sp, #32]
 801cd8a:	b352      	cbz	r2, 801cde2 <_dtoa_r+0x532>
 801cd8c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801cd90:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801cd94:	f8dd 8000 	ldr.w	r8, [sp]
 801cd98:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801cd9c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cda0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801cda4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cda8:	ee14 2a90 	vmov	r2, s9
 801cdac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cdb0:	3230      	adds	r2, #48	; 0x30
 801cdb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cdb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdbe:	f808 2b01 	strb.w	r2, [r8], #1
 801cdc2:	d439      	bmi.n	801ce38 <_dtoa_r+0x588>
 801cdc4:	ee32 5b46 	vsub.f64	d5, d2, d6
 801cdc8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801cdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdd0:	d472      	bmi.n	801ceb8 <_dtoa_r+0x608>
 801cdd2:	45a0      	cmp	r8, r4
 801cdd4:	f43f af5d 	beq.w	801cc92 <_dtoa_r+0x3e2>
 801cdd8:	ee27 7b03 	vmul.f64	d7, d7, d3
 801cddc:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cde0:	e7e0      	b.n	801cda4 <_dtoa_r+0x4f4>
 801cde2:	f8dd 8000 	ldr.w	r8, [sp]
 801cde6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cdea:	4621      	mov	r1, r4
 801cdec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cdf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cdf4:	ee14 2a90 	vmov	r2, s9
 801cdf8:	3230      	adds	r2, #48	; 0x30
 801cdfa:	f808 2b01 	strb.w	r2, [r8], #1
 801cdfe:	45a0      	cmp	r8, r4
 801ce00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ce04:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ce08:	d118      	bne.n	801ce3c <_dtoa_r+0x58c>
 801ce0a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ce0e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ce12:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1a:	dc4d      	bgt.n	801ceb8 <_dtoa_r+0x608>
 801ce1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce28:	f57f af33 	bpl.w	801cc92 <_dtoa_r+0x3e2>
 801ce2c:	4688      	mov	r8, r1
 801ce2e:	3901      	subs	r1, #1
 801ce30:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ce34:	2b30      	cmp	r3, #48	; 0x30
 801ce36:	d0f9      	beq.n	801ce2c <_dtoa_r+0x57c>
 801ce38:	46bb      	mov	fp, r7
 801ce3a:	e02a      	b.n	801ce92 <_dtoa_r+0x5e2>
 801ce3c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ce40:	e7d6      	b.n	801cdf0 <_dtoa_r+0x540>
 801ce42:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce46:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ce4a:	f8dd 8000 	ldr.w	r8, [sp]
 801ce4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801ce52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801ce56:	ee15 3a10 	vmov	r3, s10
 801ce5a:	3330      	adds	r3, #48	; 0x30
 801ce5c:	f808 3b01 	strb.w	r3, [r8], #1
 801ce60:	9b00      	ldr	r3, [sp, #0]
 801ce62:	eba8 0303 	sub.w	r3, r8, r3
 801ce66:	4599      	cmp	r9, r3
 801ce68:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801ce6c:	eea3 7b46 	vfms.f64	d7, d3, d6
 801ce70:	d133      	bne.n	801ceda <_dtoa_r+0x62a>
 801ce72:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ce76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ce7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce7e:	dc1a      	bgt.n	801ceb6 <_dtoa_r+0x606>
 801ce80:	eeb4 7b46 	vcmp.f64	d7, d6
 801ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce88:	d103      	bne.n	801ce92 <_dtoa_r+0x5e2>
 801ce8a:	ee15 3a10 	vmov	r3, s10
 801ce8e:	07d9      	lsls	r1, r3, #31
 801ce90:	d411      	bmi.n	801ceb6 <_dtoa_r+0x606>
 801ce92:	4629      	mov	r1, r5
 801ce94:	4630      	mov	r0, r6
 801ce96:	f000 fbfd 	bl	801d694 <_Bfree>
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce9e:	f888 3000 	strb.w	r3, [r8]
 801cea2:	f10b 0301 	add.w	r3, fp, #1
 801cea6:	6013      	str	r3, [r2, #0]
 801cea8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	f43f ad4d 	beq.w	801c94a <_dtoa_r+0x9a>
 801ceb0:	f8c3 8000 	str.w	r8, [r3]
 801ceb4:	e549      	b.n	801c94a <_dtoa_r+0x9a>
 801ceb6:	465f      	mov	r7, fp
 801ceb8:	4643      	mov	r3, r8
 801ceba:	4698      	mov	r8, r3
 801cebc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cec0:	2a39      	cmp	r2, #57	; 0x39
 801cec2:	d106      	bne.n	801ced2 <_dtoa_r+0x622>
 801cec4:	9a00      	ldr	r2, [sp, #0]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d1f7      	bne.n	801ceba <_dtoa_r+0x60a>
 801ceca:	9900      	ldr	r1, [sp, #0]
 801cecc:	2230      	movs	r2, #48	; 0x30
 801cece:	3701      	adds	r7, #1
 801ced0:	700a      	strb	r2, [r1, #0]
 801ced2:	781a      	ldrb	r2, [r3, #0]
 801ced4:	3201      	adds	r2, #1
 801ced6:	701a      	strb	r2, [r3, #0]
 801ced8:	e7ae      	b.n	801ce38 <_dtoa_r+0x588>
 801ceda:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cede:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cee6:	d1b2      	bne.n	801ce4e <_dtoa_r+0x59e>
 801cee8:	e7d3      	b.n	801ce92 <_dtoa_r+0x5e2>
 801ceea:	bf00      	nop
 801ceec:	08046850 	.word	0x08046850
 801cef0:	08046828 	.word	0x08046828
 801cef4:	9908      	ldr	r1, [sp, #32]
 801cef6:	2900      	cmp	r1, #0
 801cef8:	f000 80d1 	beq.w	801d09e <_dtoa_r+0x7ee>
 801cefc:	9907      	ldr	r1, [sp, #28]
 801cefe:	2901      	cmp	r1, #1
 801cf00:	f300 80b4 	bgt.w	801d06c <_dtoa_r+0x7bc>
 801cf04:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cf06:	2900      	cmp	r1, #0
 801cf08:	f000 80ac 	beq.w	801d064 <_dtoa_r+0x7b4>
 801cf0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cf10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cf14:	461c      	mov	r4, r3
 801cf16:	930a      	str	r3, [sp, #40]	; 0x28
 801cf18:	9b05      	ldr	r3, [sp, #20]
 801cf1a:	4413      	add	r3, r2
 801cf1c:	9305      	str	r3, [sp, #20]
 801cf1e:	9b06      	ldr	r3, [sp, #24]
 801cf20:	2101      	movs	r1, #1
 801cf22:	4413      	add	r3, r2
 801cf24:	4630      	mov	r0, r6
 801cf26:	9306      	str	r3, [sp, #24]
 801cf28:	f000 fc70 	bl	801d80c <__i2b>
 801cf2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf2e:	4607      	mov	r7, r0
 801cf30:	f1b8 0f00 	cmp.w	r8, #0
 801cf34:	dd0d      	ble.n	801cf52 <_dtoa_r+0x6a2>
 801cf36:	9a06      	ldr	r2, [sp, #24]
 801cf38:	2a00      	cmp	r2, #0
 801cf3a:	dd0a      	ble.n	801cf52 <_dtoa_r+0x6a2>
 801cf3c:	4542      	cmp	r2, r8
 801cf3e:	9905      	ldr	r1, [sp, #20]
 801cf40:	bfa8      	it	ge
 801cf42:	4642      	movge	r2, r8
 801cf44:	1a89      	subs	r1, r1, r2
 801cf46:	9105      	str	r1, [sp, #20]
 801cf48:	9906      	ldr	r1, [sp, #24]
 801cf4a:	eba8 0802 	sub.w	r8, r8, r2
 801cf4e:	1a8a      	subs	r2, r1, r2
 801cf50:	9206      	str	r2, [sp, #24]
 801cf52:	b303      	cbz	r3, 801cf96 <_dtoa_r+0x6e6>
 801cf54:	9a08      	ldr	r2, [sp, #32]
 801cf56:	2a00      	cmp	r2, #0
 801cf58:	f000 80a6 	beq.w	801d0a8 <_dtoa_r+0x7f8>
 801cf5c:	2c00      	cmp	r4, #0
 801cf5e:	dd13      	ble.n	801cf88 <_dtoa_r+0x6d8>
 801cf60:	4639      	mov	r1, r7
 801cf62:	4622      	mov	r2, r4
 801cf64:	4630      	mov	r0, r6
 801cf66:	930c      	str	r3, [sp, #48]	; 0x30
 801cf68:	f000 fd0c 	bl	801d984 <__pow5mult>
 801cf6c:	462a      	mov	r2, r5
 801cf6e:	4601      	mov	r1, r0
 801cf70:	4607      	mov	r7, r0
 801cf72:	4630      	mov	r0, r6
 801cf74:	f000 fc60 	bl	801d838 <__multiply>
 801cf78:	4629      	mov	r1, r5
 801cf7a:	900a      	str	r0, [sp, #40]	; 0x28
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	f000 fb89 	bl	801d694 <_Bfree>
 801cf82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf86:	4615      	mov	r5, r2
 801cf88:	1b1a      	subs	r2, r3, r4
 801cf8a:	d004      	beq.n	801cf96 <_dtoa_r+0x6e6>
 801cf8c:	4629      	mov	r1, r5
 801cf8e:	4630      	mov	r0, r6
 801cf90:	f000 fcf8 	bl	801d984 <__pow5mult>
 801cf94:	4605      	mov	r5, r0
 801cf96:	2101      	movs	r1, #1
 801cf98:	4630      	mov	r0, r6
 801cf9a:	f000 fc37 	bl	801d80c <__i2b>
 801cf9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	4604      	mov	r4, r0
 801cfa4:	f340 8082 	ble.w	801d0ac <_dtoa_r+0x7fc>
 801cfa8:	461a      	mov	r2, r3
 801cfaa:	4601      	mov	r1, r0
 801cfac:	4630      	mov	r0, r6
 801cfae:	f000 fce9 	bl	801d984 <__pow5mult>
 801cfb2:	9b07      	ldr	r3, [sp, #28]
 801cfb4:	2b01      	cmp	r3, #1
 801cfb6:	4604      	mov	r4, r0
 801cfb8:	dd7b      	ble.n	801d0b2 <_dtoa_r+0x802>
 801cfba:	2300      	movs	r3, #0
 801cfbc:	930a      	str	r3, [sp, #40]	; 0x28
 801cfbe:	6922      	ldr	r2, [r4, #16]
 801cfc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cfc4:	6910      	ldr	r0, [r2, #16]
 801cfc6:	f000 fbd1 	bl	801d76c <__hi0bits>
 801cfca:	f1c0 0020 	rsb	r0, r0, #32
 801cfce:	9b06      	ldr	r3, [sp, #24]
 801cfd0:	4418      	add	r0, r3
 801cfd2:	f010 001f 	ands.w	r0, r0, #31
 801cfd6:	f000 808d 	beq.w	801d0f4 <_dtoa_r+0x844>
 801cfda:	f1c0 0220 	rsb	r2, r0, #32
 801cfde:	2a04      	cmp	r2, #4
 801cfe0:	f340 8086 	ble.w	801d0f0 <_dtoa_r+0x840>
 801cfe4:	f1c0 001c 	rsb	r0, r0, #28
 801cfe8:	9b05      	ldr	r3, [sp, #20]
 801cfea:	4403      	add	r3, r0
 801cfec:	9305      	str	r3, [sp, #20]
 801cfee:	9b06      	ldr	r3, [sp, #24]
 801cff0:	4403      	add	r3, r0
 801cff2:	4480      	add	r8, r0
 801cff4:	9306      	str	r3, [sp, #24]
 801cff6:	9b05      	ldr	r3, [sp, #20]
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	dd05      	ble.n	801d008 <_dtoa_r+0x758>
 801cffc:	4629      	mov	r1, r5
 801cffe:	461a      	mov	r2, r3
 801d000:	4630      	mov	r0, r6
 801d002:	f000 fd19 	bl	801da38 <__lshift>
 801d006:	4605      	mov	r5, r0
 801d008:	9b06      	ldr	r3, [sp, #24]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	dd05      	ble.n	801d01a <_dtoa_r+0x76a>
 801d00e:	4621      	mov	r1, r4
 801d010:	461a      	mov	r2, r3
 801d012:	4630      	mov	r0, r6
 801d014:	f000 fd10 	bl	801da38 <__lshift>
 801d018:	4604      	mov	r4, r0
 801d01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d06b      	beq.n	801d0f8 <_dtoa_r+0x848>
 801d020:	4621      	mov	r1, r4
 801d022:	4628      	mov	r0, r5
 801d024:	f000 fd74 	bl	801db10 <__mcmp>
 801d028:	2800      	cmp	r0, #0
 801d02a:	da65      	bge.n	801d0f8 <_dtoa_r+0x848>
 801d02c:	2300      	movs	r3, #0
 801d02e:	4629      	mov	r1, r5
 801d030:	220a      	movs	r2, #10
 801d032:	4630      	mov	r0, r6
 801d034:	f000 fb50 	bl	801d6d8 <__multadd>
 801d038:	9b08      	ldr	r3, [sp, #32]
 801d03a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d03e:	4605      	mov	r5, r0
 801d040:	2b00      	cmp	r3, #0
 801d042:	f000 8192 	beq.w	801d36a <_dtoa_r+0xaba>
 801d046:	4639      	mov	r1, r7
 801d048:	2300      	movs	r3, #0
 801d04a:	220a      	movs	r2, #10
 801d04c:	4630      	mov	r0, r6
 801d04e:	f000 fb43 	bl	801d6d8 <__multadd>
 801d052:	f1ba 0f00 	cmp.w	sl, #0
 801d056:	4607      	mov	r7, r0
 801d058:	f300 808e 	bgt.w	801d178 <_dtoa_r+0x8c8>
 801d05c:	9b07      	ldr	r3, [sp, #28]
 801d05e:	2b02      	cmp	r3, #2
 801d060:	dc51      	bgt.n	801d106 <_dtoa_r+0x856>
 801d062:	e089      	b.n	801d178 <_dtoa_r+0x8c8>
 801d064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d066:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d06a:	e751      	b.n	801cf10 <_dtoa_r+0x660>
 801d06c:	f109 34ff 	add.w	r4, r9, #4294967295
 801d070:	42a3      	cmp	r3, r4
 801d072:	bfbf      	itttt	lt
 801d074:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801d076:	1ae3      	sublt	r3, r4, r3
 801d078:	18d2      	addlt	r2, r2, r3
 801d07a:	4613      	movlt	r3, r2
 801d07c:	bfb7      	itett	lt
 801d07e:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d080:	1b1c      	subge	r4, r3, r4
 801d082:	4623      	movlt	r3, r4
 801d084:	2400      	movlt	r4, #0
 801d086:	f1b9 0f00 	cmp.w	r9, #0
 801d08a:	bfb5      	itete	lt
 801d08c:	9a05      	ldrlt	r2, [sp, #20]
 801d08e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801d092:	eba2 0809 	sublt.w	r8, r2, r9
 801d096:	464a      	movge	r2, r9
 801d098:	bfb8      	it	lt
 801d09a:	2200      	movlt	r2, #0
 801d09c:	e73b      	b.n	801cf16 <_dtoa_r+0x666>
 801d09e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d0a2:	9f08      	ldr	r7, [sp, #32]
 801d0a4:	461c      	mov	r4, r3
 801d0a6:	e743      	b.n	801cf30 <_dtoa_r+0x680>
 801d0a8:	461a      	mov	r2, r3
 801d0aa:	e76f      	b.n	801cf8c <_dtoa_r+0x6dc>
 801d0ac:	9b07      	ldr	r3, [sp, #28]
 801d0ae:	2b01      	cmp	r3, #1
 801d0b0:	dc18      	bgt.n	801d0e4 <_dtoa_r+0x834>
 801d0b2:	9b02      	ldr	r3, [sp, #8]
 801d0b4:	b9b3      	cbnz	r3, 801d0e4 <_dtoa_r+0x834>
 801d0b6:	9b03      	ldr	r3, [sp, #12]
 801d0b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d0bc:	b9a2      	cbnz	r2, 801d0e8 <_dtoa_r+0x838>
 801d0be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d0c2:	0d12      	lsrs	r2, r2, #20
 801d0c4:	0512      	lsls	r2, r2, #20
 801d0c6:	b18a      	cbz	r2, 801d0ec <_dtoa_r+0x83c>
 801d0c8:	9b05      	ldr	r3, [sp, #20]
 801d0ca:	3301      	adds	r3, #1
 801d0cc:	9305      	str	r3, [sp, #20]
 801d0ce:	9b06      	ldr	r3, [sp, #24]
 801d0d0:	3301      	adds	r3, #1
 801d0d2:	9306      	str	r3, [sp, #24]
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	930a      	str	r3, [sp, #40]	; 0x28
 801d0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	f47f af6f 	bne.w	801cfbe <_dtoa_r+0x70e>
 801d0e0:	2001      	movs	r0, #1
 801d0e2:	e774      	b.n	801cfce <_dtoa_r+0x71e>
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	e7f6      	b.n	801d0d6 <_dtoa_r+0x826>
 801d0e8:	9b02      	ldr	r3, [sp, #8]
 801d0ea:	e7f4      	b.n	801d0d6 <_dtoa_r+0x826>
 801d0ec:	920a      	str	r2, [sp, #40]	; 0x28
 801d0ee:	e7f3      	b.n	801d0d8 <_dtoa_r+0x828>
 801d0f0:	d081      	beq.n	801cff6 <_dtoa_r+0x746>
 801d0f2:	4610      	mov	r0, r2
 801d0f4:	301c      	adds	r0, #28
 801d0f6:	e777      	b.n	801cfe8 <_dtoa_r+0x738>
 801d0f8:	f1b9 0f00 	cmp.w	r9, #0
 801d0fc:	dc37      	bgt.n	801d16e <_dtoa_r+0x8be>
 801d0fe:	9b07      	ldr	r3, [sp, #28]
 801d100:	2b02      	cmp	r3, #2
 801d102:	dd34      	ble.n	801d16e <_dtoa_r+0x8be>
 801d104:	46ca      	mov	sl, r9
 801d106:	f1ba 0f00 	cmp.w	sl, #0
 801d10a:	d10d      	bne.n	801d128 <_dtoa_r+0x878>
 801d10c:	4621      	mov	r1, r4
 801d10e:	4653      	mov	r3, sl
 801d110:	2205      	movs	r2, #5
 801d112:	4630      	mov	r0, r6
 801d114:	f000 fae0 	bl	801d6d8 <__multadd>
 801d118:	4601      	mov	r1, r0
 801d11a:	4604      	mov	r4, r0
 801d11c:	4628      	mov	r0, r5
 801d11e:	f000 fcf7 	bl	801db10 <__mcmp>
 801d122:	2800      	cmp	r0, #0
 801d124:	f73f adde 	bgt.w	801cce4 <_dtoa_r+0x434>
 801d128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d12a:	f8dd 8000 	ldr.w	r8, [sp]
 801d12e:	ea6f 0b03 	mvn.w	fp, r3
 801d132:	f04f 0900 	mov.w	r9, #0
 801d136:	4621      	mov	r1, r4
 801d138:	4630      	mov	r0, r6
 801d13a:	f000 faab 	bl	801d694 <_Bfree>
 801d13e:	2f00      	cmp	r7, #0
 801d140:	f43f aea7 	beq.w	801ce92 <_dtoa_r+0x5e2>
 801d144:	f1b9 0f00 	cmp.w	r9, #0
 801d148:	d005      	beq.n	801d156 <_dtoa_r+0x8a6>
 801d14a:	45b9      	cmp	r9, r7
 801d14c:	d003      	beq.n	801d156 <_dtoa_r+0x8a6>
 801d14e:	4649      	mov	r1, r9
 801d150:	4630      	mov	r0, r6
 801d152:	f000 fa9f 	bl	801d694 <_Bfree>
 801d156:	4639      	mov	r1, r7
 801d158:	4630      	mov	r0, r6
 801d15a:	f000 fa9b 	bl	801d694 <_Bfree>
 801d15e:	e698      	b.n	801ce92 <_dtoa_r+0x5e2>
 801d160:	2400      	movs	r4, #0
 801d162:	4627      	mov	r7, r4
 801d164:	e7e0      	b.n	801d128 <_dtoa_r+0x878>
 801d166:	46bb      	mov	fp, r7
 801d168:	4604      	mov	r4, r0
 801d16a:	4607      	mov	r7, r0
 801d16c:	e5ba      	b.n	801cce4 <_dtoa_r+0x434>
 801d16e:	9b08      	ldr	r3, [sp, #32]
 801d170:	46ca      	mov	sl, r9
 801d172:	2b00      	cmp	r3, #0
 801d174:	f000 8100 	beq.w	801d378 <_dtoa_r+0xac8>
 801d178:	f1b8 0f00 	cmp.w	r8, #0
 801d17c:	dd05      	ble.n	801d18a <_dtoa_r+0x8da>
 801d17e:	4639      	mov	r1, r7
 801d180:	4642      	mov	r2, r8
 801d182:	4630      	mov	r0, r6
 801d184:	f000 fc58 	bl	801da38 <__lshift>
 801d188:	4607      	mov	r7, r0
 801d18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d05d      	beq.n	801d24c <_dtoa_r+0x99c>
 801d190:	6879      	ldr	r1, [r7, #4]
 801d192:	4630      	mov	r0, r6
 801d194:	f000 fa3e 	bl	801d614 <_Balloc>
 801d198:	4680      	mov	r8, r0
 801d19a:	b928      	cbnz	r0, 801d1a8 <_dtoa_r+0x8f8>
 801d19c:	4b82      	ldr	r3, [pc, #520]	; (801d3a8 <_dtoa_r+0xaf8>)
 801d19e:	4602      	mov	r2, r0
 801d1a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d1a4:	f7ff bb9a 	b.w	801c8dc <_dtoa_r+0x2c>
 801d1a8:	693a      	ldr	r2, [r7, #16]
 801d1aa:	3202      	adds	r2, #2
 801d1ac:	0092      	lsls	r2, r2, #2
 801d1ae:	f107 010c 	add.w	r1, r7, #12
 801d1b2:	300c      	adds	r0, #12
 801d1b4:	f7fe fcac 	bl	801bb10 <memcpy>
 801d1b8:	2201      	movs	r2, #1
 801d1ba:	4641      	mov	r1, r8
 801d1bc:	4630      	mov	r0, r6
 801d1be:	f000 fc3b 	bl	801da38 <__lshift>
 801d1c2:	9b00      	ldr	r3, [sp, #0]
 801d1c4:	3301      	adds	r3, #1
 801d1c6:	9305      	str	r3, [sp, #20]
 801d1c8:	9b00      	ldr	r3, [sp, #0]
 801d1ca:	4453      	add	r3, sl
 801d1cc:	9309      	str	r3, [sp, #36]	; 0x24
 801d1ce:	9b02      	ldr	r3, [sp, #8]
 801d1d0:	f003 0301 	and.w	r3, r3, #1
 801d1d4:	46b9      	mov	r9, r7
 801d1d6:	9308      	str	r3, [sp, #32]
 801d1d8:	4607      	mov	r7, r0
 801d1da:	9b05      	ldr	r3, [sp, #20]
 801d1dc:	4621      	mov	r1, r4
 801d1de:	3b01      	subs	r3, #1
 801d1e0:	4628      	mov	r0, r5
 801d1e2:	9302      	str	r3, [sp, #8]
 801d1e4:	f7ff fad6 	bl	801c794 <quorem>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	3330      	adds	r3, #48	; 0x30
 801d1ec:	9006      	str	r0, [sp, #24]
 801d1ee:	4649      	mov	r1, r9
 801d1f0:	4628      	mov	r0, r5
 801d1f2:	930a      	str	r3, [sp, #40]	; 0x28
 801d1f4:	f000 fc8c 	bl	801db10 <__mcmp>
 801d1f8:	463a      	mov	r2, r7
 801d1fa:	4682      	mov	sl, r0
 801d1fc:	4621      	mov	r1, r4
 801d1fe:	4630      	mov	r0, r6
 801d200:	f000 fca2 	bl	801db48 <__mdiff>
 801d204:	68c2      	ldr	r2, [r0, #12]
 801d206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d208:	4680      	mov	r8, r0
 801d20a:	bb0a      	cbnz	r2, 801d250 <_dtoa_r+0x9a0>
 801d20c:	4601      	mov	r1, r0
 801d20e:	4628      	mov	r0, r5
 801d210:	f000 fc7e 	bl	801db10 <__mcmp>
 801d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d216:	4602      	mov	r2, r0
 801d218:	4641      	mov	r1, r8
 801d21a:	4630      	mov	r0, r6
 801d21c:	920e      	str	r2, [sp, #56]	; 0x38
 801d21e:	930a      	str	r3, [sp, #40]	; 0x28
 801d220:	f000 fa38 	bl	801d694 <_Bfree>
 801d224:	9b07      	ldr	r3, [sp, #28]
 801d226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d228:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d22c:	ea43 0102 	orr.w	r1, r3, r2
 801d230:	9b08      	ldr	r3, [sp, #32]
 801d232:	430b      	orrs	r3, r1
 801d234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d236:	d10d      	bne.n	801d254 <_dtoa_r+0x9a4>
 801d238:	2b39      	cmp	r3, #57	; 0x39
 801d23a:	d029      	beq.n	801d290 <_dtoa_r+0x9e0>
 801d23c:	f1ba 0f00 	cmp.w	sl, #0
 801d240:	dd01      	ble.n	801d246 <_dtoa_r+0x996>
 801d242:	9b06      	ldr	r3, [sp, #24]
 801d244:	3331      	adds	r3, #49	; 0x31
 801d246:	9a02      	ldr	r2, [sp, #8]
 801d248:	7013      	strb	r3, [r2, #0]
 801d24a:	e774      	b.n	801d136 <_dtoa_r+0x886>
 801d24c:	4638      	mov	r0, r7
 801d24e:	e7b8      	b.n	801d1c2 <_dtoa_r+0x912>
 801d250:	2201      	movs	r2, #1
 801d252:	e7e1      	b.n	801d218 <_dtoa_r+0x968>
 801d254:	f1ba 0f00 	cmp.w	sl, #0
 801d258:	db06      	blt.n	801d268 <_dtoa_r+0x9b8>
 801d25a:	9907      	ldr	r1, [sp, #28]
 801d25c:	ea41 0a0a 	orr.w	sl, r1, sl
 801d260:	9908      	ldr	r1, [sp, #32]
 801d262:	ea5a 0101 	orrs.w	r1, sl, r1
 801d266:	d120      	bne.n	801d2aa <_dtoa_r+0x9fa>
 801d268:	2a00      	cmp	r2, #0
 801d26a:	ddec      	ble.n	801d246 <_dtoa_r+0x996>
 801d26c:	4629      	mov	r1, r5
 801d26e:	2201      	movs	r2, #1
 801d270:	4630      	mov	r0, r6
 801d272:	9305      	str	r3, [sp, #20]
 801d274:	f000 fbe0 	bl	801da38 <__lshift>
 801d278:	4621      	mov	r1, r4
 801d27a:	4605      	mov	r5, r0
 801d27c:	f000 fc48 	bl	801db10 <__mcmp>
 801d280:	2800      	cmp	r0, #0
 801d282:	9b05      	ldr	r3, [sp, #20]
 801d284:	dc02      	bgt.n	801d28c <_dtoa_r+0x9dc>
 801d286:	d1de      	bne.n	801d246 <_dtoa_r+0x996>
 801d288:	07da      	lsls	r2, r3, #31
 801d28a:	d5dc      	bpl.n	801d246 <_dtoa_r+0x996>
 801d28c:	2b39      	cmp	r3, #57	; 0x39
 801d28e:	d1d8      	bne.n	801d242 <_dtoa_r+0x992>
 801d290:	9a02      	ldr	r2, [sp, #8]
 801d292:	2339      	movs	r3, #57	; 0x39
 801d294:	7013      	strb	r3, [r2, #0]
 801d296:	4643      	mov	r3, r8
 801d298:	4698      	mov	r8, r3
 801d29a:	3b01      	subs	r3, #1
 801d29c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d2a0:	2a39      	cmp	r2, #57	; 0x39
 801d2a2:	d051      	beq.n	801d348 <_dtoa_r+0xa98>
 801d2a4:	3201      	adds	r2, #1
 801d2a6:	701a      	strb	r2, [r3, #0]
 801d2a8:	e745      	b.n	801d136 <_dtoa_r+0x886>
 801d2aa:	2a00      	cmp	r2, #0
 801d2ac:	dd03      	ble.n	801d2b6 <_dtoa_r+0xa06>
 801d2ae:	2b39      	cmp	r3, #57	; 0x39
 801d2b0:	d0ee      	beq.n	801d290 <_dtoa_r+0x9e0>
 801d2b2:	3301      	adds	r3, #1
 801d2b4:	e7c7      	b.n	801d246 <_dtoa_r+0x996>
 801d2b6:	9a05      	ldr	r2, [sp, #20]
 801d2b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d2ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d2be:	428a      	cmp	r2, r1
 801d2c0:	d02b      	beq.n	801d31a <_dtoa_r+0xa6a>
 801d2c2:	4629      	mov	r1, r5
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	220a      	movs	r2, #10
 801d2c8:	4630      	mov	r0, r6
 801d2ca:	f000 fa05 	bl	801d6d8 <__multadd>
 801d2ce:	45b9      	cmp	r9, r7
 801d2d0:	4605      	mov	r5, r0
 801d2d2:	f04f 0300 	mov.w	r3, #0
 801d2d6:	f04f 020a 	mov.w	r2, #10
 801d2da:	4649      	mov	r1, r9
 801d2dc:	4630      	mov	r0, r6
 801d2de:	d107      	bne.n	801d2f0 <_dtoa_r+0xa40>
 801d2e0:	f000 f9fa 	bl	801d6d8 <__multadd>
 801d2e4:	4681      	mov	r9, r0
 801d2e6:	4607      	mov	r7, r0
 801d2e8:	9b05      	ldr	r3, [sp, #20]
 801d2ea:	3301      	adds	r3, #1
 801d2ec:	9305      	str	r3, [sp, #20]
 801d2ee:	e774      	b.n	801d1da <_dtoa_r+0x92a>
 801d2f0:	f000 f9f2 	bl	801d6d8 <__multadd>
 801d2f4:	4639      	mov	r1, r7
 801d2f6:	4681      	mov	r9, r0
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	220a      	movs	r2, #10
 801d2fc:	4630      	mov	r0, r6
 801d2fe:	f000 f9eb 	bl	801d6d8 <__multadd>
 801d302:	4607      	mov	r7, r0
 801d304:	e7f0      	b.n	801d2e8 <_dtoa_r+0xa38>
 801d306:	f1ba 0f00 	cmp.w	sl, #0
 801d30a:	9a00      	ldr	r2, [sp, #0]
 801d30c:	bfcc      	ite	gt
 801d30e:	46d0      	movgt	r8, sl
 801d310:	f04f 0801 	movle.w	r8, #1
 801d314:	4490      	add	r8, r2
 801d316:	f04f 0900 	mov.w	r9, #0
 801d31a:	4629      	mov	r1, r5
 801d31c:	2201      	movs	r2, #1
 801d31e:	4630      	mov	r0, r6
 801d320:	9302      	str	r3, [sp, #8]
 801d322:	f000 fb89 	bl	801da38 <__lshift>
 801d326:	4621      	mov	r1, r4
 801d328:	4605      	mov	r5, r0
 801d32a:	f000 fbf1 	bl	801db10 <__mcmp>
 801d32e:	2800      	cmp	r0, #0
 801d330:	dcb1      	bgt.n	801d296 <_dtoa_r+0x9e6>
 801d332:	d102      	bne.n	801d33a <_dtoa_r+0xa8a>
 801d334:	9b02      	ldr	r3, [sp, #8]
 801d336:	07db      	lsls	r3, r3, #31
 801d338:	d4ad      	bmi.n	801d296 <_dtoa_r+0x9e6>
 801d33a:	4643      	mov	r3, r8
 801d33c:	4698      	mov	r8, r3
 801d33e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d342:	2a30      	cmp	r2, #48	; 0x30
 801d344:	d0fa      	beq.n	801d33c <_dtoa_r+0xa8c>
 801d346:	e6f6      	b.n	801d136 <_dtoa_r+0x886>
 801d348:	9a00      	ldr	r2, [sp, #0]
 801d34a:	429a      	cmp	r2, r3
 801d34c:	d1a4      	bne.n	801d298 <_dtoa_r+0x9e8>
 801d34e:	f10b 0b01 	add.w	fp, fp, #1
 801d352:	2331      	movs	r3, #49	; 0x31
 801d354:	e778      	b.n	801d248 <_dtoa_r+0x998>
 801d356:	4b15      	ldr	r3, [pc, #84]	; (801d3ac <_dtoa_r+0xafc>)
 801d358:	f7ff bb12 	b.w	801c980 <_dtoa_r+0xd0>
 801d35c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d35e:	2b00      	cmp	r3, #0
 801d360:	f47f aaee 	bne.w	801c940 <_dtoa_r+0x90>
 801d364:	4b12      	ldr	r3, [pc, #72]	; (801d3b0 <_dtoa_r+0xb00>)
 801d366:	f7ff bb0b 	b.w	801c980 <_dtoa_r+0xd0>
 801d36a:	f1ba 0f00 	cmp.w	sl, #0
 801d36e:	dc03      	bgt.n	801d378 <_dtoa_r+0xac8>
 801d370:	9b07      	ldr	r3, [sp, #28]
 801d372:	2b02      	cmp	r3, #2
 801d374:	f73f aec7 	bgt.w	801d106 <_dtoa_r+0x856>
 801d378:	f8dd 8000 	ldr.w	r8, [sp]
 801d37c:	4621      	mov	r1, r4
 801d37e:	4628      	mov	r0, r5
 801d380:	f7ff fa08 	bl	801c794 <quorem>
 801d384:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d388:	f808 3b01 	strb.w	r3, [r8], #1
 801d38c:	9a00      	ldr	r2, [sp, #0]
 801d38e:	eba8 0202 	sub.w	r2, r8, r2
 801d392:	4592      	cmp	sl, r2
 801d394:	ddb7      	ble.n	801d306 <_dtoa_r+0xa56>
 801d396:	4629      	mov	r1, r5
 801d398:	2300      	movs	r3, #0
 801d39a:	220a      	movs	r2, #10
 801d39c:	4630      	mov	r0, r6
 801d39e:	f000 f99b 	bl	801d6d8 <__multadd>
 801d3a2:	4605      	mov	r5, r0
 801d3a4:	e7ea      	b.n	801d37c <_dtoa_r+0xacc>
 801d3a6:	bf00      	nop
 801d3a8:	08046750 	.word	0x08046750
 801d3ac:	08046939 	.word	0x08046939
 801d3b0:	080466e4 	.word	0x080466e4

0801d3b4 <__errno>:
 801d3b4:	4b01      	ldr	r3, [pc, #4]	; (801d3bc <__errno+0x8>)
 801d3b6:	6818      	ldr	r0, [r3, #0]
 801d3b8:	4770      	bx	lr
 801d3ba:	bf00      	nop
 801d3bc:	24000038 	.word	0x24000038

0801d3c0 <std>:
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	b510      	push	{r4, lr}
 801d3c4:	4604      	mov	r4, r0
 801d3c6:	e9c0 3300 	strd	r3, r3, [r0]
 801d3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d3ce:	6083      	str	r3, [r0, #8]
 801d3d0:	8181      	strh	r1, [r0, #12]
 801d3d2:	6643      	str	r3, [r0, #100]	; 0x64
 801d3d4:	81c2      	strh	r2, [r0, #14]
 801d3d6:	6183      	str	r3, [r0, #24]
 801d3d8:	4619      	mov	r1, r3
 801d3da:	2208      	movs	r2, #8
 801d3dc:	305c      	adds	r0, #92	; 0x5c
 801d3de:	f7fe fbbf 	bl	801bb60 <memset>
 801d3e2:	4b05      	ldr	r3, [pc, #20]	; (801d3f8 <std+0x38>)
 801d3e4:	6263      	str	r3, [r4, #36]	; 0x24
 801d3e6:	4b05      	ldr	r3, [pc, #20]	; (801d3fc <std+0x3c>)
 801d3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801d3ea:	4b05      	ldr	r3, [pc, #20]	; (801d400 <std+0x40>)
 801d3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d3ee:	4b05      	ldr	r3, [pc, #20]	; (801d404 <std+0x44>)
 801d3f0:	6224      	str	r4, [r4, #32]
 801d3f2:	6323      	str	r3, [r4, #48]	; 0x30
 801d3f4:	bd10      	pop	{r4, pc}
 801d3f6:	bf00      	nop
 801d3f8:	0801c53d 	.word	0x0801c53d
 801d3fc:	0801c563 	.word	0x0801c563
 801d400:	0801c59b 	.word	0x0801c59b
 801d404:	0801c5bf 	.word	0x0801c5bf

0801d408 <_cleanup_r>:
 801d408:	4901      	ldr	r1, [pc, #4]	; (801d410 <_cleanup_r+0x8>)
 801d40a:	f000 b8c1 	b.w	801d590 <_fwalk_reent>
 801d40e:	bf00      	nop
 801d410:	0801eef1 	.word	0x0801eef1

0801d414 <__sfmoreglue>:
 801d414:	b570      	push	{r4, r5, r6, lr}
 801d416:	1e4a      	subs	r2, r1, #1
 801d418:	2568      	movs	r5, #104	; 0x68
 801d41a:	4355      	muls	r5, r2
 801d41c:	460e      	mov	r6, r1
 801d41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d422:	f000 fcd5 	bl	801ddd0 <_malloc_r>
 801d426:	4604      	mov	r4, r0
 801d428:	b140      	cbz	r0, 801d43c <__sfmoreglue+0x28>
 801d42a:	2100      	movs	r1, #0
 801d42c:	e9c0 1600 	strd	r1, r6, [r0]
 801d430:	300c      	adds	r0, #12
 801d432:	60a0      	str	r0, [r4, #8]
 801d434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d438:	f7fe fb92 	bl	801bb60 <memset>
 801d43c:	4620      	mov	r0, r4
 801d43e:	bd70      	pop	{r4, r5, r6, pc}

0801d440 <__sfp_lock_acquire>:
 801d440:	4801      	ldr	r0, [pc, #4]	; (801d448 <__sfp_lock_acquire+0x8>)
 801d442:	f000 b8ca 	b.w	801d5da <__retarget_lock_acquire_recursive>
 801d446:	bf00      	nop
 801d448:	24007a00 	.word	0x24007a00

0801d44c <__sfp_lock_release>:
 801d44c:	4801      	ldr	r0, [pc, #4]	; (801d454 <__sfp_lock_release+0x8>)
 801d44e:	f000 b8c5 	b.w	801d5dc <__retarget_lock_release_recursive>
 801d452:	bf00      	nop
 801d454:	24007a00 	.word	0x24007a00

0801d458 <__sinit_lock_acquire>:
 801d458:	4801      	ldr	r0, [pc, #4]	; (801d460 <__sinit_lock_acquire+0x8>)
 801d45a:	f000 b8be 	b.w	801d5da <__retarget_lock_acquire_recursive>
 801d45e:	bf00      	nop
 801d460:	240079fb 	.word	0x240079fb

0801d464 <__sinit_lock_release>:
 801d464:	4801      	ldr	r0, [pc, #4]	; (801d46c <__sinit_lock_release+0x8>)
 801d466:	f000 b8b9 	b.w	801d5dc <__retarget_lock_release_recursive>
 801d46a:	bf00      	nop
 801d46c:	240079fb 	.word	0x240079fb

0801d470 <__sinit>:
 801d470:	b510      	push	{r4, lr}
 801d472:	4604      	mov	r4, r0
 801d474:	f7ff fff0 	bl	801d458 <__sinit_lock_acquire>
 801d478:	69a3      	ldr	r3, [r4, #24]
 801d47a:	b11b      	cbz	r3, 801d484 <__sinit+0x14>
 801d47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d480:	f7ff bff0 	b.w	801d464 <__sinit_lock_release>
 801d484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d488:	6523      	str	r3, [r4, #80]	; 0x50
 801d48a:	4b13      	ldr	r3, [pc, #76]	; (801d4d8 <__sinit+0x68>)
 801d48c:	4a13      	ldr	r2, [pc, #76]	; (801d4dc <__sinit+0x6c>)
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	62a2      	str	r2, [r4, #40]	; 0x28
 801d492:	42a3      	cmp	r3, r4
 801d494:	bf04      	itt	eq
 801d496:	2301      	moveq	r3, #1
 801d498:	61a3      	streq	r3, [r4, #24]
 801d49a:	4620      	mov	r0, r4
 801d49c:	f000 f820 	bl	801d4e0 <__sfp>
 801d4a0:	6060      	str	r0, [r4, #4]
 801d4a2:	4620      	mov	r0, r4
 801d4a4:	f000 f81c 	bl	801d4e0 <__sfp>
 801d4a8:	60a0      	str	r0, [r4, #8]
 801d4aa:	4620      	mov	r0, r4
 801d4ac:	f000 f818 	bl	801d4e0 <__sfp>
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	60e0      	str	r0, [r4, #12]
 801d4b4:	2104      	movs	r1, #4
 801d4b6:	6860      	ldr	r0, [r4, #4]
 801d4b8:	f7ff ff82 	bl	801d3c0 <std>
 801d4bc:	68a0      	ldr	r0, [r4, #8]
 801d4be:	2201      	movs	r2, #1
 801d4c0:	2109      	movs	r1, #9
 801d4c2:	f7ff ff7d 	bl	801d3c0 <std>
 801d4c6:	68e0      	ldr	r0, [r4, #12]
 801d4c8:	2202      	movs	r2, #2
 801d4ca:	2112      	movs	r1, #18
 801d4cc:	f7ff ff78 	bl	801d3c0 <std>
 801d4d0:	2301      	movs	r3, #1
 801d4d2:	61a3      	str	r3, [r4, #24]
 801d4d4:	e7d2      	b.n	801d47c <__sinit+0xc>
 801d4d6:	bf00      	nop
 801d4d8:	080465fc 	.word	0x080465fc
 801d4dc:	0801d409 	.word	0x0801d409

0801d4e0 <__sfp>:
 801d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4e2:	4607      	mov	r7, r0
 801d4e4:	f7ff ffac 	bl	801d440 <__sfp_lock_acquire>
 801d4e8:	4b1e      	ldr	r3, [pc, #120]	; (801d564 <__sfp+0x84>)
 801d4ea:	681e      	ldr	r6, [r3, #0]
 801d4ec:	69b3      	ldr	r3, [r6, #24]
 801d4ee:	b913      	cbnz	r3, 801d4f6 <__sfp+0x16>
 801d4f0:	4630      	mov	r0, r6
 801d4f2:	f7ff ffbd 	bl	801d470 <__sinit>
 801d4f6:	3648      	adds	r6, #72	; 0x48
 801d4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d4fc:	3b01      	subs	r3, #1
 801d4fe:	d503      	bpl.n	801d508 <__sfp+0x28>
 801d500:	6833      	ldr	r3, [r6, #0]
 801d502:	b30b      	cbz	r3, 801d548 <__sfp+0x68>
 801d504:	6836      	ldr	r6, [r6, #0]
 801d506:	e7f7      	b.n	801d4f8 <__sfp+0x18>
 801d508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d50c:	b9d5      	cbnz	r5, 801d544 <__sfp+0x64>
 801d50e:	4b16      	ldr	r3, [pc, #88]	; (801d568 <__sfp+0x88>)
 801d510:	60e3      	str	r3, [r4, #12]
 801d512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d516:	6665      	str	r5, [r4, #100]	; 0x64
 801d518:	f000 f85e 	bl	801d5d8 <__retarget_lock_init_recursive>
 801d51c:	f7ff ff96 	bl	801d44c <__sfp_lock_release>
 801d520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d528:	6025      	str	r5, [r4, #0]
 801d52a:	61a5      	str	r5, [r4, #24]
 801d52c:	2208      	movs	r2, #8
 801d52e:	4629      	mov	r1, r5
 801d530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d534:	f7fe fb14 	bl	801bb60 <memset>
 801d538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d540:	4620      	mov	r0, r4
 801d542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d544:	3468      	adds	r4, #104	; 0x68
 801d546:	e7d9      	b.n	801d4fc <__sfp+0x1c>
 801d548:	2104      	movs	r1, #4
 801d54a:	4638      	mov	r0, r7
 801d54c:	f7ff ff62 	bl	801d414 <__sfmoreglue>
 801d550:	4604      	mov	r4, r0
 801d552:	6030      	str	r0, [r6, #0]
 801d554:	2800      	cmp	r0, #0
 801d556:	d1d5      	bne.n	801d504 <__sfp+0x24>
 801d558:	f7ff ff78 	bl	801d44c <__sfp_lock_release>
 801d55c:	230c      	movs	r3, #12
 801d55e:	603b      	str	r3, [r7, #0]
 801d560:	e7ee      	b.n	801d540 <__sfp+0x60>
 801d562:	bf00      	nop
 801d564:	080465fc 	.word	0x080465fc
 801d568:	ffff0001 	.word	0xffff0001

0801d56c <fiprintf>:
 801d56c:	b40e      	push	{r1, r2, r3}
 801d56e:	b503      	push	{r0, r1, lr}
 801d570:	4601      	mov	r1, r0
 801d572:	ab03      	add	r3, sp, #12
 801d574:	4805      	ldr	r0, [pc, #20]	; (801d58c <fiprintf+0x20>)
 801d576:	f853 2b04 	ldr.w	r2, [r3], #4
 801d57a:	6800      	ldr	r0, [r0, #0]
 801d57c:	9301      	str	r3, [sp, #4]
 801d57e:	f000 ffd9 	bl	801e534 <_vfiprintf_r>
 801d582:	b002      	add	sp, #8
 801d584:	f85d eb04 	ldr.w	lr, [sp], #4
 801d588:	b003      	add	sp, #12
 801d58a:	4770      	bx	lr
 801d58c:	24000038 	.word	0x24000038

0801d590 <_fwalk_reent>:
 801d590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d594:	4606      	mov	r6, r0
 801d596:	4688      	mov	r8, r1
 801d598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d59c:	2700      	movs	r7, #0
 801d59e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d5a2:	f1b9 0901 	subs.w	r9, r9, #1
 801d5a6:	d505      	bpl.n	801d5b4 <_fwalk_reent+0x24>
 801d5a8:	6824      	ldr	r4, [r4, #0]
 801d5aa:	2c00      	cmp	r4, #0
 801d5ac:	d1f7      	bne.n	801d59e <_fwalk_reent+0xe>
 801d5ae:	4638      	mov	r0, r7
 801d5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5b4:	89ab      	ldrh	r3, [r5, #12]
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	d907      	bls.n	801d5ca <_fwalk_reent+0x3a>
 801d5ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d5be:	3301      	adds	r3, #1
 801d5c0:	d003      	beq.n	801d5ca <_fwalk_reent+0x3a>
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	47c0      	blx	r8
 801d5c8:	4307      	orrs	r7, r0
 801d5ca:	3568      	adds	r5, #104	; 0x68
 801d5cc:	e7e9      	b.n	801d5a2 <_fwalk_reent+0x12>
	...

0801d5d0 <_localeconv_r>:
 801d5d0:	4800      	ldr	r0, [pc, #0]	; (801d5d4 <_localeconv_r+0x4>)
 801d5d2:	4770      	bx	lr
 801d5d4:	2400018c 	.word	0x2400018c

0801d5d8 <__retarget_lock_init_recursive>:
 801d5d8:	4770      	bx	lr

0801d5da <__retarget_lock_acquire_recursive>:
 801d5da:	4770      	bx	lr

0801d5dc <__retarget_lock_release_recursive>:
 801d5dc:	4770      	bx	lr
	...

0801d5e0 <_lseek_r>:
 801d5e0:	b538      	push	{r3, r4, r5, lr}
 801d5e2:	4d07      	ldr	r5, [pc, #28]	; (801d600 <_lseek_r+0x20>)
 801d5e4:	4604      	mov	r4, r0
 801d5e6:	4608      	mov	r0, r1
 801d5e8:	4611      	mov	r1, r2
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	602a      	str	r2, [r5, #0]
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	f7e4 fc6c 	bl	8001ecc <_lseek>
 801d5f4:	1c43      	adds	r3, r0, #1
 801d5f6:	d102      	bne.n	801d5fe <_lseek_r+0x1e>
 801d5f8:	682b      	ldr	r3, [r5, #0]
 801d5fa:	b103      	cbz	r3, 801d5fe <_lseek_r+0x1e>
 801d5fc:	6023      	str	r3, [r4, #0]
 801d5fe:	bd38      	pop	{r3, r4, r5, pc}
 801d600:	240079cc 	.word	0x240079cc

0801d604 <malloc>:
 801d604:	4b02      	ldr	r3, [pc, #8]	; (801d610 <malloc+0xc>)
 801d606:	4601      	mov	r1, r0
 801d608:	6818      	ldr	r0, [r3, #0]
 801d60a:	f000 bbe1 	b.w	801ddd0 <_malloc_r>
 801d60e:	bf00      	nop
 801d610:	24000038 	.word	0x24000038

0801d614 <_Balloc>:
 801d614:	b570      	push	{r4, r5, r6, lr}
 801d616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d618:	4604      	mov	r4, r0
 801d61a:	460d      	mov	r5, r1
 801d61c:	b976      	cbnz	r6, 801d63c <_Balloc+0x28>
 801d61e:	2010      	movs	r0, #16
 801d620:	f7ff fff0 	bl	801d604 <malloc>
 801d624:	4602      	mov	r2, r0
 801d626:	6260      	str	r0, [r4, #36]	; 0x24
 801d628:	b920      	cbnz	r0, 801d634 <_Balloc+0x20>
 801d62a:	4b18      	ldr	r3, [pc, #96]	; (801d68c <_Balloc+0x78>)
 801d62c:	4818      	ldr	r0, [pc, #96]	; (801d690 <_Balloc+0x7c>)
 801d62e:	2166      	movs	r1, #102	; 0x66
 801d630:	f7ff f882 	bl	801c738 <__assert_func>
 801d634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d638:	6006      	str	r6, [r0, #0]
 801d63a:	60c6      	str	r6, [r0, #12]
 801d63c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d63e:	68f3      	ldr	r3, [r6, #12]
 801d640:	b183      	cbz	r3, 801d664 <_Balloc+0x50>
 801d642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d644:	68db      	ldr	r3, [r3, #12]
 801d646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d64a:	b9b8      	cbnz	r0, 801d67c <_Balloc+0x68>
 801d64c:	2101      	movs	r1, #1
 801d64e:	fa01 f605 	lsl.w	r6, r1, r5
 801d652:	1d72      	adds	r2, r6, #5
 801d654:	0092      	lsls	r2, r2, #2
 801d656:	4620      	mov	r0, r4
 801d658:	f000 fb5a 	bl	801dd10 <_calloc_r>
 801d65c:	b160      	cbz	r0, 801d678 <_Balloc+0x64>
 801d65e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d662:	e00e      	b.n	801d682 <_Balloc+0x6e>
 801d664:	2221      	movs	r2, #33	; 0x21
 801d666:	2104      	movs	r1, #4
 801d668:	4620      	mov	r0, r4
 801d66a:	f000 fb51 	bl	801dd10 <_calloc_r>
 801d66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d670:	60f0      	str	r0, [r6, #12]
 801d672:	68db      	ldr	r3, [r3, #12]
 801d674:	2b00      	cmp	r3, #0
 801d676:	d1e4      	bne.n	801d642 <_Balloc+0x2e>
 801d678:	2000      	movs	r0, #0
 801d67a:	bd70      	pop	{r4, r5, r6, pc}
 801d67c:	6802      	ldr	r2, [r0, #0]
 801d67e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d682:	2300      	movs	r3, #0
 801d684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d688:	e7f7      	b.n	801d67a <_Balloc+0x66>
 801d68a:	bf00      	nop
 801d68c:	08046632 	.word	0x08046632
 801d690:	080467c4 	.word	0x080467c4

0801d694 <_Bfree>:
 801d694:	b570      	push	{r4, r5, r6, lr}
 801d696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d698:	4605      	mov	r5, r0
 801d69a:	460c      	mov	r4, r1
 801d69c:	b976      	cbnz	r6, 801d6bc <_Bfree+0x28>
 801d69e:	2010      	movs	r0, #16
 801d6a0:	f7ff ffb0 	bl	801d604 <malloc>
 801d6a4:	4602      	mov	r2, r0
 801d6a6:	6268      	str	r0, [r5, #36]	; 0x24
 801d6a8:	b920      	cbnz	r0, 801d6b4 <_Bfree+0x20>
 801d6aa:	4b09      	ldr	r3, [pc, #36]	; (801d6d0 <_Bfree+0x3c>)
 801d6ac:	4809      	ldr	r0, [pc, #36]	; (801d6d4 <_Bfree+0x40>)
 801d6ae:	218a      	movs	r1, #138	; 0x8a
 801d6b0:	f7ff f842 	bl	801c738 <__assert_func>
 801d6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d6b8:	6006      	str	r6, [r0, #0]
 801d6ba:	60c6      	str	r6, [r0, #12]
 801d6bc:	b13c      	cbz	r4, 801d6ce <_Bfree+0x3a>
 801d6be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d6c0:	6862      	ldr	r2, [r4, #4]
 801d6c2:	68db      	ldr	r3, [r3, #12]
 801d6c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d6c8:	6021      	str	r1, [r4, #0]
 801d6ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}
 801d6d0:	08046632 	.word	0x08046632
 801d6d4:	080467c4 	.word	0x080467c4

0801d6d8 <__multadd>:
 801d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6dc:	690e      	ldr	r6, [r1, #16]
 801d6de:	4607      	mov	r7, r0
 801d6e0:	4698      	mov	r8, r3
 801d6e2:	460c      	mov	r4, r1
 801d6e4:	f101 0014 	add.w	r0, r1, #20
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	6805      	ldr	r5, [r0, #0]
 801d6ec:	b2a9      	uxth	r1, r5
 801d6ee:	fb02 8101 	mla	r1, r2, r1, r8
 801d6f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d6f6:	0c2d      	lsrs	r5, r5, #16
 801d6f8:	fb02 c505 	mla	r5, r2, r5, ip
 801d6fc:	b289      	uxth	r1, r1
 801d6fe:	3301      	adds	r3, #1
 801d700:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d704:	429e      	cmp	r6, r3
 801d706:	f840 1b04 	str.w	r1, [r0], #4
 801d70a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d70e:	dcec      	bgt.n	801d6ea <__multadd+0x12>
 801d710:	f1b8 0f00 	cmp.w	r8, #0
 801d714:	d022      	beq.n	801d75c <__multadd+0x84>
 801d716:	68a3      	ldr	r3, [r4, #8]
 801d718:	42b3      	cmp	r3, r6
 801d71a:	dc19      	bgt.n	801d750 <__multadd+0x78>
 801d71c:	6861      	ldr	r1, [r4, #4]
 801d71e:	4638      	mov	r0, r7
 801d720:	3101      	adds	r1, #1
 801d722:	f7ff ff77 	bl	801d614 <_Balloc>
 801d726:	4605      	mov	r5, r0
 801d728:	b928      	cbnz	r0, 801d736 <__multadd+0x5e>
 801d72a:	4602      	mov	r2, r0
 801d72c:	4b0d      	ldr	r3, [pc, #52]	; (801d764 <__multadd+0x8c>)
 801d72e:	480e      	ldr	r0, [pc, #56]	; (801d768 <__multadd+0x90>)
 801d730:	21b5      	movs	r1, #181	; 0xb5
 801d732:	f7ff f801 	bl	801c738 <__assert_func>
 801d736:	6922      	ldr	r2, [r4, #16]
 801d738:	3202      	adds	r2, #2
 801d73a:	f104 010c 	add.w	r1, r4, #12
 801d73e:	0092      	lsls	r2, r2, #2
 801d740:	300c      	adds	r0, #12
 801d742:	f7fe f9e5 	bl	801bb10 <memcpy>
 801d746:	4621      	mov	r1, r4
 801d748:	4638      	mov	r0, r7
 801d74a:	f7ff ffa3 	bl	801d694 <_Bfree>
 801d74e:	462c      	mov	r4, r5
 801d750:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d754:	3601      	adds	r6, #1
 801d756:	f8c3 8014 	str.w	r8, [r3, #20]
 801d75a:	6126      	str	r6, [r4, #16]
 801d75c:	4620      	mov	r0, r4
 801d75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d762:	bf00      	nop
 801d764:	08046750 	.word	0x08046750
 801d768:	080467c4 	.word	0x080467c4

0801d76c <__hi0bits>:
 801d76c:	0c03      	lsrs	r3, r0, #16
 801d76e:	041b      	lsls	r3, r3, #16
 801d770:	b9d3      	cbnz	r3, 801d7a8 <__hi0bits+0x3c>
 801d772:	0400      	lsls	r0, r0, #16
 801d774:	2310      	movs	r3, #16
 801d776:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d77a:	bf04      	itt	eq
 801d77c:	0200      	lsleq	r0, r0, #8
 801d77e:	3308      	addeq	r3, #8
 801d780:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d784:	bf04      	itt	eq
 801d786:	0100      	lsleq	r0, r0, #4
 801d788:	3304      	addeq	r3, #4
 801d78a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d78e:	bf04      	itt	eq
 801d790:	0080      	lsleq	r0, r0, #2
 801d792:	3302      	addeq	r3, #2
 801d794:	2800      	cmp	r0, #0
 801d796:	db05      	blt.n	801d7a4 <__hi0bits+0x38>
 801d798:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d79c:	f103 0301 	add.w	r3, r3, #1
 801d7a0:	bf08      	it	eq
 801d7a2:	2320      	moveq	r3, #32
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	4770      	bx	lr
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	e7e4      	b.n	801d776 <__hi0bits+0xa>

0801d7ac <__lo0bits>:
 801d7ac:	6803      	ldr	r3, [r0, #0]
 801d7ae:	f013 0207 	ands.w	r2, r3, #7
 801d7b2:	4601      	mov	r1, r0
 801d7b4:	d00b      	beq.n	801d7ce <__lo0bits+0x22>
 801d7b6:	07da      	lsls	r2, r3, #31
 801d7b8:	d424      	bmi.n	801d804 <__lo0bits+0x58>
 801d7ba:	0798      	lsls	r0, r3, #30
 801d7bc:	bf49      	itett	mi
 801d7be:	085b      	lsrmi	r3, r3, #1
 801d7c0:	089b      	lsrpl	r3, r3, #2
 801d7c2:	2001      	movmi	r0, #1
 801d7c4:	600b      	strmi	r3, [r1, #0]
 801d7c6:	bf5c      	itt	pl
 801d7c8:	600b      	strpl	r3, [r1, #0]
 801d7ca:	2002      	movpl	r0, #2
 801d7cc:	4770      	bx	lr
 801d7ce:	b298      	uxth	r0, r3
 801d7d0:	b9b0      	cbnz	r0, 801d800 <__lo0bits+0x54>
 801d7d2:	0c1b      	lsrs	r3, r3, #16
 801d7d4:	2010      	movs	r0, #16
 801d7d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d7da:	bf04      	itt	eq
 801d7dc:	0a1b      	lsreq	r3, r3, #8
 801d7de:	3008      	addeq	r0, #8
 801d7e0:	071a      	lsls	r2, r3, #28
 801d7e2:	bf04      	itt	eq
 801d7e4:	091b      	lsreq	r3, r3, #4
 801d7e6:	3004      	addeq	r0, #4
 801d7e8:	079a      	lsls	r2, r3, #30
 801d7ea:	bf04      	itt	eq
 801d7ec:	089b      	lsreq	r3, r3, #2
 801d7ee:	3002      	addeq	r0, #2
 801d7f0:	07da      	lsls	r2, r3, #31
 801d7f2:	d403      	bmi.n	801d7fc <__lo0bits+0x50>
 801d7f4:	085b      	lsrs	r3, r3, #1
 801d7f6:	f100 0001 	add.w	r0, r0, #1
 801d7fa:	d005      	beq.n	801d808 <__lo0bits+0x5c>
 801d7fc:	600b      	str	r3, [r1, #0]
 801d7fe:	4770      	bx	lr
 801d800:	4610      	mov	r0, r2
 801d802:	e7e8      	b.n	801d7d6 <__lo0bits+0x2a>
 801d804:	2000      	movs	r0, #0
 801d806:	4770      	bx	lr
 801d808:	2020      	movs	r0, #32
 801d80a:	4770      	bx	lr

0801d80c <__i2b>:
 801d80c:	b510      	push	{r4, lr}
 801d80e:	460c      	mov	r4, r1
 801d810:	2101      	movs	r1, #1
 801d812:	f7ff feff 	bl	801d614 <_Balloc>
 801d816:	4602      	mov	r2, r0
 801d818:	b928      	cbnz	r0, 801d826 <__i2b+0x1a>
 801d81a:	4b05      	ldr	r3, [pc, #20]	; (801d830 <__i2b+0x24>)
 801d81c:	4805      	ldr	r0, [pc, #20]	; (801d834 <__i2b+0x28>)
 801d81e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d822:	f7fe ff89 	bl	801c738 <__assert_func>
 801d826:	2301      	movs	r3, #1
 801d828:	6144      	str	r4, [r0, #20]
 801d82a:	6103      	str	r3, [r0, #16]
 801d82c:	bd10      	pop	{r4, pc}
 801d82e:	bf00      	nop
 801d830:	08046750 	.word	0x08046750
 801d834:	080467c4 	.word	0x080467c4

0801d838 <__multiply>:
 801d838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d83c:	4614      	mov	r4, r2
 801d83e:	690a      	ldr	r2, [r1, #16]
 801d840:	6923      	ldr	r3, [r4, #16]
 801d842:	429a      	cmp	r2, r3
 801d844:	bfb8      	it	lt
 801d846:	460b      	movlt	r3, r1
 801d848:	460d      	mov	r5, r1
 801d84a:	bfbc      	itt	lt
 801d84c:	4625      	movlt	r5, r4
 801d84e:	461c      	movlt	r4, r3
 801d850:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d854:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d858:	68ab      	ldr	r3, [r5, #8]
 801d85a:	6869      	ldr	r1, [r5, #4]
 801d85c:	eb0a 0709 	add.w	r7, sl, r9
 801d860:	42bb      	cmp	r3, r7
 801d862:	b085      	sub	sp, #20
 801d864:	bfb8      	it	lt
 801d866:	3101      	addlt	r1, #1
 801d868:	f7ff fed4 	bl	801d614 <_Balloc>
 801d86c:	b930      	cbnz	r0, 801d87c <__multiply+0x44>
 801d86e:	4602      	mov	r2, r0
 801d870:	4b42      	ldr	r3, [pc, #264]	; (801d97c <__multiply+0x144>)
 801d872:	4843      	ldr	r0, [pc, #268]	; (801d980 <__multiply+0x148>)
 801d874:	f240 115d 	movw	r1, #349	; 0x15d
 801d878:	f7fe ff5e 	bl	801c738 <__assert_func>
 801d87c:	f100 0614 	add.w	r6, r0, #20
 801d880:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d884:	4633      	mov	r3, r6
 801d886:	2200      	movs	r2, #0
 801d888:	4543      	cmp	r3, r8
 801d88a:	d31e      	bcc.n	801d8ca <__multiply+0x92>
 801d88c:	f105 0c14 	add.w	ip, r5, #20
 801d890:	f104 0314 	add.w	r3, r4, #20
 801d894:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d898:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d89c:	9202      	str	r2, [sp, #8]
 801d89e:	ebac 0205 	sub.w	r2, ip, r5
 801d8a2:	3a15      	subs	r2, #21
 801d8a4:	f022 0203 	bic.w	r2, r2, #3
 801d8a8:	3204      	adds	r2, #4
 801d8aa:	f105 0115 	add.w	r1, r5, #21
 801d8ae:	458c      	cmp	ip, r1
 801d8b0:	bf38      	it	cc
 801d8b2:	2204      	movcc	r2, #4
 801d8b4:	9201      	str	r2, [sp, #4]
 801d8b6:	9a02      	ldr	r2, [sp, #8]
 801d8b8:	9303      	str	r3, [sp, #12]
 801d8ba:	429a      	cmp	r2, r3
 801d8bc:	d808      	bhi.n	801d8d0 <__multiply+0x98>
 801d8be:	2f00      	cmp	r7, #0
 801d8c0:	dc55      	bgt.n	801d96e <__multiply+0x136>
 801d8c2:	6107      	str	r7, [r0, #16]
 801d8c4:	b005      	add	sp, #20
 801d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8ca:	f843 2b04 	str.w	r2, [r3], #4
 801d8ce:	e7db      	b.n	801d888 <__multiply+0x50>
 801d8d0:	f8b3 a000 	ldrh.w	sl, [r3]
 801d8d4:	f1ba 0f00 	cmp.w	sl, #0
 801d8d8:	d020      	beq.n	801d91c <__multiply+0xe4>
 801d8da:	f105 0e14 	add.w	lr, r5, #20
 801d8de:	46b1      	mov	r9, r6
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d8e6:	f8d9 b000 	ldr.w	fp, [r9]
 801d8ea:	b2a1      	uxth	r1, r4
 801d8ec:	fa1f fb8b 	uxth.w	fp, fp
 801d8f0:	fb0a b101 	mla	r1, sl, r1, fp
 801d8f4:	4411      	add	r1, r2
 801d8f6:	f8d9 2000 	ldr.w	r2, [r9]
 801d8fa:	0c24      	lsrs	r4, r4, #16
 801d8fc:	0c12      	lsrs	r2, r2, #16
 801d8fe:	fb0a 2404 	mla	r4, sl, r4, r2
 801d902:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d906:	b289      	uxth	r1, r1
 801d908:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d90c:	45f4      	cmp	ip, lr
 801d90e:	f849 1b04 	str.w	r1, [r9], #4
 801d912:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d916:	d8e4      	bhi.n	801d8e2 <__multiply+0xaa>
 801d918:	9901      	ldr	r1, [sp, #4]
 801d91a:	5072      	str	r2, [r6, r1]
 801d91c:	9a03      	ldr	r2, [sp, #12]
 801d91e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d922:	3304      	adds	r3, #4
 801d924:	f1b9 0f00 	cmp.w	r9, #0
 801d928:	d01f      	beq.n	801d96a <__multiply+0x132>
 801d92a:	6834      	ldr	r4, [r6, #0]
 801d92c:	f105 0114 	add.w	r1, r5, #20
 801d930:	46b6      	mov	lr, r6
 801d932:	f04f 0a00 	mov.w	sl, #0
 801d936:	880a      	ldrh	r2, [r1, #0]
 801d938:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d93c:	fb09 b202 	mla	r2, r9, r2, fp
 801d940:	4492      	add	sl, r2
 801d942:	b2a4      	uxth	r4, r4
 801d944:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d948:	f84e 4b04 	str.w	r4, [lr], #4
 801d94c:	f851 4b04 	ldr.w	r4, [r1], #4
 801d950:	f8be 2000 	ldrh.w	r2, [lr]
 801d954:	0c24      	lsrs	r4, r4, #16
 801d956:	fb09 2404 	mla	r4, r9, r4, r2
 801d95a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d95e:	458c      	cmp	ip, r1
 801d960:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d964:	d8e7      	bhi.n	801d936 <__multiply+0xfe>
 801d966:	9a01      	ldr	r2, [sp, #4]
 801d968:	50b4      	str	r4, [r6, r2]
 801d96a:	3604      	adds	r6, #4
 801d96c:	e7a3      	b.n	801d8b6 <__multiply+0x7e>
 801d96e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d972:	2b00      	cmp	r3, #0
 801d974:	d1a5      	bne.n	801d8c2 <__multiply+0x8a>
 801d976:	3f01      	subs	r7, #1
 801d978:	e7a1      	b.n	801d8be <__multiply+0x86>
 801d97a:	bf00      	nop
 801d97c:	08046750 	.word	0x08046750
 801d980:	080467c4 	.word	0x080467c4

0801d984 <__pow5mult>:
 801d984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d988:	4615      	mov	r5, r2
 801d98a:	f012 0203 	ands.w	r2, r2, #3
 801d98e:	4606      	mov	r6, r0
 801d990:	460f      	mov	r7, r1
 801d992:	d007      	beq.n	801d9a4 <__pow5mult+0x20>
 801d994:	4c25      	ldr	r4, [pc, #148]	; (801da2c <__pow5mult+0xa8>)
 801d996:	3a01      	subs	r2, #1
 801d998:	2300      	movs	r3, #0
 801d99a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d99e:	f7ff fe9b 	bl	801d6d8 <__multadd>
 801d9a2:	4607      	mov	r7, r0
 801d9a4:	10ad      	asrs	r5, r5, #2
 801d9a6:	d03d      	beq.n	801da24 <__pow5mult+0xa0>
 801d9a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d9aa:	b97c      	cbnz	r4, 801d9cc <__pow5mult+0x48>
 801d9ac:	2010      	movs	r0, #16
 801d9ae:	f7ff fe29 	bl	801d604 <malloc>
 801d9b2:	4602      	mov	r2, r0
 801d9b4:	6270      	str	r0, [r6, #36]	; 0x24
 801d9b6:	b928      	cbnz	r0, 801d9c4 <__pow5mult+0x40>
 801d9b8:	4b1d      	ldr	r3, [pc, #116]	; (801da30 <__pow5mult+0xac>)
 801d9ba:	481e      	ldr	r0, [pc, #120]	; (801da34 <__pow5mult+0xb0>)
 801d9bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d9c0:	f7fe feba 	bl	801c738 <__assert_func>
 801d9c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d9c8:	6004      	str	r4, [r0, #0]
 801d9ca:	60c4      	str	r4, [r0, #12]
 801d9cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d9d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d9d4:	b94c      	cbnz	r4, 801d9ea <__pow5mult+0x66>
 801d9d6:	f240 2171 	movw	r1, #625	; 0x271
 801d9da:	4630      	mov	r0, r6
 801d9dc:	f7ff ff16 	bl	801d80c <__i2b>
 801d9e0:	2300      	movs	r3, #0
 801d9e2:	f8c8 0008 	str.w	r0, [r8, #8]
 801d9e6:	4604      	mov	r4, r0
 801d9e8:	6003      	str	r3, [r0, #0]
 801d9ea:	f04f 0900 	mov.w	r9, #0
 801d9ee:	07eb      	lsls	r3, r5, #31
 801d9f0:	d50a      	bpl.n	801da08 <__pow5mult+0x84>
 801d9f2:	4639      	mov	r1, r7
 801d9f4:	4622      	mov	r2, r4
 801d9f6:	4630      	mov	r0, r6
 801d9f8:	f7ff ff1e 	bl	801d838 <__multiply>
 801d9fc:	4639      	mov	r1, r7
 801d9fe:	4680      	mov	r8, r0
 801da00:	4630      	mov	r0, r6
 801da02:	f7ff fe47 	bl	801d694 <_Bfree>
 801da06:	4647      	mov	r7, r8
 801da08:	106d      	asrs	r5, r5, #1
 801da0a:	d00b      	beq.n	801da24 <__pow5mult+0xa0>
 801da0c:	6820      	ldr	r0, [r4, #0]
 801da0e:	b938      	cbnz	r0, 801da20 <__pow5mult+0x9c>
 801da10:	4622      	mov	r2, r4
 801da12:	4621      	mov	r1, r4
 801da14:	4630      	mov	r0, r6
 801da16:	f7ff ff0f 	bl	801d838 <__multiply>
 801da1a:	6020      	str	r0, [r4, #0]
 801da1c:	f8c0 9000 	str.w	r9, [r0]
 801da20:	4604      	mov	r4, r0
 801da22:	e7e4      	b.n	801d9ee <__pow5mult+0x6a>
 801da24:	4638      	mov	r0, r7
 801da26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da2a:	bf00      	nop
 801da2c:	08046918 	.word	0x08046918
 801da30:	08046632 	.word	0x08046632
 801da34:	080467c4 	.word	0x080467c4

0801da38 <__lshift>:
 801da38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da3c:	460c      	mov	r4, r1
 801da3e:	6849      	ldr	r1, [r1, #4]
 801da40:	6923      	ldr	r3, [r4, #16]
 801da42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801da46:	68a3      	ldr	r3, [r4, #8]
 801da48:	4607      	mov	r7, r0
 801da4a:	4691      	mov	r9, r2
 801da4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801da50:	f108 0601 	add.w	r6, r8, #1
 801da54:	42b3      	cmp	r3, r6
 801da56:	db0b      	blt.n	801da70 <__lshift+0x38>
 801da58:	4638      	mov	r0, r7
 801da5a:	f7ff fddb 	bl	801d614 <_Balloc>
 801da5e:	4605      	mov	r5, r0
 801da60:	b948      	cbnz	r0, 801da76 <__lshift+0x3e>
 801da62:	4602      	mov	r2, r0
 801da64:	4b28      	ldr	r3, [pc, #160]	; (801db08 <__lshift+0xd0>)
 801da66:	4829      	ldr	r0, [pc, #164]	; (801db0c <__lshift+0xd4>)
 801da68:	f240 11d9 	movw	r1, #473	; 0x1d9
 801da6c:	f7fe fe64 	bl	801c738 <__assert_func>
 801da70:	3101      	adds	r1, #1
 801da72:	005b      	lsls	r3, r3, #1
 801da74:	e7ee      	b.n	801da54 <__lshift+0x1c>
 801da76:	2300      	movs	r3, #0
 801da78:	f100 0114 	add.w	r1, r0, #20
 801da7c:	f100 0210 	add.w	r2, r0, #16
 801da80:	4618      	mov	r0, r3
 801da82:	4553      	cmp	r3, sl
 801da84:	db33      	blt.n	801daee <__lshift+0xb6>
 801da86:	6920      	ldr	r0, [r4, #16]
 801da88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801da8c:	f104 0314 	add.w	r3, r4, #20
 801da90:	f019 091f 	ands.w	r9, r9, #31
 801da94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801da98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801da9c:	d02b      	beq.n	801daf6 <__lshift+0xbe>
 801da9e:	f1c9 0e20 	rsb	lr, r9, #32
 801daa2:	468a      	mov	sl, r1
 801daa4:	2200      	movs	r2, #0
 801daa6:	6818      	ldr	r0, [r3, #0]
 801daa8:	fa00 f009 	lsl.w	r0, r0, r9
 801daac:	4302      	orrs	r2, r0
 801daae:	f84a 2b04 	str.w	r2, [sl], #4
 801dab2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dab6:	459c      	cmp	ip, r3
 801dab8:	fa22 f20e 	lsr.w	r2, r2, lr
 801dabc:	d8f3      	bhi.n	801daa6 <__lshift+0x6e>
 801dabe:	ebac 0304 	sub.w	r3, ip, r4
 801dac2:	3b15      	subs	r3, #21
 801dac4:	f023 0303 	bic.w	r3, r3, #3
 801dac8:	3304      	adds	r3, #4
 801daca:	f104 0015 	add.w	r0, r4, #21
 801dace:	4584      	cmp	ip, r0
 801dad0:	bf38      	it	cc
 801dad2:	2304      	movcc	r3, #4
 801dad4:	50ca      	str	r2, [r1, r3]
 801dad6:	b10a      	cbz	r2, 801dadc <__lshift+0xa4>
 801dad8:	f108 0602 	add.w	r6, r8, #2
 801dadc:	3e01      	subs	r6, #1
 801dade:	4638      	mov	r0, r7
 801dae0:	612e      	str	r6, [r5, #16]
 801dae2:	4621      	mov	r1, r4
 801dae4:	f7ff fdd6 	bl	801d694 <_Bfree>
 801dae8:	4628      	mov	r0, r5
 801daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801daee:	f842 0f04 	str.w	r0, [r2, #4]!
 801daf2:	3301      	adds	r3, #1
 801daf4:	e7c5      	b.n	801da82 <__lshift+0x4a>
 801daf6:	3904      	subs	r1, #4
 801daf8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dafc:	f841 2f04 	str.w	r2, [r1, #4]!
 801db00:	459c      	cmp	ip, r3
 801db02:	d8f9      	bhi.n	801daf8 <__lshift+0xc0>
 801db04:	e7ea      	b.n	801dadc <__lshift+0xa4>
 801db06:	bf00      	nop
 801db08:	08046750 	.word	0x08046750
 801db0c:	080467c4 	.word	0x080467c4

0801db10 <__mcmp>:
 801db10:	b530      	push	{r4, r5, lr}
 801db12:	6902      	ldr	r2, [r0, #16]
 801db14:	690c      	ldr	r4, [r1, #16]
 801db16:	1b12      	subs	r2, r2, r4
 801db18:	d10e      	bne.n	801db38 <__mcmp+0x28>
 801db1a:	f100 0314 	add.w	r3, r0, #20
 801db1e:	3114      	adds	r1, #20
 801db20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801db24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801db28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801db2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801db30:	42a5      	cmp	r5, r4
 801db32:	d003      	beq.n	801db3c <__mcmp+0x2c>
 801db34:	d305      	bcc.n	801db42 <__mcmp+0x32>
 801db36:	2201      	movs	r2, #1
 801db38:	4610      	mov	r0, r2
 801db3a:	bd30      	pop	{r4, r5, pc}
 801db3c:	4283      	cmp	r3, r0
 801db3e:	d3f3      	bcc.n	801db28 <__mcmp+0x18>
 801db40:	e7fa      	b.n	801db38 <__mcmp+0x28>
 801db42:	f04f 32ff 	mov.w	r2, #4294967295
 801db46:	e7f7      	b.n	801db38 <__mcmp+0x28>

0801db48 <__mdiff>:
 801db48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4c:	460c      	mov	r4, r1
 801db4e:	4606      	mov	r6, r0
 801db50:	4611      	mov	r1, r2
 801db52:	4620      	mov	r0, r4
 801db54:	4617      	mov	r7, r2
 801db56:	f7ff ffdb 	bl	801db10 <__mcmp>
 801db5a:	1e05      	subs	r5, r0, #0
 801db5c:	d110      	bne.n	801db80 <__mdiff+0x38>
 801db5e:	4629      	mov	r1, r5
 801db60:	4630      	mov	r0, r6
 801db62:	f7ff fd57 	bl	801d614 <_Balloc>
 801db66:	b930      	cbnz	r0, 801db76 <__mdiff+0x2e>
 801db68:	4b39      	ldr	r3, [pc, #228]	; (801dc50 <__mdiff+0x108>)
 801db6a:	4602      	mov	r2, r0
 801db6c:	f240 2132 	movw	r1, #562	; 0x232
 801db70:	4838      	ldr	r0, [pc, #224]	; (801dc54 <__mdiff+0x10c>)
 801db72:	f7fe fde1 	bl	801c738 <__assert_func>
 801db76:	2301      	movs	r3, #1
 801db78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801db7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db80:	bfa4      	itt	ge
 801db82:	463b      	movge	r3, r7
 801db84:	4627      	movge	r7, r4
 801db86:	4630      	mov	r0, r6
 801db88:	6879      	ldr	r1, [r7, #4]
 801db8a:	bfa6      	itte	ge
 801db8c:	461c      	movge	r4, r3
 801db8e:	2500      	movge	r5, #0
 801db90:	2501      	movlt	r5, #1
 801db92:	f7ff fd3f 	bl	801d614 <_Balloc>
 801db96:	b920      	cbnz	r0, 801dba2 <__mdiff+0x5a>
 801db98:	4b2d      	ldr	r3, [pc, #180]	; (801dc50 <__mdiff+0x108>)
 801db9a:	4602      	mov	r2, r0
 801db9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dba0:	e7e6      	b.n	801db70 <__mdiff+0x28>
 801dba2:	693e      	ldr	r6, [r7, #16]
 801dba4:	60c5      	str	r5, [r0, #12]
 801dba6:	6925      	ldr	r5, [r4, #16]
 801dba8:	f107 0114 	add.w	r1, r7, #20
 801dbac:	f104 0914 	add.w	r9, r4, #20
 801dbb0:	f100 0e14 	add.w	lr, r0, #20
 801dbb4:	f107 0210 	add.w	r2, r7, #16
 801dbb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801dbbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801dbc0:	46f2      	mov	sl, lr
 801dbc2:	2700      	movs	r7, #0
 801dbc4:	f859 3b04 	ldr.w	r3, [r9], #4
 801dbc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801dbcc:	fa1f f883 	uxth.w	r8, r3
 801dbd0:	fa17 f78b 	uxtah	r7, r7, fp
 801dbd4:	0c1b      	lsrs	r3, r3, #16
 801dbd6:	eba7 0808 	sub.w	r8, r7, r8
 801dbda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801dbde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801dbe2:	fa1f f888 	uxth.w	r8, r8
 801dbe6:	141f      	asrs	r7, r3, #16
 801dbe8:	454d      	cmp	r5, r9
 801dbea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801dbee:	f84a 3b04 	str.w	r3, [sl], #4
 801dbf2:	d8e7      	bhi.n	801dbc4 <__mdiff+0x7c>
 801dbf4:	1b2b      	subs	r3, r5, r4
 801dbf6:	3b15      	subs	r3, #21
 801dbf8:	f023 0303 	bic.w	r3, r3, #3
 801dbfc:	3304      	adds	r3, #4
 801dbfe:	3415      	adds	r4, #21
 801dc00:	42a5      	cmp	r5, r4
 801dc02:	bf38      	it	cc
 801dc04:	2304      	movcc	r3, #4
 801dc06:	4419      	add	r1, r3
 801dc08:	4473      	add	r3, lr
 801dc0a:	469e      	mov	lr, r3
 801dc0c:	460d      	mov	r5, r1
 801dc0e:	4565      	cmp	r5, ip
 801dc10:	d30e      	bcc.n	801dc30 <__mdiff+0xe8>
 801dc12:	f10c 0203 	add.w	r2, ip, #3
 801dc16:	1a52      	subs	r2, r2, r1
 801dc18:	f022 0203 	bic.w	r2, r2, #3
 801dc1c:	3903      	subs	r1, #3
 801dc1e:	458c      	cmp	ip, r1
 801dc20:	bf38      	it	cc
 801dc22:	2200      	movcc	r2, #0
 801dc24:	441a      	add	r2, r3
 801dc26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801dc2a:	b17b      	cbz	r3, 801dc4c <__mdiff+0x104>
 801dc2c:	6106      	str	r6, [r0, #16]
 801dc2e:	e7a5      	b.n	801db7c <__mdiff+0x34>
 801dc30:	f855 8b04 	ldr.w	r8, [r5], #4
 801dc34:	fa17 f488 	uxtah	r4, r7, r8
 801dc38:	1422      	asrs	r2, r4, #16
 801dc3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801dc3e:	b2a4      	uxth	r4, r4
 801dc40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801dc44:	f84e 4b04 	str.w	r4, [lr], #4
 801dc48:	1417      	asrs	r7, r2, #16
 801dc4a:	e7e0      	b.n	801dc0e <__mdiff+0xc6>
 801dc4c:	3e01      	subs	r6, #1
 801dc4e:	e7ea      	b.n	801dc26 <__mdiff+0xde>
 801dc50:	08046750 	.word	0x08046750
 801dc54:	080467c4 	.word	0x080467c4

0801dc58 <__d2b>:
 801dc58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dc5c:	4689      	mov	r9, r1
 801dc5e:	2101      	movs	r1, #1
 801dc60:	ec57 6b10 	vmov	r6, r7, d0
 801dc64:	4690      	mov	r8, r2
 801dc66:	f7ff fcd5 	bl	801d614 <_Balloc>
 801dc6a:	4604      	mov	r4, r0
 801dc6c:	b930      	cbnz	r0, 801dc7c <__d2b+0x24>
 801dc6e:	4602      	mov	r2, r0
 801dc70:	4b25      	ldr	r3, [pc, #148]	; (801dd08 <__d2b+0xb0>)
 801dc72:	4826      	ldr	r0, [pc, #152]	; (801dd0c <__d2b+0xb4>)
 801dc74:	f240 310a 	movw	r1, #778	; 0x30a
 801dc78:	f7fe fd5e 	bl	801c738 <__assert_func>
 801dc7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dc84:	bb35      	cbnz	r5, 801dcd4 <__d2b+0x7c>
 801dc86:	2e00      	cmp	r6, #0
 801dc88:	9301      	str	r3, [sp, #4]
 801dc8a:	d028      	beq.n	801dcde <__d2b+0x86>
 801dc8c:	4668      	mov	r0, sp
 801dc8e:	9600      	str	r6, [sp, #0]
 801dc90:	f7ff fd8c 	bl	801d7ac <__lo0bits>
 801dc94:	9900      	ldr	r1, [sp, #0]
 801dc96:	b300      	cbz	r0, 801dcda <__d2b+0x82>
 801dc98:	9a01      	ldr	r2, [sp, #4]
 801dc9a:	f1c0 0320 	rsb	r3, r0, #32
 801dc9e:	fa02 f303 	lsl.w	r3, r2, r3
 801dca2:	430b      	orrs	r3, r1
 801dca4:	40c2      	lsrs	r2, r0
 801dca6:	6163      	str	r3, [r4, #20]
 801dca8:	9201      	str	r2, [sp, #4]
 801dcaa:	9b01      	ldr	r3, [sp, #4]
 801dcac:	61a3      	str	r3, [r4, #24]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	bf14      	ite	ne
 801dcb2:	2202      	movne	r2, #2
 801dcb4:	2201      	moveq	r2, #1
 801dcb6:	6122      	str	r2, [r4, #16]
 801dcb8:	b1d5      	cbz	r5, 801dcf0 <__d2b+0x98>
 801dcba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801dcbe:	4405      	add	r5, r0
 801dcc0:	f8c9 5000 	str.w	r5, [r9]
 801dcc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dcc8:	f8c8 0000 	str.w	r0, [r8]
 801dccc:	4620      	mov	r0, r4
 801dcce:	b003      	add	sp, #12
 801dcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dcd8:	e7d5      	b.n	801dc86 <__d2b+0x2e>
 801dcda:	6161      	str	r1, [r4, #20]
 801dcdc:	e7e5      	b.n	801dcaa <__d2b+0x52>
 801dcde:	a801      	add	r0, sp, #4
 801dce0:	f7ff fd64 	bl	801d7ac <__lo0bits>
 801dce4:	9b01      	ldr	r3, [sp, #4]
 801dce6:	6163      	str	r3, [r4, #20]
 801dce8:	2201      	movs	r2, #1
 801dcea:	6122      	str	r2, [r4, #16]
 801dcec:	3020      	adds	r0, #32
 801dcee:	e7e3      	b.n	801dcb8 <__d2b+0x60>
 801dcf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dcf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dcf8:	f8c9 0000 	str.w	r0, [r9]
 801dcfc:	6918      	ldr	r0, [r3, #16]
 801dcfe:	f7ff fd35 	bl	801d76c <__hi0bits>
 801dd02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dd06:	e7df      	b.n	801dcc8 <__d2b+0x70>
 801dd08:	08046750 	.word	0x08046750
 801dd0c:	080467c4 	.word	0x080467c4

0801dd10 <_calloc_r>:
 801dd10:	b513      	push	{r0, r1, r4, lr}
 801dd12:	434a      	muls	r2, r1
 801dd14:	4611      	mov	r1, r2
 801dd16:	9201      	str	r2, [sp, #4]
 801dd18:	f000 f85a 	bl	801ddd0 <_malloc_r>
 801dd1c:	4604      	mov	r4, r0
 801dd1e:	b118      	cbz	r0, 801dd28 <_calloc_r+0x18>
 801dd20:	9a01      	ldr	r2, [sp, #4]
 801dd22:	2100      	movs	r1, #0
 801dd24:	f7fd ff1c 	bl	801bb60 <memset>
 801dd28:	4620      	mov	r0, r4
 801dd2a:	b002      	add	sp, #8
 801dd2c:	bd10      	pop	{r4, pc}
	...

0801dd30 <_free_r>:
 801dd30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dd32:	2900      	cmp	r1, #0
 801dd34:	d048      	beq.n	801ddc8 <_free_r+0x98>
 801dd36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd3a:	9001      	str	r0, [sp, #4]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	f1a1 0404 	sub.w	r4, r1, #4
 801dd42:	bfb8      	it	lt
 801dd44:	18e4      	addlt	r4, r4, r3
 801dd46:	f001 f985 	bl	801f054 <__malloc_lock>
 801dd4a:	4a20      	ldr	r2, [pc, #128]	; (801ddcc <_free_r+0x9c>)
 801dd4c:	9801      	ldr	r0, [sp, #4]
 801dd4e:	6813      	ldr	r3, [r2, #0]
 801dd50:	4615      	mov	r5, r2
 801dd52:	b933      	cbnz	r3, 801dd62 <_free_r+0x32>
 801dd54:	6063      	str	r3, [r4, #4]
 801dd56:	6014      	str	r4, [r2, #0]
 801dd58:	b003      	add	sp, #12
 801dd5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd5e:	f001 b97f 	b.w	801f060 <__malloc_unlock>
 801dd62:	42a3      	cmp	r3, r4
 801dd64:	d90b      	bls.n	801dd7e <_free_r+0x4e>
 801dd66:	6821      	ldr	r1, [r4, #0]
 801dd68:	1862      	adds	r2, r4, r1
 801dd6a:	4293      	cmp	r3, r2
 801dd6c:	bf04      	itt	eq
 801dd6e:	681a      	ldreq	r2, [r3, #0]
 801dd70:	685b      	ldreq	r3, [r3, #4]
 801dd72:	6063      	str	r3, [r4, #4]
 801dd74:	bf04      	itt	eq
 801dd76:	1852      	addeq	r2, r2, r1
 801dd78:	6022      	streq	r2, [r4, #0]
 801dd7a:	602c      	str	r4, [r5, #0]
 801dd7c:	e7ec      	b.n	801dd58 <_free_r+0x28>
 801dd7e:	461a      	mov	r2, r3
 801dd80:	685b      	ldr	r3, [r3, #4]
 801dd82:	b10b      	cbz	r3, 801dd88 <_free_r+0x58>
 801dd84:	42a3      	cmp	r3, r4
 801dd86:	d9fa      	bls.n	801dd7e <_free_r+0x4e>
 801dd88:	6811      	ldr	r1, [r2, #0]
 801dd8a:	1855      	adds	r5, r2, r1
 801dd8c:	42a5      	cmp	r5, r4
 801dd8e:	d10b      	bne.n	801dda8 <_free_r+0x78>
 801dd90:	6824      	ldr	r4, [r4, #0]
 801dd92:	4421      	add	r1, r4
 801dd94:	1854      	adds	r4, r2, r1
 801dd96:	42a3      	cmp	r3, r4
 801dd98:	6011      	str	r1, [r2, #0]
 801dd9a:	d1dd      	bne.n	801dd58 <_free_r+0x28>
 801dd9c:	681c      	ldr	r4, [r3, #0]
 801dd9e:	685b      	ldr	r3, [r3, #4]
 801dda0:	6053      	str	r3, [r2, #4]
 801dda2:	4421      	add	r1, r4
 801dda4:	6011      	str	r1, [r2, #0]
 801dda6:	e7d7      	b.n	801dd58 <_free_r+0x28>
 801dda8:	d902      	bls.n	801ddb0 <_free_r+0x80>
 801ddaa:	230c      	movs	r3, #12
 801ddac:	6003      	str	r3, [r0, #0]
 801ddae:	e7d3      	b.n	801dd58 <_free_r+0x28>
 801ddb0:	6825      	ldr	r5, [r4, #0]
 801ddb2:	1961      	adds	r1, r4, r5
 801ddb4:	428b      	cmp	r3, r1
 801ddb6:	bf04      	itt	eq
 801ddb8:	6819      	ldreq	r1, [r3, #0]
 801ddba:	685b      	ldreq	r3, [r3, #4]
 801ddbc:	6063      	str	r3, [r4, #4]
 801ddbe:	bf04      	itt	eq
 801ddc0:	1949      	addeq	r1, r1, r5
 801ddc2:	6021      	streq	r1, [r4, #0]
 801ddc4:	6054      	str	r4, [r2, #4]
 801ddc6:	e7c7      	b.n	801dd58 <_free_r+0x28>
 801ddc8:	b003      	add	sp, #12
 801ddca:	bd30      	pop	{r4, r5, pc}
 801ddcc:	24004374 	.word	0x24004374

0801ddd0 <_malloc_r>:
 801ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddd2:	1ccd      	adds	r5, r1, #3
 801ddd4:	f025 0503 	bic.w	r5, r5, #3
 801ddd8:	3508      	adds	r5, #8
 801ddda:	2d0c      	cmp	r5, #12
 801dddc:	bf38      	it	cc
 801ddde:	250c      	movcc	r5, #12
 801dde0:	2d00      	cmp	r5, #0
 801dde2:	4606      	mov	r6, r0
 801dde4:	db01      	blt.n	801ddea <_malloc_r+0x1a>
 801dde6:	42a9      	cmp	r1, r5
 801dde8:	d903      	bls.n	801ddf2 <_malloc_r+0x22>
 801ddea:	230c      	movs	r3, #12
 801ddec:	6033      	str	r3, [r6, #0]
 801ddee:	2000      	movs	r0, #0
 801ddf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddf2:	f001 f92f 	bl	801f054 <__malloc_lock>
 801ddf6:	4921      	ldr	r1, [pc, #132]	; (801de7c <_malloc_r+0xac>)
 801ddf8:	680a      	ldr	r2, [r1, #0]
 801ddfa:	4614      	mov	r4, r2
 801ddfc:	b99c      	cbnz	r4, 801de26 <_malloc_r+0x56>
 801ddfe:	4f20      	ldr	r7, [pc, #128]	; (801de80 <_malloc_r+0xb0>)
 801de00:	683b      	ldr	r3, [r7, #0]
 801de02:	b923      	cbnz	r3, 801de0e <_malloc_r+0x3e>
 801de04:	4621      	mov	r1, r4
 801de06:	4630      	mov	r0, r6
 801de08:	f000 fe22 	bl	801ea50 <_sbrk_r>
 801de0c:	6038      	str	r0, [r7, #0]
 801de0e:	4629      	mov	r1, r5
 801de10:	4630      	mov	r0, r6
 801de12:	f000 fe1d 	bl	801ea50 <_sbrk_r>
 801de16:	1c43      	adds	r3, r0, #1
 801de18:	d123      	bne.n	801de62 <_malloc_r+0x92>
 801de1a:	230c      	movs	r3, #12
 801de1c:	6033      	str	r3, [r6, #0]
 801de1e:	4630      	mov	r0, r6
 801de20:	f001 f91e 	bl	801f060 <__malloc_unlock>
 801de24:	e7e3      	b.n	801ddee <_malloc_r+0x1e>
 801de26:	6823      	ldr	r3, [r4, #0]
 801de28:	1b5b      	subs	r3, r3, r5
 801de2a:	d417      	bmi.n	801de5c <_malloc_r+0x8c>
 801de2c:	2b0b      	cmp	r3, #11
 801de2e:	d903      	bls.n	801de38 <_malloc_r+0x68>
 801de30:	6023      	str	r3, [r4, #0]
 801de32:	441c      	add	r4, r3
 801de34:	6025      	str	r5, [r4, #0]
 801de36:	e004      	b.n	801de42 <_malloc_r+0x72>
 801de38:	6863      	ldr	r3, [r4, #4]
 801de3a:	42a2      	cmp	r2, r4
 801de3c:	bf0c      	ite	eq
 801de3e:	600b      	streq	r3, [r1, #0]
 801de40:	6053      	strne	r3, [r2, #4]
 801de42:	4630      	mov	r0, r6
 801de44:	f001 f90c 	bl	801f060 <__malloc_unlock>
 801de48:	f104 000b 	add.w	r0, r4, #11
 801de4c:	1d23      	adds	r3, r4, #4
 801de4e:	f020 0007 	bic.w	r0, r0, #7
 801de52:	1ac2      	subs	r2, r0, r3
 801de54:	d0cc      	beq.n	801ddf0 <_malloc_r+0x20>
 801de56:	1a1b      	subs	r3, r3, r0
 801de58:	50a3      	str	r3, [r4, r2]
 801de5a:	e7c9      	b.n	801ddf0 <_malloc_r+0x20>
 801de5c:	4622      	mov	r2, r4
 801de5e:	6864      	ldr	r4, [r4, #4]
 801de60:	e7cc      	b.n	801ddfc <_malloc_r+0x2c>
 801de62:	1cc4      	adds	r4, r0, #3
 801de64:	f024 0403 	bic.w	r4, r4, #3
 801de68:	42a0      	cmp	r0, r4
 801de6a:	d0e3      	beq.n	801de34 <_malloc_r+0x64>
 801de6c:	1a21      	subs	r1, r4, r0
 801de6e:	4630      	mov	r0, r6
 801de70:	f000 fdee 	bl	801ea50 <_sbrk_r>
 801de74:	3001      	adds	r0, #1
 801de76:	d1dd      	bne.n	801de34 <_malloc_r+0x64>
 801de78:	e7cf      	b.n	801de1a <_malloc_r+0x4a>
 801de7a:	bf00      	nop
 801de7c:	24004374 	.word	0x24004374
 801de80:	24004378 	.word	0x24004378

0801de84 <__ssputs_r>:
 801de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de88:	688e      	ldr	r6, [r1, #8]
 801de8a:	429e      	cmp	r6, r3
 801de8c:	4682      	mov	sl, r0
 801de8e:	460c      	mov	r4, r1
 801de90:	4690      	mov	r8, r2
 801de92:	461f      	mov	r7, r3
 801de94:	d838      	bhi.n	801df08 <__ssputs_r+0x84>
 801de96:	898a      	ldrh	r2, [r1, #12]
 801de98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801de9c:	d032      	beq.n	801df04 <__ssputs_r+0x80>
 801de9e:	6825      	ldr	r5, [r4, #0]
 801dea0:	6909      	ldr	r1, [r1, #16]
 801dea2:	eba5 0901 	sub.w	r9, r5, r1
 801dea6:	6965      	ldr	r5, [r4, #20]
 801dea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801deac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801deb0:	3301      	adds	r3, #1
 801deb2:	444b      	add	r3, r9
 801deb4:	106d      	asrs	r5, r5, #1
 801deb6:	429d      	cmp	r5, r3
 801deb8:	bf38      	it	cc
 801deba:	461d      	movcc	r5, r3
 801debc:	0553      	lsls	r3, r2, #21
 801debe:	d531      	bpl.n	801df24 <__ssputs_r+0xa0>
 801dec0:	4629      	mov	r1, r5
 801dec2:	f7ff ff85 	bl	801ddd0 <_malloc_r>
 801dec6:	4606      	mov	r6, r0
 801dec8:	b950      	cbnz	r0, 801dee0 <__ssputs_r+0x5c>
 801deca:	230c      	movs	r3, #12
 801decc:	f8ca 3000 	str.w	r3, [sl]
 801ded0:	89a3      	ldrh	r3, [r4, #12]
 801ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ded6:	81a3      	strh	r3, [r4, #12]
 801ded8:	f04f 30ff 	mov.w	r0, #4294967295
 801dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dee0:	6921      	ldr	r1, [r4, #16]
 801dee2:	464a      	mov	r2, r9
 801dee4:	f7fd fe14 	bl	801bb10 <memcpy>
 801dee8:	89a3      	ldrh	r3, [r4, #12]
 801deea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801deee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801def2:	81a3      	strh	r3, [r4, #12]
 801def4:	6126      	str	r6, [r4, #16]
 801def6:	6165      	str	r5, [r4, #20]
 801def8:	444e      	add	r6, r9
 801defa:	eba5 0509 	sub.w	r5, r5, r9
 801defe:	6026      	str	r6, [r4, #0]
 801df00:	60a5      	str	r5, [r4, #8]
 801df02:	463e      	mov	r6, r7
 801df04:	42be      	cmp	r6, r7
 801df06:	d900      	bls.n	801df0a <__ssputs_r+0x86>
 801df08:	463e      	mov	r6, r7
 801df0a:	4632      	mov	r2, r6
 801df0c:	6820      	ldr	r0, [r4, #0]
 801df0e:	4641      	mov	r1, r8
 801df10:	f7fd fe0c 	bl	801bb2c <memmove>
 801df14:	68a3      	ldr	r3, [r4, #8]
 801df16:	6822      	ldr	r2, [r4, #0]
 801df18:	1b9b      	subs	r3, r3, r6
 801df1a:	4432      	add	r2, r6
 801df1c:	60a3      	str	r3, [r4, #8]
 801df1e:	6022      	str	r2, [r4, #0]
 801df20:	2000      	movs	r0, #0
 801df22:	e7db      	b.n	801dedc <__ssputs_r+0x58>
 801df24:	462a      	mov	r2, r5
 801df26:	f001 f8a1 	bl	801f06c <_realloc_r>
 801df2a:	4606      	mov	r6, r0
 801df2c:	2800      	cmp	r0, #0
 801df2e:	d1e1      	bne.n	801def4 <__ssputs_r+0x70>
 801df30:	6921      	ldr	r1, [r4, #16]
 801df32:	4650      	mov	r0, sl
 801df34:	f7ff fefc 	bl	801dd30 <_free_r>
 801df38:	e7c7      	b.n	801deca <__ssputs_r+0x46>
	...

0801df3c <_svfiprintf_r>:
 801df3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df40:	4698      	mov	r8, r3
 801df42:	898b      	ldrh	r3, [r1, #12]
 801df44:	061b      	lsls	r3, r3, #24
 801df46:	b09d      	sub	sp, #116	; 0x74
 801df48:	4607      	mov	r7, r0
 801df4a:	460d      	mov	r5, r1
 801df4c:	4614      	mov	r4, r2
 801df4e:	d50e      	bpl.n	801df6e <_svfiprintf_r+0x32>
 801df50:	690b      	ldr	r3, [r1, #16]
 801df52:	b963      	cbnz	r3, 801df6e <_svfiprintf_r+0x32>
 801df54:	2140      	movs	r1, #64	; 0x40
 801df56:	f7ff ff3b 	bl	801ddd0 <_malloc_r>
 801df5a:	6028      	str	r0, [r5, #0]
 801df5c:	6128      	str	r0, [r5, #16]
 801df5e:	b920      	cbnz	r0, 801df6a <_svfiprintf_r+0x2e>
 801df60:	230c      	movs	r3, #12
 801df62:	603b      	str	r3, [r7, #0]
 801df64:	f04f 30ff 	mov.w	r0, #4294967295
 801df68:	e0d1      	b.n	801e10e <_svfiprintf_r+0x1d2>
 801df6a:	2340      	movs	r3, #64	; 0x40
 801df6c:	616b      	str	r3, [r5, #20]
 801df6e:	2300      	movs	r3, #0
 801df70:	9309      	str	r3, [sp, #36]	; 0x24
 801df72:	2320      	movs	r3, #32
 801df74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df78:	f8cd 800c 	str.w	r8, [sp, #12]
 801df7c:	2330      	movs	r3, #48	; 0x30
 801df7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e128 <_svfiprintf_r+0x1ec>
 801df82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df86:	f04f 0901 	mov.w	r9, #1
 801df8a:	4623      	mov	r3, r4
 801df8c:	469a      	mov	sl, r3
 801df8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df92:	b10a      	cbz	r2, 801df98 <_svfiprintf_r+0x5c>
 801df94:	2a25      	cmp	r2, #37	; 0x25
 801df96:	d1f9      	bne.n	801df8c <_svfiprintf_r+0x50>
 801df98:	ebba 0b04 	subs.w	fp, sl, r4
 801df9c:	d00b      	beq.n	801dfb6 <_svfiprintf_r+0x7a>
 801df9e:	465b      	mov	r3, fp
 801dfa0:	4622      	mov	r2, r4
 801dfa2:	4629      	mov	r1, r5
 801dfa4:	4638      	mov	r0, r7
 801dfa6:	f7ff ff6d 	bl	801de84 <__ssputs_r>
 801dfaa:	3001      	adds	r0, #1
 801dfac:	f000 80aa 	beq.w	801e104 <_svfiprintf_r+0x1c8>
 801dfb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfb2:	445a      	add	r2, fp
 801dfb4:	9209      	str	r2, [sp, #36]	; 0x24
 801dfb6:	f89a 3000 	ldrb.w	r3, [sl]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	f000 80a2 	beq.w	801e104 <_svfiprintf_r+0x1c8>
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	f04f 32ff 	mov.w	r2, #4294967295
 801dfc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dfca:	f10a 0a01 	add.w	sl, sl, #1
 801dfce:	9304      	str	r3, [sp, #16]
 801dfd0:	9307      	str	r3, [sp, #28]
 801dfd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dfd6:	931a      	str	r3, [sp, #104]	; 0x68
 801dfd8:	4654      	mov	r4, sl
 801dfda:	2205      	movs	r2, #5
 801dfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfe0:	4851      	ldr	r0, [pc, #324]	; (801e128 <_svfiprintf_r+0x1ec>)
 801dfe2:	f7e2 f995 	bl	8000310 <memchr>
 801dfe6:	9a04      	ldr	r2, [sp, #16]
 801dfe8:	b9d8      	cbnz	r0, 801e022 <_svfiprintf_r+0xe6>
 801dfea:	06d0      	lsls	r0, r2, #27
 801dfec:	bf44      	itt	mi
 801dfee:	2320      	movmi	r3, #32
 801dff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dff4:	0711      	lsls	r1, r2, #28
 801dff6:	bf44      	itt	mi
 801dff8:	232b      	movmi	r3, #43	; 0x2b
 801dffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dffe:	f89a 3000 	ldrb.w	r3, [sl]
 801e002:	2b2a      	cmp	r3, #42	; 0x2a
 801e004:	d015      	beq.n	801e032 <_svfiprintf_r+0xf6>
 801e006:	9a07      	ldr	r2, [sp, #28]
 801e008:	4654      	mov	r4, sl
 801e00a:	2000      	movs	r0, #0
 801e00c:	f04f 0c0a 	mov.w	ip, #10
 801e010:	4621      	mov	r1, r4
 801e012:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e016:	3b30      	subs	r3, #48	; 0x30
 801e018:	2b09      	cmp	r3, #9
 801e01a:	d94e      	bls.n	801e0ba <_svfiprintf_r+0x17e>
 801e01c:	b1b0      	cbz	r0, 801e04c <_svfiprintf_r+0x110>
 801e01e:	9207      	str	r2, [sp, #28]
 801e020:	e014      	b.n	801e04c <_svfiprintf_r+0x110>
 801e022:	eba0 0308 	sub.w	r3, r0, r8
 801e026:	fa09 f303 	lsl.w	r3, r9, r3
 801e02a:	4313      	orrs	r3, r2
 801e02c:	9304      	str	r3, [sp, #16]
 801e02e:	46a2      	mov	sl, r4
 801e030:	e7d2      	b.n	801dfd8 <_svfiprintf_r+0x9c>
 801e032:	9b03      	ldr	r3, [sp, #12]
 801e034:	1d19      	adds	r1, r3, #4
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	9103      	str	r1, [sp, #12]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	bfbb      	ittet	lt
 801e03e:	425b      	neglt	r3, r3
 801e040:	f042 0202 	orrlt.w	r2, r2, #2
 801e044:	9307      	strge	r3, [sp, #28]
 801e046:	9307      	strlt	r3, [sp, #28]
 801e048:	bfb8      	it	lt
 801e04a:	9204      	strlt	r2, [sp, #16]
 801e04c:	7823      	ldrb	r3, [r4, #0]
 801e04e:	2b2e      	cmp	r3, #46	; 0x2e
 801e050:	d10c      	bne.n	801e06c <_svfiprintf_r+0x130>
 801e052:	7863      	ldrb	r3, [r4, #1]
 801e054:	2b2a      	cmp	r3, #42	; 0x2a
 801e056:	d135      	bne.n	801e0c4 <_svfiprintf_r+0x188>
 801e058:	9b03      	ldr	r3, [sp, #12]
 801e05a:	1d1a      	adds	r2, r3, #4
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	9203      	str	r2, [sp, #12]
 801e060:	2b00      	cmp	r3, #0
 801e062:	bfb8      	it	lt
 801e064:	f04f 33ff 	movlt.w	r3, #4294967295
 801e068:	3402      	adds	r4, #2
 801e06a:	9305      	str	r3, [sp, #20]
 801e06c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e138 <_svfiprintf_r+0x1fc>
 801e070:	7821      	ldrb	r1, [r4, #0]
 801e072:	2203      	movs	r2, #3
 801e074:	4650      	mov	r0, sl
 801e076:	f7e2 f94b 	bl	8000310 <memchr>
 801e07a:	b140      	cbz	r0, 801e08e <_svfiprintf_r+0x152>
 801e07c:	2340      	movs	r3, #64	; 0x40
 801e07e:	eba0 000a 	sub.w	r0, r0, sl
 801e082:	fa03 f000 	lsl.w	r0, r3, r0
 801e086:	9b04      	ldr	r3, [sp, #16]
 801e088:	4303      	orrs	r3, r0
 801e08a:	3401      	adds	r4, #1
 801e08c:	9304      	str	r3, [sp, #16]
 801e08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e092:	4826      	ldr	r0, [pc, #152]	; (801e12c <_svfiprintf_r+0x1f0>)
 801e094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e098:	2206      	movs	r2, #6
 801e09a:	f7e2 f939 	bl	8000310 <memchr>
 801e09e:	2800      	cmp	r0, #0
 801e0a0:	d038      	beq.n	801e114 <_svfiprintf_r+0x1d8>
 801e0a2:	4b23      	ldr	r3, [pc, #140]	; (801e130 <_svfiprintf_r+0x1f4>)
 801e0a4:	bb1b      	cbnz	r3, 801e0ee <_svfiprintf_r+0x1b2>
 801e0a6:	9b03      	ldr	r3, [sp, #12]
 801e0a8:	3307      	adds	r3, #7
 801e0aa:	f023 0307 	bic.w	r3, r3, #7
 801e0ae:	3308      	adds	r3, #8
 801e0b0:	9303      	str	r3, [sp, #12]
 801e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0b4:	4433      	add	r3, r6
 801e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 801e0b8:	e767      	b.n	801df8a <_svfiprintf_r+0x4e>
 801e0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 801e0be:	460c      	mov	r4, r1
 801e0c0:	2001      	movs	r0, #1
 801e0c2:	e7a5      	b.n	801e010 <_svfiprintf_r+0xd4>
 801e0c4:	2300      	movs	r3, #0
 801e0c6:	3401      	adds	r4, #1
 801e0c8:	9305      	str	r3, [sp, #20]
 801e0ca:	4619      	mov	r1, r3
 801e0cc:	f04f 0c0a 	mov.w	ip, #10
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0d6:	3a30      	subs	r2, #48	; 0x30
 801e0d8:	2a09      	cmp	r2, #9
 801e0da:	d903      	bls.n	801e0e4 <_svfiprintf_r+0x1a8>
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d0c5      	beq.n	801e06c <_svfiprintf_r+0x130>
 801e0e0:	9105      	str	r1, [sp, #20]
 801e0e2:	e7c3      	b.n	801e06c <_svfiprintf_r+0x130>
 801e0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e0e8:	4604      	mov	r4, r0
 801e0ea:	2301      	movs	r3, #1
 801e0ec:	e7f0      	b.n	801e0d0 <_svfiprintf_r+0x194>
 801e0ee:	ab03      	add	r3, sp, #12
 801e0f0:	9300      	str	r3, [sp, #0]
 801e0f2:	462a      	mov	r2, r5
 801e0f4:	4b0f      	ldr	r3, [pc, #60]	; (801e134 <_svfiprintf_r+0x1f8>)
 801e0f6:	a904      	add	r1, sp, #16
 801e0f8:	4638      	mov	r0, r7
 801e0fa:	f7fd fdc9 	bl	801bc90 <_printf_float>
 801e0fe:	1c42      	adds	r2, r0, #1
 801e100:	4606      	mov	r6, r0
 801e102:	d1d6      	bne.n	801e0b2 <_svfiprintf_r+0x176>
 801e104:	89ab      	ldrh	r3, [r5, #12]
 801e106:	065b      	lsls	r3, r3, #25
 801e108:	f53f af2c 	bmi.w	801df64 <_svfiprintf_r+0x28>
 801e10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e10e:	b01d      	add	sp, #116	; 0x74
 801e110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e114:	ab03      	add	r3, sp, #12
 801e116:	9300      	str	r3, [sp, #0]
 801e118:	462a      	mov	r2, r5
 801e11a:	4b06      	ldr	r3, [pc, #24]	; (801e134 <_svfiprintf_r+0x1f8>)
 801e11c:	a904      	add	r1, sp, #16
 801e11e:	4638      	mov	r0, r7
 801e120:	f7fe f842 	bl	801c1a8 <_printf_i>
 801e124:	e7eb      	b.n	801e0fe <_svfiprintf_r+0x1c2>
 801e126:	bf00      	nop
 801e128:	08046924 	.word	0x08046924
 801e12c:	0804692e 	.word	0x0804692e
 801e130:	0801bc91 	.word	0x0801bc91
 801e134:	0801de85 	.word	0x0801de85
 801e138:	0804692a 	.word	0x0804692a

0801e13c <_sungetc_r>:
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	1c4b      	adds	r3, r1, #1
 801e140:	4614      	mov	r4, r2
 801e142:	d103      	bne.n	801e14c <_sungetc_r+0x10>
 801e144:	f04f 35ff 	mov.w	r5, #4294967295
 801e148:	4628      	mov	r0, r5
 801e14a:	bd38      	pop	{r3, r4, r5, pc}
 801e14c:	8993      	ldrh	r3, [r2, #12]
 801e14e:	f023 0320 	bic.w	r3, r3, #32
 801e152:	8193      	strh	r3, [r2, #12]
 801e154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e156:	6852      	ldr	r2, [r2, #4]
 801e158:	b2cd      	uxtb	r5, r1
 801e15a:	b18b      	cbz	r3, 801e180 <_sungetc_r+0x44>
 801e15c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e15e:	4293      	cmp	r3, r2
 801e160:	dd08      	ble.n	801e174 <_sungetc_r+0x38>
 801e162:	6823      	ldr	r3, [r4, #0]
 801e164:	1e5a      	subs	r2, r3, #1
 801e166:	6022      	str	r2, [r4, #0]
 801e168:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e16c:	6863      	ldr	r3, [r4, #4]
 801e16e:	3301      	adds	r3, #1
 801e170:	6063      	str	r3, [r4, #4]
 801e172:	e7e9      	b.n	801e148 <_sungetc_r+0xc>
 801e174:	4621      	mov	r1, r4
 801e176:	f000 fd33 	bl	801ebe0 <__submore>
 801e17a:	2800      	cmp	r0, #0
 801e17c:	d0f1      	beq.n	801e162 <_sungetc_r+0x26>
 801e17e:	e7e1      	b.n	801e144 <_sungetc_r+0x8>
 801e180:	6921      	ldr	r1, [r4, #16]
 801e182:	6823      	ldr	r3, [r4, #0]
 801e184:	b151      	cbz	r1, 801e19c <_sungetc_r+0x60>
 801e186:	4299      	cmp	r1, r3
 801e188:	d208      	bcs.n	801e19c <_sungetc_r+0x60>
 801e18a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e18e:	42a9      	cmp	r1, r5
 801e190:	d104      	bne.n	801e19c <_sungetc_r+0x60>
 801e192:	3b01      	subs	r3, #1
 801e194:	3201      	adds	r2, #1
 801e196:	6023      	str	r3, [r4, #0]
 801e198:	6062      	str	r2, [r4, #4]
 801e19a:	e7d5      	b.n	801e148 <_sungetc_r+0xc>
 801e19c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1a4:	6363      	str	r3, [r4, #52]	; 0x34
 801e1a6:	2303      	movs	r3, #3
 801e1a8:	63a3      	str	r3, [r4, #56]	; 0x38
 801e1aa:	4623      	mov	r3, r4
 801e1ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e1b0:	6023      	str	r3, [r4, #0]
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	e7dc      	b.n	801e170 <_sungetc_r+0x34>

0801e1b6 <__ssrefill_r>:
 801e1b6:	b510      	push	{r4, lr}
 801e1b8:	460c      	mov	r4, r1
 801e1ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e1bc:	b169      	cbz	r1, 801e1da <__ssrefill_r+0x24>
 801e1be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1c2:	4299      	cmp	r1, r3
 801e1c4:	d001      	beq.n	801e1ca <__ssrefill_r+0x14>
 801e1c6:	f7ff fdb3 	bl	801dd30 <_free_r>
 801e1ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e1cc:	6063      	str	r3, [r4, #4]
 801e1ce:	2000      	movs	r0, #0
 801e1d0:	6360      	str	r0, [r4, #52]	; 0x34
 801e1d2:	b113      	cbz	r3, 801e1da <__ssrefill_r+0x24>
 801e1d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e1d6:	6023      	str	r3, [r4, #0]
 801e1d8:	bd10      	pop	{r4, pc}
 801e1da:	6923      	ldr	r3, [r4, #16]
 801e1dc:	6023      	str	r3, [r4, #0]
 801e1de:	2300      	movs	r3, #0
 801e1e0:	6063      	str	r3, [r4, #4]
 801e1e2:	89a3      	ldrh	r3, [r4, #12]
 801e1e4:	f043 0320 	orr.w	r3, r3, #32
 801e1e8:	81a3      	strh	r3, [r4, #12]
 801e1ea:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ee:	e7f3      	b.n	801e1d8 <__ssrefill_r+0x22>

0801e1f0 <__ssvfiscanf_r>:
 801e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f4:	460c      	mov	r4, r1
 801e1f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e1fa:	2100      	movs	r1, #0
 801e1fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e200:	49b2      	ldr	r1, [pc, #712]	; (801e4cc <__ssvfiscanf_r+0x2dc>)
 801e202:	91a0      	str	r1, [sp, #640]	; 0x280
 801e204:	f10d 0804 	add.w	r8, sp, #4
 801e208:	49b1      	ldr	r1, [pc, #708]	; (801e4d0 <__ssvfiscanf_r+0x2e0>)
 801e20a:	4fb2      	ldr	r7, [pc, #712]	; (801e4d4 <__ssvfiscanf_r+0x2e4>)
 801e20c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801e4d8 <__ssvfiscanf_r+0x2e8>
 801e210:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e214:	4606      	mov	r6, r0
 801e216:	91a1      	str	r1, [sp, #644]	; 0x284
 801e218:	9300      	str	r3, [sp, #0]
 801e21a:	f892 a000 	ldrb.w	sl, [r2]
 801e21e:	f1ba 0f00 	cmp.w	sl, #0
 801e222:	f000 8151 	beq.w	801e4c8 <__ssvfiscanf_r+0x2d8>
 801e226:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801e22a:	f013 0308 	ands.w	r3, r3, #8
 801e22e:	f102 0501 	add.w	r5, r2, #1
 801e232:	d019      	beq.n	801e268 <__ssvfiscanf_r+0x78>
 801e234:	6863      	ldr	r3, [r4, #4]
 801e236:	2b00      	cmp	r3, #0
 801e238:	dd0f      	ble.n	801e25a <__ssvfiscanf_r+0x6a>
 801e23a:	6823      	ldr	r3, [r4, #0]
 801e23c:	781a      	ldrb	r2, [r3, #0]
 801e23e:	5cba      	ldrb	r2, [r7, r2]
 801e240:	0712      	lsls	r2, r2, #28
 801e242:	d401      	bmi.n	801e248 <__ssvfiscanf_r+0x58>
 801e244:	462a      	mov	r2, r5
 801e246:	e7e8      	b.n	801e21a <__ssvfiscanf_r+0x2a>
 801e248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e24a:	3201      	adds	r2, #1
 801e24c:	9245      	str	r2, [sp, #276]	; 0x114
 801e24e:	6862      	ldr	r2, [r4, #4]
 801e250:	3301      	adds	r3, #1
 801e252:	3a01      	subs	r2, #1
 801e254:	6062      	str	r2, [r4, #4]
 801e256:	6023      	str	r3, [r4, #0]
 801e258:	e7ec      	b.n	801e234 <__ssvfiscanf_r+0x44>
 801e25a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e25c:	4621      	mov	r1, r4
 801e25e:	4630      	mov	r0, r6
 801e260:	4798      	blx	r3
 801e262:	2800      	cmp	r0, #0
 801e264:	d0e9      	beq.n	801e23a <__ssvfiscanf_r+0x4a>
 801e266:	e7ed      	b.n	801e244 <__ssvfiscanf_r+0x54>
 801e268:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801e26c:	f040 8083 	bne.w	801e376 <__ssvfiscanf_r+0x186>
 801e270:	9341      	str	r3, [sp, #260]	; 0x104
 801e272:	9343      	str	r3, [sp, #268]	; 0x10c
 801e274:	7853      	ldrb	r3, [r2, #1]
 801e276:	2b2a      	cmp	r3, #42	; 0x2a
 801e278:	bf02      	ittt	eq
 801e27a:	2310      	moveq	r3, #16
 801e27c:	1c95      	addeq	r5, r2, #2
 801e27e:	9341      	streq	r3, [sp, #260]	; 0x104
 801e280:	220a      	movs	r2, #10
 801e282:	46ab      	mov	fp, r5
 801e284:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801e288:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e28c:	2b09      	cmp	r3, #9
 801e28e:	d91d      	bls.n	801e2cc <__ssvfiscanf_r+0xdc>
 801e290:	4891      	ldr	r0, [pc, #580]	; (801e4d8 <__ssvfiscanf_r+0x2e8>)
 801e292:	2203      	movs	r2, #3
 801e294:	f7e2 f83c 	bl	8000310 <memchr>
 801e298:	b140      	cbz	r0, 801e2ac <__ssvfiscanf_r+0xbc>
 801e29a:	2301      	movs	r3, #1
 801e29c:	eba0 0009 	sub.w	r0, r0, r9
 801e2a0:	fa03 f000 	lsl.w	r0, r3, r0
 801e2a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e2a6:	4318      	orrs	r0, r3
 801e2a8:	9041      	str	r0, [sp, #260]	; 0x104
 801e2aa:	465d      	mov	r5, fp
 801e2ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e2b0:	2b78      	cmp	r3, #120	; 0x78
 801e2b2:	d806      	bhi.n	801e2c2 <__ssvfiscanf_r+0xd2>
 801e2b4:	2b57      	cmp	r3, #87	; 0x57
 801e2b6:	d810      	bhi.n	801e2da <__ssvfiscanf_r+0xea>
 801e2b8:	2b25      	cmp	r3, #37	; 0x25
 801e2ba:	d05c      	beq.n	801e376 <__ssvfiscanf_r+0x186>
 801e2bc:	d856      	bhi.n	801e36c <__ssvfiscanf_r+0x17c>
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d074      	beq.n	801e3ac <__ssvfiscanf_r+0x1bc>
 801e2c2:	2303      	movs	r3, #3
 801e2c4:	9347      	str	r3, [sp, #284]	; 0x11c
 801e2c6:	230a      	movs	r3, #10
 801e2c8:	9342      	str	r3, [sp, #264]	; 0x108
 801e2ca:	e081      	b.n	801e3d0 <__ssvfiscanf_r+0x1e0>
 801e2cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e2ce:	fb02 1303 	mla	r3, r2, r3, r1
 801e2d2:	3b30      	subs	r3, #48	; 0x30
 801e2d4:	9343      	str	r3, [sp, #268]	; 0x10c
 801e2d6:	465d      	mov	r5, fp
 801e2d8:	e7d3      	b.n	801e282 <__ssvfiscanf_r+0x92>
 801e2da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e2de:	2a20      	cmp	r2, #32
 801e2e0:	d8ef      	bhi.n	801e2c2 <__ssvfiscanf_r+0xd2>
 801e2e2:	a101      	add	r1, pc, #4	; (adr r1, 801e2e8 <__ssvfiscanf_r+0xf8>)
 801e2e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e2e8:	0801e3bb 	.word	0x0801e3bb
 801e2ec:	0801e2c3 	.word	0x0801e2c3
 801e2f0:	0801e2c3 	.word	0x0801e2c3
 801e2f4:	0801e419 	.word	0x0801e419
 801e2f8:	0801e2c3 	.word	0x0801e2c3
 801e2fc:	0801e2c3 	.word	0x0801e2c3
 801e300:	0801e2c3 	.word	0x0801e2c3
 801e304:	0801e2c3 	.word	0x0801e2c3
 801e308:	0801e2c3 	.word	0x0801e2c3
 801e30c:	0801e2c3 	.word	0x0801e2c3
 801e310:	0801e2c3 	.word	0x0801e2c3
 801e314:	0801e42f 	.word	0x0801e42f
 801e318:	0801e405 	.word	0x0801e405
 801e31c:	0801e373 	.word	0x0801e373
 801e320:	0801e373 	.word	0x0801e373
 801e324:	0801e373 	.word	0x0801e373
 801e328:	0801e2c3 	.word	0x0801e2c3
 801e32c:	0801e409 	.word	0x0801e409
 801e330:	0801e2c3 	.word	0x0801e2c3
 801e334:	0801e2c3 	.word	0x0801e2c3
 801e338:	0801e2c3 	.word	0x0801e2c3
 801e33c:	0801e2c3 	.word	0x0801e2c3
 801e340:	0801e43f 	.word	0x0801e43f
 801e344:	0801e411 	.word	0x0801e411
 801e348:	0801e3b3 	.word	0x0801e3b3
 801e34c:	0801e2c3 	.word	0x0801e2c3
 801e350:	0801e2c3 	.word	0x0801e2c3
 801e354:	0801e43b 	.word	0x0801e43b
 801e358:	0801e2c3 	.word	0x0801e2c3
 801e35c:	0801e405 	.word	0x0801e405
 801e360:	0801e2c3 	.word	0x0801e2c3
 801e364:	0801e2c3 	.word	0x0801e2c3
 801e368:	0801e3bb 	.word	0x0801e3bb
 801e36c:	3b45      	subs	r3, #69	; 0x45
 801e36e:	2b02      	cmp	r3, #2
 801e370:	d8a7      	bhi.n	801e2c2 <__ssvfiscanf_r+0xd2>
 801e372:	2305      	movs	r3, #5
 801e374:	e02b      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e376:	6863      	ldr	r3, [r4, #4]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	dd0d      	ble.n	801e398 <__ssvfiscanf_r+0x1a8>
 801e37c:	6823      	ldr	r3, [r4, #0]
 801e37e:	781a      	ldrb	r2, [r3, #0]
 801e380:	4552      	cmp	r2, sl
 801e382:	f040 80a1 	bne.w	801e4c8 <__ssvfiscanf_r+0x2d8>
 801e386:	3301      	adds	r3, #1
 801e388:	6862      	ldr	r2, [r4, #4]
 801e38a:	6023      	str	r3, [r4, #0]
 801e38c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e38e:	3a01      	subs	r2, #1
 801e390:	3301      	adds	r3, #1
 801e392:	6062      	str	r2, [r4, #4]
 801e394:	9345      	str	r3, [sp, #276]	; 0x114
 801e396:	e755      	b.n	801e244 <__ssvfiscanf_r+0x54>
 801e398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e39a:	4621      	mov	r1, r4
 801e39c:	4630      	mov	r0, r6
 801e39e:	4798      	blx	r3
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d0eb      	beq.n	801e37c <__ssvfiscanf_r+0x18c>
 801e3a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	f040 8084 	bne.w	801e4b4 <__ssvfiscanf_r+0x2c4>
 801e3ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e3b0:	e086      	b.n	801e4c0 <__ssvfiscanf_r+0x2d0>
 801e3b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e3b4:	f042 0220 	orr.w	r2, r2, #32
 801e3b8:	9241      	str	r2, [sp, #260]	; 0x104
 801e3ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e3c0:	9241      	str	r2, [sp, #260]	; 0x104
 801e3c2:	2210      	movs	r2, #16
 801e3c4:	2b6f      	cmp	r3, #111	; 0x6f
 801e3c6:	9242      	str	r2, [sp, #264]	; 0x108
 801e3c8:	bf34      	ite	cc
 801e3ca:	2303      	movcc	r3, #3
 801e3cc:	2304      	movcs	r3, #4
 801e3ce:	9347      	str	r3, [sp, #284]	; 0x11c
 801e3d0:	6863      	ldr	r3, [r4, #4]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	dd41      	ble.n	801e45a <__ssvfiscanf_r+0x26a>
 801e3d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e3d8:	0659      	lsls	r1, r3, #25
 801e3da:	d404      	bmi.n	801e3e6 <__ssvfiscanf_r+0x1f6>
 801e3dc:	6823      	ldr	r3, [r4, #0]
 801e3de:	781a      	ldrb	r2, [r3, #0]
 801e3e0:	5cba      	ldrb	r2, [r7, r2]
 801e3e2:	0712      	lsls	r2, r2, #28
 801e3e4:	d440      	bmi.n	801e468 <__ssvfiscanf_r+0x278>
 801e3e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e3e8:	2b02      	cmp	r3, #2
 801e3ea:	dc4f      	bgt.n	801e48c <__ssvfiscanf_r+0x29c>
 801e3ec:	466b      	mov	r3, sp
 801e3ee:	4622      	mov	r2, r4
 801e3f0:	a941      	add	r1, sp, #260	; 0x104
 801e3f2:	4630      	mov	r0, r6
 801e3f4:	f000 f9ce 	bl	801e794 <_scanf_chars>
 801e3f8:	2801      	cmp	r0, #1
 801e3fa:	d065      	beq.n	801e4c8 <__ssvfiscanf_r+0x2d8>
 801e3fc:	2802      	cmp	r0, #2
 801e3fe:	f47f af21 	bne.w	801e244 <__ssvfiscanf_r+0x54>
 801e402:	e7cf      	b.n	801e3a4 <__ssvfiscanf_r+0x1b4>
 801e404:	220a      	movs	r2, #10
 801e406:	e7dd      	b.n	801e3c4 <__ssvfiscanf_r+0x1d4>
 801e408:	2300      	movs	r3, #0
 801e40a:	9342      	str	r3, [sp, #264]	; 0x108
 801e40c:	2303      	movs	r3, #3
 801e40e:	e7de      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e410:	2308      	movs	r3, #8
 801e412:	9342      	str	r3, [sp, #264]	; 0x108
 801e414:	2304      	movs	r3, #4
 801e416:	e7da      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e418:	4629      	mov	r1, r5
 801e41a:	4640      	mov	r0, r8
 801e41c:	f000 fb28 	bl	801ea70 <__sccl>
 801e420:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e426:	9341      	str	r3, [sp, #260]	; 0x104
 801e428:	4605      	mov	r5, r0
 801e42a:	2301      	movs	r3, #1
 801e42c:	e7cf      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e42e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e434:	9341      	str	r3, [sp, #260]	; 0x104
 801e436:	2300      	movs	r3, #0
 801e438:	e7c9      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e43a:	2302      	movs	r3, #2
 801e43c:	e7c7      	b.n	801e3ce <__ssvfiscanf_r+0x1de>
 801e43e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e440:	06c3      	lsls	r3, r0, #27
 801e442:	f53f aeff 	bmi.w	801e244 <__ssvfiscanf_r+0x54>
 801e446:	9b00      	ldr	r3, [sp, #0]
 801e448:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e44a:	1d19      	adds	r1, r3, #4
 801e44c:	9100      	str	r1, [sp, #0]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	07c0      	lsls	r0, r0, #31
 801e452:	bf4c      	ite	mi
 801e454:	801a      	strhmi	r2, [r3, #0]
 801e456:	601a      	strpl	r2, [r3, #0]
 801e458:	e6f4      	b.n	801e244 <__ssvfiscanf_r+0x54>
 801e45a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e45c:	4621      	mov	r1, r4
 801e45e:	4630      	mov	r0, r6
 801e460:	4798      	blx	r3
 801e462:	2800      	cmp	r0, #0
 801e464:	d0b7      	beq.n	801e3d6 <__ssvfiscanf_r+0x1e6>
 801e466:	e79d      	b.n	801e3a4 <__ssvfiscanf_r+0x1b4>
 801e468:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e46a:	3201      	adds	r2, #1
 801e46c:	9245      	str	r2, [sp, #276]	; 0x114
 801e46e:	6862      	ldr	r2, [r4, #4]
 801e470:	3a01      	subs	r2, #1
 801e472:	2a00      	cmp	r2, #0
 801e474:	6062      	str	r2, [r4, #4]
 801e476:	dd02      	ble.n	801e47e <__ssvfiscanf_r+0x28e>
 801e478:	3301      	adds	r3, #1
 801e47a:	6023      	str	r3, [r4, #0]
 801e47c:	e7ae      	b.n	801e3dc <__ssvfiscanf_r+0x1ec>
 801e47e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e480:	4621      	mov	r1, r4
 801e482:	4630      	mov	r0, r6
 801e484:	4798      	blx	r3
 801e486:	2800      	cmp	r0, #0
 801e488:	d0a8      	beq.n	801e3dc <__ssvfiscanf_r+0x1ec>
 801e48a:	e78b      	b.n	801e3a4 <__ssvfiscanf_r+0x1b4>
 801e48c:	2b04      	cmp	r3, #4
 801e48e:	dc06      	bgt.n	801e49e <__ssvfiscanf_r+0x2ae>
 801e490:	466b      	mov	r3, sp
 801e492:	4622      	mov	r2, r4
 801e494:	a941      	add	r1, sp, #260	; 0x104
 801e496:	4630      	mov	r0, r6
 801e498:	f000 f9d4 	bl	801e844 <_scanf_i>
 801e49c:	e7ac      	b.n	801e3f8 <__ssvfiscanf_r+0x208>
 801e49e:	4b0f      	ldr	r3, [pc, #60]	; (801e4dc <__ssvfiscanf_r+0x2ec>)
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	f43f aecf 	beq.w	801e244 <__ssvfiscanf_r+0x54>
 801e4a6:	466b      	mov	r3, sp
 801e4a8:	4622      	mov	r2, r4
 801e4aa:	a941      	add	r1, sp, #260	; 0x104
 801e4ac:	4630      	mov	r0, r6
 801e4ae:	f3af 8000 	nop.w
 801e4b2:	e7a1      	b.n	801e3f8 <__ssvfiscanf_r+0x208>
 801e4b4:	89a3      	ldrh	r3, [r4, #12]
 801e4b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e4ba:	bf18      	it	ne
 801e4bc:	f04f 30ff 	movne.w	r0, #4294967295
 801e4c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e4ca:	e7f9      	b.n	801e4c0 <__ssvfiscanf_r+0x2d0>
 801e4cc:	0801e13d 	.word	0x0801e13d
 801e4d0:	0801e1b7 	.word	0x0801e1b7
 801e4d4:	080464f9 	.word	0x080464f9
 801e4d8:	0804692a 	.word	0x0804692a
 801e4dc:	00000000 	.word	0x00000000

0801e4e0 <__sfputc_r>:
 801e4e0:	6893      	ldr	r3, [r2, #8]
 801e4e2:	3b01      	subs	r3, #1
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	b410      	push	{r4}
 801e4e8:	6093      	str	r3, [r2, #8]
 801e4ea:	da08      	bge.n	801e4fe <__sfputc_r+0x1e>
 801e4ec:	6994      	ldr	r4, [r2, #24]
 801e4ee:	42a3      	cmp	r3, r4
 801e4f0:	db01      	blt.n	801e4f6 <__sfputc_r+0x16>
 801e4f2:	290a      	cmp	r1, #10
 801e4f4:	d103      	bne.n	801e4fe <__sfputc_r+0x1e>
 801e4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e4fa:	f000 bbab 	b.w	801ec54 <__swbuf_r>
 801e4fe:	6813      	ldr	r3, [r2, #0]
 801e500:	1c58      	adds	r0, r3, #1
 801e502:	6010      	str	r0, [r2, #0]
 801e504:	7019      	strb	r1, [r3, #0]
 801e506:	4608      	mov	r0, r1
 801e508:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e50c:	4770      	bx	lr

0801e50e <__sfputs_r>:
 801e50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e510:	4606      	mov	r6, r0
 801e512:	460f      	mov	r7, r1
 801e514:	4614      	mov	r4, r2
 801e516:	18d5      	adds	r5, r2, r3
 801e518:	42ac      	cmp	r4, r5
 801e51a:	d101      	bne.n	801e520 <__sfputs_r+0x12>
 801e51c:	2000      	movs	r0, #0
 801e51e:	e007      	b.n	801e530 <__sfputs_r+0x22>
 801e520:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e524:	463a      	mov	r2, r7
 801e526:	4630      	mov	r0, r6
 801e528:	f7ff ffda 	bl	801e4e0 <__sfputc_r>
 801e52c:	1c43      	adds	r3, r0, #1
 801e52e:	d1f3      	bne.n	801e518 <__sfputs_r+0xa>
 801e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e534 <_vfiprintf_r>:
 801e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e538:	460d      	mov	r5, r1
 801e53a:	b09d      	sub	sp, #116	; 0x74
 801e53c:	4614      	mov	r4, r2
 801e53e:	4698      	mov	r8, r3
 801e540:	4606      	mov	r6, r0
 801e542:	b118      	cbz	r0, 801e54c <_vfiprintf_r+0x18>
 801e544:	6983      	ldr	r3, [r0, #24]
 801e546:	b90b      	cbnz	r3, 801e54c <_vfiprintf_r+0x18>
 801e548:	f7fe ff92 	bl	801d470 <__sinit>
 801e54c:	4b89      	ldr	r3, [pc, #548]	; (801e774 <_vfiprintf_r+0x240>)
 801e54e:	429d      	cmp	r5, r3
 801e550:	d11b      	bne.n	801e58a <_vfiprintf_r+0x56>
 801e552:	6875      	ldr	r5, [r6, #4]
 801e554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e556:	07d9      	lsls	r1, r3, #31
 801e558:	d405      	bmi.n	801e566 <_vfiprintf_r+0x32>
 801e55a:	89ab      	ldrh	r3, [r5, #12]
 801e55c:	059a      	lsls	r2, r3, #22
 801e55e:	d402      	bmi.n	801e566 <_vfiprintf_r+0x32>
 801e560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e562:	f7ff f83a 	bl	801d5da <__retarget_lock_acquire_recursive>
 801e566:	89ab      	ldrh	r3, [r5, #12]
 801e568:	071b      	lsls	r3, r3, #28
 801e56a:	d501      	bpl.n	801e570 <_vfiprintf_r+0x3c>
 801e56c:	692b      	ldr	r3, [r5, #16]
 801e56e:	b9eb      	cbnz	r3, 801e5ac <_vfiprintf_r+0x78>
 801e570:	4629      	mov	r1, r5
 801e572:	4630      	mov	r0, r6
 801e574:	f000 fbc0 	bl	801ecf8 <__swsetup_r>
 801e578:	b1c0      	cbz	r0, 801e5ac <_vfiprintf_r+0x78>
 801e57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e57c:	07dc      	lsls	r4, r3, #31
 801e57e:	d50e      	bpl.n	801e59e <_vfiprintf_r+0x6a>
 801e580:	f04f 30ff 	mov.w	r0, #4294967295
 801e584:	b01d      	add	sp, #116	; 0x74
 801e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e58a:	4b7b      	ldr	r3, [pc, #492]	; (801e778 <_vfiprintf_r+0x244>)
 801e58c:	429d      	cmp	r5, r3
 801e58e:	d101      	bne.n	801e594 <_vfiprintf_r+0x60>
 801e590:	68b5      	ldr	r5, [r6, #8]
 801e592:	e7df      	b.n	801e554 <_vfiprintf_r+0x20>
 801e594:	4b79      	ldr	r3, [pc, #484]	; (801e77c <_vfiprintf_r+0x248>)
 801e596:	429d      	cmp	r5, r3
 801e598:	bf08      	it	eq
 801e59a:	68f5      	ldreq	r5, [r6, #12]
 801e59c:	e7da      	b.n	801e554 <_vfiprintf_r+0x20>
 801e59e:	89ab      	ldrh	r3, [r5, #12]
 801e5a0:	0598      	lsls	r0, r3, #22
 801e5a2:	d4ed      	bmi.n	801e580 <_vfiprintf_r+0x4c>
 801e5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5a6:	f7ff f819 	bl	801d5dc <__retarget_lock_release_recursive>
 801e5aa:	e7e9      	b.n	801e580 <_vfiprintf_r+0x4c>
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e5b0:	2320      	movs	r3, #32
 801e5b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e5ba:	2330      	movs	r3, #48	; 0x30
 801e5bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e780 <_vfiprintf_r+0x24c>
 801e5c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e5c4:	f04f 0901 	mov.w	r9, #1
 801e5c8:	4623      	mov	r3, r4
 801e5ca:	469a      	mov	sl, r3
 801e5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e5d0:	b10a      	cbz	r2, 801e5d6 <_vfiprintf_r+0xa2>
 801e5d2:	2a25      	cmp	r2, #37	; 0x25
 801e5d4:	d1f9      	bne.n	801e5ca <_vfiprintf_r+0x96>
 801e5d6:	ebba 0b04 	subs.w	fp, sl, r4
 801e5da:	d00b      	beq.n	801e5f4 <_vfiprintf_r+0xc0>
 801e5dc:	465b      	mov	r3, fp
 801e5de:	4622      	mov	r2, r4
 801e5e0:	4629      	mov	r1, r5
 801e5e2:	4630      	mov	r0, r6
 801e5e4:	f7ff ff93 	bl	801e50e <__sfputs_r>
 801e5e8:	3001      	adds	r0, #1
 801e5ea:	f000 80aa 	beq.w	801e742 <_vfiprintf_r+0x20e>
 801e5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5f0:	445a      	add	r2, fp
 801e5f2:	9209      	str	r2, [sp, #36]	; 0x24
 801e5f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f000 80a2 	beq.w	801e742 <_vfiprintf_r+0x20e>
 801e5fe:	2300      	movs	r3, #0
 801e600:	f04f 32ff 	mov.w	r2, #4294967295
 801e604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e608:	f10a 0a01 	add.w	sl, sl, #1
 801e60c:	9304      	str	r3, [sp, #16]
 801e60e:	9307      	str	r3, [sp, #28]
 801e610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e614:	931a      	str	r3, [sp, #104]	; 0x68
 801e616:	4654      	mov	r4, sl
 801e618:	2205      	movs	r2, #5
 801e61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e61e:	4858      	ldr	r0, [pc, #352]	; (801e780 <_vfiprintf_r+0x24c>)
 801e620:	f7e1 fe76 	bl	8000310 <memchr>
 801e624:	9a04      	ldr	r2, [sp, #16]
 801e626:	b9d8      	cbnz	r0, 801e660 <_vfiprintf_r+0x12c>
 801e628:	06d1      	lsls	r1, r2, #27
 801e62a:	bf44      	itt	mi
 801e62c:	2320      	movmi	r3, #32
 801e62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e632:	0713      	lsls	r3, r2, #28
 801e634:	bf44      	itt	mi
 801e636:	232b      	movmi	r3, #43	; 0x2b
 801e638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e63c:	f89a 3000 	ldrb.w	r3, [sl]
 801e640:	2b2a      	cmp	r3, #42	; 0x2a
 801e642:	d015      	beq.n	801e670 <_vfiprintf_r+0x13c>
 801e644:	9a07      	ldr	r2, [sp, #28]
 801e646:	4654      	mov	r4, sl
 801e648:	2000      	movs	r0, #0
 801e64a:	f04f 0c0a 	mov.w	ip, #10
 801e64e:	4621      	mov	r1, r4
 801e650:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e654:	3b30      	subs	r3, #48	; 0x30
 801e656:	2b09      	cmp	r3, #9
 801e658:	d94e      	bls.n	801e6f8 <_vfiprintf_r+0x1c4>
 801e65a:	b1b0      	cbz	r0, 801e68a <_vfiprintf_r+0x156>
 801e65c:	9207      	str	r2, [sp, #28]
 801e65e:	e014      	b.n	801e68a <_vfiprintf_r+0x156>
 801e660:	eba0 0308 	sub.w	r3, r0, r8
 801e664:	fa09 f303 	lsl.w	r3, r9, r3
 801e668:	4313      	orrs	r3, r2
 801e66a:	9304      	str	r3, [sp, #16]
 801e66c:	46a2      	mov	sl, r4
 801e66e:	e7d2      	b.n	801e616 <_vfiprintf_r+0xe2>
 801e670:	9b03      	ldr	r3, [sp, #12]
 801e672:	1d19      	adds	r1, r3, #4
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	9103      	str	r1, [sp, #12]
 801e678:	2b00      	cmp	r3, #0
 801e67a:	bfbb      	ittet	lt
 801e67c:	425b      	neglt	r3, r3
 801e67e:	f042 0202 	orrlt.w	r2, r2, #2
 801e682:	9307      	strge	r3, [sp, #28]
 801e684:	9307      	strlt	r3, [sp, #28]
 801e686:	bfb8      	it	lt
 801e688:	9204      	strlt	r2, [sp, #16]
 801e68a:	7823      	ldrb	r3, [r4, #0]
 801e68c:	2b2e      	cmp	r3, #46	; 0x2e
 801e68e:	d10c      	bne.n	801e6aa <_vfiprintf_r+0x176>
 801e690:	7863      	ldrb	r3, [r4, #1]
 801e692:	2b2a      	cmp	r3, #42	; 0x2a
 801e694:	d135      	bne.n	801e702 <_vfiprintf_r+0x1ce>
 801e696:	9b03      	ldr	r3, [sp, #12]
 801e698:	1d1a      	adds	r2, r3, #4
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	9203      	str	r2, [sp, #12]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	bfb8      	it	lt
 801e6a2:	f04f 33ff 	movlt.w	r3, #4294967295
 801e6a6:	3402      	adds	r4, #2
 801e6a8:	9305      	str	r3, [sp, #20]
 801e6aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e790 <_vfiprintf_r+0x25c>
 801e6ae:	7821      	ldrb	r1, [r4, #0]
 801e6b0:	2203      	movs	r2, #3
 801e6b2:	4650      	mov	r0, sl
 801e6b4:	f7e1 fe2c 	bl	8000310 <memchr>
 801e6b8:	b140      	cbz	r0, 801e6cc <_vfiprintf_r+0x198>
 801e6ba:	2340      	movs	r3, #64	; 0x40
 801e6bc:	eba0 000a 	sub.w	r0, r0, sl
 801e6c0:	fa03 f000 	lsl.w	r0, r3, r0
 801e6c4:	9b04      	ldr	r3, [sp, #16]
 801e6c6:	4303      	orrs	r3, r0
 801e6c8:	3401      	adds	r4, #1
 801e6ca:	9304      	str	r3, [sp, #16]
 801e6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6d0:	482c      	ldr	r0, [pc, #176]	; (801e784 <_vfiprintf_r+0x250>)
 801e6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e6d6:	2206      	movs	r2, #6
 801e6d8:	f7e1 fe1a 	bl	8000310 <memchr>
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	d03f      	beq.n	801e760 <_vfiprintf_r+0x22c>
 801e6e0:	4b29      	ldr	r3, [pc, #164]	; (801e788 <_vfiprintf_r+0x254>)
 801e6e2:	bb1b      	cbnz	r3, 801e72c <_vfiprintf_r+0x1f8>
 801e6e4:	9b03      	ldr	r3, [sp, #12]
 801e6e6:	3307      	adds	r3, #7
 801e6e8:	f023 0307 	bic.w	r3, r3, #7
 801e6ec:	3308      	adds	r3, #8
 801e6ee:	9303      	str	r3, [sp, #12]
 801e6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6f2:	443b      	add	r3, r7
 801e6f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e6f6:	e767      	b.n	801e5c8 <_vfiprintf_r+0x94>
 801e6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801e6fc:	460c      	mov	r4, r1
 801e6fe:	2001      	movs	r0, #1
 801e700:	e7a5      	b.n	801e64e <_vfiprintf_r+0x11a>
 801e702:	2300      	movs	r3, #0
 801e704:	3401      	adds	r4, #1
 801e706:	9305      	str	r3, [sp, #20]
 801e708:	4619      	mov	r1, r3
 801e70a:	f04f 0c0a 	mov.w	ip, #10
 801e70e:	4620      	mov	r0, r4
 801e710:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e714:	3a30      	subs	r2, #48	; 0x30
 801e716:	2a09      	cmp	r2, #9
 801e718:	d903      	bls.n	801e722 <_vfiprintf_r+0x1ee>
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d0c5      	beq.n	801e6aa <_vfiprintf_r+0x176>
 801e71e:	9105      	str	r1, [sp, #20]
 801e720:	e7c3      	b.n	801e6aa <_vfiprintf_r+0x176>
 801e722:	fb0c 2101 	mla	r1, ip, r1, r2
 801e726:	4604      	mov	r4, r0
 801e728:	2301      	movs	r3, #1
 801e72a:	e7f0      	b.n	801e70e <_vfiprintf_r+0x1da>
 801e72c:	ab03      	add	r3, sp, #12
 801e72e:	9300      	str	r3, [sp, #0]
 801e730:	462a      	mov	r2, r5
 801e732:	4b16      	ldr	r3, [pc, #88]	; (801e78c <_vfiprintf_r+0x258>)
 801e734:	a904      	add	r1, sp, #16
 801e736:	4630      	mov	r0, r6
 801e738:	f7fd faaa 	bl	801bc90 <_printf_float>
 801e73c:	4607      	mov	r7, r0
 801e73e:	1c78      	adds	r0, r7, #1
 801e740:	d1d6      	bne.n	801e6f0 <_vfiprintf_r+0x1bc>
 801e742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e744:	07d9      	lsls	r1, r3, #31
 801e746:	d405      	bmi.n	801e754 <_vfiprintf_r+0x220>
 801e748:	89ab      	ldrh	r3, [r5, #12]
 801e74a:	059a      	lsls	r2, r3, #22
 801e74c:	d402      	bmi.n	801e754 <_vfiprintf_r+0x220>
 801e74e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e750:	f7fe ff44 	bl	801d5dc <__retarget_lock_release_recursive>
 801e754:	89ab      	ldrh	r3, [r5, #12]
 801e756:	065b      	lsls	r3, r3, #25
 801e758:	f53f af12 	bmi.w	801e580 <_vfiprintf_r+0x4c>
 801e75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e75e:	e711      	b.n	801e584 <_vfiprintf_r+0x50>
 801e760:	ab03      	add	r3, sp, #12
 801e762:	9300      	str	r3, [sp, #0]
 801e764:	462a      	mov	r2, r5
 801e766:	4b09      	ldr	r3, [pc, #36]	; (801e78c <_vfiprintf_r+0x258>)
 801e768:	a904      	add	r1, sp, #16
 801e76a:	4630      	mov	r0, r6
 801e76c:	f7fd fd1c 	bl	801c1a8 <_printf_i>
 801e770:	e7e4      	b.n	801e73c <_vfiprintf_r+0x208>
 801e772:	bf00      	nop
 801e774:	08046784 	.word	0x08046784
 801e778:	080467a4 	.word	0x080467a4
 801e77c:	08046764 	.word	0x08046764
 801e780:	08046924 	.word	0x08046924
 801e784:	0804692e 	.word	0x0804692e
 801e788:	0801bc91 	.word	0x0801bc91
 801e78c:	0801e50f 	.word	0x0801e50f
 801e790:	0804692a 	.word	0x0804692a

0801e794 <_scanf_chars>:
 801e794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e798:	4615      	mov	r5, r2
 801e79a:	688a      	ldr	r2, [r1, #8]
 801e79c:	4680      	mov	r8, r0
 801e79e:	460c      	mov	r4, r1
 801e7a0:	b932      	cbnz	r2, 801e7b0 <_scanf_chars+0x1c>
 801e7a2:	698a      	ldr	r2, [r1, #24]
 801e7a4:	2a00      	cmp	r2, #0
 801e7a6:	bf0c      	ite	eq
 801e7a8:	2201      	moveq	r2, #1
 801e7aa:	f04f 32ff 	movne.w	r2, #4294967295
 801e7ae:	608a      	str	r2, [r1, #8]
 801e7b0:	6822      	ldr	r2, [r4, #0]
 801e7b2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801e840 <_scanf_chars+0xac>
 801e7b6:	06d1      	lsls	r1, r2, #27
 801e7b8:	bf5f      	itttt	pl
 801e7ba:	681a      	ldrpl	r2, [r3, #0]
 801e7bc:	1d11      	addpl	r1, r2, #4
 801e7be:	6019      	strpl	r1, [r3, #0]
 801e7c0:	6816      	ldrpl	r6, [r2, #0]
 801e7c2:	2700      	movs	r7, #0
 801e7c4:	69a0      	ldr	r0, [r4, #24]
 801e7c6:	b188      	cbz	r0, 801e7ec <_scanf_chars+0x58>
 801e7c8:	2801      	cmp	r0, #1
 801e7ca:	d107      	bne.n	801e7dc <_scanf_chars+0x48>
 801e7cc:	682b      	ldr	r3, [r5, #0]
 801e7ce:	781a      	ldrb	r2, [r3, #0]
 801e7d0:	6963      	ldr	r3, [r4, #20]
 801e7d2:	5c9b      	ldrb	r3, [r3, r2]
 801e7d4:	b953      	cbnz	r3, 801e7ec <_scanf_chars+0x58>
 801e7d6:	bb27      	cbnz	r7, 801e822 <_scanf_chars+0x8e>
 801e7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7dc:	2802      	cmp	r0, #2
 801e7de:	d120      	bne.n	801e822 <_scanf_chars+0x8e>
 801e7e0:	682b      	ldr	r3, [r5, #0]
 801e7e2:	781b      	ldrb	r3, [r3, #0]
 801e7e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 801e7e8:	071b      	lsls	r3, r3, #28
 801e7ea:	d41a      	bmi.n	801e822 <_scanf_chars+0x8e>
 801e7ec:	6823      	ldr	r3, [r4, #0]
 801e7ee:	06da      	lsls	r2, r3, #27
 801e7f0:	bf5e      	ittt	pl
 801e7f2:	682b      	ldrpl	r3, [r5, #0]
 801e7f4:	781b      	ldrbpl	r3, [r3, #0]
 801e7f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e7fa:	682a      	ldr	r2, [r5, #0]
 801e7fc:	686b      	ldr	r3, [r5, #4]
 801e7fe:	3201      	adds	r2, #1
 801e800:	602a      	str	r2, [r5, #0]
 801e802:	68a2      	ldr	r2, [r4, #8]
 801e804:	3b01      	subs	r3, #1
 801e806:	3a01      	subs	r2, #1
 801e808:	606b      	str	r3, [r5, #4]
 801e80a:	3701      	adds	r7, #1
 801e80c:	60a2      	str	r2, [r4, #8]
 801e80e:	b142      	cbz	r2, 801e822 <_scanf_chars+0x8e>
 801e810:	2b00      	cmp	r3, #0
 801e812:	dcd7      	bgt.n	801e7c4 <_scanf_chars+0x30>
 801e814:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e818:	4629      	mov	r1, r5
 801e81a:	4640      	mov	r0, r8
 801e81c:	4798      	blx	r3
 801e81e:	2800      	cmp	r0, #0
 801e820:	d0d0      	beq.n	801e7c4 <_scanf_chars+0x30>
 801e822:	6823      	ldr	r3, [r4, #0]
 801e824:	f013 0310 	ands.w	r3, r3, #16
 801e828:	d105      	bne.n	801e836 <_scanf_chars+0xa2>
 801e82a:	68e2      	ldr	r2, [r4, #12]
 801e82c:	3201      	adds	r2, #1
 801e82e:	60e2      	str	r2, [r4, #12]
 801e830:	69a2      	ldr	r2, [r4, #24]
 801e832:	b102      	cbz	r2, 801e836 <_scanf_chars+0xa2>
 801e834:	7033      	strb	r3, [r6, #0]
 801e836:	6923      	ldr	r3, [r4, #16]
 801e838:	441f      	add	r7, r3
 801e83a:	6127      	str	r7, [r4, #16]
 801e83c:	2000      	movs	r0, #0
 801e83e:	e7cb      	b.n	801e7d8 <_scanf_chars+0x44>
 801e840:	080464f9 	.word	0x080464f9

0801e844 <_scanf_i>:
 801e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e848:	4698      	mov	r8, r3
 801e84a:	4b74      	ldr	r3, [pc, #464]	; (801ea1c <_scanf_i+0x1d8>)
 801e84c:	460c      	mov	r4, r1
 801e84e:	4682      	mov	sl, r0
 801e850:	4616      	mov	r6, r2
 801e852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e856:	b087      	sub	sp, #28
 801e858:	ab03      	add	r3, sp, #12
 801e85a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e85e:	4b70      	ldr	r3, [pc, #448]	; (801ea20 <_scanf_i+0x1dc>)
 801e860:	69a1      	ldr	r1, [r4, #24]
 801e862:	4a70      	ldr	r2, [pc, #448]	; (801ea24 <_scanf_i+0x1e0>)
 801e864:	2903      	cmp	r1, #3
 801e866:	bf18      	it	ne
 801e868:	461a      	movne	r2, r3
 801e86a:	68a3      	ldr	r3, [r4, #8]
 801e86c:	9201      	str	r2, [sp, #4]
 801e86e:	1e5a      	subs	r2, r3, #1
 801e870:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e874:	bf88      	it	hi
 801e876:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e87a:	4627      	mov	r7, r4
 801e87c:	bf82      	ittt	hi
 801e87e:	eb03 0905 	addhi.w	r9, r3, r5
 801e882:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e886:	60a3      	strhi	r3, [r4, #8]
 801e888:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e88c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e890:	bf98      	it	ls
 801e892:	f04f 0900 	movls.w	r9, #0
 801e896:	6023      	str	r3, [r4, #0]
 801e898:	463d      	mov	r5, r7
 801e89a:	f04f 0b00 	mov.w	fp, #0
 801e89e:	6831      	ldr	r1, [r6, #0]
 801e8a0:	ab03      	add	r3, sp, #12
 801e8a2:	7809      	ldrb	r1, [r1, #0]
 801e8a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e8a8:	2202      	movs	r2, #2
 801e8aa:	f7e1 fd31 	bl	8000310 <memchr>
 801e8ae:	b328      	cbz	r0, 801e8fc <_scanf_i+0xb8>
 801e8b0:	f1bb 0f01 	cmp.w	fp, #1
 801e8b4:	d159      	bne.n	801e96a <_scanf_i+0x126>
 801e8b6:	6862      	ldr	r2, [r4, #4]
 801e8b8:	b92a      	cbnz	r2, 801e8c6 <_scanf_i+0x82>
 801e8ba:	6822      	ldr	r2, [r4, #0]
 801e8bc:	2308      	movs	r3, #8
 801e8be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8c2:	6063      	str	r3, [r4, #4]
 801e8c4:	6022      	str	r2, [r4, #0]
 801e8c6:	6822      	ldr	r2, [r4, #0]
 801e8c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e8cc:	6022      	str	r2, [r4, #0]
 801e8ce:	68a2      	ldr	r2, [r4, #8]
 801e8d0:	1e51      	subs	r1, r2, #1
 801e8d2:	60a1      	str	r1, [r4, #8]
 801e8d4:	b192      	cbz	r2, 801e8fc <_scanf_i+0xb8>
 801e8d6:	6832      	ldr	r2, [r6, #0]
 801e8d8:	1c51      	adds	r1, r2, #1
 801e8da:	6031      	str	r1, [r6, #0]
 801e8dc:	7812      	ldrb	r2, [r2, #0]
 801e8de:	f805 2b01 	strb.w	r2, [r5], #1
 801e8e2:	6872      	ldr	r2, [r6, #4]
 801e8e4:	3a01      	subs	r2, #1
 801e8e6:	2a00      	cmp	r2, #0
 801e8e8:	6072      	str	r2, [r6, #4]
 801e8ea:	dc07      	bgt.n	801e8fc <_scanf_i+0xb8>
 801e8ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801e8f0:	4631      	mov	r1, r6
 801e8f2:	4650      	mov	r0, sl
 801e8f4:	4790      	blx	r2
 801e8f6:	2800      	cmp	r0, #0
 801e8f8:	f040 8085 	bne.w	801ea06 <_scanf_i+0x1c2>
 801e8fc:	f10b 0b01 	add.w	fp, fp, #1
 801e900:	f1bb 0f03 	cmp.w	fp, #3
 801e904:	d1cb      	bne.n	801e89e <_scanf_i+0x5a>
 801e906:	6863      	ldr	r3, [r4, #4]
 801e908:	b90b      	cbnz	r3, 801e90e <_scanf_i+0xca>
 801e90a:	230a      	movs	r3, #10
 801e90c:	6063      	str	r3, [r4, #4]
 801e90e:	6863      	ldr	r3, [r4, #4]
 801e910:	4945      	ldr	r1, [pc, #276]	; (801ea28 <_scanf_i+0x1e4>)
 801e912:	6960      	ldr	r0, [r4, #20]
 801e914:	1ac9      	subs	r1, r1, r3
 801e916:	f000 f8ab 	bl	801ea70 <__sccl>
 801e91a:	f04f 0b00 	mov.w	fp, #0
 801e91e:	68a3      	ldr	r3, [r4, #8]
 801e920:	6822      	ldr	r2, [r4, #0]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d03d      	beq.n	801e9a2 <_scanf_i+0x15e>
 801e926:	6831      	ldr	r1, [r6, #0]
 801e928:	6960      	ldr	r0, [r4, #20]
 801e92a:	f891 c000 	ldrb.w	ip, [r1]
 801e92e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e932:	2800      	cmp	r0, #0
 801e934:	d035      	beq.n	801e9a2 <_scanf_i+0x15e>
 801e936:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801e93a:	d124      	bne.n	801e986 <_scanf_i+0x142>
 801e93c:	0510      	lsls	r0, r2, #20
 801e93e:	d522      	bpl.n	801e986 <_scanf_i+0x142>
 801e940:	f10b 0b01 	add.w	fp, fp, #1
 801e944:	f1b9 0f00 	cmp.w	r9, #0
 801e948:	d003      	beq.n	801e952 <_scanf_i+0x10e>
 801e94a:	3301      	adds	r3, #1
 801e94c:	f109 39ff 	add.w	r9, r9, #4294967295
 801e950:	60a3      	str	r3, [r4, #8]
 801e952:	6873      	ldr	r3, [r6, #4]
 801e954:	3b01      	subs	r3, #1
 801e956:	2b00      	cmp	r3, #0
 801e958:	6073      	str	r3, [r6, #4]
 801e95a:	dd1b      	ble.n	801e994 <_scanf_i+0x150>
 801e95c:	6833      	ldr	r3, [r6, #0]
 801e95e:	3301      	adds	r3, #1
 801e960:	6033      	str	r3, [r6, #0]
 801e962:	68a3      	ldr	r3, [r4, #8]
 801e964:	3b01      	subs	r3, #1
 801e966:	60a3      	str	r3, [r4, #8]
 801e968:	e7d9      	b.n	801e91e <_scanf_i+0xda>
 801e96a:	f1bb 0f02 	cmp.w	fp, #2
 801e96e:	d1ae      	bne.n	801e8ce <_scanf_i+0x8a>
 801e970:	6822      	ldr	r2, [r4, #0]
 801e972:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e976:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e97a:	d1bf      	bne.n	801e8fc <_scanf_i+0xb8>
 801e97c:	2310      	movs	r3, #16
 801e97e:	6063      	str	r3, [r4, #4]
 801e980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e984:	e7a2      	b.n	801e8cc <_scanf_i+0x88>
 801e986:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e98a:	6022      	str	r2, [r4, #0]
 801e98c:	780b      	ldrb	r3, [r1, #0]
 801e98e:	f805 3b01 	strb.w	r3, [r5], #1
 801e992:	e7de      	b.n	801e952 <_scanf_i+0x10e>
 801e994:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e998:	4631      	mov	r1, r6
 801e99a:	4650      	mov	r0, sl
 801e99c:	4798      	blx	r3
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	d0df      	beq.n	801e962 <_scanf_i+0x11e>
 801e9a2:	6823      	ldr	r3, [r4, #0]
 801e9a4:	05d9      	lsls	r1, r3, #23
 801e9a6:	d50d      	bpl.n	801e9c4 <_scanf_i+0x180>
 801e9a8:	42bd      	cmp	r5, r7
 801e9aa:	d909      	bls.n	801e9c0 <_scanf_i+0x17c>
 801e9ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e9b4:	4632      	mov	r2, r6
 801e9b6:	4650      	mov	r0, sl
 801e9b8:	4798      	blx	r3
 801e9ba:	f105 39ff 	add.w	r9, r5, #4294967295
 801e9be:	464d      	mov	r5, r9
 801e9c0:	42bd      	cmp	r5, r7
 801e9c2:	d028      	beq.n	801ea16 <_scanf_i+0x1d2>
 801e9c4:	6822      	ldr	r2, [r4, #0]
 801e9c6:	f012 0210 	ands.w	r2, r2, #16
 801e9ca:	d113      	bne.n	801e9f4 <_scanf_i+0x1b0>
 801e9cc:	702a      	strb	r2, [r5, #0]
 801e9ce:	6863      	ldr	r3, [r4, #4]
 801e9d0:	9e01      	ldr	r6, [sp, #4]
 801e9d2:	4639      	mov	r1, r7
 801e9d4:	4650      	mov	r0, sl
 801e9d6:	47b0      	blx	r6
 801e9d8:	f8d8 3000 	ldr.w	r3, [r8]
 801e9dc:	6821      	ldr	r1, [r4, #0]
 801e9de:	1d1a      	adds	r2, r3, #4
 801e9e0:	f8c8 2000 	str.w	r2, [r8]
 801e9e4:	f011 0f20 	tst.w	r1, #32
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	d00f      	beq.n	801ea0c <_scanf_i+0x1c8>
 801e9ec:	6018      	str	r0, [r3, #0]
 801e9ee:	68e3      	ldr	r3, [r4, #12]
 801e9f0:	3301      	adds	r3, #1
 801e9f2:	60e3      	str	r3, [r4, #12]
 801e9f4:	1bed      	subs	r5, r5, r7
 801e9f6:	44ab      	add	fp, r5
 801e9f8:	6925      	ldr	r5, [r4, #16]
 801e9fa:	445d      	add	r5, fp
 801e9fc:	6125      	str	r5, [r4, #16]
 801e9fe:	2000      	movs	r0, #0
 801ea00:	b007      	add	sp, #28
 801ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea06:	f04f 0b00 	mov.w	fp, #0
 801ea0a:	e7ca      	b.n	801e9a2 <_scanf_i+0x15e>
 801ea0c:	07ca      	lsls	r2, r1, #31
 801ea0e:	bf4c      	ite	mi
 801ea10:	8018      	strhmi	r0, [r3, #0]
 801ea12:	6018      	strpl	r0, [r3, #0]
 801ea14:	e7eb      	b.n	801e9ee <_scanf_i+0x1aa>
 801ea16:	2001      	movs	r0, #1
 801ea18:	e7f2      	b.n	801ea00 <_scanf_i+0x1bc>
 801ea1a:	bf00      	nop
 801ea1c:	080230bc 	.word	0x080230bc
 801ea20:	0801ebdd 	.word	0x0801ebdd
 801ea24:	0801c711 	.word	0x0801c711
 801ea28:	0804694e 	.word	0x0804694e

0801ea2c <_read_r>:
 801ea2c:	b538      	push	{r3, r4, r5, lr}
 801ea2e:	4d07      	ldr	r5, [pc, #28]	; (801ea4c <_read_r+0x20>)
 801ea30:	4604      	mov	r4, r0
 801ea32:	4608      	mov	r0, r1
 801ea34:	4611      	mov	r1, r2
 801ea36:	2200      	movs	r2, #0
 801ea38:	602a      	str	r2, [r5, #0]
 801ea3a:	461a      	mov	r2, r3
 801ea3c:	f7e3 f9e6 	bl	8001e0c <_read>
 801ea40:	1c43      	adds	r3, r0, #1
 801ea42:	d102      	bne.n	801ea4a <_read_r+0x1e>
 801ea44:	682b      	ldr	r3, [r5, #0]
 801ea46:	b103      	cbz	r3, 801ea4a <_read_r+0x1e>
 801ea48:	6023      	str	r3, [r4, #0]
 801ea4a:	bd38      	pop	{r3, r4, r5, pc}
 801ea4c:	240079cc 	.word	0x240079cc

0801ea50 <_sbrk_r>:
 801ea50:	b538      	push	{r3, r4, r5, lr}
 801ea52:	4d06      	ldr	r5, [pc, #24]	; (801ea6c <_sbrk_r+0x1c>)
 801ea54:	2300      	movs	r3, #0
 801ea56:	4604      	mov	r4, r0
 801ea58:	4608      	mov	r0, r1
 801ea5a:	602b      	str	r3, [r5, #0]
 801ea5c:	f7e3 fa44 	bl	8001ee8 <_sbrk>
 801ea60:	1c43      	adds	r3, r0, #1
 801ea62:	d102      	bne.n	801ea6a <_sbrk_r+0x1a>
 801ea64:	682b      	ldr	r3, [r5, #0]
 801ea66:	b103      	cbz	r3, 801ea6a <_sbrk_r+0x1a>
 801ea68:	6023      	str	r3, [r4, #0]
 801ea6a:	bd38      	pop	{r3, r4, r5, pc}
 801ea6c:	240079cc 	.word	0x240079cc

0801ea70 <__sccl>:
 801ea70:	b570      	push	{r4, r5, r6, lr}
 801ea72:	780b      	ldrb	r3, [r1, #0]
 801ea74:	4604      	mov	r4, r0
 801ea76:	2b5e      	cmp	r3, #94	; 0x5e
 801ea78:	bf0b      	itete	eq
 801ea7a:	784b      	ldrbeq	r3, [r1, #1]
 801ea7c:	1c48      	addne	r0, r1, #1
 801ea7e:	1c88      	addeq	r0, r1, #2
 801ea80:	2200      	movne	r2, #0
 801ea82:	bf08      	it	eq
 801ea84:	2201      	moveq	r2, #1
 801ea86:	1e61      	subs	r1, r4, #1
 801ea88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ea8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801ea90:	42a9      	cmp	r1, r5
 801ea92:	d1fb      	bne.n	801ea8c <__sccl+0x1c>
 801ea94:	b90b      	cbnz	r3, 801ea9a <__sccl+0x2a>
 801ea96:	3801      	subs	r0, #1
 801ea98:	bd70      	pop	{r4, r5, r6, pc}
 801ea9a:	f082 0101 	eor.w	r1, r2, #1
 801ea9e:	54e1      	strb	r1, [r4, r3]
 801eaa0:	1c42      	adds	r2, r0, #1
 801eaa2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801eaa6:	2d2d      	cmp	r5, #45	; 0x2d
 801eaa8:	f102 36ff 	add.w	r6, r2, #4294967295
 801eaac:	4610      	mov	r0, r2
 801eaae:	d006      	beq.n	801eabe <__sccl+0x4e>
 801eab0:	2d5d      	cmp	r5, #93	; 0x5d
 801eab2:	d0f1      	beq.n	801ea98 <__sccl+0x28>
 801eab4:	b90d      	cbnz	r5, 801eaba <__sccl+0x4a>
 801eab6:	4630      	mov	r0, r6
 801eab8:	e7ee      	b.n	801ea98 <__sccl+0x28>
 801eaba:	462b      	mov	r3, r5
 801eabc:	e7ef      	b.n	801ea9e <__sccl+0x2e>
 801eabe:	7816      	ldrb	r6, [r2, #0]
 801eac0:	2e5d      	cmp	r6, #93	; 0x5d
 801eac2:	d0fa      	beq.n	801eaba <__sccl+0x4a>
 801eac4:	42b3      	cmp	r3, r6
 801eac6:	dcf8      	bgt.n	801eaba <__sccl+0x4a>
 801eac8:	4618      	mov	r0, r3
 801eaca:	3001      	adds	r0, #1
 801eacc:	4286      	cmp	r6, r0
 801eace:	5421      	strb	r1, [r4, r0]
 801ead0:	dcfb      	bgt.n	801eaca <__sccl+0x5a>
 801ead2:	43d8      	mvns	r0, r3
 801ead4:	4430      	add	r0, r6
 801ead6:	1c5d      	adds	r5, r3, #1
 801ead8:	42b3      	cmp	r3, r6
 801eada:	bfa8      	it	ge
 801eadc:	2000      	movge	r0, #0
 801eade:	182b      	adds	r3, r5, r0
 801eae0:	3202      	adds	r2, #2
 801eae2:	e7de      	b.n	801eaa2 <__sccl+0x32>

0801eae4 <_strtoul_l.isra.0>:
 801eae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eae8:	4e3b      	ldr	r6, [pc, #236]	; (801ebd8 <_strtoul_l.isra.0+0xf4>)
 801eaea:	4686      	mov	lr, r0
 801eaec:	468c      	mov	ip, r1
 801eaee:	4660      	mov	r0, ip
 801eaf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801eaf4:	5da5      	ldrb	r5, [r4, r6]
 801eaf6:	f015 0508 	ands.w	r5, r5, #8
 801eafa:	d1f8      	bne.n	801eaee <_strtoul_l.isra.0+0xa>
 801eafc:	2c2d      	cmp	r4, #45	; 0x2d
 801eafe:	d134      	bne.n	801eb6a <_strtoul_l.isra.0+0x86>
 801eb00:	f89c 4000 	ldrb.w	r4, [ip]
 801eb04:	f04f 0801 	mov.w	r8, #1
 801eb08:	f100 0c02 	add.w	ip, r0, #2
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d05e      	beq.n	801ebce <_strtoul_l.isra.0+0xea>
 801eb10:	2b10      	cmp	r3, #16
 801eb12:	d10c      	bne.n	801eb2e <_strtoul_l.isra.0+0x4a>
 801eb14:	2c30      	cmp	r4, #48	; 0x30
 801eb16:	d10a      	bne.n	801eb2e <_strtoul_l.isra.0+0x4a>
 801eb18:	f89c 0000 	ldrb.w	r0, [ip]
 801eb1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801eb20:	2858      	cmp	r0, #88	; 0x58
 801eb22:	d14f      	bne.n	801ebc4 <_strtoul_l.isra.0+0xe0>
 801eb24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801eb28:	2310      	movs	r3, #16
 801eb2a:	f10c 0c02 	add.w	ip, ip, #2
 801eb2e:	f04f 37ff 	mov.w	r7, #4294967295
 801eb32:	2500      	movs	r5, #0
 801eb34:	fbb7 f7f3 	udiv	r7, r7, r3
 801eb38:	fb03 f907 	mul.w	r9, r3, r7
 801eb3c:	ea6f 0909 	mvn.w	r9, r9
 801eb40:	4628      	mov	r0, r5
 801eb42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801eb46:	2e09      	cmp	r6, #9
 801eb48:	d818      	bhi.n	801eb7c <_strtoul_l.isra.0+0x98>
 801eb4a:	4634      	mov	r4, r6
 801eb4c:	42a3      	cmp	r3, r4
 801eb4e:	dd24      	ble.n	801eb9a <_strtoul_l.isra.0+0xb6>
 801eb50:	2d00      	cmp	r5, #0
 801eb52:	db1f      	blt.n	801eb94 <_strtoul_l.isra.0+0xb0>
 801eb54:	4287      	cmp	r7, r0
 801eb56:	d31d      	bcc.n	801eb94 <_strtoul_l.isra.0+0xb0>
 801eb58:	d101      	bne.n	801eb5e <_strtoul_l.isra.0+0x7a>
 801eb5a:	45a1      	cmp	r9, r4
 801eb5c:	db1a      	blt.n	801eb94 <_strtoul_l.isra.0+0xb0>
 801eb5e:	fb00 4003 	mla	r0, r0, r3, r4
 801eb62:	2501      	movs	r5, #1
 801eb64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801eb68:	e7eb      	b.n	801eb42 <_strtoul_l.isra.0+0x5e>
 801eb6a:	2c2b      	cmp	r4, #43	; 0x2b
 801eb6c:	bf08      	it	eq
 801eb6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801eb72:	46a8      	mov	r8, r5
 801eb74:	bf08      	it	eq
 801eb76:	f100 0c02 	addeq.w	ip, r0, #2
 801eb7a:	e7c7      	b.n	801eb0c <_strtoul_l.isra.0+0x28>
 801eb7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801eb80:	2e19      	cmp	r6, #25
 801eb82:	d801      	bhi.n	801eb88 <_strtoul_l.isra.0+0xa4>
 801eb84:	3c37      	subs	r4, #55	; 0x37
 801eb86:	e7e1      	b.n	801eb4c <_strtoul_l.isra.0+0x68>
 801eb88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801eb8c:	2e19      	cmp	r6, #25
 801eb8e:	d804      	bhi.n	801eb9a <_strtoul_l.isra.0+0xb6>
 801eb90:	3c57      	subs	r4, #87	; 0x57
 801eb92:	e7db      	b.n	801eb4c <_strtoul_l.isra.0+0x68>
 801eb94:	f04f 35ff 	mov.w	r5, #4294967295
 801eb98:	e7e4      	b.n	801eb64 <_strtoul_l.isra.0+0x80>
 801eb9a:	2d00      	cmp	r5, #0
 801eb9c:	da07      	bge.n	801ebae <_strtoul_l.isra.0+0xca>
 801eb9e:	2322      	movs	r3, #34	; 0x22
 801eba0:	f8ce 3000 	str.w	r3, [lr]
 801eba4:	f04f 30ff 	mov.w	r0, #4294967295
 801eba8:	b942      	cbnz	r2, 801ebbc <_strtoul_l.isra.0+0xd8>
 801ebaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ebae:	f1b8 0f00 	cmp.w	r8, #0
 801ebb2:	d000      	beq.n	801ebb6 <_strtoul_l.isra.0+0xd2>
 801ebb4:	4240      	negs	r0, r0
 801ebb6:	2a00      	cmp	r2, #0
 801ebb8:	d0f7      	beq.n	801ebaa <_strtoul_l.isra.0+0xc6>
 801ebba:	b10d      	cbz	r5, 801ebc0 <_strtoul_l.isra.0+0xdc>
 801ebbc:	f10c 31ff 	add.w	r1, ip, #4294967295
 801ebc0:	6011      	str	r1, [r2, #0]
 801ebc2:	e7f2      	b.n	801ebaa <_strtoul_l.isra.0+0xc6>
 801ebc4:	2430      	movs	r4, #48	; 0x30
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d1b1      	bne.n	801eb2e <_strtoul_l.isra.0+0x4a>
 801ebca:	2308      	movs	r3, #8
 801ebcc:	e7af      	b.n	801eb2e <_strtoul_l.isra.0+0x4a>
 801ebce:	2c30      	cmp	r4, #48	; 0x30
 801ebd0:	d0a2      	beq.n	801eb18 <_strtoul_l.isra.0+0x34>
 801ebd2:	230a      	movs	r3, #10
 801ebd4:	e7ab      	b.n	801eb2e <_strtoul_l.isra.0+0x4a>
 801ebd6:	bf00      	nop
 801ebd8:	080464f9 	.word	0x080464f9

0801ebdc <_strtoul_r>:
 801ebdc:	f7ff bf82 	b.w	801eae4 <_strtoul_l.isra.0>

0801ebe0 <__submore>:
 801ebe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebe4:	460c      	mov	r4, r1
 801ebe6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ebe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ebec:	4299      	cmp	r1, r3
 801ebee:	d11d      	bne.n	801ec2c <__submore+0x4c>
 801ebf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ebf4:	f7ff f8ec 	bl	801ddd0 <_malloc_r>
 801ebf8:	b918      	cbnz	r0, 801ec02 <__submore+0x22>
 801ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 801ebfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec06:	63a3      	str	r3, [r4, #56]	; 0x38
 801ec08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ec0c:	6360      	str	r0, [r4, #52]	; 0x34
 801ec0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ec12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ec16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ec1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ec1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ec22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ec26:	6020      	str	r0, [r4, #0]
 801ec28:	2000      	movs	r0, #0
 801ec2a:	e7e8      	b.n	801ebfe <__submore+0x1e>
 801ec2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ec2e:	0077      	lsls	r7, r6, #1
 801ec30:	463a      	mov	r2, r7
 801ec32:	f000 fa1b 	bl	801f06c <_realloc_r>
 801ec36:	4605      	mov	r5, r0
 801ec38:	2800      	cmp	r0, #0
 801ec3a:	d0de      	beq.n	801ebfa <__submore+0x1a>
 801ec3c:	eb00 0806 	add.w	r8, r0, r6
 801ec40:	4601      	mov	r1, r0
 801ec42:	4632      	mov	r2, r6
 801ec44:	4640      	mov	r0, r8
 801ec46:	f7fc ff63 	bl	801bb10 <memcpy>
 801ec4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ec4e:	f8c4 8000 	str.w	r8, [r4]
 801ec52:	e7e9      	b.n	801ec28 <__submore+0x48>

0801ec54 <__swbuf_r>:
 801ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec56:	460e      	mov	r6, r1
 801ec58:	4614      	mov	r4, r2
 801ec5a:	4605      	mov	r5, r0
 801ec5c:	b118      	cbz	r0, 801ec66 <__swbuf_r+0x12>
 801ec5e:	6983      	ldr	r3, [r0, #24]
 801ec60:	b90b      	cbnz	r3, 801ec66 <__swbuf_r+0x12>
 801ec62:	f7fe fc05 	bl	801d470 <__sinit>
 801ec66:	4b21      	ldr	r3, [pc, #132]	; (801ecec <__swbuf_r+0x98>)
 801ec68:	429c      	cmp	r4, r3
 801ec6a:	d12b      	bne.n	801ecc4 <__swbuf_r+0x70>
 801ec6c:	686c      	ldr	r4, [r5, #4]
 801ec6e:	69a3      	ldr	r3, [r4, #24]
 801ec70:	60a3      	str	r3, [r4, #8]
 801ec72:	89a3      	ldrh	r3, [r4, #12]
 801ec74:	071a      	lsls	r2, r3, #28
 801ec76:	d52f      	bpl.n	801ecd8 <__swbuf_r+0x84>
 801ec78:	6923      	ldr	r3, [r4, #16]
 801ec7a:	b36b      	cbz	r3, 801ecd8 <__swbuf_r+0x84>
 801ec7c:	6923      	ldr	r3, [r4, #16]
 801ec7e:	6820      	ldr	r0, [r4, #0]
 801ec80:	1ac0      	subs	r0, r0, r3
 801ec82:	6963      	ldr	r3, [r4, #20]
 801ec84:	b2f6      	uxtb	r6, r6
 801ec86:	4283      	cmp	r3, r0
 801ec88:	4637      	mov	r7, r6
 801ec8a:	dc04      	bgt.n	801ec96 <__swbuf_r+0x42>
 801ec8c:	4621      	mov	r1, r4
 801ec8e:	4628      	mov	r0, r5
 801ec90:	f000 f92e 	bl	801eef0 <_fflush_r>
 801ec94:	bb30      	cbnz	r0, 801ece4 <__swbuf_r+0x90>
 801ec96:	68a3      	ldr	r3, [r4, #8]
 801ec98:	3b01      	subs	r3, #1
 801ec9a:	60a3      	str	r3, [r4, #8]
 801ec9c:	6823      	ldr	r3, [r4, #0]
 801ec9e:	1c5a      	adds	r2, r3, #1
 801eca0:	6022      	str	r2, [r4, #0]
 801eca2:	701e      	strb	r6, [r3, #0]
 801eca4:	6963      	ldr	r3, [r4, #20]
 801eca6:	3001      	adds	r0, #1
 801eca8:	4283      	cmp	r3, r0
 801ecaa:	d004      	beq.n	801ecb6 <__swbuf_r+0x62>
 801ecac:	89a3      	ldrh	r3, [r4, #12]
 801ecae:	07db      	lsls	r3, r3, #31
 801ecb0:	d506      	bpl.n	801ecc0 <__swbuf_r+0x6c>
 801ecb2:	2e0a      	cmp	r6, #10
 801ecb4:	d104      	bne.n	801ecc0 <__swbuf_r+0x6c>
 801ecb6:	4621      	mov	r1, r4
 801ecb8:	4628      	mov	r0, r5
 801ecba:	f000 f919 	bl	801eef0 <_fflush_r>
 801ecbe:	b988      	cbnz	r0, 801ece4 <__swbuf_r+0x90>
 801ecc0:	4638      	mov	r0, r7
 801ecc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecc4:	4b0a      	ldr	r3, [pc, #40]	; (801ecf0 <__swbuf_r+0x9c>)
 801ecc6:	429c      	cmp	r4, r3
 801ecc8:	d101      	bne.n	801ecce <__swbuf_r+0x7a>
 801ecca:	68ac      	ldr	r4, [r5, #8]
 801eccc:	e7cf      	b.n	801ec6e <__swbuf_r+0x1a>
 801ecce:	4b09      	ldr	r3, [pc, #36]	; (801ecf4 <__swbuf_r+0xa0>)
 801ecd0:	429c      	cmp	r4, r3
 801ecd2:	bf08      	it	eq
 801ecd4:	68ec      	ldreq	r4, [r5, #12]
 801ecd6:	e7ca      	b.n	801ec6e <__swbuf_r+0x1a>
 801ecd8:	4621      	mov	r1, r4
 801ecda:	4628      	mov	r0, r5
 801ecdc:	f000 f80c 	bl	801ecf8 <__swsetup_r>
 801ece0:	2800      	cmp	r0, #0
 801ece2:	d0cb      	beq.n	801ec7c <__swbuf_r+0x28>
 801ece4:	f04f 37ff 	mov.w	r7, #4294967295
 801ece8:	e7ea      	b.n	801ecc0 <__swbuf_r+0x6c>
 801ecea:	bf00      	nop
 801ecec:	08046784 	.word	0x08046784
 801ecf0:	080467a4 	.word	0x080467a4
 801ecf4:	08046764 	.word	0x08046764

0801ecf8 <__swsetup_r>:
 801ecf8:	4b32      	ldr	r3, [pc, #200]	; (801edc4 <__swsetup_r+0xcc>)
 801ecfa:	b570      	push	{r4, r5, r6, lr}
 801ecfc:	681d      	ldr	r5, [r3, #0]
 801ecfe:	4606      	mov	r6, r0
 801ed00:	460c      	mov	r4, r1
 801ed02:	b125      	cbz	r5, 801ed0e <__swsetup_r+0x16>
 801ed04:	69ab      	ldr	r3, [r5, #24]
 801ed06:	b913      	cbnz	r3, 801ed0e <__swsetup_r+0x16>
 801ed08:	4628      	mov	r0, r5
 801ed0a:	f7fe fbb1 	bl	801d470 <__sinit>
 801ed0e:	4b2e      	ldr	r3, [pc, #184]	; (801edc8 <__swsetup_r+0xd0>)
 801ed10:	429c      	cmp	r4, r3
 801ed12:	d10f      	bne.n	801ed34 <__swsetup_r+0x3c>
 801ed14:	686c      	ldr	r4, [r5, #4]
 801ed16:	89a3      	ldrh	r3, [r4, #12]
 801ed18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ed1c:	0719      	lsls	r1, r3, #28
 801ed1e:	d42c      	bmi.n	801ed7a <__swsetup_r+0x82>
 801ed20:	06dd      	lsls	r5, r3, #27
 801ed22:	d411      	bmi.n	801ed48 <__swsetup_r+0x50>
 801ed24:	2309      	movs	r3, #9
 801ed26:	6033      	str	r3, [r6, #0]
 801ed28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ed2c:	81a3      	strh	r3, [r4, #12]
 801ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed32:	e03e      	b.n	801edb2 <__swsetup_r+0xba>
 801ed34:	4b25      	ldr	r3, [pc, #148]	; (801edcc <__swsetup_r+0xd4>)
 801ed36:	429c      	cmp	r4, r3
 801ed38:	d101      	bne.n	801ed3e <__swsetup_r+0x46>
 801ed3a:	68ac      	ldr	r4, [r5, #8]
 801ed3c:	e7eb      	b.n	801ed16 <__swsetup_r+0x1e>
 801ed3e:	4b24      	ldr	r3, [pc, #144]	; (801edd0 <__swsetup_r+0xd8>)
 801ed40:	429c      	cmp	r4, r3
 801ed42:	bf08      	it	eq
 801ed44:	68ec      	ldreq	r4, [r5, #12]
 801ed46:	e7e6      	b.n	801ed16 <__swsetup_r+0x1e>
 801ed48:	0758      	lsls	r0, r3, #29
 801ed4a:	d512      	bpl.n	801ed72 <__swsetup_r+0x7a>
 801ed4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed4e:	b141      	cbz	r1, 801ed62 <__swsetup_r+0x6a>
 801ed50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed54:	4299      	cmp	r1, r3
 801ed56:	d002      	beq.n	801ed5e <__swsetup_r+0x66>
 801ed58:	4630      	mov	r0, r6
 801ed5a:	f7fe ffe9 	bl	801dd30 <_free_r>
 801ed5e:	2300      	movs	r3, #0
 801ed60:	6363      	str	r3, [r4, #52]	; 0x34
 801ed62:	89a3      	ldrh	r3, [r4, #12]
 801ed64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ed68:	81a3      	strh	r3, [r4, #12]
 801ed6a:	2300      	movs	r3, #0
 801ed6c:	6063      	str	r3, [r4, #4]
 801ed6e:	6923      	ldr	r3, [r4, #16]
 801ed70:	6023      	str	r3, [r4, #0]
 801ed72:	89a3      	ldrh	r3, [r4, #12]
 801ed74:	f043 0308 	orr.w	r3, r3, #8
 801ed78:	81a3      	strh	r3, [r4, #12]
 801ed7a:	6923      	ldr	r3, [r4, #16]
 801ed7c:	b94b      	cbnz	r3, 801ed92 <__swsetup_r+0x9a>
 801ed7e:	89a3      	ldrh	r3, [r4, #12]
 801ed80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ed84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ed88:	d003      	beq.n	801ed92 <__swsetup_r+0x9a>
 801ed8a:	4621      	mov	r1, r4
 801ed8c:	4630      	mov	r0, r6
 801ed8e:	f000 f90f 	bl	801efb0 <__smakebuf_r>
 801ed92:	89a0      	ldrh	r0, [r4, #12]
 801ed94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ed98:	f010 0301 	ands.w	r3, r0, #1
 801ed9c:	d00a      	beq.n	801edb4 <__swsetup_r+0xbc>
 801ed9e:	2300      	movs	r3, #0
 801eda0:	60a3      	str	r3, [r4, #8]
 801eda2:	6963      	ldr	r3, [r4, #20]
 801eda4:	425b      	negs	r3, r3
 801eda6:	61a3      	str	r3, [r4, #24]
 801eda8:	6923      	ldr	r3, [r4, #16]
 801edaa:	b943      	cbnz	r3, 801edbe <__swsetup_r+0xc6>
 801edac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801edb0:	d1ba      	bne.n	801ed28 <__swsetup_r+0x30>
 801edb2:	bd70      	pop	{r4, r5, r6, pc}
 801edb4:	0781      	lsls	r1, r0, #30
 801edb6:	bf58      	it	pl
 801edb8:	6963      	ldrpl	r3, [r4, #20]
 801edba:	60a3      	str	r3, [r4, #8]
 801edbc:	e7f4      	b.n	801eda8 <__swsetup_r+0xb0>
 801edbe:	2000      	movs	r0, #0
 801edc0:	e7f7      	b.n	801edb2 <__swsetup_r+0xba>
 801edc2:	bf00      	nop
 801edc4:	24000038 	.word	0x24000038
 801edc8:	08046784 	.word	0x08046784
 801edcc:	080467a4 	.word	0x080467a4
 801edd0:	08046764 	.word	0x08046764

0801edd4 <abort>:
 801edd4:	b508      	push	{r3, lr}
 801edd6:	2006      	movs	r0, #6
 801edd8:	f000 f996 	bl	801f108 <raise>
 801eddc:	2001      	movs	r0, #1
 801edde:	f7e3 f80b 	bl	8001df8 <_exit>
	...

0801ede4 <__sflush_r>:
 801ede4:	898a      	ldrh	r2, [r1, #12]
 801ede6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edea:	4605      	mov	r5, r0
 801edec:	0710      	lsls	r0, r2, #28
 801edee:	460c      	mov	r4, r1
 801edf0:	d458      	bmi.n	801eea4 <__sflush_r+0xc0>
 801edf2:	684b      	ldr	r3, [r1, #4]
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	dc05      	bgt.n	801ee04 <__sflush_r+0x20>
 801edf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	dc02      	bgt.n	801ee04 <__sflush_r+0x20>
 801edfe:	2000      	movs	r0, #0
 801ee00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee06:	2e00      	cmp	r6, #0
 801ee08:	d0f9      	beq.n	801edfe <__sflush_r+0x1a>
 801ee0a:	2300      	movs	r3, #0
 801ee0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ee10:	682f      	ldr	r7, [r5, #0]
 801ee12:	602b      	str	r3, [r5, #0]
 801ee14:	d032      	beq.n	801ee7c <__sflush_r+0x98>
 801ee16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ee18:	89a3      	ldrh	r3, [r4, #12]
 801ee1a:	075a      	lsls	r2, r3, #29
 801ee1c:	d505      	bpl.n	801ee2a <__sflush_r+0x46>
 801ee1e:	6863      	ldr	r3, [r4, #4]
 801ee20:	1ac0      	subs	r0, r0, r3
 801ee22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee24:	b10b      	cbz	r3, 801ee2a <__sflush_r+0x46>
 801ee26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ee28:	1ac0      	subs	r0, r0, r3
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	4602      	mov	r2, r0
 801ee2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee30:	6a21      	ldr	r1, [r4, #32]
 801ee32:	4628      	mov	r0, r5
 801ee34:	47b0      	blx	r6
 801ee36:	1c43      	adds	r3, r0, #1
 801ee38:	89a3      	ldrh	r3, [r4, #12]
 801ee3a:	d106      	bne.n	801ee4a <__sflush_r+0x66>
 801ee3c:	6829      	ldr	r1, [r5, #0]
 801ee3e:	291d      	cmp	r1, #29
 801ee40:	d82c      	bhi.n	801ee9c <__sflush_r+0xb8>
 801ee42:	4a2a      	ldr	r2, [pc, #168]	; (801eeec <__sflush_r+0x108>)
 801ee44:	40ca      	lsrs	r2, r1
 801ee46:	07d6      	lsls	r6, r2, #31
 801ee48:	d528      	bpl.n	801ee9c <__sflush_r+0xb8>
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	6062      	str	r2, [r4, #4]
 801ee4e:	04d9      	lsls	r1, r3, #19
 801ee50:	6922      	ldr	r2, [r4, #16]
 801ee52:	6022      	str	r2, [r4, #0]
 801ee54:	d504      	bpl.n	801ee60 <__sflush_r+0x7c>
 801ee56:	1c42      	adds	r2, r0, #1
 801ee58:	d101      	bne.n	801ee5e <__sflush_r+0x7a>
 801ee5a:	682b      	ldr	r3, [r5, #0]
 801ee5c:	b903      	cbnz	r3, 801ee60 <__sflush_r+0x7c>
 801ee5e:	6560      	str	r0, [r4, #84]	; 0x54
 801ee60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ee62:	602f      	str	r7, [r5, #0]
 801ee64:	2900      	cmp	r1, #0
 801ee66:	d0ca      	beq.n	801edfe <__sflush_r+0x1a>
 801ee68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee6c:	4299      	cmp	r1, r3
 801ee6e:	d002      	beq.n	801ee76 <__sflush_r+0x92>
 801ee70:	4628      	mov	r0, r5
 801ee72:	f7fe ff5d 	bl	801dd30 <_free_r>
 801ee76:	2000      	movs	r0, #0
 801ee78:	6360      	str	r0, [r4, #52]	; 0x34
 801ee7a:	e7c1      	b.n	801ee00 <__sflush_r+0x1c>
 801ee7c:	6a21      	ldr	r1, [r4, #32]
 801ee7e:	2301      	movs	r3, #1
 801ee80:	4628      	mov	r0, r5
 801ee82:	47b0      	blx	r6
 801ee84:	1c41      	adds	r1, r0, #1
 801ee86:	d1c7      	bne.n	801ee18 <__sflush_r+0x34>
 801ee88:	682b      	ldr	r3, [r5, #0]
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d0c4      	beq.n	801ee18 <__sflush_r+0x34>
 801ee8e:	2b1d      	cmp	r3, #29
 801ee90:	d001      	beq.n	801ee96 <__sflush_r+0xb2>
 801ee92:	2b16      	cmp	r3, #22
 801ee94:	d101      	bne.n	801ee9a <__sflush_r+0xb6>
 801ee96:	602f      	str	r7, [r5, #0]
 801ee98:	e7b1      	b.n	801edfe <__sflush_r+0x1a>
 801ee9a:	89a3      	ldrh	r3, [r4, #12]
 801ee9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eea0:	81a3      	strh	r3, [r4, #12]
 801eea2:	e7ad      	b.n	801ee00 <__sflush_r+0x1c>
 801eea4:	690f      	ldr	r7, [r1, #16]
 801eea6:	2f00      	cmp	r7, #0
 801eea8:	d0a9      	beq.n	801edfe <__sflush_r+0x1a>
 801eeaa:	0793      	lsls	r3, r2, #30
 801eeac:	680e      	ldr	r6, [r1, #0]
 801eeae:	bf08      	it	eq
 801eeb0:	694b      	ldreq	r3, [r1, #20]
 801eeb2:	600f      	str	r7, [r1, #0]
 801eeb4:	bf18      	it	ne
 801eeb6:	2300      	movne	r3, #0
 801eeb8:	eba6 0807 	sub.w	r8, r6, r7
 801eebc:	608b      	str	r3, [r1, #8]
 801eebe:	f1b8 0f00 	cmp.w	r8, #0
 801eec2:	dd9c      	ble.n	801edfe <__sflush_r+0x1a>
 801eec4:	6a21      	ldr	r1, [r4, #32]
 801eec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eec8:	4643      	mov	r3, r8
 801eeca:	463a      	mov	r2, r7
 801eecc:	4628      	mov	r0, r5
 801eece:	47b0      	blx	r6
 801eed0:	2800      	cmp	r0, #0
 801eed2:	dc06      	bgt.n	801eee2 <__sflush_r+0xfe>
 801eed4:	89a3      	ldrh	r3, [r4, #12]
 801eed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eeda:	81a3      	strh	r3, [r4, #12]
 801eedc:	f04f 30ff 	mov.w	r0, #4294967295
 801eee0:	e78e      	b.n	801ee00 <__sflush_r+0x1c>
 801eee2:	4407      	add	r7, r0
 801eee4:	eba8 0800 	sub.w	r8, r8, r0
 801eee8:	e7e9      	b.n	801eebe <__sflush_r+0xda>
 801eeea:	bf00      	nop
 801eeec:	20400001 	.word	0x20400001

0801eef0 <_fflush_r>:
 801eef0:	b538      	push	{r3, r4, r5, lr}
 801eef2:	690b      	ldr	r3, [r1, #16]
 801eef4:	4605      	mov	r5, r0
 801eef6:	460c      	mov	r4, r1
 801eef8:	b913      	cbnz	r3, 801ef00 <_fflush_r+0x10>
 801eefa:	2500      	movs	r5, #0
 801eefc:	4628      	mov	r0, r5
 801eefe:	bd38      	pop	{r3, r4, r5, pc}
 801ef00:	b118      	cbz	r0, 801ef0a <_fflush_r+0x1a>
 801ef02:	6983      	ldr	r3, [r0, #24]
 801ef04:	b90b      	cbnz	r3, 801ef0a <_fflush_r+0x1a>
 801ef06:	f7fe fab3 	bl	801d470 <__sinit>
 801ef0a:	4b14      	ldr	r3, [pc, #80]	; (801ef5c <_fflush_r+0x6c>)
 801ef0c:	429c      	cmp	r4, r3
 801ef0e:	d11b      	bne.n	801ef48 <_fflush_r+0x58>
 801ef10:	686c      	ldr	r4, [r5, #4]
 801ef12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d0ef      	beq.n	801eefa <_fflush_r+0xa>
 801ef1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ef1c:	07d0      	lsls	r0, r2, #31
 801ef1e:	d404      	bmi.n	801ef2a <_fflush_r+0x3a>
 801ef20:	0599      	lsls	r1, r3, #22
 801ef22:	d402      	bmi.n	801ef2a <_fflush_r+0x3a>
 801ef24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef26:	f7fe fb58 	bl	801d5da <__retarget_lock_acquire_recursive>
 801ef2a:	4628      	mov	r0, r5
 801ef2c:	4621      	mov	r1, r4
 801ef2e:	f7ff ff59 	bl	801ede4 <__sflush_r>
 801ef32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ef34:	07da      	lsls	r2, r3, #31
 801ef36:	4605      	mov	r5, r0
 801ef38:	d4e0      	bmi.n	801eefc <_fflush_r+0xc>
 801ef3a:	89a3      	ldrh	r3, [r4, #12]
 801ef3c:	059b      	lsls	r3, r3, #22
 801ef3e:	d4dd      	bmi.n	801eefc <_fflush_r+0xc>
 801ef40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef42:	f7fe fb4b 	bl	801d5dc <__retarget_lock_release_recursive>
 801ef46:	e7d9      	b.n	801eefc <_fflush_r+0xc>
 801ef48:	4b05      	ldr	r3, [pc, #20]	; (801ef60 <_fflush_r+0x70>)
 801ef4a:	429c      	cmp	r4, r3
 801ef4c:	d101      	bne.n	801ef52 <_fflush_r+0x62>
 801ef4e:	68ac      	ldr	r4, [r5, #8]
 801ef50:	e7df      	b.n	801ef12 <_fflush_r+0x22>
 801ef52:	4b04      	ldr	r3, [pc, #16]	; (801ef64 <_fflush_r+0x74>)
 801ef54:	429c      	cmp	r4, r3
 801ef56:	bf08      	it	eq
 801ef58:	68ec      	ldreq	r4, [r5, #12]
 801ef5a:	e7da      	b.n	801ef12 <_fflush_r+0x22>
 801ef5c:	08046784 	.word	0x08046784
 801ef60:	080467a4 	.word	0x080467a4
 801ef64:	08046764 	.word	0x08046764

0801ef68 <__swhatbuf_r>:
 801ef68:	b570      	push	{r4, r5, r6, lr}
 801ef6a:	460e      	mov	r6, r1
 801ef6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef70:	2900      	cmp	r1, #0
 801ef72:	b096      	sub	sp, #88	; 0x58
 801ef74:	4614      	mov	r4, r2
 801ef76:	461d      	mov	r5, r3
 801ef78:	da07      	bge.n	801ef8a <__swhatbuf_r+0x22>
 801ef7a:	2300      	movs	r3, #0
 801ef7c:	602b      	str	r3, [r5, #0]
 801ef7e:	89b3      	ldrh	r3, [r6, #12]
 801ef80:	061a      	lsls	r2, r3, #24
 801ef82:	d410      	bmi.n	801efa6 <__swhatbuf_r+0x3e>
 801ef84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ef88:	e00e      	b.n	801efa8 <__swhatbuf_r+0x40>
 801ef8a:	466a      	mov	r2, sp
 801ef8c:	f000 f8e6 	bl	801f15c <_fstat_r>
 801ef90:	2800      	cmp	r0, #0
 801ef92:	dbf2      	blt.n	801ef7a <__swhatbuf_r+0x12>
 801ef94:	9a01      	ldr	r2, [sp, #4]
 801ef96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ef9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ef9e:	425a      	negs	r2, r3
 801efa0:	415a      	adcs	r2, r3
 801efa2:	602a      	str	r2, [r5, #0]
 801efa4:	e7ee      	b.n	801ef84 <__swhatbuf_r+0x1c>
 801efa6:	2340      	movs	r3, #64	; 0x40
 801efa8:	2000      	movs	r0, #0
 801efaa:	6023      	str	r3, [r4, #0]
 801efac:	b016      	add	sp, #88	; 0x58
 801efae:	bd70      	pop	{r4, r5, r6, pc}

0801efb0 <__smakebuf_r>:
 801efb0:	898b      	ldrh	r3, [r1, #12]
 801efb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801efb4:	079d      	lsls	r5, r3, #30
 801efb6:	4606      	mov	r6, r0
 801efb8:	460c      	mov	r4, r1
 801efba:	d507      	bpl.n	801efcc <__smakebuf_r+0x1c>
 801efbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801efc0:	6023      	str	r3, [r4, #0]
 801efc2:	6123      	str	r3, [r4, #16]
 801efc4:	2301      	movs	r3, #1
 801efc6:	6163      	str	r3, [r4, #20]
 801efc8:	b002      	add	sp, #8
 801efca:	bd70      	pop	{r4, r5, r6, pc}
 801efcc:	ab01      	add	r3, sp, #4
 801efce:	466a      	mov	r2, sp
 801efd0:	f7ff ffca 	bl	801ef68 <__swhatbuf_r>
 801efd4:	9900      	ldr	r1, [sp, #0]
 801efd6:	4605      	mov	r5, r0
 801efd8:	4630      	mov	r0, r6
 801efda:	f7fe fef9 	bl	801ddd0 <_malloc_r>
 801efde:	b948      	cbnz	r0, 801eff4 <__smakebuf_r+0x44>
 801efe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efe4:	059a      	lsls	r2, r3, #22
 801efe6:	d4ef      	bmi.n	801efc8 <__smakebuf_r+0x18>
 801efe8:	f023 0303 	bic.w	r3, r3, #3
 801efec:	f043 0302 	orr.w	r3, r3, #2
 801eff0:	81a3      	strh	r3, [r4, #12]
 801eff2:	e7e3      	b.n	801efbc <__smakebuf_r+0xc>
 801eff4:	4b0d      	ldr	r3, [pc, #52]	; (801f02c <__smakebuf_r+0x7c>)
 801eff6:	62b3      	str	r3, [r6, #40]	; 0x28
 801eff8:	89a3      	ldrh	r3, [r4, #12]
 801effa:	6020      	str	r0, [r4, #0]
 801effc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f000:	81a3      	strh	r3, [r4, #12]
 801f002:	9b00      	ldr	r3, [sp, #0]
 801f004:	6163      	str	r3, [r4, #20]
 801f006:	9b01      	ldr	r3, [sp, #4]
 801f008:	6120      	str	r0, [r4, #16]
 801f00a:	b15b      	cbz	r3, 801f024 <__smakebuf_r+0x74>
 801f00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f010:	4630      	mov	r0, r6
 801f012:	f000 f8b5 	bl	801f180 <_isatty_r>
 801f016:	b128      	cbz	r0, 801f024 <__smakebuf_r+0x74>
 801f018:	89a3      	ldrh	r3, [r4, #12]
 801f01a:	f023 0303 	bic.w	r3, r3, #3
 801f01e:	f043 0301 	orr.w	r3, r3, #1
 801f022:	81a3      	strh	r3, [r4, #12]
 801f024:	89a0      	ldrh	r0, [r4, #12]
 801f026:	4305      	orrs	r5, r0
 801f028:	81a5      	strh	r5, [r4, #12]
 801f02a:	e7cd      	b.n	801efc8 <__smakebuf_r+0x18>
 801f02c:	0801d409 	.word	0x0801d409

0801f030 <__ascii_mbtowc>:
 801f030:	b082      	sub	sp, #8
 801f032:	b901      	cbnz	r1, 801f036 <__ascii_mbtowc+0x6>
 801f034:	a901      	add	r1, sp, #4
 801f036:	b142      	cbz	r2, 801f04a <__ascii_mbtowc+0x1a>
 801f038:	b14b      	cbz	r3, 801f04e <__ascii_mbtowc+0x1e>
 801f03a:	7813      	ldrb	r3, [r2, #0]
 801f03c:	600b      	str	r3, [r1, #0]
 801f03e:	7812      	ldrb	r2, [r2, #0]
 801f040:	1e10      	subs	r0, r2, #0
 801f042:	bf18      	it	ne
 801f044:	2001      	movne	r0, #1
 801f046:	b002      	add	sp, #8
 801f048:	4770      	bx	lr
 801f04a:	4610      	mov	r0, r2
 801f04c:	e7fb      	b.n	801f046 <__ascii_mbtowc+0x16>
 801f04e:	f06f 0001 	mvn.w	r0, #1
 801f052:	e7f8      	b.n	801f046 <__ascii_mbtowc+0x16>

0801f054 <__malloc_lock>:
 801f054:	4801      	ldr	r0, [pc, #4]	; (801f05c <__malloc_lock+0x8>)
 801f056:	f7fe bac0 	b.w	801d5da <__retarget_lock_acquire_recursive>
 801f05a:	bf00      	nop
 801f05c:	240079fc 	.word	0x240079fc

0801f060 <__malloc_unlock>:
 801f060:	4801      	ldr	r0, [pc, #4]	; (801f068 <__malloc_unlock+0x8>)
 801f062:	f7fe babb 	b.w	801d5dc <__retarget_lock_release_recursive>
 801f066:	bf00      	nop
 801f068:	240079fc 	.word	0x240079fc

0801f06c <_realloc_r>:
 801f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f06e:	4607      	mov	r7, r0
 801f070:	4614      	mov	r4, r2
 801f072:	460e      	mov	r6, r1
 801f074:	b921      	cbnz	r1, 801f080 <_realloc_r+0x14>
 801f076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f07a:	4611      	mov	r1, r2
 801f07c:	f7fe bea8 	b.w	801ddd0 <_malloc_r>
 801f080:	b922      	cbnz	r2, 801f08c <_realloc_r+0x20>
 801f082:	f7fe fe55 	bl	801dd30 <_free_r>
 801f086:	4625      	mov	r5, r4
 801f088:	4628      	mov	r0, r5
 801f08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f08c:	f000 f888 	bl	801f1a0 <_malloc_usable_size_r>
 801f090:	42a0      	cmp	r0, r4
 801f092:	d20f      	bcs.n	801f0b4 <_realloc_r+0x48>
 801f094:	4621      	mov	r1, r4
 801f096:	4638      	mov	r0, r7
 801f098:	f7fe fe9a 	bl	801ddd0 <_malloc_r>
 801f09c:	4605      	mov	r5, r0
 801f09e:	2800      	cmp	r0, #0
 801f0a0:	d0f2      	beq.n	801f088 <_realloc_r+0x1c>
 801f0a2:	4631      	mov	r1, r6
 801f0a4:	4622      	mov	r2, r4
 801f0a6:	f7fc fd33 	bl	801bb10 <memcpy>
 801f0aa:	4631      	mov	r1, r6
 801f0ac:	4638      	mov	r0, r7
 801f0ae:	f7fe fe3f 	bl	801dd30 <_free_r>
 801f0b2:	e7e9      	b.n	801f088 <_realloc_r+0x1c>
 801f0b4:	4635      	mov	r5, r6
 801f0b6:	e7e7      	b.n	801f088 <_realloc_r+0x1c>

0801f0b8 <_raise_r>:
 801f0b8:	291f      	cmp	r1, #31
 801f0ba:	b538      	push	{r3, r4, r5, lr}
 801f0bc:	4604      	mov	r4, r0
 801f0be:	460d      	mov	r5, r1
 801f0c0:	d904      	bls.n	801f0cc <_raise_r+0x14>
 801f0c2:	2316      	movs	r3, #22
 801f0c4:	6003      	str	r3, [r0, #0]
 801f0c6:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ca:	bd38      	pop	{r3, r4, r5, pc}
 801f0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f0ce:	b112      	cbz	r2, 801f0d6 <_raise_r+0x1e>
 801f0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f0d4:	b94b      	cbnz	r3, 801f0ea <_raise_r+0x32>
 801f0d6:	4620      	mov	r0, r4
 801f0d8:	f000 f830 	bl	801f13c <_getpid_r>
 801f0dc:	462a      	mov	r2, r5
 801f0de:	4601      	mov	r1, r0
 801f0e0:	4620      	mov	r0, r4
 801f0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f0e6:	f000 b817 	b.w	801f118 <_kill_r>
 801f0ea:	2b01      	cmp	r3, #1
 801f0ec:	d00a      	beq.n	801f104 <_raise_r+0x4c>
 801f0ee:	1c59      	adds	r1, r3, #1
 801f0f0:	d103      	bne.n	801f0fa <_raise_r+0x42>
 801f0f2:	2316      	movs	r3, #22
 801f0f4:	6003      	str	r3, [r0, #0]
 801f0f6:	2001      	movs	r0, #1
 801f0f8:	e7e7      	b.n	801f0ca <_raise_r+0x12>
 801f0fa:	2400      	movs	r4, #0
 801f0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f100:	4628      	mov	r0, r5
 801f102:	4798      	blx	r3
 801f104:	2000      	movs	r0, #0
 801f106:	e7e0      	b.n	801f0ca <_raise_r+0x12>

0801f108 <raise>:
 801f108:	4b02      	ldr	r3, [pc, #8]	; (801f114 <raise+0xc>)
 801f10a:	4601      	mov	r1, r0
 801f10c:	6818      	ldr	r0, [r3, #0]
 801f10e:	f7ff bfd3 	b.w	801f0b8 <_raise_r>
 801f112:	bf00      	nop
 801f114:	24000038 	.word	0x24000038

0801f118 <_kill_r>:
 801f118:	b538      	push	{r3, r4, r5, lr}
 801f11a:	4d07      	ldr	r5, [pc, #28]	; (801f138 <_kill_r+0x20>)
 801f11c:	2300      	movs	r3, #0
 801f11e:	4604      	mov	r4, r0
 801f120:	4608      	mov	r0, r1
 801f122:	4611      	mov	r1, r2
 801f124:	602b      	str	r3, [r5, #0]
 801f126:	f7e2 fe55 	bl	8001dd4 <_kill>
 801f12a:	1c43      	adds	r3, r0, #1
 801f12c:	d102      	bne.n	801f134 <_kill_r+0x1c>
 801f12e:	682b      	ldr	r3, [r5, #0]
 801f130:	b103      	cbz	r3, 801f134 <_kill_r+0x1c>
 801f132:	6023      	str	r3, [r4, #0]
 801f134:	bd38      	pop	{r3, r4, r5, pc}
 801f136:	bf00      	nop
 801f138:	240079cc 	.word	0x240079cc

0801f13c <_getpid_r>:
 801f13c:	f7e2 be42 	b.w	8001dc4 <_getpid>

0801f140 <__ascii_wctomb>:
 801f140:	b149      	cbz	r1, 801f156 <__ascii_wctomb+0x16>
 801f142:	2aff      	cmp	r2, #255	; 0xff
 801f144:	bf85      	ittet	hi
 801f146:	238a      	movhi	r3, #138	; 0x8a
 801f148:	6003      	strhi	r3, [r0, #0]
 801f14a:	700a      	strbls	r2, [r1, #0]
 801f14c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f150:	bf98      	it	ls
 801f152:	2001      	movls	r0, #1
 801f154:	4770      	bx	lr
 801f156:	4608      	mov	r0, r1
 801f158:	4770      	bx	lr
	...

0801f15c <_fstat_r>:
 801f15c:	b538      	push	{r3, r4, r5, lr}
 801f15e:	4d07      	ldr	r5, [pc, #28]	; (801f17c <_fstat_r+0x20>)
 801f160:	2300      	movs	r3, #0
 801f162:	4604      	mov	r4, r0
 801f164:	4608      	mov	r0, r1
 801f166:	4611      	mov	r1, r2
 801f168:	602b      	str	r3, [r5, #0]
 801f16a:	f7e2 fe94 	bl	8001e96 <_fstat>
 801f16e:	1c43      	adds	r3, r0, #1
 801f170:	d102      	bne.n	801f178 <_fstat_r+0x1c>
 801f172:	682b      	ldr	r3, [r5, #0]
 801f174:	b103      	cbz	r3, 801f178 <_fstat_r+0x1c>
 801f176:	6023      	str	r3, [r4, #0]
 801f178:	bd38      	pop	{r3, r4, r5, pc}
 801f17a:	bf00      	nop
 801f17c:	240079cc 	.word	0x240079cc

0801f180 <_isatty_r>:
 801f180:	b538      	push	{r3, r4, r5, lr}
 801f182:	4d06      	ldr	r5, [pc, #24]	; (801f19c <_isatty_r+0x1c>)
 801f184:	2300      	movs	r3, #0
 801f186:	4604      	mov	r4, r0
 801f188:	4608      	mov	r0, r1
 801f18a:	602b      	str	r3, [r5, #0]
 801f18c:	f7e2 fe93 	bl	8001eb6 <_isatty>
 801f190:	1c43      	adds	r3, r0, #1
 801f192:	d102      	bne.n	801f19a <_isatty_r+0x1a>
 801f194:	682b      	ldr	r3, [r5, #0]
 801f196:	b103      	cbz	r3, 801f19a <_isatty_r+0x1a>
 801f198:	6023      	str	r3, [r4, #0]
 801f19a:	bd38      	pop	{r3, r4, r5, pc}
 801f19c:	240079cc 	.word	0x240079cc

0801f1a0 <_malloc_usable_size_r>:
 801f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f1a4:	1f18      	subs	r0, r3, #4
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	bfbc      	itt	lt
 801f1aa:	580b      	ldrlt	r3, [r1, r0]
 801f1ac:	18c0      	addlt	r0, r0, r3
 801f1ae:	4770      	bx	lr

0801f1b0 <_init>:
 801f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1b2:	bf00      	nop
 801f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1b6:	bc08      	pop	{r3}
 801f1b8:	469e      	mov	lr, r3
 801f1ba:	4770      	bx	lr

0801f1bc <_fini>:
 801f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1be:	bf00      	nop
 801f1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1c2:	bc08      	pop	{r3}
 801f1c4:	469e      	mov	lr, r3
 801f1c6:	4770      	bx	lr
