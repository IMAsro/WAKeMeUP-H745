
H755_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f058  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002778c  0801f2f8  0801f2f8  0002f2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08046a84  08046a84  00056a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08046a8c  08046a8c  00056a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08046a90  08046a90  00056a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  08046a94  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077c8  24000208  08046c9c  00060208  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240079d0  08046c9c  000679d0  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08046c9c  00070000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00060208  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003b0e7  00000000  00000000  00060236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000089d7  00000000  00000000  0009b31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002988  00000000  00000000  000a3cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000027b8  00000000  00000000  000a6680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b52e  00000000  00000000  000a8e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00042334  00000000  00000000  000f4366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001acd9a  00000000  00000000  0013669a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002e3434  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000bd54  00000000  00000000  002e3484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f2e0 	.word	0x0801f2e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0801f2e0 	.word	0x0801f2e0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <SystemInit+0x104>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a3e      	ldr	r2, [pc, #248]	; (80007b8 <SystemInit+0x104>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c8:	4b3b      	ldr	r3, [pc, #236]	; (80007b8 <SystemInit+0x104>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <SystemInit+0x104>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d4:	4b39      	ldr	r3, [pc, #228]	; (80007bc <SystemInit+0x108>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d807      	bhi.n	80006f0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <SystemInit+0x108>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 030f 	bic.w	r3, r3, #15
 80006e8:	4a34      	ldr	r2, [pc, #208]	; (80007bc <SystemInit+0x108>)
 80006ea:	f043 0307 	orr.w	r3, r3, #7
 80006ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <SystemInit+0x10c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <SystemInit+0x10c>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <SystemInit+0x10c>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	492e      	ldr	r1, [pc, #184]	; (80007c0 <SystemInit+0x10c>)
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <SystemInit+0x110>)
 800070a:	4013      	ands	r3, r2
 800070c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemInit+0x108>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemInit+0x108>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 030f 	bic.w	r3, r3, #15
 8000722:	4a26      	ldr	r2, [pc, #152]	; (80007bc <SystemInit+0x108>)
 8000724:	f043 0307 	orr.w	r3, r3, #7
 8000728:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemInit+0x10c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemInit+0x10c>)
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <SystemInit+0x114>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemInit+0x10c>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemInit+0x118>)
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <SystemInit+0x10c>)
 800074a:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemInit+0x11c>)
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SystemInit+0x10c>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <SystemInit+0x10c>)
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <SystemInit+0x11c>)
 8000758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <SystemInit+0x10c>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <SystemInit+0x10c>)
 8000762:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <SystemInit+0x11c>)
 8000764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <SystemInit+0x10c>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <SystemInit+0x10c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <SystemInit+0x10c>)
 8000772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x10c>)
 800077a:	2200      	movs	r2, #0
 800077c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <SystemInit+0x120>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <SystemInit+0x120>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <SystemInit+0x124>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <SystemInit+0x128>)
 8000790:	4013      	ands	r3, r2
 8000792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000796:	d202      	bcs.n	800079e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <SystemInit+0x12c>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <SystemInit+0x130>)
 80007a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SystemInit+0x104>)
 80007a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ac:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	52002000 	.word	0x52002000
 80007c0:	58024400 	.word	0x58024400
 80007c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c8:	02020200 	.word	0x02020200
 80007cc:	01ff0000 	.word	0x01ff0000
 80007d0:	01010280 	.word	0x01010280
 80007d4:	580000c0 	.word	0x580000c0
 80007d8:	5c001000 	.word	0x5c001000
 80007dc:	ffff0000 	.word	0xffff0000
 80007e0:	51008108 	.word	0x51008108
 80007e4:	52004000 	.word	0x52004000

080007e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <vApplicationGetIdleTaskMemory+0x2c>)
 80007f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <vApplicationGetIdleTaskMemory+0x30>)
 80007fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24000224 	.word	0x24000224
 8000818:	24000278 	.word	0x24000278

0800081c <fillData>:
/* Private function prototypes -----------------------------------------------*/
void serve_404(struct netconn *conn);
/* Private functions ---------------------------------------------------------*/

void fillData(struct visualization_data_s *data)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

	volatile struct m4_to_m7 * const m4_to_m7_ptr = (struct m4_to_m7 *)(0x30040A00);
 8000824:	4b50      	ldr	r3, [pc, #320]	; (8000968 <fillData+0x14c>)
 8000826:	60bb      	str	r3, [r7, #8]


	for (int i = 0; i < 59; i++){
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e01a      	b.n	8000864 <fillData+0x48>
			data->temperature[i] = data->temperature[i+1];
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	601a      	str	r2, [r3, #0]
			data->humidity[i] = data->humidity[i+1];
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	333c      	adds	r3, #60	; 0x3c
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	333c      	adds	r3, #60	; 0x3c
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 59; i++){
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b3a      	cmp	r3, #58	; 0x3a
 8000868:	dde1      	ble.n	800082e <fillData+0x12>
		}

		data->temperature[59] = m4_to_m7_ptr->temperature[59];
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		data->humidity[59] = m4_to_m7_ptr->pressure[59];
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

		data->potlevel = m4_to_m7_ptr->potlevel;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

		data->led_r = led_data.led_r;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <fillData+0x150>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		data->led_g = led_data.led_g;
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <fillData+0x150>)
 800089a:	785a      	ldrb	r2, [r3, #1]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		data->led_b = led_data.led_b;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <fillData+0x150>)
 80008a4:	789a      	ldrb	r2, [r3, #2]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
		data->led_w = led_data.led_w;
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <fillData+0x150>)
 80008ae:	78da      	ldrb	r2, [r3, #3]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b


		data->accel_x = m4_to_m7_ptr->accel_x;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		data->accel_y = m4_to_m7_ptr->accel_y;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		data->accel_z = m4_to_m7_ptr->accel_z;
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

		data->gyro_x = m4_to_m7_ptr->gyro_x;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		data->gyro_y = m4_to_m7_ptr->gyro_y;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		data->gyro_z = m4_to_m7_ptr->gyro_z;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

		data->mag_x = m4_to_m7_ptr->mag_x;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		data->mag_y = m4_to_m7_ptr->mag_y;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		data->mag_z = m4_to_m7_ptr->mag_z;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204


		data->led_r = m4_to_m7_ptr->led_r;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		data->led_g = m4_to_m7_ptr->led_g;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		data->led_b = m4_to_m7_ptr->led_b;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8000944:	b2da      	uxtb	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
		data->led_w = m4_to_m7_ptr->led_w;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b

	}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	30040a00 	.word	0x30040a00
 800096c:	24000684 	.word	0x24000684

08000970 <create_json_payload>:

void create_json_payload(struct visualization_data_s *data, char * payload)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	char temp_buf[64];

	memset(temp_buf, 0, 64);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2240      	movs	r2, #64	; 0x40
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f01b f954 	bl	801bc30 <memset>
	/*create json "file"*/
	strcat(payload, "{");
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff fcb3 	bl	80002f4 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	49d0      	ldr	r1, [pc, #832]	; (8000cd8 <create_json_payload+0x368>)
 8000998:	461a      	mov	r2, r3
 800099a:	460b      	mov	r3, r1
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	8013      	strh	r3, [r2, #0]


	strcat(payload, "\"temperature\":[");
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f7ff fca7 	bl	80002f4 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	4acb      	ldr	r2, [pc, #812]	; (8000cdc <create_json_payload+0x36c>)
 80009b0:	461c      	mov	r4, r3
 80009b2:	4615      	mov	r5, r2
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	6020      	str	r0, [r4, #0]
 80009b8:	6061      	str	r1, [r4, #4]
 80009ba:	60a2      	str	r2, [r4, #8]
 80009bc:	60e3      	str	r3, [r4, #12]
	sprintf(temp_buf, "%.2f", data->temperature[0]);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009c8:	f107 0008 	add.w	r0, r7, #8
 80009cc:	ec53 2b17 	vmov	r2, r3, d7
 80009d0:	49c3      	ldr	r1, [pc, #780]	; (8000ce0 <create_json_payload+0x370>)
 80009d2:	f01b fdcd 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f01b fe58 	bl	801c692 <strcat>
	for (int i = 0; i < 60; i++){
 80009e2:	2300      	movs	r3, #0
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e6:	e017      	b.n	8000a18 <create_json_payload+0xa8>
		sprintf(temp_buf, ",%.2f", data->temperature[i]);
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f8:	f107 0008 	add.w	r0, r7, #8
 80009fc:	ec53 2b17 	vmov	r2, r3, d7
 8000a00:	49b8      	ldr	r1, [pc, #736]	; (8000ce4 <create_json_payload+0x374>)
 8000a02:	f01b fdb5 	bl	801c570 <siprintf>
		strcat(payload, temp_buf);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6838      	ldr	r0, [r7, #0]
 8000a0e:	f01b fe40 	bl	801c692 <strcat>
	for (int i = 0; i < 60; i++){
 8000a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a14:	3301      	adds	r3, #1
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a1a:	2b3b      	cmp	r3, #59	; 0x3b
 8000a1c:	dde4      	ble.n	80009e8 <create_json_payload+0x78>
	}
	strcat(payload, "],");
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	f7ff fc68 	bl	80002f4 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4aae      	ldr	r2, [pc, #696]	; (8000ce8 <create_json_payload+0x378>)
 8000a2e:	8811      	ldrh	r1, [r2, #0]
 8000a30:	7892      	ldrb	r2, [r2, #2]
 8000a32:	8019      	strh	r1, [r3, #0]
 8000a34:	709a      	strb	r2, [r3, #2]

	strcat(payload, "\"humidity\":[");
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	f7ff fc5c 	bl	80002f4 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4aa9      	ldr	r2, [pc, #676]	; (8000cec <create_json_payload+0x37c>)
 8000a46:	461c      	mov	r4, r3
 8000a48:	4613      	mov	r3, r2
 8000a4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a4c:	6020      	str	r0, [r4, #0]
 8000a4e:	6061      	str	r1, [r4, #4]
 8000a50:	60a2      	str	r2, [r4, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	7323      	strb	r3, [r4, #12]
	sprintf(temp_buf, "%.2f", data->humidity[0]);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8000a5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a60:	f107 0008 	add.w	r0, r7, #8
 8000a64:	ec53 2b17 	vmov	r2, r3, d7
 8000a68:	499d      	ldr	r1, [pc, #628]	; (8000ce0 <create_json_payload+0x370>)
 8000a6a:	f01b fd81 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f01b fe0c 	bl	801c692 <strcat>

	for (int i = 0; i < 60; i++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a7e:	e018      	b.n	8000ab2 <create_json_payload+0x142>
		sprintf(temp_buf, ",%.2f", data->humidity[i]);
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a84:	333c      	adds	r3, #60	; 0x3c
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a92:	f107 0008 	add.w	r0, r7, #8
 8000a96:	ec53 2b17 	vmov	r2, r3, d7
 8000a9a:	4992      	ldr	r1, [pc, #584]	; (8000ce4 <create_json_payload+0x374>)
 8000a9c:	f01b fd68 	bl	801c570 <siprintf>
		strcat(payload, temp_buf);
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6838      	ldr	r0, [r7, #0]
 8000aa8:	f01b fdf3 	bl	801c692 <strcat>
	for (int i = 0; i < 60; i++){
 8000aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aae:	3301      	adds	r3, #1
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ab6:	dde3      	ble.n	8000a80 <create_json_payload+0x110>
	}
	strcat(payload, "],");
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f7ff fc1b 	bl	80002f4 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a88      	ldr	r2, [pc, #544]	; (8000ce8 <create_json_payload+0x378>)
 8000ac8:	8811      	ldrh	r1, [r2, #0]
 8000aca:	7892      	ldrb	r2, [r2, #2]
 8000acc:	8019      	strh	r1, [r3, #0]
 8000ace:	709a      	strb	r2, [r3, #2]

	sprintf(temp_buf, "\"potlevel\":%.2f,", data->potlevel);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8000ad6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ada:	f107 0008 	add.w	r0, r7, #8
 8000ade:	ec53 2b17 	vmov	r2, r3, d7
 8000ae2:	4983      	ldr	r1, [pc, #524]	; (8000cf0 <create_json_payload+0x380>)
 8000ae4:	f01b fd44 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4619      	mov	r1, r3
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f01b fdcf 	bl	801c692 <strcat>

	sprintf(temp_buf, "\"accel_x\":%.2f,", data->accel_x);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8000afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000afe:	f107 0008 	add.w	r0, r7, #8
 8000b02:	ec53 2b17 	vmov	r2, r3, d7
 8000b06:	497b      	ldr	r1, [pc, #492]	; (8000cf4 <create_json_payload+0x384>)
 8000b08:	f01b fd32 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	6838      	ldr	r0, [r7, #0]
 8000b14:	f01b fdbd 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"accel_y\":%.2f,", data->accel_y);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b22:	f107 0008 	add.w	r0, r7, #8
 8000b26:	ec53 2b17 	vmov	r2, r3, d7
 8000b2a:	4973      	ldr	r1, [pc, #460]	; (8000cf8 <create_json_payload+0x388>)
 8000b2c:	f01b fd20 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	6838      	ldr	r0, [r7, #0]
 8000b38:	f01b fdab 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"accel_z\":%.2f,", data->accel_z);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8000b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b46:	f107 0008 	add.w	r0, r7, #8
 8000b4a:	ec53 2b17 	vmov	r2, r3, d7
 8000b4e:	496b      	ldr	r1, [pc, #428]	; (8000cfc <create_json_payload+0x38c>)
 8000b50:	f01b fd0e 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f01b fd99 	bl	801c692 <strcat>

	sprintf(temp_buf, "\"gyro_x\":%.2f,", data->gyro_x);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8000b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6a:	f107 0008 	add.w	r0, r7, #8
 8000b6e:	ec53 2b17 	vmov	r2, r3, d7
 8000b72:	4963      	ldr	r1, [pc, #396]	; (8000d00 <create_json_payload+0x390>)
 8000b74:	f01b fcfc 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6838      	ldr	r0, [r7, #0]
 8000b80:	f01b fd87 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"gyro_y\":%.2f,", data->gyro_y);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	edd3 7a7d 	vldr	s15, [r3, #500]	; 0x1f4
 8000b8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8e:	f107 0008 	add.w	r0, r7, #8
 8000b92:	ec53 2b17 	vmov	r2, r3, d7
 8000b96:	495b      	ldr	r1, [pc, #364]	; (8000d04 <create_json_payload+0x394>)
 8000b98:	f01b fcea 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f01b fd75 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"gyro_z\":%.2f,", data->gyro_z);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8000bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb2:	f107 0008 	add.w	r0, r7, #8
 8000bb6:	ec53 2b17 	vmov	r2, r3, d7
 8000bba:	4953      	ldr	r1, [pc, #332]	; (8000d08 <create_json_payload+0x398>)
 8000bbc:	f01b fcd8 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6838      	ldr	r0, [r7, #0]
 8000bc8:	f01b fd63 	bl	801c692 <strcat>

	sprintf(temp_buf, "\"mag_x\":%.2f,", data->mag_x);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8000bd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd6:	f107 0008 	add.w	r0, r7, #8
 8000bda:	ec53 2b17 	vmov	r2, r3, d7
 8000bde:	494b      	ldr	r1, [pc, #300]	; (8000d0c <create_json_payload+0x39c>)
 8000be0:	f01b fcc6 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f01b fd51 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"mag_y\":%.2f,", data->mag_y);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8000bf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfa:	f107 0008 	add.w	r0, r7, #8
 8000bfe:	ec53 2b17 	vmov	r2, r3, d7
 8000c02:	4943      	ldr	r1, [pc, #268]	; (8000d10 <create_json_payload+0x3a0>)
 8000c04:	f01b fcb4 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f01b fd3f 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"mag_z\":%.2f,", data->mag_z);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1e:	f107 0008 	add.w	r0, r7, #8
 8000c22:	ec53 2b17 	vmov	r2, r3, d7
 8000c26:	493b      	ldr	r1, [pc, #236]	; (8000d14 <create_json_payload+0x3a4>)
 8000c28:	f01b fca2 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	6838      	ldr	r0, [r7, #0]
 8000c34:	f01b fd2d 	bl	801c692 <strcat>

	sprintf(temp_buf, "\"led_r\":%d,", data->led_r);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4934      	ldr	r1, [pc, #208]	; (8000d18 <create_json_payload+0x3a8>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f01b fc92 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	6838      	ldr	r0, [r7, #0]
 8000c54:	f01b fd1d 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"led_g\":%d,", data->led_g);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	492d      	ldr	r1, [pc, #180]	; (8000d1c <create_json_payload+0x3ac>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f01b fc82 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f01b fd0d 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"led_b\":%d,", data->led_b);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4926      	ldr	r1, [pc, #152]	; (8000d20 <create_json_payload+0x3b0>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f01b fc72 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4619      	mov	r1, r3
 8000c92:	6838      	ldr	r0, [r7, #0]
 8000c94:	f01b fcfd 	bl	801c692 <strcat>
	sprintf(temp_buf, "\"led_w\":%d", data->led_w);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	491f      	ldr	r1, [pc, #124]	; (8000d24 <create_json_payload+0x3b4>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f01b fc62 	bl	801c570 <siprintf>
	strcat(payload, temp_buf);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f01b fced 	bl	801c692 <strcat>

	strcat(payload, "}");
 8000cb8:	6838      	ldr	r0, [r7, #0]
 8000cba:	f7ff fb1b 	bl	80002f4 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4918      	ldr	r1, [pc, #96]	; (8000d28 <create_json_payload+0x3b8>)
 8000cc8:	461a      	mov	r2, r3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	8013      	strh	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	3750      	adds	r7, #80	; 0x50
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd8:	0801f2f8 	.word	0x0801f2f8
 8000cdc:	0801f2fc 	.word	0x0801f2fc
 8000ce0:	0801f30c 	.word	0x0801f30c
 8000ce4:	0801f314 	.word	0x0801f314
 8000ce8:	0801f31c 	.word	0x0801f31c
 8000cec:	0801f320 	.word	0x0801f320
 8000cf0:	0801f330 	.word	0x0801f330
 8000cf4:	0801f344 	.word	0x0801f344
 8000cf8:	0801f354 	.word	0x0801f354
 8000cfc:	0801f364 	.word	0x0801f364
 8000d00:	0801f374 	.word	0x0801f374
 8000d04:	0801f384 	.word	0x0801f384
 8000d08:	0801f394 	.word	0x0801f394
 8000d0c:	0801f3a4 	.word	0x0801f3a4
 8000d10:	0801f3b4 	.word	0x0801f3b4
 8000d14:	0801f3c4 	.word	0x0801f3c4
 8000d18:	0801f3d4 	.word	0x0801f3d4
 8000d1c:	0801f3e0 	.word	0x0801f3e0
 8000d20:	0801f3ec 	.word	0x0801f3ec
 8000d24:	0801f3f8 	.word	0x0801f3f8
 8000d28:	0801f404 	.word	0x0801f404

08000d2c <serve_get_data_endpoint>:

void serve_get_data_endpoint(struct netconn *conn){
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
 8000d32:	af02      	add	r7, sp, #8
 8000d34:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8000d38:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 8000d3c:	6018      	str	r0, [r3, #0]
	/*Create buffer for JSON payload data*/
	char data_resp_buf[2000];
	memset(data_resp_buf, 0, 2000);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f01a ff71 	bl	801bc30 <memset>
	/*Get data from shared struct*/
	fillData(&visualization_data);
 8000d4e:	4840      	ldr	r0, [pc, #256]	; (8000e50 <serve_get_data_endpoint+0x124>)
 8000d50:	f7ff fd64 	bl	800081c <fillData>
	/*HEADER*/
	strcat(data_resp_buf, "HTTP/1.1 200 OK\r\n");
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff facb 	bl	80002f4 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4413      	add	r3, r2
 8000d68:	4a3a      	ldr	r2, [pc, #232]	; (8000e54 <serve_get_data_endpoint+0x128>)
 8000d6a:	461d      	mov	r5, r3
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d70:	6028      	str	r0, [r5, #0]
 8000d72:	6069      	str	r1, [r5, #4]
 8000d74:	60aa      	str	r2, [r5, #8]
 8000d76:	60eb      	str	r3, [r5, #12]
 8000d78:	8823      	ldrh	r3, [r4, #0]
 8000d7a:	822b      	strh	r3, [r5, #16]
	strcat(data_resp_buf, "Content-Type: application/json\r\n");
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fab7 	bl	80002f4 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <serve_get_data_endpoint+0x12c>)
 8000d92:	4614      	mov	r4, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	f104 0e20 	add.w	lr, r4, #32
 8000d9a:	4665      	mov	r5, ip
 8000d9c:	4626      	mov	r6, r4
 8000d9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000da0:	6028      	str	r0, [r5, #0]
 8000da2:	6069      	str	r1, [r5, #4]
 8000da4:	60aa      	str	r2, [r5, #8]
 8000da6:	60eb      	str	r3, [r5, #12]
 8000da8:	3410      	adds	r4, #16
 8000daa:	f10c 0c10 	add.w	ip, ip, #16
 8000dae:	4574      	cmp	r4, lr
 8000db0:	d1f3      	bne.n	8000d9a <serve_get_data_endpoint+0x6e>
 8000db2:	4663      	mov	r3, ip
 8000db4:	4622      	mov	r2, r4
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	701a      	strb	r2, [r3, #0]
	strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fa98 	bl	80002f4 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <serve_get_data_endpoint+0x130>)
 8000dd0:	4614      	mov	r4, r2
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	f104 0e20 	add.w	lr, r4, #32
 8000dd8:	4665      	mov	r5, ip
 8000dda:	4626      	mov	r6, r4
 8000ddc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dde:	6028      	str	r0, [r5, #0]
 8000de0:	6069      	str	r1, [r5, #4]
 8000de2:	60aa      	str	r2, [r5, #8]
 8000de4:	60eb      	str	r3, [r5, #12]
 8000de6:	3410      	adds	r4, #16
 8000de8:	f10c 0c10 	add.w	ip, ip, #16
 8000dec:	4574      	cmp	r4, lr
 8000dee:	d1f3      	bne.n	8000dd8 <serve_get_data_endpoint+0xac>
 8000df0:	4663      	mov	r3, ip
 8000df2:	4622      	mov	r2, r4
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	701a      	strb	r2, [r3, #0]
    strcat(data_resp_buf, "\r\n");
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa79 	bl	80002f4 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <serve_get_data_endpoint+0x134>)
 8000e0e:	8811      	ldrh	r1, [r2, #0]
 8000e10:	7892      	ldrb	r2, [r2, #2]
 8000e12:	8019      	strh	r1, [r3, #0]
 8000e14:	709a      	strb	r2, [r3, #2]
    /*PAYLOAD*/
    create_json_payload(&visualization_data, data_resp_buf);
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <serve_get_data_endpoint+0x124>)
 8000e1e:	f7ff fda7 	bl	8000970 <create_json_payload>

    /*Write json "file" to conn structure*/
	netconn_write(conn, data_resp_buf, strlen(data_resp_buf), NETCONN_COPY);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fa64 	bl	80002f4 <strlen>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f107 0108 	add.w	r1, r7, #8
 8000e32:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8000e36:	f2a3 70d4 	subw	r0, r3, #2004	; 0x7d4
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	6800      	ldr	r0, [r0, #0]
 8000e42:	f00b fd43 	bl	800c8cc <netconn_write_partly>

}
 8000e46:	bf00      	nop
 8000e48:	f207 77dc 	addw	r7, r7, #2012	; 0x7dc
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	24000478 	.word	0x24000478
 8000e54:	0801f408 	.word	0x0801f408
 8000e58:	0801f41c 	.word	0x0801f41c
 8000e5c:	0801f440 	.word	0x0801f440
 8000e60:	0801f464 	.word	0x0801f464

08000e64 <serve_post_data_endpoint>:


void serve_post_data_endpoint(struct netconn *conn, char *reqbuf, uint16_t buflen){
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b0dd      	sub	sp, #372	; 0x174
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000e6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000e72:	6018      	str	r0, [r3, #0]
 8000e74:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000e78:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000e7c:	6019      	str	r1, [r3, #0]
 8000e7e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000e82:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8000e86:	801a      	strh	r2, [r3, #0]
	char data_resp_buf[256];
	char temp_buff[64];
	char type[8];

	volatile struct m7_to_m4 * const m7_to_m4_ptr = (struct m7_to_m4 *)(0x30040D00);
 8000e88:	4ba1      	ldr	r3, [pc, #644]	; (8001110 <serve_post_data_endpoint+0x2ac>)
 8000e8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	memset(data_resp_buf, 0, 256);
 8000e8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f01a fec9 	bl	801bc30 <memset>
	memset(temp_buff, 0, 64);
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f01a fec2 	bl	801bc30 <memset>
	memset(type, 0, 8);
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f01a febb 	bl	801bc30 <memset>

	uint8_t err = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	uint32_t value;

	/*Set values of RGB led and white LED*/
	sscanf(reqbuf, "POST /data/led/%1s?value=%d ", type, (int *)&value);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	f107 0218 	add.w	r2, r7, #24
 8000ec8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8000ecc:	f5a1 70b0 	sub.w	r0, r1, #352	; 0x160
 8000ed0:	4990      	ldr	r1, [pc, #576]	; (8001114 <serve_post_data_endpoint+0x2b0>)
 8000ed2:	6800      	ldr	r0, [r0, #0]
 8000ed4:	f01b fb6c 	bl	801c5b0 <siscanf>

	switch(type[0]){
 8000ed8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000edc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	3b62      	subs	r3, #98	; 0x62
 8000ee4:	2b15      	cmp	r3, #21
 8000ee6:	d876      	bhi.n	8000fd6 <serve_post_data_endpoint+0x172>
 8000ee8:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <serve_post_data_endpoint+0x8c>)
 8000eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eee:	bf00      	nop
 8000ef0:	08000f91 	.word	0x08000f91
 8000ef4:	08000fd7 	.word	0x08000fd7
 8000ef8:	08000fd7 	.word	0x08000fd7
 8000efc:	08000fd7 	.word	0x08000fd7
 8000f00:	08000fd7 	.word	0x08000fd7
 8000f04:	08000f6d 	.word	0x08000f6d
 8000f08:	08000fd7 	.word	0x08000fd7
 8000f0c:	08000fd7 	.word	0x08000fd7
 8000f10:	08000fd7 	.word	0x08000fd7
 8000f14:	08000fd7 	.word	0x08000fd7
 8000f18:	08000fd7 	.word	0x08000fd7
 8000f1c:	08000fd7 	.word	0x08000fd7
 8000f20:	08000fd7 	.word	0x08000fd7
 8000f24:	08000fd7 	.word	0x08000fd7
 8000f28:	08000fd7 	.word	0x08000fd7
 8000f2c:	08000fd7 	.word	0x08000fd7
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000fd7 	.word	0x08000fd7
 8000f38:	08000fd7 	.word	0x08000fd7
 8000f3c:	08000fd7 	.word	0x08000fd7
 8000f40:	08000fd7 	.word	0x08000fd7
 8000f44:	08000fb5 	.word	0x08000fb5
		case 'r':
			err = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_r = (uint8_t) (value % 256);
 8000f4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000f5c:	701a      	strb	r2, [r3, #0]
			m7_to_m4_ptr->rgb_r = led_data.led_r;
 8000f5e:	4b6e      	ldr	r3, [pc, #440]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f68:	601a      	str	r2, [r3, #0]
			break;
 8000f6a:	e038      	b.n	8000fde <serve_post_data_endpoint+0x17a>
		case 'g':
			err = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_g = (uint8_t) (value % 256);
 8000f72:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000f80:	705a      	strb	r2, [r3, #1]
			m7_to_m4_ptr->rgb_g = led_data.led_g;
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f8c:	605a      	str	r2, [r3, #4]
			break;
 8000f8e:	e026      	b.n	8000fde <serve_post_data_endpoint+0x17a>
		case 'b':
			err = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_b = (uint8_t) (value % 256);
 8000f96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000fa4:	709a      	strb	r2, [r3, #2]
			m7_to_m4_ptr->rgb_b = led_data.led_b;
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fb0:	609a      	str	r2, [r3, #8]
			break;
 8000fb2:	e014      	b.n	8000fde <serve_post_data_endpoint+0x17a>
		case 'w':
			err = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			led_data.led_w = (uint8_t) (value % 256);
 8000fba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000fbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000fc8:	70da      	strb	r2, [r3, #3]
			m7_to_m4_ptr->w_led_status = led_data.led_w;
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <serve_post_data_endpoint+0x2b4>)
 8000fcc:	78da      	ldrb	r2, [r3, #3]
 8000fce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fd2:	731a      	strb	r2, [r3, #12]
			break;
 8000fd4:	e003      	b.n	8000fde <serve_post_data_endpoint+0x17a>
		default:
			err = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			break;
 8000fdc:	bf00      	nop
	}

	if(err == 0){
 8000fde:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 8087 	bne.w	80010f6 <serve_post_data_endpoint+0x292>
	/*If values for LEDs were set right*/
		strcat(data_resp_buf, "HTTP/1.1 200 OK\r\n");
 8000fe8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f981 	bl	80002f4 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a47      	ldr	r2, [pc, #284]	; (800111c <serve_post_data_endpoint+0x2b8>)
 8000ffe:	461d      	mov	r5, r3
 8001000:	4614      	mov	r4, r2
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	6028      	str	r0, [r5, #0]
 8001006:	6069      	str	r1, [r5, #4]
 8001008:	60aa      	str	r2, [r5, #8]
 800100a:	60eb      	str	r3, [r5, #12]
 800100c:	8823      	ldrh	r3, [r4, #0]
 800100e:	822b      	strh	r3, [r5, #16]
		strcat(data_resp_buf, "Content-Type: text/plain\r\n");
 8001010:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f96d 	bl	80002f4 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001022:	4413      	add	r3, r2
 8001024:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <serve_post_data_endpoint+0x2bc>)
 8001026:	461d      	mov	r5, r3
 8001028:	4614      	mov	r4, r2
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	6028      	str	r0, [r5, #0]
 800102e:	6069      	str	r1, [r5, #4]
 8001030:	60aa      	str	r2, [r5, #8]
 8001032:	60eb      	str	r3, [r5, #12]
 8001034:	cc03      	ldmia	r4!, {r0, r1}
 8001036:	6128      	str	r0, [r5, #16]
 8001038:	6169      	str	r1, [r5, #20]
 800103a:	8823      	ldrh	r3, [r4, #0]
 800103c:	78a2      	ldrb	r2, [r4, #2]
 800103e:	832b      	strh	r3, [r5, #24]
 8001040:	4613      	mov	r3, r2
 8001042:	76ab      	strb	r3, [r5, #26]
		strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 8001044:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f953 	bl	80002f4 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001056:	4413      	add	r3, r2
 8001058:	4a32      	ldr	r2, [pc, #200]	; (8001124 <serve_post_data_endpoint+0x2c0>)
 800105a:	4614      	mov	r4, r2
 800105c:	469c      	mov	ip, r3
 800105e:	f104 0e20 	add.w	lr, r4, #32
 8001062:	4665      	mov	r5, ip
 8001064:	4626      	mov	r6, r4
 8001066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001068:	6028      	str	r0, [r5, #0]
 800106a:	6069      	str	r1, [r5, #4]
 800106c:	60aa      	str	r2, [r5, #8]
 800106e:	60eb      	str	r3, [r5, #12]
 8001070:	3410      	adds	r4, #16
 8001072:	f10c 0c10 	add.w	ip, ip, #16
 8001076:	4574      	cmp	r4, lr
 8001078:	d1f3      	bne.n	8001062 <serve_post_data_endpoint+0x1fe>
 800107a:	4663      	mov	r3, ip
 800107c:	4622      	mov	r2, r4
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	701a      	strb	r2, [r3, #0]
		strcat(data_resp_buf, "\r\n");
 8001082:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f934 	bl	80002f4 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001094:	4413      	add	r3, r2
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <serve_post_data_endpoint+0x2c4>)
 8001098:	8811      	ldrh	r1, [r2, #0]
 800109a:	7892      	ldrb	r2, [r2, #2]
 800109c:	8019      	strh	r1, [r3, #0]
 800109e:	709a      	strb	r2, [r3, #2]

		sprintf(temp_buff, "{\"led_%c\":%d}", type[0], (int)value);
 80010a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010b0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f107 0020 	add.w	r0, r7, #32
 80010ba:	491c      	ldr	r1, [pc, #112]	; (800112c <serve_post_data_endpoint+0x2c8>)
 80010bc:	f01b fa58 	bl	801c570 <siprintf>
		strcat(data_resp_buf, temp_buff);
 80010c0:	f107 0220 	add.w	r2, r7, #32
 80010c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f01b fae1 	bl	801c692 <strcat>

		netconn_write(conn, data_resp_buf , strlen(data_resp_buf), NETCONN_COPY);
 80010d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f90d 	bl	80002f4 <strlen>
 80010da:	4602      	mov	r2, r0
 80010dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80010e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010e4:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 80010e8:	2300      	movs	r3, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	6800      	ldr	r0, [r0, #0]
 80010f0:	f00b fbec 	bl	800c8cc <netconn_write_partly>
	} else {
	/*If values for LEDs were set wrong*/
		serve_404(conn);
	}

}
 80010f4:	e006      	b.n	8001104 <serve_post_data_endpoint+0x2a0>
		serve_404(conn);
 80010f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010fa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f000 f816 	bl	8001130 <serve_404>
}
 8001104:	bf00      	nop
 8001106:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800110a:	46bd      	mov	sp, r7
 800110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110e:	bf00      	nop
 8001110:	30040d00 	.word	0x30040d00
 8001114:	0801f468 	.word	0x0801f468
 8001118:	24000684 	.word	0x24000684
 800111c:	0801f408 	.word	0x0801f408
 8001120:	0801f488 	.word	0x0801f488
 8001124:	0801f440 	.word	0x0801f440
 8001128:	0801f464 	.word	0x0801f464
 800112c:	0801f4a4 	.word	0x0801f4a4

08001130 <serve_404>:

void serve_404(struct netconn *conn){
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8001136:	af02      	add	r7, sp, #8
 8001138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800113c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001140:	6018      	str	r0, [r3, #0]
	/*Error page*/
	char data_resp_buf[512];
	memset(data_resp_buf, 0, 512);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f01a fd6f 	bl	801bc30 <memset>


	strcat(data_resp_buf, "HTTP/1.1 404 Not Found\r\n");
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f8cc 	bl	80002f4 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4413      	add	r3, r2
 8001166:	4a5a      	ldr	r2, [pc, #360]	; (80012d0 <serve_404+0x1a0>)
 8001168:	461d      	mov	r5, r3
 800116a:	4614      	mov	r4, r2
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	6028      	str	r0, [r5, #0]
 8001170:	6069      	str	r1, [r5, #4]
 8001172:	60aa      	str	r2, [r5, #8]
 8001174:	60eb      	str	r3, [r5, #12]
 8001176:	cc03      	ldmia	r4!, {r0, r1}
 8001178:	6128      	str	r0, [r5, #16]
 800117a:	6169      	str	r1, [r5, #20]
 800117c:	7823      	ldrb	r3, [r4, #0]
 800117e:	762b      	strb	r3, [r5, #24]
	strcat(data_resp_buf, "Server: LwIP Nucleo H755\r\n");
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f8b5 	bl	80002f4 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4413      	add	r3, r2
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <serve_404+0x1a4>)
 8001196:	461d      	mov	r5, r3
 8001198:	4614      	mov	r4, r2
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	6028      	str	r0, [r5, #0]
 800119e:	6069      	str	r1, [r5, #4]
 80011a0:	60aa      	str	r2, [r5, #8]
 80011a2:	60eb      	str	r3, [r5, #12]
 80011a4:	cc03      	ldmia	r4!, {r0, r1}
 80011a6:	6128      	str	r0, [r5, #16]
 80011a8:	6169      	str	r1, [r5, #20]
 80011aa:	8823      	ldrh	r3, [r4, #0]
 80011ac:	78a2      	ldrb	r2, [r4, #2]
 80011ae:	832b      	strh	r3, [r5, #24]
 80011b0:	4613      	mov	r3, r2
 80011b2:	76ab      	strb	r3, [r5, #26]
	strcat(data_resp_buf, "Connection: Closed\r\n");
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f89b 	bl	80002f4 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4413      	add	r3, r2
 80011c8:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <serve_404+0x1a8>)
 80011ca:	461d      	mov	r5, r3
 80011cc:	4614      	mov	r4, r2
 80011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d0:	6028      	str	r0, [r5, #0]
 80011d2:	6069      	str	r1, [r5, #4]
 80011d4:	60aa      	str	r2, [r5, #8]
 80011d6:	60eb      	str	r3, [r5, #12]
 80011d8:	6820      	ldr	r0, [r4, #0]
 80011da:	6128      	str	r0, [r5, #16]
 80011dc:	7923      	ldrb	r3, [r4, #4]
 80011de:	752b      	strb	r3, [r5, #20]
	strcat(data_resp_buf, "Access-Control-Allow-Origin: *\r\n");
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f885 	bl	80002f4 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4413      	add	r3, r2
 80011f4:	4a39      	ldr	r2, [pc, #228]	; (80012dc <serve_404+0x1ac>)
 80011f6:	4614      	mov	r4, r2
 80011f8:	469c      	mov	ip, r3
 80011fa:	f104 0e20 	add.w	lr, r4, #32
 80011fe:	4665      	mov	r5, ip
 8001200:	4626      	mov	r6, r4
 8001202:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001204:	6028      	str	r0, [r5, #0]
 8001206:	6069      	str	r1, [r5, #4]
 8001208:	60aa      	str	r2, [r5, #8]
 800120a:	60eb      	str	r3, [r5, #12]
 800120c:	3410      	adds	r4, #16
 800120e:	f10c 0c10 	add.w	ip, ip, #16
 8001212:	4574      	cmp	r4, lr
 8001214:	d1f3      	bne.n	80011fe <serve_404+0xce>
 8001216:	4663      	mov	r3, ip
 8001218:	4622      	mov	r2, r4
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
	strcat(data_resp_buf, "Content-Type: text/html; charset=iso-8859-1\r\n\r\n\r\n");
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f866 	bl	80002f4 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4413      	add	r3, r2
 8001232:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <serve_404+0x1b0>)
 8001234:	4614      	mov	r4, r2
 8001236:	469c      	mov	ip, r3
 8001238:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800123c:	4665      	mov	r5, ip
 800123e:	4626      	mov	r6, r4
 8001240:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001242:	6028      	str	r0, [r5, #0]
 8001244:	6069      	str	r1, [r5, #4]
 8001246:	60aa      	str	r2, [r5, #8]
 8001248:	60eb      	str	r3, [r5, #12]
 800124a:	3410      	adds	r4, #16
 800124c:	f10c 0c10 	add.w	ip, ip, #16
 8001250:	4574      	cmp	r4, lr
 8001252:	d1f3      	bne.n	800123c <serve_404+0x10c>
 8001254:	4662      	mov	r2, ip
 8001256:	4623      	mov	r3, r4
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	8013      	strh	r3, [r2, #0]
	strcat(data_resp_buf, "<center><big>404 oh noes</h1></center>");
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f847 	bl	80002f4 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4413      	add	r3, r2
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <serve_404+0x1b4>)
 8001272:	4614      	mov	r4, r2
 8001274:	469c      	mov	ip, r3
 8001276:	f104 0e20 	add.w	lr, r4, #32
 800127a:	4665      	mov	r5, ip
 800127c:	4626      	mov	r6, r4
 800127e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001280:	6028      	str	r0, [r5, #0]
 8001282:	6069      	str	r1, [r5, #4]
 8001284:	60aa      	str	r2, [r5, #8]
 8001286:	60eb      	str	r3, [r5, #12]
 8001288:	3410      	adds	r4, #16
 800128a:	f10c 0c10 	add.w	ip, ip, #16
 800128e:	4574      	cmp	r4, lr
 8001290:	d1f3      	bne.n	800127a <serve_404+0x14a>
 8001292:	4663      	mov	r3, ip
 8001294:	4622      	mov	r2, r4
 8001296:	6810      	ldr	r0, [r2, #0]
 8001298:	6018      	str	r0, [r3, #0]
 800129a:	8891      	ldrh	r1, [r2, #4]
 800129c:	7992      	ldrb	r2, [r2, #6]
 800129e:	8099      	strh	r1, [r3, #4]
 80012a0:	719a      	strb	r2, [r3, #6]
	netconn_write(conn, data_resp_buf, strlen(data_resp_buf), NETCONN_COPY);
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f824 	bl	80002f4 <strlen>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f107 0108 	add.w	r1, r7, #8
 80012b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b6:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 80012ba:	2300      	movs	r3, #0
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	6800      	ldr	r0, [r0, #0]
 80012c2:	f00b fb03 	bl	800c8cc <netconn_write_partly>

}
 80012c6:	bf00      	nop
 80012c8:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	0801f4b4 	.word	0x0801f4b4
 80012d4:	0801f4d0 	.word	0x0801f4d0
 80012d8:	0801f4ec 	.word	0x0801f4ec
 80012dc:	0801f440 	.word	0x0801f440
 80012e0:	0801f504 	.word	0x0801f504
 80012e4:	0801f538 	.word	0x0801f538

080012e8 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
    err_t recv_err;
    char *buf;
    u16_t buflen;
    struct fs_file file;

    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f6:	4852      	ldr	r0, [pc, #328]	; (8001440 <http_server_serve+0x158>)
 80012f8:	f003 fa64 	bl	80047c4 <HAL_GPIO_WritePin>

    /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
    recv_err = netconn_recv(conn, &inbuf);
 80012fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f00b fa68 	bl	800c7d8 <netconn_recv>
 8001308:	4603      	mov	r3, r0
 800130a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (recv_err == ERR_OK)
 800130e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8083 	bne.w	800141e <http_server_serve+0x136>
    {
        if (netconn_err(conn) == ERR_OK)
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f00b fbe6 	bl	800caea <netconn_err>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d17c      	bne.n	800141e <http_server_serve+0x136>
        {
            netbuf_data(inbuf, (void **)&buf, &buflen);
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800132a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800132e:	4618      	mov	r0, r3
 8001330:	f012 f816 	bl	8013360 <netbuf_data>

            /*Is this an HTTP GET command? (only check the first 5 chars, since
            there are other formats for GET, and we're keeping it very simple )*/
            if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0))
 8001334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001336:	2b04      	cmp	r3, #4
 8001338:	d95e      	bls.n	80013f8 <http_server_serve+0x110>
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	2205      	movs	r2, #5
 800133e:	4941      	ldr	r1, [pc, #260]	; (8001444 <http_server_serve+0x15c>)
 8001340:	4618      	mov	r0, r3
 8001342:	f01b f9b5 	bl	801c6b0 <strncmp>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d155      	bne.n	80013f8 <http_server_serve+0x110>
            {

            	/*Check if request to get ST.gif*/
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	220e      	movs	r2, #14
 8001350:	493d      	ldr	r1, [pc, #244]	; (8001448 <http_server_serve+0x160>)
 8001352:	4618      	mov	r0, r3
 8001354:	f01b f9ac 	bl	801c6b0 <strncmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d114      	bne.n	8001388 <http_server_serve+0xa0>
            	{
            		fs_open(&file,"/head02.png");
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	493a      	ldr	r1, [pc, #232]	; (800144c <http_server_serve+0x164>)
 8001364:	4618      	mov	r0, r3
 8001366:	f00f fe99 	bl	801109c <fs_open>
            		netconn_write(conn, (const unsigned char *)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	461a      	mov	r2, r3
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f00b faa8 	bl	800c8cc <netconn_write_partly>
            		fs_close(&file);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4618      	mov	r0, r3
 8001382:	f00f fec9 	bl	8011118 <fs_close>
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 8001386:	e04a      	b.n	800141e <http_server_serve+0x136>
            	}
            	else if((strncmp(buf, "GET /index.html", 15) == 0) || (strncmp(buf, "GET / ", 6) == 0))
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	220f      	movs	r2, #15
 800138c:	4930      	ldr	r1, [pc, #192]	; (8001450 <http_server_serve+0x168>)
 800138e:	4618      	mov	r0, r3
 8001390:	f01b f98e 	bl	801c6b0 <strncmp>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d008      	beq.n	80013ac <http_server_serve+0xc4>
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	2206      	movs	r2, #6
 800139e:	492d      	ldr	r1, [pc, #180]	; (8001454 <http_server_serve+0x16c>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f01b f985 	bl	801c6b0 <strncmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d114      	bne.n	80013d6 <http_server_serve+0xee>
            	{
					/*Load STM32H7xx page*/
					fs_open(&file, "/index.html");
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4929      	ldr	r1, [pc, #164]	; (8001458 <http_server_serve+0x170>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00f fe72 	bl	801109c <fs_open>
					netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	461a      	mov	r2, r3
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f00b fa81 	bl	800c8cc <netconn_write_partly>
					fs_close(&file);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00f fea2 	bl	8011118 <fs_close>
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 80013d4:	e023      	b.n	800141e <http_server_serve+0x136>
				 }
            	else if(strncmp((char const *)buf, "GET /data HTTP/1.1", 18) == 0)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	2212      	movs	r2, #18
 80013da:	4920      	ldr	r1, [pc, #128]	; (800145c <http_server_serve+0x174>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f01b f967 	bl	801c6b0 <strncmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <http_server_serve+0x108>
            	{
            		/*Handle data endpoint*/
            		serve_get_data_endpoint(conn);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fc9f 	bl	8000d2c <serve_get_data_endpoint>
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 80013ee:	e016      	b.n	800141e <http_server_serve+0x136>
            	}
            	else
            	{
					serve_404(conn);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe9d 	bl	8001130 <serve_404>
            	if (strncmp((char const *)buf, "GET /head02.png", 14) == 0)
 80013f6:	e012      	b.n	800141e <http_server_serve+0x136>
				}
			}
            else if(strncmp(buf, "POST /data/led/", 15) == 0)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	220f      	movs	r2, #15
 80013fc:	4918      	ldr	r1, [pc, #96]	; (8001460 <http_server_serve+0x178>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f01b f956 	bl	801c6b0 <strncmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <http_server_serve+0x130>
            {
           	  serve_post_data_endpoint(conn, buf, buflen);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fd27 	bl	8000e64 <serve_post_data_endpoint>
 8001416:	e002      	b.n	800141e <http_server_serve+0x136>
            }
             else
             {
       		serve_404(conn);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fe89 	bl	8001130 <serve_404>
      }



    /* Close the connection (server closes in HTTP) */
    netconn_close(conn);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f00b fb56 	bl	800cad0 <netconn_close>

    /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
    netbuf_delete(inbuf);
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	4618      	mov	r0, r3
 8001428:	f011 ff7a 	bl	8013320 <netbuf_delete>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <http_server_serve+0x158>)
 8001434:	f003 f9c6 	bl	80047c4 <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	3730      	adds	r7, #48	; 0x30
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	58020400 	.word	0x58020400
 8001444:	0801f560 	.word	0x0801f560
 8001448:	0801f568 	.word	0x0801f568
 800144c:	0801f578 	.word	0x0801f578
 8001450:	0801f584 	.word	0x0801f584
 8001454:	0801f594 	.word	0x0801f594
 8001458:	0801f59c 	.word	0x0801f59c
 800145c:	0801f5a8 	.word	0x0801f5a8
 8001460:	0801f5bc 	.word	0x0801f5bc

08001464 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    struct netconn *conn, *newconn;
    err_t err, accept_err;

    /* Create a new TCP connection handle */
    conn = netconn_new(NETCONN_TCP);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2010      	movs	r0, #16
 8001472:	f00a fe8b 	bl	800c18c <netconn_new_with_proto_and_callback>
 8001476:	6178      	str	r0, [r7, #20]

    if (conn != NULL)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d023      	beq.n	80014c6 <http_server_netconn_thread+0x62>
    {
        /* Bind to port 80 (HTTP) with default IP address */
        err = netconn_bind(conn, NULL, 80);
 800147e:	2250      	movs	r2, #80	; 0x50
 8001480:	2100      	movs	r1, #0
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f00a ff3c 	bl	800c300 <netconn_bind>
 8001488:	4603      	mov	r3, r0
 800148a:	74fb      	strb	r3, [r7, #19]

        if (err == ERR_OK)
 800148c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d118      	bne.n	80014c6 <http_server_netconn_thread+0x62>
        {
            /* Put the connection into LISTEN state */
            netconn_listen(conn);
 8001494:	21ff      	movs	r1, #255	; 0xff
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f00a ff6a 	bl	800c370 <netconn_listen_with_backlog>

            while (1)
            {
                /* accept any icoming connection */
                accept_err = netconn_accept(conn, &newconn);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f00a ff90 	bl	800c3c8 <netconn_accept>
 80014a8:	4603      	mov	r3, r0
 80014aa:	74bb      	strb	r3, [r7, #18]
                if (accept_err == ERR_OK)
 80014ac:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f3      	bne.n	800149c <http_server_netconn_thread+0x38>
                {
                    /* serve connection */
                    http_server_serve(newconn);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff16 	bl	80012e8 <http_server_serve>

                    /* delete connection */
                    netconn_delete(newconn);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4618      	mov	r0, r3
 80014c0:	f00a ff02 	bl	800c2c8 <netconn_delete>
                accept_err = netconn_accept(conn, &newconn);
 80014c4:	e7ea      	b.n	800149c <http_server_netconn_thread+0x38>
                }
            }
        }
    }
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80014d6:	af02      	add	r7, sp, #8
	visualization_data = (const struct visualization_data_s){ 0 };
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <http_server_netconn_init+0x44>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014e0:	461a      	mov	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f01a fba4 	bl	801bc30 <memset>
	visualization_data.humidity[59] = 1025.0;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <http_server_netconn_init+0x44>)
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <http_server_netconn_init+0x48>)
 80014ec:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	visualization_data.temperature[59] = 15.0;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <http_server_netconn_init+0x44>)
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <http_server_netconn_init+0x4c>)
 80014f4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80014f8:	2301      	movs	r3, #1
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001500:	2200      	movs	r2, #0
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <http_server_netconn_init+0x50>)
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <http_server_netconn_init+0x54>)
 8001506:	f013 fa73 	bl	80149f0 <sys_thread_new>
}
 800150a:	bf00      	nop
 800150c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	24000478 	.word	0x24000478
 8001518:	44802000 	.word	0x44802000
 800151c:	41700000 	.word	0x41700000
 8001520:	08001465 	.word	0x08001465
 8001524:	0801f5cc 	.word	0x0801f5cc

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800152e:	f000 fa7d 	bl	8001a2c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001532:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <main+0x1b0>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11b      	bne.n	8001576 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001544:	f3bf 8f6f 	isb	sy
}
 8001548:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <main+0x1b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001552:	f3bf 8f4f 	dsb	sy
}
 8001556:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001558:	f3bf 8f6f 	isb	sy
}
 800155c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800155e:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <main+0x1b0>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a5d      	ldr	r2, [pc, #372]	; (80016d8 <main+0x1b0>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800156a:	f3bf 8f4f 	dsb	sy
}
 800156e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001570:	f3bf 8f6f 	isb	sy
}
 8001574:	e000      	b.n	8001578 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001576:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <main+0x1b0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d138      	bne.n	80015f6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <main+0x1b0>)
 8001586:	2200      	movs	r2, #0
 8001588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
}
 8001590:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001592:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <main+0x1b0>)
 8001594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	0b5b      	lsrs	r3, r3, #13
 800159e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015bc:	4946      	ldr	r1, [pc, #280]	; (80016d8 <main+0x1b0>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	627a      	str	r2, [r7, #36]	; 0x24
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ef      	bne.n	80015ae <main+0x86>
    } while(sets-- != 0U);
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e5      	bne.n	80015a4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80015d8:	f3bf 8f4f 	dsb	sy
}
 80015dc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015de:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <main+0x1b0>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a3d      	ldr	r2, [pc, #244]	; (80016d8 <main+0x1b0>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ea:	f3bf 8f4f 	dsb	sy
}
 80015ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f0:	f3bf 8f6f 	isb	sy
}
 80015f4:	e000      	b.n	80015f8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015f6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80015f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80015fe:	bf00      	nop
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <main+0x1b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <main+0xee>
 800160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	637a      	str	r2, [r7, #52]	; 0x34
 8001612:	2b00      	cmp	r3, #0
 8001614:	dcf4      	bgt.n	8001600 <main+0xd8>
  if ( timeout < 0 )
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	2b00      	cmp	r3, #0
 800161a:	da01      	bge.n	8001620 <main+0xf8>
  {
  Error_Handler();
 800161c:	f000 fa62 	bl	8001ae4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f000 fe5c 	bl	80022dc <HAL_Init>
//	#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f866 	bl	80016f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <main+0x1b4>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <main+0x1b4>)
 8001630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <main+0x1b4>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001646:	2000      	movs	r0, #0
 8001648:	f003 f8d6 	bl	80047f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f003 f8ec 	bl	800482c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800165a:	bf00      	nop
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <main+0x1b4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d104      	bne.n	8001672 <main+0x14a>
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	637a      	str	r2, [r7, #52]	; 0x34
 800166e:	2b00      	cmp	r3, #0
 8001670:	dcf4      	bgt.n	800165c <main+0x134>
if ( timeout < 0 )
 8001672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001674:	2b00      	cmp	r3, #0
 8001676:	da01      	bge.n	800167c <main+0x154>
{
Error_Handler();
 8001678:	f000 fa34 	bl	8001ae4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f000 f90a 	bl	8001894 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001680:	f000 f8bc 	bl	80017fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t * iniMsg = "HW init done starting threads...\r\n";
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <main+0x1b8>)
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_UART_Transmit(&huart3, iniMsg, strlen(iniMsg), 100);
 8001688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800168a:	f7fe fe33 	bl	80002f4 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <main+0x1bc>)
 8001698:	f005 ff9c 	bl	80075d4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, "ahoj\n", 5, 500);
 800169c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a0:	2205      	movs	r2, #5
 80016a2:	4911      	ldr	r1, [pc, #68]	; (80016e8 <main+0x1c0>)
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <main+0x1bc>)
 80016a6:	f005 ff95 	bl	80075d4 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Start */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, 256);
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <main+0x1c4>)
 80016ac:	f107 0408 	add.w	r4, r7, #8
 80016b0:	461d      	mov	r5, r3
 80016b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartHandle = osThreadCreate(osThread(Start), NULL);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f007 fd1c 	bl	8009102 <osThreadCreate>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <main+0x1c8>)
 80016ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016d0:	f007 fd00 	bl	80090d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x1ac>
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	58024400 	.word	0x58024400
 80016e0:	0801f5dc 	.word	0x0801f5dc
 80016e4:	24000688 	.word	0x24000688
 80016e8:	0801f600 	.word	0x0801f600
 80016ec:	0801f608 	.word	0x0801f608
 80016f0:	24000718 	.word	0x24000718

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09c      	sub	sp, #112	; 0x70
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	224c      	movs	r2, #76	; 0x4c
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f01a fa94 	bl	801bc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2220      	movs	r2, #32
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f01a fa8e 	bl	801bc30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001714:	2004      	movs	r0, #4
 8001716:	f003 f89d 	bl	8004854 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <SystemClock_Config+0xfc>)
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <SystemClock_Config+0xfc>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	62d3      	str	r3, [r2, #44]	; 0x2c
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <SystemClock_Config+0xfc>)
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <SystemClock_Config+0x100>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <SystemClock_Config+0x100>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <SystemClock_Config+0x100>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800174c:	bf00      	nop
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <SystemClock_Config+0x100>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175a:	d1f8      	bne.n	800174e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemClock_Config+0x104>)
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <SystemClock_Config+0x104>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001770:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001776:	2302      	movs	r3, #2
 8001778:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177a:	2302      	movs	r3, #2
 800177c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800177e:	2302      	movs	r3, #2
 8001780:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001786:	2302      	movs	r3, #2
 8001788:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178a:	2304      	movs	r3, #4
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001792:	230c      	movs	r3, #12
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001796:	2300      	movs	r3, #0
 8001798:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 f8b0 	bl	8004908 <HAL_RCC_OscConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80017ae:	f000 f999 	bl	8001ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b2:	233f      	movs	r3, #63	; 0x3f
 80017b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b6:	2303      	movs	r3, #3
 80017b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017be:	2308      	movs	r3, #8
 80017c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017c6:	2340      	movs	r3, #64	; 0x40
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2102      	movs	r1, #2
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fca3 	bl	8005124 <HAL_RCC_ClockConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80017e4:	f000 f97e 	bl	8001ae4 <Error_Handler>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3770      	adds	r7, #112	; 0x70
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58000400 	.word	0x58000400
 80017f4:	58024800 	.word	0x58024800
 80017f8:	58024400 	.word	0x58024400

080017fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <MX_USART3_UART_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_USART3_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_USART3_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_USART3_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001846:	f005 fe75 	bl	8007534 <HAL_UART_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001850:	f000 f948 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001858:	f006 fe62 	bl	8008520 <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001862:	f000 f93f 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_USART3_UART_Init+0x90>)
 800186a:	f006 fe97 	bl	800859c <HAL_UARTEx_SetRxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001874:	f000 f936 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_USART3_UART_Init+0x90>)
 800187a:	f006 fe18 	bl	80084ae <HAL_UARTEx_DisableFifoMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001884:	f000 f92e 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	24000688 	.word	0x24000688
 8001890:	40004800 	.word	0x40004800

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a53      	ldr	r2, [pc, #332]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <MX_GPIO_Init+0x16c>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <MX_GPIO_Init+0x16c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <MX_GPIO_Init+0x16c>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_GPIO_Init+0x16c>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <MX_GPIO_Init+0x170>)
 8001984:	f002 ff1e 	bl	80047c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDW_GPIO_Port, LDW_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	481e      	ldr	r0, [pc, #120]	; (8001a08 <MX_GPIO_Init+0x174>)
 8001990:	f002 ff18 	bl	80047c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2102      	movs	r1, #2
 8001998:	481c      	ldr	r0, [pc, #112]	; (8001a0c <MX_GPIO_Init+0x178>)
 800199a:	f002 ff13 	bl	80047c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800199e:	f244 0301 	movw	r3, #16385	; 0x4001
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4813      	ldr	r0, [pc, #76]	; (8001a04 <MX_GPIO_Init+0x170>)
 80019b8:	f002 fd54 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDW_Pin */
  GPIO_InitStruct.Pin = LDW_Pin;
 80019bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDW_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_GPIO_Init+0x174>)
 80019d6:	f002 fd45 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019da:	2302      	movs	r3, #2
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_GPIO_Init+0x178>)
 80019f2:	f002 fd37 	bl	8004464 <HAL_GPIO_Init>

}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020400 	.word	0x58020400
 8001a08:	58020c00 	.word	0x58020c00
 8001a0c:	58021000 	.word	0x58021000

08001a10 <StartThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThread */
void StartThread(void const * argument)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001a18:	f006 fe4c 	bl	80086b4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize echo server */
  tcpecho_init();
 8001a1c:	f000 f8d2 	bl	8001bc4 <tcpecho_init>

  /* Initialize webserver demo */
  http_server_netconn_init();
 8001a20:	f7ff fd56 	bl	80014d0 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {

  	/* Delete the Init Thread */
    osThreadTerminate(NULL);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f007 fbb8 	bl	800919a <osThreadTerminate>
 8001a2a:	e7fb      	b.n	8001a24 <StartThread+0x14>

08001a2c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a3e:	f000 fda9 	bl	8002594 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a42:	2301      	movs	r3, #1
 8001a44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MPU_Config+0x8c>)
 8001a4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001a4e:	230d      	movs	r3, #13
 8001a50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fdc7 	bl	8002604 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MPU_Config+0x90>)
 8001a7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a86:	463b      	mov	r3, r7
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fdbb 	bl	8002604 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MPU_Config+0x8c>)
 8001a94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001a96:	2307      	movs	r3, #7
 8001a98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fdad 	bl	8002604 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f000 fd8a 	bl	80025c4 <HAL_MPU_Enable>

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	30040000 	.word	0x30040000
 8001abc:	30044000 	.word	0x30044000

08001ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad2:	f000 fc3f 	bl	8002354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	e7fe      	b.n	8001aec <Error_Handler+0x8>
	...

08001af0 <tcpecho_thread>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  /* Bind connection to well known port number 7. */
  conn = netconn_new(NETCONN_TCP);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2010      	movs	r0, #16
 8001afe:	f00a fb45 	bl	800c18c <netconn_new_with_proto_and_callback>
 8001b02:	61f8      	str	r0, [r7, #28]
  netconn_bind(conn, IP_ADDR_ANY, 7);
 8001b04:	2207      	movs	r2, #7
 8001b06:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <tcpecho_thread+0xc4>)
 8001b08:	69f8      	ldr	r0, [r7, #28]
 8001b0a:	f00a fbf9 	bl	800c300 <netconn_bind>

  LWIP_ERROR("tcpecho: invalid conn", (conn != NULL), return;);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <tcpecho_thread+0x32>
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <tcpecho_thread+0xc8>)
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	4928      	ldr	r1, [pc, #160]	; (8001bbc <tcpecho_thread+0xcc>)
 8001b1a:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <tcpecho_thread+0xd0>)
 8001b1c:	f01a fcd2 	bl	801c4c4 <iprintf>
 8001b20:	e044      	b.n	8001bac <tcpecho_thread+0xbc>

  /* Tell connection to go into listening mode. */
  netconn_listen(conn);
 8001b22:	21ff      	movs	r1, #255	; 0xff
 8001b24:	69f8      	ldr	r0, [r7, #28]
 8001b26:	f00a fc23 	bl	800c370 <netconn_listen_with_backlog>

  while (1) {

    /* Grab new connection. */
    err = netconn_accept(conn, &newconn);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	69f8      	ldr	r0, [r7, #28]
 8001b32:	f00a fc49 	bl	800c3c8 <netconn_accept>
 8001b36:	4603      	mov	r3, r0
 8001b38:	76fb      	strb	r3, [r7, #27]
    /*printf("accepted new connection %p\n", newconn);*/
    /* Process the new connection. */
    if (err == ERR_OK) {
 8001b3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f3      	bne.n	8001b2a <tcpecho_thread+0x3a>
      struct netbuf *buf;
      void *data;
      u16_t len;
      
      while ((err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8001b42:	e01d      	b.n	8001b80 <tcpecho_thread+0x90>
        /*printf("Recved\n");*/
        do {
             netbuf_data(buf, &data, &len);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f107 020a 	add.w	r2, r7, #10
 8001b4a:	f107 010c 	add.w	r1, r7, #12
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f011 fc06 	bl	8013360 <netbuf_data>
             err = netconn_write(newconn, data, len, NETCONN_COPY);
 8001b54:	6978      	ldr	r0, [r7, #20]
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	897b      	ldrh	r3, [r7, #10]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	f00a feb3 	bl	800c8cc <netconn_write_partly>
 8001b66:	4603      	mov	r3, r0
 8001b68:	76fb      	strb	r3, [r7, #27]
        } while (netbuf_next(buf) >= 0);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f011 fc41 	bl	80133f4 <netbuf_next>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dae5      	bge.n	8001b44 <tcpecho_thread+0x54>
        netbuf_delete(buf);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f011 fbd0 	bl	8013320 <netbuf_delete>
      while ((err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f107 0210 	add.w	r2, r7, #16
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00a fe25 	bl	800c7d8 <netconn_recv>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	76fb      	strb	r3, [r7, #27]
 8001b92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0d4      	beq.n	8001b44 <tcpecho_thread+0x54>
      }
      /*printf("Got EOF, looping\n");*/ 
      /* Close connection and discard connection identifier. */
      netconn_close(newconn);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00a ff97 	bl	800cad0 <netconn_close>
      netconn_delete(newconn);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00a fb8f 	bl	800c2c8 <netconn_delete>
    err = netconn_accept(conn, &newconn);
 8001baa:	e7be      	b.n	8001b2a <tcpecho_thread+0x3a>
    }
  }
}
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	08046500 	.word	0x08046500
 8001bb8:	0801f624 	.word	0x0801f624
 8001bbc:	0801f648 	.word	0x0801f648
 8001bc0:	0801f660 	.word	0x0801f660

08001bc4 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/
void
tcpecho_init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, (configMINIMAL_STACK_SIZE*2), TCPECHO_THREAD_PRIO);
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <tcpecho_init+0x20>)
 8001bd6:	4804      	ldr	r0, [pc, #16]	; (8001be8 <tcpecho_init+0x24>)
 8001bd8:	f012 ff0a 	bl	80149f0 <sys_thread_new>
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	08001af1 	.word	0x08001af1
 8001be8:	0801f688 	.word	0x0801f688

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x38>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_MspInit+0x38>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_MspInit+0x38>)
 8001c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	210f      	movs	r1, #15
 8001c14:	f06f 0001 	mvn.w	r0, #1
 8001c18:	f000 fc94 	bl	8002544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58024400 	.word	0x58024400

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b8      	sub	sp, #224	; 0xe0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	22bc      	movs	r2, #188	; 0xbc
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f019 fff1 	bl	801bc30 <memset>
  if(huart->Instance==USART3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <HAL_UART_MspInit+0xc0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d142      	bne.n	8001cde <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fe2a 	bl	80058c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c72:	f7ff ff37 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_UART_MspInit+0xc4>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001cda:	f002 fbc3 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	37e0      	adds	r7, #224	; 0xe0
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40004800 	.word	0x40004800
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58020c00 	.word	0x58020c00

08001cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b090      	sub	sp, #64	; 0x40
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d827      	bhi.n	8001d52 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001d02:	2200      	movs	r2, #0
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	2036      	movs	r0, #54	; 0x36
 8001d08:	f000 fc1c 	bl	8002544 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d0c:	2036      	movs	r0, #54	; 0x36
 8001d0e:	f000 fc33 	bl	8002578 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001d12:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_InitTick+0xc4>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_InitTick+0xc8>)
 8001d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1e:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_InitTick+0xc8>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_InitTick+0xc8>)
 8001d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d36:	f107 0210 	add.w	r2, r7, #16
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fd7b 	bl	800583c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <HAL_InitTick+0x6a>
 8001d50:	e001      	b.n	8001d56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e02b      	b.n	8001dae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d56:	f003 fd45 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8001d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d5c:	e004      	b.n	8001d68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d5e:	f003 fd41 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8001d62:	4603      	mov	r3, r0
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_InitTick+0xcc>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	3b01      	subs	r3, #1
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d78:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <HAL_InitTick+0xd4>)
 8001d7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001d98:	f005 f8fa 	bl	8006f90 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d104      	bne.n	8001dac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001da2:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <HAL_InitTick+0xd0>)
 8001da4:	f005 f956 	bl	8007054 <HAL_TIM_Base_Start_IT>
 8001da8:	4603      	mov	r3, r0
 8001daa:	e000      	b.n	8001dae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3740      	adds	r7, #64	; 0x40
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	24000008 	.word	0x24000008
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	2400071c 	.word	0x2400071c
 8001dc8:	40001000 	.word	0x40001000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM6_DAC_IRQHandler+0x10>)
 8001dfe:	f005 f999 	bl	8007134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2400071c 	.word	0x2400071c

08001e0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <ETH_IRQHandler+0x10>)
 8001e12:	f001 f931 	bl	8003078 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	240007b8 	.word	0x240007b8

08001e20 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <ETH_WKUP_IRQHandler+0x10>)
 8001e26:	f001 f927 	bl	8003078 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	240007b8 	.word	0x240007b8

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <_kill+0x20>)
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
	return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	2400794c 	.word	0x2400794c

08001e68 <_exit>:

void _exit (int status)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffe5 	bl	8001e44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e7a:	e7fe      	b.n	8001e7a <_exit+0x12>

08001e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e00a      	b.n	8001ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8e:	f3af 8000 	nop.w
 8001e92:	4601      	mov	r1, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbf0      	blt.n	8001e8e <_read+0x12>
	}

return len;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e009      	b.n	8001edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf1      	blt.n	8001ec8 <_write+0x12>
	}
	return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d205      	bcs.n	8001f94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <_sbrk+0x6c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	24080000 	.word	0x24080000
 8001fb8:	00000800 	.word	0x00000800
 8001fbc:	24000768 	.word	0x24000768
 8001fc0:	240079d0 	.word	0x240079d0
 8001fc4:	2400794c 	.word	0x2400794c

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fcc:	f7fe fb72 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fd2:	e003      	b.n	8001fdc <LoopCopyDataInit>

08001fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fda:	3104      	adds	r1, #4

08001fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fdc:	480a      	ldr	r0, [pc, #40]	; (8002008 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fe4:	d3f6      	bcc.n	8001fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001fe8:	e002      	b.n	8001ff0 <LoopFillZerobss>

08001fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fec:	f842 3b04 	str.w	r3, [r2], #4

08001ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ff4:	d3f9      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f019 fdbf 	bl	801bb78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7ff fa95 	bl	8001528 <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002000:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002004:	08046a94 	.word	0x08046a94
  ldr  r0, =_sdata
 8002008:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800200c:	24000208 	.word	0x24000208
  ldr  r2, =_sbss
 8002010:	24000208 	.word	0x24000208
  ldr  r3, = _ebss
 8002014:	240079d0 	.word	0x240079d0

08002018 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC3_IRQHandler>

0800201a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <LAN8742_RegisterBusIO+0x28>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <LAN8742_RegisterBusIO+0x28>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <LAN8742_RegisterBusIO+0x28>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e014      	b.n	8002072 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d17c      	bne.n	8002198 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e01c      	b.n	80020f2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f107 0208 	add.w	r2, r7, #8
 80020c0:	2112      	movs	r1, #18
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	4798      	blx	r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da03      	bge.n	80020d4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80020cc:	f06f 0304 	mvn.w	r3, #4
 80020d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80020d2:	e00b      	b.n	80020ec <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d105      	bne.n	80020ec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
         break;
 80020ea:	e005      	b.n	80020f8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	d9df      	bls.n	80020b8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b1f      	cmp	r3, #31
 80020fe:	d902      	bls.n	8002106 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002100:	f06f 0302 	mvn.w	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d145      	bne.n	8002198 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6810      	ldr	r0, [r2, #0]
 8002114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002118:	2100      	movs	r1, #0
 800211a:	4798      	blx	r3
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	db37      	blt.n	8002192 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6810      	ldr	r0, [r2, #0]
 800212a:	f107 0208 	add.w	r2, r7, #8
 800212e:	2100      	movs	r1, #0
 8002130:	4798      	blx	r3
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	db28      	blt.n	800218a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4798      	blx	r3
 800213e:	4603      	mov	r3, r0
 8002140:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002142:	e01c      	b.n	800217e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4798      	blx	r3
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002156:	d80e      	bhi.n	8002176 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6810      	ldr	r0, [r2, #0]
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2100      	movs	r1, #0
 8002166:	4798      	blx	r3
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	da07      	bge.n	800217e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800216e:	f06f 0304 	mvn.w	r3, #4
 8002172:	613b      	str	r3, [r7, #16]
                 break;
 8002174:	e010      	b.n	8002198 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002176:	f06f 0301 	mvn.w	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
               break;
 800217c:	e00c      	b.n	8002198 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1dd      	bne.n	8002144 <LAN8742_Init+0xc6>
 8002188:	e006      	b.n	8002198 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800218a:	f06f 0304 	mvn.w	r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e002      	b.n	8002198 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002192:	f06f 0303 	mvn.w	r3, #3
 8002196:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d112      	bne.n	80021c4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	4798      	blx	r3
 80021a4:	4603      	mov	r3, r0
 80021a6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80021a8:	bf00      	nop
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4798      	blx	r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80021bc:	d9f5      	bls.n	80021aa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80021c4:	693b      	ldr	r3, [r7, #16]
 }
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6810      	ldr	r0, [r2, #0]
 80021e2:	f107 020c 	add.w	r2, r7, #12
 80021e6:	2101      	movs	r1, #1
 80021e8:	4798      	blx	r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da02      	bge.n	80021f6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021f0:	f06f 0304 	mvn.w	r3, #4
 80021f4:	e06e      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6810      	ldr	r0, [r2, #0]
 80021fe:	f107 020c 	add.w	r2, r7, #12
 8002202:	2101      	movs	r1, #1
 8002204:	4798      	blx	r3
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	da02      	bge.n	8002212 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800220c:	f06f 0304 	mvn.w	r3, #4
 8002210:	e060      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800221c:	2301      	movs	r3, #1
 800221e:	e059      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6810      	ldr	r0, [r2, #0]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	2100      	movs	r1, #0
 800222e:	4798      	blx	r3
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	da02      	bge.n	800223c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002236:	f06f 0304 	mvn.w	r3, #4
 800223a:	e04b      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11b      	bne.n	800227e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <LAN8742_GetLinkState+0x90>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800225a:	2302      	movs	r3, #2
 800225c:	e03a      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002268:	2303      	movs	r3, #3
 800226a:	e033      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002276:	2304      	movs	r3, #4
 8002278:	e02c      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800227a:	2305      	movs	r3, #5
 800227c:	e02a      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6810      	ldr	r0, [r2, #0]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	211f      	movs	r1, #31
 800228c:	4798      	blx	r3
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	da02      	bge.n	800229a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002294:	f06f 0304 	mvn.w	r3, #4
 8002298:	e01c      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022a4:	2306      	movs	r3, #6
 80022a6:	e015      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 031c 	and.w	r3, r3, #28
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d101      	bne.n	80022b6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e00e      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d101      	bne.n	80022c4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e007      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 031c 	and.w	r3, r3, #28
 80022ca:	2b14      	cmp	r3, #20
 80022cc:	d101      	bne.n	80022d2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022ce:	2304      	movs	r3, #4
 80022d0:	e000      	b.n	80022d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022d2:	2305      	movs	r3, #5
    }				
  }
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 f923 	bl	800252e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e8:	f003 f8d2 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_Init+0x68>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	4913      	ldr	r1, [pc, #76]	; (8002348 <HAL_Init+0x6c>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_Init+0x68>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_Init+0x6c>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <HAL_Init+0x70>)
 800231e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_Init+0x74>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff fce4 	bl	8001cf4 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e002      	b.n	800233c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002336:	f7ff fc59 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	58024400 	.word	0x58024400
 8002348:	08023200 	.word	0x08023200
 800234c:	24000004 	.word	0x24000004
 8002350:	24000000 	.word	0x24000000

08002354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2400000c 	.word	0x2400000c
 8002378:	2400076c 	.word	0x2400076c

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2400076c 	.word	0x2400076c

08002394 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetREVID+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0c1b      	lsrs	r3, r3, #16
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	5c001000 	.word	0x5c001000

080023ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80023bc:	4904      	ldr	r1, [pc, #16]	; (80023d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	58000400 	.word	0x58000400

080023d4 <__NVIC_SetPriorityGrouping>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	; (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	05fa0000 	.word	0x05fa0000

0800241c <__NVIC_GetPriorityGrouping>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff4c 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002552:	f7ff ff63 	bl	800241c <__NVIC_GetPriorityGrouping>
 8002556:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	6978      	ldr	r0, [r7, #20]
 800255e:	f7ff ffb3 	bl	80024c8 <NVIC_EncodePriority>
 8002562:	4602      	mov	r2, r0
 8002564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff82 	bl	8002474 <__NVIC_SetPriority>
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff56 	bl	8002438 <__NVIC_EnableIRQ>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002598:	f3bf 8f5f 	dmb	sy
}
 800259c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_MPU_Disable+0x28>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_MPU_Disable+0x28>)
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_MPU_Disable+0x2c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	e000ed90 	.word	0xe000ed90

080025c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_MPU_Enable+0x38>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_MPU_Enable+0x3c>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_MPU_Enable+0x3c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025e2:	f3bf 8f4f 	dsb	sy
}
 80025e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025e8:	f3bf 8f6f 	isb	sy
}
 80025ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed90 	.word	0xe000ed90
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	785a      	ldrb	r2, [r3, #1]
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_MPU_ConfigRegion+0x84>)
 8002612:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d029      	beq.n	8002670 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_MPU_ConfigRegion+0x84>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7b1b      	ldrb	r3, [r3, #12]
 8002628:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7adb      	ldrb	r3, [r3, #11]
 800262e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002630:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7a9b      	ldrb	r3, [r3, #10]
 8002636:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002638:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7b5b      	ldrb	r3, [r3, #13]
 800263e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002640:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7b9b      	ldrb	r3, [r3, #14]
 8002646:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002648:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7bdb      	ldrb	r3, [r3, #15]
 800264e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002650:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7a5b      	ldrb	r3, [r3, #9]
 8002656:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002658:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7a1b      	ldrb	r3, [r3, #8]
 800265e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002660:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800266a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800266c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800266e:	e005      	b.n	800267c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_MPU_ConfigRegion+0x84>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_MPU_ConfigRegion+0x84>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed90 	.word	0xe000ed90

0800268c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <HAL_GetCurrentCPUID+0x24>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	2b07      	cmp	r3, #7
 800269c:	d101      	bne.n	80026a2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800269e:	2303      	movs	r3, #3
 80026a0:	e000      	b.n	80026a4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80026a2:	2301      	movs	r3, #1
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0c8      	b.n	8002858 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f006 f852 	bl	8008778 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2223      	movs	r2, #35	; 0x23
 80026d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_ETH_Init+0x1ac>)
 80026dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e0:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_ETH_Init+0x1ac>)
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_ETH_Init+0x1ac>)
 80026ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7a1b      	ldrb	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff fe53 	bl	80023ac <HAL_SYSCFG_ETHInterfaceSelect>
 8002706:	e003      	b.n	8002710 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002708:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800270c:	f7ff fe4e 	bl	80023ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002726:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002728:	f7ff fe28 	bl	800237c <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800272e:	e00f      	b.n	8002750 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002730:	f7ff fe24 	bl	800237c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800273e:	d907      	bls.n	8002750 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2204      	movs	r2, #4
 8002744:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	22e0      	movs	r2, #224	; 0xe0
 800274a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e083      	b.n	8002858 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e6      	bne.n	8002730 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f001 fb00 	bl	8003d68 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002768:	f003 f80c 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 800276c:	4603      	mov	r3, r0
 800276e:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <HAL_ETH_Init+0x1b0>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	0c9a      	lsrs	r2, r3, #18
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3a01      	subs	r2, #1
 800277c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 fa53 	bl	8003c2c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002792:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800279e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	22e0      	movs	r2, #224	; 0xe0
 80027bc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04a      	b.n	8002858 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_ETH_Init+0x1b4>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6952      	ldr	r2, [r2, #20]
 80027d6:	0051      	lsls	r1, r2, #1
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 fb16 	bl	8003e18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f001 fb5c 	bl	8003eaa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	3305      	adds	r3, #5
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	3303      	adds	r3, #3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	061a      	lsls	r2, r3, #24
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	3302      	adds	r3, #2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	3301      	adds	r3, #1
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002830:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800283e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002840:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2210      	movs	r2, #16
 800284e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2210      	movs	r2, #16
 8002854:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	58024400 	.word	0x58024400
 8002864:	431bde83 	.word	0x431bde83
 8002868:	ffff8001 	.word	0xffff8001

0800286c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3310      	adds	r3, #16
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_ETH_DescAssignMemory+0x28>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d904      	bls.n	800289e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e021      	b.n	80028e2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d176      	bne.n	80029ec <HAL_ETH_Start_IT+0xfe>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2223      	movs	r2, #35	; 0x23
 8002902:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e00f      	b.n	800292a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3310      	adds	r3, #16
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d9ec      	bls.n	800290a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0202 	orr.w	r2, r2, #2
 8002944:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002972:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002982:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800299e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80029b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ba:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c6:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f24d 0341 	movw	r3, #53313	; 0xd041
 80029d2:	430b      	orrs	r3, r1
 80029d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2210      	movs	r2, #16
 80029e0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2222      	movs	r2, #34	; 0x22
 80029e6:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_ETH_Start_IT+0x100>
  }
  else
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d067      	beq.n	8002adc <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2223      	movs	r2, #35	; 0x23
 8002a10:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_ETH_Stop_IT+0xf0>)
 8002a24:	400b      	ands	r3, r1
 8002a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a36:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a46:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a62:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0202 	bic.w	r2, r2, #2
 8002a98:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e00f      	b.n	8002ac0 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d9ec      	bls.n	8002aa0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2210      	movs	r2, #16
 8002ad0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	ffff2fbe 	.word	0xffff2fbe

08002af0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e076      	b.n	8002c00 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d171      	bne.n	8002bfe <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f001 fa22 	bl	8003f68 <ETH_Prepare_Tx_Descriptors>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e062      	b.n	8002c00 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3206      	adds	r2, #6
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d904      	bls.n	8002b64 <HAL_ETH_Transmit+0x74>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	1f1a      	subs	r2, r3, #4
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3106      	adds	r1, #6
 8002b70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b78:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8002b7c:	f7ff fbfe 	bl	800237c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002b82:	e036      	b.n	8002bf2 <HAL_ETH_Transmit+0x102>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <HAL_ETH_Transmit+0xce>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f043 0208 	orr.w	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bac:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	22e0      	movs	r2, #224	; 0xe0
 8002bb8:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e020      	b.n	8002c00 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d015      	beq.n	8002bf2 <HAL_ETH_Transmit+0x102>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff fbd9 	bl	800237c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <HAL_ETH_Transmit+0xec>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_ETH_Transmit+0x102>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	22e0      	movs	r2, #224	; 0xe0
 8002bec:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e006      	b.n	8002c00 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	dbc4      	blt.n	8002b84 <HAL_ETH_Transmit+0x94>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3344      	adds	r3, #68	; 0x44
 8002c14:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d06b      	beq.n	8002d12 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e0ce      	b.n	8002ddc <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d036      	beq.n	8002cbe <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d902      	bls.n	8002c72 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db11      	blt.n	8002ca8 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2201      	movs	r2, #1
 8002c94:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d902      	bls.n	8002ca8 <HAL_ETH_IsRxDataAvailable+0xa0>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b04      	subs	r3, #4
 8002ca6:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e08e      	b.n	8002ddc <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d902      	bls.n	8002ce4 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b04      	subs	r3, #4
 8002ce2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e010      	b.n	8002d12 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d902      	bls.n	8002d08 <HAL_ETH_IsRxDataAvailable+0x100>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b04      	subs	r3, #4
 8002d06:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d10:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db02      	blt.n	8002d20 <HAL_ETH_IsRxDataAvailable+0x118>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d98e      	bls.n	8002c3e <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d056      	beq.n	8002dd4 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e03b      	b.n	8002dbe <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d54:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d20d      	bcs.n	8002db8 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d902      	bls.n	8002dae <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3b04      	subs	r3, #4
 8002dac:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3bf      	bcc.n	8002d46 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]

  return 0;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3724      	adds	r7, #36	; 0x24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3344      	adds	r3, #68	; 0x44
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e07d      	b.n	8002f1c <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff feed 	bl	8002c08 <HAL_ETH_IsRxDataAvailable>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e071      	b.n	8002f1c <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e46:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	e031      	b.n	8002eb2 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	461a      	mov	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	461a      	mov	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e88:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d902      	bls.n	8002e9c <HAL_ETH_GetRxDataBuffer+0xb4>
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea4:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d3c7      	bcc.n	8002e4e <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d803      	bhi.n	8002ee8 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	e018      	b.n	8002f1a <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	461a      	mov	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	1ad2      	subs	r2, r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	e001      	b.n	8002f1a <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3344      	adds	r3, #68	; 0x44
 8002f32:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fe60 	bl	8002c08 <HAL_ETH_IsRxDataAvailable>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e017      	b.n	8002f82 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d902      	bls.n	8002f6a <HAL_ETH_GetRxDataLength+0x46>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3b04      	subs	r3, #4
 8002f68:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b089      	sub	sp, #36	; 0x24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3344      	adds	r3, #68	; 0x44
 8002f96:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e057      	b.n	800306a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	e03b      	b.n	8003046 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fdc:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3b01      	subs	r3, #1
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d20d      	bcs.n	8003040 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3301      	adds	r3, #1
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d902      	bls.n	8003036 <HAL_ETH_BuildRxDescriptors+0xac>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3b04      	subs	r3, #4
 8003034:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303e:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3301      	adds	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3bf      	bcc.n	8002fce <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003058:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	; 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003088:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d115      	bne.n	80030c0 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d10b      	bne.n	80030c0 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f005 fc53 	bl	8008954 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b6:	461a      	mov	r2, r3
 80030b8:	f248 0340 	movw	r3, #32832	; 0x8040
 80030bc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d115      	bne.n	8003100 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10b      	bne.n	8003100 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8d3 	bl	8003294 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f6:	461a      	mov	r2, r3
 80030f8:	f248 0301 	movw	r3, #32769	; 0x8001
 80030fc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003108:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800310c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003114:	d14e      	bne.n	80031b4 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312a:	d143      	bne.n	80031b4 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f043 0208 	orr.w	r2, r3, #8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003140:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d11c      	bne.n	8003188 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003156:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800315a:	f241 1302 	movw	r3, #4354	; 0x1102
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003178:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800317c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	22e0      	movs	r2, #224	; 0xe0
 8003184:	66da      	str	r2, [r3, #108]	; 0x6c
 8003186:	e012      	b.n	80031ae <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003194:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80031aa:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f87a 	bl	80032a8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031bc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80031c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031c4:	d10e      	bne.n	80031e4 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	22e0      	movs	r2, #224	; 0xe0
 80031d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f86f 	bl	80032bc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d10f      	bne.n	8003214 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031fc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f862 	bl	80032d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d10f      	bne.n	8003244 <HAL_ETH_IRQHandler+0x1cc>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f854 	bl	80032e4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8003244:	f7ff fa22 	bl	800268c <HAL_GetCurrentCPUID>
 8003248:	4603      	mov	r3, r0
 800324a:	2b03      	cmp	r3, #3
 800324c:	d10d      	bne.n	800326a <HAL_ETH_IRQHandler+0x1f2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_ETH_IRQHandler+0x214>)
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d014      	beq.n	8003284 <HAL_ETH_IRQHandler+0x20c>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_ETH_IRQHandler+0x214>)
 800325c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f848 	bl	80032f8 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8003268:	e00c      	b.n	8003284 <HAL_ETH_IRQHandler+0x20c>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_ETH_IRQHandler+0x218>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_ETH_IRQHandler+0x20c>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_ETH_IRQHandler+0x218>)
 8003278:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f83a 	bl	80032f8 <HAL_ETH_WakeUpCallback>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	58000080 	.word	0x58000080
 8003290:	580000c0 	.word	0x580000c0

08003294 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03e      	b.n	80033ac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003336:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	055b      	lsls	r3, r3, #21
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f043 030c 	orr.w	r3, r3, #12
 800335a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800336e:	f7ff f805 	bl	800237c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003374:	e009      	b.n	800338a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003376:	f7ff f801 	bl	800237c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003384:	d901      	bls.n	800338a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e010      	b.n	80033ac <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ed      	bne.n	8003376 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e03c      	b.n	8003450 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033de:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	055b      	lsls	r3, r3, #21
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 030c 	bic.w	r3, r3, #12
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_ETH_WritePHYRegister+0xa4>)
 8003416:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_ETH_WritePHYRegister+0xa4>)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003422:	f7fe ffab 	bl	800237c <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003428:	e009      	b.n	800343e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800342a:	f7fe ffa7 	bl	800237c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003438:	d901      	bls.n	800343e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e008      	b.n	8003450 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ed      	bne.n	800342a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40028000 	.word	0x40028000

0800345c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e1c3      	b.n	80037f8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	0e5b      	lsrs	r3, r3, #25
 80036ba:	f003 021f 	and.w	r2, r3, #31
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b29a      	uxth	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003784:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003794:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e00a      	b.n	800382e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	2b10      	cmp	r3, #16
 800381e:	d105      	bne.n	800382c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f860 	bl	80038e8 <ETH_SetMACConfig>

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003848:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003850:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003852:	f001 ff97 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8003856:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d908      	bls.n	8003872 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d804      	bhi.n	8003872 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e027      	b.n	80038c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d908      	bls.n	800388c <HAL_ETH_SetMDIOClockRange+0x54>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d204      	bcs.n	800388c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e01a      	b.n	80038c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d303      	bcc.n	800389c <HAL_ETH_SetMDIOClockRange+0x64>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d911      	bls.n	80038c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d908      	bls.n	80038b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d804      	bhi.n	80038b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e005      	b.n	80038c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e000      	b.n	80038c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80038c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	01312cff 	.word	0x01312cff
 80038d8:	02160ebf 	.word	0x02160ebf
 80038dc:	03938700 	.word	0x03938700
 80038e0:	05f5e0ff 	.word	0x05f5e0ff
 80038e4:	08f0d17f 	.word	0x08f0d17f

080038e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80038fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003902:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	7b1b      	ldrb	r3, [r3, #12]
 8003908:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800390a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	7b5b      	ldrb	r3, [r3, #13]
 8003910:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003912:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	7b9b      	ldrb	r3, [r3, #14]
 8003918:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800391a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	7bdb      	ldrb	r3, [r3, #15]
 8003920:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003922:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	7c12      	ldrb	r2, [r2, #16]
 8003928:	2a00      	cmp	r2, #0
 800392a:	d102      	bne.n	8003932 <ETH_SetMACConfig+0x4a>
 800392c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003930:	e000      	b.n	8003934 <ETH_SetMACConfig+0x4c>
 8003932:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003934:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	7c52      	ldrb	r2, [r2, #17]
 800393a:	2a00      	cmp	r2, #0
 800393c:	d102      	bne.n	8003944 <ETH_SetMACConfig+0x5c>
 800393e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003942:	e000      	b.n	8003946 <ETH_SetMACConfig+0x5e>
 8003944:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003946:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	7c9b      	ldrb	r3, [r3, #18]
 800394c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800394e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003954:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800395a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	7f1b      	ldrb	r3, [r3, #28]
 8003960:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003962:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	7f5b      	ldrb	r3, [r3, #29]
 8003968:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800396a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	7f92      	ldrb	r2, [r2, #30]
 8003970:	2a00      	cmp	r2, #0
 8003972:	d102      	bne.n	800397a <ETH_SetMACConfig+0x92>
 8003974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003978:	e000      	b.n	800397c <ETH_SetMACConfig+0x94>
 800397a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800397c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	7fdb      	ldrb	r3, [r3, #31]
 8003982:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003984:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	f892 2020 	ldrb.w	r2, [r2, #32]
 800398c:	2a00      	cmp	r2, #0
 800398e:	d102      	bne.n	8003996 <ETH_SetMACConfig+0xae>
 8003990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003994:	e000      	b.n	8003998 <ETH_SetMACConfig+0xb0>
 8003996:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003998:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800399e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80039a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <ETH_SetMACConfig+0x22c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80039d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80039de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80039e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80039f0:	2a00      	cmp	r2, #0
 80039f2:	d102      	bne.n	80039fa <ETH_SetMACConfig+0x112>
 80039f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039f8:	e000      	b.n	80039fc <ETH_SetMACConfig+0x114>
 80039fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80039fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <ETH_SetMACConfig+0x230>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a20:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <ETH_SetMACConfig+0x234>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a44:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a4a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d101      	bne.n	8003a5a <ETH_SetMACConfig+0x172>
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	e000      	b.n	8003a5c <ETH_SetMACConfig+0x174>
 8003a5a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003a5c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a6e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003a84:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003a8c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f023 0103 	bic.w	r1, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003ab2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d101      	bne.n	8003ad6 <ETH_SetMACConfig+0x1ee>
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	e000      	b.n	8003ad8 <ETH_SetMACConfig+0x1f0>
 8003ad6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003ad8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003ae0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ae2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003aea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003af8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	00048083 	.word	0x00048083
 8003b18:	c0f88000 	.word	0xc0f88000
 8003b1c:	fffffef0 	.word	0xfffffef0

08003b20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <ETH_SetDMAConfig+0xf8>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	6811      	ldr	r1, [r2, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b46:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b52:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	7b1b      	ldrb	r3, [r3, #12]
 8003b58:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <ETH_SetDMAConfig+0xfc>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	68f9      	ldr	r1, [r7, #12]
 8003b72:	430b      	orrs	r3, r1
 8003b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b78:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7b5b      	ldrb	r3, [r3, #13]
 8003b7e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b90:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <ETH_SetDMAConfig+0x100>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	7d1b      	ldrb	r3, [r3, #20]
 8003bb0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003bb2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	7f5b      	ldrb	r3, [r3, #29]
 8003bb8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <ETH_SetDMAConfig+0x104>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bda:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	7f1b      	ldrb	r3, [r3, #28]
 8003be2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <ETH_SetDMAConfig+0x108>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c08:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	ffff87fd 	.word	0xffff87fd
 8003c1c:	ffff2ffe 	.word	0xffff2ffe
 8003c20:	fffec000 	.word	0xfffec000
 8003c24:	ffc0efef 	.word	0xffc0efef
 8003c28:	7fc0ffff 	.word	0x7fc0ffff

08003c2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0a4      	sub	sp, #144	; 0x90
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003c84:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003c90:	2300      	movs	r3, #0
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003cd6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003d06:	2300      	movs	r3, #0
 8003d08:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fde6 	bl	80038e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003d4c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fee1 	bl	8003b20 <ETH_SetDMAConfig>
}
 8003d5e:	bf00      	nop
 8003d60:	3790      	adds	r7, #144	; 0x90
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003d82:	f001 fcff 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8003d86:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d908      	bls.n	8003da2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d804      	bhi.n	8003da2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e027      	b.n	8003df2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d908      	bls.n	8003dbc <ETH_MAC_MDIO_ClkConfig+0x54>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d204      	bcs.n	8003dbc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e01a      	b.n	8003df2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d303      	bcc.n	8003dcc <ETH_MAC_MDIO_ClkConfig+0x64>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d911      	bls.n	8003df0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d908      	bls.n	8003de6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d804      	bhi.n	8003de6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e005      	b.n	8003df2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e000      	b.n	8003df2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003df0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	01312cff 	.word	0x01312cff
 8003e08:	02160ebf 	.word	0x02160ebf
 8003e0c:	03938700 	.word	0x03938700
 8003e10:	05f5e0ff 	.word	0x05f5e0ff
 8003e14:	08f0d17f 	.word	0x08f0d17f

08003e18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e01d      	b.n	8003e62 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68d9      	ldr	r1, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	3206      	adds	r2, #6
 8003e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d9de      	bls.n	8003e26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e76:	461a      	mov	r2, r3
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e024      	b.n	8003f02 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6919      	ldr	r1, [r3, #16]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d9d7      	bls.n	8003eb8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2303      	movs	r3, #3
 8003f32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f56:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b08d      	sub	sp, #52	; 0x34
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3318      	adds	r3, #24
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003f86:	2300      	movs	r3, #0
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f92:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003faa:	d007      	beq.n	8003fbc <ETH_Prepare_Tx_Descriptors+0x54>
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e24a      	b.n	8004456 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d044      	beq.n	8004056 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	4b72      	ldr	r3, [pc, #456]	; (800419c <ETH_Prepare_Tx_Descriptors+0x234>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d027      	beq.n	8004056 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	b29a      	uxth	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	431a      	orrs	r2, r3
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004044:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004054:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00e      	beq.n	8004080 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	6992      	ldr	r2, [r2, #24]
 800406e:	431a      	orrs	r2, r3
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <ETH_Prepare_Tx_Descriptors+0x130>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d030      	beq.n	80040fa <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	3301      	adds	r3, #1
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d902      	bls.n	80040c2 <ETH_Prepare_Tx_Descriptors+0x15a>
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	3b04      	subs	r3, #4
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ca:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	3301      	adds	r3, #1
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040de:	d10c      	bne.n	80040fa <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	e1ad      	b.n	8004456 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	3301      	adds	r3, #1
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004110:	4013      	ands	r3, r2
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	6852      	ldr	r2, [r2, #4]
 8004116:	431a      	orrs	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800413a:	4013      	ands	r3, r2
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	6852      	ldr	r2, [r2, #4]
 8004140:	0412      	lsls	r2, r2, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	e008      	b.n	800415c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004156:	4013      	ands	r3, r2
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d021      	beq.n	80041ac <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	04db      	lsls	r3, r3, #19
 8004176:	431a      	orrs	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004182:	4013      	ands	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	69d2      	ldr	r2, [r2, #28]
 8004188:	431a      	orrs	r2, r3
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e02e      	b.n	80041fa <ETH_Prepare_Tx_Descriptors+0x292>
 800419c:	ffff0000 	.word	0xffff0000
 80041a0:	ffffc000 	.word	0xffffc000
 80041a4:	c000ffff 	.word	0xc000ffff
 80041a8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	4b93      	ldr	r3, [pc, #588]	; (8004400 <ETH_Prepare_Tx_Descriptors+0x498>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6852      	ldr	r2, [r2, #4]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	431a      	orrs	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80cb 	beq.w	80043e0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	431a      	orrs	r2, r3
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800425c:	e0c0      	b.n	80043e0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	3301      	adds	r3, #1
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b03      	cmp	r3, #3
 8004274:	d902      	bls.n	800427c <ETH_Prepare_Tx_Descriptors+0x314>
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	3b04      	subs	r3, #4
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800429a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429e:	d007      	beq.n	80042b0 <ETH_Prepare_Tx_Descriptors+0x348>
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	3304      	adds	r3, #4
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d026      	beq.n	80042fe <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042bc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e016      	b.n	80042f2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	3301      	adds	r3, #1
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d902      	bls.n	80042e2 <ETH_Prepare_Tx_Descriptors+0x37a>
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	3b04      	subs	r3, #4
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ea:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	3301      	adds	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3e4      	bcc.n	80042c4 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0ab      	b.n	8004456 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	3301      	adds	r3, #1
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800431a:	4013      	ands	r3, r2
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	6852      	ldr	r2, [r2, #4]
 8004320:	431a      	orrs	r2, r3
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004344:	4013      	ands	r3, r2
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	6852      	ldr	r2, [r2, #4]
 800434a:	0412      	lsls	r2, r2, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	e008      	b.n	8004366 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004360:	4013      	ands	r3, r2
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00f      	beq.n	8004392 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004378:	4013      	ands	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	69d2      	ldr	r2, [r2, #28]
 800437e:	431a      	orrs	r2, r3
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e017      	b.n	80043c2 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004398:	4013      	ands	r3, r2
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	6852      	ldr	r2, [r2, #4]
 800439e:	431a      	orrs	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	431a      	orrs	r2, r3
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f47f af3a 	bne.w	800425e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	e00e      	b.n	800441c <ETH_Prepare_Tx_Descriptors+0x4b4>
 80043fe:	bf00      	nop
 8004400:	ffff8000 	.word	0xffff8000
 8004404:	ffffc000 	.word	0xffffc000
 8004408:	c000ffff 	.word	0xc000ffff
 800440c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	3304      	adds	r3, #4
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800443e:	b672      	cpsid	i
}
 8004440:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4413      	add	r3, r2
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004450:	b662      	cpsie	i
}
 8004452:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3734      	adds	r7, #52	; 0x34
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004472:	4b89      	ldr	r3, [pc, #548]	; (8004698 <HAL_GPIO_Init+0x234>)
 8004474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004476:	e194      	b.n	80047a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8186 	beq.w	800479c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00b      	beq.n	80044b0 <HAL_GPIO_Init+0x4c>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d007      	beq.n	80044b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a4:	2b11      	cmp	r3, #17
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b12      	cmp	r3, #18
 80044ae:	d130      	bne.n	8004512 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e6:	2201      	movs	r2, #1
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0201 	and.w	r2, r3, #1
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0xee>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b12      	cmp	r3, #18
 8004550:	d123      	bne.n	800459a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80e0 	beq.w	800479c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_GPIO_Init+0x238>)
 80045de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045e2:	4a2e      	ldr	r2, [pc, #184]	; (800469c <HAL_GPIO_Init+0x238>)
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_GPIO_Init+0x238>)
 80045ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045fa:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <HAL_GPIO_Init+0x23c>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	220f      	movs	r2, #15
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_GPIO_Init+0x240>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d052      	beq.n	80046cc <HAL_GPIO_Init+0x268>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_GPIO_Init+0x244>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_GPIO_Init+0x22e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <HAL_GPIO_Init+0x248>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02b      	beq.n	800468e <HAL_GPIO_Init+0x22a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_GPIO_Init+0x24c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d025      	beq.n	800468a <HAL_GPIO_Init+0x226>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_GPIO_Init+0x250>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <HAL_GPIO_Init+0x222>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_GPIO_Init+0x254>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d019      	beq.n	8004682 <HAL_GPIO_Init+0x21e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_GPIO_Init+0x258>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_GPIO_Init+0x21a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <HAL_GPIO_Init+0x25c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00d      	beq.n	800467a <HAL_GPIO_Init+0x216>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_GPIO_Init+0x260>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <HAL_GPIO_Init+0x212>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <HAL_GPIO_Init+0x264>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_GPIO_Init+0x20e>
 800466e:	2309      	movs	r3, #9
 8004670:	e02d      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004672:	230a      	movs	r3, #10
 8004674:	e02b      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004676:	2308      	movs	r3, #8
 8004678:	e029      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800467a:	2307      	movs	r3, #7
 800467c:	e027      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800467e:	2306      	movs	r3, #6
 8004680:	e025      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004682:	2305      	movs	r3, #5
 8004684:	e023      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004686:	2304      	movs	r3, #4
 8004688:	e021      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800468a:	2303      	movs	r3, #3
 800468c:	e01f      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800468e:	2302      	movs	r3, #2
 8004690:	e01d      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004692:	2301      	movs	r3, #1
 8004694:	e01b      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004696:	bf00      	nop
 8004698:	58000080 	.word	0x58000080
 800469c:	58024400 	.word	0x58024400
 80046a0:	58000400 	.word	0x58000400
 80046a4:	58020000 	.word	0x58020000
 80046a8:	58020400 	.word	0x58020400
 80046ac:	58020800 	.word	0x58020800
 80046b0:	58020c00 	.word	0x58020c00
 80046b4:	58021000 	.word	0x58021000
 80046b8:	58021400 	.word	0x58021400
 80046bc:	58021800 	.word	0x58021800
 80046c0:	58021c00 	.word	0x58021c00
 80046c4:	58022000 	.word	0x58022000
 80046c8:	58022400 	.word	0x58022400
 80046cc:	2300      	movs	r3, #0
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4093      	lsls	r3, r2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046de:	4938      	ldr	r1, [pc, #224]	; (80047c0 <HAL_GPIO_Init+0x35c>)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f ae63 	bne.w	8004478 <HAL_GPIO_Init+0x14>
  }
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	3724      	adds	r7, #36	; 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58000400 	.word	0x58000400

080047c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
 80047d0:	4613      	mov	r3, r2
 80047d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d4:	787b      	ldrb	r3, [r7, #1]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047e0:	e003      	b.n	80047ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	041a      	lsls	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	619a      	str	r2, [r3, #24]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <HAL_HSEM_FastTake+0x2c>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3320      	adds	r3, #32
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	4a07      	ldr	r2, [pc, #28]	; (8004828 <HAL_HSEM_FastTake+0x30>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	58026400 	.word	0x58026400
 8004828:	80000300 	.word	0x80000300

0800482c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004836:	4906      	ldr	r1, [pc, #24]	; (8004850 <HAL_HSEM_Release+0x24>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	58026400 	.word	0x58026400

08004854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800485c:	4b29      	ldr	r3, [pc, #164]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	2b06      	cmp	r3, #6
 8004866:	d00a      	beq.n	800487e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004868:	4b26      	ldr	r3, [pc, #152]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e040      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e03e      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004886:	491f      	ldr	r1, [pc, #124]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4313      	orrs	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800488e:	f7fd fd75 	bl	800237c <HAL_GetTick>
 8004892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004894:	e009      	b.n	80048aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004896:	f7fd fd71 	bl	800237c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a4:	d901      	bls.n	80048aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e028      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b6:	d1ee      	bne.n	8004896 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b1e      	cmp	r3, #30
 80048bc:	d008      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b2e      	cmp	r3, #46	; 0x2e
 80048c2:	d005      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b1d      	cmp	r3, #29
 80048c8:	d002      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b2d      	cmp	r3, #45	; 0x2d
 80048ce:	d114      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80048d0:	f7fd fd54 	bl	800237c <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048d6:	e009      	b.n	80048ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d8:	f7fd fd50 	bl	800237c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e6:	d901      	bls.n	80048ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d1ee      	bne.n	80048d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	58024800 	.word	0x58024800

08004908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	; 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e3fd      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004928:	4b99      	ldr	r3, [pc, #612]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004932:	4b97      	ldr	r3, [pc, #604]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	2b10      	cmp	r3, #16
 800493c:	d007      	beq.n	800494e <HAL_RCC_OscConfig+0x46>
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	2b18      	cmp	r3, #24
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0x5e>
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d10b      	bne.n	8004966 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494e:	4b90      	ldr	r3, [pc, #576]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d06c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x12c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d168      	bne.n	8004a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e3d7      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x76>
 8004970:	4b87      	ldr	r3, [pc, #540]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a86      	ldr	r2, [pc, #536]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x98>
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a81      	ldr	r2, [pc, #516]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7e      	ldr	r2, [pc, #504]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0xbc>
 80049aa:	4b79      	ldr	r3, [pc, #484]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a78      	ldr	r2, [pc, #480]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a75      	ldr	r2, [pc, #468]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xd4>
 80049c4:	4b72      	ldr	r3, [pc, #456]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a71      	ldr	r2, [pc, #452]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fcca 	bl	800237c <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fd fcc6 	bl	800237c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e38b      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049fe:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xe4>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fcb6 	bl	800237c <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fcb2 	bl	800237c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e377      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a26:	4b5a      	ldr	r3, [pc, #360]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x10c>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80ae 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b52      	ldr	r3, [pc, #328]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a4e:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_RCC_OscConfig+0x162>
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b18      	cmp	r3, #24
 8004a5e:	d13a      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x1ce>
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d135      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6a:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e349      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	f7fd fc87 	bl	8002394 <HAL_GetREVID>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d817      	bhi.n	8004ac0 <HAL_RCC_OscConfig+0x1b8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d108      	bne.n	8004aaa <HAL_RCC_OscConfig+0x1a2>
 8004a98:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004aa0:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa8:	e07a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	031b      	lsls	r3, r3, #12
 8004ab8:	4935      	ldr	r1, [pc, #212]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abe:	e06f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4930      	ldr	r1, [pc, #192]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	e064      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d045      	beq.n	8004b6a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ade:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0219 	bic.w	r2, r3, #25
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4929      	ldr	r1, [pc, #164]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd fc44 	bl	800237c <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fd fc40 	bl	800237c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e305      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	f7fd fc3d 	bl	8002394 <HAL_GetREVID>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d817      	bhi.n	8004b54 <HAL_RCC_OscConfig+0x24c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d108      	bne.n	8004b3e <HAL_RCC_OscConfig+0x236>
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	6053      	str	r3, [r2, #4]
 8004b3c:	e030      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4910      	ldr	r1, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
 8004b52:	e025      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	490b      	ldr	r1, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	e01a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fc01 	bl	800237c <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fd fbfd 	bl	800237c <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d903      	bls.n	8004b94 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e2c2      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
 8004b90:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b94:	4b94      	ldr	r3, [pc, #592]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a9 	beq.w	8004d00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4b8e      	ldr	r3, [pc, #568]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb8:	4b8b      	ldr	r3, [pc, #556]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x2cc>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b18      	cmp	r3, #24
 8004bc8:	d13a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x338>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d135      	bne.n	8004c40 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd4:	4b84      	ldr	r3, [pc, #528]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_OscConfig+0x2e4>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e294      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bec:	f7fd fbd2 	bl	8002394 <HAL_GetREVID>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d817      	bhi.n	8004c2a <HAL_RCC_OscConfig+0x322>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x30c>
 8004c02:	4b79      	ldr	r3, [pc, #484]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c0a:	4a77      	ldr	r2, [pc, #476]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c12:	e075      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c14:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	069b      	lsls	r3, r3, #26
 8004c22:	4971      	ldr	r1, [pc, #452]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c28:	e06a      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c2a:	4b6f      	ldr	r3, [pc, #444]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	496b      	ldr	r1, [pc, #428]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c3e:	e05f      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d042      	beq.n	8004cce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c48:	4b67      	ldr	r3, [pc, #412]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a66      	ldr	r2, [pc, #408]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fb92 	bl	800237c <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fb8e 	bl	800237c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e253      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c6e:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c7a:	f7fd fb8b 	bl	8002394 <HAL_GetREVID>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d817      	bhi.n	8004cb8 <HAL_RCC_OscConfig+0x3b0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d108      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x39a>
 8004c90:	4b55      	ldr	r3, [pc, #340]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c98:	4a53      	ldr	r2, [pc, #332]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	6053      	str	r3, [r2, #4]
 8004ca0:	e02e      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
 8004ca2:	4b51      	ldr	r3, [pc, #324]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	069b      	lsls	r3, r3, #26
 8004cb0:	494d      	ldr	r1, [pc, #308]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
 8004cb6:	e023      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	4948      	ldr	r1, [pc, #288]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
 8004ccc:	e018      	b.n	8004d00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cce:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a45      	ldr	r2, [pc, #276]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7fd fb4f 	bl	800237c <HAL_GetTick>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ce2:	f7fd fb4b 	bl	800237c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e210      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d036      	beq.n	8004d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d14:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d18:	4a33      	ldr	r2, [pc, #204]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd fb2c 	bl	800237c <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd fb28 	bl	800237c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e1ed      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x420>
 8004d46:	e018      	b.n	8004d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd fb12 	bl	800237c <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fd fb0e 	bl	800237c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e1d3      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d038      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d019      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d9a:	f7fd faef 	bl	800237c <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004da2:	f7fd faeb 	bl	800237c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1b0      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x49a>
 8004dc0:	e01a      	b.n	8004df8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <HAL_RCC_OscConfig+0x4e0>)
 8004dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dce:	f7fd fad5 	bl	800237c <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dd6:	f7fd fad1 	bl	800237c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d903      	bls.n	8004dec <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e196      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
 8004de8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dec:	4b99      	ldr	r3, [pc, #612]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ee      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8081 	beq.w	8004f08 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e06:	4b94      	ldr	r3, [pc, #592]	; (8005058 <HAL_RCC_OscConfig+0x750>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a93      	ldr	r2, [pc, #588]	; (8005058 <HAL_RCC_OscConfig+0x750>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e12:	f7fd fab3 	bl	800237c <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fd faaf 	bl	800237c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e174      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2c:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <HAL_RCC_OscConfig+0x750>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x546>
 8004e40:	4b84      	ldr	r3, [pc, #528]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a83      	ldr	r2, [pc, #524]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e02d      	b.n	8004eaa <HAL_RCC_OscConfig+0x5a2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x568>
 8004e56:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4a7e      	ldr	r2, [pc, #504]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6713      	str	r3, [r2, #112]	; 0x70
 8004e62:	4b7c      	ldr	r3, [pc, #496]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a7b      	ldr	r2, [pc, #492]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	e01c      	b.n	8004eaa <HAL_RCC_OscConfig+0x5a2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d10c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x58a>
 8004e78:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a75      	ldr	r2, [pc, #468]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
 8004e84:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4a72      	ldr	r2, [pc, #456]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e90:	e00b      	b.n	8004eaa <HAL_RCC_OscConfig+0x5a2>
 8004e92:	4b70      	ldr	r3, [pc, #448]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a6f      	ldr	r2, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a6c      	ldr	r2, [pc, #432]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d015      	beq.n	8004ede <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fa63 	bl	800237c <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fa5f 	bl	800237c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e122      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed0:	4b60      	ldr	r3, [pc, #384]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RCC_OscConfig+0x5b2>
 8004edc:	e014      	b.n	8004f08 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fd fa4d 	bl	800237c <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fd fa49 	bl	800237c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e10c      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004efc:	4b55      	ldr	r3, [pc, #340]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ee      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8101 	beq.w	8005114 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f12:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1a:	2b18      	cmp	r3, #24
 8004f1c:	f000 80bc 	beq.w	8005098 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f040 809d 	bne.w	8005064 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a49      	ldr	r2, [pc, #292]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f36:	f7fd fa21 	bl	800237c <HAL_GetTick>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fd fa1d 	bl	800237c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e0e2      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f50:	4b40      	ldr	r3, [pc, #256]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_RCC_OscConfig+0x754>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f6c:	0112      	lsls	r2, r2, #4
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	4938      	ldr	r1, [pc, #224]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	628b      	str	r3, [r1, #40]	; 0x28
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	3b01      	subs	r3, #1
 8004f86:	025b      	lsls	r3, r3, #9
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa6:	492b      	ldr	r1, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb8:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x758>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fc4:	00d2      	lsls	r2, r2, #3
 8004fc6:	4923      	ldr	r1, [pc, #140]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	f023 020c 	bic.w	r2, r3, #12
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	491e      	ldr	r1, [pc, #120]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	f023 0202 	bic.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	491a      	ldr	r1, [pc, #104]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff0:	4b18      	ldr	r3, [pc, #96]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4a11      	ldr	r2, [pc, #68]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 800500e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8005026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fd f9a6 	bl	800237c <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005034:	f7fd f9a2 	bl	800237c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e067      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <HAL_RCC_OscConfig+0x74c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x72c>
 8005052:	e05f      	b.n	8005114 <HAL_RCC_OscConfig+0x80c>
 8005054:	58024400 	.word	0x58024400
 8005058:	58024800 	.word	0x58024800
 800505c:	fffffc0c 	.word	0xfffffc0c
 8005060:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <HAL_RCC_OscConfig+0x818>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_RCC_OscConfig+0x818>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd f984 	bl	800237c <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd f980 	bl	800237c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e045      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800508a:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCC_OscConfig+0x818>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x770>
 8005096:	e03d      	b.n	8005114 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005098:	4b21      	ldr	r3, [pc, #132]	; (8005120 <HAL_RCC_OscConfig+0x818>)
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800509e:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_RCC_OscConfig+0x818>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d031      	beq.n	8005110 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d12a      	bne.n	8005110 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d122      	bne.n	8005110 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d11a      	bne.n	8005110 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d111      	bne.n	8005110 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d108      	bne.n	8005110 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0e1b      	lsrs	r3, r3, #24
 8005102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3730      	adds	r7, #48	; 0x30
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400

08005124 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e19c      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005138:	4b8a      	ldr	r3, [pc, #552]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d910      	bls.n	8005168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b87      	ldr	r3, [pc, #540]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 020f 	bic.w	r2, r3, #15
 800514e:	4985      	ldr	r1, [pc, #532]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b83      	ldr	r3, [pc, #524]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e184      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d010      	beq.n	8005196 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	4b7b      	ldr	r3, [pc, #492]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005180:	429a      	cmp	r2, r3
 8005182:	d908      	bls.n	8005196 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005184:	4b78      	ldr	r3, [pc, #480]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	4975      	ldr	r1, [pc, #468]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005192:	4313      	orrs	r3, r2
 8005194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	4b70      	ldr	r3, [pc, #448]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d908      	bls.n	80051c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051b2:	4b6d      	ldr	r3, [pc, #436]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	496a      	ldr	r1, [pc, #424]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	4b64      	ldr	r3, [pc, #400]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051dc:	429a      	cmp	r2, r3
 80051de:	d908      	bls.n	80051f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051e0:	4b61      	ldr	r3, [pc, #388]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	495e      	ldr	r1, [pc, #376]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	4b59      	ldr	r3, [pc, #356]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800520a:	429a      	cmp	r2, r3
 800520c:	d908      	bls.n	8005220 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800520e:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4953      	ldr	r1, [pc, #332]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	4b4d      	ldr	r3, [pc, #308]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f023 020f 	bic.w	r2, r3, #15
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4947      	ldr	r1, [pc, #284]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d055      	beq.n	8005306 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800525a:	4b43      	ldr	r3, [pc, #268]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4940      	ldr	r1, [pc, #256]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005268:	4313      	orrs	r3, r2
 800526a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d107      	bne.n	8005284 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005274:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d121      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0f6      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d107      	bne.n	800529c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800528c:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d115      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0ea      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0de      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0d6      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c4:	4b28      	ldr	r3, [pc, #160]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f023 0207 	bic.w	r2, r3, #7
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4925      	ldr	r1, [pc, #148]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fd f851 	bl	800237c <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052de:	f7fd f84d 	bl	800237c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0be      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f4:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	429a      	cmp	r2, r3
 8005304:	d1eb      	bne.n	80052de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	429a      	cmp	r2, r3
 8005320:	d208      	bcs.n	8005334 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f023 020f 	bic.w	r2, r3, #15
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	490e      	ldr	r1, [pc, #56]	; (8005368 <HAL_RCC_ClockConfig+0x244>)
 8005330:	4313      	orrs	r3, r2
 8005332:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d214      	bcs.n	800536c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 020f 	bic.w	r2, r3, #15
 800534a:	4906      	ldr	r1, [pc, #24]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b04      	ldr	r3, [pc, #16]	; (8005364 <HAL_RCC_ClockConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e086      	b.n	8005472 <HAL_RCC_ClockConfig+0x34e>
 8005364:	52002000 	.word	0x52002000
 8005368:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	4b3f      	ldr	r3, [pc, #252]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005384:	429a      	cmp	r2, r3
 8005386:	d208      	bcs.n	800539a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005388:	4b3c      	ldr	r3, [pc, #240]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	4939      	ldr	r1, [pc, #228]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 8005396:	4313      	orrs	r3, r2
 8005398:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	4b34      	ldr	r3, [pc, #208]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d208      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053b6:	4b31      	ldr	r3, [pc, #196]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	492e      	ldr	r1, [pc, #184]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	4b28      	ldr	r3, [pc, #160]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d208      	bcs.n	80053f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	4922      	ldr	r1, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d208      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4917      	ldr	r1, [pc, #92]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 8005420:	4313      	orrs	r3, r2
 8005422:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005424:	f000 f834 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	4912      	ldr	r1, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x35c>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_RCC_ClockConfig+0x358>)
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	4a0d      	ldr	r2, [pc, #52]	; (8005480 <HAL_RCC_ClockConfig+0x35c>)
 800544c:	5cd3      	ldrb	r3, [r2, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
 8005458:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x360>)
 800545a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x364>)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCC_ClockConfig+0x368>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fc fc44 	bl	8001cf4 <HAL_InitTick>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	58024400 	.word	0x58024400
 8005480:	08023200 	.word	0x08023200
 8005484:	24000004 	.word	0x24000004
 8005488:	24000000 	.word	0x24000000
 800548c:	24000008 	.word	0x24000008

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005496:	4bb3      	ldr	r3, [pc, #716]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549e:	2b18      	cmp	r3, #24
 80054a0:	f200 8155 	bhi.w	800574e <HAL_RCC_GetSysClockFreq+0x2be>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	08005511 	.word	0x08005511
 80054b0:	0800574f 	.word	0x0800574f
 80054b4:	0800574f 	.word	0x0800574f
 80054b8:	0800574f 	.word	0x0800574f
 80054bc:	0800574f 	.word	0x0800574f
 80054c0:	0800574f 	.word	0x0800574f
 80054c4:	0800574f 	.word	0x0800574f
 80054c8:	0800574f 	.word	0x0800574f
 80054cc:	08005537 	.word	0x08005537
 80054d0:	0800574f 	.word	0x0800574f
 80054d4:	0800574f 	.word	0x0800574f
 80054d8:	0800574f 	.word	0x0800574f
 80054dc:	0800574f 	.word	0x0800574f
 80054e0:	0800574f 	.word	0x0800574f
 80054e4:	0800574f 	.word	0x0800574f
 80054e8:	0800574f 	.word	0x0800574f
 80054ec:	0800553d 	.word	0x0800553d
 80054f0:	0800574f 	.word	0x0800574f
 80054f4:	0800574f 	.word	0x0800574f
 80054f8:	0800574f 	.word	0x0800574f
 80054fc:	0800574f 	.word	0x0800574f
 8005500:	0800574f 	.word	0x0800574f
 8005504:	0800574f 	.word	0x0800574f
 8005508:	0800574f 	.word	0x0800574f
 800550c:	08005543 	.word	0x08005543
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005510:	4b94      	ldr	r3, [pc, #592]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800551c:	4b91      	ldr	r3, [pc, #580]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	4a90      	ldr	r2, [pc, #576]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800552e:	e111      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005530:	4b8d      	ldr	r3, [pc, #564]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005532:	61bb      	str	r3, [r7, #24]
    break;
 8005534:	e10e      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005536:	4b8d      	ldr	r3, [pc, #564]	; (800576c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005538:	61bb      	str	r3, [r7, #24]
    break;
 800553a:	e10b      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800553c:	4b8c      	ldr	r3, [pc, #560]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800553e:	61bb      	str	r3, [r7, #24]
    break;
 8005540:	e108      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005542:	4b88      	ldr	r3, [pc, #544]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800554c:	4b85      	ldr	r3, [pc, #532]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005556:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005558:	4b82      	ldr	r3, [pc, #520]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005562:	4b80      	ldr	r3, [pc, #512]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	08db      	lsrs	r3, r3, #3
 8005568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80e1 	beq.w	8005748 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b02      	cmp	r3, #2
 800558a:	f000 8083 	beq.w	8005694 <HAL_RCC_GetSysClockFreq+0x204>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b02      	cmp	r3, #2
 8005592:	f200 80a1 	bhi.w	80056d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x114>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d056      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055a2:	e099      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a4:	4b6f      	ldr	r3, [pc, #444]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02d      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055b0:	4b6c      	ldr	r3, [pc, #432]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	4a6b      	ldr	r2, [pc, #428]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055da:	4b62      	ldr	r3, [pc, #392]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800560a:	e087      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2e8>
 800561a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561e:	4b51      	ldr	r3, [pc, #324]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005632:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564e:	e065      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800577c <HAL_RCC_GetSysClockFreq+0x2ec>
 800565e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005662:	4b40      	ldr	r3, [pc, #256]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005672:	ed97 6a02 	vldr	s12, [r7, #8]
 8005676:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e4>
 800567a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005692:	e043      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a6:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d6:	e021      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800577c <HAL_RCC_GetSysClockFreq+0x2ec>
 80056e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ea:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800571a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	0a5b      	lsrs	r3, r3, #9
 8005722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005726:	3301      	adds	r3, #1
 8005728:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005734:	edd7 6a07 	vldr	s13, [r7, #28]
 8005738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005740:	ee17 3a90 	vmov	r3, s15
 8005744:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005746:	e005      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    break;
 800574c:	e002      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800574e:	4b07      	ldr	r3, [pc, #28]	; (800576c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005750:	61bb      	str	r3, [r7, #24]
    break;
 8005752:	bf00      	nop
  }

  return sysclockfreq;
 8005754:	69bb      	ldr	r3, [r7, #24]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3724      	adds	r7, #36	; 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	58024400 	.word	0x58024400
 8005768:	03d09000 	.word	0x03d09000
 800576c:	003d0900 	.word	0x003d0900
 8005770:	017d7840 	.word	0x017d7840
 8005774:	46000000 	.word	0x46000000
 8005778:	4c742400 	.word	0x4c742400
 800577c:	4a742400 	.word	0x4a742400
 8005780:	4bbebc20 	.word	0x4bbebc20

08005784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800578a:	f7ff fe81 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800578e:	4602      	mov	r2, r0
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	490f      	ldr	r1, [pc, #60]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800579c:	5ccb      	ldrb	r3, [r1, r3]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_RCC_GetHCLKFreq+0x58>)
 80057c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_RCC_GetHCLKFreq+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	58024400 	.word	0x58024400
 80057d8:	08023200 	.word	0x08023200
 80057dc:	24000004 	.word	0x24000004
 80057e0:	24000000 	.word	0x24000000

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057e8:	f7ff ffcc 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4904      	ldr	r1, [pc, #16]	; (800580c <HAL_RCC_GetPCLK1Freq+0x28>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58024400 	.word	0x58024400
 800580c:	08023200 	.word	0x08023200

08005810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005814:	f7ff ffb6 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4904      	ldr	r1, [pc, #16]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58024400 	.word	0x58024400
 8005838:	08023200 	.word	0x08023200

0800583c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	223f      	movs	r2, #63	; 0x3f
 800584a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0207 	and.w	r2, r3, #7
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCC_GetClockConfig+0x80>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 020f 	and.w	r2, r3, #15
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	601a      	str	r2, [r3, #0]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	58024400 	.word	0x58024400
 80058bc:	52002000 	.word	0x52002000

080058c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058c8:	2300      	movs	r3, #0
 80058ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058cc:	2300      	movs	r3, #0
 80058ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e4:	d02a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ea:	d824      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f0:	d018      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f6:	d81e      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005902:	e018      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4ba3      	ldr	r3, [pc, #652]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4aa2      	ldr	r2, [pc, #648]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005910:	e015      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2102      	movs	r1, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f9d5 	bl	8006cc8 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005922:	e00c      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2102      	movs	r1, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fa7e 	bl	8006e2c <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005934:	e003      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
      break;
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800593c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005944:	4b93      	ldr	r3, [pc, #588]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005950:	4990      	ldr	r1, [pc, #576]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	650b      	str	r3, [r1, #80]	; 0x50
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	2b04      	cmp	r3, #4
 800596e:	d826      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	0800598d 	.word	0x0800598d
 800597c:	0800599b 	.word	0x0800599b
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059c5 	.word	0x080059c5
 8005988:	080059c5 	.word	0x080059c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598c:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a80      	ldr	r2, [pc, #512]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005998:	e015      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f991 	bl	8006cc8 <RCCEx_PLL2_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059aa:	e00c      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fa3a 	bl	8006e2c <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
      break;
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80059c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059cc:	4b71      	ldr	r3, [pc, #452]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	f023 0207 	bic.w	r2, r3, #7
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	496e      	ldr	r1, [pc, #440]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	650b      	str	r3, [r1, #80]	; 0x50
 80059de:	e001      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d042      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d02b      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fe:	d825      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a00:	2bc0      	cmp	r3, #192	; 0xc0
 8005a02:	d028      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a04:	2bc0      	cmp	r3, #192	; 0xc0
 8005a06:	d821      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d016      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005a0c:	2b80      	cmp	r3, #128	; 0x80
 8005a0e:	d81d      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d007      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005a18:	e018      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1a:	4b5e      	ldr	r3, [pc, #376]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a5d      	ldr	r2, [pc, #372]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a26:	e017      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f94a 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a38:	e00e      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3324      	adds	r3, #36	; 0x24
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f9f3 	bl	8006e2c <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a5e:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	494a      	ldr	r1, [pc, #296]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a70:	e001      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d049      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a8c:	d030      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a92:	d82a      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a98:	d02c      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a9e:	d824      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa4:	d018      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aaa:	d81e      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab4:	d007      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ab6:	e018      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a35      	ldr	r2, [pc, #212]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ac4:	e017      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f8fb 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ad6:	e00e      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3324      	adds	r3, #36	; 0x24
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 f9a4 	bl	8006e2c <RCCEx_PLL3_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e005      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b0a:	4922      	ldr	r1, [pc, #136]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	658b      	str	r3, [r1, #88]	; 0x58
 8005b10:	e001      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04b      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b2c:	d030      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b32:	d82a      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b38:	d02e      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3e:	d824      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b44:	d018      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4a:	d81e      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b54:	d007      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b56:	e018      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4a0d      	ldr	r2, [pc, #52]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b64:	e019      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 f8ab 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b76:	e010      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f954 	bl	8006e2c <RCCEx_PLL3_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b88:	e007      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b94:	58024400 	.word	0x58024400
      break;
 8005b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ba0:	4b99      	ldr	r3, [pc, #612]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bae:	4996      	ldr	r1, [pc, #600]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	658b      	str	r3, [r1, #88]	; 0x58
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d032      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	2b30      	cmp	r3, #48	; 0x30
 8005bcc:	d01c      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d817      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d813      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d016      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d10f      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be2:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	4a88      	ldr	r2, [pc, #544]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bee:	e00e      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 f866 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c00:	e005      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	e002      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c14:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c20:	4979      	ldr	r1, [pc, #484]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c26:	e001      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d047      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c40:	d030      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c46:	d82a      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c4c:	d02c      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c52:	d824      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d018      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5e:	d81e      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c68:	d007      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005c6a:	e018      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a65      	ldr	r2, [pc, #404]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c78:	e017      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f821 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c8a:	e00e      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3324      	adds	r3, #36	; 0x24
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 f8ca 	bl	8006e2c <RCCEx_PLL3_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c9c:	e005      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca2:	e002      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005cb0:	4b55      	ldr	r3, [pc, #340]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	4952      	ldr	r1, [pc, #328]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	650b      	str	r3, [r1, #80]	; 0x50
 8005cc2:	e001      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d049      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cdc:	d02e      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce2:	d828      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ce8:	d02a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cee:	d822      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cf4:	d026      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005cf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cfa:	d81c      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d00:	d010      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d06:	d816      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01d      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d111      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3304      	adds	r3, #4
 8005d16:	2101      	movs	r1, #1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 ffd5 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d22:	e012      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3324      	adds	r3, #36	; 0x24
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 f87e 	bl	8006e2c <RCCEx_PLL3_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d34:	e009      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3a:	e006      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d3c:	bf00      	nop
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d40:	bf00      	nop
 8005d42:	e002      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d50:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5c:	492a      	ldr	r1, [pc, #168]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	650b      	str	r3, [r1, #80]	; 0x50
 8005d62:	e001      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d04d      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d7e:	d02e      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d84:	d828      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d02a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d822      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d96:	d026      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005d98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d9c:	d81c      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da8:	d816      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01d      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db2:	d111      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	2101      	movs	r1, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 ff84 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005dc4:	e012      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3324      	adds	r3, #36	; 0x24
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f82d 	bl	8006e2c <RCCEx_PLL3_Config>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005dd6:	e009      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	75fb      	strb	r3, [r7, #23]
      break;
 8005ddc:	e006      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dde:	bf00      	nop
 8005de0:	e004      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005de2:	bf00      	nop
 8005de4:	e002      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005de6:	bf00      	nop
 8005de8:	e000      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e00:	4901      	ldr	r1, [pc, #4]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	658b      	str	r3, [r1, #88]	; 0x58
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02f      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e24:	d00e      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2a:	d814      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e34:	d10f      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e36:	4baf      	ldr	r3, [pc, #700]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	4aae      	ldr	r2, [pc, #696]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e42:	e00c      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	2101      	movs	r1, #1
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff3c 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e54:	e003      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	e000      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e64:	4ba3      	ldr	r3, [pc, #652]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e70:	49a0      	ldr	r1, [pc, #640]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	650b      	str	r3, [r1, #80]	; 0x50
 8005e76:	e001      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d032      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d81b      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ea9 	.word	0x08005ea9
 8005ea0:	08005eb7 	.word	0x08005eb7
 8005ea4:	08005ecf 	.word	0x08005ecf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4b92      	ldr	r3, [pc, #584]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a91      	ldr	r2, [pc, #580]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005eb4:	e00c      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	2102      	movs	r1, #2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 ff03 	bl	8006cc8 <RCCEx_PLL2_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ec6:	e003      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ed6:	4b87      	ldr	r3, [pc, #540]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	4984      	ldr	r1, [pc, #528]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ee8:	e001      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8086 	beq.w	8006008 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005efc:	4b7e      	ldr	r3, [pc, #504]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a7d      	ldr	r2, [pc, #500]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f08:	f7fc fa38 	bl	800237c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f0e:	e009      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f10:	f7fc fa34 	bl	800237c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d902      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	75fb      	strb	r3, [r7, #23]
        break;
 8005f22:	e005      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f24:	4b74      	ldr	r3, [pc, #464]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ef      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d166      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f36:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f40:	4053      	eors	r3, r2
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d013      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f54:	4b67      	ldr	r3, [pc, #412]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a66      	ldr	r2, [pc, #408]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f60:	4b64      	ldr	r3, [pc, #400]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a63      	ldr	r2, [pc, #396]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f6c:	4a61      	ldr	r2, [pc, #388]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7c:	d115      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7e:	f7fc f9fd 	bl	800237c <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f84:	e00b      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fc f9f9 	bl	800237c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d902      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f9c:	e005      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f9e:	4b55      	ldr	r3, [pc, #340]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ed      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d126      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d10d      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005fc0:	4b4c      	ldr	r3, [pc, #304]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fce:	0919      	lsrs	r1, r3, #4
 8005fd0:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005fd2:	400b      	ands	r3, r1
 8005fd4:	4947      	ldr	r1, [pc, #284]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]
 8005fda:	e005      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005fdc:	4b45      	ldr	r3, [pc, #276]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	4a44      	ldr	r2, [pc, #272]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fe6:	6113      	str	r3, [r2, #16]
 8005fe8:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff6:	493f      	ldr	r1, [pc, #252]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	670b      	str	r3, [r1, #112]	; 0x70
 8005ffc:	e004      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	75bb      	strb	r3, [r7, #22]
 8006002:	e001      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8085 	beq.w	8006120 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601a:	2b28      	cmp	r3, #40	; 0x28
 800601c:	d866      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006101 	.word	0x08006101
 8006028:	080060ed 	.word	0x080060ed
 800602c:	080060ed 	.word	0x080060ed
 8006030:	080060ed 	.word	0x080060ed
 8006034:	080060ed 	.word	0x080060ed
 8006038:	080060ed 	.word	0x080060ed
 800603c:	080060ed 	.word	0x080060ed
 8006040:	080060ed 	.word	0x080060ed
 8006044:	080060c9 	.word	0x080060c9
 8006048:	080060ed 	.word	0x080060ed
 800604c:	080060ed 	.word	0x080060ed
 8006050:	080060ed 	.word	0x080060ed
 8006054:	080060ed 	.word	0x080060ed
 8006058:	080060ed 	.word	0x080060ed
 800605c:	080060ed 	.word	0x080060ed
 8006060:	080060ed 	.word	0x080060ed
 8006064:	080060db 	.word	0x080060db
 8006068:	080060ed 	.word	0x080060ed
 800606c:	080060ed 	.word	0x080060ed
 8006070:	080060ed 	.word	0x080060ed
 8006074:	080060ed 	.word	0x080060ed
 8006078:	080060ed 	.word	0x080060ed
 800607c:	080060ed 	.word	0x080060ed
 8006080:	080060ed 	.word	0x080060ed
 8006084:	08006101 	.word	0x08006101
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080060ed 	.word	0x080060ed
 8006090:	080060ed 	.word	0x080060ed
 8006094:	080060ed 	.word	0x080060ed
 8006098:	080060ed 	.word	0x080060ed
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	080060ed 	.word	0x080060ed
 80060a4:	08006101 	.word	0x08006101
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	080060ed 	.word	0x080060ed
 80060b0:	080060ed 	.word	0x080060ed
 80060b4:	080060ed 	.word	0x080060ed
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006101 	.word	0x08006101
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fdfa 	bl	8006cc8 <RCCEx_PLL2_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060d8:	e013      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3324      	adds	r3, #36	; 0x24
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fea3 	bl	8006e2c <RCCEx_PLL3_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060ea:	e00a      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
      break;
 80060f0:	e007      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060f2:	bf00      	nop
 80060f4:	58024400 	.word	0x58024400
 80060f8:	58024800 	.word	0x58024800
 80060fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8006100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006108:	4b96      	ldr	r3, [pc, #600]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006114:	4993      	ldr	r1, [pc, #588]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006116:	4313      	orrs	r3, r2
 8006118:	654b      	str	r3, [r1, #84]	; 0x54
 800611a:	e001      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d038      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006130:	2b05      	cmp	r3, #5
 8006132:	d821      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800617f 	.word	0x0800617f
 8006140:	08006155 	.word	0x08006155
 8006144:	08006167 	.word	0x08006167
 8006148:	0800617f 	.word	0x0800617f
 800614c:	0800617f 	.word	0x0800617f
 8006150:	0800617f 	.word	0x0800617f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fdb4 	bl	8006cc8 <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fe5d 	bl	8006e2c <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006186:	4b77      	ldr	r3, [pc, #476]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006192:	4974      	ldr	r1, [pc, #464]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	654b      	str	r3, [r1, #84]	; 0x54
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d03a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d821      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061ff 	.word	0x080061ff
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061e7 	.word	0x080061e7
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ff 	.word	0x080061ff
 80061d0:	080061ff 	.word	0x080061ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fd74 	bl	8006cc8 <RCCEx_PLL2_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061e4:	e00c      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3324      	adds	r3, #36	; 0x24
 80061ea:	2101      	movs	r1, #1
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fe1d 	bl	8006e2c <RCCEx_PLL3_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006206:	4b57      	ldr	r3, [pc, #348]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	f023 0207 	bic.w	r2, r3, #7
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	4953      	ldr	r1, [pc, #332]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006216:	4313      	orrs	r3, r2
 8006218:	658b      	str	r3, [r1, #88]	; 0x58
 800621a:	e001      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d04b      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006236:	d02e      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800623c:	d828      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d02a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d822      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800624a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800624e:	d026      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006250:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006254:	d81c      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625a:	d010      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800625c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006260:	d816      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01d      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800626a:	d111      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fd28 	bl	8006cc8 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800627c:	e012      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fdd1 	bl	8006e2c <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006296:	bf00      	nop
 8006298:	e004      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80062a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062aa:	4b2e      	ldr	r3, [pc, #184]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b8:	492a      	ldr	r1, [pc, #168]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	654b      	str	r3, [r1, #84]	; 0x54
 80062be:	e001      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d04d      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062da:	d02e      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80062dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062e0:	d828      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	d02a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ec:	d822      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062f2:	d026      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80062f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062f8:	d81c      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d010      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006304:	d816      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01d      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630e:	d111      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fcd6 	bl	8006cc8 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006320:	e012      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	2102      	movs	r1, #2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fd7f 	bl	8006e2c <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006332:	e009      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
      break;
 8006338:	e006      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800635c:	4901      	ldr	r1, [pc, #4]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	658b      	str	r3, [r1, #88]	; 0x58
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	2b00      	cmp	r3, #0
 8006376:	d04b      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006382:	d02e      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006384:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006388:	d828      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800638a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638e:	d02a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006394:	d822      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006396:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800639a:	d026      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800639c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063a0:	d81c      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a6:	d010      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80063a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ac:	d816      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01d      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b6:	d111      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc82 	bl	8006cc8 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063c8:	e012      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3324      	adds	r3, #36	; 0x24
 80063ce:	2102      	movs	r1, #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd2b 	bl	8006e2c <RCCEx_PLL3_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063da:	e009      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
      break;
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063f6:	4b9d      	ldr	r3, [pc, #628]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006404:	4999      	ldr	r1, [pc, #612]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006406:	4313      	orrs	r3, r2
 8006408:	658b      	str	r3, [r1, #88]	; 0x58
 800640a:	e001      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d10a      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fcfc 	bl	8006e2c <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800643e:	4b8b      	ldr	r3, [pc, #556]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644c:	4987      	ldr	r1, [pc, #540]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800644e:	4313      	orrs	r3, r2
 8006450:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d10a      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3324      	adds	r3, #36	; 0x24
 800646e:	2102      	movs	r1, #2
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fcdb 	bl	8006e2c <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006480:	4b7a      	ldr	r3, [pc, #488]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648e:	4977      	ldr	r1, [pc, #476]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006490:	4313      	orrs	r3, r2
 8006492:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d034      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064aa:	d01d      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80064ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b0:	d817      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d009      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80064bc:	e011      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fbff 	bl	8006cc8 <RCCEx_PLL2_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3324      	adds	r3, #36	; 0x24
 80064d4:	2102      	movs	r1, #2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fca8 	bl	8006e2c <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
      break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80064e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f0:	4b5e      	ldr	r3, [pc, #376]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064fe:	495b      	ldr	r1, [pc, #364]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006500:	4313      	orrs	r3, r2
 8006502:	658b      	str	r3, [r1, #88]	; 0x58
 8006504:	e001      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d033      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006520:	d01c      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006526:	d816      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652c:	d003      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800652e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006532:	d007      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006534:	e00f      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006536:	4b4d      	ldr	r3, [pc, #308]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	4a4c      	ldr	r2, [pc, #304]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800653c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006542:	e00c      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	2101      	movs	r1, #1
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fc6e 	bl	8006e2c <RCCEx_PLL3_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800655c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006564:	4b41      	ldr	r3, [pc, #260]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	493e      	ldr	r1, [pc, #248]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006574:	4313      	orrs	r3, r2
 8006576:	654b      	str	r3, [r1, #84]	; 0x54
 8006578:	e001      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d029      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006596:	d007      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006598:	e00f      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b34      	ldr	r3, [pc, #208]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a33      	ldr	r2, [pc, #204]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065a6:	e00b      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fb8a 	bl	8006cc8 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065b8:	e002      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
      break;
 80065be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	4926      	ldr	r1, [pc, #152]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065d8:	e001      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3324      	adds	r3, #36	; 0x24
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fc1b 	bl	8006e2c <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d033      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006614:	d017      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661a:	d811      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800661c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006620:	d013      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006626:	d80b      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d010      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800662c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006630:	d106      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800663e:	e007      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	75fb      	strb	r3, [r7, #23]
      break;
 8006644:	e004      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800664e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006662:	4902      	ldr	r1, [pc, #8]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006664:	4313      	orrs	r3, r2
 8006666:	654b      	str	r3, [r1, #84]	; 0x54
 8006668:	e004      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006680:	4b31      	ldr	r3, [pc, #196]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006684:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	492e      	ldr	r1, [pc, #184]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800668e:	4313      	orrs	r3, r2
 8006690:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800669e:	4b2a      	ldr	r3, [pc, #168]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066ac:	4926      	ldr	r1, [pc, #152]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d008      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ca:	491f      	ldr	r1, [pc, #124]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066dc:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	4a19      	ldr	r2, [pc, #100]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066e6:	6113      	str	r3, [r2, #16]
 80066e8:	4b17      	ldr	r3, [pc, #92]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066f2:	4915      	ldr	r1, [pc, #84]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da08      	bge.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670c:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800670e:	4313      	orrs	r3, r2
 8006710:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	4906      	ldr	r1, [pc, #24]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800672e:	4313      	orrs	r3, r2
 8006730:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	58024400 	.word	0x58024400

0800674c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006750:	f7ff f818 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8006754:	4602      	mov	r2, r0
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4904      	ldr	r1, [pc, #16]	; (8006774 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006762:	5ccb      	ldrb	r3, [r1, r3]
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	58024400 	.word	0x58024400
 8006774:	08023200 	.word	0x08023200

08006778 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006778:	b480      	push	{r7}
 800677a:	b089      	sub	sp, #36	; 0x24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006780:	4ba1      	ldr	r3, [pc, #644]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800678a:	4b9f      	ldr	r3, [pc, #636]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	0b1b      	lsrs	r3, r3, #12
 8006790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006794:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006796:	4b9c      	ldr	r3, [pc, #624]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	091b      	lsrs	r3, r3, #4
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80067a2:	4b99      	ldr	r3, [pc, #612]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8111 	beq.w	80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	f000 8083 	beq.w	80068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f200 80a1 	bhi.w	8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d056      	beq.n	8006890 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067e2:	e099      	b.n	8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067e4:	4b88      	ldr	r3, [pc, #544]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d02d      	beq.n	800684c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067f0:	4b85      	ldr	r3, [pc, #532]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	08db      	lsrs	r3, r3, #3
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	4a84      	ldr	r2, [pc, #528]	; (8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006800:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b7b      	ldr	r3, [pc, #492]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a03 	vldr	s12, [r7, #12]
 800682e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800684a:	e087      	b.n	800695c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006872:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800688e:	e065      	b.n	800695c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a2:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068d2:	e043      	b.n	800695c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b48      	ldr	r3, [pc, #288]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006916:	e021      	b.n	800695c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692a:	4b37      	ldr	r3, [pc, #220]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693a:	ed97 6a03 	vldr	s12, [r7, #12]
 800693e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800694e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800695a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800695c:	4b2a      	ldr	r3, [pc, #168]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	0a5b      	lsrs	r3, r3, #9
 8006962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006976:	edd7 6a07 	vldr	s13, [r7, #28]
 800697a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800698a:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	0c1b      	lsrs	r3, r3, #16
 8006990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b0:	ee17 2a90 	vmov	r2, s15
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	0e1b      	lsrs	r3, r3, #24
 80069be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069de:	ee17 2a90 	vmov	r2, s15
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069e6:	e008      	b.n	80069fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
}
 80069fa:	bf00      	nop
 80069fc:	3724      	adds	r7, #36	; 0x24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
 8006a0c:	03d09000 	.word	0x03d09000
 8006a10:	46000000 	.word	0x46000000
 8006a14:	4c742400 	.word	0x4c742400
 8006a18:	4a742400 	.word	0x4a742400
 8006a1c:	4bbebc20 	.word	0x4bbebc20

08006a20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b089      	sub	sp, #36	; 0x24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a28:	4ba1      	ldr	r3, [pc, #644]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a32:	4b9f      	ldr	r3, [pc, #636]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	0d1b      	lsrs	r3, r3, #20
 8006a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a3e:	4b9c      	ldr	r3, [pc, #624]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a4a:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8111 	beq.w	8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	f000 8083 	beq.w	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	f200 80a1 	bhi.w	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d056      	beq.n	8006b38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a8a:	e099      	b.n	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a8c:	4b88      	ldr	r3, [pc, #544]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02d      	beq.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a98:	4b85      	ldr	r3, [pc, #532]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	08db      	lsrs	r3, r3, #3
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	4a84      	ldr	r2, [pc, #528]	; (8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b7b      	ldr	r3, [pc, #492]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006af2:	e087      	b.n	8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b6a      	ldr	r3, [pc, #424]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b36:	e065      	b.n	8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	4b59      	ldr	r3, [pc, #356]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b7a:	e043      	b.n	8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bbe:	e021      	b.n	8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c04:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	0a5b      	lsrs	r3, r3, #9
 8006c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2a:	ee17 2a90 	vmov	r2, s15
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c32:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c58:	ee17 2a90 	vmov	r2, s15
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c60:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	0e1b      	lsrs	r3, r3, #24
 8006c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c86:	ee17 2a90 	vmov	r2, s15
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	609a      	str	r2, [r3, #8]
}
 8006ca2:	bf00      	nop
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	03d09000 	.word	0x03d09000
 8006cb8:	46000000 	.word	0x46000000
 8006cbc:	4c742400 	.word	0x4c742400
 8006cc0:	4a742400 	.word	0x4a742400
 8006cc4:	4bbebc20 	.word	0x4bbebc20

08006cc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cd6:	4b53      	ldr	r3, [pc, #332]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d101      	bne.n	8006ce6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e099      	b.n	8006e1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ce6:	4b4f      	ldr	r3, [pc, #316]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4e      	ldr	r2, [pc, #312]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf2:	f7fb fb43 	bl	800237c <HAL_GetTick>
 8006cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cfa:	f7fb fb3f 	bl	800237c <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e086      	b.n	8006e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f0      	bne.n	8006cfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d18:	4b42      	ldr	r3, [pc, #264]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	493f      	ldr	r1, [pc, #252]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	628b      	str	r3, [r1, #40]	; 0x28
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	025b      	lsls	r3, r3, #9
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	061b      	lsls	r3, r3, #24
 8006d58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d5c:	4931      	ldr	r1, [pc, #196]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d62:	4b30      	ldr	r3, [pc, #192]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	492d      	ldr	r1, [pc, #180]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d74:	4b2b      	ldr	r3, [pc, #172]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	f023 0220 	bic.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	4928      	ldr	r1, [pc, #160]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d86:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d92:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <RCCEx_PLL2_Config+0x160>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	69d2      	ldr	r2, [r2, #28]
 8006d9e:	00d2      	lsls	r2, r2, #3
 8006da0:	4920      	ldr	r1, [pc, #128]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006da6:	4b1f      	ldr	r3, [pc, #124]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	f043 0310 	orr.w	r3, r3, #16
 8006db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dc4:	e00f      	b.n	8006de6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d106      	bne.n	8006dda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dcc:	4b15      	ldr	r3, [pc, #84]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dd8:	e005      	b.n	8006de6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df2:	f7fb fac3 	bl	800237c <HAL_GetTick>
 8006df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006df8:	e008      	b.n	8006e0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dfa:	f7fb fabf 	bl	800237c <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e006      	b.n	8006e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <RCCEx_PLL2_Config+0x15c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400
 8006e28:	ffff0007 	.word	0xffff0007

08006e2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e3a:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d101      	bne.n	8006e4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e099      	b.n	8006f7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e4a:	4b4f      	ldr	r3, [pc, #316]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a4e      	ldr	r2, [pc, #312]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e56:	f7fb fa91 	bl	800237c <HAL_GetTick>
 8006e5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e5c:	e008      	b.n	8006e70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e5e:	f7fb fa8d 	bl	800237c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e086      	b.n	8006f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e70:	4b45      	ldr	r3, [pc, #276]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f0      	bne.n	8006e5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e7c:	4b42      	ldr	r3, [pc, #264]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	051b      	lsls	r3, r3, #20
 8006e8a:	493f      	ldr	r1, [pc, #252]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	025b      	lsls	r3, r3, #9
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	061b      	lsls	r3, r3, #24
 8006ebc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ec0:	4931      	ldr	r1, [pc, #196]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ec6:	4b30      	ldr	r3, [pc, #192]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	492d      	ldr	r1, [pc, #180]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	4928      	ldr	r1, [pc, #160]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eea:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <RCCEx_PLL3_Config+0x160>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	69d2      	ldr	r2, [r2, #28]
 8006f02:	00d2      	lsls	r2, r2, #3
 8006f04:	4920      	ldr	r1, [pc, #128]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f28:	e00f      	b.n	8006f4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d106      	bne.n	8006f3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f30:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f3c:	e005      	b.n	8006f4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a0e      	ldr	r2, [pc, #56]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f56:	f7fb fa11 	bl	800237c <HAL_GetTick>
 8006f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f5c:	e008      	b.n	8006f70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f5e:	f7fb fa0d 	bl	800237c <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e006      	b.n	8006f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <RCCEx_PLL3_Config+0x15c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	ffff0007 	.word	0xffff0007

08006f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e049      	b.n	8007036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f841 	bl	800703e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f000 f9f8 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d001      	beq.n	800706c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e04f      	b.n	800710c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a23      	ldr	r2, [pc, #140]	; (8007118 <HAL_TIM_Base_Start_IT+0xc4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d018      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_TIM_Base_Start_IT+0xc8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_TIM_Base_Start_IT+0xcc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_TIM_Base_Start_IT+0xd0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_TIM_Base_Start_IT+0xd4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_TIM_Base_Start_IT+0xd8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d115      	bne.n	80070f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	4b17      	ldr	r3, [pc, #92]	; (8007130 <HAL_TIM_Base_Start_IT+0xdc>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b06      	cmp	r3, #6
 80070da:	d015      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d011      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f4:	e008      	b.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e000      	b.n	800710a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40010000 	.word	0x40010000
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40010400 	.word	0x40010400
 800712c:	40001800 	.word	0x40001800
 8007130:	00010007 	.word	0x00010007

08007134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b02      	cmp	r3, #2
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0202 	mvn.w	r2, #2
 8007160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f905 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8f7 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f908 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b04      	cmp	r3, #4
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0204 	mvn.w	r2, #4
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8db 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8cd 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f8de 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d122      	bne.n	8007238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0208 	mvn.w	r2, #8
 8007208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2204      	movs	r2, #4
 800720e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8b1 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8a3 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8b4 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b10      	cmp	r3, #16
 8007244:	d122      	bne.n	800728c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b10      	cmp	r3, #16
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0210 	mvn.w	r2, #16
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2208      	movs	r2, #8
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f887 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f879 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f88a 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0201 	mvn.w	r2, #1
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fa fc04 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b80      	cmp	r3, #128	; 0x80
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f914 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	d10e      	bne.n	8007312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d107      	bne.n	8007312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800730a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f907 	bl	8007520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d10e      	bne.n	800733e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d107      	bne.n	800733e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f838 	bl	80073ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b20      	cmp	r3, #32
 800734a:	d10e      	bne.n	800736a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b20      	cmp	r3, #32
 8007358:	d107      	bne.n	800736a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0220 	mvn.w	r2, #32
 8007362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f8c7 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a40      	ldr	r2, [pc, #256]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e2:	d00f      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a3d      	ldr	r2, [pc, #244]	; (80074dc <TIM_Base_SetConfig+0x118>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00b      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3c      	ldr	r2, [pc, #240]	; (80074e0 <TIM_Base_SetConfig+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a3b      	ldr	r2, [pc, #236]	; (80074e4 <TIM_Base_SetConfig+0x120>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3a      	ldr	r2, [pc, #232]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d108      	bne.n	8007416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d01f      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d01b      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <TIM_Base_SetConfig+0x118>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d017      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a2b      	ldr	r2, [pc, #172]	; (80074e0 <TIM_Base_SetConfig+0x11c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <TIM_Base_SetConfig+0x120>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00f      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00b      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a28      	ldr	r2, [pc, #160]	; (80074ec <TIM_Base_SetConfig+0x128>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d007      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a27      	ldr	r2, [pc, #156]	; (80074f0 <TIM_Base_SetConfig+0x12c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d003      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a26      	ldr	r2, [pc, #152]	; (80074f4 <TIM_Base_SetConfig+0x130>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d108      	bne.n	8007470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a10      	ldr	r2, [pc, #64]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00f      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00b      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a11      	ldr	r2, [pc, #68]	; (80074ec <TIM_Base_SetConfig+0x128>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <TIM_Base_SetConfig+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a0f      	ldr	r2, [pc, #60]	; (80074f4 <TIM_Base_SetConfig+0x130>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d103      	bne.n	80074c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	615a      	str	r2, [r3, #20]
}
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40010400 	.word	0x40010400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40014400 	.word	0x40014400
 80074f4:	40014800 	.word	0x40014800

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e042      	b.n	80075cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754c:	2b00      	cmp	r3, #0
 800754e:	d106      	bne.n	800755e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fa fb65 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2224      	movs	r2, #36	; 0x24
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0201 	bic.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f8c2 	bl	8007700 <UART_SetConfig>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e022      	b.n	80075cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fe20 	bl	80081d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fea7 	bl	8008318 <UART_CheckIdleState>
 80075ca:	4603      	mov	r3, r0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	f040 8083 	bne.w	80076f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Transmit+0x28>
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e07b      	b.n	80076f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UART_Transmit+0x3a>
 800760a:	2302      	movs	r3, #2
 800760c:	e074      	b.n	80076f8 <HAL_UART_Transmit+0x124>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2221      	movs	r2, #33	; 0x21
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007626:	f7fa fea9 	bl	800237c <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d108      	bne.n	8007658 <HAL_UART_Transmit+0x84>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e003      	b.n	8007660 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007668:	e02c      	b.n	80076c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2200      	movs	r2, #0
 8007672:	2180      	movs	r1, #128	; 0x80
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fe9a 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e039      	b.n	80076f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	3302      	adds	r3, #2
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e007      	b.n	80076b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	3301      	adds	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1cc      	bne.n	800766a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2140      	movs	r1, #64	; 0x40
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fe67 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e006      	b.n	80076f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e000      	b.n	80076f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80076f6:	2302      	movs	r3, #2
  }
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007704:	b092      	sub	sp, #72	; 0x48
 8007706:	af00      	add	r7, sp, #0
 8007708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	431a      	orrs	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	431a      	orrs	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	4313      	orrs	r3, r2
 8007726:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4bbe      	ldr	r3, [pc, #760]	; (8007a28 <UART_SetConfig+0x328>)
 8007730:	4013      	ands	r3, r2
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007738:	430b      	orrs	r3, r1
 800773a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4ab3      	ldr	r2, [pc, #716]	; (8007a2c <UART_SetConfig+0x32c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007768:	4313      	orrs	r3, r2
 800776a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	4baf      	ldr	r3, [pc, #700]	; (8007a30 <UART_SetConfig+0x330>)
 8007774:	4013      	ands	r3, r2
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800777c:	430b      	orrs	r3, r1
 800777e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	f023 010f 	bic.w	r1, r3, #15
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4aa6      	ldr	r2, [pc, #664]	; (8007a34 <UART_SetConfig+0x334>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d177      	bne.n	8007890 <UART_SetConfig+0x190>
 80077a0:	4ba5      	ldr	r3, [pc, #660]	; (8007a38 <UART_SetConfig+0x338>)
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a8:	2b28      	cmp	r3, #40	; 0x28
 80077aa:	d86d      	bhi.n	8007888 <UART_SetConfig+0x188>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0xb4>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	08007859 	.word	0x08007859
 80077b8:	08007889 	.word	0x08007889
 80077bc:	08007889 	.word	0x08007889
 80077c0:	08007889 	.word	0x08007889
 80077c4:	08007889 	.word	0x08007889
 80077c8:	08007889 	.word	0x08007889
 80077cc:	08007889 	.word	0x08007889
 80077d0:	08007889 	.word	0x08007889
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007889 	.word	0x08007889
 80077dc:	08007889 	.word	0x08007889
 80077e0:	08007889 	.word	0x08007889
 80077e4:	08007889 	.word	0x08007889
 80077e8:	08007889 	.word	0x08007889
 80077ec:	08007889 	.word	0x08007889
 80077f0:	08007889 	.word	0x08007889
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007889 	.word	0x08007889
 80077fc:	08007889 	.word	0x08007889
 8007800:	08007889 	.word	0x08007889
 8007804:	08007889 	.word	0x08007889
 8007808:	08007889 	.word	0x08007889
 800780c:	08007889 	.word	0x08007889
 8007810:	08007889 	.word	0x08007889
 8007814:	08007871 	.word	0x08007871
 8007818:	08007889 	.word	0x08007889
 800781c:	08007889 	.word	0x08007889
 8007820:	08007889 	.word	0x08007889
 8007824:	08007889 	.word	0x08007889
 8007828:	08007889 	.word	0x08007889
 800782c:	08007889 	.word	0x08007889
 8007830:	08007889 	.word	0x08007889
 8007834:	08007879 	.word	0x08007879
 8007838:	08007889 	.word	0x08007889
 800783c:	08007889 	.word	0x08007889
 8007840:	08007889 	.word	0x08007889
 8007844:	08007889 	.word	0x08007889
 8007848:	08007889 	.word	0x08007889
 800784c:	08007889 	.word	0x08007889
 8007850:	08007889 	.word	0x08007889
 8007854:	08007881 	.word	0x08007881
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e222      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e21e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e21a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e216      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007878:	2320      	movs	r3, #32
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e212      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007880:	2340      	movs	r3, #64	; 0x40
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e20e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e20a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a69      	ldr	r2, [pc, #420]	; (8007a3c <UART_SetConfig+0x33c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d130      	bne.n	80078fc <UART_SetConfig+0x1fc>
 800789a:	4b67      	ldr	r3, [pc, #412]	; (8007a38 <UART_SetConfig+0x338>)
 800789c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	d826      	bhi.n	80078f4 <UART_SetConfig+0x1f4>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x1ac>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078c5 	.word	0x080078c5
 80078b0:	080078cd 	.word	0x080078cd
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078e5 	.word	0x080078e5
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e1ec      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078cc:	2304      	movs	r3, #4
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e1e8      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078d4:	2308      	movs	r3, #8
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e1e4      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078dc:	2310      	movs	r3, #16
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e1e0      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078e4:	2320      	movs	r3, #32
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e1dc      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078ec:	2340      	movs	r3, #64	; 0x40
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e1d8      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e1d4      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a4f      	ldr	r2, [pc, #316]	; (8007a40 <UART_SetConfig+0x340>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d130      	bne.n	8007968 <UART_SetConfig+0x268>
 8007906:	4b4c      	ldr	r3, [pc, #304]	; (8007a38 <UART_SetConfig+0x338>)
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b05      	cmp	r3, #5
 8007910:	d826      	bhi.n	8007960 <UART_SetConfig+0x260>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0x218>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007931 	.word	0x08007931
 800791c:	08007939 	.word	0x08007939
 8007920:	08007941 	.word	0x08007941
 8007924:	08007949 	.word	0x08007949
 8007928:	08007951 	.word	0x08007951
 800792c:	08007959 	.word	0x08007959
 8007930:	2300      	movs	r3, #0
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e1b6      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e1b2      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e1ae      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e1aa      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007950:	2320      	movs	r3, #32
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e1a6      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e1a2      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007960:	2380      	movs	r3, #128	; 0x80
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e19e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <UART_SetConfig+0x344>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d130      	bne.n	80079d4 <UART_SetConfig+0x2d4>
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <UART_SetConfig+0x338>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b05      	cmp	r3, #5
 800797c:	d826      	bhi.n	80079cc <UART_SetConfig+0x2cc>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x284>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079ad 	.word	0x080079ad
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e180      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e17c      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e178      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e174      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079bc:	2320      	movs	r3, #32
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e170      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e16c      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e168      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <UART_SetConfig+0x348>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d142      	bne.n	8007a64 <UART_SetConfig+0x364>
 80079de:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <UART_SetConfig+0x338>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d838      	bhi.n	8007a5c <UART_SetConfig+0x35c>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x2f0>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a4d 	.word	0x08007a4d
 8007a04:	08007a55 	.word	0x08007a55
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e14a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e146      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e142      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e13e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a28:	cfff69f3 	.word	0xcfff69f3
 8007a2c:	58000c00 	.word	0x58000c00
 8007a30:	11fff4ff 	.word	0x11fff4ff
 8007a34:	40011000 	.word	0x40011000
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	40004400 	.word	0x40004400
 8007a40:	40004800 	.word	0x40004800
 8007a44:	40004c00 	.word	0x40004c00
 8007a48:	40005000 	.word	0x40005000
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e128      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e124      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e120      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4acb      	ldr	r2, [pc, #812]	; (8007d98 <UART_SetConfig+0x698>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d176      	bne.n	8007b5c <UART_SetConfig+0x45c>
 8007a6e:	4bcb      	ldr	r3, [pc, #812]	; (8007d9c <UART_SetConfig+0x69c>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a76:	2b28      	cmp	r3, #40	; 0x28
 8007a78:	d86c      	bhi.n	8007b54 <UART_SetConfig+0x454>
 8007a7a:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0x380>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b55 	.word	0x08007b55
 8007a88:	08007b55 	.word	0x08007b55
 8007a8c:	08007b55 	.word	0x08007b55
 8007a90:	08007b55 	.word	0x08007b55
 8007a94:	08007b55 	.word	0x08007b55
 8007a98:	08007b55 	.word	0x08007b55
 8007a9c:	08007b55 	.word	0x08007b55
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b55 	.word	0x08007b55
 8007aa8:	08007b55 	.word	0x08007b55
 8007aac:	08007b55 	.word	0x08007b55
 8007ab0:	08007b55 	.word	0x08007b55
 8007ab4:	08007b55 	.word	0x08007b55
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007b55 	.word	0x08007b55
 8007ac0:	08007b35 	.word	0x08007b35
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b55 	.word	0x08007b55
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b45 	.word	0x08007b45
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b55 	.word	0x08007b55
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b4d 	.word	0x08007b4d
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e0bc      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e0b8      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b34:	2308      	movs	r3, #8
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e0b4      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b42:	e0b0      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b44:	2320      	movs	r3, #32
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e0ac      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e0a8      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e0a4      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a8f      	ldr	r2, [pc, #572]	; (8007da0 <UART_SetConfig+0x6a0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d130      	bne.n	8007bc8 <UART_SetConfig+0x4c8>
 8007b66:	4b8d      	ldr	r3, [pc, #564]	; (8007d9c <UART_SetConfig+0x69c>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	d826      	bhi.n	8007bc0 <UART_SetConfig+0x4c0>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x478>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b91 	.word	0x08007b91
 8007b7c:	08007b99 	.word	0x08007b99
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bb1 	.word	0x08007bb1
 8007b8c:	08007bb9 	.word	0x08007bb9
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e086      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e082      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e07e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e07a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e076      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e072      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e06e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a75      	ldr	r2, [pc, #468]	; (8007da4 <UART_SetConfig+0x6a4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d130      	bne.n	8007c34 <UART_SetConfig+0x534>
 8007bd2:	4b72      	ldr	r3, [pc, #456]	; (8007d9c <UART_SetConfig+0x69c>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d826      	bhi.n	8007c2c <UART_SetConfig+0x52c>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x4e4>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007bfd 	.word	0x08007bfd
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007c0d 	.word	0x08007c0d
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e050      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e04c      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e048      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e044      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e040      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e03c      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e038      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a5b      	ldr	r2, [pc, #364]	; (8007da8 <UART_SetConfig+0x6a8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x5a0>
 8007c3e:	4b57      	ldr	r3, [pc, #348]	; (8007d9c <UART_SetConfig+0x69c>)
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x598>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x550>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e01a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e016      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e012      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e00e      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e00a      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e006      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e002      	b.n	8007ca6 <UART_SetConfig+0x5a6>
 8007ca0:	2380      	movs	r3, #128	; 0x80
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <UART_SetConfig+0x6a8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	f040 80f8 	bne.w	8007ea2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	dc46      	bgt.n	8007d48 <UART_SetConfig+0x648>
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	f2c0 8082 	blt.w	8007dc4 <UART_SetConfig+0x6c4>
 8007cc0:	3b02      	subs	r3, #2
 8007cc2:	2b1e      	cmp	r3, #30
 8007cc4:	d87e      	bhi.n	8007dc4 <UART_SetConfig+0x6c4>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x5cc>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d4f 	.word	0x08007d4f
 8007cd0:	08007dc5 	.word	0x08007dc5
 8007cd4:	08007d57 	.word	0x08007d57
 8007cd8:	08007dc5 	.word	0x08007dc5
 8007cdc:	08007dc5 	.word	0x08007dc5
 8007ce0:	08007dc5 	.word	0x08007dc5
 8007ce4:	08007d67 	.word	0x08007d67
 8007ce8:	08007dc5 	.word	0x08007dc5
 8007cec:	08007dc5 	.word	0x08007dc5
 8007cf0:	08007dc5 	.word	0x08007dc5
 8007cf4:	08007dc5 	.word	0x08007dc5
 8007cf8:	08007dc5 	.word	0x08007dc5
 8007cfc:	08007dc5 	.word	0x08007dc5
 8007d00:	08007dc5 	.word	0x08007dc5
 8007d04:	08007d77 	.word	0x08007d77
 8007d08:	08007dc5 	.word	0x08007dc5
 8007d0c:	08007dc5 	.word	0x08007dc5
 8007d10:	08007dc5 	.word	0x08007dc5
 8007d14:	08007dc5 	.word	0x08007dc5
 8007d18:	08007dc5 	.word	0x08007dc5
 8007d1c:	08007dc5 	.word	0x08007dc5
 8007d20:	08007dc5 	.word	0x08007dc5
 8007d24:	08007dc5 	.word	0x08007dc5
 8007d28:	08007dc5 	.word	0x08007dc5
 8007d2c:	08007dc5 	.word	0x08007dc5
 8007d30:	08007dc5 	.word	0x08007dc5
 8007d34:	08007dc5 	.word	0x08007dc5
 8007d38:	08007dc5 	.word	0x08007dc5
 8007d3c:	08007dc5 	.word	0x08007dc5
 8007d40:	08007dc5 	.word	0x08007dc5
 8007d44:	08007db7 	.word	0x08007db7
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d037      	beq.n	8007dbc <UART_SetConfig+0x6bc>
 8007d4c:	e03a      	b.n	8007dc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d4e:	f7fe fcfd 	bl	800674c <HAL_RCCEx_GetD3PCLK1Freq>
 8007d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d54:	e03c      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fd0c 	bl	8006778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d64:	e034      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fe58 	bl	8006a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d74:	e02c      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <UART_SetConfig+0x69c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d016      	beq.n	8007db0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d82:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <UART_SetConfig+0x69c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	4a07      	ldr	r2, [pc, #28]	; (8007dac <UART_SetConfig+0x6ac>)
 8007d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d94:	e01c      	b.n	8007dd0 <UART_SetConfig+0x6d0>
 8007d96:	bf00      	nop
 8007d98:	40011400 	.word	0x40011400
 8007d9c:	58024400 	.word	0x58024400
 8007da0:	40007800 	.word	0x40007800
 8007da4:	40007c00 	.word	0x40007c00
 8007da8:	58000c00 	.word	0x58000c00
 8007dac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007db0:	4b9e      	ldr	r3, [pc, #632]	; (800802c <UART_SetConfig+0x92c>)
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db4:	e00c      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007db6:	4b9e      	ldr	r3, [pc, #632]	; (8008030 <UART_SetConfig+0x930>)
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dba:	e009      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc2:	e005      	b.n	8007dd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007dce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 81e0 	beq.w	8008198 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	4a95      	ldr	r2, [pc, #596]	; (8008034 <UART_SetConfig+0x934>)
 8007dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	4413      	add	r3, r2
 8007df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d305      	bcc.n	8007e08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e0e:	e1c3      	b.n	8008198 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e12:	2200      	movs	r2, #0
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	60fa      	str	r2, [r7, #12]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	4a85      	ldr	r2, [pc, #532]	; (8008034 <UART_SetConfig+0x934>)
 8007e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2200      	movs	r2, #0
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e32:	f7f8 fabd 	bl	80003b0 <__aeabi_uldivmod>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	020b      	lsls	r3, r1, #8
 8007e48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e4c:	0202      	lsls	r2, r0, #8
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	6849      	ldr	r1, [r1, #4]
 8007e52:	0849      	lsrs	r1, r1, #1
 8007e54:	2000      	movs	r0, #0
 8007e56:	460c      	mov	r4, r1
 8007e58:	4605      	mov	r5, r0
 8007e5a:	eb12 0804 	adds.w	r8, r2, r4
 8007e5e:	eb43 0905 	adc.w	r9, r3, r5
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	469a      	mov	sl, r3
 8007e6a:	4693      	mov	fp, r2
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fa9c 	bl	80003b0 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e86:	d308      	bcc.n	8007e9a <UART_SetConfig+0x79a>
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e8e:	d204      	bcs.n	8007e9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e17e      	b.n	8008198 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ea0:	e17a      	b.n	8008198 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eaa:	f040 80c7 	bne.w	800803c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8007eae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	dc48      	bgt.n	8007f48 <UART_SetConfig+0x848>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	db7b      	blt.n	8007fb2 <UART_SetConfig+0x8b2>
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d879      	bhi.n	8007fb2 <UART_SetConfig+0x8b2>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <UART_SetConfig+0x7c4>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007f57 	.word	0x08007f57
 8007ecc:	08007fb3 	.word	0x08007fb3
 8007ed0:	08007fb3 	.word	0x08007fb3
 8007ed4:	08007f5f 	.word	0x08007f5f
 8007ed8:	08007fb3 	.word	0x08007fb3
 8007edc:	08007fb3 	.word	0x08007fb3
 8007ee0:	08007fb3 	.word	0x08007fb3
 8007ee4:	08007f6f 	.word	0x08007f6f
 8007ee8:	08007fb3 	.word	0x08007fb3
 8007eec:	08007fb3 	.word	0x08007fb3
 8007ef0:	08007fb3 	.word	0x08007fb3
 8007ef4:	08007fb3 	.word	0x08007fb3
 8007ef8:	08007fb3 	.word	0x08007fb3
 8007efc:	08007fb3 	.word	0x08007fb3
 8007f00:	08007fb3 	.word	0x08007fb3
 8007f04:	08007f7f 	.word	0x08007f7f
 8007f08:	08007fb3 	.word	0x08007fb3
 8007f0c:	08007fb3 	.word	0x08007fb3
 8007f10:	08007fb3 	.word	0x08007fb3
 8007f14:	08007fb3 	.word	0x08007fb3
 8007f18:	08007fb3 	.word	0x08007fb3
 8007f1c:	08007fb3 	.word	0x08007fb3
 8007f20:	08007fb3 	.word	0x08007fb3
 8007f24:	08007fb3 	.word	0x08007fb3
 8007f28:	08007fb3 	.word	0x08007fb3
 8007f2c:	08007fb3 	.word	0x08007fb3
 8007f30:	08007fb3 	.word	0x08007fb3
 8007f34:	08007fb3 	.word	0x08007fb3
 8007f38:	08007fb3 	.word	0x08007fb3
 8007f3c:	08007fb3 	.word	0x08007fb3
 8007f40:	08007fb3 	.word	0x08007fb3
 8007f44:	08007fa5 	.word	0x08007fa5
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d02e      	beq.n	8007faa <UART_SetConfig+0x8aa>
 8007f4c:	e031      	b.n	8007fb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4e:	f7fd fc49 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8007f52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f54:	e033      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f56:	f7fd fc5b 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 8007f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f5c:	e02f      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fc08 	bl	8006778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f6c:	e027      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fd54 	bl	8006a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f7c:	e01f      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7e:	4b2e      	ldr	r3, [pc, #184]	; (8008038 <UART_SetConfig+0x938>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f8a:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <UART_SetConfig+0x938>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	08db      	lsrs	r3, r3, #3
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	4a25      	ldr	r2, [pc, #148]	; (800802c <UART_SetConfig+0x92c>)
 8007f96:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f9c:	e00f      	b.n	8007fbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f9e:	4b23      	ldr	r3, [pc, #140]	; (800802c <UART_SetConfig+0x92c>)
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa2:	e00c      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fa4:	4b22      	ldr	r3, [pc, #136]	; (8008030 <UART_SetConfig+0x930>)
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa8:	e009      	b.n	8007fbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb0:	e005      	b.n	8007fbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80e9 	beq.w	8008198 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <UART_SetConfig+0x934>)
 8007fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd8:	005a      	lsls	r2, r3, #1
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	441a      	add	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	2b0f      	cmp	r3, #15
 8007ff2:	d916      	bls.n	8008022 <UART_SetConfig+0x922>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffa:	d212      	bcs.n	8008022 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	b29a      	uxth	r2, r3
 8008012:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008014:	4313      	orrs	r3, r2
 8008016:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	e0ba      	b.n	8008198 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008028:	e0b6      	b.n	8008198 <UART_SetConfig+0xa98>
 800802a:	bf00      	nop
 800802c:	03d09000 	.word	0x03d09000
 8008030:	003d0900 	.word	0x003d0900
 8008034:	08023210 	.word	0x08023210
 8008038:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800803c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008040:	2b20      	cmp	r3, #32
 8008042:	dc49      	bgt.n	80080d8 <UART_SetConfig+0x9d8>
 8008044:	2b00      	cmp	r3, #0
 8008046:	db7c      	blt.n	8008142 <UART_SetConfig+0xa42>
 8008048:	2b20      	cmp	r3, #32
 800804a:	d87a      	bhi.n	8008142 <UART_SetConfig+0xa42>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x954>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	080080df 	.word	0x080080df
 8008058:	080080e7 	.word	0x080080e7
 800805c:	08008143 	.word	0x08008143
 8008060:	08008143 	.word	0x08008143
 8008064:	080080ef 	.word	0x080080ef
 8008068:	08008143 	.word	0x08008143
 800806c:	08008143 	.word	0x08008143
 8008070:	08008143 	.word	0x08008143
 8008074:	080080ff 	.word	0x080080ff
 8008078:	08008143 	.word	0x08008143
 800807c:	08008143 	.word	0x08008143
 8008080:	08008143 	.word	0x08008143
 8008084:	08008143 	.word	0x08008143
 8008088:	08008143 	.word	0x08008143
 800808c:	08008143 	.word	0x08008143
 8008090:	08008143 	.word	0x08008143
 8008094:	0800810f 	.word	0x0800810f
 8008098:	08008143 	.word	0x08008143
 800809c:	08008143 	.word	0x08008143
 80080a0:	08008143 	.word	0x08008143
 80080a4:	08008143 	.word	0x08008143
 80080a8:	08008143 	.word	0x08008143
 80080ac:	08008143 	.word	0x08008143
 80080b0:	08008143 	.word	0x08008143
 80080b4:	08008143 	.word	0x08008143
 80080b8:	08008143 	.word	0x08008143
 80080bc:	08008143 	.word	0x08008143
 80080c0:	08008143 	.word	0x08008143
 80080c4:	08008143 	.word	0x08008143
 80080c8:	08008143 	.word	0x08008143
 80080cc:	08008143 	.word	0x08008143
 80080d0:	08008143 	.word	0x08008143
 80080d4:	08008135 	.word	0x08008135
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d02e      	beq.n	800813a <UART_SetConfig+0xa3a>
 80080dc:	e031      	b.n	8008142 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080de:	f7fd fb81 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80080e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080e4:	e033      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e6:	f7fd fb93 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 80080ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080ec:	e02f      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fb40 	bl	8006778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fc:	e027      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080fe:	f107 0318 	add.w	r3, r7, #24
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fc8c 	bl	8006a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e01f      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800810e:	4b2d      	ldr	r3, [pc, #180]	; (80081c4 <UART_SetConfig+0xac4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800811a:	4b2a      	ldr	r3, [pc, #168]	; (80081c4 <UART_SetConfig+0xac4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	08db      	lsrs	r3, r3, #3
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <UART_SetConfig+0xac8>)
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800812c:	e00f      	b.n	800814e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800812e:	4b26      	ldr	r3, [pc, #152]	; (80081c8 <UART_SetConfig+0xac8>)
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008132:	e00c      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008134:	4b25      	ldr	r3, [pc, #148]	; (80081cc <UART_SetConfig+0xacc>)
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008138:	e009      	b.n	800814e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008140:	e005      	b.n	800814e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800814c:	bf00      	nop
    }

    if (pclk != 0U)
 800814e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d021      	beq.n	8008198 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	4a1d      	ldr	r2, [pc, #116]	; (80081d0 <UART_SetConfig+0xad0>)
 800815a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800815e:	461a      	mov	r2, r3
 8008160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008162:	fbb3 f2f2 	udiv	r2, r3, r2
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	085b      	lsrs	r3, r3, #1
 800816c:	441a      	add	r2, r3
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	b29b      	uxth	r3, r3
 8008178:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	2b0f      	cmp	r3, #15
 800817e:	d908      	bls.n	8008192 <UART_SetConfig+0xa92>
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008186:	d204      	bcs.n	8008192 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	e002      	b.n	8008198 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2201      	movs	r2, #1
 800819c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2200      	movs	r2, #0
 80081ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2200      	movs	r2, #0
 80081b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80081b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3748      	adds	r7, #72	; 0x48
 80081bc:	46bd      	mov	sp, r7
 80081be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400
 80081c8:	03d09000 	.word	0x03d09000
 80081cc:	003d0900 	.word	0x003d0900
 80081d0:	08023210 	.word	0x08023210

080081d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01a      	beq.n	80082ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d2:	d10a      	bne.n	80082ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	605a      	str	r2, [r3, #4]
  }
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af02      	add	r7, sp, #8
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008328:	f7fa f828 	bl	800237c <HAL_GetTick>
 800832c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b08      	cmp	r3, #8
 800833a:	d10e      	bne.n	800835a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800833c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f82f 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e025      	b.n	80083a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b04      	cmp	r3, #4
 8008366:	d10e      	bne.n	8008386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f819 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e00f      	b.n	80083a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083be:	e062      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d05e      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c8:	f7f9 ffd8 	bl	800237c <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d302      	bcc.n	80083de <UART_WaitOnFlagUntilTimeout+0x30>
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d11d      	bne.n	800841a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0201 	bic.w	r2, r2, #1
 80083fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e045      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d02e      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008436:	d126      	bne.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008440:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008450:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e00f      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4013      	ands	r3, r2
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d08d      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e027      	b.n	8008514 <HAL_UARTEx_DisableFifoMode+0x66>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2224      	movs	r2, #36	; 0x24
 80084d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0201 	bic.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008534:	2302      	movs	r3, #2
 8008536:	e02d      	b.n	8008594 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2224      	movs	r2, #36	; 0x24
 8008544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f84f 	bl	8008618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e02d      	b.n	8008610 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2224      	movs	r2, #36	; 0x24
 80085c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0201 	bic.w	r2, r2, #1
 80085da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f811 	bl	8008618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008624:	2b00      	cmp	r3, #0
 8008626:	d108      	bne.n	800863a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008638:	e031      	b.n	800869e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800863a:	2310      	movs	r3, #16
 800863c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800863e:	2310      	movs	r3, #16
 8008640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	0e5b      	lsrs	r3, r3, #25
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	0f5b      	lsrs	r3, r3, #29
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	7b3a      	ldrb	r2, [r7, #12]
 8008666:	4911      	ldr	r1, [pc, #68]	; (80086ac <UARTEx_SetNbDataToProcess+0x94>)
 8008668:	5c8a      	ldrb	r2, [r1, r2]
 800866a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800866e:	7b3a      	ldrb	r2, [r7, #12]
 8008670:	490f      	ldr	r1, [pc, #60]	; (80086b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008674:	fb93 f3f2 	sdiv	r3, r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	7b7a      	ldrb	r2, [r7, #13]
 8008684:	4909      	ldr	r1, [pc, #36]	; (80086ac <UARTEx_SetNbDataToProcess+0x94>)
 8008686:	5c8a      	ldrb	r2, [r1, r2]
 8008688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800868c:	7b7a      	ldrb	r2, [r7, #13]
 800868e:	4908      	ldr	r1, [pc, #32]	; (80086b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008692:	fb93 f3f2 	sdiv	r3, r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	08023228 	.word	0x08023228
 80086b0:	08023230 	.word	0x08023230

080086b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b08c      	sub	sp, #48	; 0x30
 80086b8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80086ba:	2100      	movs	r1, #0
 80086bc:	2000      	movs	r0, #0
 80086be:	f012 fbab 	bl	801ae18 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <MX_LWIP_Init+0x90>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80086c8:	4b1f      	ldr	r3, [pc, #124]	; (8008748 <MX_LWIP_Init+0x94>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80086ce:	4b1f      	ldr	r3, [pc, #124]	; (800874c <MX_LWIP_Init+0x98>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80086d4:	4b1e      	ldr	r3, [pc, #120]	; (8008750 <MX_LWIP_Init+0x9c>)
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	4b1e      	ldr	r3, [pc, #120]	; (8008754 <MX_LWIP_Init+0xa0>)
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	2300      	movs	r3, #0
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4b1a      	ldr	r3, [pc, #104]	; (800874c <MX_LWIP_Init+0x98>)
 80086e2:	4a19      	ldr	r2, [pc, #100]	; (8008748 <MX_LWIP_Init+0x94>)
 80086e4:	4917      	ldr	r1, [pc, #92]	; (8008744 <MX_LWIP_Init+0x90>)
 80086e6:	481c      	ldr	r0, [pc, #112]	; (8008758 <MX_LWIP_Init+0xa4>)
 80086e8:	f00a febc 	bl	8013464 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80086ec:	481a      	ldr	r0, [pc, #104]	; (8008758 <MX_LWIP_Init+0xa4>)
 80086ee:	f00b f873 	bl	80137d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <MX_LWIP_Init+0xa4>)
 80086f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086f8:	089b      	lsrs	r3, r3, #2
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008704:	4814      	ldr	r0, [pc, #80]	; (8008758 <MX_LWIP_Init+0xa4>)
 8008706:	f00b f877 	bl	80137f8 <netif_set_up>
 800870a:	e002      	b.n	8008712 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800870c:	4812      	ldr	r0, [pc, #72]	; (8008758 <MX_LWIP_Init+0xa4>)
 800870e:	f00b f8df 	bl	80138d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008712:	4912      	ldr	r1, [pc, #72]	; (800875c <MX_LWIP_Init+0xa8>)
 8008714:	4810      	ldr	r0, [pc, #64]	; (8008758 <MX_LWIP_Init+0xa4>)
 8008716:	f00b f975 	bl	8013a04 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800871a:	4b11      	ldr	r3, [pc, #68]	; (8008760 <MX_LWIP_Init+0xac>)
 800871c:	1d3c      	adds	r4, r7, #4
 800871e:	461d      	mov	r5, r3
 8008720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800872c:	1d3b      	adds	r3, r7, #4
 800872e:	490a      	ldr	r1, [pc, #40]	; (8008758 <MX_LWIP_Init+0xa4>)
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fce6 	bl	8009102 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008736:	4808      	ldr	r0, [pc, #32]	; (8008758 <MX_LWIP_Init+0xa4>)
 8008738:	f006 f974 	bl	800ea24 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800873c:	bf00      	nop
 800873e:	3720      	adds	r7, #32
 8008740:	46bd      	mov	sp, r7
 8008742:	bdb0      	pop	{r4, r5, r7, pc}
 8008744:	240007a8 	.word	0x240007a8
 8008748:	240007ac 	.word	0x240007ac
 800874c:	240007b0 	.word	0x240007b0
 8008750:	0801ad29 	.word	0x0801ad29
 8008754:	08008e4d 	.word	0x08008e4d
 8008758:	24000770 	.word	0x24000770
 800875c:	08008765 	.word	0x08008765
 8008760:	0801f6a0 	.word	0x0801f6a0

08008764 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08e      	sub	sp, #56	; 0x38
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	60da      	str	r2, [r3, #12]
 800878e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a69      	ldr	r2, [pc, #420]	; (800893c <HAL_ETH_MspInit+0x1c4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f040 80cb 	bne.w	8008932 <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800879c:	4b68      	ldr	r3, [pc, #416]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 800879e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087a2:	4a67      	ldr	r2, [pc, #412]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087ac:	4b64      	ldr	r3, [pc, #400]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b6:	623b      	str	r3, [r7, #32]
 80087b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80087ba:	4b61      	ldr	r3, [pc, #388]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087c0:	4a5f      	ldr	r2, [pc, #380]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087ca:	4b5d      	ldr	r3, [pc, #372]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80087d8:	4b59      	ldr	r3, [pc, #356]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087de:	4a58      	ldr	r2, [pc, #352]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087e8:	4b55      	ldr	r3, [pc, #340]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087f6:	4b52      	ldr	r3, [pc, #328]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087fc:	4a50      	ldr	r2, [pc, #320]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 80087fe:	f043 0304 	orr.w	r3, r3, #4
 8008802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008806:	4b4e      	ldr	r3, [pc, #312]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008814:	4b4a      	ldr	r3, [pc, #296]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800881a:	4a49      	ldr	r2, [pc, #292]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008824:	4b46      	ldr	r3, [pc, #280]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008832:	4b43      	ldr	r3, [pc, #268]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008838:	4a41      	ldr	r2, [pc, #260]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 800883a:	f043 0302 	orr.w	r3, r3, #2
 800883e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008842:	4b3f      	ldr	r3, [pc, #252]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008850:	4b3b      	ldr	r3, [pc, #236]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008856:	4a3a      	ldr	r2, [pc, #232]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800885c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008860:	4b37      	ldr	r3, [pc, #220]	; (8008940 <HAL_ETH_MspInit+0x1c8>)
 8008862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800886e:	2302      	movs	r3, #2
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008872:	2302      	movs	r3, #2
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008876:	2300      	movs	r3, #0
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800887a:	2300      	movs	r3, #0
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800887e:	230b      	movs	r3, #11
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008886:	4619      	mov	r1, r3
 8008888:	482e      	ldr	r0, [pc, #184]	; (8008944 <HAL_ETH_MspInit+0x1cc>)
 800888a:	f7fb fdeb 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800888e:	2386      	movs	r3, #134	; 0x86
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008892:	2302      	movs	r3, #2
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008896:	2300      	movs	r3, #0
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889a:	2303      	movs	r3, #3
 800889c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800889e:	230b      	movs	r3, #11
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a6:	4619      	mov	r1, r3
 80088a8:	4827      	ldr	r0, [pc, #156]	; (8008948 <HAL_ETH_MspInit+0x1d0>)
 80088aa:	f7fb fddb 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80088ae:	2330      	movs	r3, #48	; 0x30
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b2:	2302      	movs	r3, #2
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ba:	2303      	movs	r3, #3
 80088bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088be:	230b      	movs	r3, #11
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c6:	4619      	mov	r1, r3
 80088c8:	481e      	ldr	r0, [pc, #120]	; (8008944 <HAL_ETH_MspInit+0x1cc>)
 80088ca:	f7fb fdcb 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80088ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d4:	2302      	movs	r3, #2
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088dc:	2303      	movs	r3, #3
 80088de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088e0:	230b      	movs	r3, #11
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088e8:	4619      	mov	r1, r3
 80088ea:	4818      	ldr	r0, [pc, #96]	; (800894c <HAL_ETH_MspInit+0x1d4>)
 80088ec:	f7fb fdba 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80088f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f6:	2302      	movs	r3, #2
 80088f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088fe:	2303      	movs	r3, #3
 8008900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008902:	230b      	movs	r3, #11
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800890a:	4619      	mov	r1, r3
 800890c:	4810      	ldr	r0, [pc, #64]	; (8008950 <HAL_ETH_MspInit+0x1d8>)
 800890e:	f7fb fda9 	bl	8004464 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008912:	2200      	movs	r2, #0
 8008914:	2105      	movs	r1, #5
 8008916:	203d      	movs	r0, #61	; 0x3d
 8008918:	f7f9 fe14 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800891c:	203d      	movs	r0, #61	; 0x3d
 800891e:	f7f9 fe2b 	bl	8002578 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008922:	2200      	movs	r2, #0
 8008924:	2105      	movs	r1, #5
 8008926:	203e      	movs	r0, #62	; 0x3e
 8008928:	f7f9 fe0c 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800892c:	203e      	movs	r0, #62	; 0x3e
 800892e:	f7f9 fe23 	bl	8002578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008932:	bf00      	nop
 8008934:	3738      	adds	r7, #56	; 0x38
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40028000 	.word	0x40028000
 8008940:	58024400 	.word	0x58024400
 8008944:	58020800 	.word	0x58020800
 8008948:	58020000 	.word	0x58020000
 800894c:	58020400 	.word	0x58020400
 8008950:	58021800 	.word	0x58021800

08008954 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <HAL_ETH_RxCpltCallback+0x1c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fd57 	bl	8009414 <osSemaphoreRelease>
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	240007b4 	.word	0x240007b4

08008974 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008974:	b5b0      	push	{r4, r5, r7, lr}
 8008976:	b0ac      	sub	sp, #176	; 0xb0
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800898e:	4b91      	ldr	r3, [pc, #580]	; (8008bd4 <low_level_init+0x260>)
 8008990:	4a91      	ldr	r2, [pc, #580]	; (8008bd8 <low_level_init+0x264>)
 8008992:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008994:	2300      	movs	r3, #0
 8008996:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800899a:	2380      	movs	r3, #128	; 0x80
 800899c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80089a0:	23e1      	movs	r3, #225	; 0xe1
 80089a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80089b8:	4a86      	ldr	r2, [pc, #536]	; (8008bd4 <low_level_init+0x260>)
 80089ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089be:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80089c0:	4b84      	ldr	r3, [pc, #528]	; (8008bd4 <low_level_init+0x260>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80089c6:	4b83      	ldr	r3, [pc, #524]	; (8008bd4 <low_level_init+0x260>)
 80089c8:	4a84      	ldr	r2, [pc, #528]	; (8008bdc <low_level_init+0x268>)
 80089ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80089cc:	4b81      	ldr	r3, [pc, #516]	; (8008bd4 <low_level_init+0x260>)
 80089ce:	4a84      	ldr	r2, [pc, #528]	; (8008be0 <low_level_init+0x26c>)
 80089d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80089d2:	4b80      	ldr	r3, [pc, #512]	; (8008bd4 <low_level_init+0x260>)
 80089d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80089d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80089da:	487e      	ldr	r0, [pc, #504]	; (8008bd4 <low_level_init+0x260>)
 80089dc:	f7f9 fe6a 	bl	80026b4 <HAL_ETH_Init>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80089e6:	2234      	movs	r2, #52	; 0x34
 80089e8:	2100      	movs	r1, #0
 80089ea:	487e      	ldr	r0, [pc, #504]	; (8008be4 <low_level_init+0x270>)
 80089ec:	f013 f920 	bl	801bc30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80089f0:	4b7c      	ldr	r3, [pc, #496]	; (8008be4 <low_level_init+0x270>)
 80089f2:	2221      	movs	r2, #33	; 0x21
 80089f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80089f6:	4b7b      	ldr	r3, [pc, #492]	; (8008be4 <low_level_init+0x270>)
 80089f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80089fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80089fe:	4b79      	ldr	r3, [pc, #484]	; (8008be4 <low_level_init+0x270>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008a04:	4878      	ldr	r0, [pc, #480]	; (8008be8 <low_level_init+0x274>)
 8008a06:	f00a fb4d 	bl	80130a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2206      	movs	r2, #6
 8008a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008a12:	4b70      	ldr	r3, [pc, #448]	; (8008bd4 <low_level_init+0x260>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008a1e:	4b6d      	ldr	r3, [pc, #436]	; (8008bd4 <low_level_init+0x260>)
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	785a      	ldrb	r2, [r3, #1]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008a2a:	4b6a      	ldr	r3, [pc, #424]	; (8008bd4 <low_level_init+0x260>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	789a      	ldrb	r2, [r3, #2]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008a36:	4b67      	ldr	r3, [pc, #412]	; (8008bd4 <low_level_init+0x260>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	78da      	ldrb	r2, [r3, #3]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008a42:	4b64      	ldr	r3, [pc, #400]	; (8008bd4 <low_level_init+0x260>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	791a      	ldrb	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008a4e:	4b61      	ldr	r3, [pc, #388]	; (8008bd4 <low_level_init+0x260>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	795a      	ldrb	r2, [r3, #5]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008a60:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a68:	f043 030a 	orr.w	r3, r3, #10
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008a74:	2300      	movs	r3, #0
 8008a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a7a:	e012      	b.n	8008aa2 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8008a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	4a58      	ldr	r2, [pc, #352]	; (8008bec <low_level_init+0x278>)
 8008a8a:	441a      	add	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008a92:	4850      	ldr	r0, [pc, #320]	; (8008bd4 <low_level_init+0x260>)
 8008a94:	f7f9 feea 	bl	800286c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d9e8      	bls.n	8008a7c <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aae:	2300      	movs	r3, #0
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8008ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fc2b 	bl	8009314 <osSemaphoreCreate>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a4b      	ldr	r2, [pc, #300]	; (8008bf0 <low_level_init+0x27c>)
 8008ac2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008ac4:	4b4b      	ldr	r3, [pc, #300]	; (8008bf4 <low_level_init+0x280>)
 8008ac6:	f107 040c 	add.w	r4, r7, #12
 8008aca:	461d      	mov	r5, r3
 8008acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008ad8:	f107 030c 	add.w	r3, r7, #12
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fb0f 	bl	8009102 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008ae4:	4944      	ldr	r1, [pc, #272]	; (8008bf8 <low_level_init+0x284>)
 8008ae6:	4845      	ldr	r0, [pc, #276]	; (8008bfc <low_level_init+0x288>)
 8008ae8:	f7f9 fa97 	bl	800201a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008aec:	4843      	ldr	r0, [pc, #268]	; (8008bfc <low_level_init+0x288>)
 8008aee:	f7f9 fac6 	bl	800207e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008af2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d165      	bne.n	8008bc6 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008afa:	4840      	ldr	r0, [pc, #256]	; (8008bfc <low_level_init+0x288>)
 8008afc:	f7f9 fb67 	bl	80021ce <LAN8742_GetLinkState>
 8008b00:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	dc06      	bgt.n	8008b1a <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f00a ff49 	bl	80139a4 <netif_set_link_down>
      netif_set_down(netif);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f00a fedc 	bl	80138d0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008b18:	e057      	b.n	8008bca <low_level_init+0x256>
      switch (PHYLinkState)
 8008b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b1e:	3b02      	subs	r3, #2
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d82b      	bhi.n	8008b7c <low_level_init+0x208>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <low_level_init+0x1b8>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b4f 	.word	0x08008b4f
 8008b34:	08008b5f 	.word	0x08008b5f
 8008b38:	08008b6f 	.word	0x08008b6f
        duplex = ETH_FULLDUPLEX_MODE;
 8008b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008b4c:	e01f      	b.n	8008b8e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008b5c:	e017      	b.n	8008b8e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008b66:	2300      	movs	r3, #0
 8008b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008b6c:	e00f      	b.n	8008b8e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008b7a:	e008      	b.n	8008b8e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008b8c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b92:	4619      	mov	r1, r3
 8008b94:	480f      	ldr	r0, [pc, #60]	; (8008bd4 <low_level_init+0x260>)
 8008b96:	f7fa fc61 	bl	800345c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b9e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8008ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008ba6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008baa:	4619      	mov	r1, r3
 8008bac:	4809      	ldr	r0, [pc, #36]	; (8008bd4 <low_level_init+0x260>)
 8008bae:	f7fa fe29 	bl	8003804 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008bb2:	4808      	ldr	r0, [pc, #32]	; (8008bd4 <low_level_init+0x260>)
 8008bb4:	f7f9 fe9b 	bl	80028ee <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f00a fe1d 	bl	80137f8 <netif_set_up>
    netif_set_link_up(netif);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f00a feb8 	bl	8013934 <netif_set_link_up>
}
 8008bc4:	e001      	b.n	8008bca <low_level_init+0x256>
    Error_Handler();
 8008bc6:	f7f8 ff8d 	bl	8001ae4 <Error_Handler>
}
 8008bca:	bf00      	nop
 8008bcc:	37b0      	adds	r7, #176	; 0xb0
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	240007b8 	.word	0x240007b8
 8008bd8:	40028000 	.word	0x40028000
 8008bdc:	30040060 	.word	0x30040060
 8008be0:	30040000 	.word	0x30040000
 8008be4:	24000840 	.word	0x24000840
 8008be8:	08023238 	.word	0x08023238
 8008bec:	30040200 	.word	0x30040200
 8008bf0:	240007b4 	.word	0x240007b4
 8008bf4:	0801f6c4 	.word	0x0801f6c4
 8008bf8:	24000010 	.word	0x24000010
 8008bfc:	24000944 	.word	0x24000944

08008c00 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b092      	sub	sp, #72	; 0x48
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008c14:	f107 030c 	add.w	r3, r7, #12
 8008c18:	2230      	movs	r2, #48	; 0x30
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f013 f807 	bl	801bc30 <memset>

  for(q = p; q != NULL; q = q->next)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	643b      	str	r3, [r7, #64]	; 0x40
 8008c26:	e045      	b.n	8008cb4 <low_level_output+0xb4>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d902      	bls.n	8008c34 <low_level_output+0x34>
      return ERR_IF;
 8008c2e:	f06f 030b 	mvn.w	r3, #11
 8008c32:	e052      	b.n	8008cda <low_level_output+0xda>

    Txbuffer[i].buffer = q->payload;
 8008c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c36:	6859      	ldr	r1, [r3, #4]
 8008c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	3348      	adds	r3, #72	; 0x48
 8008c44:	443b      	add	r3, r7
 8008c46:	3b3c      	subs	r3, #60	; 0x3c
 8008c48:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4c:	895b      	ldrh	r3, [r3, #10]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c52:	4613      	mov	r3, r2
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	3348      	adds	r3, #72	; 0x48
 8008c5c:	443b      	add	r3, r7
 8008c5e:	3b38      	subs	r3, #56	; 0x38
 8008c60:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d011      	beq.n	8008c8c <low_level_output+0x8c>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6a:	1e5a      	subs	r2, r3, #1
 8008c6c:	f107 000c 	add.w	r0, r7, #12
 8008c70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c72:	460b      	mov	r3, r1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	440b      	add	r3, r1
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	18c1      	adds	r1, r0, r3
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	3348      	adds	r3, #72	; 0x48
 8008c86:	443b      	add	r3, r7
 8008c88:	3b34      	subs	r3, #52	; 0x34
 8008c8a:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <low_level_output+0xa8>
    {
      Txbuffer[i].next = NULL;
 8008c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c96:	4613      	mov	r3, r2
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	3348      	adds	r3, #72	; 0x48
 8008ca0:	443b      	add	r3, r7
 8008ca2:	3b34      	subs	r3, #52	; 0x34
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008caa:	3301      	adds	r3, #1
 8008cac:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1b6      	bne.n	8008c28 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	891b      	ldrh	r3, [r3, #8]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <low_level_output+0xe4>)
 8008cc2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008cc4:	4a07      	ldr	r2, [pc, #28]	; (8008ce4 <low_level_output+0xe4>)
 8008cc6:	f107 030c 	add.w	r3, r7, #12
 8008cca:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008ccc:	2214      	movs	r2, #20
 8008cce:	4905      	ldr	r1, [pc, #20]	; (8008ce4 <low_level_output+0xe4>)
 8008cd0:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <low_level_output+0xe8>)
 8008cd2:	f7f9 ff0d 	bl	8002af0 <HAL_ETH_Transmit>

  return errval;
 8008cd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3748      	adds	r7, #72	; 0x48
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	24000840 	.word	0x24000840
 8008ce8:	240007b8 	.word	0x240007b8

08008cec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b098      	sub	sp, #96	; 0x60
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60bb      	str	r3, [r7, #8]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008d00:	f107 030c 	add.w	r3, r7, #12
 8008d04:	2230      	movs	r2, #48	; 0x30
 8008d06:	2100      	movs	r1, #0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f012 ff91 	bl	801bc30 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
 8008d12:	e014      	b.n	8008d3e <low_level_input+0x52>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	f107 010c 	add.w	r1, r7, #12
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4419      	add	r1, r3
 8008d26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d28:	4613      	mov	r3, r2
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	3358      	adds	r3, #88	; 0x58
 8008d32:	443b      	add	r3, r7
 8008d34:	3b44      	subs	r3, #68	; 0x44
 8008d36:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d9e7      	bls.n	8008d14 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008d44:	f107 030c 	add.w	r3, r7, #12
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4828      	ldr	r0, [pc, #160]	; (8008dec <low_level_input+0x100>)
 8008d4c:	f7fa f84c 	bl	8002de8 <HAL_ETH_GetRxDataBuffer>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d145      	bne.n	8008de2 <low_level_input+0xf6>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4823      	ldr	r0, [pc, #140]	; (8008dec <low_level_input+0x100>)
 8008d5e:	f7fa f8e1 	bl	8002f24 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008d62:	4822      	ldr	r0, [pc, #136]	; (8008dec <low_level_input+0x100>)
 8008d64:	f7fa f911 	bl	8002f8a <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d6e:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd1d      	ble.n	8008db2 <low_level_input+0xc6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d78:	f003 021f 	and.w	r2, r3, #31
 8008d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7e:	4413      	add	r3, r2
 8008d80:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008d86:	f3bf 8f4f 	dsb	sy
}
 8008d8a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008d8c:	4a18      	ldr	r2, [pc, #96]	; (8008df0 <low_level_input+0x104>)
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	3320      	adds	r3, #32
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9c:	3b20      	subs	r3, #32
 8008d9e:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dcf2      	bgt.n	8008d8c <low_level_input+0xa0>
  __ASM volatile ("dsb 0xF":::"memory");
 8008da6:	f3bf 8f4f 	dsb	sy
}
 8008daa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008dac:	f3bf 8f6f 	isb	sy
}
 8008db0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008db2:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008db4:	480f      	ldr	r0, [pc, #60]	; (8008df4 <low_level_input+0x108>)
 8008db6:	f00a f9f1 	bl	801319c <memp_malloc_pool>
 8008dba:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8008dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00f      	beq.n	8008de2 <low_level_input+0xf6>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	4a0c      	ldr	r2, [pc, #48]	; (8008df8 <low_level_input+0x10c>)
 8008dc6:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	b299      	uxth	r1, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	9201      	str	r2, [sp, #4]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd8:	2241      	movs	r2, #65	; 0x41
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f00b f806 	bl	8013dec <pbuf_alloced_custom>
 8008de0:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8008de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3758      	adds	r7, #88	; 0x58
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	240007b8 	.word	0x240007b8
 8008df0:	e000ed00 	.word	0xe000ed00
 8008df4:	08023238 	.word	0x08023238
 8008df8:	08008ea9 	.word	0x08008ea9

08008dfc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <ethernetif_input+0x4c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fab1 	bl	8009378 <osSemaphoreWait>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f5      	bne.n	8008e08 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ff65 	bl	8008cec <low_level_input>
 8008e22:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	4798      	blx	r3
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008e3a:	68b8      	ldr	r0, [r7, #8]
 8008e3c:	f00b f990 	bl	8014160 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1ea      	bne.n	8008e1c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008e46:	e7df      	b.n	8008e08 <ethernetif_input+0xc>
 8008e48:	240007b4 	.word	0x240007b4

08008e4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <ethernetif_init+0x1c>
 8008e5a:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <ethernetif_init+0x48>)
 8008e5c:	f240 2253 	movw	r2, #595	; 0x253
 8008e60:	490d      	ldr	r1, [pc, #52]	; (8008e98 <ethernetif_init+0x4c>)
 8008e62:	480e      	ldr	r0, [pc, #56]	; (8008e9c <ethernetif_init+0x50>)
 8008e64:	f013 fb2e 	bl	801c4c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2273      	movs	r2, #115	; 0x73
 8008e6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2274      	movs	r2, #116	; 0x74
 8008e74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <ethernetif_init+0x54>)
 8008e7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a08      	ldr	r2, [pc, #32]	; (8008ea4 <ethernetif_init+0x58>)
 8008e82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff fd75 	bl	8008974 <low_level_init>

  return ERR_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	0801f6e0 	.word	0x0801f6e0
 8008e98:	0801f6fc 	.word	0x0801f6fc
 8008e9c:	0801f70c 	.word	0x0801f70c
 8008ea0:	080108f1 	.word	0x080108f1
 8008ea4:	08008c01 	.word	0x08008c01

08008ea8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008eb4:	68f9      	ldr	r1, [r7, #12]
 8008eb6:	4803      	ldr	r0, [pc, #12]	; (8008ec4 <pbuf_free_custom+0x1c>)
 8008eb8:	f00a f9e4 	bl	8013284 <memp_free_pool>
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	08023238 	.word	0x08023238

08008ec8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ecc:	f7f9 fa56 	bl	800237c <HAL_GetTick>
 8008ed0:	4603      	mov	r3, r0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008edc:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <ETH_PHY_IO_Init+0x10>)
 8008ede:	f7fa fcab 	bl	8003838 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	240007b8 	.word	0x240007b8

08008eec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  return 0;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	68f9      	ldr	r1, [r7, #12]
 8008f0e:	4807      	ldr	r0, [pc, #28]	; (8008f2c <ETH_PHY_IO_ReadReg+0x30>)
 8008f10:	f7fa f9fc 	bl	800330c <HAL_ETH_ReadPHYRegister>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	e000      	b.n	8008f22 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	240007b8 	.word	0x240007b8

08008f30 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	68f9      	ldr	r1, [r7, #12]
 8008f42:	4807      	ldr	r0, [pc, #28]	; (8008f60 <ETH_PHY_IO_WriteReg+0x30>)
 8008f44:	f7fa fa36 	bl	80033b4 <HAL_ETH_WritePHYRegister>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	e000      	b.n	8008f56 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	240007b8 	.word	0x240007b8

08008f64 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008f68:	f7f9 fa08 	bl	800237c <HAL_GetTick>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b0a0      	sub	sp, #128	; 0x80
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f80:	2300      	movs	r3, #0
 8008f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f84:	2300      	movs	r3, #0
 8008f86:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008f8c:	483a      	ldr	r0, [pc, #232]	; (8009078 <ethernet_link_thread+0x104>)
 8008f8e:	f7f9 f91e 	bl	80021ce <LAN8742_GetLinkState>
 8008f92:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f9a:	089b      	lsrs	r3, r3, #2
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00c      	beq.n	8008fc0 <ethernet_link_thread+0x4c>
 8008fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	dc09      	bgt.n	8008fc0 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8008fac:	4833      	ldr	r0, [pc, #204]	; (800907c <ethernet_link_thread+0x108>)
 8008fae:	f7f9 fd25 	bl	80029fc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008fb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008fb4:	f00a fc8c 	bl	80138d0 <netif_set_down>
    netif_set_link_down(netif);
 8008fb8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008fba:	f00a fcf3 	bl	80139a4 <netif_set_link_down>
 8008fbe:	e056      	b.n	800906e <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d14f      	bne.n	800906e <ethernet_link_thread+0xfa>
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	dd4c      	ble.n	800906e <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 8008fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd6:	3b02      	subs	r3, #2
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d82b      	bhi.n	8009034 <ethernet_link_thread+0xc0>
 8008fdc:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <ethernet_link_thread+0x70>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08008ff5 	.word	0x08008ff5
 8008fe8:	08009007 	.word	0x08009007
 8008fec:	08009017 	.word	0x08009017
 8008ff0:	08009027 	.word	0x08009027
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ff8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008ffa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ffe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009000:	2301      	movs	r3, #1
 8009002:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009004:	e017      	b.n	8009036 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009006:	2300      	movs	r3, #0
 8009008:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800900a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800900e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009010:	2301      	movs	r3, #1
 8009012:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009014:	e00f      	b.n	8009036 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800901a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800901c:	2300      	movs	r3, #0
 800901e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009020:	2301      	movs	r3, #1
 8009022:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009024:	e007      	b.n	8009036 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009026:	2300      	movs	r3, #0
 8009028:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800902a:	2300      	movs	r3, #0
 800902c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009032:	e000      	b.n	8009036 <ethernet_link_thread+0xc2>
    default:
      break;
 8009034:	bf00      	nop
    }

    if(linkchanged)
 8009036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d018      	beq.n	800906e <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	4619      	mov	r1, r3
 8009042:	480e      	ldr	r0, [pc, #56]	; (800907c <ethernet_link_thread+0x108>)
 8009044:	f7fa fa0a 	bl	800345c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800904a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800904c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4619      	mov	r1, r3
 8009056:	4809      	ldr	r0, [pc, #36]	; (800907c <ethernet_link_thread+0x108>)
 8009058:	f7fa fbd4 	bl	8003804 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800905c:	4807      	ldr	r0, [pc, #28]	; (800907c <ethernet_link_thread+0x108>)
 800905e:	f7f9 fc46 	bl	80028ee <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009062:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009064:	f00a fbc8 	bl	80137f8 <netif_set_up>
      netif_set_link_up(netif);
 8009068:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800906a:	f00a fc63 	bl	8013934 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800906e:	2064      	movs	r0, #100	; 0x64
 8009070:	f000 f89f 	bl	80091b2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009074:	e78a      	b.n	8008f8c <ethernet_link_thread+0x18>
 8009076:	bf00      	nop
 8009078:	24000944 	.word	0x24000944
 800907c:	240007b8 	.word	0x240007b8

08009080 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800908e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009092:	2b84      	cmp	r3, #132	; 0x84
 8009094:	d005      	beq.n	80090a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	3303      	adds	r3, #3
 80090a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b6:	f3ef 8305 	mrs	r3, IPSR
 80090ba:	607b      	str	r3, [r7, #4]
  return(result);
 80090bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf14      	ite	ne
 80090c2:	2301      	movne	r3, #1
 80090c4:	2300      	moveq	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80090d8:	f002 f9f8 	bl	800b4cc <vTaskStartScheduler>
  
  return osOK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80090e6:	f7ff ffe3 	bl	80090b0 <inHandlerMode>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80090f0:	f002 fb06 	bl	800b700 <xTaskGetTickCountFromISR>
 80090f4:	4603      	mov	r3, r0
 80090f6:	e002      	b.n	80090fe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80090f8:	f002 faf2 	bl	800b6e0 <xTaskGetTickCount>
 80090fc:	4603      	mov	r3, r0
  }
}
 80090fe:	4618      	mov	r0, r3
 8009100:	bd80      	pop	{r7, pc}

08009102 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009104:	b089      	sub	sp, #36	; 0x24
 8009106:	af04      	add	r7, sp, #16
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d020      	beq.n	8009156 <osThreadCreate+0x54>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01c      	beq.n	8009156 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685c      	ldr	r4, [r3, #4]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681d      	ldr	r5, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691e      	ldr	r6, [r3, #16]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ffa6 	bl	8009080 <makeFreeRtosPriority>
 8009134:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800913e:	9202      	str	r2, [sp, #8]
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	9100      	str	r1, [sp, #0]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	4632      	mov	r2, r6
 8009148:	4629      	mov	r1, r5
 800914a:	4620      	mov	r0, r4
 800914c:	f001 ff66 	bl	800b01c <xTaskCreateStatic>
 8009150:	4603      	mov	r3, r0
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e01c      	b.n	8009190 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685c      	ldr	r4, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009162:	b29e      	uxth	r6, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff ff88 	bl	8009080 <makeFreeRtosPriority>
 8009170:	4602      	mov	r2, r0
 8009172:	f107 030c 	add.w	r3, r7, #12
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	9200      	str	r2, [sp, #0]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	4632      	mov	r2, r6
 800917e:	4629      	mov	r1, r5
 8009180:	4620      	mov	r0, r4
 8009182:	f001 ffa8 	bl	800b0d6 <xTaskCreate>
 8009186:	4603      	mov	r3, r0
 8009188:	2b01      	cmp	r3, #1
 800918a:	d001      	beq.n	8009190 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	e000      	b.n	8009192 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009190:	68fb      	ldr	r3, [r7, #12]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800919a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f002 f8ce 	bl	800b344 <vTaskDelete>
  return osOK;
 80091a8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <osDelay+0x16>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	e000      	b.n	80091ca <osDelay+0x18>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f94a 	bl	800b464 <vTaskDelay>
  
  return osOK;
 80091d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	4619      	mov	r1, r3
 80091f0:	2001      	movs	r0, #1
 80091f2:	f001 f8b4 	bl	800a35e <xQueueCreateMutexStatic>
 80091f6:	4603      	mov	r3, r0
 80091f8:	e003      	b.n	8009202 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80091fa:	2001      	movs	r0, #1
 80091fc:	f001 f897 	bl	800a32e <xQueueCreateMutex>
 8009200:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <osMutexWait+0x18>
    return osErrorParameter;
 8009220:	2380      	movs	r3, #128	; 0x80
 8009222:	e03a      	b.n	800929a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922e:	d103      	bne.n	8009238 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	e009      	b.n	800924c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <osMutexWait+0x40>
      ticks = 1;
 8009248:	2301      	movs	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800924c:	f7ff ff30 	bl	80090b0 <inHandlerMode>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d017      	beq.n	8009286 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	461a      	mov	r2, r3
 800925c:	2100      	movs	r1, #0
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 fcaa 	bl	800abb8 <xQueueReceiveFromISR>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d001      	beq.n	800926e <osMutexWait+0x62>
      return osErrorOS;
 800926a:	23ff      	movs	r3, #255	; 0xff
 800926c:	e015      	b.n	800929a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d011      	beq.n	8009298 <osMutexWait+0x8c>
 8009274:	4b0b      	ldr	r3, [pc, #44]	; (80092a4 <osMutexWait+0x98>)
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	e008      	b.n	8009298 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fb89 	bl	800a9a0 <xQueueSemaphoreTake>
 800928e:	4603      	mov	r3, r0
 8009290:	2b01      	cmp	r3, #1
 8009292:	d001      	beq.n	8009298 <osMutexWait+0x8c>
    return osErrorOS;
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	e000      	b.n	800929a <osMutexWait+0x8e>
  }
  
  return osOK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80092b8:	f7ff fefa 	bl	80090b0 <inHandlerMode>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d016      	beq.n	80092f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f9fc 	bl	800a6c6 <xQueueGiveFromISR>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d001      	beq.n	80092d8 <osMutexRelease+0x30>
      return osErrorOS;
 80092d4:	23ff      	movs	r3, #255	; 0xff
 80092d6:	e017      	b.n	8009308 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d013      	beq.n	8009306 <osMutexRelease+0x5e>
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <osMutexRelease+0x68>)
 80092e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	e00a      	b.n	8009306 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80092f0:	2300      	movs	r3, #0
 80092f2:	2200      	movs	r2, #0
 80092f4:	2100      	movs	r1, #0
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f84c 	bl	800a394 <xQueueGenericSend>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d001      	beq.n	8009306 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009302:	23ff      	movs	r3, #255	; 0xff
 8009304:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009306:	68fb      	ldr	r3, [r7, #12]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af02      	add	r7, sp, #8
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00f      	beq.n	8009346 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d10a      	bne.n	8009342 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2203      	movs	r2, #3
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	2200      	movs	r2, #0
 8009336:	2100      	movs	r1, #0
 8009338:	2001      	movs	r0, #1
 800933a:	f000 ff0d 	bl	800a158 <xQueueGenericCreateStatic>
 800933e:	4603      	mov	r3, r0
 8009340:	e016      	b.n	8009370 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	e014      	b.n	8009370 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d110      	bne.n	800936e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800934c:	2203      	movs	r2, #3
 800934e:	2100      	movs	r1, #0
 8009350:	2001      	movs	r0, #1
 8009352:	f000 ff79 	bl	800a248 <xQueueGenericCreate>
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <osSemaphoreCreate+0x56>
 800935e:	2300      	movs	r3, #0
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f001 f815 	bl	800a394 <xQueueGenericSend>
      return sema;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	e000      	b.n	8009370 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800936e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009382:	2300      	movs	r3, #0
 8009384:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800938c:	2380      	movs	r3, #128	; 0x80
 800938e:	e03a      	b.n	8009406 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d103      	bne.n	80093a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e009      	b.n	80093b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80093b4:	2301      	movs	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80093b8:	f7ff fe7a 	bl	80090b0 <inHandlerMode>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d017      	beq.n	80093f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	461a      	mov	r2, r3
 80093c8:	2100      	movs	r1, #0
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 fbf4 	bl	800abb8 <xQueueReceiveFromISR>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d001      	beq.n	80093da <osSemaphoreWait+0x62>
      return osErrorOS;
 80093d6:	23ff      	movs	r3, #255	; 0xff
 80093d8:	e015      	b.n	8009406 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d011      	beq.n	8009404 <osSemaphoreWait+0x8c>
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <osSemaphoreWait+0x98>)
 80093e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	e008      	b.n	8009404 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 fad3 	bl	800a9a0 <xQueueSemaphoreTake>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d001      	beq.n	8009404 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009400:	23ff      	movs	r3, #255	; 0xff
 8009402:	e000      	b.n	8009406 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009424:	f7ff fe44 	bl	80090b0 <inHandlerMode>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d016      	beq.n	800945c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800942e:	f107 0308 	add.w	r3, r7, #8
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 f946 	bl	800a6c6 <xQueueGiveFromISR>
 800943a:	4603      	mov	r3, r0
 800943c:	2b01      	cmp	r3, #1
 800943e:	d001      	beq.n	8009444 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009440:	23ff      	movs	r3, #255	; 0xff
 8009442:	e017      	b.n	8009474 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <osSemaphoreRelease+0x5e>
 800944a:	4b0c      	ldr	r3, [pc, #48]	; (800947c <osSemaphoreRelease+0x68>)
 800944c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	e00a      	b.n	8009472 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800945c:	2300      	movs	r3, #0
 800945e:	2200      	movs	r2, #0
 8009460:	2100      	movs	r1, #0
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 ff96 	bl	800a394 <xQueueGenericSend>
 8009468:	4603      	mov	r3, r0
 800946a:	2b01      	cmp	r3, #1
 800946c:	d001      	beq.n	8009472 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800946e:	23ff      	movs	r3, #255	; 0xff
 8009470:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009488:	f7ff fe12 	bl	80090b0 <inHandlerMode>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009492:	2382      	movs	r3, #130	; 0x82
 8009494:	e003      	b.n	800949e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fc4a 	bl	800ad30 <vQueueDelete>

  return osOK; 
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80094a6:	b590      	push	{r4, r7, lr}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af02      	add	r7, sp, #8
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d011      	beq.n	80094dc <osMessageCreate+0x36>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6859      	ldr	r1, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2400      	movs	r4, #0
 80094d2:	9400      	str	r4, [sp, #0]
 80094d4:	f000 fe40 	bl	800a158 <xQueueGenericCreateStatic>
 80094d8:	4603      	mov	r3, r0
 80094da:	e008      	b.n	80094ee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	4619      	mov	r1, r3
 80094e8:	f000 feae 	bl	800a248 <xQueueGenericCreate>
 80094ec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd90      	pop	{r4, r7, pc}
	...

080094f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009504:	2300      	movs	r3, #0
 8009506:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <osMessagePut+0x1e>
    ticks = 1;
 8009512:	2301      	movs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009516:	f7ff fdcb 	bl	80090b0 <inHandlerMode>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d018      	beq.n	8009552 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009520:	f107 0210 	add.w	r2, r7, #16
 8009524:	f107 0108 	add.w	r1, r7, #8
 8009528:	2300      	movs	r3, #0
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f001 f830 	bl	800a590 <xQueueGenericSendFromISR>
 8009530:	4603      	mov	r3, r0
 8009532:	2b01      	cmp	r3, #1
 8009534:	d001      	beq.n	800953a <osMessagePut+0x42>
      return osErrorOS;
 8009536:	23ff      	movs	r3, #255	; 0xff
 8009538:	e018      	b.n	800956c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d014      	beq.n	800956a <osMessagePut+0x72>
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <osMessagePut+0x7c>)
 8009542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	e00b      	b.n	800956a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009552:	f107 0108 	add.w	r1, r7, #8
 8009556:	2300      	movs	r3, #0
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 ff1a 	bl	800a394 <xQueueGenericSend>
 8009560:	4603      	mov	r3, r0
 8009562:	2b01      	cmp	r3, #1
 8009564:	d001      	beq.n	800956a <osMessagePut+0x72>
      return osErrorOS;
 8009566:	23ff      	movs	r3, #255	; 0xff
 8009568:	e000      	b.n	800956c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009578:	b590      	push	{r4, r7, lr}
 800957a:	b08b      	sub	sp, #44	; 0x2c
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009592:	2380      	movs	r3, #128	; 0x80
 8009594:	617b      	str	r3, [r7, #20]
    return event;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	461c      	mov	r4, r3
 800959a:	f107 0314 	add.w	r3, r7, #20
 800959e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095a6:	e054      	b.n	8009652 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	d103      	bne.n	80095c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
 80095be:	e009      	b.n	80095d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <osMessageGet+0x5c>
      ticks = 1;
 80095d0:	2301      	movs	r3, #1
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80095d4:	f7ff fd6c 	bl	80090b0 <inHandlerMode>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01c      	beq.n	8009618 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80095de:	f107 0220 	add.w	r2, r7, #32
 80095e2:	f107 0314 	add.w	r3, r7, #20
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	68b8      	ldr	r0, [r7, #8]
 80095ec:	f001 fae4 	bl	800abb8 <xQueueReceiveFromISR>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d102      	bne.n	80095fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80095f6:	2310      	movs	r3, #16
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	e001      	b.n	8009600 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d01d      	beq.n	8009642 <osMessageGet+0xca>
 8009606:	4b15      	ldr	r3, [pc, #84]	; (800965c <osMessageGet+0xe4>)
 8009608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	e014      	b.n	8009642 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	3304      	adds	r3, #4
 800961e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009620:	4619      	mov	r1, r3
 8009622:	68b8      	ldr	r0, [r7, #8]
 8009624:	f001 f8dc 	bl	800a7e0 <xQueueReceive>
 8009628:	4603      	mov	r3, r0
 800962a:	2b01      	cmp	r3, #1
 800962c:	d102      	bne.n	8009634 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800962e:	2310      	movs	r3, #16
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e006      	b.n	8009642 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <osMessageGet+0xc6>
 800963a:	2300      	movs	r3, #0
 800963c:	e000      	b.n	8009640 <osMessageGet+0xc8>
 800963e:	2340      	movs	r3, #64	; 0x40
 8009640:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	461c      	mov	r4, r3
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800964e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	372c      	adds	r7, #44	; 0x2c
 8009656:	46bd      	mov	sp, r7
 8009658:	bd90      	pop	{r4, r7, pc}
 800965a:	bf00      	nop
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009668:	f7ff fd22 	bl	80090b0 <inHandlerMode>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fb3e 	bl	800acf4 <uxQueueMessagesWaitingFromISR>
 8009678:	4603      	mov	r3, r0
 800967a:	e003      	b.n	8009684 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 fb1b 	bl	800acb8 <uxQueueMessagesWaiting>
 8009682:	4603      	mov	r3, r0
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009694:	f7ff fd0c 	bl	80090b0 <inHandlerMode>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <osMessageDelete+0x16>
    return osErrorISR;
 800969e:	2382      	movs	r3, #130	; 0x82
 80096a0:	e003      	b.n	80096aa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 fb44 	bl	800ad30 <vQueueDelete>

  return osOK; 
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096c0:	f001 ff64 	bl	800b58c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096c4:	4b5b      	ldr	r3, [pc, #364]	; (8009834 <pvPortMalloc+0x180>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096cc:	f000 f920 	bl	8009910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096d0:	4b59      	ldr	r3, [pc, #356]	; (8009838 <pvPortMalloc+0x184>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f040 8093 	bne.w	8009804 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01d      	beq.n	8009720 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096e4:	2208      	movs	r2, #8
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d014      	beq.n	8009720 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	3308      	adds	r3, #8
 80096fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d06e      	beq.n	8009804 <pvPortMalloc+0x150>
 8009726:	4b45      	ldr	r3, [pc, #276]	; (800983c <pvPortMalloc+0x188>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	d869      	bhi.n	8009804 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009730:	4b43      	ldr	r3, [pc, #268]	; (8009840 <pvPortMalloc+0x18c>)
 8009732:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009734:	4b42      	ldr	r3, [pc, #264]	; (8009840 <pvPortMalloc+0x18c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800973a:	e004      	b.n	8009746 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d903      	bls.n	8009758 <pvPortMalloc+0xa4>
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f1      	bne.n	800973c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009758:	4b36      	ldr	r3, [pc, #216]	; (8009834 <pvPortMalloc+0x180>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975e:	429a      	cmp	r2, r3
 8009760:	d050      	beq.n	8009804 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2208      	movs	r2, #8
 8009768:	4413      	add	r3, r2
 800976a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	1ad2      	subs	r2, r2, r3
 800977c:	2308      	movs	r3, #8
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	429a      	cmp	r2, r3
 8009782:	d91f      	bls.n	80097c4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4413      	add	r3, r2
 800978a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <pvPortMalloc+0xf8>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	613b      	str	r3, [r7, #16]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097be:	69b8      	ldr	r0, [r7, #24]
 80097c0:	f000 f908 	bl	80099d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097c4:	4b1d      	ldr	r3, [pc, #116]	; (800983c <pvPortMalloc+0x188>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	4a1b      	ldr	r2, [pc, #108]	; (800983c <pvPortMalloc+0x188>)
 80097d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <pvPortMalloc+0x188>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b1b      	ldr	r3, [pc, #108]	; (8009844 <pvPortMalloc+0x190>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d203      	bcs.n	80097e6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097de:	4b17      	ldr	r3, [pc, #92]	; (800983c <pvPortMalloc+0x188>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a18      	ldr	r2, [pc, #96]	; (8009844 <pvPortMalloc+0x190>)
 80097e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	4b13      	ldr	r3, [pc, #76]	; (8009838 <pvPortMalloc+0x184>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097fa:	4b13      	ldr	r3, [pc, #76]	; (8009848 <pvPortMalloc+0x194>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	4a11      	ldr	r2, [pc, #68]	; (8009848 <pvPortMalloc+0x194>)
 8009802:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009804:	f001 fed0 	bl	800b5a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <pvPortMalloc+0x174>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60fb      	str	r3, [r7, #12]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <pvPortMalloc+0x172>
	return pvReturn;
 8009828:	69fb      	ldr	r3, [r7, #28]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3728      	adds	r7, #40	; 0x28
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	2400456c 	.word	0x2400456c
 8009838:	24004580 	.word	0x24004580
 800983c:	24004570 	.word	0x24004570
 8009840:	24004564 	.word	0x24004564
 8009844:	24004574 	.word	0x24004574
 8009848:	24004578 	.word	0x24004578

0800984c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d04d      	beq.n	80098fa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800985e:	2308      	movs	r3, #8
 8009860:	425b      	negs	r3, r3
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	4413      	add	r3, r2
 8009866:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	4b24      	ldr	r3, [pc, #144]	; (8009904 <vPortFree+0xb8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <vPortFree+0x44>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	60fb      	str	r3, [r7, #12]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <vPortFree+0x62>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60bb      	str	r3, [r7, #8]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <vPortFree+0xb8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4013      	ands	r3, r2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01e      	beq.n	80098fa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11a      	bne.n	80098fa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <vPortFree+0xb8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	43db      	mvns	r3, r3
 80098ce:	401a      	ands	r2, r3
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098d4:	f001 fe5a 	bl	800b58c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <vPortFree+0xbc>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4413      	add	r3, r2
 80098e2:	4a09      	ldr	r2, [pc, #36]	; (8009908 <vPortFree+0xbc>)
 80098e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098e6:	6938      	ldr	r0, [r7, #16]
 80098e8:	f000 f874 	bl	80099d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098ec:	4b07      	ldr	r3, [pc, #28]	; (800990c <vPortFree+0xc0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3301      	adds	r3, #1
 80098f2:	4a06      	ldr	r2, [pc, #24]	; (800990c <vPortFree+0xc0>)
 80098f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098f6:	f001 fe57 	bl	800b5a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098fa:	bf00      	nop
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	24004580 	.word	0x24004580
 8009908:	24004570 	.word	0x24004570
 800990c:	2400457c 	.word	0x2400457c

08009910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009916:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800991a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800991c:	4b27      	ldr	r3, [pc, #156]	; (80099bc <prvHeapInit+0xac>)
 800991e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00c      	beq.n	8009944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3307      	adds	r3, #7
 800992e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0307 	bic.w	r3, r3, #7
 8009936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <prvHeapInit+0xac>)
 8009940:	4413      	add	r3, r2
 8009942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009948:	4a1d      	ldr	r2, [pc, #116]	; (80099c0 <prvHeapInit+0xb0>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800994e:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <prvHeapInit+0xb0>)
 8009950:	2200      	movs	r2, #0
 8009952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	4413      	add	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800995c:	2208      	movs	r2, #8
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0307 	bic.w	r3, r3, #7
 800996a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <prvHeapInit+0xb4>)
 8009970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009972:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <prvHeapInit+0xb4>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <prvHeapInit+0xb4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009990:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <prvHeapInit+0xb4>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <prvHeapInit+0xb8>)
 800999e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	4a09      	ldr	r2, [pc, #36]	; (80099cc <prvHeapInit+0xbc>)
 80099a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099a8:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <prvHeapInit+0xc0>)
 80099aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099ae:	601a      	str	r2, [r3, #0]
}
 80099b0:	bf00      	nop
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	24000964 	.word	0x24000964
 80099c0:	24004564 	.word	0x24004564
 80099c4:	2400456c 	.word	0x2400456c
 80099c8:	24004574 	.word	0x24004574
 80099cc:	24004570 	.word	0x24004570
 80099d0:	24004580 	.word	0x24004580

080099d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099dc:	4b28      	ldr	r3, [pc, #160]	; (8009a80 <prvInsertBlockIntoFreeList+0xac>)
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e002      	b.n	80099e8 <prvInsertBlockIntoFreeList+0x14>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d8f7      	bhi.n	80099e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d108      	bne.n	8009a16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	441a      	add	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d118      	bne.n	8009a5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <prvInsertBlockIntoFreeList+0xb0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d00d      	beq.n	8009a52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	441a      	add	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	e008      	b.n	8009a64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a52:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <prvInsertBlockIntoFreeList+0xb0>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	e003      	b.n	8009a64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d002      	beq.n	8009a72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a72:	bf00      	nop
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	24004564 	.word	0x24004564
 8009a84:	2400456c 	.word	0x2400456c

08009a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f103 0208 	add.w	r2, r3, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f103 0208 	add.w	r2, r3, #8
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f103 0208 	add.w	r2, r3, #8
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d103      	bne.n	8009b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e00c      	b.n	8009b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e002      	b.n	8009b58 <vListInsert+0x2e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d2f6      	bcs.n	8009b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	601a      	str	r2, [r3, #0]
}
 8009b90:	bf00      	nop
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6892      	ldr	r2, [r2, #8]
 8009bb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6852      	ldr	r2, [r2, #4]
 8009bbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d103      	bne.n	8009bd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	1e5a      	subs	r2, r3, #1
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f023 0201 	bic.w	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <pxPortInitialiseStack+0x64>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b14      	subs	r3, #20
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3b04      	subs	r3, #4
 8009c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f06f 0202 	mvn.w	r2, #2
 8009c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3b20      	subs	r3, #32
 8009c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c46:	68fb      	ldr	r3, [r7, #12]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	08009c59 	.word	0x08009c59

08009c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c62:	4b12      	ldr	r3, [pc, #72]	; (8009cac <prvTaskExitError+0x54>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d00a      	beq.n	8009c82 <prvTaskExitError+0x2a>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60fb      	str	r3, [r7, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <prvTaskExitError+0x28>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60bb      	str	r3, [r7, #8]
}
 8009c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c96:	bf00      	nop
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0fc      	beq.n	8009c98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	24000024 	.word	0x24000024

08009cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <pxCurrentTCBConst2>)
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	6808      	ldr	r0, [r1, #0]
 8009cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	f380 8809 	msr	PSP, r0
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8811 	msr	BASEPRI, r0
 8009cca:	4770      	bx	lr
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst2>:
 8009cd0:	240045cc 	.word	0x240045cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cd8:	4808      	ldr	r0, [pc, #32]	; (8009cfc <prvPortStartFirstTask+0x24>)
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	6800      	ldr	r0, [r0, #0]
 8009cde:	f380 8808 	msr	MSP, r0
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8814 	msr	CONTROL, r0
 8009cea:	b662      	cpsie	i
 8009cec:	b661      	cpsie	f
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	df00      	svc	0
 8009cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cfa:	bf00      	nop
 8009cfc:	e000ed08 	.word	0xe000ed08

08009d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d06:	4b46      	ldr	r3, [pc, #280]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a46      	ldr	r2, [pc, #280]	; (8009e24 <xPortStartScheduler+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10a      	bne.n	8009d26 <xPortStartScheduler+0x26>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d26:	4b3e      	ldr	r3, [pc, #248]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a3f      	ldr	r2, [pc, #252]	; (8009e28 <xPortStartScheduler+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10a      	bne.n	8009d46 <xPortStartScheduler+0x46>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <xPortStartScheduler+0x12c>)
 8009d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	4b31      	ldr	r3, [pc, #196]	; (8009e30 <xPortStartScheduler+0x130>)
 8009d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d74:	e009      	b.n	8009d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d76:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a2d      	ldr	r2, [pc, #180]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d0ef      	beq.n	8009d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d96:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f1c3 0307 	rsb	r3, r3, #7
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d00a      	beq.n	8009db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60bb      	str	r3, [r7, #8]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dca:	4a1a      	ldr	r2, [pc, #104]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <xPortStartScheduler+0x138>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <xPortStartScheduler+0x138>)
 8009ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009de2:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dee:	f000 f8dd 	bl	8009fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009df2:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <xPortStartScheduler+0x13c>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009df8:	f000 f8fc 	bl	8009ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dfc:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <xPortStartScheduler+0x140>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0f      	ldr	r2, [pc, #60]	; (8009e40 <xPortStartScheduler+0x140>)
 8009e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e08:	f7ff ff66 	bl	8009cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e0c:	f001 fd42 	bl	800b894 <vTaskSwitchContext>
	prvTaskExitError();
 8009e10:	f7ff ff22 	bl	8009c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed00 	.word	0xe000ed00
 8009e24:	410fc271 	.word	0x410fc271
 8009e28:	410fc270 	.word	0x410fc270
 8009e2c:	e000e400 	.word	0xe000e400
 8009e30:	24004584 	.word	0x24004584
 8009e34:	24004588 	.word	0x24004588
 8009e38:	e000ed20 	.word	0xe000ed20
 8009e3c:	24000024 	.word	0x24000024
 8009e40:	e000ef34 	.word	0xe000ef34

08009e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	607b      	str	r3, [r7, #4]
}
 8009e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10f      	bne.n	8009e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e70:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <vPortEnterCritical+0x5c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	603b      	str	r3, [r7, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vPortEnterCritical+0x4a>
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	24000024 	.word	0x24000024
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <vPortExitCritical+0x24>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	607b      	str	r3, [r7, #4]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ed2:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <vPortExitCritical+0x42>
 8009eda:	2300      	movs	r3, #0
 8009edc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	24000024 	.word	0x24000024
	...

08009f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f00:	f3ef 8009 	mrs	r0, PSP
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <pxCurrentTCBConst>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	f01e 0f10 	tst.w	lr, #16
 8009f10:	bf08      	it	eq
 8009f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	6010      	str	r0, [r2, #0]
 8009f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f24:	f380 8811 	msr	BASEPRI, r0
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f001 fcb0 	bl	800b894 <vTaskSwitchContext>
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f380 8811 	msr	BASEPRI, r0
 8009f3c:	bc09      	pop	{r0, r3}
 8009f3e:	6819      	ldr	r1, [r3, #0]
 8009f40:	6808      	ldr	r0, [r1, #0]
 8009f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f46:	f01e 0f10 	tst.w	lr, #16
 8009f4a:	bf08      	it	eq
 8009f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f50:	f380 8809 	msr	PSP, r0
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w

08009f60 <pxCurrentTCBConst>:
 8009f60:	240045cc 	.word	0x240045cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f82:	f001 fbcf 	bl	800b724 <xTaskIncrementTick>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <SysTick_Handler+0x40>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
}
 8009f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <vPortSetupTimerInterrupt+0x38>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <vPortSetupTimerInterrupt+0x3c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <vPortSetupTimerInterrupt+0x40>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	099b      	lsrs	r3, r3, #6
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <vPortSetupTimerInterrupt+0x44>)
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fce:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	e000e010 	.word	0xe000e010
 8009fe4:	e000e018 	.word	0xe000e018
 8009fe8:	24000000 	.word	0x24000000
 8009fec:	10624dd3 	.word	0x10624dd3
 8009ff0:	e000e014 	.word	0xe000e014

08009ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a004 <vPortEnableVFP+0x10>
 8009ff8:	6801      	ldr	r1, [r0, #0]
 8009ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ffe:	6001      	str	r1, [r0, #0]
 800a000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a002:	bf00      	nop
 800a004:	e000ed88 	.word	0xe000ed88

0800a008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b0f      	cmp	r3, #15
 800a018:	d914      	bls.n	800a044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a01a:	4a17      	ldr	r2, [pc, #92]	; (800a078 <vPortValidateInterruptPriority+0x70>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a024:	4b15      	ldr	r3, [pc, #84]	; (800a07c <vPortValidateInterruptPriority+0x74>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	7afa      	ldrb	r2, [r7, #11]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d20a      	bcs.n	800a044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <vPortValidateInterruptPriority+0x78>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a04c:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <vPortValidateInterruptPriority+0x7c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d90a      	bls.n	800a06a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	603b      	str	r3, [r7, #0]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <vPortValidateInterruptPriority+0x60>
	}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000e3f0 	.word	0xe000e3f0
 800a07c:	24004584 	.word	0x24004584
 800a080:	e000ed0c 	.word	0xe000ed0c
 800a084:	24004588 	.word	0x24004588

0800a088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	60bb      	str	r3, [r7, #8]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0b2:	f7ff fec7 	bl	8009e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0c2:	fb01 f303 	mul.w	r3, r1, r3
 800a0c6:	441a      	add	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	68f9      	ldr	r1, [r7, #12]
 800a0e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0e8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ec:	441a      	add	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	22ff      	movs	r2, #255	; 0xff
 800a0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	22ff      	movs	r2, #255	; 0xff
 800a0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d114      	bne.n	800a132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01a      	beq.n	800a146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3310      	adds	r3, #16
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fc3d 	bl	800b994 <xTaskRemoveFromEventList>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d012      	beq.n	800a146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a120:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <xQueueGenericReset+0xcc>)
 800a122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	e009      	b.n	800a146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3310      	adds	r3, #16
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff fca6 	bl	8009a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3324      	adds	r3, #36	; 0x24
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff fca1 	bl	8009a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a146:	f7ff fead 	bl	8009ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a14a:	2301      	movs	r3, #1
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a19a:	bf00      	nop
 800a19c:	e7fe      	b.n	800a19c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <xQueueGenericCreateStatic+0x52>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <xQueueGenericCreateStatic+0x56>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <xQueueGenericCreateStatic+0x58>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	623b      	str	r3, [r7, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <xQueueGenericCreateStatic+0x7e>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <xQueueGenericCreateStatic+0x82>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <xQueueGenericCreateStatic+0x84>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10a      	bne.n	800a1f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	61fb      	str	r3, [r7, #28]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1f6:	2348      	movs	r3, #72	; 0x48
 800a1f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b48      	cmp	r3, #72	; 0x48
 800a1fe:	d00a      	beq.n	800a216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	61bb      	str	r3, [r7, #24]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a216:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00d      	beq.n	800a23e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a22a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4613      	mov	r3, r2
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	68b9      	ldr	r1, [r7, #8]
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f83f 	bl	800a2bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a240:	4618      	mov	r0, r3
 800a242:	3730      	adds	r7, #48	; 0x30
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	; 0x28
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	613b      	str	r3, [r7, #16]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	fb02 f303 	mul.w	r3, r2, r3
 800a27a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	3348      	adds	r3, #72	; 0x48
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff fa17 	bl	80096b4 <pvPortMalloc>
 800a286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d011      	beq.n	800a2b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	3348      	adds	r3, #72	; 0x48
 800a296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2a0:	79fa      	ldrb	r2, [r7, #7]
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f805 	bl	800a2bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3720      	adds	r7, #32
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	e002      	b.n	800a2de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	69b8      	ldr	r0, [r7, #24]
 800a2ee:	f7ff fecb 	bl	800a088 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00e      	beq.n	800a326 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a31a:	2300      	movs	r3, #0
 800a31c:	2200      	movs	r2, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f837 	bl	800a394 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b086      	sub	sp, #24
 800a332:	af00      	add	r7, sp, #0
 800a334:	4603      	mov	r3, r0
 800a336:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a338:	2301      	movs	r3, #1
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	2300      	movs	r3, #0
 800a33e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	461a      	mov	r2, r3
 800a344:	6939      	ldr	r1, [r7, #16]
 800a346:	6978      	ldr	r0, [r7, #20]
 800a348:	f7ff ff7e 	bl	800a248 <xQueueGenericCreate>
 800a34c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff ffd3 	bl	800a2fa <prvInitialiseMutex>

		return xNewQueue;
 800a354:	68fb      	ldr	r3, [r7, #12]
	}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b088      	sub	sp, #32
 800a362:	af02      	add	r7, sp, #8
 800a364:	4603      	mov	r3, r0
 800a366:	6039      	str	r1, [r7, #0]
 800a368:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a36a:	2301      	movs	r3, #1
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a372:	79fb      	ldrb	r3, [r7, #7]
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2200      	movs	r2, #0
 800a37a:	6939      	ldr	r1, [r7, #16]
 800a37c:	6978      	ldr	r0, [r7, #20]
 800a37e:	f7ff feeb 	bl	800a158 <xQueueGenericCreateStatic>
 800a382:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7ff ffb8 	bl	800a2fa <prvInitialiseMutex>

		return xNewQueue;
 800a38a:	68fb      	ldr	r3, [r7, #12]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08e      	sub	sp, #56	; 0x38
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <xQueueGenericSend+0x32>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d103      	bne.n	800a3d4 <xQueueGenericSend+0x40>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <xQueueGenericSend+0x44>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <xQueueGenericSend+0x46>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <xQueueGenericSend+0x60>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d103      	bne.n	800a402 <xQueueGenericSend+0x6e>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d101      	bne.n	800a406 <xQueueGenericSend+0x72>
 800a402:	2301      	movs	r3, #1
 800a404:	e000      	b.n	800a408 <xQueueGenericSend+0x74>
 800a406:	2300      	movs	r3, #0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xQueueGenericSend+0x8e>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	623b      	str	r3, [r7, #32]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a422:	f001 fc73 	bl	800bd0c <xTaskGetSchedulerState>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <xQueueGenericSend+0x9e>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <xQueueGenericSend+0xa2>
 800a432:	2301      	movs	r3, #1
 800a434:	e000      	b.n	800a438 <xQueueGenericSend+0xa4>
 800a436:	2300      	movs	r3, #0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <xQueueGenericSend+0xbe>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	61fb      	str	r3, [r7, #28]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a452:	f7ff fcf7 	bl	8009e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45e:	429a      	cmp	r2, r3
 800a460:	d302      	bcc.n	800a468 <xQueueGenericSend+0xd4>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b02      	cmp	r3, #2
 800a466:	d129      	bne.n	800a4bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46e:	f000 fc9a 	bl	800ada6 <prvCopyDataToQueue>
 800a472:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d010      	beq.n	800a49e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	3324      	adds	r3, #36	; 0x24
 800a480:	4618      	mov	r0, r3
 800a482:	f001 fa87 	bl	800b994 <xTaskRemoveFromEventList>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d013      	beq.n	800a4b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a48c:	4b3f      	ldr	r3, [pc, #252]	; (800a58c <xQueueGenericSend+0x1f8>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	e00a      	b.n	800a4b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4a4:	4b39      	ldr	r3, [pc, #228]	; (800a58c <xQueueGenericSend+0x1f8>)
 800a4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4b4:	f7ff fcf6 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e063      	b.n	800a584 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d103      	bne.n	800a4ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4c2:	f7ff fcef 	bl	8009ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e05c      	b.n	800a584 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d106      	bne.n	800a4de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d0:	f107 0314 	add.w	r3, r7, #20
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f001 fabf 	bl	800ba58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4de:	f7ff fce1 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4e2:	f001 f853 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4e6:	f7ff fcad 	bl	8009e44 <vPortEnterCritical>
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d103      	bne.n	800a500 <xQueueGenericSend+0x16c>
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a506:	b25b      	sxtb	r3, r3
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d103      	bne.n	800a516 <xQueueGenericSend+0x182>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a516:	f7ff fcc5 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a51a:	1d3a      	adds	r2, r7, #4
 800a51c:	f107 0314 	add.w	r3, r7, #20
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f001 faae 	bl	800ba84 <xTaskCheckForTimeOut>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d124      	bne.n	800a578 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a52e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a530:	f000 fd31 	bl	800af96 <prvIsQueueFull>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d018      	beq.n	800a56c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	3310      	adds	r3, #16
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fa02 	bl	800b94c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a54a:	f000 fcbc 	bl	800aec6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a54e:	f001 f82b 	bl	800b5a8 <xTaskResumeAll>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	f47f af7c 	bne.w	800a452 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a55a:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <xQueueGenericSend+0x1f8>)
 800a55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	e772      	b.n	800a452 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a56c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a56e:	f000 fcaa 	bl	800aec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a572:	f001 f819 	bl	800b5a8 <xTaskResumeAll>
 800a576:	e76c      	b.n	800a452 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a57a:	f000 fca4 	bl	800aec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a57e:	f001 f813 	bl	800b5a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a584:	4618      	mov	r0, r3
 800a586:	3738      	adds	r7, #56	; 0x38
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b090      	sub	sp, #64	; 0x40
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d103      	bne.n	800a5cc <xQueueGenericSendFromISR+0x3c>
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <xQueueGenericSendFromISR+0x40>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e000      	b.n	800a5d2 <xQueueGenericSendFromISR+0x42>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d103      	bne.n	800a5fa <xQueueGenericSendFromISR+0x6a>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <xQueueGenericSendFromISR+0x6e>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e000      	b.n	800a600 <xQueueGenericSendFromISR+0x70>
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	623b      	str	r3, [r7, #32]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a61a:	f7ff fcf5 	bl	800a008 <vPortValidateInterruptPriority>
	__asm volatile
 800a61e:	f3ef 8211 	mrs	r2, BASEPRI
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	61fa      	str	r2, [r7, #28]
 800a634:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a636:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	429a      	cmp	r2, r3
 800a644:	d302      	bcc.n	800a64c <xQueueGenericSendFromISR+0xbc>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d12f      	bne.n	800a6ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a662:	f000 fba0 	bl	800ada6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a666:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66e:	d112      	bne.n	800a696 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d016      	beq.n	800a6a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f989 	bl	800b994 <xTaskRemoveFromEventList>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00e      	beq.n	800a6a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00b      	beq.n	800a6a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e007      	b.n	800a6a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a69a:	3301      	adds	r3, #1
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	b25a      	sxtb	r2, r3
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a6aa:	e001      	b.n	800a6b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f383 8811 	msr	BASEPRI, r3
}
 800a6ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3740      	adds	r7, #64	; 0x40
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b08e      	sub	sp, #56	; 0x38
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10a      	bne.n	800a6f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	623b      	str	r3, [r7, #32]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	61fb      	str	r3, [r7, #28]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d103      	bne.n	800a71e <xQueueGiveFromISR+0x58>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueGiveFromISR+0x5c>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueGiveFromISR+0x5e>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	61bb      	str	r3, [r7, #24]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a73e:	f7ff fc63 	bl	800a008 <vPortValidateInterruptPriority>
	__asm volatile
 800a742:	f3ef 8211 	mrs	r2, BASEPRI
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	617a      	str	r2, [r7, #20]
 800a758:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a75a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d22b      	bcs.n	800a7c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d112      	bne.n	800a7b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d016      	beq.n	800a7c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	3324      	adds	r3, #36	; 0x24
 800a796:	4618      	mov	r0, r3
 800a798:	f001 f8fc 	bl	800b994 <xTaskRemoveFromEventList>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	e007      	b.n	800a7c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	b25a      	sxtb	r2, r3
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c4:	e001      	b.n	800a7ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f383 8811 	msr	BASEPRI, r3
}
 800a7d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3738      	adds	r7, #56	; 0x38
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08c      	sub	sp, #48	; 0x30
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <xQueueReceive+0x30>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	623b      	str	r3, [r7, #32]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d103      	bne.n	800a81e <xQueueReceive+0x3e>
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <xQueueReceive+0x42>
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <xQueueReceive+0x44>
 800a822:	2300      	movs	r3, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xQueueReceive+0x5e>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	61fb      	str	r3, [r7, #28]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a83e:	f001 fa65 	bl	800bd0c <xTaskGetSchedulerState>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <xQueueReceive+0x6e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <xQueueReceive+0x72>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueReceive+0x74>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueReceive+0x8e>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	61bb      	str	r3, [r7, #24]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a86e:	f7ff fae9 	bl	8009e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01f      	beq.n	800a8be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f000 fafa 	bl	800ae7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00f      	beq.n	800a8b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	3310      	adds	r3, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 f87a 	bl	800b994 <xTaskRemoveFromEventList>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d007      	beq.n	800a8b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8a6:	4b3d      	ldr	r3, [pc, #244]	; (800a99c <xQueueReceive+0x1bc>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8b6:	f7ff faf5 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e069      	b.n	800a992 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8c4:	f7ff faee 	bl	8009ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e062      	b.n	800a992 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d2:	f107 0310 	add.w	r3, r7, #16
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f001 f8be 	bl	800ba58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e0:	f7ff fae0 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8e4:	f000 fe52 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8e8:	f7ff faac 	bl	8009e44 <vPortEnterCritical>
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f2:	b25b      	sxtb	r3, r3
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d103      	bne.n	800a902 <xQueueReceive+0x122>
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90e:	d103      	bne.n	800a918 <xQueueReceive+0x138>
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a918:	f7ff fac4 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a91c:	1d3a      	adds	r2, r7, #4
 800a91e:	f107 0310 	add.w	r3, r7, #16
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f001 f8ad 	bl	800ba84 <xTaskCheckForTimeOut>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d123      	bne.n	800a978 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a932:	f000 fb1a 	bl	800af6a <prvIsQueueEmpty>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d017      	beq.n	800a96c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f001 f801 	bl	800b94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94c:	f000 fabb 	bl	800aec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a950:	f000 fe2a 	bl	800b5a8 <xTaskResumeAll>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d189      	bne.n	800a86e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <xQueueReceive+0x1bc>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	e780      	b.n	800a86e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a96e:	f000 faaa 	bl	800aec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a972:	f000 fe19 	bl	800b5a8 <xTaskResumeAll>
 800a976:	e77a      	b.n	800a86e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97a:	f000 faa4 	bl	800aec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a97e:	f000 fe13 	bl	800b5a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a984:	f000 faf1 	bl	800af6a <prvIsQueueEmpty>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f43f af6f 	beq.w	800a86e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a992:	4618      	mov	r0, r3
 800a994:	3730      	adds	r7, #48	; 0x30
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08e      	sub	sp, #56	; 0x38
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	623b      	str	r3, [r7, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61fb      	str	r3, [r7, #28]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9f0:	f001 f98c 	bl	800bd0c <xTaskGetSchedulerState>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <xQueueSemaphoreTake+0x60>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <xQueueSemaphoreTake+0x64>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <xQueueSemaphoreTake+0x66>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	61bb      	str	r3, [r7, #24]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa20:	f7ff fa10 	bl	8009e44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d024      	beq.n	800aa7a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	1e5a      	subs	r2, r3, #1
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d104      	bne.n	800aa4a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa40:	f001 fb0c 	bl	800c05c <pvTaskIncrementMutexHeldCount>
 800aa44:	4602      	mov	r2, r0
 800aa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00f      	beq.n	800aa72 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa54:	3310      	adds	r3, #16
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 ff9c 	bl	800b994 <xTaskRemoveFromEventList>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d007      	beq.n	800aa72 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa62:	4b54      	ldr	r3, [pc, #336]	; (800abb4 <xQueueSemaphoreTake+0x214>)
 800aa64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa72:	f7ff fa17 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e097      	b.n	800abaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d111      	bne.n	800aaa4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	617b      	str	r3, [r7, #20]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa9c:	f7ff fa02 	bl	8009ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e082      	b.n	800abaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaaa:	f107 030c 	add.w	r3, r7, #12
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 ffd2 	bl	800ba58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aab8:	f7ff f9f4 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aabc:	f000 fd66 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac0:	f7ff f9c0 	bl	8009e44 <vPortEnterCritical>
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaca:	b25b      	sxtb	r3, r3
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d103      	bne.n	800aada <xQueueSemaphoreTake+0x13a>
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae6:	d103      	bne.n	800aaf0 <xQueueSemaphoreTake+0x150>
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf0:	f7ff f9d8 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	f107 030c 	add.w	r3, r7, #12
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 ffc1 	bl	800ba84 <xTaskCheckForTimeOut>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d132      	bne.n	800ab6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab0a:	f000 fa2e 	bl	800af6a <prvIsQueueEmpty>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d026      	beq.n	800ab62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ab1c:	f7ff f992 	bl	8009e44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 f90f 	bl	800bd48 <xTaskPriorityInherit>
 800ab2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ab2c:	f7ff f9ba 	bl	8009ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	3324      	adds	r3, #36	; 0x24
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 ff07 	bl	800b94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab40:	f000 f9c1 	bl	800aec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab44:	f000 fd30 	bl	800b5a8 <xTaskResumeAll>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f47f af68 	bne.w	800aa20 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ab50:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <xQueueSemaphoreTake+0x214>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	e75e      	b.n	800aa20 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab64:	f000 f9af 	bl	800aec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab68:	f000 fd1e 	bl	800b5a8 <xTaskResumeAll>
 800ab6c:	e758      	b.n	800aa20 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab70:	f000 f9a9 	bl	800aec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab74:	f000 fd18 	bl	800b5a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab7a:	f000 f9f6 	bl	800af6a <prvIsQueueEmpty>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f43f af4d 	beq.w	800aa20 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00d      	beq.n	800aba8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ab8c:	f7ff f95a 	bl	8009e44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab92:	f000 f8f0 	bl	800ad76 <prvGetDisinheritPriorityAfterTimeout>
 800ab96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 f9ce 	bl	800bf40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aba4:	f7ff f97e 	bl	8009ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3738      	adds	r7, #56	; 0x38
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10a      	bne.n	800abe4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	623b      	str	r3, [r7, #32]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d103      	bne.n	800abf2 <xQueueReceiveFromISR+0x3a>
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <xQueueReceiveFromISR+0x3e>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <xQueueReceiveFromISR+0x40>
 800abf6:	2300      	movs	r3, #0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61fb      	str	r3, [r7, #28]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac12:	f7ff f9f9 	bl	800a008 <vPortValidateInterruptPriority>
	__asm volatile
 800ac16:	f3ef 8211 	mrs	r2, BASEPRI
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	61ba      	str	r2, [r7, #24]
 800ac2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d02f      	beq.n	800ac9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4c:	f000 f915 	bl	800ae7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac60:	d112      	bne.n	800ac88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d016      	beq.n	800ac98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	3310      	adds	r3, #16
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fe90 	bl	800b994 <xTaskRemoveFromEventList>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00e      	beq.n	800ac98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	e007      	b.n	800ac98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	b25a      	sxtb	r2, r3
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9c:	e001      	b.n	800aca2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f383 8811 	msr	BASEPRI, r3
}
 800acac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3738      	adds	r7, #56	; 0x38
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60bb      	str	r3, [r7, #8]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800acdc:	f7ff f8b2 	bl	8009e44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ace6:	f7ff f8dd 	bl	8009ea4 <vPortExitCritical>

	return uxReturn;
 800acea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ad22:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ad24:	4618      	mov	r0, r3
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <vQueueDelete+0x28>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	60bb      	str	r3, [r7, #8]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f935 	bl	800afc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fe fd6f 	bl	800984c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad76:	b480      	push	{r7}
 800ad78:	b085      	sub	sp, #20
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f1c3 0307 	rsb	r3, r3, #7
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e001      	b.n	800ad98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad98:	68fb      	ldr	r3, [r7, #12]
	}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10d      	bne.n	800ade0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d14d      	bne.n	800ae68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	4618      	mov	r0, r3
 800add2:	f001 f82f 	bl	800be34 <xTaskPriorityDisinherit>
 800add6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	609a      	str	r2, [r3, #8]
 800adde:	e043      	b.n	800ae68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d119      	bne.n	800ae1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6858      	ldr	r0, [r3, #4]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	461a      	mov	r2, r3
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	f010 fef5 	bl	801bbe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d32b      	bcc.n	800ae68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	605a      	str	r2, [r3, #4]
 800ae18:	e026      	b.n	800ae68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	68d8      	ldr	r0, [r3, #12]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	461a      	mov	r2, r3
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	f010 fedb 	bl	801bbe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	425b      	negs	r3, r3
 800ae34:	441a      	add	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d207      	bcs.n	800ae56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	425b      	negs	r3, r3
 800ae50:	441a      	add	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d105      	bne.n	800ae68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae70:	697b      	ldr	r3, [r7, #20]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d018      	beq.n	800aebe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68da      	ldr	r2, [r3, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae94:	441a      	add	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d303      	bcc.n	800aeae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68d9      	ldr	r1, [r3, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f010 fe91 	bl	801bbe0 <memcpy>
	}
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aece:	f7fe ffb9 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeda:	e011      	b.n	800af00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d012      	beq.n	800af0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3324      	adds	r3, #36	; 0x24
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fd53 	bl	800b994 <xTaskRemoveFromEventList>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aef4:	f000 fe28 	bl	800bb48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dce9      	bgt.n	800aedc <prvUnlockQueue+0x16>
 800af08:	e000      	b.n	800af0c <prvUnlockQueue+0x46>
					break;
 800af0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	22ff      	movs	r2, #255	; 0xff
 800af10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af14:	f7fe ffc6 	bl	8009ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af18:	f7fe ff94 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af24:	e011      	b.n	800af4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d012      	beq.n	800af54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3310      	adds	r3, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f000 fd2e 	bl	800b994 <xTaskRemoveFromEventList>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af3e:	f000 fe03 	bl	800bb48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	3b01      	subs	r3, #1
 800af46:	b2db      	uxtb	r3, r3
 800af48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dce9      	bgt.n	800af26 <prvUnlockQueue+0x60>
 800af52:	e000      	b.n	800af56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	22ff      	movs	r2, #255	; 0xff
 800af5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af5e:	f7fe ffa1 	bl	8009ea4 <vPortExitCritical>
}
 800af62:	bf00      	nop
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af72:	f7fe ff67 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d102      	bne.n	800af84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e001      	b.n	800af88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af88:	f7fe ff8c 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800af8c:	68fb      	ldr	r3, [r7, #12]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af9e:	f7fe ff51 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afaa:	429a      	cmp	r2, r3
 800afac:	d102      	bne.n	800afb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afae:	2301      	movs	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e001      	b.n	800afb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afb8:	f7fe ff74 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800afbc:	68fb      	ldr	r3, [r7, #12]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e016      	b.n	800b004 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800afd6:	4a10      	ldr	r2, [pc, #64]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	4413      	add	r3, r2
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d10b      	bne.n	800affe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800afe6:	4a0c      	ldr	r2, [pc, #48]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2100      	movs	r1, #0
 800afec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aff0:	4a09      	ldr	r2, [pc, #36]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	4413      	add	r3, r2
 800aff8:	2200      	movs	r2, #0
 800affa:	605a      	str	r2, [r3, #4]
				break;
 800affc:	e006      	b.n	800b00c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3301      	adds	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b07      	cmp	r3, #7
 800b008:	d9e5      	bls.n	800afd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	2400458c 	.word	0x2400458c

0800b01c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08e      	sub	sp, #56	; 0x38
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10a      	bne.n	800b046 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	623b      	str	r3, [r7, #32]
}
 800b042:	bf00      	nop
 800b044:	e7fe      	b.n	800b044 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <xTaskCreateStatic+0x46>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	61fb      	str	r3, [r7, #28]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b062:	2354      	movs	r3, #84	; 0x54
 800b064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b54      	cmp	r3, #84	; 0x54
 800b06a:	d00a      	beq.n	800b082 <xTaskCreateStatic+0x66>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	61bb      	str	r3, [r7, #24]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b082:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d01e      	beq.n	800b0c8 <xTaskCreateStatic+0xac>
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01b      	beq.n	800b0c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b098:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	2202      	movs	r2, #2
 800b09e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	f107 0314 	add.w	r3, r7, #20
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f850 	bl	800b160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c2:	f000 f8d5 	bl	800b270 <prvAddNewTaskToReadyList>
 800b0c6:	e001      	b.n	800b0cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0cc:	697b      	ldr	r3, [r7, #20]
	}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3728      	adds	r7, #40	; 0x28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b08c      	sub	sp, #48	; 0x30
 800b0da:	af04      	add	r7, sp, #16
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fae2 	bl	80096b4 <pvPortMalloc>
 800b0f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00e      	beq.n	800b116 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0f8:	2054      	movs	r0, #84	; 0x54
 800b0fa:	f7fe fadb 	bl	80096b4 <pvPortMalloc>
 800b0fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	631a      	str	r2, [r3, #48]	; 0x30
 800b10c:	e005      	b.n	800b11a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b10e:	6978      	ldr	r0, [r7, #20]
 800b110:	f7fe fb9c 	bl	800984c <vPortFree>
 800b114:	e001      	b.n	800b11a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d017      	beq.n	800b150 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b128:	88fa      	ldrh	r2, [r7, #6]
 800b12a:	2300      	movs	r3, #0
 800b12c:	9303      	str	r3, [sp, #12]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 f80e 	bl	800b160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b144:	69f8      	ldr	r0, [r7, #28]
 800b146:	f000 f893 	bl	800b270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b14a:	2301      	movs	r3, #1
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	e002      	b.n	800b156 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b150:	f04f 33ff 	mov.w	r3, #4294967295
 800b154:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b156:	69bb      	ldr	r3, [r7, #24]
	}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b178:	440b      	add	r3, r1
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	f023 0307 	bic.w	r3, r3, #7
 800b186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	617b      	str	r3, [r7, #20]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01f      	beq.n	800b1ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	e012      	b.n	800b1da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	7819      	ldrb	r1, [r3, #0]
 800b1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	3334      	adds	r3, #52	; 0x34
 800b1c4:	460a      	mov	r2, r1
 800b1c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d006      	beq.n	800b1e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	61fb      	str	r3, [r7, #28]
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b0f      	cmp	r3, #15
 800b1de:	d9e9      	bls.n	800b1b4 <prvInitialiseNewTask+0x54>
 800b1e0:	e000      	b.n	800b1e4 <prvInitialiseNewTask+0x84>
			{
				break;
 800b1e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1ec:	e003      	b.n	800b1f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	2b06      	cmp	r3, #6
 800b1fa:	d901      	bls.n	800b200 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1fc:	2306      	movs	r3, #6
 800b1fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b20a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	2200      	movs	r2, #0
 800b210:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	3304      	adds	r3, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fc56 	bl	8009ac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	3318      	adds	r3, #24
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fc51 	bl	8009ac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b22a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	f1c3 0207 	rsb	r2, r3, #7
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	2200      	movs	r2, #0
 800b240:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	68f9      	ldr	r1, [r7, #12]
 800b24e:	69b8      	ldr	r0, [r7, #24]
 800b250:	f7fe fcce 	bl	8009bf0 <pxPortInitialiseStack>
 800b254:	4602      	mov	r2, r0
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b266:	bf00      	nop
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b278:	f7fe fde4 	bl	8009e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b27c:	4b2a      	ldr	r3, [pc, #168]	; (800b328 <prvAddNewTaskToReadyList+0xb8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	4a29      	ldr	r2, [pc, #164]	; (800b328 <prvAddNewTaskToReadyList+0xb8>)
 800b284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b286:	4b29      	ldr	r3, [pc, #164]	; (800b32c <prvAddNewTaskToReadyList+0xbc>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d109      	bne.n	800b2a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b28e:	4a27      	ldr	r2, [pc, #156]	; (800b32c <prvAddNewTaskToReadyList+0xbc>)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b294:	4b24      	ldr	r3, [pc, #144]	; (800b328 <prvAddNewTaskToReadyList+0xb8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d110      	bne.n	800b2be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b29c:	f000 fc78 	bl	800bb90 <prvInitialiseTaskLists>
 800b2a0:	e00d      	b.n	800b2be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2a2:	4b23      	ldr	r3, [pc, #140]	; (800b330 <prvAddNewTaskToReadyList+0xc0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2aa:	4b20      	ldr	r3, [pc, #128]	; (800b32c <prvAddNewTaskToReadyList+0xbc>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d802      	bhi.n	800b2be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2b8:	4a1c      	ldr	r2, [pc, #112]	; (800b32c <prvAddNewTaskToReadyList+0xbc>)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2be:	4b1d      	ldr	r3, [pc, #116]	; (800b334 <prvAddNewTaskToReadyList+0xc4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <prvAddNewTaskToReadyList+0xc4>)
 800b2c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	409a      	lsls	r2, r3
 800b2d0:	4b19      	ldr	r3, [pc, #100]	; (800b338 <prvAddNewTaskToReadyList+0xc8>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	4a18      	ldr	r2, [pc, #96]	; (800b338 <prvAddNewTaskToReadyList+0xc8>)
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4a15      	ldr	r2, [pc, #84]	; (800b33c <prvAddNewTaskToReadyList+0xcc>)
 800b2e8:	441a      	add	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fe fbf6 	bl	8009ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2f6:	f7fe fdd5 	bl	8009ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <prvAddNewTaskToReadyList+0xc0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00e      	beq.n	800b320 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b302:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <prvAddNewTaskToReadyList+0xbc>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d207      	bcs.n	800b320 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <prvAddNewTaskToReadyList+0xd0>)
 800b312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	240046cc 	.word	0x240046cc
 800b32c:	240045cc 	.word	0x240045cc
 800b330:	240046d8 	.word	0x240046d8
 800b334:	240046e8 	.word	0x240046e8
 800b338:	240046d4 	.word	0x240046d4
 800b33c:	240045d0 	.word	0x240045d0
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b34c:	f7fe fd7a 	bl	8009e44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <vTaskDelete+0x18>
 800b356:	4b39      	ldr	r3, [pc, #228]	; (800b43c <vTaskDelete+0xf8>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	e000      	b.n	800b35e <vTaskDelete+0x1a>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3304      	adds	r3, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe fc19 	bl	8009b9c <uxListRemove>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d115      	bne.n	800b39c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	4932      	ldr	r1, [pc, #200]	; (800b440 <vTaskDelete+0xfc>)
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10a      	bne.n	800b39c <vTaskDelete+0x58>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	2201      	movs	r2, #1
 800b38c:	fa02 f303 	lsl.w	r3, r2, r3
 800b390:	43da      	mvns	r2, r3
 800b392:	4b2c      	ldr	r3, [pc, #176]	; (800b444 <vTaskDelete+0x100>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4013      	ands	r3, r2
 800b398:	4a2a      	ldr	r2, [pc, #168]	; (800b444 <vTaskDelete+0x100>)
 800b39a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3318      	adds	r3, #24
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fbf7 	bl	8009b9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b3ae:	4b26      	ldr	r3, [pc, #152]	; (800b448 <vTaskDelete+0x104>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	4a24      	ldr	r2, [pc, #144]	; (800b448 <vTaskDelete+0x104>)
 800b3b6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b3b8:	4b20      	ldr	r3, [pc, #128]	; (800b43c <vTaskDelete+0xf8>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d10b      	bne.n	800b3da <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4820      	ldr	r0, [pc, #128]	; (800b44c <vTaskDelete+0x108>)
 800b3ca:	f7fe fb8a 	bl	8009ae2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b3ce:	4b20      	ldr	r3, [pc, #128]	; (800b450 <vTaskDelete+0x10c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	4a1e      	ldr	r2, [pc, #120]	; (800b450 <vTaskDelete+0x10c>)
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	e009      	b.n	800b3ee <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b3da:	4b1e      	ldr	r3, [pc, #120]	; (800b454 <vTaskDelete+0x110>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	4a1c      	ldr	r2, [pc, #112]	; (800b454 <vTaskDelete+0x110>)
 800b3e2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 fc41 	bl	800bc6c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b3ea:	f000 fc6f 	bl	800bccc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b3ee:	f7fe fd59 	bl	8009ea4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b3f2:	4b19      	ldr	r3, [pc, #100]	; (800b458 <vTaskDelete+0x114>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01b      	beq.n	800b432 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b3fa:	4b10      	ldr	r3, [pc, #64]	; (800b43c <vTaskDelete+0xf8>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	429a      	cmp	r2, r3
 800b402:	d116      	bne.n	800b432 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b404:	4b15      	ldr	r3, [pc, #84]	; (800b45c <vTaskDelete+0x118>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <vTaskDelete+0xde>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	60bb      	str	r3, [r7, #8]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <vTaskDelete+0x11c>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b432:	bf00      	nop
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	240045cc 	.word	0x240045cc
 800b440:	240045d0 	.word	0x240045d0
 800b444:	240046d4 	.word	0x240046d4
 800b448:	240046e8 	.word	0x240046e8
 800b44c:	240046a0 	.word	0x240046a0
 800b450:	240046b4 	.word	0x240046b4
 800b454:	240046cc 	.word	0x240046cc
 800b458:	240046d8 	.word	0x240046d8
 800b45c:	240046f4 	.word	0x240046f4
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d017      	beq.n	800b4a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b476:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <vTaskDelay+0x60>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <vTaskDelay+0x30>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60bb      	str	r3, [r7, #8]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b494:	f000 f87a 	bl	800b58c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b498:	2100      	movs	r1, #0
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fdf2 	bl	800c084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4a0:	f000 f882 	bl	800b5a8 <xTaskResumeAll>
 800b4a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d107      	bne.n	800b4bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <vTaskDelay+0x64>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4bc:	bf00      	nop
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	240046f4 	.word	0x240046f4
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4da:	463a      	mov	r2, r7
 800b4dc:	1d39      	adds	r1, r7, #4
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f5 f980 	bl	80007e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	9202      	str	r2, [sp, #8]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	491e      	ldr	r1, [pc, #120]	; (800b574 <vTaskStartScheduler+0xa8>)
 800b4fc:	481e      	ldr	r0, [pc, #120]	; (800b578 <vTaskStartScheduler+0xac>)
 800b4fe:	f7ff fd8d 	bl	800b01c <xTaskCreateStatic>
 800b502:	4603      	mov	r3, r0
 800b504:	4a1d      	ldr	r2, [pc, #116]	; (800b57c <vTaskStartScheduler+0xb0>)
 800b506:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b508:	4b1c      	ldr	r3, [pc, #112]	; (800b57c <vTaskStartScheduler+0xb0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e001      	b.n	800b51a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d116      	bne.n	800b54e <vTaskStartScheduler+0x82>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b534:	4b12      	ldr	r3, [pc, #72]	; (800b580 <vTaskStartScheduler+0xb4>)
 800b536:	f04f 32ff 	mov.w	r2, #4294967295
 800b53a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <vTaskStartScheduler+0xb8>)
 800b53e:	2201      	movs	r2, #1
 800b540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <vTaskStartScheduler+0xbc>)
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b548:	f7fe fbda 	bl	8009d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b54c:	e00e      	b.n	800b56c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b554:	d10a      	bne.n	800b56c <vTaskStartScheduler+0xa0>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	60fb      	str	r3, [r7, #12]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <vTaskStartScheduler+0x9e>
}
 800b56c:	bf00      	nop
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	0801f734 	.word	0x0801f734
 800b578:	0800bb61 	.word	0x0800bb61
 800b57c:	240046f0 	.word	0x240046f0
 800b580:	240046ec 	.word	0x240046ec
 800b584:	240046d8 	.word	0x240046d8
 800b588:	240046d0 	.word	0x240046d0

0800b58c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <vTaskSuspendAll+0x18>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3301      	adds	r3, #1
 800b596:	4a03      	ldr	r2, [pc, #12]	; (800b5a4 <vTaskSuspendAll+0x18>)
 800b598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b59a:	bf00      	nop
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	240046f4 	.word	0x240046f4

0800b5a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5b6:	4b41      	ldr	r3, [pc, #260]	; (800b6bc <xTaskResumeAll+0x114>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	603b      	str	r3, [r7, #0]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5d4:	f7fe fc36 	bl	8009e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5d8:	4b38      	ldr	r3, [pc, #224]	; (800b6bc <xTaskResumeAll+0x114>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	4a37      	ldr	r2, [pc, #220]	; (800b6bc <xTaskResumeAll+0x114>)
 800b5e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e2:	4b36      	ldr	r3, [pc, #216]	; (800b6bc <xTaskResumeAll+0x114>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d161      	bne.n	800b6ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5ea:	4b35      	ldr	r3, [pc, #212]	; (800b6c0 <xTaskResumeAll+0x118>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d05d      	beq.n	800b6ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5f2:	e02e      	b.n	800b652 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f4:	4b33      	ldr	r3, [pc, #204]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3318      	adds	r3, #24
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe facb 	bl	8009b9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3304      	adds	r3, #4
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe fac6 	bl	8009b9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	2201      	movs	r2, #1
 800b616:	409a      	lsls	r2, r3
 800b618:	4b2b      	ldr	r3, [pc, #172]	; (800b6c8 <xTaskResumeAll+0x120>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	4a2a      	ldr	r2, [pc, #168]	; (800b6c8 <xTaskResumeAll+0x120>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4a27      	ldr	r2, [pc, #156]	; (800b6cc <xTaskResumeAll+0x124>)
 800b630:	441a      	add	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3304      	adds	r3, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f7fe fa52 	bl	8009ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	4b23      	ldr	r3, [pc, #140]	; (800b6d0 <xTaskResumeAll+0x128>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	429a      	cmp	r2, r3
 800b64a:	d302      	bcc.n	800b652 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b64c:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <xTaskResumeAll+0x12c>)
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b652:	4b1c      	ldr	r3, [pc, #112]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1cc      	bne.n	800b5f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b660:	f000 fb34 	bl	800bccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b664:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <xTaskResumeAll+0x130>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d010      	beq.n	800b692 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b670:	f000 f858 	bl	800b724 <xTaskIncrementTick>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b67a:	4b16      	ldr	r3, [pc, #88]	; (800b6d4 <xTaskResumeAll+0x12c>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3b01      	subs	r3, #1
 800b684:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f1      	bne.n	800b670 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b68c:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <xTaskResumeAll+0x130>)
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <xTaskResumeAll+0x12c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d009      	beq.n	800b6ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b69a:	2301      	movs	r3, #1
 800b69c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <xTaskResumeAll+0x134>)
 800b6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6ae:	f7fe fbf9 	bl	8009ea4 <vPortExitCritical>

	return xAlreadyYielded;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	240046f4 	.word	0x240046f4
 800b6c0:	240046cc 	.word	0x240046cc
 800b6c4:	2400468c 	.word	0x2400468c
 800b6c8:	240046d4 	.word	0x240046d4
 800b6cc:	240045d0 	.word	0x240045d0
 800b6d0:	240045cc 	.word	0x240045cc
 800b6d4:	240046e0 	.word	0x240046e0
 800b6d8:	240046dc 	.word	0x240046dc
 800b6dc:	e000ed04 	.word	0xe000ed04

0800b6e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6e6:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <xTaskGetTickCount+0x1c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6ec:	687b      	ldr	r3, [r7, #4]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	240046d0 	.word	0x240046d0

0800b700 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b706:	f7fe fc7f 	bl	800a008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b70a:	2300      	movs	r3, #0
 800b70c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b70e:	4b04      	ldr	r3, [pc, #16]	; (800b720 <xTaskGetTickCountFromISR+0x20>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b714:	683b      	ldr	r3, [r7, #0]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	240046d0 	.word	0x240046d0

0800b724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b72e:	4b4e      	ldr	r3, [pc, #312]	; (800b868 <xTaskIncrementTick+0x144>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	f040 808e 	bne.w	800b854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b738:	4b4c      	ldr	r3, [pc, #304]	; (800b86c <xTaskIncrementTick+0x148>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3301      	adds	r3, #1
 800b73e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b740:	4a4a      	ldr	r2, [pc, #296]	; (800b86c <xTaskIncrementTick+0x148>)
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d120      	bne.n	800b78e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b74c:	4b48      	ldr	r3, [pc, #288]	; (800b870 <xTaskIncrementTick+0x14c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00a      	beq.n	800b76c <xTaskIncrementTick+0x48>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	603b      	str	r3, [r7, #0]
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <xTaskIncrementTick+0x46>
 800b76c:	4b40      	ldr	r3, [pc, #256]	; (800b870 <xTaskIncrementTick+0x14c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	4b40      	ldr	r3, [pc, #256]	; (800b874 <xTaskIncrementTick+0x150>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a3e      	ldr	r2, [pc, #248]	; (800b870 <xTaskIncrementTick+0x14c>)
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	4a3e      	ldr	r2, [pc, #248]	; (800b874 <xTaskIncrementTick+0x150>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	4b3d      	ldr	r3, [pc, #244]	; (800b878 <xTaskIncrementTick+0x154>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	4a3c      	ldr	r2, [pc, #240]	; (800b878 <xTaskIncrementTick+0x154>)
 800b788:	6013      	str	r3, [r2, #0]
 800b78a:	f000 fa9f 	bl	800bccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b78e:	4b3b      	ldr	r3, [pc, #236]	; (800b87c <xTaskIncrementTick+0x158>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	429a      	cmp	r2, r3
 800b796:	d348      	bcc.n	800b82a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b798:	4b35      	ldr	r3, [pc, #212]	; (800b870 <xTaskIncrementTick+0x14c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d104      	bne.n	800b7ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a2:	4b36      	ldr	r3, [pc, #216]	; (800b87c <xTaskIncrementTick+0x158>)
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a8:	601a      	str	r2, [r3, #0]
					break;
 800b7aa:	e03e      	b.n	800b82a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ac:	4b30      	ldr	r3, [pc, #192]	; (800b870 <xTaskIncrementTick+0x14c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d203      	bcs.n	800b7cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7c4:	4a2d      	ldr	r2, [pc, #180]	; (800b87c <xTaskIncrementTick+0x158>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7ca:	e02e      	b.n	800b82a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe f9e3 	bl	8009b9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	3318      	adds	r3, #24
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe f9da 	bl	8009b9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	409a      	lsls	r2, r3
 800b7f0:	4b23      	ldr	r3, [pc, #140]	; (800b880 <xTaskIncrementTick+0x15c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	4a22      	ldr	r2, [pc, #136]	; (800b880 <xTaskIncrementTick+0x15c>)
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fe:	4613      	mov	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4413      	add	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4a1f      	ldr	r2, [pc, #124]	; (800b884 <xTaskIncrementTick+0x160>)
 800b808:	441a      	add	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f7fe f966 	bl	8009ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <xTaskIncrementTick+0x164>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d3b9      	bcc.n	800b798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b828:	e7b6      	b.n	800b798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b82a:	4b17      	ldr	r3, [pc, #92]	; (800b888 <xTaskIncrementTick+0x164>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	4914      	ldr	r1, [pc, #80]	; (800b884 <xTaskIncrementTick+0x160>)
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d901      	bls.n	800b846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b842:	2301      	movs	r3, #1
 800b844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b846:	4b11      	ldr	r3, [pc, #68]	; (800b88c <xTaskIncrementTick+0x168>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d007      	beq.n	800b85e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b84e:	2301      	movs	r3, #1
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e004      	b.n	800b85e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b854:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <xTaskIncrementTick+0x16c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3301      	adds	r3, #1
 800b85a:	4a0d      	ldr	r2, [pc, #52]	; (800b890 <xTaskIncrementTick+0x16c>)
 800b85c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b85e:	697b      	ldr	r3, [r7, #20]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	240046f4 	.word	0x240046f4
 800b86c:	240046d0 	.word	0x240046d0
 800b870:	24004684 	.word	0x24004684
 800b874:	24004688 	.word	0x24004688
 800b878:	240046e4 	.word	0x240046e4
 800b87c:	240046ec 	.word	0x240046ec
 800b880:	240046d4 	.word	0x240046d4
 800b884:	240045d0 	.word	0x240045d0
 800b888:	240045cc 	.word	0x240045cc
 800b88c:	240046e0 	.word	0x240046e0
 800b890:	240046dc 	.word	0x240046dc

0800b894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b89a:	4b27      	ldr	r3, [pc, #156]	; (800b938 <vTaskSwitchContext+0xa4>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8a2:	4b26      	ldr	r3, [pc, #152]	; (800b93c <vTaskSwitchContext+0xa8>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8a8:	e03f      	b.n	800b92a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b8aa:	4b24      	ldr	r3, [pc, #144]	; (800b93c <vTaskSwitchContext+0xa8>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b0:	4b23      	ldr	r3, [pc, #140]	; (800b940 <vTaskSwitchContext+0xac>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	fab3 f383 	clz	r3, r3
 800b8bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8be:	7afb      	ldrb	r3, [r7, #11]
 800b8c0:	f1c3 031f 	rsb	r3, r3, #31
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	491f      	ldr	r1, [pc, #124]	; (800b944 <vTaskSwitchContext+0xb0>)
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	440b      	add	r3, r1
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10a      	bne.n	800b8f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	607b      	str	r3, [r7, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <vTaskSwitchContext+0x5a>
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <vTaskSwitchContext+0xb0>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	605a      	str	r2, [r3, #4]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	3308      	adds	r3, #8
 800b912:	429a      	cmp	r2, r3
 800b914:	d104      	bne.n	800b920 <vTaskSwitchContext+0x8c>
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	605a      	str	r2, [r3, #4]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4a08      	ldr	r2, [pc, #32]	; (800b948 <vTaskSwitchContext+0xb4>)
 800b928:	6013      	str	r3, [r2, #0]
}
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	240046f4 	.word	0x240046f4
 800b93c:	240046e0 	.word	0x240046e0
 800b940:	240046d4 	.word	0x240046d4
 800b944:	240045d0 	.word	0x240045d0
 800b948:	240045cc 	.word	0x240045cc

0800b94c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60fb      	str	r3, [r7, #12]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b972:	4b07      	ldr	r3, [pc, #28]	; (800b990 <vTaskPlaceOnEventList+0x44>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3318      	adds	r3, #24
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fe f8d5 	bl	8009b2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b980:	2101      	movs	r1, #1
 800b982:	6838      	ldr	r0, [r7, #0]
 800b984:	f000 fb7e 	bl	800c084 <prvAddCurrentTaskToDelayedList>
}
 800b988:	bf00      	nop
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	240045cc 	.word	0x240045cc

0800b994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	60fb      	str	r3, [r7, #12]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3318      	adds	r3, #24
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe f8e9 	bl	8009b9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ca:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <xTaskRemoveFromEventList+0xac>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d11c      	bne.n	800ba0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe f8e0 	bl	8009b9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	409a      	lsls	r2, r3
 800b9e4:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <xTaskRemoveFromEventList+0xb0>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	4a16      	ldr	r2, [pc, #88]	; (800ba44 <xTaskRemoveFromEventList+0xb0>)
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a13      	ldr	r2, [pc, #76]	; (800ba48 <xTaskRemoveFromEventList+0xb4>)
 800b9fc:	441a      	add	r2, r3
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4619      	mov	r1, r3
 800ba04:	4610      	mov	r0, r2
 800ba06:	f7fe f86c 	bl	8009ae2 <vListInsertEnd>
 800ba0a:	e005      	b.n	800ba18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3318      	adds	r3, #24
 800ba10:	4619      	mov	r1, r3
 800ba12:	480e      	ldr	r0, [pc, #56]	; (800ba4c <xTaskRemoveFromEventList+0xb8>)
 800ba14:	f7fe f865 	bl	8009ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <xTaskRemoveFromEventList+0xbc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d905      	bls.n	800ba32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba26:	2301      	movs	r3, #1
 800ba28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba2a:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <xTaskRemoveFromEventList+0xc0>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	e001      	b.n	800ba36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba36:	697b      	ldr	r3, [r7, #20]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	240046f4 	.word	0x240046f4
 800ba44:	240046d4 	.word	0x240046d4
 800ba48:	240045d0 	.word	0x240045d0
 800ba4c:	2400468c 	.word	0x2400468c
 800ba50:	240045cc 	.word	0x240045cc
 800ba54:	240046e0 	.word	0x240046e0

0800ba58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba60:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <vTaskInternalSetTimeOutState+0x24>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <vTaskInternalSetTimeOutState+0x28>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	605a      	str	r2, [r3, #4]
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	240046e4 	.word	0x240046e4
 800ba80:	240046d0 	.word	0x240046d0

0800ba84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10a      	bne.n	800baaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	613b      	str	r3, [r7, #16]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10a      	bne.n	800bac6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60fb      	str	r3, [r7, #12]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bac6:	f7fe f9bd 	bl	8009e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800baca:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <xTaskCheckForTimeOut+0xbc>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	69ba      	ldr	r2, [r7, #24]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d102      	bne.n	800baea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	e023      	b.n	800bb32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b15      	ldr	r3, [pc, #84]	; (800bb44 <xTaskCheckForTimeOut+0xc0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d007      	beq.n	800bb06 <xTaskCheckForTimeOut+0x82>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d302      	bcc.n	800bb06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	e015      	b.n	800bb32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d20b      	bcs.n	800bb28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	1ad2      	subs	r2, r2, r3
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ff9b 	bl	800ba58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	61fb      	str	r3, [r7, #28]
 800bb26:	e004      	b.n	800bb32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb32:	f7fe f9b7 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800bb36:	69fb      	ldr	r3, [r7, #28]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	240046d0 	.word	0x240046d0
 800bb44:	240046e4 	.word	0x240046e4

0800bb48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb4c:	4b03      	ldr	r3, [pc, #12]	; (800bb5c <vTaskMissedYield+0x14>)
 800bb4e:	2201      	movs	r2, #1
 800bb50:	601a      	str	r2, [r3, #0]
}
 800bb52:	bf00      	nop
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	240046e0 	.word	0x240046e0

0800bb60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb68:	f000 f852 	bl	800bc10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb6c:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <prvIdleTask+0x28>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d9f9      	bls.n	800bb68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <prvIdleTask+0x2c>)
 800bb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb84:	e7f0      	b.n	800bb68 <prvIdleTask+0x8>
 800bb86:	bf00      	nop
 800bb88:	240045d0 	.word	0x240045d0
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb96:	2300      	movs	r3, #0
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	e00c      	b.n	800bbb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4a12      	ldr	r2, [pc, #72]	; (800bbf0 <prvInitialiseTaskLists+0x60>)
 800bba8:	4413      	add	r3, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd ff6c 	bl	8009a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b06      	cmp	r3, #6
 800bbba:	d9ef      	bls.n	800bb9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbbc:	480d      	ldr	r0, [pc, #52]	; (800bbf4 <prvInitialiseTaskLists+0x64>)
 800bbbe:	f7fd ff63 	bl	8009a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbc2:	480d      	ldr	r0, [pc, #52]	; (800bbf8 <prvInitialiseTaskLists+0x68>)
 800bbc4:	f7fd ff60 	bl	8009a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbc8:	480c      	ldr	r0, [pc, #48]	; (800bbfc <prvInitialiseTaskLists+0x6c>)
 800bbca:	f7fd ff5d 	bl	8009a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbce:	480c      	ldr	r0, [pc, #48]	; (800bc00 <prvInitialiseTaskLists+0x70>)
 800bbd0:	f7fd ff5a 	bl	8009a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbd4:	480b      	ldr	r0, [pc, #44]	; (800bc04 <prvInitialiseTaskLists+0x74>)
 800bbd6:	f7fd ff57 	bl	8009a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbda:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <prvInitialiseTaskLists+0x78>)
 800bbdc:	4a05      	ldr	r2, [pc, #20]	; (800bbf4 <prvInitialiseTaskLists+0x64>)
 800bbde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <prvInitialiseTaskLists+0x7c>)
 800bbe2:	4a05      	ldr	r2, [pc, #20]	; (800bbf8 <prvInitialiseTaskLists+0x68>)
 800bbe4:	601a      	str	r2, [r3, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	240045d0 	.word	0x240045d0
 800bbf4:	2400465c 	.word	0x2400465c
 800bbf8:	24004670 	.word	0x24004670
 800bbfc:	2400468c 	.word	0x2400468c
 800bc00:	240046a0 	.word	0x240046a0
 800bc04:	240046b8 	.word	0x240046b8
 800bc08:	24004684 	.word	0x24004684
 800bc0c:	24004688 	.word	0x24004688

0800bc10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc16:	e019      	b.n	800bc4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc18:	f7fe f914 	bl	8009e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc1c:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <prvCheckTasksWaitingTermination+0x50>)
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fd ffb7 	bl	8009b9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <prvCheckTasksWaitingTermination+0x54>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3b01      	subs	r3, #1
 800bc34:	4a0b      	ldr	r2, [pc, #44]	; (800bc64 <prvCheckTasksWaitingTermination+0x54>)
 800bc36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <prvCheckTasksWaitingTermination+0x58>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	4a0a      	ldr	r2, [pc, #40]	; (800bc68 <prvCheckTasksWaitingTermination+0x58>)
 800bc40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc42:	f7fe f92f 	bl	8009ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f810 	bl	800bc6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc4c:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <prvCheckTasksWaitingTermination+0x58>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e1      	bne.n	800bc18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	240046a0 	.word	0x240046a0
 800bc64:	240046cc 	.word	0x240046cc
 800bc68:	240046b4 	.word	0x240046b4

0800bc6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d108      	bne.n	800bc90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd fde2 	bl	800984c <vPortFree>
				vPortFree( pxTCB );
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7fd fddf 	bl	800984c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc8e:	e018      	b.n	800bcc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d103      	bne.n	800bca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7fd fdd6 	bl	800984c <vPortFree>
	}
 800bca0:	e00f      	b.n	800bcc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d00a      	beq.n	800bcc2 <prvDeleteTCB+0x56>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60fb      	str	r3, [r7, #12]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <prvDeleteTCB+0x54>
	}
 800bcc2:	bf00      	nop
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <prvResetNextTaskUnblockTime+0x38>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d104      	bne.n	800bce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <prvResetNextTaskUnblockTime+0x3c>)
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bce4:	e008      	b.n	800bcf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <prvResetNextTaskUnblockTime+0x38>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	4a04      	ldr	r2, [pc, #16]	; (800bd08 <prvResetNextTaskUnblockTime+0x3c>)
 800bcf6:	6013      	str	r3, [r2, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	24004684 	.word	0x24004684
 800bd08:	240046ec 	.word	0x240046ec

0800bd0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <xTaskGetSchedulerState+0x34>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d102      	bne.n	800bd20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	607b      	str	r3, [r7, #4]
 800bd1e:	e008      	b.n	800bd32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd20:	4b08      	ldr	r3, [pc, #32]	; (800bd44 <xTaskGetSchedulerState+0x38>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	607b      	str	r3, [r7, #4]
 800bd2c:	e001      	b.n	800bd32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd32:	687b      	ldr	r3, [r7, #4]
	}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	240046d8 	.word	0x240046d8
 800bd44:	240046f4 	.word	0x240046f4

0800bd48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d05e      	beq.n	800be1c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd62:	4b31      	ldr	r3, [pc, #196]	; (800be28 <xTaskPriorityInherit+0xe0>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d24e      	bcs.n	800be0a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	db06      	blt.n	800bd82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd74:	4b2c      	ldr	r3, [pc, #176]	; (800be28 <xTaskPriorityInherit+0xe0>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	f1c3 0207 	rsb	r2, r3, #7
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6959      	ldr	r1, [r3, #20]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4a26      	ldr	r2, [pc, #152]	; (800be2c <xTaskPriorityInherit+0xe4>)
 800bd94:	4413      	add	r3, r2
 800bd96:	4299      	cmp	r1, r3
 800bd98:	d12f      	bne.n	800bdfa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd fefc 	bl	8009b9c <uxListRemove>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	2201      	movs	r2, #1
 800bdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb4:	43da      	mvns	r2, r3
 800bdb6:	4b1e      	ldr	r3, [pc, #120]	; (800be30 <xTaskPriorityInherit+0xe8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	4a1c      	ldr	r2, [pc, #112]	; (800be30 <xTaskPriorityInherit+0xe8>)
 800bdbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdc0:	4b19      	ldr	r3, [pc, #100]	; (800be28 <xTaskPriorityInherit+0xe0>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	2201      	movs	r2, #1
 800bdd0:	409a      	lsls	r2, r3
 800bdd2:	4b17      	ldr	r3, [pc, #92]	; (800be30 <xTaskPriorityInherit+0xe8>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	4a15      	ldr	r2, [pc, #84]	; (800be30 <xTaskPriorityInherit+0xe8>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a10      	ldr	r2, [pc, #64]	; (800be2c <xTaskPriorityInherit+0xe4>)
 800bdea:	441a      	add	r2, r3
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fd fe75 	bl	8009ae2 <vListInsertEnd>
 800bdf8:	e004      	b.n	800be04 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <xTaskPriorityInherit+0xe0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
 800be08:	e008      	b.n	800be1c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <xTaskPriorityInherit+0xe0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	429a      	cmp	r2, r3
 800be16:	d201      	bcs.n	800be1c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be18:	2301      	movs	r3, #1
 800be1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be1c:	68fb      	ldr	r3, [r7, #12]
	}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	240045cc 	.word	0x240045cc
 800be2c:	240045d0 	.word	0x240045d0
 800be30:	240046d4 	.word	0x240046d4

0800be34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d06e      	beq.n	800bf28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be4a:	4b3a      	ldr	r3, [pc, #232]	; (800bf34 <xTaskPriorityDisinherit+0x100>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	429a      	cmp	r2, r3
 800be52:	d00a      	beq.n	800be6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	60fb      	str	r3, [r7, #12]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	60bb      	str	r3, [r7, #8]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be8c:	1e5a      	subs	r2, r3, #1
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d044      	beq.n	800bf28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d140      	bne.n	800bf28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	3304      	adds	r3, #4
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fd fe76 	bl	8009b9c <uxListRemove>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d115      	bne.n	800bee2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beba:	491f      	ldr	r1, [pc, #124]	; (800bf38 <xTaskPriorityDisinherit+0x104>)
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	440b      	add	r3, r1
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xTaskPriorityDisinherit+0xae>
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	2201      	movs	r2, #1
 800bed2:	fa02 f303 	lsl.w	r3, r2, r3
 800bed6:	43da      	mvns	r2, r3
 800bed8:	4b18      	ldr	r3, [pc, #96]	; (800bf3c <xTaskPriorityDisinherit+0x108>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4013      	ands	r3, r2
 800bede:	4a17      	ldr	r2, [pc, #92]	; (800bf3c <xTaskPriorityDisinherit+0x108>)
 800bee0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	f1c3 0207 	rsb	r2, r3, #7
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	2201      	movs	r2, #1
 800befc:	409a      	lsls	r2, r3
 800befe:	4b0f      	ldr	r3, [pc, #60]	; (800bf3c <xTaskPriorityDisinherit+0x108>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	4a0d      	ldr	r2, [pc, #52]	; (800bf3c <xTaskPriorityDisinherit+0x108>)
 800bf06:	6013      	str	r3, [r2, #0]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <xTaskPriorityDisinherit+0x104>)
 800bf16:	441a      	add	r2, r3
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f7fd fddf 	bl	8009ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf28:	697b      	ldr	r3, [r7, #20]
	}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	240045cc 	.word	0x240045cc
 800bf38:	240045d0 	.word	0x240045d0
 800bf3c:	240046d4 	.word	0x240046d4

0800bf40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d077      	beq.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d902      	bls.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	61fb      	str	r3, [r7, #28]
 800bf84:	e002      	b.n	800bf8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	69fa      	ldr	r2, [r7, #28]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d058      	beq.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d153      	bne.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfa0:	4b2b      	ldr	r3, [pc, #172]	; (800c050 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d10a      	bne.n	800bfc0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	60bb      	str	r3, [r7, #8]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	69fa      	ldr	r2, [r7, #28]
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db04      	blt.n	800bfde <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	f1c3 0207 	rsb	r2, r3, #7
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	6959      	ldr	r1, [r3, #20]
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4a19      	ldr	r2, [pc, #100]	; (800c054 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bfee:	4413      	add	r3, r2
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d129      	bne.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fd fdcf 	bl	8009b9c <uxListRemove>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c008:	2201      	movs	r2, #1
 800c00a:	fa02 f303 	lsl.w	r3, r2, r3
 800c00e:	43da      	mvns	r2, r3
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4013      	ands	r3, r2
 800c016:	4a10      	ldr	r2, [pc, #64]	; (800c058 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c018:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	2201      	movs	r2, #1
 800c020:	409a      	lsls	r2, r3
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4313      	orrs	r3, r2
 800c028:	4a0b      	ldr	r2, [pc, #44]	; (800c058 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a06      	ldr	r2, [pc, #24]	; (800c054 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c03a:	441a      	add	r2, r3
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fd fd4d 	bl	8009ae2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c048:	bf00      	nop
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	240045cc 	.word	0x240045cc
 800c054:	240045d0 	.word	0x240045d0
 800c058:	240046d4 	.word	0x240046d4

0800c05c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c060:	4b07      	ldr	r3, [pc, #28]	; (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c06e:	3201      	adds	r2, #1
 800c070:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c072:	4b03      	ldr	r3, [pc, #12]	; (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c074:	681b      	ldr	r3, [r3, #0]
	}
 800c076:	4618      	mov	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	240045cc 	.word	0x240045cc

0800c084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c08e:	4b29      	ldr	r3, [pc, #164]	; (800c134 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c094:	4b28      	ldr	r3, [pc, #160]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3304      	adds	r3, #4
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fd fd7e 	bl	8009b9c <uxListRemove>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0a6:	4b24      	ldr	r3, [pc, #144]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b2:	43da      	mvns	r2, r3
 800c0b4:	4b21      	ldr	r3, [pc, #132]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	4a20      	ldr	r2, [pc, #128]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c4:	d10a      	bne.n	800c0dc <prvAddCurrentTaskToDelayedList+0x58>
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0cc:	4b1a      	ldr	r3, [pc, #104]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	481a      	ldr	r0, [pc, #104]	; (800c140 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0d6:	f7fd fd04 	bl	8009ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0da:	e026      	b.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0e4:	4b14      	ldr	r3, [pc, #80]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d209      	bcs.n	800c108 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0f4:	4b13      	ldr	r3, [pc, #76]	; (800c144 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fd fd12 	bl	8009b2a <vListInsert>
}
 800c106:	e010      	b.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c108:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3304      	adds	r3, #4
 800c112:	4619      	mov	r1, r3
 800c114:	4610      	mov	r0, r2
 800c116:	f7fd fd08 	bl	8009b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	429a      	cmp	r2, r3
 800c122:	d202      	bcs.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c124:	4a09      	ldr	r2, [pc, #36]	; (800c14c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6013      	str	r3, [r2, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	240046d0 	.word	0x240046d0
 800c138:	240045cc 	.word	0x240045cc
 800c13c:	240046d4 	.word	0x240046d4
 800c140:	240046b8 	.word	0x240046b8
 800c144:	24004688 	.word	0x24004688
 800c148:	24004684 	.word	0x24004684
 800c14c:	240046ec 	.word	0x240046ec

0800c150 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	330c      	adds	r3, #12
 800c160:	461a      	mov	r2, r3
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f00e fe41 	bl	801adec <tcpip_send_msg_wait_sem>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <netconn_apimsg+0x2e>
    return apimsg->err;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c17c:	e001      	b.n	800c182 <netconn_apimsg+0x32>
  }
  return err;
 800c17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08c      	sub	sp, #48	; 0x30
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	603a      	str	r2, [r7, #0]
 800c196:	71fb      	strb	r3, [r7, #7]
 800c198:	460b      	mov	r3, r1
 800c19a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 f923 	bl	800d3ec <netconn_alloc>
 800c1a6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d054      	beq.n	800c258 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c1ae:	79bb      	ldrb	r3, [r7, #6]
 800c1b0:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c1b6:	f107 0308 	add.w	r3, r7, #8
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4829      	ldr	r0, [pc, #164]	; (800c264 <netconn_new_with_proto_and_callback+0xd8>)
 800c1be:	f7ff ffc7 	bl	800c150 <netconn_apimsg>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c1c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d043      	beq.n	800c258 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d005      	beq.n	800c1e4 <netconn_new_with_proto_and_callback+0x58>
 800c1d8:	4b23      	ldr	r3, [pc, #140]	; (800c268 <netconn_new_with_proto_and_callback+0xdc>)
 800c1da:	22a3      	movs	r2, #163	; 0xa3
 800c1dc:	4923      	ldr	r1, [pc, #140]	; (800c26c <netconn_new_with_proto_and_callback+0xe0>)
 800c1de:	4824      	ldr	r0, [pc, #144]	; (800c270 <netconn_new_with_proto_and_callback+0xe4>)
 800c1e0:	f010 f970 	bl	801c4c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	3310      	adds	r3, #16
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f008 fb0c 	bl	8014806 <sys_mbox_valid>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <netconn_new_with_proto_and_callback+0x74>
 800c1f4:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <netconn_new_with_proto_and_callback+0xdc>)
 800c1f6:	22a4      	movs	r2, #164	; 0xa4
 800c1f8:	491e      	ldr	r1, [pc, #120]	; (800c274 <netconn_new_with_proto_and_callback+0xe8>)
 800c1fa:	481d      	ldr	r0, [pc, #116]	; (800c270 <netconn_new_with_proto_and_callback+0xe4>)
 800c1fc:	f010 f962 	bl	801c4c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	3314      	adds	r3, #20
 800c204:	4618      	mov	r0, r3
 800c206:	f008 fafe 	bl	8014806 <sys_mbox_valid>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <netconn_new_with_proto_and_callback+0x90>
 800c210:	4b15      	ldr	r3, [pc, #84]	; (800c268 <netconn_new_with_proto_and_callback+0xdc>)
 800c212:	22a6      	movs	r2, #166	; 0xa6
 800c214:	4918      	ldr	r1, [pc, #96]	; (800c278 <netconn_new_with_proto_and_callback+0xec>)
 800c216:	4816      	ldr	r0, [pc, #88]	; (800c270 <netconn_new_with_proto_and_callback+0xe4>)
 800c218:	f010 f954 	bl	801c4c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	330c      	adds	r3, #12
 800c220:	4618      	mov	r0, r3
 800c222:	f008 fb81 	bl	8014928 <sys_sem_valid>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <netconn_new_with_proto_and_callback+0xac>
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <netconn_new_with_proto_and_callback+0xdc>)
 800c22e:	22a9      	movs	r2, #169	; 0xa9
 800c230:	4912      	ldr	r1, [pc, #72]	; (800c27c <netconn_new_with_proto_and_callback+0xf0>)
 800c232:	480f      	ldr	r0, [pc, #60]	; (800c270 <netconn_new_with_proto_and_callback+0xe4>)
 800c234:	f010 f946 	bl	801c4c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	330c      	adds	r3, #12
 800c23c:	4618      	mov	r0, r3
 800c23e:	f008 fb66 	bl	801490e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	3310      	adds	r3, #16
 800c246:	4618      	mov	r0, r3
 800c248:	f008 fa56 	bl	80146f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c24c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c24e:	2007      	movs	r0, #7
 800c250:	f007 f83c 	bl	80132cc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c254:	2300      	movs	r3, #0
 800c256:	e000      	b.n	800c25a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3730      	adds	r7, #48	; 0x30
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	0800d3c1 	.word	0x0800d3c1
 800c268:	0801f73c 	.word	0x0801f73c
 800c26c:	0801f790 	.word	0x0801f790
 800c270:	0801f7b4 	.word	0x0801f7b4
 800c274:	0801f7dc 	.word	0x0801f7dc
 800c278:	0801f7f4 	.word	0x0801f7f4
 800c27c:	0801f818 	.word	0x0801f818

0800c280 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08c      	sub	sp, #48	; 0x30
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	e014      	b.n	800c2bc <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c296:	2329      	movs	r3, #41	; 0x29
 800c298:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c29a:	f107 030c 	add.w	r3, r7, #12
 800c29e:	4619      	mov	r1, r3
 800c2a0:	4808      	ldr	r0, [pc, #32]	; (800c2c4 <netconn_prepare_delete+0x44>)
 800c2a2:	f7ff ff55 	bl	800c150 <netconn_apimsg>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c2ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <netconn_prepare_delete+0x3a>
    return err;
 800c2b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2b8:	e000      	b.n	800c2bc <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3730      	adds	r7, #48	; 0x30
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	0800d92d 	.word	0x0800d92d

0800c2c8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <netconn_delete+0x12>
    return ERR_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e00d      	b.n	800c2f6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ffd0 	bl	800c280 <netconn_prepare_delete>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <netconn_delete+0x2a>
    netconn_free(conn);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 f8eb 	bl	800d4c8 <netconn_free>
  }
  return err;
 800c2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08e      	sub	sp, #56	; 0x38
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d109      	bne.n	800c328 <netconn_bind+0x28>
 800c314:	4b11      	ldr	r3, [pc, #68]	; (800c35c <netconn_bind+0x5c>)
 800c316:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c31a:	4911      	ldr	r1, [pc, #68]	; (800c360 <netconn_bind+0x60>)
 800c31c:	4811      	ldr	r0, [pc, #68]	; (800c364 <netconn_bind+0x64>)
 800c31e:	f010 f8d1 	bl	801c4c4 <iprintf>
 800c322:	f06f 030f 	mvn.w	r3, #15
 800c326:	e015      	b.n	800c354 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c32e:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <netconn_bind+0x68>)
 800c330:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c33e:	f107 0314 	add.w	r3, r7, #20
 800c342:	4619      	mov	r1, r3
 800c344:	4809      	ldr	r0, [pc, #36]	; (800c36c <netconn_bind+0x6c>)
 800c346:	f7ff ff03 	bl	800c150 <netconn_apimsg>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c350:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c354:	4618      	mov	r0, r3
 800c356:	3738      	adds	r7, #56	; 0x38
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	0801f73c 	.word	0x0801f73c
 800c360:	0801f894 	.word	0x0801f894
 800c364:	0801f7b4 	.word	0x0801f7b4
 800c368:	08046500 	.word	0x08046500
 800c36c:	0800daf5 	.word	0x0800daf5

0800c370 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08c      	sub	sp, #48	; 0x30
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <netconn_listen_with_backlog+0x26>
 800c382:	4b0d      	ldr	r3, [pc, #52]	; (800c3b8 <netconn_listen_with_backlog+0x48>)
 800c384:	f240 12bb 	movw	r2, #443	; 0x1bb
 800c388:	490c      	ldr	r1, [pc, #48]	; (800c3bc <netconn_listen_with_backlog+0x4c>)
 800c38a:	480d      	ldr	r0, [pc, #52]	; (800c3c0 <netconn_listen_with_backlog+0x50>)
 800c38c:	f010 f89a 	bl	801c4c4 <iprintf>
 800c390:	f06f 030f 	mvn.w	r3, #15
 800c394:	e00c      	b.n	800c3b0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c39a:	f107 030c 	add.w	r3, r7, #12
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4808      	ldr	r0, [pc, #32]	; (800c3c4 <netconn_listen_with_backlog+0x54>)
 800c3a2:	f7ff fed5 	bl	800c150 <netconn_apimsg>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c3ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3730      	adds	r7, #48	; 0x30
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	0801f73c 	.word	0x0801f73c
 800c3bc:	0801f914 	.word	0x0801f914
 800c3c0:	0801f7b4 	.word	0x0801f7b4
 800c3c4:	0800db69 	.word	0x0800db69

0800c3c8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d109      	bne.n	800c3ec <netconn_accept+0x24>
 800c3d8:	4b3d      	ldr	r3, [pc, #244]	; (800c4d0 <netconn_accept+0x108>)
 800c3da:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c3de:	493d      	ldr	r1, [pc, #244]	; (800c4d4 <netconn_accept+0x10c>)
 800c3e0:	483d      	ldr	r0, [pc, #244]	; (800c4d8 <netconn_accept+0x110>)
 800c3e2:	f010 f86f 	bl	801c4c4 <iprintf>
 800c3e6:	f06f 030f 	mvn.w	r3, #15
 800c3ea:	e06c      	b.n	800c4c6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <netconn_accept+0x44>
 800c3f8:	4b35      	ldr	r3, [pc, #212]	; (800c4d0 <netconn_accept+0x108>)
 800c3fa:	f240 12e3 	movw	r2, #483	; 0x1e3
 800c3fe:	4937      	ldr	r1, [pc, #220]	; (800c4dc <netconn_accept+0x114>)
 800c400:	4835      	ldr	r0, [pc, #212]	; (800c4d8 <netconn_accept+0x110>)
 800c402:	f010 f85f 	bl	801c4c4 <iprintf>
 800c406:	f06f 030f 	mvn.w	r3, #15
 800c40a:	e05c      	b.n	800c4c6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fb6c 	bl	800caea <netconn_err>
 800c412:	4603      	mov	r3, r0
 800c414:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800c416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800c41e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c422:	e050      	b.n	800c4c6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3314      	adds	r3, #20
 800c428:	4618      	mov	r0, r3
 800c42a:	f008 f9ec 	bl	8014806 <sys_mbox_valid>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d005      	beq.n	800c440 <netconn_accept+0x78>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7f1b      	ldrb	r3, [r3, #28]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800c440:	f06f 030e 	mvn.w	r3, #14
 800c444:	e03f      	b.n	800c4c6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7f1b      	ldrb	r3, [r3, #28]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00e      	beq.n	800c470 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	3314      	adds	r3, #20
 800c456:	f107 020c 	add.w	r2, r7, #12
 800c45a:	4611      	mov	r1, r2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f008 f9b6 	bl	80147ce <sys_arch_mbox_tryfetch>
 800c462:	4603      	mov	r3, r0
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c468:	d10a      	bne.n	800c480 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800c46a:	f06f 0306 	mvn.w	r3, #6
 800c46e:	e02a      	b.n	800c4c6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3314      	adds	r3, #20
 800c474:	f107 010c 	add.w	r1, r7, #12
 800c478:	2200      	movs	r2, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f008 f968 	bl	8014750 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <netconn_accept+0xcc>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f107 0213 	add.w	r2, r7, #19
 800c49a:	4611      	mov	r1, r2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 fb75 	bl	800cb8c <lwip_netconn_is_err_msg>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800c4a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4ac:	e00b      	b.n	800c4c6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800c4b4:	f06f 030e 	mvn.w	r3, #14
 800c4b8:	e005      	b.n	800c4c6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c4c4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0801f73c 	.word	0x0801f73c
 800c4d4:	0801f934 	.word	0x0801f934
 800c4d8:	0801f7b4 	.word	0x0801f7b4
 800c4dc:	0801f954 	.word	0x0801f954

0800c4e0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d109      	bne.n	800c50c <netconn_recv_data+0x2c>
 800c4f8:	4b58      	ldr	r3, [pc, #352]	; (800c65c <netconn_recv_data+0x17c>)
 800c4fa:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c4fe:	4958      	ldr	r1, [pc, #352]	; (800c660 <netconn_recv_data+0x180>)
 800c500:	4858      	ldr	r0, [pc, #352]	; (800c664 <netconn_recv_data+0x184>)
 800c502:	f00f ffdf 	bl	801c4c4 <iprintf>
 800c506:	f06f 030f 	mvn.w	r3, #15
 800c50a:	e0a2      	b.n	800c652 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <netconn_recv_data+0x4c>
 800c518:	4b50      	ldr	r3, [pc, #320]	; (800c65c <netconn_recv_data+0x17c>)
 800c51a:	f240 224a 	movw	r2, #586	; 0x24a
 800c51e:	4952      	ldr	r1, [pc, #328]	; (800c668 <netconn_recv_data+0x188>)
 800c520:	4850      	ldr	r0, [pc, #320]	; (800c664 <netconn_recv_data+0x184>)
 800c522:	f00f ffcf 	bl	801c4c4 <iprintf>
 800c526:	f06f 030f 	mvn.w	r3, #15
 800c52a:	e092      	b.n	800c652 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3310      	adds	r3, #16
 800c530:	4618      	mov	r0, r3
 800c532:	f008 f968 	bl	8014806 <sys_mbox_valid>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10e      	bne.n	800c55a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fad4 	bl	800caea <netconn_err>
 800c542:	4603      	mov	r3, r0
 800c544:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c546:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c54e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c552:	e07e      	b.n	800c652 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c554:	f06f 030a 	mvn.w	r3, #10
 800c558:	e07b      	b.n	800c652 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	7f1b      	ldrb	r3, [r3, #28]
 800c55e:	f003 0302 	and.w	r3, r3, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10f      	bne.n	800c586 <netconn_recv_data+0xa6>
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10a      	bne.n	800c586 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	7f1b      	ldrb	r3, [r3, #28]
 800c574:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d104      	bne.n	800c586 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d023      	beq.n	800c5ce <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3310      	adds	r3, #16
 800c58a:	f107 0218 	add.w	r2, r7, #24
 800c58e:	4611      	mov	r1, r2
 800c590:	4618      	mov	r0, r3
 800c592:	f008 f91c 	bl	80147ce <sys_arch_mbox_tryfetch>
 800c596:	4603      	mov	r3, r0
 800c598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59c:	d11f      	bne.n	800c5de <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 faa3 	bl	800caea <netconn_err>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c5a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c5b0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c5b4:	e04d      	b.n	800c652 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	7f1b      	ldrb	r3, [r3, #28]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c5c2:	f06f 030a 	mvn.w	r3, #10
 800c5c6:	e044      	b.n	800c652 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c5c8:	f06f 0306 	mvn.w	r3, #6
 800c5cc:	e041      	b.n	800c652 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3310      	adds	r3, #16
 800c5d2:	f107 0118 	add.w	r1, r7, #24
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f008 f8b9 	bl	8014750 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5e6:	2b10      	cmp	r3, #16
 800c5e8:	d117      	bne.n	800c61a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	f107 0217 	add.w	r2, r7, #23
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 faca 	bl	800cb8c <lwip_netconn_is_err_msg>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d009      	beq.n	800c612 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c5fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c602:	f113 0f0f 	cmn.w	r3, #15
 800c606:	d101      	bne.n	800c60c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	e022      	b.n	800c652 <netconn_recv_data+0x172>
      }
      return err;
 800c60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c610:	e01f      	b.n	800c652 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	891b      	ldrh	r3, [r3, #8]
 800c616:	83fb      	strh	r3, [r7, #30]
 800c618:	e00d      	b.n	800c636 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d106      	bne.n	800c62e <netconn_recv_data+0x14e>
 800c620:	4b0e      	ldr	r3, [pc, #56]	; (800c65c <netconn_recv_data+0x17c>)
 800c622:	f240 2291 	movw	r2, #657	; 0x291
 800c626:	4911      	ldr	r1, [pc, #68]	; (800c66c <netconn_recv_data+0x18c>)
 800c628:	480e      	ldr	r0, [pc, #56]	; (800c664 <netconn_recv_data+0x184>)
 800c62a:	f00f ff4b 	bl	801c4c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	891b      	ldrh	r3, [r3, #8]
 800c634:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <netconn_recv_data+0x16a>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c642:	8bfa      	ldrh	r2, [r7, #30]
 800c644:	2101      	movs	r1, #1
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	0801f73c 	.word	0x0801f73c
 800c660:	0801f974 	.word	0x0801f974
 800c664:	0801f7b4 	.word	0x0801f7b4
 800c668:	0801f994 	.word	0x0801f994
 800c66c:	0801f9b0 	.word	0x0801f9b0

0800c670 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <netconn_tcp_recvd_msg+0x1e>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c68a:	2b10      	cmp	r3, #16
 800c68c:	d009      	beq.n	800c6a2 <netconn_tcp_recvd_msg+0x32>
 800c68e:	4b0c      	ldr	r3, [pc, #48]	; (800c6c0 <netconn_tcp_recvd_msg+0x50>)
 800c690:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c694:	490b      	ldr	r1, [pc, #44]	; (800c6c4 <netconn_tcp_recvd_msg+0x54>)
 800c696:	480c      	ldr	r0, [pc, #48]	; (800c6c8 <netconn_tcp_recvd_msg+0x58>)
 800c698:	f00f ff14 	bl	801c4c4 <iprintf>
 800c69c:	f06f 030f 	mvn.w	r3, #15
 800c6a0:	e00a      	b.n	800c6b8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	4806      	ldr	r0, [pc, #24]	; (800c6cc <netconn_tcp_recvd_msg+0x5c>)
 800c6b2:	f7ff fd4d 	bl	800c150 <netconn_apimsg>
 800c6b6:	4603      	mov	r3, r0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	0801f73c 	.word	0x0801f73c
 800c6c4:	0801f9bc 	.word	0x0801f9bc
 800c6c8:	0801f7b4 	.word	0x0801f7b4
 800c6cc:	0800dc99 	.word	0x0800dc99

0800c6d0 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b090      	sub	sp, #64	; 0x40
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3310      	adds	r3, #16
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f008 f88f 	bl	8014806 <sys_mbox_valid>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d102      	bne.n	800c6f4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c6ee:	f06f 030a 	mvn.w	r3, #10
 800c6f2:	e06d      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	7f1b      	ldrb	r3, [r3, #28]
 800c6f8:	b25b      	sxtb	r3, r3
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da07      	bge.n	800c70e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	7f1b      	ldrb	r3, [r3, #28]
 800c702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c706:	b2da      	uxtb	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c70c:	e039      	b.n	800c782 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	461a      	mov	r2, r3
 800c712:	68b9      	ldr	r1, [r7, #8]
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fee3 	bl	800c4e0 <netconn_recv_data>
 800c71a:	4603      	mov	r3, r0
 800c71c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c720:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c728:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c72c:	e050      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	f003 0308 	and.w	r3, r3, #8
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10e      	bne.n	800c75c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <netconn_recv_data_tcp+0x7a>
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	891b      	ldrh	r3, [r3, #8]
 800c748:	e000      	b.n	800c74c <netconn_recv_data_tcp+0x7c>
 800c74a:	2301      	movs	r3, #1
 800c74c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c74e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c750:	f107 0214 	add.w	r2, r7, #20
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff ff8a 	bl	800c670 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d134      	bne.n	800c7cc <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	f003 0310 	and.w	r3, r3, #16
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d009      	beq.n	800c780 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	7f1b      	ldrb	r3, [r3, #28]
 800c770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c774:	b2da      	uxtb	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c77a:	f06f 0306 	mvn.w	r3, #6
 800c77e:	e027      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c780:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c786:	2b00      	cmp	r3, #0
 800c788:	d005      	beq.n	800c796 <netconn_recv_data_tcp+0xc6>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78e:	2200      	movs	r2, #0
 800c790:	2101      	movs	r1, #1
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10f      	bne.n	800c7be <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f000 f9a3 	bl	800caea <netconn_err>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c7aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <netconn_recv_data_tcp+0xe8>
          return err;
 800c7b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7b6:	e00b      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c7b8:	f06f 030d 	mvn.w	r3, #13
 800c7bc:	e008      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c7be:	2101      	movs	r1, #1
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 f955 	bl	800ca70 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c7c6:	f06f 030e 	mvn.w	r3, #14
 800c7ca:	e001      	b.n	800c7d0 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c7cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3740      	adds	r7, #64	; 0x40
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d109      	bne.n	800c800 <netconn_recv+0x28>
 800c7ec:	4b32      	ldr	r3, [pc, #200]	; (800c8b8 <netconn_recv+0xe0>)
 800c7ee:	f240 3263 	movw	r2, #867	; 0x363
 800c7f2:	4932      	ldr	r1, [pc, #200]	; (800c8bc <netconn_recv+0xe4>)
 800c7f4:	4832      	ldr	r0, [pc, #200]	; (800c8c0 <netconn_recv+0xe8>)
 800c7f6:	f00f fe65 	bl	801c4c4 <iprintf>
 800c7fa:	f06f 030f 	mvn.w	r3, #15
 800c7fe:	e056      	b.n	800c8ae <netconn_recv+0xd6>
  *new_buf = NULL;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d109      	bne.n	800c820 <netconn_recv+0x48>
 800c80c:	4b2a      	ldr	r3, [pc, #168]	; (800c8b8 <netconn_recv+0xe0>)
 800c80e:	f240 3265 	movw	r2, #869	; 0x365
 800c812:	492c      	ldr	r1, [pc, #176]	; (800c8c4 <netconn_recv+0xec>)
 800c814:	482a      	ldr	r0, [pc, #168]	; (800c8c0 <netconn_recv+0xe8>)
 800c816:	f00f fe55 	bl	801c4c4 <iprintf>
 800c81a:	f06f 030f 	mvn.w	r3, #15
 800c81e:	e046      	b.n	800c8ae <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c828:	2b10      	cmp	r3, #16
 800c82a:	d13a      	bne.n	800c8a2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c830:	2006      	movs	r0, #6
 800c832:	f006 fcd5 	bl	80131e0 <memp_malloc>
 800c836:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <netconn_recv+0x6c>
      return ERR_MEM;
 800c83e:	f04f 33ff 	mov.w	r3, #4294967295
 800c842:	e034      	b.n	800c8ae <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c844:	f107 030c 	add.w	r3, r7, #12
 800c848:	2200      	movs	r2, #0
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff ff3f 	bl	800c6d0 <netconn_recv_data_tcp>
 800c852:	4603      	mov	r3, r0
 800c854:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c85e:	6979      	ldr	r1, [r7, #20]
 800c860:	2006      	movs	r0, #6
 800c862:	f006 fd33 	bl	80132cc <memp_free>
      return err;
 800c866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c86a:	e020      	b.n	800c8ae <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <netconn_recv+0xa8>
 800c872:	4b11      	ldr	r3, [pc, #68]	; (800c8b8 <netconn_recv+0xe0>)
 800c874:	f240 3279 	movw	r2, #889	; 0x379
 800c878:	4913      	ldr	r1, [pc, #76]	; (800c8c8 <netconn_recv+0xf0>)
 800c87a:	4811      	ldr	r0, [pc, #68]	; (800c8c0 <netconn_recv+0xe8>)
 800c87c:	f00f fe22 	bl	801c4c4 <iprintf>

    buf->p = p;
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2200      	movs	r2, #0
 800c890:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2200      	movs	r2, #0
 800c896:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e005      	b.n	800c8ae <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fe1a 	bl	800c4e0 <netconn_recv_data>
 800c8ac:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	0801f73c 	.word	0x0801f73c
 800c8bc:	0801f974 	.word	0x0801f974
 800c8c0:	0801f7b4 	.word	0x0801f7b4
 800c8c4:	0801f994 	.word	0x0801f994
 800c8c8:	0801fa0c 	.word	0x0801fa0c

0800c8cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af02      	add	r7, sp, #8
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	f107 0110 	add.w	r1, r7, #16
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f805 	bl	800c900 <netconn_write_vectors_partly>
 800c8f6:	4603      	mov	r3, r0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b092      	sub	sp, #72	; 0x48
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4611      	mov	r1, r2
 800c90c:	461a      	mov	r2, r3
 800c90e:	460b      	mov	r3, r1
 800c910:	80fb      	strh	r3, [r7, #6]
 800c912:	4613      	mov	r3, r2
 800c914:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d109      	bne.n	800c930 <netconn_write_vectors_partly+0x30>
 800c91c:	4b4e      	ldr	r3, [pc, #312]	; (800ca58 <netconn_write_vectors_partly+0x158>)
 800c91e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c922:	494e      	ldr	r1, [pc, #312]	; (800ca5c <netconn_write_vectors_partly+0x15c>)
 800c924:	484e      	ldr	r0, [pc, #312]	; (800ca60 <netconn_write_vectors_partly+0x160>)
 800c926:	f00f fdcd 	bl	801c4c4 <iprintf>
 800c92a:	f06f 030f 	mvn.w	r3, #15
 800c92e:	e08e      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c938:	2b10      	cmp	r3, #16
 800c93a:	d009      	beq.n	800c950 <netconn_write_vectors_partly+0x50>
 800c93c:	4b46      	ldr	r3, [pc, #280]	; (800ca58 <netconn_write_vectors_partly+0x158>)
 800c93e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c942:	4948      	ldr	r1, [pc, #288]	; (800ca64 <netconn_write_vectors_partly+0x164>)
 800c944:	4846      	ldr	r0, [pc, #280]	; (800ca60 <netconn_write_vectors_partly+0x160>)
 800c946:	f00f fdbd 	bl	801c4c4 <iprintf>
 800c94a:	f06f 0305 	mvn.w	r3, #5
 800c94e:	e07e      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	7f1b      	ldrb	r3, [r3, #28]
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <netconn_write_vectors_partly+0x66>
 800c95c:	797b      	ldrb	r3, [r7, #5]
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <netconn_write_vectors_partly+0x6a>
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <netconn_write_vectors_partly+0x6c>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c970:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d005      	beq.n	800c984 <netconn_write_vectors_partly+0x84>
 800c978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d102      	bne.n	800c984 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c97e:	f06f 0305 	mvn.w	r3, #5
 800c982:	e064      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c988:	2300      	movs	r3, #0
 800c98a:	643b      	str	r3, [r7, #64]	; 0x40
 800c98c:	e015      	b.n	800c9ba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	4413      	add	r3, r2
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c99a:	4413      	add	r3, r2
 800c99c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800c99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d202      	bcs.n	800c9b4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c9ae:	f06f 0305 	mvn.w	r3, #5
 800c9b2:	e04c      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ba:	88fb      	ldrh	r3, [r7, #6]
 800c9bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	dbe5      	blt.n	800c98e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c9c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e040      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	da0a      	bge.n	800c9e8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c9d8:	f06f 0305 	mvn.w	r3, #5
 800c9dc:	e037      	b.n	800ca4e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c9de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c9e2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c9f0:	88fb      	ldrh	r3, [r7, #6]
 800c9f2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c9f8:	797b      	ldrb	r3, [r7, #5]
 800c9fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ca06:	f107 0314 	add.w	r3, r7, #20
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4816      	ldr	r0, [pc, #88]	; (800ca68 <netconn_write_vectors_partly+0x168>)
 800ca0e:	f7ff fb9f 	bl	800c150 <netconn_apimsg>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800ca18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d114      	bne.n	800ca4a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ca20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ca26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ca2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d006      	beq.n	800ca4a <netconn_write_vectors_partly+0x14a>
 800ca3c:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <netconn_write_vectors_partly+0x158>)
 800ca3e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca42:	490a      	ldr	r1, [pc, #40]	; (800ca6c <netconn_write_vectors_partly+0x16c>)
 800ca44:	4806      	ldr	r0, [pc, #24]	; (800ca60 <netconn_write_vectors_partly+0x160>)
 800ca46:	f00f fd3d 	bl	801c4c4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ca4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3748      	adds	r7, #72	; 0x48
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	0801f73c 	.word	0x0801f73c
 800ca5c:	0801fa34 	.word	0x0801fa34
 800ca60:	0801f7b4 	.word	0x0801f7b4
 800ca64:	0801fa50 	.word	0x0801fa50
 800ca68:	0800e09d 	.word	0x0800e09d
 800ca6c:	0801fa74 	.word	0x0801fa74

0800ca70 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08c      	sub	sp, #48	; 0x30
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d109      	bne.n	800ca96 <netconn_close_shutdown+0x26>
 800ca82:	4b0f      	ldr	r3, [pc, #60]	; (800cac0 <netconn_close_shutdown+0x50>)
 800ca84:	f240 4247 	movw	r2, #1095	; 0x447
 800ca88:	490e      	ldr	r1, [pc, #56]	; (800cac4 <netconn_close_shutdown+0x54>)
 800ca8a:	480f      	ldr	r0, [pc, #60]	; (800cac8 <netconn_close_shutdown+0x58>)
 800ca8c:	f00f fd1a 	bl	801c4c4 <iprintf>
 800ca90:	f06f 030f 	mvn.w	r3, #15
 800ca94:	e010      	b.n	800cab8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ca9a:	78fb      	ldrb	r3, [r7, #3]
 800ca9c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ca9e:	2329      	movs	r3, #41	; 0x29
 800caa0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800caa2:	f107 030c 	add.w	r3, r7, #12
 800caa6:	4619      	mov	r1, r3
 800caa8:	4808      	ldr	r0, [pc, #32]	; (800cacc <netconn_close_shutdown+0x5c>)
 800caaa:	f7ff fb51 	bl	800c150 <netconn_apimsg>
 800caae:	4603      	mov	r3, r0
 800cab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cab4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3730      	adds	r7, #48	; 0x30
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	0801f73c 	.word	0x0801f73c
 800cac4:	0801fa98 	.word	0x0801fa98
 800cac8:	0801f7b4 	.word	0x0801f7b4
 800cacc:	0800e1b5 	.word	0x0800e1b5

0800cad0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800cad8:	2103      	movs	r1, #3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff ffc8 	bl	800ca70 <netconn_close_shutdown>
 800cae0:	4603      	mov	r3, r0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <netconn_err+0x12>
    return ERR_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	e00d      	b.n	800cb18 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cafc:	f007 ff9e 	bl	8014a3c <sys_arch_protect>
 800cb00:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7a1b      	ldrb	r3, [r3, #8]
 800cb06:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f007 ffa2 	bl	8014a58 <sys_arch_unprotect>
  return err;
 800cb14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cb2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb2e:	f113 0f0d 	cmn.w	r3, #13
 800cb32:	d009      	beq.n	800cb48 <lwip_netconn_err_to_msg+0x28>
 800cb34:	f113 0f0d 	cmn.w	r3, #13
 800cb38:	dc0c      	bgt.n	800cb54 <lwip_netconn_err_to_msg+0x34>
 800cb3a:	f113 0f0f 	cmn.w	r3, #15
 800cb3e:	d007      	beq.n	800cb50 <lwip_netconn_err_to_msg+0x30>
 800cb40:	f113 0f0e 	cmn.w	r3, #14
 800cb44:	d002      	beq.n	800cb4c <lwip_netconn_err_to_msg+0x2c>
 800cb46:	e005      	b.n	800cb54 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <lwip_netconn_err_to_msg+0x54>)
 800cb4a:	e00e      	b.n	800cb6a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <lwip_netconn_err_to_msg+0x58>)
 800cb4e:	e00c      	b.n	800cb6a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <lwip_netconn_err_to_msg+0x5c>)
 800cb52:	e00a      	b.n	800cb6a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800cb54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <lwip_netconn_err_to_msg+0x48>
 800cb5c:	4b08      	ldr	r3, [pc, #32]	; (800cb80 <lwip_netconn_err_to_msg+0x60>)
 800cb5e:	227d      	movs	r2, #125	; 0x7d
 800cb60:	4908      	ldr	r1, [pc, #32]	; (800cb84 <lwip_netconn_err_to_msg+0x64>)
 800cb62:	4809      	ldr	r0, [pc, #36]	; (800cb88 <lwip_netconn_err_to_msg+0x68>)
 800cb64:	f00f fcae 	bl	801c4c4 <iprintf>
      return NULL;
 800cb68:	2300      	movs	r3, #0
  }
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	08023244 	.word	0x08023244
 800cb78:	08023245 	.word	0x08023245
 800cb7c:	08023246 	.word	0x08023246
 800cb80:	0801fab4 	.word	0x0801fab4
 800cb84:	0801fb08 	.word	0x0801fb08
 800cb88:	0801fb18 	.word	0x0801fb18

0800cb8c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d105      	bne.n	800cba8 <lwip_netconn_is_err_msg+0x1c>
 800cb9c:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <lwip_netconn_is_err_msg+0x5c>)
 800cb9e:	2285      	movs	r2, #133	; 0x85
 800cba0:	4912      	ldr	r1, [pc, #72]	; (800cbec <lwip_netconn_is_err_msg+0x60>)
 800cba2:	4813      	ldr	r0, [pc, #76]	; (800cbf0 <lwip_netconn_is_err_msg+0x64>)
 800cba4:	f00f fc8e 	bl	801c4c4 <iprintf>

  if (msg == &netconn_aborted) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a12      	ldr	r2, [pc, #72]	; (800cbf4 <lwip_netconn_is_err_msg+0x68>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d104      	bne.n	800cbba <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	22f3      	movs	r2, #243	; 0xf3
 800cbb4:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e012      	b.n	800cbe0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a0e      	ldr	r2, [pc, #56]	; (800cbf8 <lwip_netconn_is_err_msg+0x6c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d104      	bne.n	800cbcc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	22f2      	movs	r2, #242	; 0xf2
 800cbc6:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e009      	b.n	800cbe0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a0b      	ldr	r2, [pc, #44]	; (800cbfc <lwip_netconn_is_err_msg+0x70>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d104      	bne.n	800cbde <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	22f1      	movs	r2, #241	; 0xf1
 800cbd8:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e000      	b.n	800cbe0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	0801fab4 	.word	0x0801fab4
 800cbec:	0801fb40 	.word	0x0801fb40
 800cbf0:	0801fb18 	.word	0x0801fb18
 800cbf4:	08023244 	.word	0x08023244
 800cbf8:	08023245 	.word	0x08023245
 800cbfc:	08023246 	.word	0x08023246

0800cc00 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <recv_udp+0x20>
 800cc14:	4b34      	ldr	r3, [pc, #208]	; (800cce8 <recv_udp+0xe8>)
 800cc16:	22e5      	movs	r2, #229	; 0xe5
 800cc18:	4934      	ldr	r1, [pc, #208]	; (800ccec <recv_udp+0xec>)
 800cc1a:	4835      	ldr	r0, [pc, #212]	; (800ccf0 <recv_udp+0xf0>)
 800cc1c:	f00f fc52 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d105      	bne.n	800cc32 <recv_udp+0x32>
 800cc26:	4b30      	ldr	r3, [pc, #192]	; (800cce8 <recv_udp+0xe8>)
 800cc28:	22e6      	movs	r2, #230	; 0xe6
 800cc2a:	4932      	ldr	r1, [pc, #200]	; (800ccf4 <recv_udp+0xf4>)
 800cc2c:	4830      	ldr	r0, [pc, #192]	; (800ccf0 <recv_udp+0xf0>)
 800cc2e:	f00f fc49 	bl	801c4c4 <iprintf>
  conn = (struct netconn *)arg;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <recv_udp+0x44>
    pbuf_free(p);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f007 fa8f 	bl	8014160 <pbuf_free>
    return;
 800cc42:	e04d      	b.n	800cce0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d005      	beq.n	800cc5a <recv_udp+0x5a>
 800cc4e:	4b26      	ldr	r3, [pc, #152]	; (800cce8 <recv_udp+0xe8>)
 800cc50:	22ee      	movs	r2, #238	; 0xee
 800cc52:	4929      	ldr	r1, [pc, #164]	; (800ccf8 <recv_udp+0xf8>)
 800cc54:	4826      	ldr	r0, [pc, #152]	; (800ccf0 <recv_udp+0xf0>)
 800cc56:	f00f fc35 	bl	801c4c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f007 fdd1 	bl	8014806 <sys_mbox_valid>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d103      	bne.n	800cc72 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f007 fa78 	bl	8014160 <pbuf_free>
    return;
 800cc70:	e036      	b.n	800cce0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cc72:	2006      	movs	r0, #6
 800cc74:	f006 fab4 	bl	80131e0 <memp_malloc>
 800cc78:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d103      	bne.n	800cc88 <recv_udp+0x88>
    pbuf_free(p);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f007 fa6d 	bl	8014160 <pbuf_free>
    return;
 800cc86:	e02b      	b.n	800cce0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <recv_udp+0xa0>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	e000      	b.n	800cca2 <recv_udp+0xa2>
 800cca0:	2300      	movs	r3, #0
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ccaa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	891b      	ldrh	r3, [r3, #8]
 800ccb0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	69b9      	ldr	r1, [r7, #24]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f007 fd2f 	bl	801471c <sys_mbox_trypost>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d003      	beq.n	800cccc <recv_udp+0xcc>
    netbuf_delete(buf);
 800ccc4:	69b8      	ldr	r0, [r7, #24]
 800ccc6:	f006 fb2b 	bl	8013320 <netbuf_delete>
    return;
 800ccca:	e009      	b.n	800cce0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d005      	beq.n	800cce0 <recv_udp+0xe0>
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	8afa      	ldrh	r2, [r7, #22]
 800ccda:	2100      	movs	r1, #0
 800ccdc:	69f8      	ldr	r0, [r7, #28]
 800ccde:	4798      	blx	r3
  }
}
 800cce0:	3720      	adds	r7, #32
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	0801fab4 	.word	0x0801fab4
 800ccec:	0801fb4c 	.word	0x0801fb4c
 800ccf0:	0801fb18 	.word	0x0801fb18
 800ccf4:	0801fb70 	.word	0x0801fb70
 800ccf8:	0801fb90 	.word	0x0801fb90

0800ccfc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d106      	bne.n	800cd1e <recv_tcp+0x22>
 800cd10:	4b36      	ldr	r3, [pc, #216]	; (800cdec <recv_tcp+0xf0>)
 800cd12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cd16:	4936      	ldr	r1, [pc, #216]	; (800cdf0 <recv_tcp+0xf4>)
 800cd18:	4836      	ldr	r0, [pc, #216]	; (800cdf4 <recv_tcp+0xf8>)
 800cd1a:	f00f fbd3 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d106      	bne.n	800cd32 <recv_tcp+0x36>
 800cd24:	4b31      	ldr	r3, [pc, #196]	; (800cdec <recv_tcp+0xf0>)
 800cd26:	f240 122d 	movw	r2, #301	; 0x12d
 800cd2a:	4933      	ldr	r1, [pc, #204]	; (800cdf8 <recv_tcp+0xfc>)
 800cd2c:	4831      	ldr	r0, [pc, #196]	; (800cdf4 <recv_tcp+0xf8>)
 800cd2e:	f00f fbc9 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cd32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <recv_tcp+0x4c>
 800cd3a:	4b2c      	ldr	r3, [pc, #176]	; (800cdec <recv_tcp+0xf0>)
 800cd3c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cd40:	492e      	ldr	r1, [pc, #184]	; (800cdfc <recv_tcp+0x100>)
 800cd42:	482c      	ldr	r0, [pc, #176]	; (800cdf4 <recv_tcp+0xf8>)
 800cd44:	f00f fbbe 	bl	801c4c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <recv_tcp+0x5c>
    return ERR_VAL;
 800cd52:	f06f 0305 	mvn.w	r3, #5
 800cd56:	e045      	b.n	800cde4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d006      	beq.n	800cd70 <recv_tcp+0x74>
 800cd62:	4b22      	ldr	r3, [pc, #136]	; (800cdec <recv_tcp+0xf0>)
 800cd64:	f240 1235 	movw	r2, #309	; 0x135
 800cd68:	4925      	ldr	r1, [pc, #148]	; (800ce00 <recv_tcp+0x104>)
 800cd6a:	4822      	ldr	r0, [pc, #136]	; (800cdf4 <recv_tcp+0xf8>)
 800cd6c:	f00f fbaa 	bl	801c4c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	3310      	adds	r3, #16
 800cd74:	4618      	mov	r0, r3
 800cd76:	f007 fd46 	bl	8014806 <sys_mbox_valid>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10d      	bne.n	800cd9c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d008      	beq.n	800cd98 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	891b      	ldrh	r3, [r3, #8]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68b8      	ldr	r0, [r7, #8]
 800cd8e:	f008 fb91 	bl	80154b4 <tcp_recved>
      pbuf_free(p);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f007 f9e4 	bl	8014160 <pbuf_free>
    }
    return ERR_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e023      	b.n	800cde4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d005      	beq.n	800cdae <recv_tcp+0xb2>
    msg = p;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	891b      	ldrh	r3, [r3, #8]
 800cdaa:	83fb      	strh	r3, [r7, #30]
 800cdac:	e003      	b.n	800cdb6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800cdae:	4b15      	ldr	r3, [pc, #84]	; (800ce04 <recv_tcp+0x108>)
 800cdb0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	3310      	adds	r3, #16
 800cdba:	69b9      	ldr	r1, [r7, #24]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f007 fcad 	bl	801471c <sys_mbox_trypost>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdcc:	e00a      	b.n	800cde4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d005      	beq.n	800cde2 <recv_tcp+0xe6>
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	8bfa      	ldrh	r2, [r7, #30]
 800cddc:	2100      	movs	r1, #0
 800cdde:	6978      	ldr	r0, [r7, #20]
 800cde0:	4798      	blx	r3
  }

  return ERR_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3720      	adds	r7, #32
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	0801fab4 	.word	0x0801fab4
 800cdf0:	0801fbb0 	.word	0x0801fbb0
 800cdf4:	0801fb18 	.word	0x0801fb18
 800cdf8:	0801fbd4 	.word	0x0801fbd4
 800cdfc:	0801fbf4 	.word	0x0801fbf4
 800ce00:	0801fc0c 	.word	0x0801fc0c
 800ce04:	08023246 	.word	0x08023246

0800ce08 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d106      	bne.n	800ce2a <poll_tcp+0x22>
 800ce1c:	4b29      	ldr	r3, [pc, #164]	; (800cec4 <poll_tcp+0xbc>)
 800ce1e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ce22:	4929      	ldr	r1, [pc, #164]	; (800cec8 <poll_tcp+0xc0>)
 800ce24:	4829      	ldr	r0, [pc, #164]	; (800cecc <poll_tcp+0xc4>)
 800ce26:	f00f fb4d 	bl	801c4c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	785b      	ldrb	r3, [r3, #1]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d104      	bne.n	800ce3c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ce32:	2101      	movs	r1, #1
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f000 ff65 	bl	800dd04 <lwip_netconn_do_writemore>
 800ce3a:	e016      	b.n	800ce6a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	785b      	ldrb	r3, [r3, #1]
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	d112      	bne.n	800ce6a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6a1b      	ldr	r3, [r3, #32]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00a      	beq.n	800ce62 <poll_tcp+0x5a>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	7a5b      	ldrb	r3, [r3, #9]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	7a5a      	ldrb	r2, [r3, #9]
 800ce5c:	3a01      	subs	r2, #1
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ce62:	2101      	movs	r1, #1
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fbf7 	bl	800d658 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	7f1b      	ldrb	r3, [r3, #28]
 800ce6e:	f003 0310 	and.w	r3, r3, #16
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d021      	beq.n	800ceba <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01d      	beq.n	800ceba <poll_tcp+0xb2>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ce86:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ce8a:	d316      	bcc.n	800ceba <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	d810      	bhi.n	800ceba <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	7f1b      	ldrb	r3, [r3, #28]
 800ce9c:	f023 0310 	bic.w	r3, r3, #16
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d005      	beq.n	800ceba <poll_tcp+0xb2>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2102      	movs	r1, #2
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	0801fab4 	.word	0x0801fab4
 800cec8:	0801fc2c 	.word	0x0801fc2c
 800cecc:	0801fb18 	.word	0x0801fb18

0800ced0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	4613      	mov	r3, r2
 800cedc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <sent_tcp+0x26>
 800cee8:	4b20      	ldr	r3, [pc, #128]	; (800cf6c <sent_tcp+0x9c>)
 800ceea:	f240 1293 	movw	r2, #403	; 0x193
 800ceee:	4920      	ldr	r1, [pc, #128]	; (800cf70 <sent_tcp+0xa0>)
 800cef0:	4820      	ldr	r0, [pc, #128]	; (800cf74 <sent_tcp+0xa4>)
 800cef2:	f00f fae7 	bl	801c4c4 <iprintf>

  if (conn) {
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d032      	beq.n	800cf62 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	785b      	ldrb	r3, [r3, #1]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d104      	bne.n	800cf0e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cf04:	2101      	movs	r1, #1
 800cf06:	6978      	ldr	r0, [r7, #20]
 800cf08:	f000 fefc 	bl	800dd04 <lwip_netconn_do_writemore>
 800cf0c:	e007      	b.n	800cf1e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	d103      	bne.n	800cf1e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cf16:	2101      	movs	r1, #1
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	f000 fb9d 	bl	800d658 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01d      	beq.n	800cf62 <sent_tcp+0x92>
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cf2e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cf32:	d316      	bcc.n	800cf62 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf3c:	2b04      	cmp	r3, #4
 800cf3e:	d810      	bhi.n	800cf62 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	7f1b      	ldrb	r3, [r3, #28]
 800cf44:	f023 0310 	bic.w	r3, r3, #16
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d005      	beq.n	800cf62 <sent_tcp+0x92>
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	88fa      	ldrh	r2, [r7, #6]
 800cf5c:	2102      	movs	r1, #2
 800cf5e:	6978      	ldr	r0, [r7, #20]
 800cf60:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	0801fab4 	.word	0x0801fab4
 800cf70:	0801fc2c 	.word	0x0801fc2c
 800cf74:	0801fb18 	.word	0x0801fb18

0800cf78 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b088      	sub	sp, #32
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	460b      	mov	r3, r1
 800cf82:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <err_tcp+0x24>
 800cf8e:	4b5f      	ldr	r3, [pc, #380]	; (800d10c <err_tcp+0x194>)
 800cf90:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cf94:	495e      	ldr	r1, [pc, #376]	; (800d110 <err_tcp+0x198>)
 800cf96:	485f      	ldr	r0, [pc, #380]	; (800d114 <err_tcp+0x19c>)
 800cf98:	f00f fa94 	bl	801c4c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800cf9c:	f007 fd4e 	bl	8014a3c <sys_arch_protect>
 800cfa0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	78fa      	ldrb	r2, [r7, #3]
 800cfac:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	7f1b      	ldrb	r3, [r3, #28]
 800cfb2:	f043 0301 	orr.w	r3, r3, #1
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800cfc8:	69b8      	ldr	r0, [r7, #24]
 800cfca:	f007 fd45 	bl	8014a58 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <err_tcp+0x6a>
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2104      	movs	r1, #4
 800cfde:	69f8      	ldr	r0, [r7, #28]
 800cfe0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d005      	beq.n	800cff6 <err_tcp+0x7e>
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	2200      	movs	r2, #0
 800cff0:	2100      	movs	r1, #0
 800cff2:	69f8      	ldr	r0, [r7, #28]
 800cff4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d005      	beq.n	800d00a <err_tcp+0x92>
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	2200      	movs	r2, #0
 800d004:	2102      	movs	r1, #2
 800d006:	69f8      	ldr	r0, [r7, #28]
 800d008:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d00a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff fd86 	bl	800cb20 <lwip_netconn_err_to_msg>
 800d014:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	3310      	adds	r3, #16
 800d01a:	4618      	mov	r0, r3
 800d01c:	f007 fbf3 	bl	8014806 <sys_mbox_valid>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d005      	beq.n	800d032 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	3310      	adds	r3, #16
 800d02a:	6939      	ldr	r1, [r7, #16]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f007 fb75 	bl	801471c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3314      	adds	r3, #20
 800d036:	4618      	mov	r0, r3
 800d038:	f007 fbe5 	bl	8014806 <sys_mbox_valid>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d005      	beq.n	800d04e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	3314      	adds	r3, #20
 800d046:	6939      	ldr	r1, [r7, #16]
 800d048:	4618      	mov	r0, r3
 800d04a:	f007 fb67 	bl	801471c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d005      	beq.n	800d060 <err_tcp+0xe8>
 800d054:	7dfb      	ldrb	r3, [r7, #23]
 800d056:	2b04      	cmp	r3, #4
 800d058:	d002      	beq.n	800d060 <err_tcp+0xe8>
 800d05a:	7dfb      	ldrb	r3, [r7, #23]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d143      	bne.n	800d0e8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	7f1b      	ldrb	r3, [r3, #28]
 800d064:	f003 0304 	and.w	r3, r3, #4
 800d068:	2b00      	cmp	r3, #0
 800d06a:	bf14      	ite	ne
 800d06c:	2301      	movne	r3, #1
 800d06e:	2300      	moveq	r3, #0
 800d070:	b2db      	uxtb	r3, r3
 800d072:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	7f1b      	ldrb	r3, [r3, #28]
 800d078:	f023 0304 	bic.w	r3, r3, #4
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d13b      	bne.n	800d100 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <err_tcp+0x126>
 800d090:	4b1e      	ldr	r3, [pc, #120]	; (800d10c <err_tcp+0x194>)
 800d092:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d096:	4920      	ldr	r1, [pc, #128]	; (800d118 <err_tcp+0x1a0>)
 800d098:	481e      	ldr	r0, [pc, #120]	; (800d114 <err_tcp+0x19c>)
 800d09a:	f00f fa13 	bl	801c4c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d104      	bne.n	800d0ae <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	711a      	strb	r2, [r3, #4]
 800d0ac:	e003      	b.n	800d0b6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	330c      	adds	r3, #12
 800d0be:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d0c0:	68b8      	ldr	r0, [r7, #8]
 800d0c2:	f007 fc31 	bl	8014928 <sys_sem_valid>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d106      	bne.n	800d0da <err_tcp+0x162>
 800d0cc:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <err_tcp+0x194>)
 800d0ce:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d0d2:	4912      	ldr	r1, [pc, #72]	; (800d11c <err_tcp+0x1a4>)
 800d0d4:	480f      	ldr	r0, [pc, #60]	; (800d114 <err_tcp+0x19c>)
 800d0d6:	f00f f9f5 	bl	801c4c4 <iprintf>
      conn->current_msg = NULL;
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f007 fc07 	bl	80148f4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d0e6:	e00b      	b.n	800d100 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d008      	beq.n	800d102 <err_tcp+0x18a>
 800d0f0:	4b06      	ldr	r3, [pc, #24]	; (800d10c <err_tcp+0x194>)
 800d0f2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d0f6:	490a      	ldr	r1, [pc, #40]	; (800d120 <err_tcp+0x1a8>)
 800d0f8:	4806      	ldr	r0, [pc, #24]	; (800d114 <err_tcp+0x19c>)
 800d0fa:	f00f f9e3 	bl	801c4c4 <iprintf>
  }
}
 800d0fe:	e000      	b.n	800d102 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d100:	bf00      	nop
}
 800d102:	bf00      	nop
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	0801fab4 	.word	0x0801fab4
 800d110:	0801fc2c 	.word	0x0801fc2c
 800d114:	0801fb18 	.word	0x0801fb18
 800d118:	0801fc3c 	.word	0x0801fc3c
 800d11c:	0801fc58 	.word	0x0801fc58
 800d120:	0801fc74 	.word	0x0801fc74

0800d124 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f009 f883 	bl	8016240 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d13a:	490a      	ldr	r1, [pc, #40]	; (800d164 <setup_tcp+0x40>)
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f009 f891 	bl	8016264 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d142:	4909      	ldr	r1, [pc, #36]	; (800d168 <setup_tcp+0x44>)
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f009 f8af 	bl	80162a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d14a:	2202      	movs	r2, #2
 800d14c:	4907      	ldr	r1, [pc, #28]	; (800d16c <setup_tcp+0x48>)
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f009 f906 	bl	8016360 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d154:	4906      	ldr	r1, [pc, #24]	; (800d170 <setup_tcp+0x4c>)
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f009 f8c8 	bl	80162ec <tcp_err>
}
 800d15c:	bf00      	nop
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	0800ccfd 	.word	0x0800ccfd
 800d168:	0800ced1 	.word	0x0800ced1
 800d16c:	0800ce09 	.word	0x0800ce09
 800d170:	0800cf79 	.word	0x0800cf79

0800d174 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b089      	sub	sp, #36	; 0x24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <accept_function+0x1e>
    return ERR_VAL;
 800d18c:	f06f 0305 	mvn.w	r3, #5
 800d190:	e0a1      	b.n	800d2d6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	3314      	adds	r3, #20
 800d196:	4618      	mov	r0, r3
 800d198:	f007 fb35 	bl	8014806 <sys_mbox_valid>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d1a2:	f06f 0305 	mvn.w	r3, #5
 800d1a6:	e096      	b.n	800d2d6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d11b      	bne.n	800d1e6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f103 0414 	add.w	r4, r3, #20
 800d1b4:	f06f 000c 	mvn.w	r0, #12
 800d1b8:	f7ff fcb2 	bl	800cb20 <lwip_netconn_err_to_msg>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f007 faab 	bl	801471c <sys_mbox_trypost>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d005      	beq.n	800d1e0 <accept_function+0x6c>
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	69f8      	ldr	r0, [r7, #28]
 800d1de:	4798      	blx	r3
    }
    return ERR_VAL;
 800d1e0:	f06f 0305 	mvn.w	r3, #5
 800d1e4:	e077      	b.n	800d2d6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800d1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d006      	beq.n	800d1fc <accept_function+0x88>
 800d1ee:	4b3c      	ldr	r3, [pc, #240]	; (800d2e0 <accept_function+0x16c>)
 800d1f0:	f240 222a 	movw	r2, #554	; 0x22a
 800d1f4:	493b      	ldr	r1, [pc, #236]	; (800d2e4 <accept_function+0x170>)
 800d1f6:	483c      	ldr	r0, [pc, #240]	; (800d2e8 <accept_function+0x174>)
 800d1f8:	f00f f964 	bl	801c4c4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	781a      	ldrb	r2, [r3, #0]
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d204:	4619      	mov	r1, r3
 800d206:	4610      	mov	r0, r2
 800d208:	f000 f8f0 	bl	800d3ec <netconn_alloc>
 800d20c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d11b      	bne.n	800d24c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	f103 0414 	add.w	r4, r3, #20
 800d21a:	f06f 000c 	mvn.w	r0, #12
 800d21e:	f7ff fc7f 	bl	800cb20 <lwip_netconn_err_to_msg>
 800d222:	4603      	mov	r3, r0
 800d224:	4619      	mov	r1, r3
 800d226:	4620      	mov	r0, r4
 800d228:	f007 fa78 	bl	801471c <sys_mbox_trypost>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d109      	bne.n	800d246 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d236:	2b00      	cmp	r3, #0
 800d238:	d005      	beq.n	800d246 <accept_function+0xd2>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23e:	2200      	movs	r2, #0
 800d240:	2100      	movs	r1, #0
 800d242:	69f8      	ldr	r0, [r7, #28]
 800d244:	4798      	blx	r3
    }
    return ERR_MEM;
 800d246:	f04f 33ff 	mov.w	r3, #4294967295
 800d24a:	e044      	b.n	800d2d6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d252:	69b8      	ldr	r0, [r7, #24]
 800d254:	f7ff ff66 	bl	800d124 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	3314      	adds	r3, #20
 800d25c:	69b9      	ldr	r1, [r7, #24]
 800d25e:	4618      	mov	r0, r3
 800d260:	f007 fa5c 	bl	801471c <sys_mbox_trypost>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02a      	beq.n	800d2c0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d270:	2100      	movs	r1, #0
 800d272:	6978      	ldr	r0, [r7, #20]
 800d274:	f008 ffe4 	bl	8016240 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d278:	2100      	movs	r1, #0
 800d27a:	6978      	ldr	r0, [r7, #20]
 800d27c:	f008 fff2 	bl	8016264 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d280:	2100      	movs	r1, #0
 800d282:	6978      	ldr	r0, [r7, #20]
 800d284:	f009 f810 	bl	80162a8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d288:	2200      	movs	r2, #0
 800d28a:	2100      	movs	r1, #0
 800d28c:	6978      	ldr	r0, [r7, #20]
 800d28e:	f009 f867 	bl	8016360 <tcp_poll>
    tcp_err(pcb, NULL);
 800d292:	2100      	movs	r1, #0
 800d294:	6978      	ldr	r0, [r7, #20]
 800d296:	f009 f829 	bl	80162ec <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2200      	movs	r2, #0
 800d29e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	3310      	adds	r3, #16
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f007 fa27 	bl	80146f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	3310      	adds	r3, #16
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f007 faba 	bl	8014828 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800d2b4:	69b8      	ldr	r0, [r7, #24]
 800d2b6:	f000 f907 	bl	800d4c8 <netconn_free>
    return ERR_MEM;
 800d2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d2be:	e00a      	b.n	800d2d6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d005      	beq.n	800d2d4 <accept_function+0x160>
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	69f8      	ldr	r0, [r7, #28]
 800d2d2:	4798      	blx	r3
  }

  return ERR_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3724      	adds	r7, #36	; 0x24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd90      	pop	{r4, r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0801fab4 	.word	0x0801fab4
 800d2e4:	0801fc90 	.word	0x0801fc90
 800d2e8:	0801fb18 	.word	0x0801fb18

0800d2ec <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d006      	beq.n	800d310 <pcb_new+0x24>
 800d302:	4b2b      	ldr	r3, [pc, #172]	; (800d3b0 <pcb_new+0xc4>)
 800d304:	f240 2265 	movw	r2, #613	; 0x265
 800d308:	492a      	ldr	r1, [pc, #168]	; (800d3b4 <pcb_new+0xc8>)
 800d30a:	482b      	ldr	r0, [pc, #172]	; (800d3b8 <pcb_new+0xcc>)
 800d30c:	f00f f8da 	bl	801c4c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d31a:	2b10      	cmp	r3, #16
 800d31c:	d022      	beq.n	800d364 <pcb_new+0x78>
 800d31e:	2b20      	cmp	r3, #32
 800d320:	d133      	bne.n	800d38a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681c      	ldr	r4, [r3, #0]
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	4618      	mov	r0, r3
 800d32a:	f00e fbe8 	bl	801bafe <udp_new_ip_type>
 800d32e:	4603      	mov	r3, r0
 800d330:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02a      	beq.n	800d392 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b22      	cmp	r3, #34	; 0x22
 800d344:	d104      	bne.n	800d350 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6858      	ldr	r0, [r3, #4]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	4917      	ldr	r1, [pc, #92]	; (800d3bc <pcb_new+0xd0>)
 800d35e:	f00e fb55 	bl	801ba0c <udp_recv>
      }
      break;
 800d362:	e016      	b.n	800d392 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681c      	ldr	r4, [r3, #0]
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f008 ff5a 	bl	8016224 <tcp_new_ip_type>
 800d370:	4603      	mov	r3, r0
 800d372:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00b      	beq.n	800d396 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fece 	bl	800d124 <setup_tcp>
      }
      break;
 800d388:	e005      	b.n	800d396 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	22fa      	movs	r2, #250	; 0xfa
 800d38e:	711a      	strb	r2, [r3, #4]
      return;
 800d390:	e00a      	b.n	800d3a8 <pcb_new+0xbc>
      break;
 800d392:	bf00      	nop
 800d394:	e000      	b.n	800d398 <pcb_new+0xac>
      break;
 800d396:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	22ff      	movs	r2, #255	; 0xff
 800d3a6:	711a      	strb	r2, [r3, #4]
  }
}
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd90      	pop	{r4, r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	0801fab4 	.word	0x0801fab4
 800d3b4:	0801fcb8 	.word	0x0801fcb8
 800d3b8:	0801fb18 	.word	0x0801fb18
 800d3bc:	0800cc01 	.word	0x0800cc01

0800d3c0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f7ff ff85 	bl	800d2ec <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d3e2:	bf00      	nop
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	6039      	str	r1, [r7, #0]
 800d3f6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d3fc:	2007      	movs	r0, #7
 800d3fe:	f005 feef 	bl	80131e0 <memp_malloc>
 800d402:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <netconn_alloc+0x22>
    return NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	e052      	b.n	800d4b4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	79fa      	ldrb	r2, [r7, #7]
 800d418:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d426:	2b10      	cmp	r3, #16
 800d428:	d004      	beq.n	800d434 <netconn_alloc+0x48>
 800d42a:	2b20      	cmp	r3, #32
 800d42c:	d105      	bne.n	800d43a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d42e:	2306      	movs	r3, #6
 800d430:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d432:	e00a      	b.n	800d44a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d434:	2306      	movs	r3, #6
 800d436:	617b      	str	r3, [r7, #20]
      break;
 800d438:	e007      	b.n	800d44a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d43a:	4b20      	ldr	r3, [pc, #128]	; (800d4bc <netconn_alloc+0xd0>)
 800d43c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d440:	491f      	ldr	r1, [pc, #124]	; (800d4c0 <netconn_alloc+0xd4>)
 800d442:	4820      	ldr	r0, [pc, #128]	; (800d4c4 <netconn_alloc+0xd8>)
 800d444:	f00f f83e 	bl	801c4c4 <iprintf>
      goto free_and_return;
 800d448:	e02f      	b.n	800d4aa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3310      	adds	r3, #16
 800d44e:	6979      	ldr	r1, [r7, #20]
 800d450:	4618      	mov	r0, r3
 800d452:	f007 f92f 	bl	80146b4 <sys_mbox_new>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d125      	bne.n	800d4a8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	330c      	adds	r3, #12
 800d460:	2100      	movs	r1, #0
 800d462:	4618      	mov	r0, r3
 800d464:	f007 f9ed 	bl	8014842 <sys_sem_new>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d005      	beq.n	800d47a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3310      	adds	r3, #16
 800d472:	4618      	mov	r0, r3
 800d474:	f007 f940 	bl	80146f8 <sys_mbox_free>
    goto free_and_return;
 800d478:	e017      	b.n	800d4aa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3314      	adds	r3, #20
 800d47e:	4618      	mov	r0, r3
 800d480:	f007 f9d2 	bl	8014828 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f04f 32ff 	mov.w	r2, #4294967295
 800d490:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	7cfa      	ldrb	r2, [r7, #19]
 800d4a2:	771a      	strb	r2, [r3, #28]
  return conn;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	e005      	b.n	800d4b4 <netconn_alloc+0xc8>
    goto free_and_return;
 800d4a8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	2007      	movs	r0, #7
 800d4ae:	f005 ff0d 	bl	80132cc <memp_free>
  return NULL;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	0801fab4 	.word	0x0801fab4
 800d4c0:	0801fcd8 	.word	0x0801fcd8
 800d4c4:	0801fb18 	.word	0x0801fb18

0800d4c8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d006      	beq.n	800d4e6 <netconn_free+0x1e>
 800d4d8:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <netconn_free+0x80>)
 800d4da:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d4de:	491b      	ldr	r1, [pc, #108]	; (800d54c <netconn_free+0x84>)
 800d4e0:	481b      	ldr	r0, [pc, #108]	; (800d550 <netconn_free+0x88>)
 800d4e2:	f00e ffef 	bl	801c4c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3310      	adds	r3, #16
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f007 f98b 	bl	8014806 <sys_mbox_valid>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d006      	beq.n	800d504 <netconn_free+0x3c>
 800d4f6:	4b14      	ldr	r3, [pc, #80]	; (800d548 <netconn_free+0x80>)
 800d4f8:	f240 3223 	movw	r2, #803	; 0x323
 800d4fc:	4915      	ldr	r1, [pc, #84]	; (800d554 <netconn_free+0x8c>)
 800d4fe:	4814      	ldr	r0, [pc, #80]	; (800d550 <netconn_free+0x88>)
 800d500:	f00e ffe0 	bl	801c4c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	3314      	adds	r3, #20
 800d508:	4618      	mov	r0, r3
 800d50a:	f007 f97c 	bl	8014806 <sys_mbox_valid>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d006      	beq.n	800d522 <netconn_free+0x5a>
 800d514:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <netconn_free+0x80>)
 800d516:	f240 3226 	movw	r2, #806	; 0x326
 800d51a:	490f      	ldr	r1, [pc, #60]	; (800d558 <netconn_free+0x90>)
 800d51c:	480c      	ldr	r0, [pc, #48]	; (800d550 <netconn_free+0x88>)
 800d51e:	f00e ffd1 	bl	801c4c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	330c      	adds	r3, #12
 800d526:	4618      	mov	r0, r3
 800d528:	f007 f9f1 	bl	801490e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	330c      	adds	r3, #12
 800d530:	4618      	mov	r0, r3
 800d532:	f007 fa0a 	bl	801494a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d536:	6879      	ldr	r1, [r7, #4]
 800d538:	2007      	movs	r0, #7
 800d53a:	f005 fec7 	bl	80132cc <memp_free>
}
 800d53e:	bf00      	nop
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	0801fab4 	.word	0x0801fab4
 800d54c:	0801fd00 	.word	0x0801fd00
 800d550:	0801fb18 	.word	0x0801fb18
 800d554:	0801fd30 	.word	0x0801fd30
 800d558:	0801fd6c 	.word	0x0801fd6c

0800d55c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3310      	adds	r3, #16
 800d568:	4618      	mov	r0, r3
 800d56a:	f007 f94c 	bl	8014806 <sys_mbox_valid>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d02f      	beq.n	800d5d4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d574:	e018      	b.n	800d5a8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d57e:	2b10      	cmp	r3, #16
 800d580:	d10e      	bne.n	800d5a0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	f107 020f 	add.w	r2, r7, #15
 800d588:	4611      	mov	r1, r2
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fafe 	bl	800cb8c <lwip_netconn_is_err_msg>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d108      	bne.n	800d5a8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	4618      	mov	r0, r3
 800d59a:	f006 fde1 	bl	8014160 <pbuf_free>
 800d59e:	e003      	b.n	800d5a8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f005 febc 	bl	8013320 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3310      	adds	r3, #16
 800d5ac:	f107 0210 	add.w	r2, r7, #16
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f007 f90b 	bl	80147ce <sys_arch_mbox_tryfetch>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5be:	d1da      	bne.n	800d576 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3310      	adds	r3, #16
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f007 f897 	bl	80146f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3310      	adds	r3, #16
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f007 f92a 	bl	8014828 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3314      	adds	r3, #20
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f007 f914 	bl	8014806 <sys_mbox_valid>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d034      	beq.n	800d64e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d5e4:	e01d      	b.n	800d622 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f107 020e 	add.w	r2, r7, #14
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff facc 	bl	800cb8c <lwip_netconn_is_err_msg>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d113      	bne.n	800d622 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d5fe:	6978      	ldr	r0, [r7, #20]
 800d600:	f7ff ffac 	bl	800d55c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	4618      	mov	r0, r3
 800d612:	f007 fd87 	bl	8015124 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2200      	movs	r2, #0
 800d61a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d61c:	6978      	ldr	r0, [r7, #20]
 800d61e:	f7ff ff53 	bl	800d4c8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3314      	adds	r3, #20
 800d626:	f107 0210 	add.w	r2, r7, #16
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f007 f8ce 	bl	80147ce <sys_arch_mbox_tryfetch>
 800d632:	4603      	mov	r3, r0
 800d634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d638:	d1d5      	bne.n	800d5e6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3314      	adds	r3, #20
 800d63e:	4618      	mov	r0, r3
 800d640:	f007 f85a 	bl	80146f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3314      	adds	r3, #20
 800d648:	4618      	mov	r0, r3
 800d64a:	f007 f8ed 	bl	8014828 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d64e:	bf00      	nop
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
	...

0800d658 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <lwip_netconn_do_close_internal+0x24>
 800d66e:	4b87      	ldr	r3, [pc, #540]	; (800d88c <lwip_netconn_do_close_internal+0x234>)
 800d670:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d674:	4986      	ldr	r1, [pc, #536]	; (800d890 <lwip_netconn_do_close_internal+0x238>)
 800d676:	4887      	ldr	r0, [pc, #540]	; (800d894 <lwip_netconn_do_close_internal+0x23c>)
 800d678:	f00e ff24 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d684:	2b10      	cmp	r3, #16
 800d686:	d006      	beq.n	800d696 <lwip_netconn_do_close_internal+0x3e>
 800d688:	4b80      	ldr	r3, [pc, #512]	; (800d88c <lwip_netconn_do_close_internal+0x234>)
 800d68a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d68e:	4982      	ldr	r1, [pc, #520]	; (800d898 <lwip_netconn_do_close_internal+0x240>)
 800d690:	4880      	ldr	r0, [pc, #512]	; (800d894 <lwip_netconn_do_close_internal+0x23c>)
 800d692:	f00e ff17 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	785b      	ldrb	r3, [r3, #1]
 800d69a:	2b04      	cmp	r3, #4
 800d69c:	d006      	beq.n	800d6ac <lwip_netconn_do_close_internal+0x54>
 800d69e:	4b7b      	ldr	r3, [pc, #492]	; (800d88c <lwip_netconn_do_close_internal+0x234>)
 800d6a0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d6a4:	497d      	ldr	r1, [pc, #500]	; (800d89c <lwip_netconn_do_close_internal+0x244>)
 800d6a6:	487b      	ldr	r0, [pc, #492]	; (800d894 <lwip_netconn_do_close_internal+0x23c>)
 800d6a8:	f00e ff0c 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <lwip_netconn_do_close_internal+0x6a>
 800d6b4:	4b75      	ldr	r3, [pc, #468]	; (800d88c <lwip_netconn_do_close_internal+0x234>)
 800d6b6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d6ba:	4979      	ldr	r1, [pc, #484]	; (800d8a0 <lwip_netconn_do_close_internal+0x248>)
 800d6bc:	4875      	ldr	r0, [pc, #468]	; (800d894 <lwip_netconn_do_close_internal+0x23c>)
 800d6be:	f00e ff01 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <lwip_netconn_do_close_internal+0x80>
 800d6ca:	4b70      	ldr	r3, [pc, #448]	; (800d88c <lwip_netconn_do_close_internal+0x234>)
 800d6cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d6d0:	4974      	ldr	r1, [pc, #464]	; (800d8a4 <lwip_netconn_do_close_internal+0x24c>)
 800d6d2:	4870      	ldr	r0, [pc, #448]	; (800d894 <lwip_netconn_do_close_internal+0x23c>)
 800d6d4:	f00e fef6 	bl	801c4c4 <iprintf>

  tpcb = conn->pcb.tcp;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	7a1b      	ldrb	r3, [r3, #8]
 800d6e4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	f003 0302 	and.w	r3, r3, #2
 800d6f4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d102      	bne.n	800d702 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	75bb      	strb	r3, [r7, #22]
 800d700:	e01f      	b.n	800d742 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00e      	beq.n	800d726 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d70c:	2b05      	cmp	r3, #5
 800d70e:	d007      	beq.n	800d720 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d714:	2b06      	cmp	r3, #6
 800d716:	d003      	beq.n	800d720 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d102      	bne.n	800d726 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d720:	2301      	movs	r3, #1
 800d722:	75bb      	strb	r3, [r7, #22]
 800d724:	e00d      	b.n	800d742 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d726:	7b7b      	ldrb	r3, [r7, #13]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d008      	beq.n	800d73e <lwip_netconn_do_close_internal+0xe6>
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	8b5b      	ldrh	r3, [r3, #26]
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d738:	2301      	movs	r3, #1
 800d73a:	75bb      	strb	r3, [r7, #22]
 800d73c:	e001      	b.n	800d742 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d742:	7dbb      	ldrb	r3, [r7, #22]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d003      	beq.n	800d750 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d748:	2100      	movs	r1, #0
 800d74a:	6938      	ldr	r0, [r7, #16]
 800d74c:	f008 fd78 	bl	8016240 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	7d1b      	ldrb	r3, [r3, #20]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d104      	bne.n	800d762 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d758:	2100      	movs	r1, #0
 800d75a:	6938      	ldr	r0, [r7, #16]
 800d75c:	f008 fde8 	bl	8016330 <tcp_accept>
 800d760:	e01d      	b.n	800d79e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d762:	7bbb      	ldrb	r3, [r7, #14]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d007      	beq.n	800d778 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d768:	2100      	movs	r1, #0
 800d76a:	6938      	ldr	r0, [r7, #16]
 800d76c:	f008 fd7a 	bl	8016264 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d770:	2100      	movs	r1, #0
 800d772:	6938      	ldr	r0, [r7, #16]
 800d774:	f008 fddc 	bl	8016330 <tcp_accept>
    }
    if (shut_tx) {
 800d778:	7b7b      	ldrb	r3, [r7, #13]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d77e:	2100      	movs	r1, #0
 800d780:	6938      	ldr	r0, [r7, #16]
 800d782:	f008 fd91 	bl	80162a8 <tcp_sent>
    }
    if (shut_close) {
 800d786:	7dbb      	ldrb	r3, [r7, #22]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d008      	beq.n	800d79e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	6938      	ldr	r0, [r7, #16]
 800d792:	f008 fde5 	bl	8016360 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d796:	2100      	movs	r1, #0
 800d798:	6938      	ldr	r0, [r7, #16]
 800d79a:	f008 fda7 	bl	80162ec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d79e:	7dbb      	ldrb	r3, [r7, #22]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d7a4:	6938      	ldr	r0, [r7, #16]
 800d7a6:	f007 fb77 	bl	8014e98 <tcp_close>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	75fb      	strb	r3, [r7, #23]
 800d7ae:	e007      	b.n	800d7c0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	7b7a      	ldrb	r2, [r7, #13]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f007 fb9a 	bl	8014ef0 <tcp_shutdown>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d7c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	757b      	strb	r3, [r7, #21]
 800d7cc:	e016      	b.n	800d7fc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d6:	d10f      	bne.n	800d7f8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6a1b      	ldr	r3, [r3, #32]
 800d7dc:	7a5b      	ldrb	r3, [r3, #9]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10c      	bne.n	800d7fc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d7e6:	7dbb      	ldrb	r3, [r7, #22]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d007      	beq.n	800d7fc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d7ec:	6938      	ldr	r0, [r7, #16]
 800d7ee:	f007 fc99 	bl	8015124 <tcp_abort>
          err = ERR_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75fb      	strb	r3, [r7, #23]
 800d7f6:	e001      	b.n	800d7fc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d7fc:	7d7b      	ldrb	r3, [r7, #21]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d052      	beq.n	800d8a8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	330c      	adds	r3, #12
 800d80a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	7dfa      	ldrb	r2, [r7, #23]
 800d812:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d129      	bne.n	800d87c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d828:	7dbb      	ldrb	r3, [r7, #22]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00c      	beq.n	800d848 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d005      	beq.n	800d848 <lwip_netconn_do_close_internal+0x1f0>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d840:	2200      	movs	r2, #0
 800d842:	2104      	movs	r1, #4
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	4798      	blx	r3
      }
      if (shut_rx) {
 800d848:	7bbb      	ldrb	r3, [r7, #14]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d009      	beq.n	800d862 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d005      	beq.n	800d862 <lwip_netconn_do_close_internal+0x20a>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85a:	2200      	movs	r2, #0
 800d85c:	2100      	movs	r1, #0
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	4798      	blx	r3
      }
      if (shut_tx) {
 800d862:	7b7b      	ldrb	r3, [r7, #13]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d009      	beq.n	800d87c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d005      	beq.n	800d87c <lwip_netconn_do_close_internal+0x224>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	2200      	movs	r2, #0
 800d876:	2102      	movs	r1, #2
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d87c:	78fb      	ldrb	r3, [r7, #3]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d882:	68b8      	ldr	r0, [r7, #8]
 800d884:	f007 f836 	bl	80148f4 <sys_sem_signal>
    }
    return ERR_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	e03c      	b.n	800d906 <lwip_netconn_do_close_internal+0x2ae>
 800d88c:	0801fab4 	.word	0x0801fab4
 800d890:	0801fda8 	.word	0x0801fda8
 800d894:	0801fb18 	.word	0x0801fb18
 800d898:	0801fdb8 	.word	0x0801fdb8
 800d89c:	0801fdd8 	.word	0x0801fdd8
 800d8a0:	0801fdfc 	.word	0x0801fdfc
 800d8a4:	0801fc3c 	.word	0x0801fc3c
  }
  if (!close_finished) {
 800d8a8:	7d7b      	ldrb	r3, [r7, #21]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d11e      	bne.n	800d8ec <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	7d1b      	ldrb	r3, [r3, #20]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d106      	bne.n	800d8c4 <lwip_netconn_do_close_internal+0x26c>
 800d8b6:	4b16      	ldr	r3, [pc, #88]	; (800d910 <lwip_netconn_do_close_internal+0x2b8>)
 800d8b8:	f240 4241 	movw	r2, #1089	; 0x441
 800d8bc:	4915      	ldr	r1, [pc, #84]	; (800d914 <lwip_netconn_do_close_internal+0x2bc>)
 800d8be:	4816      	ldr	r0, [pc, #88]	; (800d918 <lwip_netconn_do_close_internal+0x2c0>)
 800d8c0:	f00e fe00 	bl	801c4c4 <iprintf>
    if (shut_tx) {
 800d8c4:	7b7b      	ldrb	r3, [r7, #13]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d8ca:	4914      	ldr	r1, [pc, #80]	; (800d91c <lwip_netconn_do_close_internal+0x2c4>)
 800d8cc:	6938      	ldr	r0, [r7, #16]
 800d8ce:	f008 fceb 	bl	80162a8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	4912      	ldr	r1, [pc, #72]	; (800d920 <lwip_netconn_do_close_internal+0x2c8>)
 800d8d6:	6938      	ldr	r0, [r7, #16]
 800d8d8:	f008 fd42 	bl	8016360 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d8dc:	4911      	ldr	r1, [pc, #68]	; (800d924 <lwip_netconn_do_close_internal+0x2cc>)
 800d8de:	6938      	ldr	r0, [r7, #16]
 800d8e0:	f008 fd04 	bl	80162ec <tcp_err>
    tcp_arg(tpcb, conn);
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	6938      	ldr	r0, [r7, #16]
 800d8e8:	f008 fcaa 	bl	8016240 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d8ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <lwip_netconn_do_close_internal+0x2aa>
 800d8f4:	4b06      	ldr	r3, [pc, #24]	; (800d910 <lwip_netconn_do_close_internal+0x2b8>)
 800d8f6:	f240 424d 	movw	r2, #1101	; 0x44d
 800d8fa:	490b      	ldr	r1, [pc, #44]	; (800d928 <lwip_netconn_do_close_internal+0x2d0>)
 800d8fc:	4806      	ldr	r0, [pc, #24]	; (800d918 <lwip_netconn_do_close_internal+0x2c0>)
 800d8fe:	f00e fde1 	bl	801c4c4 <iprintf>
  return err;
 800d902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3718      	adds	r7, #24
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	0801fab4 	.word	0x0801fab4
 800d914:	0801fe10 	.word	0x0801fe10
 800d918:	0801fb18 	.word	0x0801fb18
 800d91c:	0800ced1 	.word	0x0800ced1
 800d920:	0800ce09 	.word	0x0800ce09
 800d924:	0800cf79 	.word	0x0800cf79
 800d928:	0801fe34 	.word	0x0801fe34

0800d92c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	785b      	ldrb	r3, [r3, #1]
 800d93e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d940:	7afb      	ldrb	r3, [r7, #11]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00d      	beq.n	800d962 <lwip_netconn_do_delconn+0x36>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d950:	2b10      	cmp	r3, #16
 800d952:	d006      	beq.n	800d962 <lwip_netconn_do_delconn+0x36>
 800d954:	4b60      	ldr	r3, [pc, #384]	; (800dad8 <lwip_netconn_do_delconn+0x1ac>)
 800d956:	f240 425e 	movw	r2, #1118	; 0x45e
 800d95a:	4960      	ldr	r1, [pc, #384]	; (800dadc <lwip_netconn_do_delconn+0x1b0>)
 800d95c:	4860      	ldr	r0, [pc, #384]	; (800dae0 <lwip_netconn_do_delconn+0x1b4>)
 800d95e:	f00e fdb1 	bl	801c4c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d962:	7afb      	ldrb	r3, [r7, #11]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d005      	beq.n	800d974 <lwip_netconn_do_delconn+0x48>
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d002      	beq.n	800d974 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d96e:	7afb      	ldrb	r3, [r7, #11]
 800d970:	2b03      	cmp	r3, #3
 800d972:	d109      	bne.n	800d988 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d974:	7afb      	ldrb	r3, [r7, #11]
 800d976:	2b03      	cmp	r3, #3
 800d978:	d10a      	bne.n	800d990 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	7f1b      	ldrb	r3, [r3, #28]
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d103      	bne.n	800d990 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	22fb      	movs	r2, #251	; 0xfb
 800d98c:	711a      	strb	r2, [r3, #4]
 800d98e:	e097      	b.n	800dac0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d990:	7afb      	ldrb	r3, [r7, #11]
 800d992:	2b03      	cmp	r3, #3
 800d994:	d10d      	bne.n	800d9b2 <lwip_netconn_do_delconn+0x86>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	7f1b      	ldrb	r3, [r3, #28]
 800d99c:	f003 0304 	and.w	r3, r3, #4
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d106      	bne.n	800d9b2 <lwip_netconn_do_delconn+0x86>
 800d9a4:	4b4c      	ldr	r3, [pc, #304]	; (800dad8 <lwip_netconn_do_delconn+0x1ac>)
 800d9a6:	f240 427a 	movw	r2, #1146	; 0x47a
 800d9aa:	494e      	ldr	r1, [pc, #312]	; (800dae4 <lwip_netconn_do_delconn+0x1b8>)
 800d9ac:	484c      	ldr	r0, [pc, #304]	; (800dae0 <lwip_netconn_do_delconn+0x1b4>)
 800d9ae:	f00e fd89 	bl	801c4c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fdcd 	bl	800d55c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d05f      	beq.n	800da8c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9d6:	2b10      	cmp	r3, #16
 800d9d8:	d00d      	beq.n	800d9f6 <lwip_netconn_do_delconn+0xca>
 800d9da:	2b20      	cmp	r3, #32
 800d9dc:	d151      	bne.n	800da82 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f00e f82c 	bl	801ba4c <udp_remove>
          break;
 800d9f4:	e046      	b.n	800da84 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6a1b      	ldr	r3, [r3, #32]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d006      	beq.n	800da0e <lwip_netconn_do_delconn+0xe2>
 800da00:	4b35      	ldr	r3, [pc, #212]	; (800dad8 <lwip_netconn_do_delconn+0x1ac>)
 800da02:	f240 4294 	movw	r2, #1172	; 0x494
 800da06:	4938      	ldr	r1, [pc, #224]	; (800dae8 <lwip_netconn_do_delconn+0x1bc>)
 800da08:	4835      	ldr	r0, [pc, #212]	; (800dae0 <lwip_netconn_do_delconn+0x1b4>)
 800da0a:	f00e fd5b 	bl	801c4c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2204      	movs	r2, #4
 800da14:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2203      	movs	r2, #3
 800da1a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2100      	movs	r1, #0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fe14 	bl	800d658 <lwip_netconn_do_close_internal>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d04b      	beq.n	800dace <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d006      	beq.n	800da4e <lwip_netconn_do_delconn+0x122>
 800da40:	4b25      	ldr	r3, [pc, #148]	; (800dad8 <lwip_netconn_do_delconn+0x1ac>)
 800da42:	f240 429a 	movw	r2, #1178	; 0x49a
 800da46:	4929      	ldr	r1, [pc, #164]	; (800daec <lwip_netconn_do_delconn+0x1c0>)
 800da48:	4825      	ldr	r0, [pc, #148]	; (800dae0 <lwip_netconn_do_delconn+0x1b4>)
 800da4a:	f00e fd3b 	bl	801c4c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800da4e:	4828      	ldr	r0, [pc, #160]	; (800daf0 <lwip_netconn_do_delconn+0x1c4>)
 800da50:	f006 ffc1 	bl	80149d6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	330c      	adds	r3, #12
 800da5a:	2100      	movs	r1, #0
 800da5c:	4618      	mov	r0, r3
 800da5e:	f006 ff18 	bl	8014892 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800da62:	4823      	ldr	r0, [pc, #140]	; (800daf0 <lwip_netconn_do_delconn+0x1c4>)
 800da64:	f006 ffa8 	bl	80149b8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	785b      	ldrb	r3, [r3, #1]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d02d      	beq.n	800dace <lwip_netconn_do_delconn+0x1a2>
 800da72:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <lwip_netconn_do_delconn+0x1ac>)
 800da74:	f240 429e 	movw	r2, #1182	; 0x49e
 800da78:	491c      	ldr	r1, [pc, #112]	; (800daec <lwip_netconn_do_delconn+0x1c0>)
 800da7a:	4819      	ldr	r0, [pc, #100]	; (800dae0 <lwip_netconn_do_delconn+0x1b4>)
 800da7c:	f00e fd22 	bl	801c4c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800da80:	e025      	b.n	800dace <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800da82:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2200      	movs	r2, #0
 800da8a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	2b00      	cmp	r3, #0
 800da94:	d007      	beq.n	800daa6 <lwip_netconn_do_delconn+0x17a>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	6810      	ldr	r0, [r2, #0]
 800daa0:	2200      	movs	r2, #0
 800daa2:	2100      	movs	r1, #0
 800daa4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daac:	2b00      	cmp	r3, #0
 800daae:	d007      	beq.n	800dac0 <lwip_netconn_do_delconn+0x194>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	6810      	ldr	r0, [r2, #0]
 800daba:	2200      	movs	r2, #0
 800dabc:	2102      	movs	r1, #2
 800dabe:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	330c      	adds	r3, #12
 800dac6:	4618      	mov	r0, r3
 800dac8:	f006 ff2e 	bl	8014928 <sys_sem_valid>
 800dacc:	e000      	b.n	800dad0 <lwip_netconn_do_delconn+0x1a4>
          return;
 800dace:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	0801fab4 	.word	0x0801fab4
 800dadc:	0801fe44 	.word	0x0801fe44
 800dae0:	0801fb18 	.word	0x0801fb18
 800dae4:	0801fe58 	.word	0x0801fe58
 800dae8:	0801fe78 	.word	0x0801fe78
 800daec:	0801fe94 	.word	0x0801fe94
 800daf0:	240079b0 	.word	0x240079b0

0800daf4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d025      	beq.n	800db56 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db14:	2b10      	cmp	r3, #16
 800db16:	d00e      	beq.n	800db36 <lwip_netconn_do_bind+0x42>
 800db18:	2b20      	cmp	r3, #32
 800db1a:	d119      	bne.n	800db50 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6858      	ldr	r0, [r3, #4]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	6899      	ldr	r1, [r3, #8]
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	899b      	ldrh	r3, [r3, #12]
 800db2a:	461a      	mov	r2, r3
 800db2c:	f00d fe78 	bl	801b820 <udp_bind>
 800db30:	4603      	mov	r3, r0
 800db32:	73fb      	strb	r3, [r7, #15]
        break;
 800db34:	e011      	b.n	800db5a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6858      	ldr	r0, [r3, #4]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	6899      	ldr	r1, [r3, #8]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	899b      	ldrh	r3, [r3, #12]
 800db44:	461a      	mov	r2, r3
 800db46:	f007 faf9 	bl	801513c <tcp_bind>
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
        break;
 800db4e:	e004      	b.n	800db5a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800db50:	23fa      	movs	r3, #250	; 0xfa
 800db52:	73fb      	strb	r3, [r7, #15]
        break;
 800db54:	e001      	b.n	800db5a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800db56:	23fa      	movs	r3, #250	; 0xfa
 800db58:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	7bfa      	ldrb	r2, [r7, #15]
 800db5e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800db60:	bf00      	nop
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d07f      	beq.n	800dc7e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db88:	2b10      	cmp	r3, #16
 800db8a:	d175      	bne.n	800dc78 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	785b      	ldrb	r3, [r3, #1]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d165      	bne.n	800dc62 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	7d1b      	ldrb	r3, [r3, #20]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800dba2:	23fa      	movs	r3, #250	; 0xfa
 800dba4:	72fb      	strb	r3, [r7, #11]
 800dba6:	e06c      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800dba8:	23ff      	movs	r3, #255	; 0xff
 800dbaa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	f107 020b 	add.w	r2, r7, #11
 800dbb6:	7cf9      	ldrb	r1, [r7, #19]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f007 fb77 	bl	80152ac <tcp_listen_with_backlog_and_err>
 800dbbe:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d05d      	beq.n	800dc82 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3310      	adds	r3, #16
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f006 fe1a 	bl	8014806 <sys_mbox_valid>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3310      	adds	r3, #16
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f006 fd8a 	bl	80146f8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3310      	adds	r3, #16
 800dbea:	4618      	mov	r0, r3
 800dbec:	f006 fe1c 	bl	8014828 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3314      	adds	r3, #20
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f006 fe03 	bl	8014806 <sys_mbox_valid>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d108      	bne.n	800dc18 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3314      	adds	r3, #20
 800dc0c:	2106      	movs	r1, #6
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f006 fd50 	bl	80146b4 <sys_mbox_new>
 800dc14:	4603      	mov	r3, r0
 800dc16:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800dc18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d118      	bne.n	800dc52 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2202      	movs	r2, #2
 800dc26:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f008 faff 	bl	8016240 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	4912      	ldr	r1, [pc, #72]	; (800dc94 <lwip_netconn_do_listen+0x12c>)
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f008 fb70 	bl	8016330 <tcp_accept>
 800dc50:	e017      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f007 f920 	bl	8014e98 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	605a      	str	r2, [r3, #4]
 800dc60:	e00f      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	785b      	ldrb	r3, [r3, #1]
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d102      	bne.n	800dc72 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	72fb      	strb	r3, [r7, #11]
 800dc70:	e007      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800dc72:	23f5      	movs	r3, #245	; 0xf5
 800dc74:	72fb      	strb	r3, [r7, #11]
 800dc76:	e004      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800dc78:	23f0      	movs	r3, #240	; 0xf0
 800dc7a:	72fb      	strb	r3, [r7, #11]
 800dc7c:	e001      	b.n	800dc82 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800dc7e:	23f5      	movs	r3, #245	; 0xf5
 800dc80:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800dc82:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dc8a:	bf00      	nop
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	0800d175 	.word	0x0800d175

0800dc98 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2200      	movs	r2, #0
 800dca8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d022      	beq.n	800dcfa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcbe:	2b10      	cmp	r3, #16
 800dcc0:	d11b      	bne.n	800dcfa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcce:	d202      	bcs.n	800dcd6 <lwip_netconn_do_recv+0x3e>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	e001      	b.n	800dcda <lwip_netconn_do_recv+0x42>
 800dcd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcda:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	89fa      	ldrh	r2, [r7, #14]
 800dce4:	4611      	mov	r1, r2
 800dce6:	4618      	mov	r0, r3
 800dce8:	f007 fbe4 	bl	80154b4 <tcp_recved>
        remaining -= recved;
 800dcec:	89fb      	ldrh	r3, [r7, #14]
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1e6      	bne.n	800dcc8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dcfa:	bf00      	nop
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <lwip_netconn_do_writemore+0x24>
 800dd1a:	4b96      	ldr	r3, [pc, #600]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd1c:	f240 6273 	movw	r2, #1651	; 0x673
 800dd20:	4995      	ldr	r1, [pc, #596]	; (800df78 <lwip_netconn_do_writemore+0x274>)
 800dd22:	4896      	ldr	r0, [pc, #600]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd24:	f00e fbce 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	785b      	ldrb	r3, [r3, #1]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d006      	beq.n	800dd3e <lwip_netconn_do_writemore+0x3a>
 800dd30:	4b90      	ldr	r3, [pc, #576]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd32:	f240 6274 	movw	r2, #1652	; 0x674
 800dd36:	4992      	ldr	r1, [pc, #584]	; (800df80 <lwip_netconn_do_writemore+0x27c>)
 800dd38:	4890      	ldr	r0, [pc, #576]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd3a:	f00e fbc3 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d106      	bne.n	800dd54 <lwip_netconn_do_writemore+0x50>
 800dd46:	4b8b      	ldr	r3, [pc, #556]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd48:	f240 6275 	movw	r2, #1653	; 0x675
 800dd4c:	498d      	ldr	r1, [pc, #564]	; (800df84 <lwip_netconn_do_writemore+0x280>)
 800dd4e:	488b      	ldr	r0, [pc, #556]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd50:	f00e fbb8 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <lwip_netconn_do_writemore+0x66>
 800dd5c:	4b85      	ldr	r3, [pc, #532]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd5e:	f240 6276 	movw	r2, #1654	; 0x676
 800dd62:	4989      	ldr	r1, [pc, #548]	; (800df88 <lwip_netconn_do_writemore+0x284>)
 800dd64:	4885      	ldr	r0, [pc, #532]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd66:	f00e fbad 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a1b      	ldr	r3, [r3, #32]
 800dd6e:	699a      	ldr	r2, [r3, #24]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a1b      	ldr	r3, [r3, #32]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d306      	bcc.n	800dd88 <lwip_netconn_do_writemore+0x84>
 800dd7a:	4b7e      	ldr	r3, [pc, #504]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd7c:	f240 6277 	movw	r2, #1655	; 0x677
 800dd80:	4982      	ldr	r1, [pc, #520]	; (800df8c <lwip_netconn_do_writemore+0x288>)
 800dd82:	487e      	ldr	r0, [pc, #504]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd84:	f00e fb9e 	bl	801c4c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a1b      	ldr	r3, [r3, #32]
 800dd8c:	899b      	ldrh	r3, [r3, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <lwip_netconn_do_writemore+0x9c>
 800dd92:	4b78      	ldr	r3, [pc, #480]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800dd94:	f240 6279 	movw	r2, #1657	; 0x679
 800dd98:	497d      	ldr	r1, [pc, #500]	; (800df90 <lwip_netconn_do_writemore+0x28c>)
 800dd9a:	4878      	ldr	r0, [pc, #480]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800dd9c:	f00e fb92 	bl	801c4c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	7f1b      	ldrb	r3, [r3, #28]
 800dda6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7f1b      	ldrb	r3, [r3, #28]
 800ddac:	f003 0302 	and.w	r3, r3, #2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d104      	bne.n	800ddbe <lwip_netconn_do_writemore+0xba>
 800ddb4:	7ebb      	ldrb	r3, [r7, #26]
 800ddb6:	f003 0304 	and.w	r3, r3, #4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <lwip_netconn_do_writemore+0xbe>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <lwip_netconn_do_writemore+0xc0>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a1b      	ldr	r3, [r3, #32]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a1b      	ldr	r3, [r3, #32]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddf0:	d307      	bcc.n	800de02 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ddf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddf6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ddf8:	7ebb      	ldrb	r3, [r7, #26]
 800ddfa:	f043 0302 	orr.w	r3, r3, #2
 800ddfe:	76bb      	strb	r3, [r7, #26]
 800de00:	e001      	b.n	800de06 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de0e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800de10:	89fa      	ldrh	r2, [r7, #14]
 800de12:	8bbb      	ldrh	r3, [r7, #28]
 800de14:	429a      	cmp	r2, r3
 800de16:	d216      	bcs.n	800de46 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800de18:	89fb      	ldrh	r3, [r7, #14]
 800de1a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800de1c:	7e3b      	ldrb	r3, [r7, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00d      	beq.n	800de3e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800de22:	8bbb      	ldrh	r3, [r7, #28]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10e      	bne.n	800de46 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d102      	bne.n	800de38 <lwip_netconn_do_writemore+0x134>
 800de32:	f06f 0306 	mvn.w	r3, #6
 800de36:	e000      	b.n	800de3a <lwip_netconn_do_writemore+0x136>
 800de38:	2300      	movs	r3, #0
 800de3a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800de3c:	e07d      	b.n	800df3a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800de3e:	7ebb      	ldrb	r3, [r7, #26]
 800de40:	f043 0302 	orr.w	r3, r3, #2
 800de44:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	691a      	ldr	r2, [r3, #16]
 800de4c:	8bbb      	ldrh	r3, [r7, #28]
 800de4e:	441a      	add	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d906      	bls.n	800de6a <lwip_netconn_do_writemore+0x166>
 800de5c:	4b45      	ldr	r3, [pc, #276]	; (800df74 <lwip_netconn_do_writemore+0x270>)
 800de5e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800de62:	494c      	ldr	r1, [pc, #304]	; (800df94 <lwip_netconn_do_writemore+0x290>)
 800de64:	4845      	ldr	r0, [pc, #276]	; (800df7c <lwip_netconn_do_writemore+0x278>)
 800de66:	f00e fb2d 	bl	801c4c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800de6a:	8bbb      	ldrh	r3, [r7, #28]
 800de6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de70:	4293      	cmp	r3, r2
 800de72:	d103      	bne.n	800de7c <lwip_netconn_do_writemore+0x178>
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de7a:	d209      	bcs.n	800de90 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800de80:	8bba      	ldrh	r2, [r7, #28]
 800de82:	429a      	cmp	r2, r3
 800de84:	d10b      	bne.n	800de9e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	899b      	ldrh	r3, [r3, #12]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d906      	bls.n	800de9e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800de90:	2301      	movs	r3, #1
 800de92:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800de94:	7ebb      	ldrb	r3, [r7, #26]
 800de96:	f043 0302 	orr.w	r3, r3, #2
 800de9a:	76bb      	strb	r3, [r7, #26]
 800de9c:	e001      	b.n	800dea2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6858      	ldr	r0, [r3, #4]
 800dea6:	7ebb      	ldrb	r3, [r7, #26]
 800dea8:	8bba      	ldrh	r2, [r7, #28]
 800deaa:	6979      	ldr	r1, [r7, #20]
 800deac:	f00b f90a 	bl	80190c4 <tcp_write>
 800deb0:	4603      	mov	r3, r0
 800deb2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800deb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d12c      	bne.n	800df16 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	6999      	ldr	r1, [r3, #24]
 800dec2:	8bba      	ldrh	r2, [r7, #28]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a1b      	ldr	r3, [r3, #32]
 800dec8:	440a      	add	r2, r1
 800deca:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a1b      	ldr	r3, [r3, #32]
 800ded0:	6919      	ldr	r1, [r3, #16]
 800ded2:	8bba      	ldrh	r2, [r7, #28]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a1b      	ldr	r3, [r3, #32]
 800ded8:	440a      	add	r2, r1
 800deda:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	691a      	ldr	r2, [r3, #16]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	429a      	cmp	r2, r3
 800deec:	d113      	bne.n	800df16 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	899a      	ldrh	r2, [r3, #12]
 800def4:	3a01      	subs	r2, #1
 800def6:	b292      	uxth	r2, r2
 800def8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	899b      	ldrh	r3, [r3, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d008      	beq.n	800df16 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a1b      	ldr	r3, [r3, #32]
 800df08:	689a      	ldr	r2, [r3, #8]
 800df0a:	3208      	adds	r2, #8
 800df0c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	2200      	movs	r2, #0
 800df14:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800df16:	7e7b      	ldrb	r3, [r7, #25]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <lwip_netconn_do_writemore+0x222>
 800df1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f43f af50 	beq.w	800ddc6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800df26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <lwip_netconn_do_writemore+0x234>
 800df2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df36:	d146      	bne.n	800dfc6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800df38:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800df3a:	7e3b      	ldrb	r3, [r7, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d02b      	beq.n	800df98 <lwip_netconn_do_writemore+0x294>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	699a      	ldr	r2, [r3, #24]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a1b      	ldr	r3, [r3, #32]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d223      	bcs.n	800df98 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	2b00      	cmp	r3, #0
 800df56:	d005      	beq.n	800df64 <lwip_netconn_do_writemore+0x260>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5c:	2200      	movs	r2, #0
 800df5e:	2103      	movs	r1, #3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	7f1b      	ldrb	r3, [r3, #28]
 800df68:	f043 0310 	orr.w	r3, r3, #16
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	771a      	strb	r2, [r3, #28]
 800df72:	e028      	b.n	800dfc6 <lwip_netconn_do_writemore+0x2c2>
 800df74:	0801fab4 	.word	0x0801fab4
 800df78:	0801fc2c 	.word	0x0801fc2c
 800df7c:	0801fb18 	.word	0x0801fb18
 800df80:	0801ff34 	.word	0x0801ff34
 800df84:	0801fc3c 	.word	0x0801fc3c
 800df88:	0801ff54 	.word	0x0801ff54
 800df8c:	0801ff6c 	.word	0x0801ff6c
 800df90:	0801ffac 	.word	0x0801ffac
 800df94:	0801ffd4 	.word	0x0801ffd4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfa0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dfa4:	d305      	bcc.n	800dfb2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d909      	bls.n	800dfc6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d005      	beq.n	800dfc6 <lwip_netconn_do_writemore+0x2c2>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	2103      	movs	r1, #3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dfc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d11d      	bne.n	800e00a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	699a      	ldr	r2, [r3, #24]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d002      	beq.n	800dfe4 <lwip_netconn_do_writemore+0x2e0>
 800dfde:	7e3b      	ldrb	r3, [r7, #24]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f00b fe53 	bl	8019c98 <tcp_output>
 800dff2:	4603      	mov	r3, r0
 800dff4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800dff6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800dffa:	f113 0f04 	cmn.w	r3, #4
 800dffe:	d12c      	bne.n	800e05a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e000:	7b3b      	ldrb	r3, [r7, #12]
 800e002:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e004:	2301      	movs	r3, #1
 800e006:	76fb      	strb	r3, [r7, #27]
 800e008:	e027      	b.n	800e05a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e00a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e012:	d120      	bne.n	800e056 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	4618      	mov	r0, r3
 800e01a:	f00b fe3d 	bl	8019c98 <tcp_output>
 800e01e:	4603      	mov	r3, r0
 800e020:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e022:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e026:	f113 0f04 	cmn.w	r3, #4
 800e02a:	d104      	bne.n	800e036 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e02c:	7b7b      	ldrb	r3, [r7, #13]
 800e02e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e030:	2301      	movs	r3, #1
 800e032:	76fb      	strb	r3, [r7, #27]
 800e034:	e011      	b.n	800e05a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e036:	7e3b      	ldrb	r3, [r7, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00e      	beq.n	800e05a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a1b      	ldr	r3, [r3, #32]
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d102      	bne.n	800e04c <lwip_netconn_do_writemore+0x348>
 800e046:	f06f 0306 	mvn.w	r3, #6
 800e04a:	e000      	b.n	800e04e <lwip_netconn_do_writemore+0x34a>
 800e04c:	2300      	movs	r3, #0
 800e04e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e050:	2301      	movs	r3, #1
 800e052:	76fb      	strb	r3, [r7, #27]
 800e054:	e001      	b.n	800e05a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e056:	2301      	movs	r3, #1
 800e058:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e05a:	7efb      	ldrb	r3, [r7, #27]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d015      	beq.n	800e08c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	330c      	adds	r3, #12
 800e068:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	7ffa      	ldrb	r2, [r7, #31]
 800e070:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e07e:	78fb      	ldrb	r3, [r7, #3]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d006      	beq.n	800e092 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e084:	68b8      	ldr	r0, [r7, #8]
 800e086:	f006 fc35 	bl	80148f4 <sys_sem_signal>
 800e08a:	e002      	b.n	800e092 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e08c:	f04f 33ff 	mov.w	r3, #4294967295
 800e090:	e000      	b.n	800e094 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe fd1c 	bl	800caea <netconn_err>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d166      	bne.n	800e18c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0c8:	2b10      	cmp	r3, #16
 800e0ca:	d15d      	bne.n	800e188 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	785b      	ldrb	r3, [r3, #1]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e0d6:	23fb      	movs	r3, #251	; 0xfb
 800e0d8:	73fb      	strb	r3, [r7, #15]
 800e0da:	e057      	b.n	800e18c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d04d      	beq.n	800e182 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d006      	beq.n	800e106 <lwip_netconn_do_write+0x6a>
 800e0f8:	4b28      	ldr	r3, [pc, #160]	; (800e19c <lwip_netconn_do_write+0x100>)
 800e0fa:	f240 7223 	movw	r2, #1827	; 0x723
 800e0fe:	4928      	ldr	r1, [pc, #160]	; (800e1a0 <lwip_netconn_do_write+0x104>)
 800e100:	4828      	ldr	r0, [pc, #160]	; (800e1a4 <lwip_netconn_do_write+0x108>)
 800e102:	f00e f9df 	bl	801c4c4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	695b      	ldr	r3, [r3, #20]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d106      	bne.n	800e11c <lwip_netconn_do_write+0x80>
 800e10e:	4b23      	ldr	r3, [pc, #140]	; (800e19c <lwip_netconn_do_write+0x100>)
 800e110:	f240 7224 	movw	r2, #1828	; 0x724
 800e114:	4924      	ldr	r1, [pc, #144]	; (800e1a8 <lwip_netconn_do_write+0x10c>)
 800e116:	4823      	ldr	r0, [pc, #140]	; (800e1a4 <lwip_netconn_do_write+0x108>)
 800e118:	f00e f9d4 	bl	801c4c4 <iprintf>
        msg->conn->current_msg = msg;
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2100      	movs	r1, #0
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fdea 	bl	800dd04 <lwip_netconn_do_writemore>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d02e      	beq.n	800e194 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	785b      	ldrb	r3, [r3, #1]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d006      	beq.n	800e14e <lwip_netconn_do_write+0xb2>
 800e140:	4b16      	ldr	r3, [pc, #88]	; (800e19c <lwip_netconn_do_write+0x100>)
 800e142:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e146:	4919      	ldr	r1, [pc, #100]	; (800e1ac <lwip_netconn_do_write+0x110>)
 800e148:	4816      	ldr	r0, [pc, #88]	; (800e1a4 <lwip_netconn_do_write+0x108>)
 800e14a:	f00e f9bb 	bl	801c4c4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e14e:	4818      	ldr	r0, [pc, #96]	; (800e1b0 <lwip_netconn_do_write+0x114>)
 800e150:	f006 fc41 	bl	80149d6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	330c      	adds	r3, #12
 800e15a:	2100      	movs	r1, #0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f006 fb98 	bl	8014892 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e162:	4813      	ldr	r0, [pc, #76]	; (800e1b0 <lwip_netconn_do_write+0x114>)
 800e164:	f006 fc28 	bl	80149b8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	785b      	ldrb	r3, [r3, #1]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d110      	bne.n	800e194 <lwip_netconn_do_write+0xf8>
 800e172:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <lwip_netconn_do_write+0x100>)
 800e174:	f240 722c 	movw	r2, #1836	; 0x72c
 800e178:	490c      	ldr	r1, [pc, #48]	; (800e1ac <lwip_netconn_do_write+0x110>)
 800e17a:	480a      	ldr	r0, [pc, #40]	; (800e1a4 <lwip_netconn_do_write+0x108>)
 800e17c:	f00e f9a2 	bl	801c4c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e180:	e008      	b.n	800e194 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e182:	23f5      	movs	r3, #245	; 0xf5
 800e184:	73fb      	strb	r3, [r7, #15]
 800e186:	e001      	b.n	800e18c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e188:	23fa      	movs	r3, #250	; 0xfa
 800e18a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	7bfa      	ldrb	r2, [r7, #15]
 800e190:	711a      	strb	r2, [r3, #4]
 800e192:	e000      	b.n	800e196 <lwip_netconn_do_write+0xfa>
        return;
 800e194:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	0801fab4 	.word	0x0801fab4
 800e1a0:	0801fe78 	.word	0x0801fe78
 800e1a4:	0801fb18 	.word	0x0801fb18
 800e1a8:	08020000 	.word	0x08020000
 800e1ac:	0801fe94 	.word	0x0801fe94
 800e1b0:	240079b0 	.word	0x240079b0

0800e1b4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	785b      	ldrb	r3, [r3, #1]
 800e1c6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d069      	beq.n	800e2a6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	d162      	bne.n	800e2a6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d002      	beq.n	800e1ee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e1e8:	7afb      	ldrb	r3, [r7, #11]
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d05b      	beq.n	800e2a6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e1ee:	7afb      	ldrb	r3, [r7, #11]
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d103      	bne.n	800e1fc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	22f5      	movs	r2, #245	; 0xf5
 800e1f8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e1fa:	e059      	b.n	800e2b0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e1fc:	7afb      	ldrb	r3, [r7, #11]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d103      	bne.n	800e20a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	22fb      	movs	r2, #251	; 0xfb
 800e206:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e208:	e052      	b.n	800e2b0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	7a1b      	ldrb	r3, [r3, #8]
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	2b00      	cmp	r3, #0
 800e214:	d004      	beq.n	800e220 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff f99e 	bl	800d55c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d006      	beq.n	800e238 <lwip_netconn_do_close+0x84>
 800e22a:	4b23      	ldr	r3, [pc, #140]	; (800e2b8 <lwip_netconn_do_close+0x104>)
 800e22c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e230:	4922      	ldr	r1, [pc, #136]	; (800e2bc <lwip_netconn_do_close+0x108>)
 800e232:	4823      	ldr	r0, [pc, #140]	; (800e2c0 <lwip_netconn_do_close+0x10c>)
 800e234:	f00e f946 	bl	801c4c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2204      	movs	r2, #4
 800e23e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2100      	movs	r1, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff fa02 	bl	800d658 <lwip_netconn_do_close_internal>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d029      	beq.n	800e2ae <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	785b      	ldrb	r3, [r3, #1]
 800e260:	2b04      	cmp	r3, #4
 800e262:	d006      	beq.n	800e272 <lwip_netconn_do_close+0xbe>
 800e264:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <lwip_netconn_do_close+0x104>)
 800e266:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e26a:	4916      	ldr	r1, [pc, #88]	; (800e2c4 <lwip_netconn_do_close+0x110>)
 800e26c:	4814      	ldr	r0, [pc, #80]	; (800e2c0 <lwip_netconn_do_close+0x10c>)
 800e26e:	f00e f929 	bl	801c4c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e272:	4815      	ldr	r0, [pc, #84]	; (800e2c8 <lwip_netconn_do_close+0x114>)
 800e274:	f006 fbaf 	bl	80149d6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	330c      	adds	r3, #12
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f006 fb06 	bl	8014892 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e286:	4810      	ldr	r0, [pc, #64]	; (800e2c8 <lwip_netconn_do_close+0x114>)
 800e288:	f006 fb96 	bl	80149b8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	785b      	ldrb	r3, [r3, #1]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <lwip_netconn_do_close+0xfa>
 800e296:	4b08      	ldr	r3, [pc, #32]	; (800e2b8 <lwip_netconn_do_close+0x104>)
 800e298:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e29c:	4909      	ldr	r1, [pc, #36]	; (800e2c4 <lwip_netconn_do_close+0x110>)
 800e29e:	4808      	ldr	r0, [pc, #32]	; (800e2c0 <lwip_netconn_do_close+0x10c>)
 800e2a0:	f00e f910 	bl	801c4c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e2a4:	e003      	b.n	800e2ae <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	22f5      	movs	r2, #245	; 0xf5
 800e2aa:	711a      	strb	r2, [r3, #4]
 800e2ac:	e000      	b.n	800e2b0 <lwip_netconn_do_close+0xfc>
      return;
 800e2ae:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	0801fab4 	.word	0x0801fab4
 800e2bc:	0801fe78 	.word	0x0801fe78
 800e2c0:	0801fb18 	.word	0x0801fb18
 800e2c4:	0801fe94 	.word	0x0801fe94
 800e2c8:	240079b0 	.word	0x240079b0

0800e2cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e2d6:	88fb      	ldrh	r3, [r7, #6]
 800e2d8:	021b      	lsls	r3, r3, #8
 800e2da:	b21a      	sxth	r2, r3
 800e2dc:	88fb      	ldrh	r3, [r7, #6]
 800e2de:	0a1b      	lsrs	r3, r3, #8
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	b21b      	sxth	r3, r3
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	b29b      	uxth	r3, r3
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b083      	sub	sp, #12
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	061a      	lsls	r2, r3, #24
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	021b      	lsls	r3, r3, #8
 800e306:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e30a:	431a      	orrs	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	0a1b      	lsrs	r3, r3, #8
 800e310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	0e1b      	lsrs	r3, r3, #24
 800e31a:	4313      	orrs	r3, r2
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e32c:	4b20      	ldr	r3, [pc, #128]	; (800e3b0 <dhcp_inc_pcb_refcount+0x88>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d133      	bne.n	800e39c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e334:	4b1f      	ldr	r3, [pc, #124]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <dhcp_inc_pcb_refcount+0x20>
 800e33c:	4b1e      	ldr	r3, [pc, #120]	; (800e3b8 <dhcp_inc_pcb_refcount+0x90>)
 800e33e:	22e5      	movs	r2, #229	; 0xe5
 800e340:	491e      	ldr	r1, [pc, #120]	; (800e3bc <dhcp_inc_pcb_refcount+0x94>)
 800e342:	481f      	ldr	r0, [pc, #124]	; (800e3c0 <dhcp_inc_pcb_refcount+0x98>)
 800e344:	f00e f8be 	bl	801c4c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e348:	f00d fbc2 	bl	801bad0 <udp_new>
 800e34c:	4603      	mov	r3, r0
 800e34e:	4a19      	ldr	r2, [pc, #100]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e350:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e352:	4b18      	ldr	r3, [pc, #96]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d102      	bne.n	800e360 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	e024      	b.n	800e3aa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e360:	4b14      	ldr	r3, [pc, #80]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	7a5a      	ldrb	r2, [r3, #9]
 800e366:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0220 	orr.w	r2, r2, #32
 800e36e:	b2d2      	uxtb	r2, r2
 800e370:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e372:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2244      	movs	r2, #68	; 0x44
 800e378:	4912      	ldr	r1, [pc, #72]	; (800e3c4 <dhcp_inc_pcb_refcount+0x9c>)
 800e37a:	4618      	mov	r0, r3
 800e37c:	f00d fa50 	bl	801b820 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e380:	4b0c      	ldr	r3, [pc, #48]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2243      	movs	r2, #67	; 0x43
 800e386:	490f      	ldr	r1, [pc, #60]	; (800e3c4 <dhcp_inc_pcb_refcount+0x9c>)
 800e388:	4618      	mov	r0, r3
 800e38a:	f00d fad1 	bl	801b930 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e38e:	4b09      	ldr	r3, [pc, #36]	; (800e3b4 <dhcp_inc_pcb_refcount+0x8c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2200      	movs	r2, #0
 800e394:	490c      	ldr	r1, [pc, #48]	; (800e3c8 <dhcp_inc_pcb_refcount+0xa0>)
 800e396:	4618      	mov	r0, r3
 800e398:	f00d fb38 	bl	801ba0c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e39c:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <dhcp_inc_pcb_refcount+0x88>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	4b02      	ldr	r3, [pc, #8]	; (800e3b0 <dhcp_inc_pcb_refcount+0x88>)
 800e3a6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	24004724 	.word	0x24004724
 800e3b4:	24004720 	.word	0x24004720
 800e3b8:	0802002c 	.word	0x0802002c
 800e3bc:	08020080 	.word	0x08020080
 800e3c0:	080200a8 	.word	0x080200a8
 800e3c4:	08046500 	.word	0x08046500
 800e3c8:	0800fc61 	.word	0x0800fc61

0800e3cc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e3d0:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <dhcp_dec_pcb_refcount+0x40>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d105      	bne.n	800e3e4 <dhcp_dec_pcb_refcount+0x18>
 800e3d8:	4b0d      	ldr	r3, [pc, #52]	; (800e410 <dhcp_dec_pcb_refcount+0x44>)
 800e3da:	22ff      	movs	r2, #255	; 0xff
 800e3dc:	490d      	ldr	r1, [pc, #52]	; (800e414 <dhcp_dec_pcb_refcount+0x48>)
 800e3de:	480e      	ldr	r0, [pc, #56]	; (800e418 <dhcp_dec_pcb_refcount+0x4c>)
 800e3e0:	f00e f870 	bl	801c4c4 <iprintf>
  dhcp_pcb_refcount--;
 800e3e4:	4b09      	ldr	r3, [pc, #36]	; (800e40c <dhcp_dec_pcb_refcount+0x40>)
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	4b07      	ldr	r3, [pc, #28]	; (800e40c <dhcp_dec_pcb_refcount+0x40>)
 800e3ee:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <dhcp_dec_pcb_refcount+0x40>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d107      	bne.n	800e408 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e3f8:	4b08      	ldr	r3, [pc, #32]	; (800e41c <dhcp_dec_pcb_refcount+0x50>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f00d fb25 	bl	801ba4c <udp_remove>
    dhcp_pcb = NULL;
 800e402:	4b06      	ldr	r3, [pc, #24]	; (800e41c <dhcp_dec_pcb_refcount+0x50>)
 800e404:	2200      	movs	r2, #0
 800e406:	601a      	str	r2, [r3, #0]
  }
}
 800e408:	bf00      	nop
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	24004724 	.word	0x24004724
 800e410:	0802002c 	.word	0x0802002c
 800e414:	080200d0 	.word	0x080200d0
 800e418:	080200a8 	.word	0x080200a8
 800e41c:	24004720 	.word	0x24004720

0800e420 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e42e:	210c      	movs	r1, #12
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f001 f857 	bl	800f4e4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <dhcp_handle_nak+0x30>)
 800e438:	4a05      	ldr	r2, [pc, #20]	; (800e450 <dhcp_handle_nak+0x30>)
 800e43a:	4905      	ldr	r1, [pc, #20]	; (800e450 <dhcp_handle_nak+0x30>)
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f005 f981 	bl	8013744 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fc4a 	bl	800ecdc <dhcp_discover>
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	08046500 	.word	0x08046500

0800e454 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e460:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e462:	2108      	movs	r1, #8
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f001 f83d 	bl	800f4e4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	331c      	adds	r3, #28
 800e46e:	2200      	movs	r2, #0
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f002 fb3e 	bl	8010af4 <etharp_query>
 800e478:	4603      	mov	r3, r0
 800e47a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	799b      	ldrb	r3, [r3, #6]
 800e480:	2bff      	cmp	r3, #255	; 0xff
 800e482:	d005      	beq.n	800e490 <dhcp_check+0x3c>
    dhcp->tries++;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	799b      	ldrb	r3, [r3, #6]
 800e488:	3301      	adds	r3, #1
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e494:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e496:	893b      	ldrh	r3, [r7, #8]
 800e498:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e49c:	4a06      	ldr	r2, [pc, #24]	; (800e4b8 <dhcp_check+0x64>)
 800e49e:	fb82 1203 	smull	r1, r2, r2, r3
 800e4a2:	1152      	asrs	r2, r2, #5
 800e4a4:	17db      	asrs	r3, r3, #31
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e4ae:	bf00      	nop
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	10624dd3 	.word	0x10624dd3

0800e4bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e4cc:	4b0c      	ldr	r3, [pc, #48]	; (800e500 <dhcp_handle_offer+0x44>)
 800e4ce:	789b      	ldrb	r3, [r3, #2]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d011      	beq.n	800e4f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e4da:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <dhcp_handle_offer+0x48>)
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff ff09 	bl	800e2f6 <lwip_htonl>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	691a      	ldr	r2, [r3, #16]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f808 	bl	800e508 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	24004718 	.word	0x24004718
 800e504:	240046f8 	.word	0x240046f8

0800e508 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e508:	b5b0      	push	{r4, r5, r7, lr}
 800e50a:	b08a      	sub	sp, #40	; 0x28
 800e50c:	af02      	add	r7, sp, #8
 800e50e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d109      	bne.n	800e52a <dhcp_select+0x22>
 800e516:	4b71      	ldr	r3, [pc, #452]	; (800e6dc <dhcp_select+0x1d4>)
 800e518:	f240 1277 	movw	r2, #375	; 0x177
 800e51c:	4970      	ldr	r1, [pc, #448]	; (800e6e0 <dhcp_select+0x1d8>)
 800e51e:	4871      	ldr	r0, [pc, #452]	; (800e6e4 <dhcp_select+0x1dc>)
 800e520:	f00d ffd0 	bl	801c4c4 <iprintf>
 800e524:	f06f 030f 	mvn.w	r3, #15
 800e528:	e0d3      	b.n	800e6d2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d109      	bne.n	800e54a <dhcp_select+0x42>
 800e536:	4b69      	ldr	r3, [pc, #420]	; (800e6dc <dhcp_select+0x1d4>)
 800e538:	f240 1279 	movw	r2, #377	; 0x179
 800e53c:	496a      	ldr	r1, [pc, #424]	; (800e6e8 <dhcp_select+0x1e0>)
 800e53e:	4869      	ldr	r0, [pc, #420]	; (800e6e4 <dhcp_select+0x1dc>)
 800e540:	f00d ffc0 	bl	801c4c4 <iprintf>
 800e544:	f06f 0305 	mvn.w	r3, #5
 800e548:	e0c3      	b.n	800e6d2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e54a:	2101      	movs	r1, #1
 800e54c:	69b8      	ldr	r0, [r7, #24]
 800e54e:	f000 ffc9 	bl	800f4e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e552:	f107 030c 	add.w	r3, r7, #12
 800e556:	2203      	movs	r2, #3
 800e558:	69b9      	ldr	r1, [r7, #24]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f001 fc4e 	bl	800fdfc <dhcp_create_msg>
 800e560:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 8085 	beq.w	800e674 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e570:	89b8      	ldrh	r0, [r7, #12]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e578:	2302      	movs	r3, #2
 800e57a:	2239      	movs	r2, #57	; 0x39
 800e57c:	f000 ffcc 	bl	800f518 <dhcp_option>
 800e580:	4603      	mov	r3, r0
 800e582:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e584:	89b8      	ldrh	r0, [r7, #12]
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e590:	461a      	mov	r2, r3
 800e592:	f001 f81b 	bl	800f5cc <dhcp_option_short>
 800e596:	4603      	mov	r3, r0
 800e598:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e59a:	89b8      	ldrh	r0, [r7, #12]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e5a2:	2304      	movs	r3, #4
 800e5a4:	2232      	movs	r2, #50	; 0x32
 800e5a6:	f000 ffb7 	bl	800f518 <dhcp_option>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e5ae:	89bc      	ldrh	r4, [r7, #12]
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	69db      	ldr	r3, [r3, #28]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff fe9b 	bl	800e2f6 <lwip_htonl>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f001 f832 	bl	800f630 <dhcp_option_long>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e5d0:	89b8      	ldrh	r0, [r7, #12]
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e5d8:	2304      	movs	r3, #4
 800e5da:	2236      	movs	r2, #54	; 0x36
 800e5dc:	f000 ff9c 	bl	800f518 <dhcp_option>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e5e4:	89bc      	ldrh	r4, [r7, #12]
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7ff fe80 	bl	800e2f6 <lwip_htonl>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f001 f817 	bl	800f630 <dhcp_option_long>
 800e602:	4603      	mov	r3, r0
 800e604:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e606:	89b8      	ldrh	r0, [r7, #12]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e60e:	2303      	movs	r3, #3
 800e610:	2237      	movs	r2, #55	; 0x37
 800e612:	f000 ff81 	bl	800f518 <dhcp_option>
 800e616:	4603      	mov	r3, r0
 800e618:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e61a:	2300      	movs	r3, #0
 800e61c:	77bb      	strb	r3, [r7, #30]
 800e61e:	e00e      	b.n	800e63e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e620:	89b8      	ldrh	r0, [r7, #12]
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e628:	7fbb      	ldrb	r3, [r7, #30]
 800e62a:	4a30      	ldr	r2, [pc, #192]	; (800e6ec <dhcp_select+0x1e4>)
 800e62c:	5cd3      	ldrb	r3, [r2, r3]
 800e62e:	461a      	mov	r2, r3
 800e630:	f000 ffa6 	bl	800f580 <dhcp_option_byte>
 800e634:	4603      	mov	r3, r0
 800e636:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e638:	7fbb      	ldrb	r3, [r7, #30]
 800e63a:	3301      	adds	r3, #1
 800e63c:	77bb      	strb	r3, [r7, #30]
 800e63e:	7fbb      	ldrb	r3, [r7, #30]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d9ed      	bls.n	800e620 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e644:	89b8      	ldrh	r0, [r7, #12]
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	33f0      	adds	r3, #240	; 0xf0
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	4619      	mov	r1, r3
 800e64e:	f001 fcab 	bl	800ffa8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e652:	4b27      	ldr	r3, [pc, #156]	; (800e6f0 <dhcp_select+0x1e8>)
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	4b27      	ldr	r3, [pc, #156]	; (800e6f4 <dhcp_select+0x1ec>)
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	2343      	movs	r3, #67	; 0x43
 800e660:	4a25      	ldr	r2, [pc, #148]	; (800e6f8 <dhcp_select+0x1f0>)
 800e662:	6979      	ldr	r1, [r7, #20]
 800e664:	f00c fff6 	bl	801b654 <udp_sendto_if_src>
 800e668:	4603      	mov	r3, r0
 800e66a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e66c:	6978      	ldr	r0, [r7, #20]
 800e66e:	f005 fd77 	bl	8014160 <pbuf_free>
 800e672:	e001      	b.n	800e678 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e674:	23ff      	movs	r3, #255	; 0xff
 800e676:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	799b      	ldrb	r3, [r3, #6]
 800e67c:	2bff      	cmp	r3, #255	; 0xff
 800e67e:	d005      	beq.n	800e68c <dhcp_select+0x184>
    dhcp->tries++;
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	799b      	ldrb	r3, [r3, #6]
 800e684:	3301      	adds	r3, #1
 800e686:	b2da      	uxtb	r2, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	799b      	ldrb	r3, [r3, #6]
 800e690:	2b05      	cmp	r3, #5
 800e692:	d80d      	bhi.n	800e6b0 <dhcp_select+0x1a8>
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	799b      	ldrb	r3, [r3, #6]
 800e698:	461a      	mov	r2, r3
 800e69a:	2301      	movs	r3, #1
 800e69c:	4093      	lsls	r3, r2
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	0152      	lsls	r2, r2, #5
 800e6a4:	1ad2      	subs	r2, r2, r3
 800e6a6:	0092      	lsls	r2, r2, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	e001      	b.n	800e6b4 <dhcp_select+0x1ac>
 800e6b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e6b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e6b6:	89fb      	ldrh	r3, [r7, #14]
 800e6b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e6bc:	4a0f      	ldr	r2, [pc, #60]	; (800e6fc <dhcp_select+0x1f4>)
 800e6be:	fb82 1203 	smull	r1, r2, r2, r3
 800e6c2:	1152      	asrs	r2, r2, #5
 800e6c4:	17db      	asrs	r3, r3, #31
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e6ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3720      	adds	r7, #32
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	0802002c 	.word	0x0802002c
 800e6e0:	080200f4 	.word	0x080200f4
 800e6e4:	080200a8 	.word	0x080200a8
 800e6e8:	08020110 	.word	0x08020110
 800e6ec:	24000028 	.word	0x24000028
 800e6f0:	24004720 	.word	0x24004720
 800e6f4:	08046500 	.word	0x08046500
 800e6f8:	08046504 	.word	0x08046504
 800e6fc:	10624dd3 	.word	0x10624dd3

0800e700 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e706:	4b27      	ldr	r3, [pc, #156]	; (800e7a4 <dhcp_coarse_tmr+0xa4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	607b      	str	r3, [r7, #4]
 800e70c:	e042      	b.n	800e794 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e712:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d039      	beq.n	800e78e <dhcp_coarse_tmr+0x8e>
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	795b      	ldrb	r3, [r3, #5]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d035      	beq.n	800e78e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	8a9b      	ldrh	r3, [r3, #20]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d012      	beq.n	800e750 <dhcp_coarse_tmr+0x50>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	8a5b      	ldrh	r3, [r3, #18]
 800e72e:	3301      	adds	r3, #1
 800e730:	b29a      	uxth	r2, r3
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	825a      	strh	r2, [r3, #18]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	8a5a      	ldrh	r2, [r3, #18]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	8a9b      	ldrh	r3, [r3, #20]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d106      	bne.n	800e750 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fe34 	bl	800f3b0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 f96b 	bl	800ea24 <dhcp_start>
 800e74e:	e01e      	b.n	800e78e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	8a1b      	ldrh	r3, [r3, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00b      	beq.n	800e770 <dhcp_coarse_tmr+0x70>
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	8a1b      	ldrh	r3, [r3, #16]
 800e75c:	1e5a      	subs	r2, r3, #1
 800e75e:	b291      	uxth	r1, r2
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	8211      	strh	r1, [r2, #16]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d103      	bne.n	800e770 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f8c7 	bl	800e8fc <dhcp_t2_timeout>
 800e76e:	e00e      	b.n	800e78e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	89db      	ldrh	r3, [r3, #14]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00a      	beq.n	800e78e <dhcp_coarse_tmr+0x8e>
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	89db      	ldrh	r3, [r3, #14]
 800e77c:	1e5a      	subs	r2, r3, #1
 800e77e:	b291      	uxth	r1, r2
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	81d1      	strh	r1, [r2, #14]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d102      	bne.n	800e78e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 f888 	bl	800e89e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	607b      	str	r3, [r7, #4]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1b9      	bne.n	800e70e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	24007940 	.word	0x24007940

0800e7a8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e7ae:	4b16      	ldr	r3, [pc, #88]	; (800e808 <dhcp_fine_tmr+0x60>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	607b      	str	r3, [r7, #4]
 800e7b4:	e020      	b.n	800e7f8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d017      	beq.n	800e7f2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	891b      	ldrh	r3, [r3, #8]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d906      	bls.n	800e7d8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	891b      	ldrh	r3, [r3, #8]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	811a      	strh	r2, [r3, #8]
 800e7d6:	e00c      	b.n	800e7f2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	891b      	ldrh	r3, [r3, #8]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d108      	bne.n	800e7f2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	891b      	ldrh	r3, [r3, #8]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f80d 	bl	800e80c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	607b      	str	r3, [r7, #4]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1db      	bne.n	800e7b6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	24007940 	.word	0x24007940

0800e80c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e818:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	795b      	ldrb	r3, [r3, #5]
 800e81e:	2b0c      	cmp	r3, #12
 800e820:	d003      	beq.n	800e82a <dhcp_timeout+0x1e>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	795b      	ldrb	r3, [r3, #5]
 800e826:	2b06      	cmp	r3, #6
 800e828:	d103      	bne.n	800e832 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fa56 	bl	800ecdc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e830:	e031      	b.n	800e896 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	795b      	ldrb	r3, [r3, #5]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d10e      	bne.n	800e858 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	799b      	ldrb	r3, [r3, #6]
 800e83e:	2b05      	cmp	r3, #5
 800e840:	d803      	bhi.n	800e84a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fe60 	bl	800e508 <dhcp_select>
}
 800e848:	e025      	b.n	800e896 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fdb0 	bl	800f3b0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f8e7 	bl	800ea24 <dhcp_start>
}
 800e856:	e01e      	b.n	800e896 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	795b      	ldrb	r3, [r3, #5]
 800e85c:	2b08      	cmp	r3, #8
 800e85e:	d10b      	bne.n	800e878 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	799b      	ldrb	r3, [r3, #6]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d803      	bhi.n	800e870 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff fdf3 	bl	800e454 <dhcp_check>
}
 800e86e:	e012      	b.n	800e896 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fad5 	bl	800ee20 <dhcp_bind>
}
 800e876:	e00e      	b.n	800e896 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	795b      	ldrb	r3, [r3, #5]
 800e87c:	2b03      	cmp	r3, #3
 800e87e:	d10a      	bne.n	800e896 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	799b      	ldrb	r3, [r3, #6]
 800e884:	2b01      	cmp	r3, #1
 800e886:	d803      	bhi.n	800e890 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fcdb 	bl	800f244 <dhcp_reboot>
}
 800e88e:	e002      	b.n	800e896 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 fa23 	bl	800ecdc <dhcp_discover>
}
 800e896:	bf00      	nop
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	795b      	ldrb	r3, [r3, #5]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d007      	beq.n	800e8c4 <dhcp_t1_timeout+0x26>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	795b      	ldrb	r3, [r3, #5]
 800e8b8:	2b0a      	cmp	r3, #10
 800e8ba:	d003      	beq.n	800e8c4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e8c0:	2b05      	cmp	r3, #5
 800e8c2:	d117      	bne.n	800e8f4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 fb85 	bl	800efd4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	899b      	ldrh	r3, [r3, #12]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	8a5b      	ldrh	r3, [r3, #18]
 800e8d4:	1ad3      	subs	r3, r2, r3
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	dd0c      	ble.n	800e8f4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	8a5b      	ldrh	r3, [r3, #18]
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	da00      	bge.n	800e8ec <dhcp_t1_timeout+0x4e>
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	105b      	asrs	r3, r3, #1
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e8f4:	bf00      	nop
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e908:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	795b      	ldrb	r3, [r3, #5]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d00b      	beq.n	800e92a <dhcp_t2_timeout+0x2e>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	795b      	ldrb	r3, [r3, #5]
 800e916:	2b0a      	cmp	r3, #10
 800e918:	d007      	beq.n	800e92a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e91e:	2b05      	cmp	r3, #5
 800e920:	d003      	beq.n	800e92a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	795b      	ldrb	r3, [r3, #5]
 800e926:	2b04      	cmp	r3, #4
 800e928:	d117      	bne.n	800e95a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fbee 	bl	800f10c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8a9b      	ldrh	r3, [r3, #20]
 800e934:	461a      	mov	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	8a5b      	ldrh	r3, [r3, #18]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	dd0c      	ble.n	800e95a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	8a9b      	ldrh	r3, [r3, #20]
 800e944:	461a      	mov	r2, r3
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	8a5b      	ldrh	r3, [r3, #18]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	da00      	bge.n	800e952 <dhcp_t2_timeout+0x56>
 800e950:	3301      	adds	r3, #1
 800e952:	105b      	asrs	r3, r3, #1
 800e954:	b29a      	uxth	r2, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
	...

0800e964 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e972:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e980:	4b26      	ldr	r3, [pc, #152]	; (800ea1c <dhcp_handle_ack+0xb8>)
 800e982:	78db      	ldrb	r3, [r3, #3]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d003      	beq.n	800e990 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e988:	4b25      	ldr	r3, [pc, #148]	; (800ea20 <dhcp_handle_ack+0xbc>)
 800e98a:	68da      	ldr	r2, [r3, #12]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e990:	4b22      	ldr	r3, [pc, #136]	; (800ea1c <dhcp_handle_ack+0xb8>)
 800e992:	791b      	ldrb	r3, [r3, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d004      	beq.n	800e9a2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e998:	4b21      	ldr	r3, [pc, #132]	; (800ea20 <dhcp_handle_ack+0xbc>)
 800e99a:	691a      	ldr	r2, [r3, #16]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e9a0:	e004      	b.n	800e9ac <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a6:	085a      	lsrs	r2, r3, #1
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ea1c <dhcp_handle_ack+0xb8>)
 800e9ae:	795b      	ldrb	r3, [r3, #5]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d004      	beq.n	800e9be <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e9b4:	4b1a      	ldr	r3, [pc, #104]	; (800ea20 <dhcp_handle_ack+0xbc>)
 800e9b6:	695a      	ldr	r2, [r3, #20]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	631a      	str	r2, [r3, #48]	; 0x30
 800e9bc:	e007      	b.n	800e9ce <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	00db      	lsls	r3, r3, #3
 800e9c6:	1a9b      	subs	r3, r3, r2
 800e9c8:	08da      	lsrs	r2, r3, #3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	691a      	ldr	r2, [r3, #16]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <dhcp_handle_ack+0xb8>)
 800e9d8:	799b      	ldrb	r3, [r3, #6]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00b      	beq.n	800e9f6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e9de:	4b10      	ldr	r3, [pc, #64]	; (800ea20 <dhcp_handle_ack+0xbc>)
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7ff fc87 	bl	800e2f6 <lwip_htonl>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	71da      	strb	r2, [r3, #7]
 800e9f4:	e002      	b.n	800e9fc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e9fc:	4b07      	ldr	r3, [pc, #28]	; (800ea1c <dhcp_handle_ack+0xb8>)
 800e9fe:	79db      	ldrb	r3, [r3, #7]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d007      	beq.n	800ea14 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ea04:	4b06      	ldr	r3, [pc, #24]	; (800ea20 <dhcp_handle_ack+0xbc>)
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff fc74 	bl	800e2f6 <lwip_htonl>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ea14:	bf00      	nop
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	24004718 	.word	0x24004718
 800ea20:	240046f8 	.word	0x240046f8

0800ea24 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d109      	bne.n	800ea46 <dhcp_start+0x22>
 800ea32:	4b37      	ldr	r3, [pc, #220]	; (800eb10 <dhcp_start+0xec>)
 800ea34:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ea38:	4936      	ldr	r1, [pc, #216]	; (800eb14 <dhcp_start+0xf0>)
 800ea3a:	4837      	ldr	r0, [pc, #220]	; (800eb18 <dhcp_start+0xf4>)
 800ea3c:	f00d fd42 	bl	801c4c4 <iprintf>
 800ea40:	f06f 030f 	mvn.w	r3, #15
 800ea44:	e060      	b.n	800eb08 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d109      	bne.n	800ea68 <dhcp_start+0x44>
 800ea54:	4b2e      	ldr	r3, [pc, #184]	; (800eb10 <dhcp_start+0xec>)
 800ea56:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ea5a:	4930      	ldr	r1, [pc, #192]	; (800eb1c <dhcp_start+0xf8>)
 800ea5c:	482e      	ldr	r0, [pc, #184]	; (800eb18 <dhcp_start+0xf4>)
 800ea5e:	f00d fd31 	bl	801c4c4 <iprintf>
 800ea62:	f06f 030f 	mvn.w	r3, #15
 800ea66:	e04f      	b.n	800eb08 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea72:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ea76:	d202      	bcs.n	800ea7e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ea78:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7c:	e044      	b.n	800eb08 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d10d      	bne.n	800eaa0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ea84:	2034      	movs	r0, #52	; 0x34
 800ea86:	f004 fa03 	bl	8012e90 <mem_malloc>
 800ea8a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ea92:	f04f 33ff 	mov.w	r3, #4294967295
 800ea96:	e037      	b.n	800eb08 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	625a      	str	r2, [r3, #36]	; 0x24
 800ea9e:	e005      	b.n	800eaac <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	791b      	ldrb	r3, [r3, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800eaa8:	f7ff fc90 	bl	800e3cc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800eaac:	2234      	movs	r2, #52	; 0x34
 800eaae:	2100      	movs	r1, #0
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f00d f8bd 	bl	801bc30 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800eab6:	f7ff fc37 	bl	800e328 <dhcp_inc_pcb_refcount>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <dhcp_start+0xa2>
    return ERR_MEM;
 800eac0:	f04f 33ff 	mov.w	r3, #4294967295
 800eac4:	e020      	b.n	800eb08 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d105      	bne.n	800eae6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800eada:	2102      	movs	r1, #2
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f000 fd01 	bl	800f4e4 <dhcp_set_state>
    return ERR_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	e010      	b.n	800eb08 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f8f8 	bl	800ecdc <dhcp_discover>
 800eaec:	4603      	mov	r3, r0
 800eaee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800eaf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d005      	beq.n	800eb04 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fc59 	bl	800f3b0 <dhcp_release_and_stop>
    return ERR_MEM;
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e001      	b.n	800eb08 <dhcp_start+0xe4>
  }
  return result;
 800eb04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	0802002c 	.word	0x0802002c
 800eb14:	0802012c 	.word	0x0802012c
 800eb18:	080200a8 	.word	0x080200a8
 800eb1c:	08020170 	.word	0x08020170

0800eb20 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d025      	beq.n	800eb80 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	795b      	ldrb	r3, [r3, #5]
 800eb38:	2b0a      	cmp	r3, #10
 800eb3a:	d008      	beq.n	800eb4e <dhcp_network_changed+0x2e>
 800eb3c:	2b0a      	cmp	r3, #10
 800eb3e:	dc0d      	bgt.n	800eb5c <dhcp_network_changed+0x3c>
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d01f      	beq.n	800eb84 <dhcp_network_changed+0x64>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	db09      	blt.n	800eb5c <dhcp_network_changed+0x3c>
 800eb48:	3b03      	subs	r3, #3
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d806      	bhi.n	800eb5c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 fb75 	bl	800f244 <dhcp_reboot>
      break;
 800eb5a:	e014      	b.n	800eb86 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	795b      	ldrb	r3, [r3, #5]
 800eb60:	2b0c      	cmp	r3, #12
 800eb62:	d906      	bls.n	800eb72 <dhcp_network_changed+0x52>
 800eb64:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <dhcp_network_changed+0x6c>)
 800eb66:	f240 326d 	movw	r2, #877	; 0x36d
 800eb6a:	4909      	ldr	r1, [pc, #36]	; (800eb90 <dhcp_network_changed+0x70>)
 800eb6c:	4809      	ldr	r0, [pc, #36]	; (800eb94 <dhcp_network_changed+0x74>)
 800eb6e:	f00d fca9 	bl	801c4c4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f8af 	bl	800ecdc <dhcp_discover>
      break;
 800eb7e:	e002      	b.n	800eb86 <dhcp_network_changed+0x66>
    return;
 800eb80:	bf00      	nop
 800eb82:	e000      	b.n	800eb86 <dhcp_network_changed+0x66>
      break;
 800eb84:	bf00      	nop
  }
}
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	0802002c 	.word	0x0802002c
 800eb90:	08020194 	.word	0x08020194
 800eb94:	080200a8 	.word	0x080200a8

0800eb98 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d107      	bne.n	800ebb8 <dhcp_arp_reply+0x20>
 800eba8:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <dhcp_arp_reply+0x4c>)
 800ebaa:	f240 328b 	movw	r2, #907	; 0x38b
 800ebae:	490e      	ldr	r1, [pc, #56]	; (800ebe8 <dhcp_arp_reply+0x50>)
 800ebb0:	480e      	ldr	r0, [pc, #56]	; (800ebec <dhcp_arp_reply+0x54>)
 800ebb2:	f00d fc87 	bl	801c4c4 <iprintf>
 800ebb6:	e012      	b.n	800ebde <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00c      	beq.n	800ebde <dhcp_arp_reply+0x46>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	795b      	ldrb	r3, [r3, #5]
 800ebc8:	2b08      	cmp	r3, #8
 800ebca:	d108      	bne.n	800ebde <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	69db      	ldr	r3, [r3, #28]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d102      	bne.n	800ebde <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f809 	bl	800ebf0 <dhcp_decline>
    }
  }
}
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	0802002c 	.word	0x0802002c
 800ebe8:	0802012c 	.word	0x0802012c
 800ebec:	080200a8 	.word	0x080200a8

0800ebf0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ebf0:	b5b0      	push	{r4, r5, r7, lr}
 800ebf2:	b08a      	sub	sp, #40	; 0x28
 800ebf4:	af02      	add	r7, sp, #8
 800ebf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ebfe:	210c      	movs	r1, #12
 800ec00:	69b8      	ldr	r0, [r7, #24]
 800ec02:	f000 fc6f 	bl	800f4e4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ec06:	f107 030c 	add.w	r3, r7, #12
 800ec0a:	2204      	movs	r2, #4
 800ec0c:	69b9      	ldr	r1, [r7, #24]
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f001 f8f4 	bl	800fdfc <dhcp_create_msg>
 800ec14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d035      	beq.n	800ec88 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ec22:	89b8      	ldrh	r0, [r7, #12]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec2a:	2304      	movs	r3, #4
 800ec2c:	2232      	movs	r2, #50	; 0x32
 800ec2e:	f000 fc73 	bl	800f518 <dhcp_option>
 800ec32:	4603      	mov	r3, r0
 800ec34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ec36:	89bc      	ldrh	r4, [r7, #12]
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	69db      	ldr	r3, [r3, #28]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff fb57 	bl	800e2f6 <lwip_htonl>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f000 fcee 	bl	800f630 <dhcp_option_long>
 800ec54:	4603      	mov	r3, r0
 800ec56:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec58:	89b8      	ldrh	r0, [r7, #12]
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	33f0      	adds	r3, #240	; 0xf0
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	4619      	mov	r1, r3
 800ec62:	f001 f9a1 	bl	800ffa8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ec66:	4b19      	ldr	r3, [pc, #100]	; (800eccc <dhcp_decline+0xdc>)
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	4b19      	ldr	r3, [pc, #100]	; (800ecd0 <dhcp_decline+0xe0>)
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	2343      	movs	r3, #67	; 0x43
 800ec74:	4a17      	ldr	r2, [pc, #92]	; (800ecd4 <dhcp_decline+0xe4>)
 800ec76:	6979      	ldr	r1, [r7, #20]
 800ec78:	f00c fcec 	bl	801b654 <udp_sendto_if_src>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ec80:	6978      	ldr	r0, [r7, #20]
 800ec82:	f005 fa6d 	bl	8014160 <pbuf_free>
 800ec86:	e001      	b.n	800ec8c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ec88:	23ff      	movs	r3, #255	; 0xff
 800ec8a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	799b      	ldrb	r3, [r3, #6]
 800ec90:	2bff      	cmp	r3, #255	; 0xff
 800ec92:	d005      	beq.n	800eca0 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	799b      	ldrb	r3, [r3, #6]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	b2da      	uxtb	r2, r3
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800eca0:	f242 7310 	movw	r3, #10000	; 0x2710
 800eca4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eca6:	89fb      	ldrh	r3, [r7, #14]
 800eca8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ecac:	4a0a      	ldr	r2, [pc, #40]	; (800ecd8 <dhcp_decline+0xe8>)
 800ecae:	fb82 1203 	smull	r1, r2, r2, r3
 800ecb2:	1152      	asrs	r2, r2, #5
 800ecb4:	17db      	asrs	r3, r3, #31
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ecbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bdb0      	pop	{r4, r5, r7, pc}
 800ecca:	bf00      	nop
 800eccc:	24004720 	.word	0x24004720
 800ecd0:	08046500 	.word	0x08046500
 800ecd4:	08046504 	.word	0x08046504
 800ecd8:	10624dd3 	.word	0x10624dd3

0800ecdc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ecf4:	2106      	movs	r1, #6
 800ecf6:	69b8      	ldr	r0, [r7, #24]
 800ecf8:	f000 fbf4 	bl	800f4e4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ecfc:	f107 0308 	add.w	r3, r7, #8
 800ed00:	2201      	movs	r2, #1
 800ed02:	69b9      	ldr	r1, [r7, #24]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f001 f879 	bl	800fdfc <dhcp_create_msg>
 800ed0a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d04b      	beq.n	800edaa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed18:	8938      	ldrh	r0, [r7, #8]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed20:	2302      	movs	r3, #2
 800ed22:	2239      	movs	r2, #57	; 0x39
 800ed24:	f000 fbf8 	bl	800f518 <dhcp_option>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed2c:	8938      	ldrh	r0, [r7, #8]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed38:	461a      	mov	r2, r3
 800ed3a:	f000 fc47 	bl	800f5cc <dhcp_option_short>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed42:	8938      	ldrh	r0, [r7, #8]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	2237      	movs	r2, #55	; 0x37
 800ed4e:	f000 fbe3 	bl	800f518 <dhcp_option>
 800ed52:	4603      	mov	r3, r0
 800ed54:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed56:	2300      	movs	r3, #0
 800ed58:	77fb      	strb	r3, [r7, #31]
 800ed5a:	e00e      	b.n	800ed7a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ed5c:	8938      	ldrh	r0, [r7, #8]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed64:	7ffb      	ldrb	r3, [r7, #31]
 800ed66:	4a29      	ldr	r2, [pc, #164]	; (800ee0c <dhcp_discover+0x130>)
 800ed68:	5cd3      	ldrb	r3, [r2, r3]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	f000 fc08 	bl	800f580 <dhcp_option_byte>
 800ed70:	4603      	mov	r3, r0
 800ed72:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed74:	7ffb      	ldrb	r3, [r7, #31]
 800ed76:	3301      	adds	r3, #1
 800ed78:	77fb      	strb	r3, [r7, #31]
 800ed7a:	7ffb      	ldrb	r3, [r7, #31]
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d9ed      	bls.n	800ed5c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ed80:	8938      	ldrh	r0, [r7, #8]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	33f0      	adds	r3, #240	; 0xf0
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	f001 f90d 	bl	800ffa8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ed8e:	4b20      	ldr	r3, [pc, #128]	; (800ee10 <dhcp_discover+0x134>)
 800ed90:	6818      	ldr	r0, [r3, #0]
 800ed92:	4b20      	ldr	r3, [pc, #128]	; (800ee14 <dhcp_discover+0x138>)
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	2343      	movs	r3, #67	; 0x43
 800ed9c:	4a1e      	ldr	r2, [pc, #120]	; (800ee18 <dhcp_discover+0x13c>)
 800ed9e:	6939      	ldr	r1, [r7, #16]
 800eda0:	f00c fc58 	bl	801b654 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800eda4:	6938      	ldr	r0, [r7, #16]
 800eda6:	f005 f9db 	bl	8014160 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	799b      	ldrb	r3, [r3, #6]
 800edae:	2bff      	cmp	r3, #255	; 0xff
 800edb0:	d005      	beq.n	800edbe <dhcp_discover+0xe2>
    dhcp->tries++;
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	799b      	ldrb	r3, [r3, #6]
 800edb6:	3301      	adds	r3, #1
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	799b      	ldrb	r3, [r3, #6]
 800edc2:	2b05      	cmp	r3, #5
 800edc4:	d80d      	bhi.n	800ede2 <dhcp_discover+0x106>
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	799b      	ldrb	r3, [r3, #6]
 800edca:	461a      	mov	r2, r3
 800edcc:	2301      	movs	r3, #1
 800edce:	4093      	lsls	r3, r2
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	461a      	mov	r2, r3
 800edd4:	0152      	lsls	r2, r2, #5
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	0092      	lsls	r2, r2, #2
 800edda:	4413      	add	r3, r2
 800eddc:	00db      	lsls	r3, r3, #3
 800edde:	b29b      	uxth	r3, r3
 800ede0:	e001      	b.n	800ede6 <dhcp_discover+0x10a>
 800ede2:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ede6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ede8:	897b      	ldrh	r3, [r7, #10]
 800edea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800edee:	4a0b      	ldr	r2, [pc, #44]	; (800ee1c <dhcp_discover+0x140>)
 800edf0:	fb82 1203 	smull	r1, r2, r2, r3
 800edf4:	1152      	asrs	r2, r2, #5
 800edf6:	17db      	asrs	r3, r3, #31
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ee00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3720      	adds	r7, #32
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	24000028 	.word	0x24000028
 800ee10:	24004720 	.word	0x24004720
 800ee14:	08046500 	.word	0x08046500
 800ee18:	08046504 	.word	0x08046504
 800ee1c:	10624dd3 	.word	0x10624dd3

0800ee20 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d107      	bne.n	800ee3e <dhcp_bind+0x1e>
 800ee2e:	4b64      	ldr	r3, [pc, #400]	; (800efc0 <dhcp_bind+0x1a0>)
 800ee30:	f240 4215 	movw	r2, #1045	; 0x415
 800ee34:	4963      	ldr	r1, [pc, #396]	; (800efc4 <dhcp_bind+0x1a4>)
 800ee36:	4864      	ldr	r0, [pc, #400]	; (800efc8 <dhcp_bind+0x1a8>)
 800ee38:	f00d fb44 	bl	801c4c4 <iprintf>
 800ee3c:	e0bc      	b.n	800efb8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee42:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d107      	bne.n	800ee5a <dhcp_bind+0x3a>
 800ee4a:	4b5d      	ldr	r3, [pc, #372]	; (800efc0 <dhcp_bind+0x1a0>)
 800ee4c:	f240 4217 	movw	r2, #1047	; 0x417
 800ee50:	495e      	ldr	r1, [pc, #376]	; (800efcc <dhcp_bind+0x1ac>)
 800ee52:	485d      	ldr	r0, [pc, #372]	; (800efc8 <dhcp_bind+0x1a8>)
 800ee54:	f00d fb36 	bl	801c4c4 <iprintf>
 800ee58:	e0ae      	b.n	800efb8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee68:	d019      	beq.n	800ee9e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6e:	331e      	adds	r3, #30
 800ee70:	4a57      	ldr	r2, [pc, #348]	; (800efd0 <dhcp_bind+0x1b0>)
 800ee72:	fba2 2303 	umull	r2, r3, r2, r3
 800ee76:	095b      	lsrs	r3, r3, #5
 800ee78:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee80:	d302      	bcc.n	800ee88 <dhcp_bind+0x68>
      timeout = 0xffff;
 800ee82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee86:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	8a9b      	ldrh	r3, [r3, #20]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d102      	bne.n	800ee9e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea6:	d01d      	beq.n	800eee4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeac:	331e      	adds	r3, #30
 800eeae:	4a48      	ldr	r2, [pc, #288]	; (800efd0 <dhcp_bind+0x1b0>)
 800eeb0:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb4:	095b      	lsrs	r3, r3, #5
 800eeb6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eebe:	d302      	bcc.n	800eec6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800eec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eec4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	895b      	ldrh	r3, [r3, #10]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	2201      	movs	r2, #1
 800eeda:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	895a      	ldrh	r2, [r3, #10]
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeec:	d01d      	beq.n	800ef2a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef2:	331e      	adds	r3, #30
 800eef4:	4a36      	ldr	r2, [pc, #216]	; (800efd0 <dhcp_bind+0x1b0>)
 800eef6:	fba2 2303 	umull	r2, r3, r2, r3
 800eefa:	095b      	lsrs	r3, r3, #5
 800eefc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef04:	d302      	bcc.n	800ef0c <dhcp_bind+0xec>
      timeout = 0xffff;
 800ef06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef0a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	899b      	ldrh	r3, [r3, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d102      	bne.n	800ef22 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	899a      	ldrh	r2, [r3, #12]
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	895a      	ldrh	r2, [r3, #10]
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	899b      	ldrh	r3, [r3, #12]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d306      	bcc.n	800ef44 <dhcp_bind+0x124>
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d002      	beq.n	800ef44 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	2200      	movs	r2, #0
 800ef42:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	79db      	ldrb	r3, [r3, #7]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	e014      	b.n	800ef7e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	331c      	adds	r3, #28
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ef5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	db02      	blt.n	800ef6a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ef64:	23ff      	movs	r3, #255	; 0xff
 800ef66:	613b      	str	r3, [r7, #16]
 800ef68:	e009      	b.n	800ef7e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ef6a:	7dfb      	ldrb	r3, [r7, #23]
 800ef6c:	2bbf      	cmp	r3, #191	; 0xbf
 800ef6e:	d903      	bls.n	800ef78 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800ef70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ef74:	613b      	str	r3, [r7, #16]
 800ef76:	e002      	b.n	800ef7e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ef78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef7c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef82:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d108      	bne.n	800ef9c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	69da      	ldr	r2, [r3, #28]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	4013      	ands	r3, r2
 800ef92:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ef9c:	210a      	movs	r1, #10
 800ef9e:	69b8      	ldr	r0, [r7, #24]
 800efa0:	f000 faa0 	bl	800f4e4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	f103 011c 	add.w	r1, r3, #28
 800efaa:	f107 030c 	add.w	r3, r7, #12
 800efae:	f107 0210 	add.w	r2, r7, #16
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f004 fbc6 	bl	8013744 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800efb8:	3720      	adds	r7, #32
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	0802002c 	.word	0x0802002c
 800efc4:	080201a8 	.word	0x080201a8
 800efc8:	080200a8 	.word	0x080200a8
 800efcc:	080201c4 	.word	0x080201c4
 800efd0:	88888889 	.word	0x88888889

0800efd4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08a      	sub	sp, #40	; 0x28
 800efd8:	af02      	add	r7, sp, #8
 800efda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800efe2:	2105      	movs	r1, #5
 800efe4:	69b8      	ldr	r0, [r7, #24]
 800efe6:	f000 fa7d 	bl	800f4e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	2203      	movs	r2, #3
 800eff0:	69b9      	ldr	r1, [r7, #24]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 ff02 	bl	800fdfc <dhcp_create_msg>
 800eff8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d04e      	beq.n	800f09e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f006:	89b8      	ldrh	r0, [r7, #12]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f00e:	2302      	movs	r3, #2
 800f010:	2239      	movs	r2, #57	; 0x39
 800f012:	f000 fa81 	bl	800f518 <dhcp_option>
 800f016:	4603      	mov	r3, r0
 800f018:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f01a:	89b8      	ldrh	r0, [r7, #12]
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f026:	461a      	mov	r2, r3
 800f028:	f000 fad0 	bl	800f5cc <dhcp_option_short>
 800f02c:	4603      	mov	r3, r0
 800f02e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f030:	89b8      	ldrh	r0, [r7, #12]
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f038:	2303      	movs	r3, #3
 800f03a:	2237      	movs	r2, #55	; 0x37
 800f03c:	f000 fa6c 	bl	800f518 <dhcp_option>
 800f040:	4603      	mov	r3, r0
 800f042:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f044:	2300      	movs	r3, #0
 800f046:	77bb      	strb	r3, [r7, #30]
 800f048:	e00e      	b.n	800f068 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f04a:	89b8      	ldrh	r0, [r7, #12]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f052:	7fbb      	ldrb	r3, [r7, #30]
 800f054:	4a2a      	ldr	r2, [pc, #168]	; (800f100 <dhcp_renew+0x12c>)
 800f056:	5cd3      	ldrb	r3, [r2, r3]
 800f058:	461a      	mov	r2, r3
 800f05a:	f000 fa91 	bl	800f580 <dhcp_option_byte>
 800f05e:	4603      	mov	r3, r0
 800f060:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f062:	7fbb      	ldrb	r3, [r7, #30]
 800f064:	3301      	adds	r3, #1
 800f066:	77bb      	strb	r3, [r7, #30]
 800f068:	7fbb      	ldrb	r3, [r7, #30]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d9ed      	bls.n	800f04a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f06e:	89b8      	ldrh	r0, [r7, #12]
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	33f0      	adds	r3, #240	; 0xf0
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	4619      	mov	r1, r3
 800f078:	f000 ff96 	bl	800ffa8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f07c:	4b21      	ldr	r3, [pc, #132]	; (800f104 <dhcp_renew+0x130>)
 800f07e:	6818      	ldr	r0, [r3, #0]
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	f103 0218 	add.w	r2, r3, #24
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	2343      	movs	r3, #67	; 0x43
 800f08c:	6979      	ldr	r1, [r7, #20]
 800f08e:	f00c fa6d 	bl	801b56c <udp_sendto_if>
 800f092:	4603      	mov	r3, r0
 800f094:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f096:	6978      	ldr	r0, [r7, #20]
 800f098:	f005 f862 	bl	8014160 <pbuf_free>
 800f09c:	e001      	b.n	800f0a2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f09e:	23ff      	movs	r3, #255	; 0xff
 800f0a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	799b      	ldrb	r3, [r3, #6]
 800f0a6:	2bff      	cmp	r3, #255	; 0xff
 800f0a8:	d005      	beq.n	800f0b6 <dhcp_renew+0xe2>
    dhcp->tries++;
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	799b      	ldrb	r3, [r3, #6]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	b2da      	uxtb	r2, r3
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	799b      	ldrb	r3, [r3, #6]
 800f0ba:	2b09      	cmp	r3, #9
 800f0bc:	d80a      	bhi.n	800f0d4 <dhcp_renew+0x100>
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	799b      	ldrb	r3, [r3, #6]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	0152      	lsls	r2, r2, #5
 800f0c8:	1ad2      	subs	r2, r2, r3
 800f0ca:	0092      	lsls	r2, r2, #2
 800f0cc:	4413      	add	r3, r2
 800f0ce:	011b      	lsls	r3, r3, #4
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	e001      	b.n	800f0d8 <dhcp_renew+0x104>
 800f0d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f0d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0da:	89fb      	ldrh	r3, [r7, #14]
 800f0dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0e0:	4a09      	ldr	r2, [pc, #36]	; (800f108 <dhcp_renew+0x134>)
 800f0e2:	fb82 1203 	smull	r1, r2, r2, r3
 800f0e6:	1152      	asrs	r2, r2, #5
 800f0e8:	17db      	asrs	r3, r3, #31
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3720      	adds	r7, #32
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	24000028 	.word	0x24000028
 800f104:	24004720 	.word	0x24004720
 800f108:	10624dd3 	.word	0x10624dd3

0800f10c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af02      	add	r7, sp, #8
 800f112:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f118:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f11a:	2104      	movs	r1, #4
 800f11c:	69b8      	ldr	r0, [r7, #24]
 800f11e:	f000 f9e1 	bl	800f4e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f122:	f107 030c 	add.w	r3, r7, #12
 800f126:	2203      	movs	r2, #3
 800f128:	69b9      	ldr	r1, [r7, #24]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fe66 	bl	800fdfc <dhcp_create_msg>
 800f130:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d04c      	beq.n	800f1d2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f13e:	89b8      	ldrh	r0, [r7, #12]
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f146:	2302      	movs	r3, #2
 800f148:	2239      	movs	r2, #57	; 0x39
 800f14a:	f000 f9e5 	bl	800f518 <dhcp_option>
 800f14e:	4603      	mov	r3, r0
 800f150:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f152:	89b8      	ldrh	r0, [r7, #12]
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f15e:	461a      	mov	r2, r3
 800f160:	f000 fa34 	bl	800f5cc <dhcp_option_short>
 800f164:	4603      	mov	r3, r0
 800f166:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f168:	89b8      	ldrh	r0, [r7, #12]
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f170:	2303      	movs	r3, #3
 800f172:	2237      	movs	r2, #55	; 0x37
 800f174:	f000 f9d0 	bl	800f518 <dhcp_option>
 800f178:	4603      	mov	r3, r0
 800f17a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f17c:	2300      	movs	r3, #0
 800f17e:	77bb      	strb	r3, [r7, #30]
 800f180:	e00e      	b.n	800f1a0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f182:	89b8      	ldrh	r0, [r7, #12]
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f18a:	7fbb      	ldrb	r3, [r7, #30]
 800f18c:	4a29      	ldr	r2, [pc, #164]	; (800f234 <dhcp_rebind+0x128>)
 800f18e:	5cd3      	ldrb	r3, [r2, r3]
 800f190:	461a      	mov	r2, r3
 800f192:	f000 f9f5 	bl	800f580 <dhcp_option_byte>
 800f196:	4603      	mov	r3, r0
 800f198:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f19a:	7fbb      	ldrb	r3, [r7, #30]
 800f19c:	3301      	adds	r3, #1
 800f19e:	77bb      	strb	r3, [r7, #30]
 800f1a0:	7fbb      	ldrb	r3, [r7, #30]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d9ed      	bls.n	800f182 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f1a6:	89b8      	ldrh	r0, [r7, #12]
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	33f0      	adds	r3, #240	; 0xf0
 800f1ac:	697a      	ldr	r2, [r7, #20]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	f000 fefa 	bl	800ffa8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f1b4:	4b20      	ldr	r3, [pc, #128]	; (800f238 <dhcp_rebind+0x12c>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	2343      	movs	r3, #67	; 0x43
 800f1be:	4a1f      	ldr	r2, [pc, #124]	; (800f23c <dhcp_rebind+0x130>)
 800f1c0:	6979      	ldr	r1, [r7, #20]
 800f1c2:	f00c f9d3 	bl	801b56c <udp_sendto_if>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f1ca:	6978      	ldr	r0, [r7, #20]
 800f1cc:	f004 ffc8 	bl	8014160 <pbuf_free>
 800f1d0:	e001      	b.n	800f1d6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f1d2:	23ff      	movs	r3, #255	; 0xff
 800f1d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	799b      	ldrb	r3, [r3, #6]
 800f1da:	2bff      	cmp	r3, #255	; 0xff
 800f1dc:	d005      	beq.n	800f1ea <dhcp_rebind+0xde>
    dhcp->tries++;
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	799b      	ldrb	r3, [r3, #6]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	b2da      	uxtb	r2, r3
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	799b      	ldrb	r3, [r3, #6]
 800f1ee:	2b09      	cmp	r3, #9
 800f1f0:	d80a      	bhi.n	800f208 <dhcp_rebind+0xfc>
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	799b      	ldrb	r3, [r3, #6]
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	0152      	lsls	r2, r2, #5
 800f1fc:	1ad2      	subs	r2, r2, r3
 800f1fe:	0092      	lsls	r2, r2, #2
 800f200:	4413      	add	r3, r2
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	b29b      	uxth	r3, r3
 800f206:	e001      	b.n	800f20c <dhcp_rebind+0x100>
 800f208:	f242 7310 	movw	r3, #10000	; 0x2710
 800f20c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f20e:	89fb      	ldrh	r3, [r7, #14]
 800f210:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f214:	4a0a      	ldr	r2, [pc, #40]	; (800f240 <dhcp_rebind+0x134>)
 800f216:	fb82 1203 	smull	r1, r2, r2, r3
 800f21a:	1152      	asrs	r2, r2, #5
 800f21c:	17db      	asrs	r3, r3, #31
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	b29a      	uxth	r2, r3
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3720      	adds	r7, #32
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	24000028 	.word	0x24000028
 800f238:	24004720 	.word	0x24004720
 800f23c:	08046504 	.word	0x08046504
 800f240:	10624dd3 	.word	0x10624dd3

0800f244 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f244:	b5b0      	push	{r4, r5, r7, lr}
 800f246:	b08a      	sub	sp, #40	; 0x28
 800f248:	af02      	add	r7, sp, #8
 800f24a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f252:	2103      	movs	r1, #3
 800f254:	69b8      	ldr	r0, [r7, #24]
 800f256:	f000 f945 	bl	800f4e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f25a:	f107 030c 	add.w	r3, r7, #12
 800f25e:	2203      	movs	r2, #3
 800f260:	69b9      	ldr	r1, [r7, #24]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fdca 	bl	800fdfc <dhcp_create_msg>
 800f268:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d066      	beq.n	800f33e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f276:	89b8      	ldrh	r0, [r7, #12]
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f27e:	2302      	movs	r3, #2
 800f280:	2239      	movs	r2, #57	; 0x39
 800f282:	f000 f949 	bl	800f518 <dhcp_option>
 800f286:	4603      	mov	r3, r0
 800f288:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f28a:	89b8      	ldrh	r0, [r7, #12]
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	33f0      	adds	r3, #240	; 0xf0
 800f290:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f294:	4619      	mov	r1, r3
 800f296:	f000 f999 	bl	800f5cc <dhcp_option_short>
 800f29a:	4603      	mov	r3, r0
 800f29c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f29e:	89b8      	ldrh	r0, [r7, #12]
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2a6:	2304      	movs	r3, #4
 800f2a8:	2232      	movs	r2, #50	; 0x32
 800f2aa:	f000 f935 	bl	800f518 <dhcp_option>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f2b2:	89bc      	ldrh	r4, [r7, #12]
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	69db      	ldr	r3, [r3, #28]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff f819 	bl	800e2f6 <lwip_htonl>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f000 f9b0 	bl	800f630 <dhcp_option_long>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f2d4:	89b8      	ldrh	r0, [r7, #12]
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2dc:	2303      	movs	r3, #3
 800f2de:	2237      	movs	r2, #55	; 0x37
 800f2e0:	f000 f91a 	bl	800f518 <dhcp_option>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	77bb      	strb	r3, [r7, #30]
 800f2ec:	e00e      	b.n	800f30c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f2ee:	89b8      	ldrh	r0, [r7, #12]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2f6:	7fbb      	ldrb	r3, [r7, #30]
 800f2f8:	4a29      	ldr	r2, [pc, #164]	; (800f3a0 <dhcp_reboot+0x15c>)
 800f2fa:	5cd3      	ldrb	r3, [r2, r3]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	f000 f93f 	bl	800f580 <dhcp_option_byte>
 800f302:	4603      	mov	r3, r0
 800f304:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f306:	7fbb      	ldrb	r3, [r7, #30]
 800f308:	3301      	adds	r3, #1
 800f30a:	77bb      	strb	r3, [r7, #30]
 800f30c:	7fbb      	ldrb	r3, [r7, #30]
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d9ed      	bls.n	800f2ee <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f312:	89b8      	ldrh	r0, [r7, #12]
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	33f0      	adds	r3, #240	; 0xf0
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f000 fe44 	bl	800ffa8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f320:	4b20      	ldr	r3, [pc, #128]	; (800f3a4 <dhcp_reboot+0x160>)
 800f322:	6818      	ldr	r0, [r3, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	2343      	movs	r3, #67	; 0x43
 800f32a:	4a1f      	ldr	r2, [pc, #124]	; (800f3a8 <dhcp_reboot+0x164>)
 800f32c:	6979      	ldr	r1, [r7, #20]
 800f32e:	f00c f91d 	bl	801b56c <udp_sendto_if>
 800f332:	4603      	mov	r3, r0
 800f334:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f336:	6978      	ldr	r0, [r7, #20]
 800f338:	f004 ff12 	bl	8014160 <pbuf_free>
 800f33c:	e001      	b.n	800f342 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f33e:	23ff      	movs	r3, #255	; 0xff
 800f340:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	799b      	ldrb	r3, [r3, #6]
 800f346:	2bff      	cmp	r3, #255	; 0xff
 800f348:	d005      	beq.n	800f356 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	799b      	ldrb	r3, [r3, #6]
 800f34e:	3301      	adds	r3, #1
 800f350:	b2da      	uxtb	r2, r3
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	799b      	ldrb	r3, [r3, #6]
 800f35a:	2b09      	cmp	r3, #9
 800f35c:	d80a      	bhi.n	800f374 <dhcp_reboot+0x130>
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	799b      	ldrb	r3, [r3, #6]
 800f362:	b29b      	uxth	r3, r3
 800f364:	461a      	mov	r2, r3
 800f366:	0152      	lsls	r2, r2, #5
 800f368:	1ad2      	subs	r2, r2, r3
 800f36a:	0092      	lsls	r2, r2, #2
 800f36c:	4413      	add	r3, r2
 800f36e:	00db      	lsls	r3, r3, #3
 800f370:	b29b      	uxth	r3, r3
 800f372:	e001      	b.n	800f378 <dhcp_reboot+0x134>
 800f374:	f242 7310 	movw	r3, #10000	; 0x2710
 800f378:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f37a:	89fb      	ldrh	r3, [r7, #14]
 800f37c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f380:	4a0a      	ldr	r2, [pc, #40]	; (800f3ac <dhcp_reboot+0x168>)
 800f382:	fb82 1203 	smull	r1, r2, r2, r3
 800f386:	1152      	asrs	r2, r2, #5
 800f388:	17db      	asrs	r3, r3, #31
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f392:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3720      	adds	r7, #32
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bdb0      	pop	{r4, r5, r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24000028 	.word	0x24000028
 800f3a4:	24004720 	.word	0x24004720
 800f3a8:	08046504 	.word	0x08046504
 800f3ac:	10624dd3 	.word	0x10624dd3

0800f3b0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f3b0:	b5b0      	push	{r4, r5, r7, lr}
 800f3b2:	b08a      	sub	sp, #40	; 0x28
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f000 8084 	beq.w	800f4ce <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	795b      	ldrb	r3, [r3, #5]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 8081 	beq.w	800f4d2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	699b      	ldr	r3, [r3, #24]
 800f3d4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	631a      	str	r2, [r3, #48]	; 0x30
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2200      	movs	r2, #0
 800f408:	829a      	strh	r2, [r3, #20]
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	8a9a      	ldrh	r2, [r3, #20]
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	825a      	strh	r2, [r3, #18]
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	8a5a      	ldrh	r2, [r3, #18]
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	821a      	strh	r2, [r3, #16]
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	8a1a      	ldrh	r2, [r3, #16]
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fdee 	bl	8010004 <dhcp_supplied_address>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d03b      	beq.n	800f4a6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f42e:	f107 030e 	add.w	r3, r7, #14
 800f432:	2207      	movs	r2, #7
 800f434:	69f9      	ldr	r1, [r7, #28]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fce0 	bl	800fdfc <dhcp_create_msg>
 800f43c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d030      	beq.n	800f4a6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f44a:	89f8      	ldrh	r0, [r7, #14]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f452:	2304      	movs	r3, #4
 800f454:	2236      	movs	r2, #54	; 0x36
 800f456:	f000 f85f 	bl	800f518 <dhcp_option>
 800f45a:	4603      	mov	r3, r0
 800f45c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f45e:	89fc      	ldrh	r4, [r7, #14]
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fe ff44 	bl	800e2f6 <lwip_htonl>
 800f46e:	4603      	mov	r3, r0
 800f470:	461a      	mov	r2, r3
 800f472:	4629      	mov	r1, r5
 800f474:	4620      	mov	r0, r4
 800f476:	f000 f8db 	bl	800f630 <dhcp_option_long>
 800f47a:	4603      	mov	r3, r0
 800f47c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f47e:	89f8      	ldrh	r0, [r7, #14]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	33f0      	adds	r3, #240	; 0xf0
 800f484:	69ba      	ldr	r2, [r7, #24]
 800f486:	4619      	mov	r1, r3
 800f488:	f000 fd8e 	bl	800ffa8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f48c:	4b13      	ldr	r3, [pc, #76]	; (800f4dc <dhcp_release_and_stop+0x12c>)
 800f48e:	6818      	ldr	r0, [r3, #0]
 800f490:	f107 0210 	add.w	r2, r7, #16
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	2343      	movs	r3, #67	; 0x43
 800f49a:	69b9      	ldr	r1, [r7, #24]
 800f49c:	f00c f866 	bl	801b56c <udp_sendto_if>
      pbuf_free(p_out);
 800f4a0:	69b8      	ldr	r0, [r7, #24]
 800f4a2:	f004 fe5d 	bl	8014160 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f4a6:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <dhcp_release_and_stop+0x130>)
 800f4a8:	4a0d      	ldr	r2, [pc, #52]	; (800f4e0 <dhcp_release_and_stop+0x130>)
 800f4aa:	490d      	ldr	r1, [pc, #52]	; (800f4e0 <dhcp_release_and_stop+0x130>)
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f004 f949 	bl	8013744 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	69f8      	ldr	r0, [r7, #28]
 800f4b6:	f000 f815 	bl	800f4e4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	791b      	ldrb	r3, [r3, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d008      	beq.n	800f4d4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f4c2:	f7fe ff83 	bl	800e3cc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	711a      	strb	r2, [r3, #4]
 800f4cc:	e002      	b.n	800f4d4 <dhcp_release_and_stop+0x124>
    return;
 800f4ce:	bf00      	nop
 800f4d0:	e000      	b.n	800f4d4 <dhcp_release_and_stop+0x124>
    return;
 800f4d2:	bf00      	nop
  }
}
 800f4d4:	3720      	adds	r7, #32
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	24004720 	.word	0x24004720
 800f4e0:	08046500 	.word	0x08046500

0800f4e4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	795b      	ldrb	r3, [r3, #5]
 800f4f4:	78fa      	ldrb	r2, [r7, #3]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d008      	beq.n	800f50c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	78fa      	ldrb	r2, [r7, #3]
 800f4fe:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	811a      	strh	r2, [r3, #8]
  }
}
 800f50c:	bf00      	nop
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6039      	str	r1, [r7, #0]
 800f520:	4611      	mov	r1, r2
 800f522:	461a      	mov	r2, r3
 800f524:	4603      	mov	r3, r0
 800f526:	80fb      	strh	r3, [r7, #6]
 800f528:	460b      	mov	r3, r1
 800f52a:	717b      	strb	r3, [r7, #5]
 800f52c:	4613      	mov	r3, r2
 800f52e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f530:	88fa      	ldrh	r2, [r7, #6]
 800f532:	793b      	ldrb	r3, [r7, #4]
 800f534:	4413      	add	r3, r2
 800f536:	3302      	adds	r3, #2
 800f538:	2b44      	cmp	r3, #68	; 0x44
 800f53a:	d906      	bls.n	800f54a <dhcp_option+0x32>
 800f53c:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <dhcp_option+0x5c>)
 800f53e:	f240 529a 	movw	r2, #1434	; 0x59a
 800f542:	490d      	ldr	r1, [pc, #52]	; (800f578 <dhcp_option+0x60>)
 800f544:	480d      	ldr	r0, [pc, #52]	; (800f57c <dhcp_option+0x64>)
 800f546:	f00c ffbd 	bl	801c4c4 <iprintf>
  options[options_out_len++] = option_type;
 800f54a:	88fb      	ldrh	r3, [r7, #6]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	80fa      	strh	r2, [r7, #6]
 800f550:	461a      	mov	r2, r3
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	4413      	add	r3, r2
 800f556:	797a      	ldrb	r2, [r7, #5]
 800f558:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f55a:	88fb      	ldrh	r3, [r7, #6]
 800f55c:	1c5a      	adds	r2, r3, #1
 800f55e:	80fa      	strh	r2, [r7, #6]
 800f560:	461a      	mov	r2, r3
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	4413      	add	r3, r2
 800f566:	793a      	ldrb	r2, [r7, #4]
 800f568:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f56a:	88fb      	ldrh	r3, [r7, #6]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	0802002c 	.word	0x0802002c
 800f578:	080201dc 	.word	0x080201dc
 800f57c:	080200a8 	.word	0x080200a8

0800f580 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	6039      	str	r1, [r7, #0]
 800f58a:	80fb      	strh	r3, [r7, #6]
 800f58c:	4613      	mov	r3, r2
 800f58e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f590:	88fb      	ldrh	r3, [r7, #6]
 800f592:	2b43      	cmp	r3, #67	; 0x43
 800f594:	d906      	bls.n	800f5a4 <dhcp_option_byte+0x24>
 800f596:	4b0a      	ldr	r3, [pc, #40]	; (800f5c0 <dhcp_option_byte+0x40>)
 800f598:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f59c:	4909      	ldr	r1, [pc, #36]	; (800f5c4 <dhcp_option_byte+0x44>)
 800f59e:	480a      	ldr	r0, [pc, #40]	; (800f5c8 <dhcp_option_byte+0x48>)
 800f5a0:	f00c ff90 	bl	801c4c4 <iprintf>
  options[options_out_len++] = value;
 800f5a4:	88fb      	ldrh	r3, [r7, #6]
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	80fa      	strh	r2, [r7, #6]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	797a      	ldrb	r2, [r7, #5]
 800f5b2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f5b4:	88fb      	ldrh	r3, [r7, #6]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	0802002c 	.word	0x0802002c
 800f5c4:	08020220 	.word	0x08020220
 800f5c8:	080200a8 	.word	0x080200a8

0800f5cc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	6039      	str	r1, [r7, #0]
 800f5d6:	80fb      	strh	r3, [r7, #6]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f5dc:	88fb      	ldrh	r3, [r7, #6]
 800f5de:	3302      	adds	r3, #2
 800f5e0:	2b44      	cmp	r3, #68	; 0x44
 800f5e2:	d906      	bls.n	800f5f2 <dhcp_option_short+0x26>
 800f5e4:	4b0f      	ldr	r3, [pc, #60]	; (800f624 <dhcp_option_short+0x58>)
 800f5e6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f5ea:	490f      	ldr	r1, [pc, #60]	; (800f628 <dhcp_option_short+0x5c>)
 800f5ec:	480f      	ldr	r0, [pc, #60]	; (800f62c <dhcp_option_short+0x60>)
 800f5ee:	f00c ff69 	bl	801c4c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f5f2:	88bb      	ldrh	r3, [r7, #4]
 800f5f4:	0a1b      	lsrs	r3, r3, #8
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	1c59      	adds	r1, r3, #1
 800f5fc:	80f9      	strh	r1, [r7, #6]
 800f5fe:	4619      	mov	r1, r3
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	440b      	add	r3, r1
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f608:	88fb      	ldrh	r3, [r7, #6]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	80fa      	strh	r2, [r7, #6]
 800f60e:	461a      	mov	r2, r3
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	4413      	add	r3, r2
 800f614:	88ba      	ldrh	r2, [r7, #4]
 800f616:	b2d2      	uxtb	r2, r2
 800f618:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f61a:	88fb      	ldrh	r3, [r7, #6]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	0802002c 	.word	0x0802002c
 800f628:	08020258 	.word	0x08020258
 800f62c:	080200a8 	.word	0x080200a8

0800f630 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	4603      	mov	r3, r0
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
 800f63c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f63e:	89fb      	ldrh	r3, [r7, #14]
 800f640:	3304      	adds	r3, #4
 800f642:	2b44      	cmp	r3, #68	; 0x44
 800f644:	d906      	bls.n	800f654 <dhcp_option_long+0x24>
 800f646:	4b19      	ldr	r3, [pc, #100]	; (800f6ac <dhcp_option_long+0x7c>)
 800f648:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f64c:	4918      	ldr	r1, [pc, #96]	; (800f6b0 <dhcp_option_long+0x80>)
 800f64e:	4819      	ldr	r0, [pc, #100]	; (800f6b4 <dhcp_option_long+0x84>)
 800f650:	f00c ff38 	bl	801c4c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	0e1a      	lsrs	r2, r3, #24
 800f658:	89fb      	ldrh	r3, [r7, #14]
 800f65a:	1c59      	adds	r1, r3, #1
 800f65c:	81f9      	strh	r1, [r7, #14]
 800f65e:	4619      	mov	r1, r3
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	440b      	add	r3, r1
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	0c1a      	lsrs	r2, r3, #16
 800f66c:	89fb      	ldrh	r3, [r7, #14]
 800f66e:	1c59      	adds	r1, r3, #1
 800f670:	81f9      	strh	r1, [r7, #14]
 800f672:	4619      	mov	r1, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	440b      	add	r3, r1
 800f678:	b2d2      	uxtb	r2, r2
 800f67a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	0a1a      	lsrs	r2, r3, #8
 800f680:	89fb      	ldrh	r3, [r7, #14]
 800f682:	1c59      	adds	r1, r3, #1
 800f684:	81f9      	strh	r1, [r7, #14]
 800f686:	4619      	mov	r1, r3
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	440b      	add	r3, r1
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f690:	89fb      	ldrh	r3, [r7, #14]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	81fa      	strh	r2, [r7, #14]
 800f696:	461a      	mov	r2, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4413      	add	r3, r2
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	b2d2      	uxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f6a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	0802002c 	.word	0x0802002c
 800f6b0:	08020294 	.word	0x08020294
 800f6b4:	080200a8 	.word	0x080200a8

0800f6b8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b090      	sub	sp, #64	; 0x40
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f6ca:	2208      	movs	r2, #8
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	48b5      	ldr	r0, [pc, #724]	; (800f9a4 <dhcp_parse_reply+0x2ec>)
 800f6d0:	f00c faae 	bl	801bc30 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	895b      	ldrh	r3, [r3, #10]
 800f6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800f6da:	d802      	bhi.n	800f6e2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f6dc:	f06f 0301 	mvn.w	r3, #1
 800f6e0:	e2a7      	b.n	800fc32 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f6e8:	23f0      	movs	r3, #240	; 0xf0
 800f6ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	891b      	ldrh	r3, [r3, #8]
 800f6f0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f6f6:	e00c      	b.n	800f712 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f6fe:	1ad3      	subs	r3, r2, r3
 800f700:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	895b      	ldrh	r3, [r3, #10]
 800f706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <dhcp_parse_reply+0x6a>
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	895b      	ldrh	r3, [r3, #10]
 800f71c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f71e:	429a      	cmp	r2, r3
 800f720:	d2ea      	bcs.n	800f6f8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f728:	f06f 0301 	mvn.w	r3, #1
 800f72c:	e281      	b.n	800fc32 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800f72e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f730:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f732:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f734:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f73c:	e239      	b.n	800fbb2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800f73e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f742:	4413      	add	r3, r2
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f748:	2300      	movs	r3, #0
 800f74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f74e:	f04f 33ff 	mov.w	r3, #4294967295
 800f752:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f754:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f756:	3302      	adds	r3, #2
 800f758:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f75a:	8bfa      	ldrh	r2, [r7, #30]
 800f75c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f75e:	429a      	cmp	r2, r3
 800f760:	d202      	bcs.n	800f768 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f762:	f06f 0301 	mvn.w	r3, #1
 800f766:	e264      	b.n	800fc32 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f768:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f76a:	3301      	adds	r3, #1
 800f76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76e:	8952      	ldrh	r2, [r2, #10]
 800f770:	4293      	cmp	r3, r2
 800f772:	da07      	bge.n	800f784 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f774:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f776:	3301      	adds	r3, #1
 800f778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f77a:	4413      	add	r3, r2
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f782:	e00b      	b.n	800f79c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <dhcp_parse_reply+0xde>
 800f78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	e000      	b.n	800f798 <dhcp_parse_reply+0xe0>
 800f796:	2300      	movs	r3, #0
 800f798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	2b3b      	cmp	r3, #59	; 0x3b
 800f7a8:	f200 812c 	bhi.w	800fa04 <dhcp_parse_reply+0x34c>
 800f7ac:	a201      	add	r2, pc, #4	; (adr r2, 800f7b4 <dhcp_parse_reply+0xfc>)
 800f7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b2:	bf00      	nop
 800f7b4:	0800f8a5 	.word	0x0800f8a5
 800f7b8:	0800f8b5 	.word	0x0800f8b5
 800f7bc:	0800fa05 	.word	0x0800fa05
 800f7c0:	0800f8d7 	.word	0x0800f8d7
 800f7c4:	0800fa05 	.word	0x0800fa05
 800f7c8:	0800fa05 	.word	0x0800fa05
 800f7cc:	0800fa05 	.word	0x0800fa05
 800f7d0:	0800fa05 	.word	0x0800fa05
 800f7d4:	0800fa05 	.word	0x0800fa05
 800f7d8:	0800fa05 	.word	0x0800fa05
 800f7dc:	0800fa05 	.word	0x0800fa05
 800f7e0:	0800fa05 	.word	0x0800fa05
 800f7e4:	0800fa05 	.word	0x0800fa05
 800f7e8:	0800fa05 	.word	0x0800fa05
 800f7ec:	0800fa05 	.word	0x0800fa05
 800f7f0:	0800fa05 	.word	0x0800fa05
 800f7f4:	0800fa05 	.word	0x0800fa05
 800f7f8:	0800fa05 	.word	0x0800fa05
 800f7fc:	0800fa05 	.word	0x0800fa05
 800f800:	0800fa05 	.word	0x0800fa05
 800f804:	0800fa05 	.word	0x0800fa05
 800f808:	0800fa05 	.word	0x0800fa05
 800f80c:	0800fa05 	.word	0x0800fa05
 800f810:	0800fa05 	.word	0x0800fa05
 800f814:	0800fa05 	.word	0x0800fa05
 800f818:	0800fa05 	.word	0x0800fa05
 800f81c:	0800fa05 	.word	0x0800fa05
 800f820:	0800fa05 	.word	0x0800fa05
 800f824:	0800fa05 	.word	0x0800fa05
 800f828:	0800fa05 	.word	0x0800fa05
 800f82c:	0800fa05 	.word	0x0800fa05
 800f830:	0800fa05 	.word	0x0800fa05
 800f834:	0800fa05 	.word	0x0800fa05
 800f838:	0800fa05 	.word	0x0800fa05
 800f83c:	0800fa05 	.word	0x0800fa05
 800f840:	0800fa05 	.word	0x0800fa05
 800f844:	0800fa05 	.word	0x0800fa05
 800f848:	0800fa05 	.word	0x0800fa05
 800f84c:	0800fa05 	.word	0x0800fa05
 800f850:	0800fa05 	.word	0x0800fa05
 800f854:	0800fa05 	.word	0x0800fa05
 800f858:	0800fa05 	.word	0x0800fa05
 800f85c:	0800fa05 	.word	0x0800fa05
 800f860:	0800fa05 	.word	0x0800fa05
 800f864:	0800fa05 	.word	0x0800fa05
 800f868:	0800fa05 	.word	0x0800fa05
 800f86c:	0800fa05 	.word	0x0800fa05
 800f870:	0800fa05 	.word	0x0800fa05
 800f874:	0800fa05 	.word	0x0800fa05
 800f878:	0800fa05 	.word	0x0800fa05
 800f87c:	0800fa05 	.word	0x0800fa05
 800f880:	0800f903 	.word	0x0800f903
 800f884:	0800f925 	.word	0x0800f925
 800f888:	0800f961 	.word	0x0800f961
 800f88c:	0800f983 	.word	0x0800f983
 800f890:	0800fa05 	.word	0x0800fa05
 800f894:	0800fa05 	.word	0x0800fa05
 800f898:	0800fa05 	.word	0x0800fa05
 800f89c:	0800f9c1 	.word	0x0800f9c1
 800f8a0:	0800f9e3 	.word	0x0800f9e3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f8b2:	e0ab      	b.n	800fa0c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8b8:	2b04      	cmp	r3, #4
 800f8ba:	d009      	beq.n	800f8d0 <dhcp_parse_reply+0x218>
 800f8bc:	4b3a      	ldr	r3, [pc, #232]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f8be:	f240 622e 	movw	r2, #1582	; 0x62e
 800f8c2:	493a      	ldr	r1, [pc, #232]	; (800f9ac <dhcp_parse_reply+0x2f4>)
 800f8c4:	483a      	ldr	r0, [pc, #232]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f8c6:	f00c fdfd 	bl	801c4c4 <iprintf>
 800f8ca:	f06f 0305 	mvn.w	r3, #5
 800f8ce:	e1b0      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f8d0:	2306      	movs	r3, #6
 800f8d2:	623b      	str	r3, [r7, #32]
        break;
 800f8d4:	e09a      	b.n	800fa0c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f8d6:	2304      	movs	r3, #4
 800f8d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f8dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d209      	bcs.n	800f8fc <dhcp_parse_reply+0x244>
 800f8e8:	4b2f      	ldr	r3, [pc, #188]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f8ea:	f240 6233 	movw	r2, #1587	; 0x633
 800f8ee:	4931      	ldr	r1, [pc, #196]	; (800f9b4 <dhcp_parse_reply+0x2fc>)
 800f8f0:	482f      	ldr	r0, [pc, #188]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f8f2:	f00c fde7 	bl	801c4c4 <iprintf>
 800f8f6:	f06f 0305 	mvn.w	r3, #5
 800f8fa:	e19a      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f8fc:	2307      	movs	r3, #7
 800f8fe:	623b      	str	r3, [r7, #32]
        break;
 800f900:	e084      	b.n	800fa0c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f906:	2b04      	cmp	r3, #4
 800f908:	d009      	beq.n	800f91e <dhcp_parse_reply+0x266>
 800f90a:	4b27      	ldr	r3, [pc, #156]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f90c:	f240 6241 	movw	r2, #1601	; 0x641
 800f910:	4926      	ldr	r1, [pc, #152]	; (800f9ac <dhcp_parse_reply+0x2f4>)
 800f912:	4827      	ldr	r0, [pc, #156]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f914:	f00c fdd6 	bl	801c4c4 <iprintf>
 800f918:	f06f 0305 	mvn.w	r3, #5
 800f91c:	e189      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f91e:	2303      	movs	r3, #3
 800f920:	623b      	str	r3, [r7, #32]
        break;
 800f922:	e073      	b.n	800fa0c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d009      	beq.n	800f940 <dhcp_parse_reply+0x288>
 800f92c:	4b1e      	ldr	r3, [pc, #120]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f92e:	f240 624f 	movw	r2, #1615	; 0x64f
 800f932:	4921      	ldr	r1, [pc, #132]	; (800f9b8 <dhcp_parse_reply+0x300>)
 800f934:	481e      	ldr	r0, [pc, #120]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f936:	f00c fdc5 	bl	801c4c4 <iprintf>
 800f93a:	f06f 0305 	mvn.w	r3, #5
 800f93e:	e178      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f942:	2bf0      	cmp	r3, #240	; 0xf0
 800f944:	d009      	beq.n	800f95a <dhcp_parse_reply+0x2a2>
 800f946:	4b18      	ldr	r3, [pc, #96]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f948:	f240 6251 	movw	r2, #1617	; 0x651
 800f94c:	491b      	ldr	r1, [pc, #108]	; (800f9bc <dhcp_parse_reply+0x304>)
 800f94e:	4818      	ldr	r0, [pc, #96]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f950:	f00c fdb8 	bl	801c4c4 <iprintf>
 800f954:	f06f 0305 	mvn.w	r3, #5
 800f958:	e16b      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f95a:	2300      	movs	r3, #0
 800f95c:	623b      	str	r3, [r7, #32]
        break;
 800f95e:	e055      	b.n	800fa0c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f964:	2b01      	cmp	r3, #1
 800f966:	d009      	beq.n	800f97c <dhcp_parse_reply+0x2c4>
 800f968:	4b0f      	ldr	r3, [pc, #60]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f96a:	f240 6255 	movw	r2, #1621	; 0x655
 800f96e:	4912      	ldr	r1, [pc, #72]	; (800f9b8 <dhcp_parse_reply+0x300>)
 800f970:	480f      	ldr	r0, [pc, #60]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f972:	f00c fda7 	bl	801c4c4 <iprintf>
 800f976:	f06f 0305 	mvn.w	r3, #5
 800f97a:	e15a      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f97c:	2301      	movs	r3, #1
 800f97e:	623b      	str	r3, [r7, #32]
        break;
 800f980:	e044      	b.n	800fa0c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f986:	2b04      	cmp	r3, #4
 800f988:	d009      	beq.n	800f99e <dhcp_parse_reply+0x2e6>
 800f98a:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <dhcp_parse_reply+0x2f0>)
 800f98c:	f240 6259 	movw	r2, #1625	; 0x659
 800f990:	4906      	ldr	r1, [pc, #24]	; (800f9ac <dhcp_parse_reply+0x2f4>)
 800f992:	4807      	ldr	r0, [pc, #28]	; (800f9b0 <dhcp_parse_reply+0x2f8>)
 800f994:	f00c fd96 	bl	801c4c4 <iprintf>
 800f998:	f06f 0305 	mvn.w	r3, #5
 800f99c:	e149      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f99e:	2302      	movs	r3, #2
 800f9a0:	623b      	str	r3, [r7, #32]
        break;
 800f9a2:	e033      	b.n	800fa0c <dhcp_parse_reply+0x354>
 800f9a4:	24004718 	.word	0x24004718
 800f9a8:	0802002c 	.word	0x0802002c
 800f9ac:	080202d0 	.word	0x080202d0
 800f9b0:	080200a8 	.word	0x080200a8
 800f9b4:	080202dc 	.word	0x080202dc
 800f9b8:	080202f0 	.word	0x080202f0
 800f9bc:	080202fc 	.word	0x080202fc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9c4:	2b04      	cmp	r3, #4
 800f9c6:	d009      	beq.n	800f9dc <dhcp_parse_reply+0x324>
 800f9c8:	4b9c      	ldr	r3, [pc, #624]	; (800fc3c <dhcp_parse_reply+0x584>)
 800f9ca:	f240 625d 	movw	r2, #1629	; 0x65d
 800f9ce:	499c      	ldr	r1, [pc, #624]	; (800fc40 <dhcp_parse_reply+0x588>)
 800f9d0:	489c      	ldr	r0, [pc, #624]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800f9d2:	f00c fd77 	bl	801c4c4 <iprintf>
 800f9d6:	f06f 0305 	mvn.w	r3, #5
 800f9da:	e12a      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f9dc:	2304      	movs	r3, #4
 800f9de:	623b      	str	r3, [r7, #32]
        break;
 800f9e0:	e014      	b.n	800fa0c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	d009      	beq.n	800f9fe <dhcp_parse_reply+0x346>
 800f9ea:	4b94      	ldr	r3, [pc, #592]	; (800fc3c <dhcp_parse_reply+0x584>)
 800f9ec:	f240 6261 	movw	r2, #1633	; 0x661
 800f9f0:	4993      	ldr	r1, [pc, #588]	; (800fc40 <dhcp_parse_reply+0x588>)
 800f9f2:	4894      	ldr	r0, [pc, #592]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800f9f4:	f00c fd66 	bl	801c4c4 <iprintf>
 800f9f8:	f06f 0305 	mvn.w	r3, #5
 800f9fc:	e119      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f9fe:	2305      	movs	r3, #5
 800fa00:	623b      	str	r3, [r7, #32]
        break;
 800fa02:	e003      	b.n	800fa0c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800fa04:	2300      	movs	r3, #0
 800fa06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800fa0a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d103      	bne.n	800fa1a <dhcp_parse_reply+0x362>
      offset++;
 800fa12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa14:	3301      	adds	r3, #1
 800fa16:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fa18:	e0a1      	b.n	800fb5e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800fa1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa20:	4413      	add	r3, r2
 800fa22:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800fa26:	4293      	cmp	r3, r2
 800fa28:	dd02      	ble.n	800fa30 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800fa2a:	f06f 0301 	mvn.w	r3, #1
 800fa2e:	e100      	b.n	800fc32 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800fa30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa38:	4413      	add	r3, r2
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	3302      	adds	r3, #2
 800fa3e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800fa40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 808a 	beq.w	800fb5e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	db02      	blt.n	800fa5a <dhcp_parse_reply+0x3a2>
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	2b07      	cmp	r3, #7
 800fa58:	dd06      	ble.n	800fa68 <dhcp_parse_reply+0x3b0>
 800fa5a:	4b78      	ldr	r3, [pc, #480]	; (800fc3c <dhcp_parse_reply+0x584>)
 800fa5c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800fa60:	4979      	ldr	r1, [pc, #484]	; (800fc48 <dhcp_parse_reply+0x590>)
 800fa62:	4878      	ldr	r0, [pc, #480]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800fa64:	f00c fd2e 	bl	801c4c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800fa68:	4a78      	ldr	r2, [pc, #480]	; (800fc4c <dhcp_parse_reply+0x594>)
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d174      	bne.n	800fb5e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800fa74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa78:	2b04      	cmp	r3, #4
 800fa7a:	bf28      	it	cs
 800fa7c:	2304      	movcs	r3, #4
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800fa82:	8bfb      	ldrh	r3, [r7, #30]
 800fa84:	8aba      	ldrh	r2, [r7, #20]
 800fa86:	f107 0108 	add.w	r1, r7, #8
 800fa8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8c:	f004 fd6e 	bl	801456c <pbuf_copy_partial>
 800fa90:	4603      	mov	r3, r0
 800fa92:	461a      	mov	r2, r3
 800fa94:	8abb      	ldrh	r3, [r7, #20]
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d002      	beq.n	800faa0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800fa9a:	f06f 0301 	mvn.w	r3, #1
 800fa9e:	e0c8      	b.n	800fc32 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800faa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faa4:	2b04      	cmp	r3, #4
 800faa6:	d933      	bls.n	800fb10 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800faa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faac:	f003 0303 	and.w	r3, r3, #3
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d009      	beq.n	800faca <dhcp_parse_reply+0x412>
 800fab6:	4b61      	ldr	r3, [pc, #388]	; (800fc3c <dhcp_parse_reply+0x584>)
 800fab8:	f240 6281 	movw	r2, #1665	; 0x681
 800fabc:	4964      	ldr	r1, [pc, #400]	; (800fc50 <dhcp_parse_reply+0x598>)
 800fabe:	4861      	ldr	r0, [pc, #388]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800fac0:	f00c fd00 	bl	801c4c4 <iprintf>
 800fac4:	f06f 0305 	mvn.w	r3, #5
 800fac8:	e0b3      	b.n	800fc32 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800faca:	4a60      	ldr	r2, [pc, #384]	; (800fc4c <dhcp_parse_reply+0x594>)
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	4413      	add	r3, r2
 800fad0:	2201      	movs	r2, #1
 800fad2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fe fc0d 	bl	800e2f6 <lwip_htonl>
 800fadc:	4602      	mov	r2, r0
 800fade:	495d      	ldr	r1, [pc, #372]	; (800fc54 <dhcp_parse_reply+0x59c>)
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800fae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faea:	3b04      	subs	r3, #4
 800faec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800faf0:	8bfb      	ldrh	r3, [r7, #30]
 800faf2:	3304      	adds	r3, #4
 800faf4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800faf6:	8a7a      	ldrh	r2, [r7, #18]
 800faf8:	8bfb      	ldrh	r3, [r7, #30]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d202      	bcs.n	800fb04 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800fafe:	f06f 0301 	mvn.w	r3, #1
 800fb02:	e096      	b.n	800fc32 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800fb04:	8a7b      	ldrh	r3, [r7, #18]
 800fb06:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800fb0e:	e79e      	b.n	800fa4e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800fb10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d106      	bne.n	800fb26 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fbeb 	bl	800e2f6 <lwip_htonl>
 800fb20:	4603      	mov	r3, r0
 800fb22:	60bb      	str	r3, [r7, #8]
 800fb24:	e011      	b.n	800fb4a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fb26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d009      	beq.n	800fb42 <dhcp_parse_reply+0x48a>
 800fb2e:	4b43      	ldr	r3, [pc, #268]	; (800fc3c <dhcp_parse_reply+0x584>)
 800fb30:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800fb34:	4948      	ldr	r1, [pc, #288]	; (800fc58 <dhcp_parse_reply+0x5a0>)
 800fb36:	4843      	ldr	r0, [pc, #268]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800fb38:	f00c fcc4 	bl	801c4c4 <iprintf>
 800fb3c:	f06f 0305 	mvn.w	r3, #5
 800fb40:	e077      	b.n	800fc32 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800fb4a:	4a40      	ldr	r2, [pc, #256]	; (800fc4c <dhcp_parse_reply+0x594>)
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	4413      	add	r3, r2
 800fb50:	2201      	movs	r2, #1
 800fb52:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fb54:	68ba      	ldr	r2, [r7, #8]
 800fb56:	493f      	ldr	r1, [pc, #252]	; (800fc54 <dhcp_parse_reply+0x59c>)
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	895b      	ldrh	r3, [r3, #10]
 800fb62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d324      	bcc.n	800fbb2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800fb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6a:	895b      	ldrh	r3, [r3, #10]
 800fb6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb6e:	1ad3      	subs	r3, r2, r3
 800fb70:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	895b      	ldrh	r3, [r3, #10]
 800fb76:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800fb7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d213      	bcs.n	800fbac <dhcp_parse_reply+0x4f4>
        q = q->next;
 800fb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d109      	bne.n	800fba4 <dhcp_parse_reply+0x4ec>
 800fb90:	4b2a      	ldr	r3, [pc, #168]	; (800fc3c <dhcp_parse_reply+0x584>)
 800fb92:	f240 629d 	movw	r2, #1693	; 0x69d
 800fb96:	4931      	ldr	r1, [pc, #196]	; (800fc5c <dhcp_parse_reply+0x5a4>)
 800fb98:	482a      	ldr	r0, [pc, #168]	; (800fc44 <dhcp_parse_reply+0x58c>)
 800fb9a:	f00c fc93 	bl	801c4c4 <iprintf>
 800fb9e:	f06f 0305 	mvn.w	r3, #5
 800fba2:	e046      	b.n	800fc32 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800fba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbaa:	e002      	b.n	800fbb2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800fbac:	f06f 0301 	mvn.w	r3, #1
 800fbb0:	e03f      	b.n	800fc32 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d00a      	beq.n	800fbce <dhcp_parse_reply+0x516>
 800fbb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fbba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d206      	bcs.n	800fbce <dhcp_parse_reply+0x516>
 800fbc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbc4:	4413      	add	r3, r2
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2bff      	cmp	r3, #255	; 0xff
 800fbca:	f47f adb8 	bne.w	800f73e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800fbce:	4b1f      	ldr	r3, [pc, #124]	; (800fc4c <dhcp_parse_reply+0x594>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d018      	beq.n	800fc08 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fbd6:	4b1f      	ldr	r3, [pc, #124]	; (800fc54 <dhcp_parse_reply+0x59c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fbdc:	4b1b      	ldr	r3, [pc, #108]	; (800fc4c <dhcp_parse_reply+0x594>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d102      	bne.n	800fbee <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbec:	e00c      	b.n	800fc08 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2b02      	cmp	r3, #2
 800fbf2:	d102      	bne.n	800fbfa <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbf8:	e006      	b.n	800fc08 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2b03      	cmp	r3, #3
 800fbfe:	d103      	bne.n	800fc08 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800fc00:	2301      	movs	r3, #1
 800fc02:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800fc04:	2301      	movs	r3, #1
 800fc06:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800fc12:	236c      	movs	r3, #108	; 0x6c
 800fc14:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800fc16:	23ec      	movs	r3, #236	; 0xec
 800fc18:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800fc1a:	e56a      	b.n	800f6f2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d006      	beq.n	800fc30 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800fc26:	232c      	movs	r3, #44	; 0x2c
 800fc28:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fc2a:	236c      	movs	r3, #108	; 0x6c
 800fc2c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800fc2e:	e560      	b.n	800f6f2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3740      	adds	r7, #64	; 0x40
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0802002c 	.word	0x0802002c
 800fc40:	080202d0 	.word	0x080202d0
 800fc44:	080200a8 	.word	0x080200a8
 800fc48:	08020314 	.word	0x08020314
 800fc4c:	24004718 	.word	0x24004718
 800fc50:	08020328 	.word	0x08020328
 800fc54:	240046f8 	.word	0x240046f8
 800fc58:	08020340 	.word	0x08020340
 800fc5c:	08020354 	.word	0x08020354

0800fc60 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b08a      	sub	sp, #40	; 0x28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
 800fc6c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fc6e:	4b60      	ldr	r3, [pc, #384]	; (800fdf0 <dhcp_recv+0x190>)
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc74:	6a3b      	ldr	r3, [r7, #32]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc78:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 809d 	beq.w	800fdc2 <dhcp_recv+0x162>
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	791b      	ldrb	r3, [r3, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 8098 	beq.w	800fdc2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	2b2b      	cmp	r3, #43	; 0x2b
 800fc98:	f240 8095 	bls.w	800fdc6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b02      	cmp	r3, #2
 800fca2:	f040 8092 	bne.w	800fdca <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fca6:	2300      	movs	r3, #0
 800fca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcac:	e012      	b.n	800fcd4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcb2:	6a3a      	ldr	r2, [r7, #32]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fcba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcbe:	69b9      	ldr	r1, [r7, #24]
 800fcc0:	440b      	add	r3, r1
 800fcc2:	7f1b      	ldrb	r3, [r3, #28]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	f040 8082 	bne.w	800fdce <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcce:	3301      	adds	r3, #1
 800fcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d203      	bcs.n	800fcea <dhcp_recv+0x8a>
 800fce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fce6:	2b05      	cmp	r3, #5
 800fce8:	d9e1      	bls.n	800fcae <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe fb01 	bl	800e2f6 <lwip_htonl>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	69fb      	ldr	r3, [r7, #28]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d169      	bne.n	800fdd2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800fcfe:	69f9      	ldr	r1, [r7, #28]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff fcd9 	bl	800f6b8 <dhcp_parse_reply>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d164      	bne.n	800fdd6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fd0c:	4b39      	ldr	r3, [pc, #228]	; (800fdf4 <dhcp_recv+0x194>)
 800fd0e:	785b      	ldrb	r3, [r3, #1]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d062      	beq.n	800fdda <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fd1a:	4b37      	ldr	r3, [pc, #220]	; (800fdf8 <dhcp_recv+0x198>)
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fd20:	7cfb      	ldrb	r3, [r7, #19]
 800fd22:	2b05      	cmp	r3, #5
 800fd24:	d12a      	bne.n	800fd7c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	795b      	ldrb	r3, [r3, #5]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d112      	bne.n	800fd54 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800fd2e:	6979      	ldr	r1, [r7, #20]
 800fd30:	6a38      	ldr	r0, [r7, #32]
 800fd32:	f7fe fe17 	bl	800e964 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fd3c:	f003 0308 	and.w	r3, r3, #8
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d003      	beq.n	800fd4c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800fd44:	6a38      	ldr	r0, [r7, #32]
 800fd46:	f7fe fb85 	bl	800e454 <dhcp_check>
 800fd4a:	e049      	b.n	800fde0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800fd4c:	6a38      	ldr	r0, [r7, #32]
 800fd4e:	f7ff f867 	bl	800ee20 <dhcp_bind>
 800fd52:	e045      	b.n	800fde0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	795b      	ldrb	r3, [r3, #5]
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d007      	beq.n	800fd6c <dhcp_recv+0x10c>
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	795b      	ldrb	r3, [r3, #5]
 800fd60:	2b04      	cmp	r3, #4
 800fd62:	d003      	beq.n	800fd6c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fd68:	2b05      	cmp	r3, #5
 800fd6a:	d139      	bne.n	800fde0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800fd6c:	6979      	ldr	r1, [r7, #20]
 800fd6e:	6a38      	ldr	r0, [r7, #32]
 800fd70:	f7fe fdf8 	bl	800e964 <dhcp_handle_ack>
      dhcp_bind(netif);
 800fd74:	6a38      	ldr	r0, [r7, #32]
 800fd76:	f7ff f853 	bl	800ee20 <dhcp_bind>
 800fd7a:	e031      	b.n	800fde0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fd7c:	7cfb      	ldrb	r3, [r7, #19]
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d113      	bne.n	800fdaa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d00b      	beq.n	800fda2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	795b      	ldrb	r3, [r3, #5]
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d007      	beq.n	800fda2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d003      	beq.n	800fda2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	795b      	ldrb	r3, [r3, #5]
 800fd9e:	2b05      	cmp	r3, #5
 800fda0:	d103      	bne.n	800fdaa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fda2:	6a38      	ldr	r0, [r7, #32]
 800fda4:	f7fe fb3c 	bl	800e420 <dhcp_handle_nak>
 800fda8:	e01a      	b.n	800fde0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fdaa:	7cfb      	ldrb	r3, [r7, #19]
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d116      	bne.n	800fdde <dhcp_recv+0x17e>
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	795b      	ldrb	r3, [r3, #5]
 800fdb4:	2b06      	cmp	r3, #6
 800fdb6:	d112      	bne.n	800fdde <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800fdb8:	6979      	ldr	r1, [r7, #20]
 800fdba:	6a38      	ldr	r0, [r7, #32]
 800fdbc:	f7fe fb7e 	bl	800e4bc <dhcp_handle_offer>
 800fdc0:	e00e      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdc2:	bf00      	nop
 800fdc4:	e00c      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdc6:	bf00      	nop
 800fdc8:	e00a      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdca:	bf00      	nop
 800fdcc:	e008      	b.n	800fde0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800fdce:	bf00      	nop
 800fdd0:	e006      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdd2:	bf00      	nop
 800fdd4:	e004      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdd6:	bf00      	nop
 800fdd8:	e002      	b.n	800fde0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fdda:	bf00      	nop
 800fddc:	e000      	b.n	800fde0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800fdde:	bf00      	nop
  pbuf_free(p);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f004 f9bd 	bl	8014160 <pbuf_free>
}
 800fde6:	bf00      	nop
 800fde8:	3728      	adds	r7, #40	; 0x28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	24004820 	.word	0x24004820
 800fdf4:	24004718 	.word	0x24004718
 800fdf8:	240046f8 	.word	0x240046f8

0800fdfc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b088      	sub	sp, #32
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	603b      	str	r3, [r7, #0]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d108      	bne.n	800fe24 <dhcp_create_msg+0x28>
 800fe12:	4b5f      	ldr	r3, [pc, #380]	; (800ff90 <dhcp_create_msg+0x194>)
 800fe14:	f240 7269 	movw	r2, #1897	; 0x769
 800fe18:	495e      	ldr	r1, [pc, #376]	; (800ff94 <dhcp_create_msg+0x198>)
 800fe1a:	485f      	ldr	r0, [pc, #380]	; (800ff98 <dhcp_create_msg+0x19c>)
 800fe1c:	f00c fb52 	bl	801c4c4 <iprintf>
 800fe20:	2300      	movs	r3, #0
 800fe22:	e0b1      	b.n	800ff88 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d108      	bne.n	800fe3c <dhcp_create_msg+0x40>
 800fe2a:	4b59      	ldr	r3, [pc, #356]	; (800ff90 <dhcp_create_msg+0x194>)
 800fe2c:	f240 726a 	movw	r2, #1898	; 0x76a
 800fe30:	495a      	ldr	r1, [pc, #360]	; (800ff9c <dhcp_create_msg+0x1a0>)
 800fe32:	4859      	ldr	r0, [pc, #356]	; (800ff98 <dhcp_create_msg+0x19c>)
 800fe34:	f00c fb46 	bl	801c4c4 <iprintf>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	e0a5      	b.n	800ff88 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fe3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe40:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fe44:	2036      	movs	r0, #54	; 0x36
 800fe46:	f003 fea7 	bl	8013b98 <pbuf_alloc>
 800fe4a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fe52:	2300      	movs	r3, #0
 800fe54:	e098      	b.n	800ff88 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	895b      	ldrh	r3, [r3, #10]
 800fe5a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fe5e:	d206      	bcs.n	800fe6e <dhcp_create_msg+0x72>
 800fe60:	4b4b      	ldr	r3, [pc, #300]	; (800ff90 <dhcp_create_msg+0x194>)
 800fe62:	f240 7271 	movw	r2, #1905	; 0x771
 800fe66:	494e      	ldr	r1, [pc, #312]	; (800ffa0 <dhcp_create_msg+0x1a4>)
 800fe68:	484b      	ldr	r0, [pc, #300]	; (800ff98 <dhcp_create_msg+0x19c>)
 800fe6a:	f00c fb2b 	bl	801c4c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fe6e:	79fb      	ldrb	r3, [r7, #7]
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d103      	bne.n	800fe7c <dhcp_create_msg+0x80>
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	795b      	ldrb	r3, [r3, #5]
 800fe78:	2b03      	cmp	r3, #3
 800fe7a:	d10d      	bne.n	800fe98 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	799b      	ldrb	r3, [r3, #6]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d105      	bne.n	800fe90 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fe84:	f00c fb36 	bl	801c4f4 <rand>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	4b45      	ldr	r3, [pc, #276]	; (800ffa4 <dhcp_create_msg+0x1a8>)
 800fe8e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fe90:	4b44      	ldr	r3, [pc, #272]	; (800ffa4 <dhcp_create_msg+0x1a8>)
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fe9e:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fea2:	2100      	movs	r1, #0
 800fea4:	6978      	ldr	r0, [r7, #20]
 800fea6:	f00b fec3 	bl	801bc30 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	2201      	movs	r2, #1
 800feae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2201      	movs	r2, #1
 800feb4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fe fa16 	bl	800e2f6 <lwip_htonl>
 800feca:	4602      	mov	r2, r0
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	2b08      	cmp	r3, #8
 800fed4:	d010      	beq.n	800fef8 <dhcp_create_msg+0xfc>
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	2b04      	cmp	r3, #4
 800feda:	d00d      	beq.n	800fef8 <dhcp_create_msg+0xfc>
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	2b07      	cmp	r3, #7
 800fee0:	d00a      	beq.n	800fef8 <dhcp_create_msg+0xfc>
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	2b03      	cmp	r3, #3
 800fee6:	d10c      	bne.n	800ff02 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800feec:	2b05      	cmp	r3, #5
 800feee:	d003      	beq.n	800fef8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	795b      	ldrb	r3, [r3, #5]
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	d104      	bne.n	800ff02 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	3304      	adds	r3, #4
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ff02:	2300      	movs	r3, #0
 800ff04:	83fb      	strh	r3, [r7, #30]
 800ff06:	e00c      	b.n	800ff22 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ff08:	8bfa      	ldrh	r2, [r7, #30]
 800ff0a:	8bfb      	ldrh	r3, [r7, #30]
 800ff0c:	68f9      	ldr	r1, [r7, #12]
 800ff0e:	440a      	add	r2, r1
 800ff10:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	4413      	add	r3, r2
 800ff18:	460a      	mov	r2, r1
 800ff1a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ff1c:	8bfb      	ldrh	r3, [r7, #30]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	83fb      	strh	r3, [r7, #30]
 800ff22:	8bfb      	ldrh	r3, [r7, #30]
 800ff24:	2b05      	cmp	r3, #5
 800ff26:	d9ef      	bls.n	800ff08 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ff30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800ff34:	2200      	movs	r2, #0
 800ff36:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800ff3a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800ff44:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ff4e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ff58:	2301      	movs	r3, #1
 800ff5a:	2235      	movs	r2, #53	; 0x35
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f7ff fadb 	bl	800f518 <dhcp_option>
 800ff62:	4603      	mov	r3, r0
 800ff64:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ff6c:	79fa      	ldrb	r2, [r7, #7]
 800ff6e:	8a7b      	ldrh	r3, [r7, #18]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff fb05 	bl	800f580 <dhcp_option_byte>
 800ff76:	4603      	mov	r3, r0
 800ff78:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	8a7a      	ldrh	r2, [r7, #18]
 800ff84:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800ff86:	69bb      	ldr	r3, [r7, #24]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3720      	adds	r7, #32
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	0802002c 	.word	0x0802002c
 800ff94:	08020368 	.word	0x08020368
 800ff98:	080200a8 	.word	0x080200a8
 800ff9c:	08020388 	.word	0x08020388
 800ffa0:	080203a8 	.word	0x080203a8
 800ffa4:	24004728 	.word	0x24004728

0800ffa8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
 800ffb4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800ffb6:	89fb      	ldrh	r3, [r7, #14]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	81fa      	strh	r2, [r7, #14]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	22ff      	movs	r2, #255	; 0xff
 800ffc4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ffc6:	e007      	b.n	800ffd8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800ffc8:	89fb      	ldrh	r3, [r7, #14]
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	81fa      	strh	r2, [r7, #14]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ffd8:	89fb      	ldrh	r3, [r7, #14]
 800ffda:	2b43      	cmp	r3, #67	; 0x43
 800ffdc:	d904      	bls.n	800ffe8 <dhcp_option_trailer+0x40>
 800ffde:	89fb      	ldrh	r3, [r7, #14]
 800ffe0:	f003 0303 	and.w	r3, r3, #3
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <dhcp_option_trailer+0x46>
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	2b43      	cmp	r3, #67	; 0x43
 800ffec:	d9ec      	bls.n	800ffc8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	33f0      	adds	r3, #240	; 0xf0
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4619      	mov	r1, r3
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f003 ff2c 	bl	8013e54 <pbuf_realloc>
}
 800fffc:	bf00      	nop
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d017      	beq.n	8010042 <dhcp_supplied_address+0x3e>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010016:	2b00      	cmp	r3, #0
 8010018:	d013      	beq.n	8010042 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	795b      	ldrb	r3, [r3, #5]
 8010024:	2b0a      	cmp	r3, #10
 8010026:	d007      	beq.n	8010038 <dhcp_supplied_address+0x34>
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	795b      	ldrb	r3, [r3, #5]
 801002c:	2b05      	cmp	r3, #5
 801002e:	d003      	beq.n	8010038 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010034:	2b04      	cmp	r3, #4
 8010036:	d101      	bne.n	801003c <dhcp_supplied_address+0x38>
 8010038:	2301      	movs	r3, #1
 801003a:	e000      	b.n	801003e <dhcp_supplied_address+0x3a>
 801003c:	2300      	movs	r3, #0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	e000      	b.n	8010044 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010058:	4915      	ldr	r1, [pc, #84]	; (80100b0 <etharp_free_entry+0x60>)
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	4613      	mov	r3, r2
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	4413      	add	r3, r2
 8010062:	00db      	lsls	r3, r3, #3
 8010064:	440b      	add	r3, r1
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d013      	beq.n	8010094 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801006c:	4910      	ldr	r1, [pc, #64]	; (80100b0 <etharp_free_entry+0x60>)
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	4613      	mov	r3, r2
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	4413      	add	r3, r2
 8010076:	00db      	lsls	r3, r3, #3
 8010078:	440b      	add	r3, r1
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4618      	mov	r0, r3
 801007e:	f004 f86f 	bl	8014160 <pbuf_free>
    arp_table[i].q = NULL;
 8010082:	490b      	ldr	r1, [pc, #44]	; (80100b0 <etharp_free_entry+0x60>)
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	4613      	mov	r3, r2
 8010088:	005b      	lsls	r3, r3, #1
 801008a:	4413      	add	r3, r2
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	440b      	add	r3, r1
 8010090:	2200      	movs	r2, #0
 8010092:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010094:	4906      	ldr	r1, [pc, #24]	; (80100b0 <etharp_free_entry+0x60>)
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	4613      	mov	r3, r2
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	4413      	add	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	440b      	add	r3, r1
 80100a2:	3314      	adds	r3, #20
 80100a4:	2200      	movs	r2, #0
 80100a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80100a8:	bf00      	nop
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	2400472c 	.word	0x2400472c

080100b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100ba:	2300      	movs	r3, #0
 80100bc:	607b      	str	r3, [r7, #4]
 80100be:	e096      	b.n	80101ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80100c0:	494f      	ldr	r1, [pc, #316]	; (8010200 <etharp_tmr+0x14c>)
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	4613      	mov	r3, r2
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	4413      	add	r3, r2
 80100ca:	00db      	lsls	r3, r3, #3
 80100cc:	440b      	add	r3, r1
 80100ce:	3314      	adds	r3, #20
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80100d4:	78fb      	ldrb	r3, [r7, #3]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 8086 	beq.w	80101e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80100dc:	4948      	ldr	r1, [pc, #288]	; (8010200 <etharp_tmr+0x14c>)
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	4613      	mov	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	4413      	add	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	440b      	add	r3, r1
 80100ea:	3312      	adds	r3, #18
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	3301      	adds	r3, #1
 80100f0:	b298      	uxth	r0, r3
 80100f2:	4943      	ldr	r1, [pc, #268]	; (8010200 <etharp_tmr+0x14c>)
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	4613      	mov	r3, r2
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	4413      	add	r3, r2
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	440b      	add	r3, r1
 8010100:	3312      	adds	r3, #18
 8010102:	4602      	mov	r2, r0
 8010104:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010106:	493e      	ldr	r1, [pc, #248]	; (8010200 <etharp_tmr+0x14c>)
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	4613      	mov	r3, r2
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	4413      	add	r3, r2
 8010110:	00db      	lsls	r3, r3, #3
 8010112:	440b      	add	r3, r1
 8010114:	3312      	adds	r3, #18
 8010116:	881b      	ldrh	r3, [r3, #0]
 8010118:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801011c:	d215      	bcs.n	801014a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801011e:	4938      	ldr	r1, [pc, #224]	; (8010200 <etharp_tmr+0x14c>)
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	4613      	mov	r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	4413      	add	r3, r2
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	440b      	add	r3, r1
 801012c:	3314      	adds	r3, #20
 801012e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010130:	2b01      	cmp	r3, #1
 8010132:	d10e      	bne.n	8010152 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010134:	4932      	ldr	r1, [pc, #200]	; (8010200 <etharp_tmr+0x14c>)
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	4613      	mov	r3, r2
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	4413      	add	r3, r2
 801013e:	00db      	lsls	r3, r3, #3
 8010140:	440b      	add	r3, r1
 8010142:	3312      	adds	r3, #18
 8010144:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010146:	2b04      	cmp	r3, #4
 8010148:	d903      	bls.n	8010152 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff ff80 	bl	8010050 <etharp_free_entry>
 8010150:	e04a      	b.n	80101e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010152:	492b      	ldr	r1, [pc, #172]	; (8010200 <etharp_tmr+0x14c>)
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	4613      	mov	r3, r2
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	4413      	add	r3, r2
 801015c:	00db      	lsls	r3, r3, #3
 801015e:	440b      	add	r3, r1
 8010160:	3314      	adds	r3, #20
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b03      	cmp	r3, #3
 8010166:	d10a      	bne.n	801017e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010168:	4925      	ldr	r1, [pc, #148]	; (8010200 <etharp_tmr+0x14c>)
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	4613      	mov	r3, r2
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	4413      	add	r3, r2
 8010172:	00db      	lsls	r3, r3, #3
 8010174:	440b      	add	r3, r1
 8010176:	3314      	adds	r3, #20
 8010178:	2204      	movs	r2, #4
 801017a:	701a      	strb	r2, [r3, #0]
 801017c:	e034      	b.n	80101e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801017e:	4920      	ldr	r1, [pc, #128]	; (8010200 <etharp_tmr+0x14c>)
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	4613      	mov	r3, r2
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	4413      	add	r3, r2
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	440b      	add	r3, r1
 801018c:	3314      	adds	r3, #20
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b04      	cmp	r3, #4
 8010192:	d10a      	bne.n	80101aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010194:	491a      	ldr	r1, [pc, #104]	; (8010200 <etharp_tmr+0x14c>)
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	4613      	mov	r3, r2
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	4413      	add	r3, r2
 801019e:	00db      	lsls	r3, r3, #3
 80101a0:	440b      	add	r3, r1
 80101a2:	3314      	adds	r3, #20
 80101a4:	2202      	movs	r2, #2
 80101a6:	701a      	strb	r2, [r3, #0]
 80101a8:	e01e      	b.n	80101e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80101aa:	4915      	ldr	r1, [pc, #84]	; (8010200 <etharp_tmr+0x14c>)
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	4613      	mov	r3, r2
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	4413      	add	r3, r2
 80101b4:	00db      	lsls	r3, r3, #3
 80101b6:	440b      	add	r3, r1
 80101b8:	3314      	adds	r3, #20
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d113      	bne.n	80101e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80101c0:	490f      	ldr	r1, [pc, #60]	; (8010200 <etharp_tmr+0x14c>)
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	4613      	mov	r3, r2
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	4413      	add	r3, r2
 80101ca:	00db      	lsls	r3, r3, #3
 80101cc:	440b      	add	r3, r1
 80101ce:	3308      	adds	r3, #8
 80101d0:	6818      	ldr	r0, [r3, #0]
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	4613      	mov	r3, r2
 80101d6:	005b      	lsls	r3, r3, #1
 80101d8:	4413      	add	r3, r2
 80101da:	00db      	lsls	r3, r3, #3
 80101dc:	4a08      	ldr	r2, [pc, #32]	; (8010200 <etharp_tmr+0x14c>)
 80101de:	4413      	add	r3, r2
 80101e0:	3304      	adds	r3, #4
 80101e2:	4619      	mov	r1, r3
 80101e4:	f000 fe72 	bl	8010ecc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3301      	adds	r3, #1
 80101ec:	607b      	str	r3, [r7, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b09      	cmp	r3, #9
 80101f2:	f77f af65 	ble.w	80100c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	2400472c 	.word	0x2400472c

08010204 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08a      	sub	sp, #40	; 0x28
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	460b      	mov	r3, r1
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010212:	230a      	movs	r3, #10
 8010214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010216:	230a      	movs	r3, #10
 8010218:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801021a:	230a      	movs	r3, #10
 801021c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010222:	230a      	movs	r3, #10
 8010224:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	83bb      	strh	r3, [r7, #28]
 801022a:	2300      	movs	r3, #0
 801022c:	837b      	strh	r3, [r7, #26]
 801022e:	2300      	movs	r3, #0
 8010230:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010232:	2300      	movs	r3, #0
 8010234:	843b      	strh	r3, [r7, #32]
 8010236:	e0ae      	b.n	8010396 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801023c:	49a6      	ldr	r1, [pc, #664]	; (80104d8 <etharp_find_entry+0x2d4>)
 801023e:	4613      	mov	r3, r2
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	00db      	lsls	r3, r3, #3
 8010246:	440b      	add	r3, r1
 8010248:	3314      	adds	r3, #20
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801024e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010252:	2b0a      	cmp	r3, #10
 8010254:	d105      	bne.n	8010262 <etharp_find_entry+0x5e>
 8010256:	7dfb      	ldrb	r3, [r7, #23]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d102      	bne.n	8010262 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801025c:	8c3b      	ldrh	r3, [r7, #32]
 801025e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010260:	e095      	b.n	801038e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 8092 	beq.w	801038e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d009      	beq.n	8010284 <etharp_find_entry+0x80>
 8010270:	7dfb      	ldrb	r3, [r7, #23]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d806      	bhi.n	8010284 <etharp_find_entry+0x80>
 8010276:	4b99      	ldr	r3, [pc, #612]	; (80104dc <etharp_find_entry+0x2d8>)
 8010278:	f240 1223 	movw	r2, #291	; 0x123
 801027c:	4998      	ldr	r1, [pc, #608]	; (80104e0 <etharp_find_entry+0x2dc>)
 801027e:	4899      	ldr	r0, [pc, #612]	; (80104e4 <etharp_find_entry+0x2e0>)
 8010280:	f00c f920 	bl	801c4c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d020      	beq.n	80102cc <etharp_find_entry+0xc8>
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	6819      	ldr	r1, [r3, #0]
 801028e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010292:	4891      	ldr	r0, [pc, #580]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010294:	4613      	mov	r3, r2
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	4413      	add	r3, r2
 801029a:	00db      	lsls	r3, r3, #3
 801029c:	4403      	add	r3, r0
 801029e:	3304      	adds	r3, #4
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4299      	cmp	r1, r3
 80102a4:	d112      	bne.n	80102cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00c      	beq.n	80102c6 <etharp_find_entry+0xc2>
 80102ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102b0:	4989      	ldr	r1, [pc, #548]	; (80104d8 <etharp_find_entry+0x2d4>)
 80102b2:	4613      	mov	r3, r2
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	4413      	add	r3, r2
 80102b8:	00db      	lsls	r3, r3, #3
 80102ba:	440b      	add	r3, r1
 80102bc:	3308      	adds	r3, #8
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d102      	bne.n	80102cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80102c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102ca:	e100      	b.n	80104ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d140      	bne.n	8010354 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80102d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102d6:	4980      	ldr	r1, [pc, #512]	; (80104d8 <etharp_find_entry+0x2d4>)
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d01a      	beq.n	801031e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80102e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102ec:	497a      	ldr	r1, [pc, #488]	; (80104d8 <etharp_find_entry+0x2d4>)
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	00db      	lsls	r3, r3, #3
 80102f6:	440b      	add	r3, r1
 80102f8:	3312      	adds	r3, #18
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	8bba      	ldrh	r2, [r7, #28]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d845      	bhi.n	801038e <etharp_find_entry+0x18a>
            old_queue = i;
 8010302:	8c3b      	ldrh	r3, [r7, #32]
 8010304:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801030a:	4973      	ldr	r1, [pc, #460]	; (80104d8 <etharp_find_entry+0x2d4>)
 801030c:	4613      	mov	r3, r2
 801030e:	005b      	lsls	r3, r3, #1
 8010310:	4413      	add	r3, r2
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	440b      	add	r3, r1
 8010316:	3312      	adds	r3, #18
 8010318:	881b      	ldrh	r3, [r3, #0]
 801031a:	83bb      	strh	r3, [r7, #28]
 801031c:	e037      	b.n	801038e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801031e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010322:	496d      	ldr	r1, [pc, #436]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010324:	4613      	mov	r3, r2
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	4413      	add	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	440b      	add	r3, r1
 801032e:	3312      	adds	r3, #18
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	8b7a      	ldrh	r2, [r7, #26]
 8010334:	429a      	cmp	r2, r3
 8010336:	d82a      	bhi.n	801038e <etharp_find_entry+0x18a>
            old_pending = i;
 8010338:	8c3b      	ldrh	r3, [r7, #32]
 801033a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801033c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010340:	4965      	ldr	r1, [pc, #404]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4413      	add	r3, r2
 8010348:	00db      	lsls	r3, r3, #3
 801034a:	440b      	add	r3, r1
 801034c:	3312      	adds	r3, #18
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	837b      	strh	r3, [r7, #26]
 8010352:	e01c      	b.n	801038e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010354:	7dfb      	ldrb	r3, [r7, #23]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d919      	bls.n	801038e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801035a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801035e:	495e      	ldr	r1, [pc, #376]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010360:	4613      	mov	r3, r2
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	4413      	add	r3, r2
 8010366:	00db      	lsls	r3, r3, #3
 8010368:	440b      	add	r3, r1
 801036a:	3312      	adds	r3, #18
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	8b3a      	ldrh	r2, [r7, #24]
 8010370:	429a      	cmp	r2, r3
 8010372:	d80c      	bhi.n	801038e <etharp_find_entry+0x18a>
            old_stable = i;
 8010374:	8c3b      	ldrh	r3, [r7, #32]
 8010376:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801037c:	4956      	ldr	r1, [pc, #344]	; (80104d8 <etharp_find_entry+0x2d4>)
 801037e:	4613      	mov	r3, r2
 8010380:	005b      	lsls	r3, r3, #1
 8010382:	4413      	add	r3, r2
 8010384:	00db      	lsls	r3, r3, #3
 8010386:	440b      	add	r3, r1
 8010388:	3312      	adds	r3, #18
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801038e:	8c3b      	ldrh	r3, [r7, #32]
 8010390:	3301      	adds	r3, #1
 8010392:	b29b      	uxth	r3, r3
 8010394:	843b      	strh	r3, [r7, #32]
 8010396:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801039a:	2b09      	cmp	r3, #9
 801039c:	f77f af4c 	ble.w	8010238 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80103a0:	7afb      	ldrb	r3, [r7, #11]
 80103a2:	f003 0302 	and.w	r3, r3, #2
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d108      	bne.n	80103bc <etharp_find_entry+0x1b8>
 80103aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103ae:	2b0a      	cmp	r3, #10
 80103b0:	d107      	bne.n	80103c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80103b2:	7afb      	ldrb	r3, [r7, #11]
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e085      	b.n	80104ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80103c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103c6:	2b09      	cmp	r3, #9
 80103c8:	dc02      	bgt.n	80103d0 <etharp_find_entry+0x1cc>
    i = empty;
 80103ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103cc:	843b      	strh	r3, [r7, #32]
 80103ce:	e039      	b.n	8010444 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80103d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80103d4:	2b09      	cmp	r3, #9
 80103d6:	dc14      	bgt.n	8010402 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80103d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80103dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103e0:	493d      	ldr	r1, [pc, #244]	; (80104d8 <etharp_find_entry+0x2d4>)
 80103e2:	4613      	mov	r3, r2
 80103e4:	005b      	lsls	r3, r3, #1
 80103e6:	4413      	add	r3, r2
 80103e8:	00db      	lsls	r3, r3, #3
 80103ea:	440b      	add	r3, r1
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d018      	beq.n	8010424 <etharp_find_entry+0x220>
 80103f2:	4b3a      	ldr	r3, [pc, #232]	; (80104dc <etharp_find_entry+0x2d8>)
 80103f4:	f240 126d 	movw	r2, #365	; 0x16d
 80103f8:	493b      	ldr	r1, [pc, #236]	; (80104e8 <etharp_find_entry+0x2e4>)
 80103fa:	483a      	ldr	r0, [pc, #232]	; (80104e4 <etharp_find_entry+0x2e0>)
 80103fc:	f00c f862 	bl	801c4c4 <iprintf>
 8010400:	e010      	b.n	8010424 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010402:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010406:	2b09      	cmp	r3, #9
 8010408:	dc02      	bgt.n	8010410 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801040a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801040c:	843b      	strh	r3, [r7, #32]
 801040e:	e009      	b.n	8010424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010410:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010414:	2b09      	cmp	r3, #9
 8010416:	dc02      	bgt.n	801041e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010418:	8bfb      	ldrh	r3, [r7, #30]
 801041a:	843b      	strh	r3, [r7, #32]
 801041c:	e002      	b.n	8010424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801041e:	f04f 33ff 	mov.w	r3, #4294967295
 8010422:	e054      	b.n	80104ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010428:	2b09      	cmp	r3, #9
 801042a:	dd06      	ble.n	801043a <etharp_find_entry+0x236>
 801042c:	4b2b      	ldr	r3, [pc, #172]	; (80104dc <etharp_find_entry+0x2d8>)
 801042e:	f240 127f 	movw	r2, #383	; 0x17f
 8010432:	492e      	ldr	r1, [pc, #184]	; (80104ec <etharp_find_entry+0x2e8>)
 8010434:	482b      	ldr	r0, [pc, #172]	; (80104e4 <etharp_find_entry+0x2e0>)
 8010436:	f00c f845 	bl	801c4c4 <iprintf>
    etharp_free_entry(i);
 801043a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fe06 	bl	8010050 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010444:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010448:	2b09      	cmp	r3, #9
 801044a:	dd06      	ble.n	801045a <etharp_find_entry+0x256>
 801044c:	4b23      	ldr	r3, [pc, #140]	; (80104dc <etharp_find_entry+0x2d8>)
 801044e:	f240 1283 	movw	r2, #387	; 0x183
 8010452:	4926      	ldr	r1, [pc, #152]	; (80104ec <etharp_find_entry+0x2e8>)
 8010454:	4823      	ldr	r0, [pc, #140]	; (80104e4 <etharp_find_entry+0x2e0>)
 8010456:	f00c f835 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801045a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801045e:	491e      	ldr	r1, [pc, #120]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010460:	4613      	mov	r3, r2
 8010462:	005b      	lsls	r3, r3, #1
 8010464:	4413      	add	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	440b      	add	r3, r1
 801046a:	3314      	adds	r3, #20
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d006      	beq.n	8010480 <etharp_find_entry+0x27c>
 8010472:	4b1a      	ldr	r3, [pc, #104]	; (80104dc <etharp_find_entry+0x2d8>)
 8010474:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010478:	491d      	ldr	r1, [pc, #116]	; (80104f0 <etharp_find_entry+0x2ec>)
 801047a:	481a      	ldr	r0, [pc, #104]	; (80104e4 <etharp_find_entry+0x2e0>)
 801047c:	f00c f822 	bl	801c4c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00b      	beq.n	801049e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6819      	ldr	r1, [r3, #0]
 801048e:	4812      	ldr	r0, [pc, #72]	; (80104d8 <etharp_find_entry+0x2d4>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	4403      	add	r3, r0
 801049a:	3304      	adds	r3, #4
 801049c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801049e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104a2:	490d      	ldr	r1, [pc, #52]	; (80104d8 <etharp_find_entry+0x2d4>)
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	3312      	adds	r3, #18
 80104b0:	2200      	movs	r2, #0
 80104b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80104b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104b8:	4907      	ldr	r1, [pc, #28]	; (80104d8 <etharp_find_entry+0x2d4>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	440b      	add	r3, r1
 80104c4:	3308      	adds	r3, #8
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80104ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3728      	adds	r7, #40	; 0x28
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	2400472c 	.word	0x2400472c
 80104dc:	080203e8 	.word	0x080203e8
 80104e0:	08020440 	.word	0x08020440
 80104e4:	08020480 	.word	0x08020480
 80104e8:	080204a8 	.word	0x080204a8
 80104ec:	080204c0 	.word	0x080204c0
 80104f0:	080204d4 	.word	0x080204d4

080104f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af02      	add	r7, sp, #8
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010508:	2b06      	cmp	r3, #6
 801050a:	d006      	beq.n	801051a <etharp_update_arp_entry+0x26>
 801050c:	4b48      	ldr	r3, [pc, #288]	; (8010630 <etharp_update_arp_entry+0x13c>)
 801050e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010512:	4948      	ldr	r1, [pc, #288]	; (8010634 <etharp_update_arp_entry+0x140>)
 8010514:	4848      	ldr	r0, [pc, #288]	; (8010638 <etharp_update_arp_entry+0x144>)
 8010516:	f00b ffd5 	bl	801c4c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d012      	beq.n	8010546 <etharp_update_arp_entry+0x52>
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00e      	beq.n	8010546 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68f9      	ldr	r1, [r7, #12]
 801052e:	4618      	mov	r0, r3
 8010530:	f001 fb38 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 8010534:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010536:	2b00      	cmp	r3, #0
 8010538:	d105      	bne.n	8010546 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010542:	2be0      	cmp	r3, #224	; 0xe0
 8010544:	d102      	bne.n	801054c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010546:	f06f 030f 	mvn.w	r3, #15
 801054a:	e06c      	b.n	8010626 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801054c:	78fb      	ldrb	r3, [r7, #3]
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4619      	mov	r1, r3
 8010552:	68b8      	ldr	r0, [r7, #8]
 8010554:	f7ff fe56 	bl	8010204 <etharp_find_entry>
 8010558:	4603      	mov	r3, r0
 801055a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801055c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010560:	2b00      	cmp	r3, #0
 8010562:	da02      	bge.n	801056a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010564:	8afb      	ldrh	r3, [r7, #22]
 8010566:	b25b      	sxtb	r3, r3
 8010568:	e05d      	b.n	8010626 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801056a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801056e:	4933      	ldr	r1, [pc, #204]	; (801063c <etharp_update_arp_entry+0x148>)
 8010570:	4613      	mov	r3, r2
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	4413      	add	r3, r2
 8010576:	00db      	lsls	r3, r3, #3
 8010578:	440b      	add	r3, r1
 801057a:	3314      	adds	r3, #20
 801057c:	2202      	movs	r2, #2
 801057e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010584:	492d      	ldr	r1, [pc, #180]	; (801063c <etharp_update_arp_entry+0x148>)
 8010586:	4613      	mov	r3, r2
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	4413      	add	r3, r2
 801058c:	00db      	lsls	r3, r3, #3
 801058e:	440b      	add	r3, r1
 8010590:	3308      	adds	r3, #8
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	3308      	adds	r3, #8
 80105a4:	4a25      	ldr	r2, [pc, #148]	; (801063c <etharp_update_arp_entry+0x148>)
 80105a6:	4413      	add	r3, r2
 80105a8:	3304      	adds	r3, #4
 80105aa:	2206      	movs	r2, #6
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f00b fb16 	bl	801bbe0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80105b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105b8:	4920      	ldr	r1, [pc, #128]	; (801063c <etharp_update_arp_entry+0x148>)
 80105ba:	4613      	mov	r3, r2
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	4413      	add	r3, r2
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	440b      	add	r3, r1
 80105c4:	3312      	adds	r3, #18
 80105c6:	2200      	movs	r2, #0
 80105c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80105ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105ce:	491b      	ldr	r1, [pc, #108]	; (801063c <etharp_update_arp_entry+0x148>)
 80105d0:	4613      	mov	r3, r2
 80105d2:	005b      	lsls	r3, r3, #1
 80105d4:	4413      	add	r3, r2
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	440b      	add	r3, r1
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d021      	beq.n	8010624 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80105e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105e4:	4915      	ldr	r1, [pc, #84]	; (801063c <etharp_update_arp_entry+0x148>)
 80105e6:	4613      	mov	r3, r2
 80105e8:	005b      	lsls	r3, r3, #1
 80105ea:	4413      	add	r3, r2
 80105ec:	00db      	lsls	r3, r3, #3
 80105ee:	440b      	add	r3, r1
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80105f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105f8:	4910      	ldr	r1, [pc, #64]	; (801063c <etharp_update_arp_entry+0x148>)
 80105fa:	4613      	mov	r3, r2
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	4413      	add	r3, r2
 8010600:	00db      	lsls	r3, r3, #3
 8010602:	440b      	add	r3, r1
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801060e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6939      	ldr	r1, [r7, #16]
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f000 fcf7 	bl	801100c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801061e:	6938      	ldr	r0, [r7, #16]
 8010620:	f003 fd9e 	bl	8014160 <pbuf_free>
  }
  return ERR_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3718      	adds	r7, #24
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	080203e8 	.word	0x080203e8
 8010634:	08020500 	.word	0x08020500
 8010638:	08020480 	.word	0x08020480
 801063c:	2400472c 	.word	0x2400472c

08010640 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010648:	2300      	movs	r3, #0
 801064a:	60fb      	str	r3, [r7, #12]
 801064c:	e01e      	b.n	801068c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801064e:	4913      	ldr	r1, [pc, #76]	; (801069c <etharp_cleanup_netif+0x5c>)
 8010650:	68fa      	ldr	r2, [r7, #12]
 8010652:	4613      	mov	r3, r2
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	4413      	add	r3, r2
 8010658:	00db      	lsls	r3, r3, #3
 801065a:	440b      	add	r3, r1
 801065c:	3314      	adds	r3, #20
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010662:	7afb      	ldrb	r3, [r7, #11]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00e      	beq.n	8010686 <etharp_cleanup_netif+0x46>
 8010668:	490c      	ldr	r1, [pc, #48]	; (801069c <etharp_cleanup_netif+0x5c>)
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	4613      	mov	r3, r2
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	4413      	add	r3, r2
 8010672:	00db      	lsls	r3, r3, #3
 8010674:	440b      	add	r3, r1
 8010676:	3308      	adds	r3, #8
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	429a      	cmp	r2, r3
 801067e:	d102      	bne.n	8010686 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f7ff fce5 	bl	8010050 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	3301      	adds	r3, #1
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b09      	cmp	r3, #9
 8010690:	dddd      	ble.n	801064e <etharp_cleanup_netif+0xe>
    }
  }
}
 8010692:	bf00      	nop
 8010694:	bf00      	nop
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2400472c 	.word	0x2400472c

080106a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80106a0:	b5b0      	push	{r4, r5, r7, lr}
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	af04      	add	r7, sp, #16
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d107      	bne.n	80106c0 <etharp_input+0x20>
 80106b0:	4b3f      	ldr	r3, [pc, #252]	; (80107b0 <etharp_input+0x110>)
 80106b2:	f240 228a 	movw	r2, #650	; 0x28a
 80106b6:	493f      	ldr	r1, [pc, #252]	; (80107b4 <etharp_input+0x114>)
 80106b8:	483f      	ldr	r0, [pc, #252]	; (80107b8 <etharp_input+0x118>)
 80106ba:	f00b ff03 	bl	801c4c4 <iprintf>
 80106be:	e074      	b.n	80107aa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	881b      	ldrh	r3, [r3, #0]
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106d0:	d10c      	bne.n	80106ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106d6:	2b06      	cmp	r3, #6
 80106d8:	d108      	bne.n	80106ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106de:	2b04      	cmp	r3, #4
 80106e0:	d104      	bne.n	80106ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	885b      	ldrh	r3, [r3, #2]
 80106e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106e8:	2b08      	cmp	r3, #8
 80106ea:	d003      	beq.n	80106f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f003 fd37 	bl	8014160 <pbuf_free>
    return;
 80106f2:	e05a      	b.n	80107aa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	330e      	adds	r3, #14
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	3318      	adds	r3, #24
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	3304      	adds	r3, #4
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d102      	bne.n	8010714 <etharp_input+0x74>
    for_us = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	75fb      	strb	r3, [r7, #23]
 8010712:	e009      	b.n	8010728 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	3304      	adds	r3, #4
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	429a      	cmp	r2, r3
 801071e:	bf0c      	ite	eq
 8010720:	2301      	moveq	r3, #1
 8010722:	2300      	movne	r3, #0
 8010724:	b2db      	uxtb	r3, r3
 8010726:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	f103 0208 	add.w	r2, r3, #8
 801072e:	7dfb      	ldrb	r3, [r7, #23]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <etharp_input+0x98>
 8010734:	2301      	movs	r3, #1
 8010736:	e000      	b.n	801073a <etharp_input+0x9a>
 8010738:	2302      	movs	r3, #2
 801073a:	f107 010c 	add.w	r1, r7, #12
 801073e:	6838      	ldr	r0, [r7, #0]
 8010740:	f7ff fed8 	bl	80104f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	88db      	ldrh	r3, [r3, #6]
 8010748:	b29b      	uxth	r3, r3
 801074a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801074e:	d003      	beq.n	8010758 <etharp_input+0xb8>
 8010750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010754:	d01e      	beq.n	8010794 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010756:	e025      	b.n	80107a4 <etharp_input+0x104>
      if (for_us) {
 8010758:	7dfb      	ldrb	r3, [r7, #23]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d021      	beq.n	80107a2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010774:	693a      	ldr	r2, [r7, #16]
 8010776:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010778:	2102      	movs	r1, #2
 801077a:	9103      	str	r1, [sp, #12]
 801077c:	f107 010c 	add.w	r1, r7, #12
 8010780:	9102      	str	r1, [sp, #8]
 8010782:	9201      	str	r2, [sp, #4]
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	462b      	mov	r3, r5
 8010788:	4622      	mov	r2, r4
 801078a:	4601      	mov	r1, r0
 801078c:	6838      	ldr	r0, [r7, #0]
 801078e:	f000 faef 	bl	8010d70 <etharp_raw>
      break;
 8010792:	e006      	b.n	80107a2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010794:	f107 030c 	add.w	r3, r7, #12
 8010798:	4619      	mov	r1, r3
 801079a:	6838      	ldr	r0, [r7, #0]
 801079c:	f7fe f9fc 	bl	800eb98 <dhcp_arp_reply>
      break;
 80107a0:	e000      	b.n	80107a4 <etharp_input+0x104>
      break;
 80107a2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f003 fcdb 	bl	8014160 <pbuf_free>
}
 80107aa:	3718      	adds	r7, #24
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bdb0      	pop	{r4, r5, r7, pc}
 80107b0:	080203e8 	.word	0x080203e8
 80107b4:	08020558 	.word	0x08020558
 80107b8:	08020480 	.word	0x08020480

080107bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af02      	add	r7, sp, #8
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	4613      	mov	r3, r2
 80107c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80107ca:	79fa      	ldrb	r2, [r7, #7]
 80107cc:	4944      	ldr	r1, [pc, #272]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	4413      	add	r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	440b      	add	r3, r1
 80107d8:	3314      	adds	r3, #20
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d806      	bhi.n	80107ee <etharp_output_to_arp_index+0x32>
 80107e0:	4b40      	ldr	r3, [pc, #256]	; (80108e4 <etharp_output_to_arp_index+0x128>)
 80107e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80107e6:	4940      	ldr	r1, [pc, #256]	; (80108e8 <etharp_output_to_arp_index+0x12c>)
 80107e8:	4840      	ldr	r0, [pc, #256]	; (80108ec <etharp_output_to_arp_index+0x130>)
 80107ea:	f00b fe6b 	bl	801c4c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80107ee:	79fa      	ldrb	r2, [r7, #7]
 80107f0:	493b      	ldr	r1, [pc, #236]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 80107f2:	4613      	mov	r3, r2
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	4413      	add	r3, r2
 80107f8:	00db      	lsls	r3, r3, #3
 80107fa:	440b      	add	r3, r1
 80107fc:	3314      	adds	r3, #20
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d153      	bne.n	80108ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010804:	79fa      	ldrb	r2, [r7, #7]
 8010806:	4936      	ldr	r1, [pc, #216]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 8010808:	4613      	mov	r3, r2
 801080a:	005b      	lsls	r3, r3, #1
 801080c:	4413      	add	r3, r2
 801080e:	00db      	lsls	r3, r3, #3
 8010810:	440b      	add	r3, r1
 8010812:	3312      	adds	r3, #18
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801081a:	d919      	bls.n	8010850 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801081c:	79fa      	ldrb	r2, [r7, #7]
 801081e:	4613      	mov	r3, r2
 8010820:	005b      	lsls	r3, r3, #1
 8010822:	4413      	add	r3, r2
 8010824:	00db      	lsls	r3, r3, #3
 8010826:	4a2e      	ldr	r2, [pc, #184]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 8010828:	4413      	add	r3, r2
 801082a:	3304      	adds	r3, #4
 801082c:	4619      	mov	r1, r3
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f000 fb4c 	bl	8010ecc <etharp_request>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d138      	bne.n	80108ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801083a:	79fa      	ldrb	r2, [r7, #7]
 801083c:	4928      	ldr	r1, [pc, #160]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3314      	adds	r3, #20
 801084a:	2203      	movs	r2, #3
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	e02d      	b.n	80108ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	4923      	ldr	r1, [pc, #140]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	3312      	adds	r3, #18
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010866:	d321      	bcc.n	80108ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010868:	79fa      	ldrb	r2, [r7, #7]
 801086a:	4613      	mov	r3, r2
 801086c:	005b      	lsls	r3, r3, #1
 801086e:	4413      	add	r3, r2
 8010870:	00db      	lsls	r3, r3, #3
 8010872:	4a1b      	ldr	r2, [pc, #108]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 8010874:	4413      	add	r3, r2
 8010876:	1d19      	adds	r1, r3, #4
 8010878:	79fa      	ldrb	r2, [r7, #7]
 801087a:	4613      	mov	r3, r2
 801087c:	005b      	lsls	r3, r3, #1
 801087e:	4413      	add	r3, r2
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	3308      	adds	r3, #8
 8010884:	4a16      	ldr	r2, [pc, #88]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 8010886:	4413      	add	r3, r2
 8010888:	3304      	adds	r3, #4
 801088a:	461a      	mov	r2, r3
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 fafb 	bl	8010e88 <etharp_request_dst>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d109      	bne.n	80108ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010898:	79fa      	ldrb	r2, [r7, #7]
 801089a:	4911      	ldr	r1, [pc, #68]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	3314      	adds	r3, #20
 80108a8:	2203      	movs	r2, #3
 80108aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80108b2:	79fa      	ldrb	r2, [r7, #7]
 80108b4:	4613      	mov	r3, r2
 80108b6:	005b      	lsls	r3, r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	3308      	adds	r3, #8
 80108be:	4a08      	ldr	r2, [pc, #32]	; (80108e0 <etharp_output_to_arp_index+0x124>)
 80108c0:	4413      	add	r3, r2
 80108c2:	3304      	adds	r3, #4
 80108c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108c8:	9200      	str	r2, [sp, #0]
 80108ca:	460a      	mov	r2, r1
 80108cc:	68b9      	ldr	r1, [r7, #8]
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f000 fb9c 	bl	801100c <ethernet_output>
 80108d4:	4603      	mov	r3, r0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	2400472c 	.word	0x2400472c
 80108e4:	080203e8 	.word	0x080203e8
 80108e8:	08020578 	.word	0x08020578
 80108ec:	08020480 	.word	0x08020480

080108f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08a      	sub	sp, #40	; 0x28
 80108f4:	af02      	add	r7, sp, #8
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d106      	bne.n	8010914 <etharp_output+0x24>
 8010906:	4b73      	ldr	r3, [pc, #460]	; (8010ad4 <etharp_output+0x1e4>)
 8010908:	f240 321e 	movw	r2, #798	; 0x31e
 801090c:	4972      	ldr	r1, [pc, #456]	; (8010ad8 <etharp_output+0x1e8>)
 801090e:	4873      	ldr	r0, [pc, #460]	; (8010adc <etharp_output+0x1ec>)
 8010910:	f00b fdd8 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <etharp_output+0x38>
 801091a:	4b6e      	ldr	r3, [pc, #440]	; (8010ad4 <etharp_output+0x1e4>)
 801091c:	f240 321f 	movw	r2, #799	; 0x31f
 8010920:	496f      	ldr	r1, [pc, #444]	; (8010ae0 <etharp_output+0x1f0>)
 8010922:	486e      	ldr	r0, [pc, #440]	; (8010adc <etharp_output+0x1ec>)
 8010924:	f00b fdce 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <etharp_output+0x4c>
 801092e:	4b69      	ldr	r3, [pc, #420]	; (8010ad4 <etharp_output+0x1e4>)
 8010930:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010934:	496b      	ldr	r1, [pc, #428]	; (8010ae4 <etharp_output+0x1f4>)
 8010936:	4869      	ldr	r0, [pc, #420]	; (8010adc <etharp_output+0x1ec>)
 8010938:	f00b fdc4 	bl	801c4c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68f9      	ldr	r1, [r7, #12]
 8010942:	4618      	mov	r0, r3
 8010944:	f001 f92e 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d002      	beq.n	8010954 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801094e:	4b66      	ldr	r3, [pc, #408]	; (8010ae8 <etharp_output+0x1f8>)
 8010950:	61fb      	str	r3, [r7, #28]
 8010952:	e0af      	b.n	8010ab4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801095c:	2be0      	cmp	r3, #224	; 0xe0
 801095e:	d118      	bne.n	8010992 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010960:	2301      	movs	r3, #1
 8010962:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010964:	2300      	movs	r3, #0
 8010966:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010968:	235e      	movs	r3, #94	; 0x5e
 801096a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3301      	adds	r3, #1
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010976:	b2db      	uxtb	r3, r3
 8010978:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3302      	adds	r3, #2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	3303      	adds	r3, #3
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801098a:	f107 0310 	add.w	r3, r7, #16
 801098e:	61fb      	str	r3, [r7, #28]
 8010990:	e090      	b.n	8010ab4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	3304      	adds	r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	405a      	eors	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3308      	adds	r3, #8
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4013      	ands	r3, r2
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d012      	beq.n	80109d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80109b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d00b      	beq.n	80109d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	330c      	adds	r3, #12
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d003      	beq.n	80109ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	330c      	adds	r3, #12
 80109c6:	61bb      	str	r3, [r7, #24]
 80109c8:	e002      	b.n	80109d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80109ca:	f06f 0303 	mvn.w	r3, #3
 80109ce:	e07d      	b.n	8010acc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109d0:	4b46      	ldr	r3, [pc, #280]	; (8010aec <etharp_output+0x1fc>)
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	4619      	mov	r1, r3
 80109d6:	4a46      	ldr	r2, [pc, #280]	; (8010af0 <etharp_output+0x200>)
 80109d8:	460b      	mov	r3, r1
 80109da:	005b      	lsls	r3, r3, #1
 80109dc:	440b      	add	r3, r1
 80109de:	00db      	lsls	r3, r3, #3
 80109e0:	4413      	add	r3, r2
 80109e2:	3314      	adds	r3, #20
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d925      	bls.n	8010a36 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80109ea:	4b40      	ldr	r3, [pc, #256]	; (8010aec <etharp_output+0x1fc>)
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	4619      	mov	r1, r3
 80109f0:	4a3f      	ldr	r2, [pc, #252]	; (8010af0 <etharp_output+0x200>)
 80109f2:	460b      	mov	r3, r1
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	440b      	add	r3, r1
 80109f8:	00db      	lsls	r3, r3, #3
 80109fa:	4413      	add	r3, r2
 80109fc:	3308      	adds	r3, #8
 80109fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d117      	bne.n	8010a36 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	4b38      	ldr	r3, [pc, #224]	; (8010aec <etharp_output+0x1fc>)
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	4937      	ldr	r1, [pc, #220]	; (8010af0 <etharp_output+0x200>)
 8010a12:	4603      	mov	r3, r0
 8010a14:	005b      	lsls	r3, r3, #1
 8010a16:	4403      	add	r3, r0
 8010a18:	00db      	lsls	r3, r3, #3
 8010a1a:	440b      	add	r3, r1
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d108      	bne.n	8010a36 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010a24:	4b31      	ldr	r3, [pc, #196]	; (8010aec <etharp_output+0x1fc>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	68b9      	ldr	r1, [r7, #8]
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f7ff fec5 	bl	80107bc <etharp_output_to_arp_index>
 8010a32:	4603      	mov	r3, r0
 8010a34:	e04a      	b.n	8010acc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a36:	2300      	movs	r3, #0
 8010a38:	75fb      	strb	r3, [r7, #23]
 8010a3a:	e031      	b.n	8010aa0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a3c:	7dfa      	ldrb	r2, [r7, #23]
 8010a3e:	492c      	ldr	r1, [pc, #176]	; (8010af0 <etharp_output+0x200>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	440b      	add	r3, r1
 8010a4a:	3314      	adds	r3, #20
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d923      	bls.n	8010a9a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010a52:	7dfa      	ldrb	r2, [r7, #23]
 8010a54:	4926      	ldr	r1, [pc, #152]	; (8010af0 <etharp_output+0x200>)
 8010a56:	4613      	mov	r3, r2
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	440b      	add	r3, r1
 8010a60:	3308      	adds	r3, #8
 8010a62:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d117      	bne.n	8010a9a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	6819      	ldr	r1, [r3, #0]
 8010a6e:	7dfa      	ldrb	r2, [r7, #23]
 8010a70:	481f      	ldr	r0, [pc, #124]	; (8010af0 <etharp_output+0x200>)
 8010a72:	4613      	mov	r3, r2
 8010a74:	005b      	lsls	r3, r3, #1
 8010a76:	4413      	add	r3, r2
 8010a78:	00db      	lsls	r3, r3, #3
 8010a7a:	4403      	add	r3, r0
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010a80:	4299      	cmp	r1, r3
 8010a82:	d10a      	bne.n	8010a9a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010a84:	4a19      	ldr	r2, [pc, #100]	; (8010aec <etharp_output+0x1fc>)
 8010a86:	7dfb      	ldrb	r3, [r7, #23]
 8010a88:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	68b9      	ldr	r1, [r7, #8]
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f7ff fe93 	bl	80107bc <etharp_output_to_arp_index>
 8010a96:	4603      	mov	r3, r0
 8010a98:	e018      	b.n	8010acc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a9a:	7dfb      	ldrb	r3, [r7, #23]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	75fb      	strb	r3, [r7, #23]
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	2b09      	cmp	r3, #9
 8010aa4:	d9ca      	bls.n	8010a3c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010aa6:	68ba      	ldr	r2, [r7, #8]
 8010aa8:	69b9      	ldr	r1, [r7, #24]
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f000 f822 	bl	8010af4 <etharp_query>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	e00b      	b.n	8010acc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	68b9      	ldr	r1, [r7, #8]
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 faa1 	bl	801100c <ethernet_output>
 8010aca:	4603      	mov	r3, r0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3720      	adds	r7, #32
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	080203e8 	.word	0x080203e8
 8010ad8:	08020558 	.word	0x08020558
 8010adc:	08020480 	.word	0x08020480
 8010ae0:	080205a8 	.word	0x080205a8
 8010ae4:	08020548 	.word	0x08020548
 8010ae8:	08023248 	.word	0x08023248
 8010aec:	2400481c 	.word	0x2400481c
 8010af0:	2400472c 	.word	0x2400472c

08010af4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08c      	sub	sp, #48	; 0x30
 8010af8:	af02      	add	r7, sp, #8
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	332a      	adds	r3, #42	; 0x2a
 8010b04:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010b06:	23ff      	movs	r3, #255	; 0xff
 8010b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68f9      	ldr	r1, [r7, #12]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f001 f844 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d10c      	bne.n	8010b3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b2a:	2be0      	cmp	r3, #224	; 0xe0
 8010b2c:	d006      	beq.n	8010b3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d003      	beq.n	8010b3c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d102      	bne.n	8010b42 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b3c:	f06f 030f 	mvn.w	r3, #15
 8010b40:	e101      	b.n	8010d46 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	2101      	movs	r1, #1
 8010b46:	68b8      	ldr	r0, [r7, #8]
 8010b48:	f7ff fb5c 	bl	8010204 <etharp_find_entry>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	da02      	bge.n	8010b5e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010b58:	8a7b      	ldrh	r3, [r7, #18]
 8010b5a:	b25b      	sxtb	r3, r3
 8010b5c:	e0f3      	b.n	8010d46 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010b5e:	8a7b      	ldrh	r3, [r7, #18]
 8010b60:	2b7e      	cmp	r3, #126	; 0x7e
 8010b62:	d906      	bls.n	8010b72 <etharp_query+0x7e>
 8010b64:	4b7a      	ldr	r3, [pc, #488]	; (8010d50 <etharp_query+0x25c>)
 8010b66:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010b6a:	497a      	ldr	r1, [pc, #488]	; (8010d54 <etharp_query+0x260>)
 8010b6c:	487a      	ldr	r0, [pc, #488]	; (8010d58 <etharp_query+0x264>)
 8010b6e:	f00b fca9 	bl	801c4c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010b72:	8a7b      	ldrh	r3, [r7, #18]
 8010b74:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010b76:	7c7a      	ldrb	r2, [r7, #17]
 8010b78:	4978      	ldr	r1, [pc, #480]	; (8010d5c <etharp_query+0x268>)
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	3314      	adds	r3, #20
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d115      	bne.n	8010bb8 <etharp_query+0xc4>
    is_new_entry = 1;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010b90:	7c7a      	ldrb	r2, [r7, #17]
 8010b92:	4972      	ldr	r1, [pc, #456]	; (8010d5c <etharp_query+0x268>)
 8010b94:	4613      	mov	r3, r2
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	440b      	add	r3, r1
 8010b9e:	3314      	adds	r3, #20
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010ba4:	7c7a      	ldrb	r2, [r7, #17]
 8010ba6:	496d      	ldr	r1, [pc, #436]	; (8010d5c <etharp_query+0x268>)
 8010ba8:	4613      	mov	r3, r2
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	4413      	add	r3, r2
 8010bae:	00db      	lsls	r3, r3, #3
 8010bb0:	440b      	add	r3, r1
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010bb8:	7c7a      	ldrb	r2, [r7, #17]
 8010bba:	4968      	ldr	r1, [pc, #416]	; (8010d5c <etharp_query+0x268>)
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	440b      	add	r3, r1
 8010bc6:	3314      	adds	r3, #20
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d011      	beq.n	8010bf2 <etharp_query+0xfe>
 8010bce:	7c7a      	ldrb	r2, [r7, #17]
 8010bd0:	4962      	ldr	r1, [pc, #392]	; (8010d5c <etharp_query+0x268>)
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	440b      	add	r3, r1
 8010bdc:	3314      	adds	r3, #20
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d806      	bhi.n	8010bf2 <etharp_query+0xfe>
 8010be4:	4b5a      	ldr	r3, [pc, #360]	; (8010d50 <etharp_query+0x25c>)
 8010be6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010bea:	495d      	ldr	r1, [pc, #372]	; (8010d60 <etharp_query+0x26c>)
 8010bec:	485a      	ldr	r0, [pc, #360]	; (8010d58 <etharp_query+0x264>)
 8010bee:	f00b fc69 	bl	801c4c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010bf2:	6a3b      	ldr	r3, [r7, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d102      	bne.n	8010bfe <etharp_query+0x10a>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10c      	bne.n	8010c18 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010bfe:	68b9      	ldr	r1, [r7, #8]
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f000 f963 	bl	8010ecc <etharp_request>
 8010c06:	4603      	mov	r3, r0
 8010c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d102      	bne.n	8010c18 <etharp_query+0x124>
      return result;
 8010c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c16:	e096      	b.n	8010d46 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <etharp_query+0x138>
 8010c1e:	4b4c      	ldr	r3, [pc, #304]	; (8010d50 <etharp_query+0x25c>)
 8010c20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010c24:	494f      	ldr	r1, [pc, #316]	; (8010d64 <etharp_query+0x270>)
 8010c26:	484c      	ldr	r0, [pc, #304]	; (8010d58 <etharp_query+0x264>)
 8010c28:	f00b fc4c 	bl	801c4c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010c2c:	7c7a      	ldrb	r2, [r7, #17]
 8010c2e:	494b      	ldr	r1, [pc, #300]	; (8010d5c <etharp_query+0x268>)
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	3314      	adds	r3, #20
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d917      	bls.n	8010c72 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010c42:	4a49      	ldr	r2, [pc, #292]	; (8010d68 <etharp_query+0x274>)
 8010c44:	7c7b      	ldrb	r3, [r7, #17]
 8010c46:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010c48:	7c7a      	ldrb	r2, [r7, #17]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	005b      	lsls	r3, r3, #1
 8010c4e:	4413      	add	r3, r2
 8010c50:	00db      	lsls	r3, r3, #3
 8010c52:	3308      	adds	r3, #8
 8010c54:	4a41      	ldr	r2, [pc, #260]	; (8010d5c <etharp_query+0x268>)
 8010c56:	4413      	add	r3, r2
 8010c58:	3304      	adds	r3, #4
 8010c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c5e:	9200      	str	r2, [sp, #0]
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	6879      	ldr	r1, [r7, #4]
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f000 f9d1 	bl	801100c <ethernet_output>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c70:	e067      	b.n	8010d42 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c72:	7c7a      	ldrb	r2, [r7, #17]
 8010c74:	4939      	ldr	r1, [pc, #228]	; (8010d5c <etharp_query+0x268>)
 8010c76:	4613      	mov	r3, r2
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	440b      	add	r3, r1
 8010c80:	3314      	adds	r3, #20
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d15c      	bne.n	8010d42 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c90:	e01c      	b.n	8010ccc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	895a      	ldrh	r2, [r3, #10]
 8010c96:	69fb      	ldr	r3, [r7, #28]
 8010c98:	891b      	ldrh	r3, [r3, #8]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d10a      	bne.n	8010cb4 <etharp_query+0x1c0>
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d006      	beq.n	8010cb4 <etharp_query+0x1c0>
 8010ca6:	4b2a      	ldr	r3, [pc, #168]	; (8010d50 <etharp_query+0x25c>)
 8010ca8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010cac:	492f      	ldr	r1, [pc, #188]	; (8010d6c <etharp_query+0x278>)
 8010cae:	482a      	ldr	r0, [pc, #168]	; (8010d58 <etharp_query+0x264>)
 8010cb0:	f00b fc08 	bl	801c4c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	7b1b      	ldrb	r3, [r3, #12]
 8010cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <etharp_query+0x1d2>
        copy_needed = 1;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	61bb      	str	r3, [r7, #24]
        break;
 8010cc4:	e005      	b.n	8010cd2 <etharp_query+0x1de>
      }
      p = p->next;
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1df      	bne.n	8010c92 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010cde:	200e      	movs	r0, #14
 8010ce0:	f003 fcb6 	bl	8014650 <pbuf_clone>
 8010ce4:	61f8      	str	r0, [r7, #28]
 8010ce6:	e004      	b.n	8010cf2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010cec:	69f8      	ldr	r0, [r7, #28]
 8010cee:	f003 fadd 	bl	80142ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d021      	beq.n	8010d3c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010cf8:	7c7a      	ldrb	r2, [r7, #17]
 8010cfa:	4918      	ldr	r1, [pc, #96]	; (8010d5c <etharp_query+0x268>)
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	4413      	add	r3, r2
 8010d02:	00db      	lsls	r3, r3, #3
 8010d04:	440b      	add	r3, r1
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00a      	beq.n	8010d22 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010d0c:	7c7a      	ldrb	r2, [r7, #17]
 8010d0e:	4913      	ldr	r1, [pc, #76]	; (8010d5c <etharp_query+0x268>)
 8010d10:	4613      	mov	r3, r2
 8010d12:	005b      	lsls	r3, r3, #1
 8010d14:	4413      	add	r3, r2
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	440b      	add	r3, r1
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f003 fa1f 	bl	8014160 <pbuf_free>
      }
      arp_table[i].q = p;
 8010d22:	7c7a      	ldrb	r2, [r7, #17]
 8010d24:	490d      	ldr	r1, [pc, #52]	; (8010d5c <etharp_query+0x268>)
 8010d26:	4613      	mov	r3, r2
 8010d28:	005b      	lsls	r3, r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	00db      	lsls	r3, r3, #3
 8010d2e:	440b      	add	r3, r1
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d3a:	e002      	b.n	8010d42 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010d3c:	23ff      	movs	r3, #255	; 0xff
 8010d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3728      	adds	r7, #40	; 0x28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	080203e8 	.word	0x080203e8
 8010d54:	080205b4 	.word	0x080205b4
 8010d58:	08020480 	.word	0x08020480
 8010d5c:	2400472c 	.word	0x2400472c
 8010d60:	080205c4 	.word	0x080205c4
 8010d64:	080205a8 	.word	0x080205a8
 8010d68:	2400481c 	.word	0x2400481c
 8010d6c:	080205ec 	.word	0x080205ec

08010d70 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08a      	sub	sp, #40	; 0x28
 8010d74:	af02      	add	r7, sp, #8
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d106      	bne.n	8010d96 <etharp_raw+0x26>
 8010d88:	4b3a      	ldr	r3, [pc, #232]	; (8010e74 <etharp_raw+0x104>)
 8010d8a:	f240 4257 	movw	r2, #1111	; 0x457
 8010d8e:	493a      	ldr	r1, [pc, #232]	; (8010e78 <etharp_raw+0x108>)
 8010d90:	483a      	ldr	r0, [pc, #232]	; (8010e7c <etharp_raw+0x10c>)
 8010d92:	f00b fb97 	bl	801c4c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010d96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d9a:	211c      	movs	r1, #28
 8010d9c:	200e      	movs	r0, #14
 8010d9e:	f002 fefb 	bl	8013b98 <pbuf_alloc>
 8010da2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d102      	bne.n	8010db0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010daa:	f04f 33ff 	mov.w	r3, #4294967295
 8010dae:	e05d      	b.n	8010e6c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	895b      	ldrh	r3, [r3, #10]
 8010db4:	2b1b      	cmp	r3, #27
 8010db6:	d806      	bhi.n	8010dc6 <etharp_raw+0x56>
 8010db8:	4b2e      	ldr	r3, [pc, #184]	; (8010e74 <etharp_raw+0x104>)
 8010dba:	f240 4262 	movw	r2, #1122	; 0x462
 8010dbe:	4930      	ldr	r1, [pc, #192]	; (8010e80 <etharp_raw+0x110>)
 8010dc0:	482e      	ldr	r0, [pc, #184]	; (8010e7c <etharp_raw+0x10c>)
 8010dc2:	f00b fb7f 	bl	801c4c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010dcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fd fa7c 	bl	800e2cc <lwip_htons>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010de2:	2b06      	cmp	r3, #6
 8010de4:	d006      	beq.n	8010df4 <etharp_raw+0x84>
 8010de6:	4b23      	ldr	r3, [pc, #140]	; (8010e74 <etharp_raw+0x104>)
 8010de8:	f240 4269 	movw	r2, #1129	; 0x469
 8010dec:	4925      	ldr	r1, [pc, #148]	; (8010e84 <etharp_raw+0x114>)
 8010dee:	4823      	ldr	r0, [pc, #140]	; (8010e7c <etharp_raw+0x10c>)
 8010df0:	f00b fb68 	bl	801c4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	3308      	adds	r3, #8
 8010df8:	2206      	movs	r2, #6
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f00a feef 	bl	801bbe0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	3312      	adds	r3, #18
 8010e06:	2206      	movs	r2, #6
 8010e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f00a fee8 	bl	801bbe0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	330e      	adds	r3, #14
 8010e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e16:	6812      	ldr	r2, [r2, #0]
 8010e18:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	3318      	adds	r3, #24
 8010e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e20:	6812      	ldr	r2, [r2, #0]
 8010e22:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2200      	movs	r2, #0
 8010e28:	701a      	strb	r2, [r3, #0]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f042 0201 	orr.w	r2, r2, #1
 8010e30:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f042 0208 	orr.w	r2, r2, #8
 8010e3a:	709a      	strb	r2, [r3, #2]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	2206      	movs	r2, #6
 8010e44:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	2204      	movs	r2, #4
 8010e4a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010e4c:	f640 0306 	movw	r3, #2054	; 0x806
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	69b9      	ldr	r1, [r7, #24]
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f000 f8d7 	bl	801100c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010e5e:	69b8      	ldr	r0, [r7, #24]
 8010e60:	f003 f97e 	bl	8014160 <pbuf_free>
  p = NULL;
 8010e64:	2300      	movs	r3, #0
 8010e66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3720      	adds	r7, #32
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	080203e8 	.word	0x080203e8
 8010e78:	08020558 	.word	0x08020558
 8010e7c:	08020480 	.word	0x08020480
 8010e80:	08020608 	.word	0x08020608
 8010e84:	0802063c 	.word	0x0802063c

08010e88 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b088      	sub	sp, #32
 8010e8c:	af04      	add	r7, sp, #16
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	9203      	str	r2, [sp, #12]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	9202      	str	r2, [sp, #8]
 8010eac:	4a06      	ldr	r2, [pc, #24]	; (8010ec8 <etharp_request_dst+0x40>)
 8010eae:	9201      	str	r2, [sp, #4]
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f7ff ff5a 	bl	8010d70 <etharp_raw>
 8010ebc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	08023250 	.word	0x08023250

08010ecc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010ed6:	4a05      	ldr	r2, [pc, #20]	; (8010eec <etharp_request+0x20>)
 8010ed8:	6839      	ldr	r1, [r7, #0]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff ffd4 	bl	8010e88 <etharp_request_dst>
 8010ee0:	4603      	mov	r3, r0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	08023248 	.word	0x08023248

08010ef0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010efa:	230e      	movs	r3, #14
 8010efc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	895b      	ldrh	r3, [r3, #10]
 8010f02:	2b0e      	cmp	r3, #14
 8010f04:	d96e      	bls.n	8010fe4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	7bdb      	ldrb	r3, [r3, #15]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f14:	3301      	adds	r3, #1
 8010f16:	b2da      	uxtb	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	7b1a      	ldrb	r2, [r3, #12]
 8010f26:	7b5b      	ldrb	r3, [r3, #13]
 8010f28:	021b      	lsls	r3, r3, #8
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d023      	beq.n	8010f82 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d10f      	bne.n	8010f62 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	785b      	ldrb	r3, [r3, #1]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d11b      	bne.n	8010f82 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010f4e:	2b5e      	cmp	r3, #94	; 0x5e
 8010f50:	d117      	bne.n	8010f82 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	7b5b      	ldrb	r3, [r3, #13]
 8010f56:	f043 0310 	orr.w	r3, r3, #16
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	735a      	strb	r2, [r3, #13]
 8010f60:	e00f      	b.n	8010f82 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	2206      	movs	r2, #6
 8010f66:	4928      	ldr	r1, [pc, #160]	; (8011008 <ethernet_input+0x118>)
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f00a fe29 	bl	801bbc0 <memcmp>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d106      	bne.n	8010f82 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	7b5b      	ldrb	r3, [r3, #13]
 8010f78:	f043 0308 	orr.w	r3, r3, #8
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010f82:	89fb      	ldrh	r3, [r7, #14]
 8010f84:	2b08      	cmp	r3, #8
 8010f86:	d003      	beq.n	8010f90 <ethernet_input+0xa0>
 8010f88:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010f8c:	d014      	beq.n	8010fb8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010f8e:	e032      	b.n	8010ff6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f96:	f003 0308 	and.w	r3, r3, #8
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d024      	beq.n	8010fe8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010f9e:	8afb      	ldrh	r3, [r7, #22]
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f003 f856 	bl	8014054 <pbuf_remove_header>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d11e      	bne.n	8010fec <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fbdd 	bl	8011770 <ip4_input>
      break;
 8010fb6:	e013      	b.n	8010fe0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fbe:	f003 0308 	and.w	r3, r3, #8
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d014      	beq.n	8010ff0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010fc6:	8afb      	ldrh	r3, [r7, #22]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f003 f842 	bl	8014054 <pbuf_remove_header>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10e      	bne.n	8010ff4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7ff fb61 	bl	80106a0 <etharp_input>
      break;
 8010fde:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e00c      	b.n	8010ffe <ethernet_input+0x10e>
    goto free_and_return;
 8010fe4:	bf00      	nop
 8010fe6:	e006      	b.n	8010ff6 <ethernet_input+0x106>
        goto free_and_return;
 8010fe8:	bf00      	nop
 8010fea:	e004      	b.n	8010ff6 <ethernet_input+0x106>
        goto free_and_return;
 8010fec:	bf00      	nop
 8010fee:	e002      	b.n	8010ff6 <ethernet_input+0x106>
        goto free_and_return;
 8010ff0:	bf00      	nop
 8010ff2:	e000      	b.n	8010ff6 <ethernet_input+0x106>
        goto free_and_return;
 8010ff4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f003 f8b2 	bl	8014160 <pbuf_free>
  return ERR_OK;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3718      	adds	r7, #24
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	08023248 	.word	0x08023248

0801100c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
 8011018:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801101a:	8c3b      	ldrh	r3, [r7, #32]
 801101c:	4618      	mov	r0, r3
 801101e:	f7fd f955 	bl	800e2cc <lwip_htons>
 8011022:	4603      	mov	r3, r0
 8011024:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011026:	210e      	movs	r1, #14
 8011028:	68b8      	ldr	r0, [r7, #8]
 801102a:	f003 f803 	bl	8014034 <pbuf_add_header>
 801102e:	4603      	mov	r3, r0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d125      	bne.n	8011080 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	8afa      	ldrh	r2, [r7, #22]
 801103e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2206      	movs	r2, #6
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	4618      	mov	r0, r3
 8011048:	f00a fdca 	bl	801bbe0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	3306      	adds	r3, #6
 8011050:	2206      	movs	r2, #6
 8011052:	6879      	ldr	r1, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	f00a fdc3 	bl	801bbe0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011060:	2b06      	cmp	r3, #6
 8011062:	d006      	beq.n	8011072 <ethernet_output+0x66>
 8011064:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <ethernet_output+0x84>)
 8011066:	f44f 7299 	mov.w	r2, #306	; 0x132
 801106a:	490a      	ldr	r1, [pc, #40]	; (8011094 <ethernet_output+0x88>)
 801106c:	480a      	ldr	r0, [pc, #40]	; (8011098 <ethernet_output+0x8c>)
 801106e:	f00b fa29 	bl	801c4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	699b      	ldr	r3, [r3, #24]
 8011076:	68b9      	ldr	r1, [r7, #8]
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	4798      	blx	r3
 801107c:	4603      	mov	r3, r0
 801107e:	e002      	b.n	8011086 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011080:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011082:	f06f 0301 	mvn.w	r3, #1
}
 8011086:	4618      	mov	r0, r3
 8011088:	3718      	adds	r7, #24
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	08020680 	.word	0x08020680
 8011094:	080206d4 	.word	0x080206d4
 8011098:	08020708 	.word	0x08020708

0801109c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d002      	beq.n	80110b2 <fs_open+0x16>
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d102      	bne.n	80110b8 <fs_open+0x1c>
    return ERR_ARG;
 80110b2:	f06f 030f 	mvn.w	r3, #15
 80110b6:	e028      	b.n	801110a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80110b8:	4b16      	ldr	r3, [pc, #88]	; (8011114 <fs_open+0x78>)
 80110ba:	60fb      	str	r3, [r7, #12]
 80110bc:	e020      	b.n	8011100 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	4619      	mov	r1, r3
 80110c4:	6838      	ldr	r0, [r7, #0]
 80110c6:	f7ef f90b 	bl	80002e0 <strcmp>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d114      	bne.n	80110fa <fs_open+0x5e>
      file->data = (const char *)f->data;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	689a      	ldr	r2, [r3, #8]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68da      	ldr	r2, [r3, #12]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	68da      	ldr	r2, [r3, #12]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	7c1a      	ldrb	r2, [r3, #16]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80110f6:	2300      	movs	r3, #0
 80110f8:	e007      	b.n	801110a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1db      	bne.n	80110be <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8011106:	f06f 0305 	mvn.w	r3, #5
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	080464ec 	.word	0x080464ec

08011118 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011120:	bf00      	nop
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08e      	sub	sp, #56	; 0x38
 8011130:	af04      	add	r7, sp, #16
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011136:	4b87      	ldr	r3, [pc, #540]	; (8011354 <icmp_input+0x228>)
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	f003 030f 	and.w	r3, r3, #15
 8011144:	b2db      	uxtb	r3, r3
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	b2db      	uxtb	r3, r3
 801114a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801114c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801114e:	2b13      	cmp	r3, #19
 8011150:	f240 80e8 	bls.w	8011324 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	895b      	ldrh	r3, [r3, #10]
 8011158:	2b03      	cmp	r3, #3
 801115a:	f240 80e5 	bls.w	8011328 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011168:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 80d2 	beq.w	8011316 <icmp_input+0x1ea>
 8011172:	2b08      	cmp	r3, #8
 8011174:	f040 80d2 	bne.w	801131c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011178:	4b77      	ldr	r3, [pc, #476]	; (8011358 <icmp_input+0x22c>)
 801117a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801117c:	4b75      	ldr	r3, [pc, #468]	; (8011354 <icmp_input+0x228>)
 801117e:	695b      	ldr	r3, [r3, #20]
 8011180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011184:	2be0      	cmp	r3, #224	; 0xe0
 8011186:	f000 80d6 	beq.w	8011336 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801118a:	4b72      	ldr	r3, [pc, #456]	; (8011354 <icmp_input+0x228>)
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	4a71      	ldr	r2, [pc, #452]	; (8011354 <icmp_input+0x228>)
 8011190:	6812      	ldr	r2, [r2, #0]
 8011192:	4611      	mov	r1, r2
 8011194:	4618      	mov	r0, r3
 8011196:	f000 fd05 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	f040 80cc 	bne.w	801133a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	891b      	ldrh	r3, [r3, #8]
 80111a6:	2b07      	cmp	r3, #7
 80111a8:	f240 80c0 	bls.w	801132c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 f9e0 	bl	8011572 <inet_chksum_pbuf>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d003      	beq.n	80111c0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f002 ffd1 	bl	8014160 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80111be:	e0c5      	b.n	801134c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80111c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111c2:	330e      	adds	r3, #14
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f002 ff34 	bl	8014034 <pbuf_add_header>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d04b      	beq.n	801126a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	891a      	ldrh	r2, [r3, #8]
 80111d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111d8:	4413      	add	r3, r2
 80111da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	891b      	ldrh	r3, [r3, #8]
 80111e0:	8b7a      	ldrh	r2, [r7, #26]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	f0c0 80ab 	bcc.w	801133e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80111e8:	8b7b      	ldrh	r3, [r7, #26]
 80111ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111ee:	4619      	mov	r1, r3
 80111f0:	200e      	movs	r0, #14
 80111f2:	f002 fcd1 	bl	8013b98 <pbuf_alloc>
 80111f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	f000 80a1 	beq.w	8011342 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	895b      	ldrh	r3, [r3, #10]
 8011204:	461a      	mov	r2, r3
 8011206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011208:	3308      	adds	r3, #8
 801120a:	429a      	cmp	r2, r3
 801120c:	d203      	bcs.n	8011216 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801120e:	6978      	ldr	r0, [r7, #20]
 8011210:	f002 ffa6 	bl	8014160 <pbuf_free>
          goto icmperr;
 8011214:	e096      	b.n	8011344 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801121c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801121e:	4618      	mov	r0, r3
 8011220:	f00a fcde 	bl	801bbe0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011226:	4619      	mov	r1, r3
 8011228:	6978      	ldr	r0, [r7, #20]
 801122a:	f002 ff13 	bl	8014054 <pbuf_remove_header>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d009      	beq.n	8011248 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011234:	4b49      	ldr	r3, [pc, #292]	; (801135c <icmp_input+0x230>)
 8011236:	22b6      	movs	r2, #182	; 0xb6
 8011238:	4949      	ldr	r1, [pc, #292]	; (8011360 <icmp_input+0x234>)
 801123a:	484a      	ldr	r0, [pc, #296]	; (8011364 <icmp_input+0x238>)
 801123c:	f00b f942 	bl	801c4c4 <iprintf>
          pbuf_free(r);
 8011240:	6978      	ldr	r0, [r7, #20]
 8011242:	f002 ff8d 	bl	8014160 <pbuf_free>
          goto icmperr;
 8011246:	e07d      	b.n	8011344 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	6978      	ldr	r0, [r7, #20]
 801124c:	f003 f8bc 	bl	80143c8 <pbuf_copy>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011256:	6978      	ldr	r0, [r7, #20]
 8011258:	f002 ff82 	bl	8014160 <pbuf_free>
          goto icmperr;
 801125c:	e072      	b.n	8011344 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f002 ff7e 	bl	8014160 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	607b      	str	r3, [r7, #4]
 8011268:	e00f      	b.n	801128a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801126a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801126c:	330e      	adds	r3, #14
 801126e:	4619      	mov	r1, r3
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f002 feef 	bl	8014054 <pbuf_remove_header>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d006      	beq.n	801128a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801127c:	4b37      	ldr	r3, [pc, #220]	; (801135c <icmp_input+0x230>)
 801127e:	22c7      	movs	r2, #199	; 0xc7
 8011280:	4939      	ldr	r1, [pc, #228]	; (8011368 <icmp_input+0x23c>)
 8011282:	4838      	ldr	r0, [pc, #224]	; (8011364 <icmp_input+0x238>)
 8011284:	f00b f91e 	bl	801c4c4 <iprintf>
          goto icmperr;
 8011288:	e05c      	b.n	8011344 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011292:	4619      	mov	r1, r3
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f002 fecd 	bl	8014034 <pbuf_add_header>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	d13c      	bne.n	801131a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80112ae:	4b29      	ldr	r3, [pc, #164]	; (8011354 <icmp_input+0x228>)
 80112b0:	691a      	ldr	r2, [r3, #16]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	2200      	movs	r2, #0
 80112ba:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	885b      	ldrh	r3, [r3, #2]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d907      	bls.n	80112da <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	885b      	ldrh	r3, [r3, #2]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	3309      	adds	r3, #9
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	805a      	strh	r2, [r3, #2]
 80112d8:	e006      	b.n	80112e8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	885b      	ldrh	r3, [r3, #2]
 80112de:	b29b      	uxth	r3, r3
 80112e0:	3308      	adds	r3, #8
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	22ff      	movs	r2, #255	; 0xff
 80112ec:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2200      	movs	r2, #0
 80112f2:	729a      	strb	r2, [r3, #10]
 80112f4:	2200      	movs	r2, #0
 80112f6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	9302      	str	r3, [sp, #8]
 80112fc:	2301      	movs	r3, #1
 80112fe:	9301      	str	r3, [sp, #4]
 8011300:	2300      	movs	r3, #0
 8011302:	9300      	str	r3, [sp, #0]
 8011304:	23ff      	movs	r3, #255	; 0xff
 8011306:	2200      	movs	r2, #0
 8011308:	69f9      	ldr	r1, [r7, #28]
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fb72 	bl	80119f4 <ip4_output_if>
 8011310:	4603      	mov	r3, r0
 8011312:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011314:	e001      	b.n	801131a <icmp_input+0x1ee>
      break;
 8011316:	bf00      	nop
 8011318:	e000      	b.n	801131c <icmp_input+0x1f0>
      break;
 801131a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f002 ff1f 	bl	8014160 <pbuf_free>
  return;
 8011322:	e013      	b.n	801134c <icmp_input+0x220>
    goto lenerr;
 8011324:	bf00      	nop
 8011326:	e002      	b.n	801132e <icmp_input+0x202>
    goto lenerr;
 8011328:	bf00      	nop
 801132a:	e000      	b.n	801132e <icmp_input+0x202>
        goto lenerr;
 801132c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f002 ff16 	bl	8014160 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011334:	e00a      	b.n	801134c <icmp_input+0x220>
        goto icmperr;
 8011336:	bf00      	nop
 8011338:	e004      	b.n	8011344 <icmp_input+0x218>
        goto icmperr;
 801133a:	bf00      	nop
 801133c:	e002      	b.n	8011344 <icmp_input+0x218>
          goto icmperr;
 801133e:	bf00      	nop
 8011340:	e000      	b.n	8011344 <icmp_input+0x218>
          goto icmperr;
 8011342:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f002 ff0b 	bl	8014160 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801134a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801134c:	3728      	adds	r7, #40	; 0x28
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	24004820 	.word	0x24004820
 8011358:	24004834 	.word	0x24004834
 801135c:	08020730 	.word	0x08020730
 8011360:	08020784 	.word	0x08020784
 8011364:	080207bc 	.word	0x080207bc
 8011368:	080207e4 	.word	0x080207e4

0801136c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011378:	78fb      	ldrb	r3, [r7, #3]
 801137a:	461a      	mov	r2, r3
 801137c:	2103      	movs	r1, #3
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 f814 	bl	80113ac <icmp_send_response>
}
 8011384:	bf00      	nop
 8011386:	3708      	adds	r7, #8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	460b      	mov	r3, r1
 8011396:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011398:	78fb      	ldrb	r3, [r7, #3]
 801139a:	461a      	mov	r2, r3
 801139c:	210b      	movs	r1, #11
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 f804 	bl	80113ac <icmp_send_response>
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b08c      	sub	sp, #48	; 0x30
 80113b0:	af04      	add	r7, sp, #16
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	70fb      	strb	r3, [r7, #3]
 80113b8:	4613      	mov	r3, r2
 80113ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80113bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113c0:	2124      	movs	r1, #36	; 0x24
 80113c2:	2022      	movs	r0, #34	; 0x22
 80113c4:	f002 fbe8 	bl	8013b98 <pbuf_alloc>
 80113c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d056      	beq.n	801147e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	895b      	ldrh	r3, [r3, #10]
 80113d4:	2b23      	cmp	r3, #35	; 0x23
 80113d6:	d806      	bhi.n	80113e6 <icmp_send_response+0x3a>
 80113d8:	4b2b      	ldr	r3, [pc, #172]	; (8011488 <icmp_send_response+0xdc>)
 80113da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80113de:	492b      	ldr	r1, [pc, #172]	; (801148c <icmp_send_response+0xe0>)
 80113e0:	482b      	ldr	r0, [pc, #172]	; (8011490 <icmp_send_response+0xe4>)
 80113e2:	f00b f86f 	bl	801c4c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	78fa      	ldrb	r2, [r7, #3]
 80113f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	78ba      	ldrb	r2, [r7, #2]
 80113fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	2200      	movs	r2, #0
 8011402:	711a      	strb	r2, [r3, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	2200      	movs	r2, #0
 801140c:	719a      	strb	r2, [r3, #6]
 801140e:	2200      	movs	r2, #0
 8011410:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	f103 0008 	add.w	r0, r3, #8
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	221c      	movs	r2, #28
 8011420:	4619      	mov	r1, r3
 8011422:	f00a fbdd 	bl	801bbe0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801142c:	f107 030c 	add.w	r3, r7, #12
 8011430:	4618      	mov	r0, r3
 8011432:	f000 f903 	bl	801163c <ip4_route>
 8011436:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d01b      	beq.n	8011476 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	2200      	movs	r2, #0
 8011442:	709a      	strb	r2, [r3, #2]
 8011444:	2200      	movs	r2, #0
 8011446:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	895b      	ldrh	r3, [r3, #10]
 801144c:	4619      	mov	r1, r3
 801144e:	6978      	ldr	r0, [r7, #20]
 8011450:	f000 f87d 	bl	801154e <inet_chksum>
 8011454:	4603      	mov	r3, r0
 8011456:	461a      	mov	r2, r3
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801145c:	f107 020c 	add.w	r2, r7, #12
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	9302      	str	r3, [sp, #8]
 8011464:	2301      	movs	r3, #1
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	2300      	movs	r3, #0
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	23ff      	movs	r3, #255	; 0xff
 801146e:	2100      	movs	r1, #0
 8011470:	69f8      	ldr	r0, [r7, #28]
 8011472:	f000 fabf 	bl	80119f4 <ip4_output_if>
  }
  pbuf_free(q);
 8011476:	69f8      	ldr	r0, [r7, #28]
 8011478:	f002 fe72 	bl	8014160 <pbuf_free>
 801147c:	e000      	b.n	8011480 <icmp_send_response+0xd4>
    return;
 801147e:	bf00      	nop
}
 8011480:	3720      	adds	r7, #32
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	08020730 	.word	0x08020730
 801148c:	08020818 	.word	0x08020818
 8011490:	080207bc 	.word	0x080207bc

08011494 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8011494:	b480      	push	{r7}
 8011496:	b089      	sub	sp, #36	; 0x24
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80114a6:	2300      	movs	r3, #0
 80114a8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	f003 0301 	and.w	r3, r3, #1
 80114b0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00d      	beq.n	80114d4 <lwip_standard_chksum+0x40>
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	dd0a      	ble.n	80114d4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80114be:	69fa      	ldr	r2, [r7, #28]
 80114c0:	1c53      	adds	r3, r2, #1
 80114c2:	61fb      	str	r3, [r7, #28]
 80114c4:	f107 030e 	add.w	r3, r7, #14
 80114c8:	3301      	adds	r3, #1
 80114ca:	7812      	ldrb	r2, [r2, #0]
 80114cc:	701a      	strb	r2, [r3, #0]
    len--;
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	3b01      	subs	r3, #1
 80114d2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80114d8:	e00a      	b.n	80114f0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	1c9a      	adds	r2, r3, #2
 80114de:	61ba      	str	r2, [r7, #24]
 80114e0:	881b      	ldrh	r3, [r3, #0]
 80114e2:	461a      	mov	r2, r3
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	4413      	add	r3, r2
 80114e8:	617b      	str	r3, [r7, #20]
    len -= 2;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	3b02      	subs	r3, #2
 80114ee:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	dcf1      	bgt.n	80114da <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	dd04      	ble.n	8011506 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80114fc:	f107 030e 	add.w	r3, r7, #14
 8011500:	69ba      	ldr	r2, [r7, #24]
 8011502:	7812      	ldrb	r2, [r2, #0]
 8011504:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8011506:	89fb      	ldrh	r3, [r7, #14]
 8011508:	461a      	mov	r2, r3
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	4413      	add	r3, r2
 801150e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	0c1a      	lsrs	r2, r3, #16
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	b29b      	uxth	r3, r3
 8011518:	4413      	add	r3, r2
 801151a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	0c1a      	lsrs	r2, r3, #16
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	b29b      	uxth	r3, r3
 8011524:	4413      	add	r3, r2
 8011526:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d007      	beq.n	801153e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	021b      	lsls	r3, r3, #8
 8011532:	b29a      	uxth	r2, r3
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	0a1b      	lsrs	r3, r3, #8
 8011538:	b2db      	uxtb	r3, r3
 801153a:	4313      	orrs	r3, r2
 801153c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	b29b      	uxth	r3, r3
}
 8011542:	4618      	mov	r0, r3
 8011544:	3724      	adds	r7, #36	; 0x24
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	460b      	mov	r3, r1
 8011558:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801155a:	887b      	ldrh	r3, [r7, #2]
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7ff ff98 	bl	8011494 <lwip_standard_chksum>
 8011564:	4603      	mov	r3, r0
 8011566:	43db      	mvns	r3, r3
 8011568:	b29b      	uxth	r3, r3
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b086      	sub	sp, #24
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801157a:	2300      	movs	r3, #0
 801157c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801157e:	2300      	movs	r3, #0
 8011580:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	613b      	str	r3, [r7, #16]
 8011586:	e02b      	b.n	80115e0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	895b      	ldrh	r3, [r3, #10]
 8011590:	4619      	mov	r1, r3
 8011592:	4610      	mov	r0, r2
 8011594:	f7ff ff7e 	bl	8011494 <lwip_standard_chksum>
 8011598:	4603      	mov	r3, r0
 801159a:	461a      	mov	r2, r3
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	4413      	add	r3, r2
 80115a0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	0c1a      	lsrs	r2, r3, #16
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	4413      	add	r3, r2
 80115ac:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	895b      	ldrh	r3, [r3, #10]
 80115b2:	f003 0301 	and.w	r3, r3, #1
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00e      	beq.n	80115da <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	bf0c      	ite	eq
 80115c2:	2301      	moveq	r3, #1
 80115c4:	2300      	movne	r3, #0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	021b      	lsls	r3, r3, #8
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	0a1b      	lsrs	r3, r3, #8
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	4313      	orrs	r3, r2
 80115d8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	613b      	str	r3, [r7, #16]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d1d0      	bne.n	8011588 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d007      	beq.n	80115fc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	021b      	lsls	r3, r3, #8
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	0a1b      	lsrs	r3, r3, #8
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	4313      	orrs	r3, r2
 80115fa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	43db      	mvns	r3, r3
 8011602:	b29b      	uxth	r3, r3
}
 8011604:	4618      	mov	r0, r3
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011616:	f003 f9a5 	bl	8014964 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801161a:	f001 fa0d 	bl	8012a38 <mem_init>
  memp_init();
 801161e:	f001 fd71 	bl	8013104 <memp_init>
  pbuf_init();
  netif_init();
 8011622:	f001 ff17 	bl	8013454 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011626:	f009 fddf 	bl	801b1e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801162a:	f003 fa25 	bl	8014a78 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801162e:	f009 fd21 	bl	801b074 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011632:	bf00      	nop
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
	...

0801163c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801163c:	b480      	push	{r7}
 801163e:	b085      	sub	sp, #20
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011644:	4b33      	ldr	r3, [pc, #204]	; (8011714 <ip4_route+0xd8>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	60fb      	str	r3, [r7, #12]
 801164a:	e036      	b.n	80116ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011652:	f003 0301 	and.w	r3, r3, #1
 8011656:	b2db      	uxtb	r3, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d02b      	beq.n	80116b4 <ip4_route+0x78>
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011662:	089b      	lsrs	r3, r3, #2
 8011664:	f003 0301 	and.w	r3, r3, #1
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	d022      	beq.n	80116b4 <ip4_route+0x78>
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	3304      	adds	r3, #4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01d      	beq.n	80116b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	3304      	adds	r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	405a      	eors	r2, r3
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	3308      	adds	r3, #8
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4013      	ands	r3, r2
 801168c:	2b00      	cmp	r3, #0
 801168e:	d101      	bne.n	8011694 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	e038      	b.n	8011706 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801169a:	f003 0302 	and.w	r3, r3, #2
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d108      	bne.n	80116b4 <ip4_route+0x78>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	330c      	adds	r3, #12
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d101      	bne.n	80116b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	e028      	b.n	8011706 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	60fb      	str	r3, [r7, #12]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1c5      	bne.n	801164c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80116c0:	4b15      	ldr	r3, [pc, #84]	; (8011718 <ip4_route+0xdc>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d01a      	beq.n	80116fe <ip4_route+0xc2>
 80116c8:	4b13      	ldr	r3, [pc, #76]	; (8011718 <ip4_route+0xdc>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116d0:	f003 0301 	and.w	r3, r3, #1
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d012      	beq.n	80116fe <ip4_route+0xc2>
 80116d8:	4b0f      	ldr	r3, [pc, #60]	; (8011718 <ip4_route+0xdc>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116e0:	f003 0304 	and.w	r3, r3, #4
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00a      	beq.n	80116fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116e8:	4b0b      	ldr	r3, [pc, #44]	; (8011718 <ip4_route+0xdc>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	3304      	adds	r3, #4
 80116ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b7f      	cmp	r3, #127	; 0x7f
 80116fc:	d101      	bne.n	8011702 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80116fe:	2300      	movs	r3, #0
 8011700:	e001      	b.n	8011706 <ip4_route+0xca>
  }

  return netif_default;
 8011702:	4b05      	ldr	r3, [pc, #20]	; (8011718 <ip4_route+0xdc>)
 8011704:	681b      	ldr	r3, [r3, #0]
}
 8011706:	4618      	mov	r0, r3
 8011708:	3714      	adds	r7, #20
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	24007940 	.word	0x24007940
 8011718:	24007944 	.word	0x24007944

0801171c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801172a:	f003 0301 	and.w	r3, r3, #1
 801172e:	b2db      	uxtb	r3, r3
 8011730:	2b00      	cmp	r3, #0
 8011732:	d016      	beq.n	8011762 <ip4_input_accept+0x46>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	3304      	adds	r3, #4
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d011      	beq.n	8011762 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801173e:	4b0b      	ldr	r3, [pc, #44]	; (801176c <ip4_input_accept+0x50>)
 8011740:	695a      	ldr	r2, [r3, #20]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3304      	adds	r3, #4
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	429a      	cmp	r2, r3
 801174a:	d008      	beq.n	801175e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801174c:	4b07      	ldr	r3, [pc, #28]	; (801176c <ip4_input_accept+0x50>)
 801174e:	695b      	ldr	r3, [r3, #20]
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	4618      	mov	r0, r3
 8011754:	f000 fa26 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 8011758:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801175a:	2b00      	cmp	r3, #0
 801175c:	d001      	beq.n	8011762 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801175e:	2301      	movs	r3, #1
 8011760:	e000      	b.n	8011764 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	24004820 	.word	0x24004820

08011770 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b088      	sub	sp, #32
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801177a:	2301      	movs	r3, #1
 801177c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	091b      	lsrs	r3, r3, #4
 801178a:	b2db      	uxtb	r3, r3
 801178c:	2b04      	cmp	r3, #4
 801178e:	d004      	beq.n	801179a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f002 fce5 	bl	8014160 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	e123      	b.n	80119e2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	f003 030f 	and.w	r3, r3, #15
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	885b      	ldrh	r3, [r3, #2]
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fc fd8b 	bl	800e2cc <lwip_htons>
 80117b6:	4603      	mov	r3, r0
 80117b8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	891b      	ldrh	r3, [r3, #8]
 80117be:	8a3a      	ldrh	r2, [r7, #16]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d204      	bcs.n	80117ce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80117c4:	8a3b      	ldrh	r3, [r7, #16]
 80117c6:	4619      	mov	r1, r3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f002 fb43 	bl	8013e54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	895b      	ldrh	r3, [r3, #10]
 80117d2:	8a7a      	ldrh	r2, [r7, #18]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d807      	bhi.n	80117e8 <ip4_input+0x78>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	891b      	ldrh	r3, [r3, #8]
 80117dc:	8a3a      	ldrh	r2, [r7, #16]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d802      	bhi.n	80117e8 <ip4_input+0x78>
 80117e2:	8a7b      	ldrh	r3, [r7, #18]
 80117e4:	2b13      	cmp	r3, #19
 80117e6:	d804      	bhi.n	80117f2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f002 fcb9 	bl	8014160 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	e0f7      	b.n	80119e2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	4a7d      	ldr	r2, [pc, #500]	; (80119ec <ip4_input+0x27c>)
 80117f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80117fa:	69fb      	ldr	r3, [r7, #28]
 80117fc:	68db      	ldr	r3, [r3, #12]
 80117fe:	4a7b      	ldr	r2, [pc, #492]	; (80119ec <ip4_input+0x27c>)
 8011800:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011802:	4b7a      	ldr	r3, [pc, #488]	; (80119ec <ip4_input+0x27c>)
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801180a:	2be0      	cmp	r3, #224	; 0xe0
 801180c:	d112      	bne.n	8011834 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011814:	f003 0301 	and.w	r3, r3, #1
 8011818:	b2db      	uxtb	r3, r3
 801181a:	2b00      	cmp	r3, #0
 801181c:	d007      	beq.n	801182e <ip4_input+0xbe>
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	3304      	adds	r3, #4
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d002      	beq.n	801182e <ip4_input+0xbe>
      netif = inp;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	61bb      	str	r3, [r7, #24]
 801182c:	e02a      	b.n	8011884 <ip4_input+0x114>
    } else {
      netif = NULL;
 801182e:	2300      	movs	r3, #0
 8011830:	61bb      	str	r3, [r7, #24]
 8011832:	e027      	b.n	8011884 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011834:	6838      	ldr	r0, [r7, #0]
 8011836:	f7ff ff71 	bl	801171c <ip4_input_accept>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <ip4_input+0xd6>
      netif = inp;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	61bb      	str	r3, [r7, #24]
 8011844:	e01e      	b.n	8011884 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011846:	2300      	movs	r3, #0
 8011848:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801184a:	4b68      	ldr	r3, [pc, #416]	; (80119ec <ip4_input+0x27c>)
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	b2db      	uxtb	r3, r3
 8011850:	2b7f      	cmp	r3, #127	; 0x7f
 8011852:	d017      	beq.n	8011884 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011854:	4b66      	ldr	r3, [pc, #408]	; (80119f0 <ip4_input+0x280>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	61bb      	str	r3, [r7, #24]
 801185a:	e00e      	b.n	801187a <ip4_input+0x10a>
          if (netif == inp) {
 801185c:	69ba      	ldr	r2, [r7, #24]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	429a      	cmp	r2, r3
 8011862:	d006      	beq.n	8011872 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011864:	69b8      	ldr	r0, [r7, #24]
 8011866:	f7ff ff59 	bl	801171c <ip4_input_accept>
 801186a:	4603      	mov	r3, r0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d108      	bne.n	8011882 <ip4_input+0x112>
 8011870:	e000      	b.n	8011874 <ip4_input+0x104>
            continue;
 8011872:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	61bb      	str	r3, [r7, #24]
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1ed      	bne.n	801185c <ip4_input+0xec>
 8011880:	e000      	b.n	8011884 <ip4_input+0x114>
            break;
 8011882:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d111      	bne.n	80118ae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	7a5b      	ldrb	r3, [r3, #9]
 801188e:	2b11      	cmp	r3, #17
 8011890:	d10d      	bne.n	80118ae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011892:	8a7b      	ldrh	r3, [r7, #18]
 8011894:	69fa      	ldr	r2, [r7, #28]
 8011896:	4413      	add	r3, r2
 8011898:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	885b      	ldrh	r3, [r3, #2]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80118a4:	d103      	bne.n	80118ae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80118aa:	2300      	movs	r3, #0
 80118ac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d017      	beq.n	80118e4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80118b4:	4b4d      	ldr	r3, [pc, #308]	; (80119ec <ip4_input+0x27c>)
 80118b6:	691b      	ldr	r3, [r3, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d013      	beq.n	80118e4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118bc:	4b4b      	ldr	r3, [pc, #300]	; (80119ec <ip4_input+0x27c>)
 80118be:	691b      	ldr	r3, [r3, #16]
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 f96e 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d105      	bne.n	80118da <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80118ce:	4b47      	ldr	r3, [pc, #284]	; (80119ec <ip4_input+0x27c>)
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118d6:	2be0      	cmp	r3, #224	; 0xe0
 80118d8:	d104      	bne.n	80118e4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f002 fc40 	bl	8014160 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e07e      	b.n	80119e2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d104      	bne.n	80118f4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f002 fc38 	bl	8014160 <pbuf_free>
    return ERR_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e076      	b.n	80119e2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	88db      	ldrh	r3, [r3, #6]
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	461a      	mov	r2, r3
 80118fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011900:	4013      	ands	r3, r2
 8011902:	2b00      	cmp	r3, #0
 8011904:	d00b      	beq.n	801191e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fc92 	bl	8012230 <ip4_reass>
 801190c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d101      	bne.n	8011918 <ip4_input+0x1a8>
      return ERR_OK;
 8011914:	2300      	movs	r3, #0
 8011916:	e064      	b.n	80119e2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801191e:	4a33      	ldr	r2, [pc, #204]	; (80119ec <ip4_input+0x27c>)
 8011920:	69bb      	ldr	r3, [r7, #24]
 8011922:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011924:	4a31      	ldr	r2, [pc, #196]	; (80119ec <ip4_input+0x27c>)
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801192a:	4a30      	ldr	r2, [pc, #192]	; (80119ec <ip4_input+0x27c>)
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 030f 	and.w	r3, r3, #15
 8011938:	b2db      	uxtb	r3, r3
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	b2db      	uxtb	r3, r3
 801193e:	b29a      	uxth	r2, r3
 8011940:	4b2a      	ldr	r3, [pc, #168]	; (80119ec <ip4_input+0x27c>)
 8011942:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011944:	8a7b      	ldrh	r3, [r7, #18]
 8011946:	4619      	mov	r1, r3
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f002 fb83 	bl	8014054 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801194e:	69fb      	ldr	r3, [r7, #28]
 8011950:	7a5b      	ldrb	r3, [r3, #9]
 8011952:	2b11      	cmp	r3, #17
 8011954:	d006      	beq.n	8011964 <ip4_input+0x1f4>
 8011956:	2b11      	cmp	r3, #17
 8011958:	dc13      	bgt.n	8011982 <ip4_input+0x212>
 801195a:	2b01      	cmp	r3, #1
 801195c:	d00c      	beq.n	8011978 <ip4_input+0x208>
 801195e:	2b06      	cmp	r3, #6
 8011960:	d005      	beq.n	801196e <ip4_input+0x1fe>
 8011962:	e00e      	b.n	8011982 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011964:	6839      	ldr	r1, [r7, #0]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f009 fcec 	bl	801b344 <udp_input>
        break;
 801196c:	e026      	b.n	80119bc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f004 feed 	bl	8016750 <tcp_input>
        break;
 8011976:	e021      	b.n	80119bc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011978:	6839      	ldr	r1, [r7, #0]
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7ff fbd6 	bl	801112c <icmp_input>
        break;
 8011980:	e01c      	b.n	80119bc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011982:	4b1a      	ldr	r3, [pc, #104]	; (80119ec <ip4_input+0x27c>)
 8011984:	695b      	ldr	r3, [r3, #20]
 8011986:	69b9      	ldr	r1, [r7, #24]
 8011988:	4618      	mov	r0, r3
 801198a:	f000 f90b 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10f      	bne.n	80119b4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011994:	4b15      	ldr	r3, [pc, #84]	; (80119ec <ip4_input+0x27c>)
 8011996:	695b      	ldr	r3, [r3, #20]
 8011998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801199c:	2be0      	cmp	r3, #224	; 0xe0
 801199e:	d009      	beq.n	80119b4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80119a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119a4:	4619      	mov	r1, r3
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f002 fbc7 	bl	801413a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80119ac:	2102      	movs	r1, #2
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7ff fcdc 	bl	801136c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f002 fbd3 	bl	8014160 <pbuf_free>
        break;
 80119ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80119bc:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <ip4_input+0x27c>)
 80119be:	2200      	movs	r2, #0
 80119c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80119c2:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <ip4_input+0x27c>)
 80119c4:	2200      	movs	r2, #0
 80119c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80119c8:	4b08      	ldr	r3, [pc, #32]	; (80119ec <ip4_input+0x27c>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80119ce:	4b07      	ldr	r3, [pc, #28]	; (80119ec <ip4_input+0x27c>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80119d4:	4b05      	ldr	r3, [pc, #20]	; (80119ec <ip4_input+0x27c>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80119da:	4b04      	ldr	r3, [pc, #16]	; (80119ec <ip4_input+0x27c>)
 80119dc:	2200      	movs	r2, #0
 80119de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3720      	adds	r7, #32
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	24004820 	.word	0x24004820
 80119f0:	24007940 	.word	0x24007940

080119f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b08a      	sub	sp, #40	; 0x28
 80119f8:	af04      	add	r7, sp, #16
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	607a      	str	r2, [r7, #4]
 8011a00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d009      	beq.n	8011a20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d003      	beq.n	8011a1a <ip4_output_if+0x26>
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d102      	bne.n	8011a20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1c:	3304      	adds	r3, #4
 8011a1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a24:	9302      	str	r3, [sp, #8]
 8011a26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a2a:	9301      	str	r3, [sp, #4]
 8011a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4613      	mov	r3, r2
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	6979      	ldr	r1, [r7, #20]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f000 f805 	bl	8011a48 <ip4_output_if_src>
 8011a3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3718      	adds	r7, #24
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b088      	sub	sp, #32
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
 8011a54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	7b9b      	ldrb	r3, [r3, #14]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d006      	beq.n	8011a6c <ip4_output_if_src+0x24>
 8011a5e:	4b4b      	ldr	r3, [pc, #300]	; (8011b8c <ip4_output_if_src+0x144>)
 8011a60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011a64:	494a      	ldr	r1, [pc, #296]	; (8011b90 <ip4_output_if_src+0x148>)
 8011a66:	484b      	ldr	r0, [pc, #300]	; (8011b94 <ip4_output_if_src+0x14c>)
 8011a68:	f00a fd2c 	bl	801c4c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d060      	beq.n	8011b34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011a72:	2314      	movs	r3, #20
 8011a74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011a76:	2114      	movs	r1, #20
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f002 fadb 	bl	8014034 <pbuf_add_header>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a84:	f06f 0301 	mvn.w	r3, #1
 8011a88:	e07c      	b.n	8011b84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	895b      	ldrh	r3, [r3, #10]
 8011a94:	2b13      	cmp	r3, #19
 8011a96:	d806      	bhi.n	8011aa6 <ip4_output_if_src+0x5e>
 8011a98:	4b3c      	ldr	r3, [pc, #240]	; (8011b8c <ip4_output_if_src+0x144>)
 8011a9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011a9e:	493e      	ldr	r1, [pc, #248]	; (8011b98 <ip4_output_if_src+0x150>)
 8011aa0:	483c      	ldr	r0, [pc, #240]	; (8011b94 <ip4_output_if_src+0x14c>)
 8011aa2:	f00a fd0f 	bl	801c4c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	78fa      	ldrb	r2, [r7, #3]
 8011aaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011ab2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011abc:	8b7b      	ldrh	r3, [r7, #26]
 8011abe:	089b      	lsrs	r3, r3, #2
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ad4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	891b      	ldrh	r3, [r3, #8]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fc fbf6 	bl	800e2cc <lwip_htons>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	2200      	movs	r2, #0
 8011aec:	719a      	strb	r2, [r3, #6]
 8011aee:	2200      	movs	r2, #0
 8011af0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011af2:	4b2a      	ldr	r3, [pc, #168]	; (8011b9c <ip4_output_if_src+0x154>)
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fc fbe8 	bl	800e2cc <lwip_htons>
 8011afc:	4603      	mov	r3, r0
 8011afe:	461a      	mov	r2, r3
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011b04:	4b25      	ldr	r3, [pc, #148]	; (8011b9c <ip4_output_if_src+0x154>)
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	4b23      	ldr	r3, [pc, #140]	; (8011b9c <ip4_output_if_src+0x154>)
 8011b0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d104      	bne.n	8011b20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011b16:	4b22      	ldr	r3, [pc, #136]	; (8011ba0 <ip4_output_if_src+0x158>)
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	60da      	str	r2, [r3, #12]
 8011b1e:	e003      	b.n	8011b28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	729a      	strb	r2, [r3, #10]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	72da      	strb	r2, [r3, #11]
 8011b32:	e00f      	b.n	8011b54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	895b      	ldrh	r3, [r3, #10]
 8011b38:	2b13      	cmp	r3, #19
 8011b3a:	d802      	bhi.n	8011b42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b3c:	f06f 0301 	mvn.w	r3, #1
 8011b40:	e020      	b.n	8011b84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	691b      	ldr	r3, [r3, #16]
 8011b4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011b4e:	f107 0314 	add.w	r3, r7, #20
 8011b52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d00c      	beq.n	8011b76 <ip4_output_if_src+0x12e>
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	891a      	ldrh	r2, [r3, #8]
 8011b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d906      	bls.n	8011b76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 fd53 	bl	8012618 <ip4_frag>
 8011b72:	4603      	mov	r3, r0
 8011b74:	e006      	b.n	8011b84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b78:	695b      	ldr	r3, [r3, #20]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	68f9      	ldr	r1, [r7, #12]
 8011b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b80:	4798      	blx	r3
 8011b82:	4603      	mov	r3, r0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3720      	adds	r7, #32
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	08020844 	.word	0x08020844
 8011b90:	08020898 	.word	0x08020898
 8011b94:	080208a4 	.word	0x080208a4
 8011b98:	080208cc 	.word	0x080208cc
 8011b9c:	24004838 	.word	0x24004838
 8011ba0:	08046500 	.word	0x08046500

08011ba4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb8:	d002      	beq.n	8011bc0 <ip4_addr_isbroadcast_u32+0x1c>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d101      	bne.n	8011bc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e02a      	b.n	8011c1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011bca:	f003 0302 	and.w	r3, r3, #2
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	e021      	b.n	8011c1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d101      	bne.n	8011be6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	e019      	b.n	8011c1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	3304      	adds	r3, #4
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	405a      	eors	r2, r3
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	3308      	adds	r3, #8
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d10d      	bne.n	8011c18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	3308      	adds	r3, #8
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	43da      	mvns	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d101      	bne.n	8011c18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	e000      	b.n	8011c1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011c18:	2300      	movs	r3, #0
  }
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3714      	adds	r7, #20
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr
	...

08011c28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011c32:	4b12      	ldr	r3, [pc, #72]	; (8011c7c <ip_reass_tmr+0x54>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011c38:	e018      	b.n	8011c6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	7fdb      	ldrb	r3, [r3, #31]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d00b      	beq.n	8011c5a <ip_reass_tmr+0x32>
      r->timer--;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	7fdb      	ldrb	r3, [r3, #31]
 8011c46:	3b01      	subs	r3, #1
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	60fb      	str	r3, [r7, #12]
 8011c58:	e008      	b.n	8011c6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011c64:	68b9      	ldr	r1, [r7, #8]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 f80a 	bl	8011c80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d1e3      	bne.n	8011c3a <ip_reass_tmr+0x12>
    }
  }
}
 8011c72:	bf00      	nop
 8011c74:	bf00      	nop
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	2400483c 	.word	0x2400483c

08011c80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b088      	sub	sp, #32
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d105      	bne.n	8011ca2 <ip_reass_free_complete_datagram+0x22>
 8011c96:	4b45      	ldr	r3, [pc, #276]	; (8011dac <ip_reass_free_complete_datagram+0x12c>)
 8011c98:	22ab      	movs	r2, #171	; 0xab
 8011c9a:	4945      	ldr	r1, [pc, #276]	; (8011db0 <ip_reass_free_complete_datagram+0x130>)
 8011c9c:	4845      	ldr	r0, [pc, #276]	; (8011db4 <ip_reass_free_complete_datagram+0x134>)
 8011c9e:	f00a fc11 	bl	801c4c4 <iprintf>
  if (prev != NULL) {
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d00a      	beq.n	8011cbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d005      	beq.n	8011cbe <ip_reass_free_complete_datagram+0x3e>
 8011cb2:	4b3e      	ldr	r3, [pc, #248]	; (8011dac <ip_reass_free_complete_datagram+0x12c>)
 8011cb4:	22ad      	movs	r2, #173	; 0xad
 8011cb6:	4940      	ldr	r1, [pc, #256]	; (8011db8 <ip_reass_free_complete_datagram+0x138>)
 8011cb8:	483e      	ldr	r0, [pc, #248]	; (8011db4 <ip_reass_free_complete_datagram+0x134>)
 8011cba:	f00a fc03 	bl	801c4c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	889b      	ldrh	r3, [r3, #4]
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d12a      	bne.n	8011d26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	6858      	ldr	r0, [r3, #4]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	3308      	adds	r3, #8
 8011ce6:	2214      	movs	r2, #20
 8011ce8:	4619      	mov	r1, r3
 8011cea:	f009 ff79 	bl	801bbe0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011cee:	2101      	movs	r1, #1
 8011cf0:	69b8      	ldr	r0, [r7, #24]
 8011cf2:	f7ff fb4b 	bl	801138c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011cf6:	69b8      	ldr	r0, [r7, #24]
 8011cf8:	f002 fac0 	bl	801427c <pbuf_clen>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d00:	8bfa      	ldrh	r2, [r7, #30]
 8011d02:	8a7b      	ldrh	r3, [r7, #18]
 8011d04:	4413      	add	r3, r2
 8011d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d0a:	db05      	blt.n	8011d18 <ip_reass_free_complete_datagram+0x98>
 8011d0c:	4b27      	ldr	r3, [pc, #156]	; (8011dac <ip_reass_free_complete_datagram+0x12c>)
 8011d0e:	22bc      	movs	r2, #188	; 0xbc
 8011d10:	492a      	ldr	r1, [pc, #168]	; (8011dbc <ip_reass_free_complete_datagram+0x13c>)
 8011d12:	4828      	ldr	r0, [pc, #160]	; (8011db4 <ip_reass_free_complete_datagram+0x134>)
 8011d14:	f00a fbd6 	bl	801c4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d18:	8bfa      	ldrh	r2, [r7, #30]
 8011d1a:	8a7b      	ldrh	r3, [r7, #18]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011d20:	69b8      	ldr	r0, [r7, #24]
 8011d22:	f002 fa1d 	bl	8014160 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011d2c:	e01f      	b.n	8011d6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011d3e:	68f8      	ldr	r0, [r7, #12]
 8011d40:	f002 fa9c 	bl	801427c <pbuf_clen>
 8011d44:	4603      	mov	r3, r0
 8011d46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d48:	8bfa      	ldrh	r2, [r7, #30]
 8011d4a:	8a7b      	ldrh	r3, [r7, #18]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d52:	db05      	blt.n	8011d60 <ip_reass_free_complete_datagram+0xe0>
 8011d54:	4b15      	ldr	r3, [pc, #84]	; (8011dac <ip_reass_free_complete_datagram+0x12c>)
 8011d56:	22cc      	movs	r2, #204	; 0xcc
 8011d58:	4918      	ldr	r1, [pc, #96]	; (8011dbc <ip_reass_free_complete_datagram+0x13c>)
 8011d5a:	4816      	ldr	r0, [pc, #88]	; (8011db4 <ip_reass_free_complete_datagram+0x134>)
 8011d5c:	f00a fbb2 	bl	801c4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d60:	8bfa      	ldrh	r2, [r7, #30]
 8011d62:	8a7b      	ldrh	r3, [r7, #18]
 8011d64:	4413      	add	r3, r2
 8011d66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f002 f9f9 	bl	8014160 <pbuf_free>
  while (p != NULL) {
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1dc      	bne.n	8011d2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 f8c2 	bl	8011f00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011d7c:	4b10      	ldr	r3, [pc, #64]	; (8011dc0 <ip_reass_free_complete_datagram+0x140>)
 8011d7e:	881b      	ldrh	r3, [r3, #0]
 8011d80:	8bfa      	ldrh	r2, [r7, #30]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d905      	bls.n	8011d92 <ip_reass_free_complete_datagram+0x112>
 8011d86:	4b09      	ldr	r3, [pc, #36]	; (8011dac <ip_reass_free_complete_datagram+0x12c>)
 8011d88:	22d2      	movs	r2, #210	; 0xd2
 8011d8a:	490e      	ldr	r1, [pc, #56]	; (8011dc4 <ip_reass_free_complete_datagram+0x144>)
 8011d8c:	4809      	ldr	r0, [pc, #36]	; (8011db4 <ip_reass_free_complete_datagram+0x134>)
 8011d8e:	f00a fb99 	bl	801c4c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011d92:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <ip_reass_free_complete_datagram+0x140>)
 8011d94:	881a      	ldrh	r2, [r3, #0]
 8011d96:	8bfb      	ldrh	r3, [r7, #30]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	4b08      	ldr	r3, [pc, #32]	; (8011dc0 <ip_reass_free_complete_datagram+0x140>)
 8011d9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011da0:	8bfb      	ldrh	r3, [r7, #30]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3720      	adds	r7, #32
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	080208fc 	.word	0x080208fc
 8011db0:	08020954 	.word	0x08020954
 8011db4:	08020960 	.word	0x08020960
 8011db8:	08020988 	.word	0x08020988
 8011dbc:	0802099c 	.word	0x0802099c
 8011dc0:	24004840 	.word	0x24004840
 8011dc4:	080209bc 	.word	0x080209bc

08011dc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b08a      	sub	sp, #40	; 0x28
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011dde:	2300      	movs	r3, #0
 8011de0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011de6:	4b28      	ldr	r3, [pc, #160]	; (8011e88 <ip_reass_remove_oldest_datagram+0xc0>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011dec:	e030      	b.n	8011e50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	695a      	ldr	r2, [r3, #20]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d10c      	bne.n	8011e14 <ip_reass_remove_oldest_datagram+0x4c>
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	699a      	ldr	r2, [r3, #24]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	691b      	ldr	r3, [r3, #16]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d106      	bne.n	8011e14 <ip_reass_remove_oldest_datagram+0x4c>
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	899a      	ldrh	r2, [r3, #12]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	889b      	ldrh	r3, [r3, #4]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d014      	beq.n	8011e3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	3301      	adds	r3, #1
 8011e18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d104      	bne.n	8011e2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	61bb      	str	r3, [r7, #24]
 8011e28:	e009      	b.n	8011e3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2c:	7fda      	ldrb	r2, [r3, #31]
 8011e2e:	6a3b      	ldr	r3, [r7, #32]
 8011e30:	7fdb      	ldrb	r3, [r3, #31]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d803      	bhi.n	8011e3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d001      	beq.n	8011e4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1cb      	bne.n	8011dee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011e56:	6a3b      	ldr	r3, [r7, #32]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d008      	beq.n	8011e6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011e5c:	69b9      	ldr	r1, [r7, #24]
 8011e5e:	6a38      	ldr	r0, [r7, #32]
 8011e60:	f7ff ff0e 	bl	8011c80 <ip_reass_free_complete_datagram>
 8011e64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011e66:	697a      	ldr	r2, [r7, #20]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011e6e:	697a      	ldr	r2, [r7, #20]
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	da02      	bge.n	8011e7c <ip_reass_remove_oldest_datagram+0xb4>
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	dcac      	bgt.n	8011dd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011e7c:	697b      	ldr	r3, [r7, #20]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3728      	adds	r7, #40	; 0x28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	2400483c 	.word	0x2400483c

08011e8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e96:	2004      	movs	r0, #4
 8011e98:	f001 f9a2 	bl	80131e0 <memp_malloc>
 8011e9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d110      	bne.n	8011ec6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff ff8e 	bl	8011dc8 <ip_reass_remove_oldest_datagram>
 8011eac:	4602      	mov	r2, r0
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	dc03      	bgt.n	8011ebc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011eb4:	2004      	movs	r0, #4
 8011eb6:	f001 f993 	bl	80131e0 <memp_malloc>
 8011eba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	e016      	b.n	8011ef4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011ec6:	2220      	movs	r2, #32
 8011ec8:	2100      	movs	r1, #0
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f009 feb0 	bl	801bc30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	220f      	movs	r2, #15
 8011ed4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011ed6:	4b09      	ldr	r3, [pc, #36]	; (8011efc <ip_reass_enqueue_new_datagram+0x70>)
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011ede:	4a07      	ldr	r2, [pc, #28]	; (8011efc <ip_reass_enqueue_new_datagram+0x70>)
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	3308      	adds	r3, #8
 8011ee8:	2214      	movs	r2, #20
 8011eea:	6879      	ldr	r1, [r7, #4]
 8011eec:	4618      	mov	r0, r3
 8011eee:	f009 fe77 	bl	801bbe0 <memcpy>
  return ipr;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	2400483c 	.word	0x2400483c

08011f00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011f0a:	4b10      	ldr	r3, [pc, #64]	; (8011f4c <ip_reass_dequeue_datagram+0x4c>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	687a      	ldr	r2, [r7, #4]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d104      	bne.n	8011f1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a0c      	ldr	r2, [pc, #48]	; (8011f4c <ip_reass_dequeue_datagram+0x4c>)
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	e00d      	b.n	8011f3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d106      	bne.n	8011f32 <ip_reass_dequeue_datagram+0x32>
 8011f24:	4b0a      	ldr	r3, [pc, #40]	; (8011f50 <ip_reass_dequeue_datagram+0x50>)
 8011f26:	f240 1245 	movw	r2, #325	; 0x145
 8011f2a:	490a      	ldr	r1, [pc, #40]	; (8011f54 <ip_reass_dequeue_datagram+0x54>)
 8011f2c:	480a      	ldr	r0, [pc, #40]	; (8011f58 <ip_reass_dequeue_datagram+0x58>)
 8011f2e:	f00a fac9 	bl	801c4c4 <iprintf>
    prev->next = ipr->next;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011f3a:	6879      	ldr	r1, [r7, #4]
 8011f3c:	2004      	movs	r0, #4
 8011f3e:	f001 f9c5 	bl	80132cc <memp_free>
}
 8011f42:	bf00      	nop
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	2400483c 	.word	0x2400483c
 8011f50:	080208fc 	.word	0x080208fc
 8011f54:	080209e0 	.word	0x080209e0
 8011f58:	08020960 	.word	0x08020960

08011f5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08c      	sub	sp, #48	; 0x30
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	885b      	ldrh	r3, [r3, #2]
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fc f9a5 	bl	800e2cc <lwip_htons>
 8011f82:	4603      	mov	r3, r0
 8011f84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f003 030f 	and.w	r3, r3, #15
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011f94:	7e7b      	ldrb	r3, [r7, #25]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	8b7a      	ldrh	r2, [r7, #26]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d202      	bcs.n	8011fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa2:	e135      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011fa4:	7e7b      	ldrb	r3, [r7, #25]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	8b7a      	ldrh	r2, [r7, #26]
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	88db      	ldrh	r3, [r3, #6]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fc f989 	bl	800e2cc <lwip_htons>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	2200      	movs	r2, #0
 8011fd0:	701a      	strb	r2, [r3, #0]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	705a      	strb	r2, [r3, #1]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	709a      	strb	r2, [r3, #2]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe0:	8afa      	ldrh	r2, [r7, #22]
 8011fe2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011fe4:	8afa      	ldrh	r2, [r7, #22]
 8011fe6:	8b7b      	ldrh	r3, [r7, #26]
 8011fe8:	4413      	add	r3, r2
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	88db      	ldrh	r3, [r3, #6]
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	8afa      	ldrh	r2, [r7, #22]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d902      	bls.n	8012002 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8012000:	e106      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	627b      	str	r3, [r7, #36]	; 0x24
 8012008:	e068      	b.n	80120dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	889b      	ldrh	r3, [r3, #4]
 8012014:	b29a      	uxth	r2, r3
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	889b      	ldrh	r3, [r3, #4]
 801201a:	b29b      	uxth	r3, r3
 801201c:	429a      	cmp	r2, r3
 801201e:	d235      	bcs.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012024:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012028:	2b00      	cmp	r3, #0
 801202a:	d020      	beq.n	801206e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202e:	889b      	ldrh	r3, [r3, #4]
 8012030:	b29a      	uxth	r2, r3
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	88db      	ldrh	r3, [r3, #6]
 8012036:	b29b      	uxth	r3, r3
 8012038:	429a      	cmp	r2, r3
 801203a:	d307      	bcc.n	801204c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203e:	88db      	ldrh	r3, [r3, #6]
 8012040:	b29a      	uxth	r2, r3
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	889b      	ldrh	r3, [r3, #4]
 8012046:	b29b      	uxth	r3, r3
 8012048:	429a      	cmp	r2, r3
 801204a:	d902      	bls.n	8012052 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801204c:	f04f 33ff 	mov.w	r3, #4294967295
 8012050:	e0de      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205a:	88db      	ldrh	r3, [r3, #6]
 801205c:	b29a      	uxth	r2, r3
 801205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012060:	889b      	ldrh	r3, [r3, #4]
 8012062:	b29b      	uxth	r3, r3
 8012064:	429a      	cmp	r2, r3
 8012066:	d03d      	beq.n	80120e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801206c:	e03a      	b.n	80120e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012070:	88db      	ldrh	r3, [r3, #6]
 8012072:	b29a      	uxth	r2, r3
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	889b      	ldrh	r3, [r3, #4]
 8012078:	b29b      	uxth	r3, r3
 801207a:	429a      	cmp	r2, r3
 801207c:	d902      	bls.n	8012084 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801207e:	f04f 33ff 	mov.w	r3, #4294967295
 8012082:	e0c5      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	68ba      	ldr	r2, [r7, #8]
 8012088:	605a      	str	r2, [r3, #4]
      break;
 801208a:	e02b      	b.n	80120e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	889b      	ldrh	r3, [r3, #4]
 8012090:	b29a      	uxth	r2, r3
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	889b      	ldrh	r3, [r3, #4]
 8012096:	b29b      	uxth	r3, r3
 8012098:	429a      	cmp	r2, r3
 801209a:	d102      	bne.n	80120a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801209c:	f04f 33ff 	mov.w	r3, #4294967295
 80120a0:	e0b6      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	889b      	ldrh	r3, [r3, #4]
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	88db      	ldrh	r3, [r3, #6]
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d202      	bcs.n	80120b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120b2:	f04f 33ff 	mov.w	r3, #4294967295
 80120b6:	e0ab      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d009      	beq.n	80120d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80120be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c0:	88db      	ldrh	r3, [r3, #6]
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	889b      	ldrh	r3, [r3, #4]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d001      	beq.n	80120d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80120ce:	2300      	movs	r3, #0
 80120d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d193      	bne.n	801200a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80120e2:	e000      	b.n	80120e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80120e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80120e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d12d      	bne.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d01c      	beq.n	801212c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	88db      	ldrh	r3, [r3, #6]
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	889b      	ldrh	r3, [r3, #4]
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	429a      	cmp	r2, r3
 8012100:	d906      	bls.n	8012110 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012102:	4b45      	ldr	r3, [pc, #276]	; (8012218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012104:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012108:	4944      	ldr	r1, [pc, #272]	; (801221c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801210a:	4845      	ldr	r0, [pc, #276]	; (8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801210c:	f00a f9da 	bl	801c4c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	88db      	ldrh	r3, [r3, #6]
 801211a:	b29a      	uxth	r2, r3
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	889b      	ldrh	r3, [r3, #4]
 8012120:	b29b      	uxth	r3, r3
 8012122:	429a      	cmp	r2, r3
 8012124:	d010      	beq.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	623b      	str	r3, [r7, #32]
 801212a:	e00d      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d006      	beq.n	8012142 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012134:	4b38      	ldr	r3, [pc, #224]	; (8012218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012136:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801213a:	493a      	ldr	r1, [pc, #232]	; (8012224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801213c:	4838      	ldr	r0, [pc, #224]	; (8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801213e:	f00a f9c1 	bl	801c4c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d105      	bne.n	801215a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	7f9b      	ldrb	r3, [r3, #30]
 8012152:	f003 0301 	and.w	r3, r3, #1
 8012156:	2b00      	cmp	r3, #0
 8012158:	d059      	beq.n	801220e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801215a:	6a3b      	ldr	r3, [r7, #32]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d04f      	beq.n	8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d006      	beq.n	8012176 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	889b      	ldrh	r3, [r3, #4]
 8012170:	b29b      	uxth	r3, r3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d002      	beq.n	801217c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012176:	2300      	movs	r3, #0
 8012178:	623b      	str	r3, [r7, #32]
 801217a:	e041      	b.n	8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012186:	e012      	b.n	80121ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012190:	88db      	ldrh	r3, [r3, #6]
 8012192:	b29a      	uxth	r2, r3
 8012194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012196:	889b      	ldrh	r3, [r3, #4]
 8012198:	b29b      	uxth	r3, r3
 801219a:	429a      	cmp	r2, r3
 801219c:	d002      	beq.n	80121a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801219e:	2300      	movs	r3, #0
 80121a0:	623b      	str	r3, [r7, #32]
            break;
 80121a2:	e007      	b.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80121a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d1e9      	bne.n	8012188 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80121b4:	6a3b      	ldr	r3, [r7, #32]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d022      	beq.n	8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80121c2:	4b15      	ldr	r3, [pc, #84]	; (8012218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121c4:	f240 12df 	movw	r2, #479	; 0x1df
 80121c8:	4917      	ldr	r1, [pc, #92]	; (8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80121ca:	4815      	ldr	r0, [pc, #84]	; (8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121cc:	f00a f97a 	bl	801c4c4 <iprintf>
          LWIP_ASSERT("sanity check",
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d8:	429a      	cmp	r2, r3
 80121da:	d106      	bne.n	80121ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80121dc:	4b0e      	ldr	r3, [pc, #56]	; (8012218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80121e2:	4911      	ldr	r1, [pc, #68]	; (8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80121e4:	480e      	ldr	r0, [pc, #56]	; (8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121e6:	f00a f96d 	bl	801c4c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80121ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d006      	beq.n	8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80121f2:	4b09      	ldr	r3, [pc, #36]	; (8012218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80121f8:	490c      	ldr	r1, [pc, #48]	; (801222c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80121fa:	4809      	ldr	r0, [pc, #36]	; (8012220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121fc:	f00a f962 	bl	801c4c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012200:	6a3b      	ldr	r3, [r7, #32]
 8012202:	2b00      	cmp	r3, #0
 8012204:	bf14      	ite	ne
 8012206:	2301      	movne	r3, #1
 8012208:	2300      	moveq	r3, #0
 801220a:	b2db      	uxtb	r3, r3
 801220c:	e000      	b.n	8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801220e:	2300      	movs	r3, #0
}
 8012210:	4618      	mov	r0, r3
 8012212:	3730      	adds	r7, #48	; 0x30
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	080208fc 	.word	0x080208fc
 801221c:	080209fc 	.word	0x080209fc
 8012220:	08020960 	.word	0x08020960
 8012224:	08020a1c 	.word	0x08020a1c
 8012228:	08020a54 	.word	0x08020a54
 801222c:	08020a64 	.word	0x08020a64

08012230 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b08e      	sub	sp, #56	; 0x38
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	f003 030f 	and.w	r3, r3, #15
 8012246:	b2db      	uxtb	r3, r3
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	b2db      	uxtb	r3, r3
 801224c:	2b14      	cmp	r3, #20
 801224e:	f040 8171 	bne.w	8012534 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012254:	88db      	ldrh	r3, [r3, #6]
 8012256:	b29b      	uxth	r3, r3
 8012258:	4618      	mov	r0, r3
 801225a:	f7fc f837 	bl	800e2cc <lwip_htons>
 801225e:	4603      	mov	r3, r0
 8012260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012264:	b29b      	uxth	r3, r3
 8012266:	00db      	lsls	r3, r3, #3
 8012268:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226c:	885b      	ldrh	r3, [r3, #2]
 801226e:	b29b      	uxth	r3, r3
 8012270:	4618      	mov	r0, r3
 8012272:	f7fc f82b 	bl	800e2cc <lwip_htons>
 8012276:	4603      	mov	r3, r0
 8012278:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	f003 030f 	and.w	r3, r3, #15
 8012282:	b2db      	uxtb	r3, r3
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801228a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801228e:	b29b      	uxth	r3, r3
 8012290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012292:	429a      	cmp	r2, r3
 8012294:	f0c0 8150 	bcc.w	8012538 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801229c:	b29b      	uxth	r3, r3
 801229e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f001 ffe9 	bl	801427c <pbuf_clen>
 80122aa:	4603      	mov	r3, r0
 80122ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80122ae:	4b8c      	ldr	r3, [pc, #560]	; (80124e0 <ip4_reass+0x2b0>)
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	8c3b      	ldrh	r3, [r7, #32]
 80122b6:	4413      	add	r3, r2
 80122b8:	2b0a      	cmp	r3, #10
 80122ba:	dd10      	ble.n	80122de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80122bc:	8c3b      	ldrh	r3, [r7, #32]
 80122be:	4619      	mov	r1, r3
 80122c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122c2:	f7ff fd81 	bl	8011dc8 <ip_reass_remove_oldest_datagram>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8137 	beq.w	801253c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80122ce:	4b84      	ldr	r3, [pc, #528]	; (80124e0 <ip4_reass+0x2b0>)
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	8c3b      	ldrh	r3, [r7, #32]
 80122d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80122d8:	2b0a      	cmp	r3, #10
 80122da:	f300 812f 	bgt.w	801253c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80122de:	4b81      	ldr	r3, [pc, #516]	; (80124e4 <ip4_reass+0x2b4>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	633b      	str	r3, [r7, #48]	; 0x30
 80122e4:	e015      	b.n	8012312 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80122e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e8:	695a      	ldr	r2, [r3, #20]
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d10c      	bne.n	801230c <ip4_reass+0xdc>
 80122f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f4:	699a      	ldr	r2, [r3, #24]
 80122f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f8:	691b      	ldr	r3, [r3, #16]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d106      	bne.n	801230c <ip4_reass+0xdc>
 80122fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012300:	899a      	ldrh	r2, [r3, #12]
 8012302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012304:	889b      	ldrh	r3, [r3, #4]
 8012306:	b29b      	uxth	r3, r3
 8012308:	429a      	cmp	r2, r3
 801230a:	d006      	beq.n	801231a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	633b      	str	r3, [r7, #48]	; 0x30
 8012312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012314:	2b00      	cmp	r3, #0
 8012316:	d1e6      	bne.n	80122e6 <ip4_reass+0xb6>
 8012318:	e000      	b.n	801231c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801231a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231e:	2b00      	cmp	r3, #0
 8012320:	d109      	bne.n	8012336 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012322:	8c3b      	ldrh	r3, [r7, #32]
 8012324:	4619      	mov	r1, r3
 8012326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012328:	f7ff fdb0 	bl	8011e8c <ip_reass_enqueue_new_datagram>
 801232c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	2b00      	cmp	r3, #0
 8012332:	d11c      	bne.n	801236e <ip4_reass+0x13e>
      goto nullreturn;
 8012334:	e105      	b.n	8012542 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012338:	88db      	ldrh	r3, [r3, #6]
 801233a:	b29b      	uxth	r3, r3
 801233c:	4618      	mov	r0, r3
 801233e:	f7fb ffc5 	bl	800e2cc <lwip_htons>
 8012342:	4603      	mov	r3, r0
 8012344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012348:	2b00      	cmp	r3, #0
 801234a:	d110      	bne.n	801236e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234e:	89db      	ldrh	r3, [r3, #14]
 8012350:	4618      	mov	r0, r3
 8012352:	f7fb ffbb 	bl	800e2cc <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801235c:	2b00      	cmp	r3, #0
 801235e:	d006      	beq.n	801236e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012362:	3308      	adds	r3, #8
 8012364:	2214      	movs	r2, #20
 8012366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012368:	4618      	mov	r0, r3
 801236a:	f009 fc39 	bl	801bbe0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	88db      	ldrh	r3, [r3, #6]
 8012372:	b29b      	uxth	r3, r3
 8012374:	f003 0320 	and.w	r3, r3, #32
 8012378:	2b00      	cmp	r3, #0
 801237a:	bf0c      	ite	eq
 801237c:	2301      	moveq	r3, #1
 801237e:	2300      	movne	r3, #0
 8012380:	b2db      	uxtb	r3, r3
 8012382:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00e      	beq.n	80123a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801238a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801238c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801238e:	4413      	add	r3, r2
 8012390:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012392:	8b7a      	ldrh	r2, [r7, #26]
 8012394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012396:	429a      	cmp	r2, r3
 8012398:	f0c0 80a0 	bcc.w	80124dc <ip4_reass+0x2ac>
 801239c:	8b7b      	ldrh	r3, [r7, #26]
 801239e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80123a2:	4293      	cmp	r3, r2
 80123a4:	f200 809a 	bhi.w	80124dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80123a8:	69fa      	ldr	r2, [r7, #28]
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ae:	f7ff fdd5 	bl	8011f5c <ip_reass_chain_frag_into_datagram_and_validate>
 80123b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ba:	f000 809b 	beq.w	80124f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80123be:	4b48      	ldr	r3, [pc, #288]	; (80124e0 <ip4_reass+0x2b0>)
 80123c0:	881a      	ldrh	r2, [r3, #0]
 80123c2:	8c3b      	ldrh	r3, [r7, #32]
 80123c4:	4413      	add	r3, r2
 80123c6:	b29a      	uxth	r2, r3
 80123c8:	4b45      	ldr	r3, [pc, #276]	; (80124e0 <ip4_reass+0x2b0>)
 80123ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00d      	beq.n	80123ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80123d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123d6:	4413      	add	r3, r2
 80123d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	8a7a      	ldrh	r2, [r7, #18]
 80123de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80123e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e2:	7f9b      	ldrb	r3, [r3, #30]
 80123e4:	f043 0301 	orr.w	r3, r3, #1
 80123e8:	b2da      	uxtb	r2, r3
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d171      	bne.n	80124d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80123f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f6:	8b9b      	ldrh	r3, [r3, #28]
 80123f8:	3314      	adds	r3, #20
 80123fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80123fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	3308      	adds	r3, #8
 8012412:	2214      	movs	r2, #20
 8012414:	4619      	mov	r1, r3
 8012416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012418:	f009 fbe2 	bl	801bbe0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801241c:	8a3b      	ldrh	r3, [r7, #16]
 801241e:	4618      	mov	r0, r3
 8012420:	f7fb ff54 	bl	800e2cc <lwip_htons>
 8012424:	4603      	mov	r3, r0
 8012426:	461a      	mov	r2, r3
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	2200      	movs	r2, #0
 8012430:	719a      	strb	r2, [r3, #6]
 8012432:	2200      	movs	r2, #0
 8012434:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012438:	2200      	movs	r2, #0
 801243a:	729a      	strb	r2, [r3, #10]
 801243c:	2200      	movs	r2, #0
 801243e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012446:	e00d      	b.n	8012464 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801244e:	2114      	movs	r1, #20
 8012450:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012452:	f001 fdff 	bl	8014054 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f001 ff4f 	bl	80142fc <pbuf_cat>
      r = iprh->next_pbuf;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1ee      	bne.n	8012448 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801246a:	4b1e      	ldr	r3, [pc, #120]	; (80124e4 <ip4_reass+0x2b4>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012470:	429a      	cmp	r2, r3
 8012472:	d102      	bne.n	801247a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012474:	2300      	movs	r3, #0
 8012476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012478:	e010      	b.n	801249c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801247a:	4b1a      	ldr	r3, [pc, #104]	; (80124e4 <ip4_reass+0x2b4>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012480:	e007      	b.n	8012492 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012488:	429a      	cmp	r2, r3
 801248a:	d006      	beq.n	801249a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1f4      	bne.n	8012482 <ip4_reass+0x252>
 8012498:	e000      	b.n	801249c <ip4_reass+0x26c>
          break;
 801249a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801249c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801249e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124a0:	f7ff fd2e 	bl	8011f00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f001 fee9 	bl	801427c <pbuf_clen>
 80124aa:	4603      	mov	r3, r0
 80124ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80124ae:	4b0c      	ldr	r3, [pc, #48]	; (80124e0 <ip4_reass+0x2b0>)
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	8c3a      	ldrh	r2, [r7, #32]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d906      	bls.n	80124c6 <ip4_reass+0x296>
 80124b8:	4b0b      	ldr	r3, [pc, #44]	; (80124e8 <ip4_reass+0x2b8>)
 80124ba:	f240 229b 	movw	r2, #667	; 0x29b
 80124be:	490b      	ldr	r1, [pc, #44]	; (80124ec <ip4_reass+0x2bc>)
 80124c0:	480b      	ldr	r0, [pc, #44]	; (80124f0 <ip4_reass+0x2c0>)
 80124c2:	f009 ffff 	bl	801c4c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80124c6:	4b06      	ldr	r3, [pc, #24]	; (80124e0 <ip4_reass+0x2b0>)
 80124c8:	881a      	ldrh	r2, [r3, #0]
 80124ca:	8c3b      	ldrh	r3, [r7, #32]
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	4b03      	ldr	r3, [pc, #12]	; (80124e0 <ip4_reass+0x2b0>)
 80124d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	e038      	b.n	801254a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80124d8:	2300      	movs	r3, #0
 80124da:	e036      	b.n	801254a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80124dc:	bf00      	nop
 80124de:	e00a      	b.n	80124f6 <ip4_reass+0x2c6>
 80124e0:	24004840 	.word	0x24004840
 80124e4:	2400483c 	.word	0x2400483c
 80124e8:	080208fc 	.word	0x080208fc
 80124ec:	08020a88 	.word	0x08020a88
 80124f0:	08020960 	.word	0x08020960
    goto nullreturn_ipr;
 80124f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80124f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d106      	bne.n	801250a <ip4_reass+0x2da>
 80124fc:	4b15      	ldr	r3, [pc, #84]	; (8012554 <ip4_reass+0x324>)
 80124fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012502:	4915      	ldr	r1, [pc, #84]	; (8012558 <ip4_reass+0x328>)
 8012504:	4815      	ldr	r0, [pc, #84]	; (801255c <ip4_reass+0x32c>)
 8012506:	f009 ffdd 	bl	801c4c4 <iprintf>
  if (ipr->p == NULL) {
 801250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d116      	bne.n	8012540 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012512:	4b13      	ldr	r3, [pc, #76]	; (8012560 <ip4_reass+0x330>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012518:	429a      	cmp	r2, r3
 801251a:	d006      	beq.n	801252a <ip4_reass+0x2fa>
 801251c:	4b0d      	ldr	r3, [pc, #52]	; (8012554 <ip4_reass+0x324>)
 801251e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012522:	4910      	ldr	r1, [pc, #64]	; (8012564 <ip4_reass+0x334>)
 8012524:	480d      	ldr	r0, [pc, #52]	; (801255c <ip4_reass+0x32c>)
 8012526:	f009 ffcd 	bl	801c4c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801252a:	2100      	movs	r1, #0
 801252c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801252e:	f7ff fce7 	bl	8011f00 <ip_reass_dequeue_datagram>
 8012532:	e006      	b.n	8012542 <ip4_reass+0x312>
    goto nullreturn;
 8012534:	bf00      	nop
 8012536:	e004      	b.n	8012542 <ip4_reass+0x312>
    goto nullreturn;
 8012538:	bf00      	nop
 801253a:	e002      	b.n	8012542 <ip4_reass+0x312>
      goto nullreturn;
 801253c:	bf00      	nop
 801253e:	e000      	b.n	8012542 <ip4_reass+0x312>
  }

nullreturn:
 8012540:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f001 fe0c 	bl	8014160 <pbuf_free>
  return NULL;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3738      	adds	r7, #56	; 0x38
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	080208fc 	.word	0x080208fc
 8012558:	08020aa4 	.word	0x08020aa4
 801255c:	08020960 	.word	0x08020960
 8012560:	2400483c 	.word	0x2400483c
 8012564:	08020ab0 	.word	0x08020ab0

08012568 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801256c:	2005      	movs	r0, #5
 801256e:	f000 fe37 	bl	80131e0 <memp_malloc>
 8012572:	4603      	mov	r3, r0
}
 8012574:	4618      	mov	r0, r3
 8012576:	bd80      	pop	{r7, pc}

08012578 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d106      	bne.n	8012594 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012586:	4b07      	ldr	r3, [pc, #28]	; (80125a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012588:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801258c:	4906      	ldr	r1, [pc, #24]	; (80125a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801258e:	4807      	ldr	r0, [pc, #28]	; (80125ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8012590:	f009 ff98 	bl	801c4c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	2005      	movs	r0, #5
 8012598:	f000 fe98 	bl	80132cc <memp_free>
}
 801259c:	bf00      	nop
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	080208fc 	.word	0x080208fc
 80125a8:	08020ad0 	.word	0x08020ad0
 80125ac:	08020960 	.word	0x08020960

080125b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d106      	bne.n	80125d0 <ipfrag_free_pbuf_custom+0x20>
 80125c2:	4b11      	ldr	r3, [pc, #68]	; (8012608 <ipfrag_free_pbuf_custom+0x58>)
 80125c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80125c8:	4910      	ldr	r1, [pc, #64]	; (801260c <ipfrag_free_pbuf_custom+0x5c>)
 80125ca:	4811      	ldr	r0, [pc, #68]	; (8012610 <ipfrag_free_pbuf_custom+0x60>)
 80125cc:	f009 ff7a 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d006      	beq.n	80125e6 <ipfrag_free_pbuf_custom+0x36>
 80125d8:	4b0b      	ldr	r3, [pc, #44]	; (8012608 <ipfrag_free_pbuf_custom+0x58>)
 80125da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80125de:	490d      	ldr	r1, [pc, #52]	; (8012614 <ipfrag_free_pbuf_custom+0x64>)
 80125e0:	480b      	ldr	r0, [pc, #44]	; (8012610 <ipfrag_free_pbuf_custom+0x60>)
 80125e2:	f009 ff6f 	bl	801c4c4 <iprintf>
  if (pcr->original != NULL) {
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d004      	beq.n	80125f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	695b      	ldr	r3, [r3, #20]
 80125f2:	4618      	mov	r0, r3
 80125f4:	f001 fdb4 	bl	8014160 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f7ff ffbd 	bl	8012578 <ip_frag_free_pbuf_custom_ref>
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	080208fc 	.word	0x080208fc
 801260c:	08020adc 	.word	0x08020adc
 8012610:	08020960 	.word	0x08020960
 8012614:	08020ae8 	.word	0x08020ae8

08012618 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b094      	sub	sp, #80	; 0x50
 801261c:	af02      	add	r7, sp, #8
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012624:	2300      	movs	r3, #0
 8012626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801262e:	3b14      	subs	r3, #20
 8012630:	2b00      	cmp	r3, #0
 8012632:	da00      	bge.n	8012636 <ip4_frag+0x1e>
 8012634:	3307      	adds	r3, #7
 8012636:	10db      	asrs	r3, r3, #3
 8012638:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801263a:	2314      	movs	r3, #20
 801263c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012646:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	f003 030f 	and.w	r3, r3, #15
 8012650:	b2db      	uxtb	r3, r3
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b14      	cmp	r3, #20
 8012658:	d002      	beq.n	8012660 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801265a:	f06f 0305 	mvn.w	r3, #5
 801265e:	e110      	b.n	8012882 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	895b      	ldrh	r3, [r3, #10]
 8012664:	2b13      	cmp	r3, #19
 8012666:	d809      	bhi.n	801267c <ip4_frag+0x64>
 8012668:	4b88      	ldr	r3, [pc, #544]	; (801288c <ip4_frag+0x274>)
 801266a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801266e:	4988      	ldr	r1, [pc, #544]	; (8012890 <ip4_frag+0x278>)
 8012670:	4888      	ldr	r0, [pc, #544]	; (8012894 <ip4_frag+0x27c>)
 8012672:	f009 ff27 	bl	801c4c4 <iprintf>
 8012676:	f06f 0305 	mvn.w	r3, #5
 801267a:	e102      	b.n	8012882 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267e:	88db      	ldrh	r3, [r3, #6]
 8012680:	b29b      	uxth	r3, r3
 8012682:	4618      	mov	r0, r3
 8012684:	f7fb fe22 	bl	800e2cc <lwip_htons>
 8012688:	4603      	mov	r3, r0
 801268a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801268c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801268e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012692:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012696:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801269c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	891b      	ldrh	r3, [r3, #8]
 80126a2:	3b14      	subs	r3, #20
 80126a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80126a8:	e0e1      	b.n	801286e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80126aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126ac:	00db      	lsls	r3, r3, #3
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126b4:	4293      	cmp	r3, r2
 80126b6:	bf28      	it	cs
 80126b8:	4613      	movcs	r3, r2
 80126ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80126bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126c0:	2114      	movs	r1, #20
 80126c2:	200e      	movs	r0, #14
 80126c4:	f001 fa68 	bl	8013b98 <pbuf_alloc>
 80126c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 80d5 	beq.w	801287c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80126d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d4:	895b      	ldrh	r3, [r3, #10]
 80126d6:	2b13      	cmp	r3, #19
 80126d8:	d806      	bhi.n	80126e8 <ip4_frag+0xd0>
 80126da:	4b6c      	ldr	r3, [pc, #432]	; (801288c <ip4_frag+0x274>)
 80126dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80126e0:	496d      	ldr	r1, [pc, #436]	; (8012898 <ip4_frag+0x280>)
 80126e2:	486c      	ldr	r0, [pc, #432]	; (8012894 <ip4_frag+0x27c>)
 80126e4:	f009 feee 	bl	801c4c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	2214      	movs	r2, #20
 80126ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126f0:	4618      	mov	r0, r3
 80126f2:	f009 fa75 	bl	801bbe0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80126fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012702:	e064      	b.n	80127ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	895a      	ldrh	r2, [r3, #10]
 8012708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	895b      	ldrh	r3, [r3, #10]
 8012712:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012714:	429a      	cmp	r2, r3
 8012716:	d906      	bls.n	8012726 <ip4_frag+0x10e>
 8012718:	4b5c      	ldr	r3, [pc, #368]	; (801288c <ip4_frag+0x274>)
 801271a:	f240 322d 	movw	r2, #813	; 0x32d
 801271e:	495f      	ldr	r1, [pc, #380]	; (801289c <ip4_frag+0x284>)
 8012720:	485c      	ldr	r0, [pc, #368]	; (8012894 <ip4_frag+0x27c>)
 8012722:	f009 fecf 	bl	801c4c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012726:	8bfa      	ldrh	r2, [r7, #30]
 8012728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801272c:	4293      	cmp	r3, r2
 801272e:	bf28      	it	cs
 8012730:	4613      	movcs	r3, r2
 8012732:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801273a:	2b00      	cmp	r3, #0
 801273c:	d105      	bne.n	801274a <ip4_frag+0x132>
        poff = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	60fb      	str	r3, [r7, #12]
        continue;
 8012748:	e041      	b.n	80127ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801274a:	f7ff ff0d 	bl	8012568 <ip_frag_alloc_pbuf_custom_ref>
 801274e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d103      	bne.n	801275e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012758:	f001 fd02 	bl	8014160 <pbuf_free>
        goto memerr;
 801275c:	e08f      	b.n	801287e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801275e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012764:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012766:	4413      	add	r3, r2
 8012768:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801276c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012770:	9201      	str	r2, [sp, #4]
 8012772:	9300      	str	r3, [sp, #0]
 8012774:	4603      	mov	r3, r0
 8012776:	2241      	movs	r2, #65	; 0x41
 8012778:	2000      	movs	r0, #0
 801277a:	f001 fb37 	bl	8013dec <pbuf_alloced_custom>
 801277e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012786:	69b8      	ldr	r0, [r7, #24]
 8012788:	f7ff fef6 	bl	8012578 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801278c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801278e:	f001 fce7 	bl	8014160 <pbuf_free>
        goto memerr;
 8012792:	e074      	b.n	801287e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	f001 fd89 	bl	80142ac <pbuf_ref>
      pcr->original = p;
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	4a3f      	ldr	r2, [pc, #252]	; (80128a0 <ip4_frag+0x288>)
 80127a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80127a6:	6979      	ldr	r1, [r7, #20]
 80127a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127aa:	f001 fda7 	bl	80142fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80127ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80127b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80127bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d004      	beq.n	80127ce <ip4_frag+0x1b6>
        poff = 0;
 80127c4:	2300      	movs	r3, #0
 80127c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80127ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d196      	bne.n	8012704 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80127d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127dc:	4413      	add	r3, r2
 80127de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127e4:	f1a3 0213 	sub.w	r2, r3, #19
 80127e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ec:	429a      	cmp	r2, r3
 80127ee:	bfcc      	ite	gt
 80127f0:	2301      	movgt	r3, #1
 80127f2:	2300      	movle	r3, #0
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80127f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80127fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012800:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012802:	6a3b      	ldr	r3, [r7, #32]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <ip4_frag+0x1f6>
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	2b00      	cmp	r3, #0
 801280c:	d003      	beq.n	8012816 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801280e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012814:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012816:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012818:	4618      	mov	r0, r3
 801281a:	f7fb fd57 	bl	800e2cc <lwip_htons>
 801281e:	4603      	mov	r3, r0
 8012820:	461a      	mov	r2, r3
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012828:	3314      	adds	r3, #20
 801282a:	b29b      	uxth	r3, r3
 801282c:	4618      	mov	r0, r3
 801282e:	f7fb fd4d 	bl	800e2cc <lwip_htons>
 8012832:	4603      	mov	r3, r0
 8012834:	461a      	mov	r2, r3
 8012836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012838:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283c:	2200      	movs	r2, #0
 801283e:	729a      	strb	r2, [r3, #10]
 8012840:	2200      	movs	r2, #0
 8012842:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	695b      	ldr	r3, [r3, #20]
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801284c:	68b8      	ldr	r0, [r7, #8]
 801284e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012852:	f001 fc85 	bl	8014160 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801285a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012862:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012866:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012868:	4413      	add	r3, r2
 801286a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801286e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012872:	2b00      	cmp	r3, #0
 8012874:	f47f af19 	bne.w	80126aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012878:	2300      	movs	r3, #0
 801287a:	e002      	b.n	8012882 <ip4_frag+0x26a>
      goto memerr;
 801287c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801287e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012882:	4618      	mov	r0, r3
 8012884:	3748      	adds	r7, #72	; 0x48
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	080208fc 	.word	0x080208fc
 8012890:	08020af4 	.word	0x08020af4
 8012894:	08020960 	.word	0x08020960
 8012898:	08020b10 	.word	0x08020b10
 801289c:	08020b30 	.word	0x08020b30
 80128a0:	080125b1 	.word	0x080125b1

080128a4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	4603      	mov	r3, r0
 80128ac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80128ae:	4b05      	ldr	r3, [pc, #20]	; (80128c4 <ptr_to_mem+0x20>)
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	88fb      	ldrh	r3, [r7, #6]
 80128b4:	4413      	add	r3, r2
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	370c      	adds	r7, #12
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	24004844 	.word	0x24004844

080128c8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80128d0:	4b05      	ldr	r3, [pc, #20]	; (80128e8 <mem_to_ptr+0x20>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	b29b      	uxth	r3, r3
}
 80128da:	4618      	mov	r0, r3
 80128dc:	370c      	adds	r7, #12
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	24004844 	.word	0x24004844

080128ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80128ec:	b590      	push	{r4, r7, lr}
 80128ee:	b085      	sub	sp, #20
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80128f4:	4b47      	ldr	r3, [pc, #284]	; (8012a14 <plug_holes+0x128>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d206      	bcs.n	801290c <plug_holes+0x20>
 80128fe:	4b46      	ldr	r3, [pc, #280]	; (8012a18 <plug_holes+0x12c>)
 8012900:	f240 12df 	movw	r2, #479	; 0x1df
 8012904:	4945      	ldr	r1, [pc, #276]	; (8012a1c <plug_holes+0x130>)
 8012906:	4846      	ldr	r0, [pc, #280]	; (8012a20 <plug_holes+0x134>)
 8012908:	f009 fddc 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801290c:	4b45      	ldr	r3, [pc, #276]	; (8012a24 <plug_holes+0x138>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	429a      	cmp	r2, r3
 8012914:	d306      	bcc.n	8012924 <plug_holes+0x38>
 8012916:	4b40      	ldr	r3, [pc, #256]	; (8012a18 <plug_holes+0x12c>)
 8012918:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801291c:	4942      	ldr	r1, [pc, #264]	; (8012a28 <plug_holes+0x13c>)
 801291e:	4840      	ldr	r0, [pc, #256]	; (8012a20 <plug_holes+0x134>)
 8012920:	f009 fdd0 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	791b      	ldrb	r3, [r3, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d006      	beq.n	801293a <plug_holes+0x4e>
 801292c:	4b3a      	ldr	r3, [pc, #232]	; (8012a18 <plug_holes+0x12c>)
 801292e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012932:	493e      	ldr	r1, [pc, #248]	; (8012a2c <plug_holes+0x140>)
 8012934:	483a      	ldr	r0, [pc, #232]	; (8012a20 <plug_holes+0x134>)
 8012936:	f009 fdc5 	bl	801c4c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012942:	4293      	cmp	r3, r2
 8012944:	d906      	bls.n	8012954 <plug_holes+0x68>
 8012946:	4b34      	ldr	r3, [pc, #208]	; (8012a18 <plug_holes+0x12c>)
 8012948:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801294c:	4938      	ldr	r1, [pc, #224]	; (8012a30 <plug_holes+0x144>)
 801294e:	4834      	ldr	r0, [pc, #208]	; (8012a20 <plug_holes+0x134>)
 8012950:	f009 fdb8 	bl	801c4c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	881b      	ldrh	r3, [r3, #0]
 8012958:	4618      	mov	r0, r3
 801295a:	f7ff ffa3 	bl	80128a4 <ptr_to_mem>
 801295e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	429a      	cmp	r2, r3
 8012966:	d025      	beq.n	80129b4 <plug_holes+0xc8>
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	791b      	ldrb	r3, [r3, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d121      	bne.n	80129b4 <plug_holes+0xc8>
 8012970:	4b2c      	ldr	r3, [pc, #176]	; (8012a24 <plug_holes+0x138>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	429a      	cmp	r2, r3
 8012978:	d01c      	beq.n	80129b4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801297a:	4b2e      	ldr	r3, [pc, #184]	; (8012a34 <plug_holes+0x148>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	429a      	cmp	r2, r3
 8012982:	d102      	bne.n	801298a <plug_holes+0x9e>
      lfree = mem;
 8012984:	4a2b      	ldr	r2, [pc, #172]	; (8012a34 <plug_holes+0x148>)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	881a      	ldrh	r2, [r3, #0]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801299a:	4293      	cmp	r3, r2
 801299c:	d00a      	beq.n	80129b4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7ff ff7e 	bl	80128a4 <ptr_to_mem>
 80129a8:	4604      	mov	r4, r0
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ff ff8c 	bl	80128c8 <mem_to_ptr>
 80129b0:	4603      	mov	r3, r0
 80129b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	885b      	ldrh	r3, [r3, #2]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff ff73 	bl	80128a4 <ptr_to_mem>
 80129be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d020      	beq.n	8012a0a <plug_holes+0x11e>
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	791b      	ldrb	r3, [r3, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d11c      	bne.n	8012a0a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80129d0:	4b18      	ldr	r3, [pc, #96]	; (8012a34 <plug_holes+0x148>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d102      	bne.n	80129e0 <plug_holes+0xf4>
      lfree = pmem;
 80129da:	4a16      	ldr	r2, [pc, #88]	; (8012a34 <plug_holes+0x148>)
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	881a      	ldrh	r2, [r3, #0]
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	881b      	ldrh	r3, [r3, #0]
 80129ec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d00a      	beq.n	8012a0a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	881b      	ldrh	r3, [r3, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff ff53 	bl	80128a4 <ptr_to_mem>
 80129fe:	4604      	mov	r4, r0
 8012a00:	68b8      	ldr	r0, [r7, #8]
 8012a02:	f7ff ff61 	bl	80128c8 <mem_to_ptr>
 8012a06:	4603      	mov	r3, r0
 8012a08:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012a0a:	bf00      	nop
 8012a0c:	3714      	adds	r7, #20
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd90      	pop	{r4, r7, pc}
 8012a12:	bf00      	nop
 8012a14:	24004844 	.word	0x24004844
 8012a18:	08020b40 	.word	0x08020b40
 8012a1c:	08020b90 	.word	0x08020b90
 8012a20:	08020ba8 	.word	0x08020ba8
 8012a24:	24004848 	.word	0x24004848
 8012a28:	08020bd0 	.word	0x08020bd0
 8012a2c:	08020bec 	.word	0x08020bec
 8012a30:	08020c08 	.word	0x08020c08
 8012a34:	24004850 	.word	0x24004850

08012a38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012a3e:	4b1d      	ldr	r3, [pc, #116]	; (8012ab4 <mem_init+0x7c>)
 8012a40:	4a1d      	ldr	r2, [pc, #116]	; (8012ab8 <mem_init+0x80>)
 8012a42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012a44:	4b1b      	ldr	r3, [pc, #108]	; (8012ab4 <mem_init+0x7c>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2200      	movs	r2, #0
 8012a56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012a5e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8012a62:	f7ff ff1f 	bl	80128a4 <ptr_to_mem>
 8012a66:	4603      	mov	r3, r0
 8012a68:	4a14      	ldr	r2, [pc, #80]	; (8012abc <mem_init+0x84>)
 8012a6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012a6c:	4b13      	ldr	r3, [pc, #76]	; (8012abc <mem_init+0x84>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2201      	movs	r2, #1
 8012a72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012a74:	4b11      	ldr	r3, [pc, #68]	; (8012abc <mem_init+0x84>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012a7e:	4b0f      	ldr	r3, [pc, #60]	; (8012abc <mem_init+0x84>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012a88:	4b0a      	ldr	r3, [pc, #40]	; (8012ab4 <mem_init+0x7c>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	4a0c      	ldr	r2, [pc, #48]	; (8012ac0 <mem_init+0x88>)
 8012a8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012a90:	480c      	ldr	r0, [pc, #48]	; (8012ac4 <mem_init+0x8c>)
 8012a92:	f001 ff75 	bl	8014980 <sys_mutex_new>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d006      	beq.n	8012aaa <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <mem_init+0x90>)
 8012a9e:	f240 221f 	movw	r2, #543	; 0x21f
 8012aa2:	490a      	ldr	r1, [pc, #40]	; (8012acc <mem_init+0x94>)
 8012aa4:	480a      	ldr	r0, [pc, #40]	; (8012ad0 <mem_init+0x98>)
 8012aa6:	f009 fd0d 	bl	801c4c4 <iprintf>
  }
}
 8012aaa:	bf00      	nop
 8012aac:	3708      	adds	r7, #8
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	24004844 	.word	0x24004844
 8012ab8:	30044000 	.word	0x30044000
 8012abc:	24004848 	.word	0x24004848
 8012ac0:	24004850 	.word	0x24004850
 8012ac4:	2400484c 	.word	0x2400484c
 8012ac8:	08020b40 	.word	0x08020b40
 8012acc:	08020c34 	.word	0x08020c34
 8012ad0:	08020ba8 	.word	0x08020ba8

08012ad4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff fef3 	bl	80128c8 <mem_to_ptr>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff feda 	bl	80128a4 <ptr_to_mem>
 8012af0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	885b      	ldrh	r3, [r3, #2]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7ff fed4 	bl	80128a4 <ptr_to_mem>
 8012afc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	881b      	ldrh	r3, [r3, #0]
 8012b02:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d819      	bhi.n	8012b3e <mem_link_valid+0x6a>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	885b      	ldrh	r3, [r3, #2]
 8012b0e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d813      	bhi.n	8012b3e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012b1a:	8afa      	ldrh	r2, [r7, #22]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d004      	beq.n	8012b2a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	8afa      	ldrh	r2, [r7, #22]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d109      	bne.n	8012b3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012b2a:	4b08      	ldr	r3, [pc, #32]	; (8012b4c <mem_link_valid+0x78>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012b2e:	693a      	ldr	r2, [r7, #16]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d006      	beq.n	8012b42 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	885b      	ldrh	r3, [r3, #2]
 8012b38:	8afa      	ldrh	r2, [r7, #22]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d001      	beq.n	8012b42 <mem_link_valid+0x6e>
    return 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e000      	b.n	8012b44 <mem_link_valid+0x70>
  }
  return 1;
 8012b42:	2301      	movs	r3, #1
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3718      	adds	r7, #24
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	24004848 	.word	0x24004848

08012b50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b088      	sub	sp, #32
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d070      	beq.n	8012c40 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f003 0303 	and.w	r3, r3, #3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d00d      	beq.n	8012b84 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012b68:	4b37      	ldr	r3, [pc, #220]	; (8012c48 <mem_free+0xf8>)
 8012b6a:	f240 2273 	movw	r2, #627	; 0x273
 8012b6e:	4937      	ldr	r1, [pc, #220]	; (8012c4c <mem_free+0xfc>)
 8012b70:	4837      	ldr	r0, [pc, #220]	; (8012c50 <mem_free+0x100>)
 8012b72:	f009 fca7 	bl	801c4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012b76:	f001 ff61 	bl	8014a3c <sys_arch_protect>
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f001 ff6b 	bl	8014a58 <sys_arch_unprotect>
    return;
 8012b82:	e05e      	b.n	8012c42 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	3b08      	subs	r3, #8
 8012b88:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012b8a:	4b32      	ldr	r3, [pc, #200]	; (8012c54 <mem_free+0x104>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	69fa      	ldr	r2, [r7, #28]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d306      	bcc.n	8012ba2 <mem_free+0x52>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f103 020c 	add.w	r2, r3, #12
 8012b9a:	4b2f      	ldr	r3, [pc, #188]	; (8012c58 <mem_free+0x108>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d90d      	bls.n	8012bbe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012ba2:	4b29      	ldr	r3, [pc, #164]	; (8012c48 <mem_free+0xf8>)
 8012ba4:	f240 227f 	movw	r2, #639	; 0x27f
 8012ba8:	492c      	ldr	r1, [pc, #176]	; (8012c5c <mem_free+0x10c>)
 8012baa:	4829      	ldr	r0, [pc, #164]	; (8012c50 <mem_free+0x100>)
 8012bac:	f009 fc8a 	bl	801c4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012bb0:	f001 ff44 	bl	8014a3c <sys_arch_protect>
 8012bb4:	6138      	str	r0, [r7, #16]
 8012bb6:	6938      	ldr	r0, [r7, #16]
 8012bb8:	f001 ff4e 	bl	8014a58 <sys_arch_unprotect>
    return;
 8012bbc:	e041      	b.n	8012c42 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012bbe:	4828      	ldr	r0, [pc, #160]	; (8012c60 <mem_free+0x110>)
 8012bc0:	f001 fefa 	bl	80149b8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012bc4:	69fb      	ldr	r3, [r7, #28]
 8012bc6:	791b      	ldrb	r3, [r3, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d110      	bne.n	8012bee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012bcc:	4b1e      	ldr	r3, [pc, #120]	; (8012c48 <mem_free+0xf8>)
 8012bce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012bd2:	4924      	ldr	r1, [pc, #144]	; (8012c64 <mem_free+0x114>)
 8012bd4:	481e      	ldr	r0, [pc, #120]	; (8012c50 <mem_free+0x100>)
 8012bd6:	f009 fc75 	bl	801c4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012bda:	4821      	ldr	r0, [pc, #132]	; (8012c60 <mem_free+0x110>)
 8012bdc:	f001 fefb 	bl	80149d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012be0:	f001 ff2c 	bl	8014a3c <sys_arch_protect>
 8012be4:	6178      	str	r0, [r7, #20]
 8012be6:	6978      	ldr	r0, [r7, #20]
 8012be8:	f001 ff36 	bl	8014a58 <sys_arch_unprotect>
    return;
 8012bec:	e029      	b.n	8012c42 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012bee:	69f8      	ldr	r0, [r7, #28]
 8012bf0:	f7ff ff70 	bl	8012ad4 <mem_link_valid>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d110      	bne.n	8012c1c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012bfa:	4b13      	ldr	r3, [pc, #76]	; (8012c48 <mem_free+0xf8>)
 8012bfc:	f240 2295 	movw	r2, #661	; 0x295
 8012c00:	4919      	ldr	r1, [pc, #100]	; (8012c68 <mem_free+0x118>)
 8012c02:	4813      	ldr	r0, [pc, #76]	; (8012c50 <mem_free+0x100>)
 8012c04:	f009 fc5e 	bl	801c4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012c08:	4815      	ldr	r0, [pc, #84]	; (8012c60 <mem_free+0x110>)
 8012c0a:	f001 fee4 	bl	80149d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c0e:	f001 ff15 	bl	8014a3c <sys_arch_protect>
 8012c12:	61b8      	str	r0, [r7, #24]
 8012c14:	69b8      	ldr	r0, [r7, #24]
 8012c16:	f001 ff1f 	bl	8014a58 <sys_arch_unprotect>
    return;
 8012c1a:	e012      	b.n	8012c42 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012c22:	4b12      	ldr	r3, [pc, #72]	; (8012c6c <mem_free+0x11c>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	69fa      	ldr	r2, [r7, #28]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d202      	bcs.n	8012c32 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012c2c:	4a0f      	ldr	r2, [pc, #60]	; (8012c6c <mem_free+0x11c>)
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012c32:	69f8      	ldr	r0, [r7, #28]
 8012c34:	f7ff fe5a 	bl	80128ec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012c38:	4809      	ldr	r0, [pc, #36]	; (8012c60 <mem_free+0x110>)
 8012c3a:	f001 fecc 	bl	80149d6 <sys_mutex_unlock>
 8012c3e:	e000      	b.n	8012c42 <mem_free+0xf2>
    return;
 8012c40:	bf00      	nop
}
 8012c42:	3720      	adds	r7, #32
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	08020b40 	.word	0x08020b40
 8012c4c:	08020c50 	.word	0x08020c50
 8012c50:	08020ba8 	.word	0x08020ba8
 8012c54:	24004844 	.word	0x24004844
 8012c58:	24004848 	.word	0x24004848
 8012c5c:	08020c74 	.word	0x08020c74
 8012c60:	2400484c 	.word	0x2400484c
 8012c64:	08020c90 	.word	0x08020c90
 8012c68:	08020cb8 	.word	0x08020cb8
 8012c6c:	24004850 	.word	0x24004850

08012c70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b088      	sub	sp, #32
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	460b      	mov	r3, r1
 8012c7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012c7c:	887b      	ldrh	r3, [r7, #2]
 8012c7e:	3303      	adds	r3, #3
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	f023 0303 	bic.w	r3, r3, #3
 8012c86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012c88:	8bfb      	ldrh	r3, [r7, #30]
 8012c8a:	2b0b      	cmp	r3, #11
 8012c8c:	d801      	bhi.n	8012c92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012c8e:	230c      	movs	r3, #12
 8012c90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012c92:	8bfb      	ldrh	r3, [r7, #30]
 8012c94:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d803      	bhi.n	8012ca4 <mem_trim+0x34>
 8012c9c:	8bfa      	ldrh	r2, [r7, #30]
 8012c9e:	887b      	ldrh	r3, [r7, #2]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d201      	bcs.n	8012ca8 <mem_trim+0x38>
    return NULL;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	e0dc      	b.n	8012e62 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012ca8:	4b70      	ldr	r3, [pc, #448]	; (8012e6c <mem_trim+0x1fc>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d304      	bcc.n	8012cbc <mem_trim+0x4c>
 8012cb2:	4b6f      	ldr	r3, [pc, #444]	; (8012e70 <mem_trim+0x200>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d306      	bcc.n	8012cca <mem_trim+0x5a>
 8012cbc:	4b6d      	ldr	r3, [pc, #436]	; (8012e74 <mem_trim+0x204>)
 8012cbe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012cc2:	496d      	ldr	r1, [pc, #436]	; (8012e78 <mem_trim+0x208>)
 8012cc4:	486d      	ldr	r0, [pc, #436]	; (8012e7c <mem_trim+0x20c>)
 8012cc6:	f009 fbfd 	bl	801c4c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012cca:	4b68      	ldr	r3, [pc, #416]	; (8012e6c <mem_trim+0x1fc>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d304      	bcc.n	8012cde <mem_trim+0x6e>
 8012cd4:	4b66      	ldr	r3, [pc, #408]	; (8012e70 <mem_trim+0x200>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d307      	bcc.n	8012cee <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cde:	f001 fead 	bl	8014a3c <sys_arch_protect>
 8012ce2:	60b8      	str	r0, [r7, #8]
 8012ce4:	68b8      	ldr	r0, [r7, #8]
 8012ce6:	f001 feb7 	bl	8014a58 <sys_arch_unprotect>
    return rmem;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	e0b9      	b.n	8012e62 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	3b08      	subs	r3, #8
 8012cf2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012cf4:	69b8      	ldr	r0, [r7, #24]
 8012cf6:	f7ff fde7 	bl	80128c8 <mem_to_ptr>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012cfe:	69bb      	ldr	r3, [r7, #24]
 8012d00:	881a      	ldrh	r2, [r3, #0]
 8012d02:	8afb      	ldrh	r3, [r7, #22]
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	3b08      	subs	r3, #8
 8012d0a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012d0c:	8bfa      	ldrh	r2, [r7, #30]
 8012d0e:	8abb      	ldrh	r3, [r7, #20]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d906      	bls.n	8012d22 <mem_trim+0xb2>
 8012d14:	4b57      	ldr	r3, [pc, #348]	; (8012e74 <mem_trim+0x204>)
 8012d16:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012d1a:	4959      	ldr	r1, [pc, #356]	; (8012e80 <mem_trim+0x210>)
 8012d1c:	4857      	ldr	r0, [pc, #348]	; (8012e7c <mem_trim+0x20c>)
 8012d1e:	f009 fbd1 	bl	801c4c4 <iprintf>
  if (newsize > size) {
 8012d22:	8bfa      	ldrh	r2, [r7, #30]
 8012d24:	8abb      	ldrh	r3, [r7, #20]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d901      	bls.n	8012d2e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	e099      	b.n	8012e62 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8012d2e:	8bfa      	ldrh	r2, [r7, #30]
 8012d30:	8abb      	ldrh	r3, [r7, #20]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d101      	bne.n	8012d3a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	e093      	b.n	8012e62 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012d3a:	4852      	ldr	r0, [pc, #328]	; (8012e84 <mem_trim+0x214>)
 8012d3c:	f001 fe3c 	bl	80149b8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff fdad 	bl	80128a4 <ptr_to_mem>
 8012d4a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	791b      	ldrb	r3, [r3, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d141      	bne.n	8012dd8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d106      	bne.n	8012d6e <mem_trim+0xfe>
 8012d60:	4b44      	ldr	r3, [pc, #272]	; (8012e74 <mem_trim+0x204>)
 8012d62:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012d66:	4948      	ldr	r1, [pc, #288]	; (8012e88 <mem_trim+0x218>)
 8012d68:	4844      	ldr	r0, [pc, #272]	; (8012e7c <mem_trim+0x20c>)
 8012d6a:	f009 fbab 	bl	801c4c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012d74:	8afa      	ldrh	r2, [r7, #22]
 8012d76:	8bfb      	ldrh	r3, [r7, #30]
 8012d78:	4413      	add	r3, r2
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	3308      	adds	r3, #8
 8012d7e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012d80:	4b42      	ldr	r3, [pc, #264]	; (8012e8c <mem_trim+0x21c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d106      	bne.n	8012d98 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012d8a:	89fb      	ldrh	r3, [r7, #14]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7ff fd89 	bl	80128a4 <ptr_to_mem>
 8012d92:	4603      	mov	r3, r0
 8012d94:	4a3d      	ldr	r2, [pc, #244]	; (8012e8c <mem_trim+0x21c>)
 8012d96:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012d98:	89fb      	ldrh	r3, [r7, #14]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7ff fd82 	bl	80128a4 <ptr_to_mem>
 8012da0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	2200      	movs	r2, #0
 8012da6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	89ba      	ldrh	r2, [r7, #12]
 8012dac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	8afa      	ldrh	r2, [r7, #22]
 8012db2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	89fa      	ldrh	r2, [r7, #14]
 8012db8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d049      	beq.n	8012e5a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ff fd6a 	bl	80128a4 <ptr_to_mem>
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	89fb      	ldrh	r3, [r7, #14]
 8012dd4:	8053      	strh	r3, [r2, #2]
 8012dd6:	e040      	b.n	8012e5a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012dd8:	8bfb      	ldrh	r3, [r7, #30]
 8012dda:	f103 0214 	add.w	r2, r3, #20
 8012dde:	8abb      	ldrh	r3, [r7, #20]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d83a      	bhi.n	8012e5a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012de4:	8afa      	ldrh	r2, [r7, #22]
 8012de6:	8bfb      	ldrh	r3, [r7, #30]
 8012de8:	4413      	add	r3, r2
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	3308      	adds	r3, #8
 8012dee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	881b      	ldrh	r3, [r3, #0]
 8012df4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d106      	bne.n	8012e0a <mem_trim+0x19a>
 8012dfc:	4b1d      	ldr	r3, [pc, #116]	; (8012e74 <mem_trim+0x204>)
 8012dfe:	f240 3216 	movw	r2, #790	; 0x316
 8012e02:	4921      	ldr	r1, [pc, #132]	; (8012e88 <mem_trim+0x218>)
 8012e04:	481d      	ldr	r0, [pc, #116]	; (8012e7c <mem_trim+0x20c>)
 8012e06:	f009 fb5d 	bl	801c4c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012e0a:	89fb      	ldrh	r3, [r7, #14]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff fd49 	bl	80128a4 <ptr_to_mem>
 8012e12:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012e14:	4b1d      	ldr	r3, [pc, #116]	; (8012e8c <mem_trim+0x21c>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d202      	bcs.n	8012e24 <mem_trim+0x1b4>
      lfree = mem2;
 8012e1e:	4a1b      	ldr	r2, [pc, #108]	; (8012e8c <mem_trim+0x21c>)
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	2200      	movs	r2, #0
 8012e28:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	881a      	ldrh	r2, [r3, #0]
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	8afa      	ldrh	r2, [r7, #22]
 8012e36:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	89fa      	ldrh	r2, [r7, #14]
 8012e3c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d007      	beq.n	8012e5a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	881b      	ldrh	r3, [r3, #0]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7ff fd28 	bl	80128a4 <ptr_to_mem>
 8012e54:	4602      	mov	r2, r0
 8012e56:	89fb      	ldrh	r3, [r7, #14]
 8012e58:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012e5a:	480a      	ldr	r0, [pc, #40]	; (8012e84 <mem_trim+0x214>)
 8012e5c:	f001 fdbb 	bl	80149d6 <sys_mutex_unlock>
  return rmem;
 8012e60:	687b      	ldr	r3, [r7, #4]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3720      	adds	r7, #32
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	24004844 	.word	0x24004844
 8012e70:	24004848 	.word	0x24004848
 8012e74:	08020b40 	.word	0x08020b40
 8012e78:	08020cec 	.word	0x08020cec
 8012e7c:	08020ba8 	.word	0x08020ba8
 8012e80:	08020d04 	.word	0x08020d04
 8012e84:	2400484c 	.word	0x2400484c
 8012e88:	08020d24 	.word	0x08020d24
 8012e8c:	24004850 	.word	0x24004850

08012e90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012e9a:	88fb      	ldrh	r3, [r7, #6]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d101      	bne.n	8012ea4 <mem_malloc+0x14>
    return NULL;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	e0e6      	b.n	8013072 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012ea4:	88fb      	ldrh	r3, [r7, #6]
 8012ea6:	3303      	adds	r3, #3
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	f023 0303 	bic.w	r3, r3, #3
 8012eae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012eb0:	8bbb      	ldrh	r3, [r7, #28]
 8012eb2:	2b0b      	cmp	r3, #11
 8012eb4:	d801      	bhi.n	8012eba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012eb6:	230c      	movs	r3, #12
 8012eb8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012eba:	8bbb      	ldrh	r3, [r7, #28]
 8012ebc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d803      	bhi.n	8012ecc <mem_malloc+0x3c>
 8012ec4:	8bba      	ldrh	r2, [r7, #28]
 8012ec6:	88fb      	ldrh	r3, [r7, #6]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d201      	bcs.n	8012ed0 <mem_malloc+0x40>
    return NULL;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e0d0      	b.n	8013072 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012ed0:	486a      	ldr	r0, [pc, #424]	; (801307c <mem_malloc+0x1ec>)
 8012ed2:	f001 fd71 	bl	80149b8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012ed6:	4b6a      	ldr	r3, [pc, #424]	; (8013080 <mem_malloc+0x1f0>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7ff fcf4 	bl	80128c8 <mem_to_ptr>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	83fb      	strh	r3, [r7, #30]
 8012ee4:	e0b9      	b.n	801305a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012ee6:	8bfb      	ldrh	r3, [r7, #30]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7ff fcdb 	bl	80128a4 <ptr_to_mem>
 8012eee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	791b      	ldrb	r3, [r3, #4]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f040 80a9 	bne.w	801304c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	881b      	ldrh	r3, [r3, #0]
 8012efe:	461a      	mov	r2, r3
 8012f00:	8bfb      	ldrh	r3, [r7, #30]
 8012f02:	1ad3      	subs	r3, r2, r3
 8012f04:	f1a3 0208 	sub.w	r2, r3, #8
 8012f08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	f0c0 809e 	bcc.w	801304c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	461a      	mov	r2, r3
 8012f16:	8bfb      	ldrh	r3, [r7, #30]
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	f1a3 0208 	sub.w	r2, r3, #8
 8012f1e:	8bbb      	ldrh	r3, [r7, #28]
 8012f20:	3314      	adds	r3, #20
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d335      	bcc.n	8012f92 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012f26:	8bfa      	ldrh	r2, [r7, #30]
 8012f28:	8bbb      	ldrh	r3, [r7, #28]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	3308      	adds	r3, #8
 8012f30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012f32:	8a7b      	ldrh	r3, [r7, #18]
 8012f34:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d106      	bne.n	8012f4a <mem_malloc+0xba>
 8012f3c:	4b51      	ldr	r3, [pc, #324]	; (8013084 <mem_malloc+0x1f4>)
 8012f3e:	f240 3287 	movw	r2, #903	; 0x387
 8012f42:	4951      	ldr	r1, [pc, #324]	; (8013088 <mem_malloc+0x1f8>)
 8012f44:	4851      	ldr	r0, [pc, #324]	; (801308c <mem_malloc+0x1fc>)
 8012f46:	f009 fabd 	bl	801c4c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012f4a:	8a7b      	ldrh	r3, [r7, #18]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ff fca9 	bl	80128a4 <ptr_to_mem>
 8012f52:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2200      	movs	r2, #0
 8012f58:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	881a      	ldrh	r2, [r3, #0]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	8bfa      	ldrh	r2, [r7, #30]
 8012f66:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	8a7a      	ldrh	r2, [r7, #18]
 8012f6c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	2201      	movs	r2, #1
 8012f72:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	881b      	ldrh	r3, [r3, #0]
 8012f78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d00b      	beq.n	8012f98 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff fc8d 	bl	80128a4 <ptr_to_mem>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	8a7b      	ldrh	r3, [r7, #18]
 8012f8e:	8053      	strh	r3, [r2, #2]
 8012f90:	e002      	b.n	8012f98 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	2201      	movs	r2, #1
 8012f96:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012f98:	4b39      	ldr	r3, [pc, #228]	; (8013080 <mem_malloc+0x1f0>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	697a      	ldr	r2, [r7, #20]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d127      	bne.n	8012ff2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012fa2:	4b37      	ldr	r3, [pc, #220]	; (8013080 <mem_malloc+0x1f0>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012fa8:	e005      	b.n	8012fb6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7ff fc78 	bl	80128a4 <ptr_to_mem>
 8012fb4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	791b      	ldrb	r3, [r3, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d004      	beq.n	8012fc8 <mem_malloc+0x138>
 8012fbe:	4b34      	ldr	r3, [pc, #208]	; (8013090 <mem_malloc+0x200>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	69ba      	ldr	r2, [r7, #24]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d1f0      	bne.n	8012faa <mem_malloc+0x11a>
          }
          lfree = cur;
 8012fc8:	4a2d      	ldr	r2, [pc, #180]	; (8013080 <mem_malloc+0x1f0>)
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012fce:	4b2c      	ldr	r3, [pc, #176]	; (8013080 <mem_malloc+0x1f0>)
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	4b2f      	ldr	r3, [pc, #188]	; (8013090 <mem_malloc+0x200>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d00b      	beq.n	8012ff2 <mem_malloc+0x162>
 8012fda:	4b29      	ldr	r3, [pc, #164]	; (8013080 <mem_malloc+0x1f0>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	791b      	ldrb	r3, [r3, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d006      	beq.n	8012ff2 <mem_malloc+0x162>
 8012fe4:	4b27      	ldr	r3, [pc, #156]	; (8013084 <mem_malloc+0x1f4>)
 8012fe6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012fea:	492a      	ldr	r1, [pc, #168]	; (8013094 <mem_malloc+0x204>)
 8012fec:	4827      	ldr	r0, [pc, #156]	; (801308c <mem_malloc+0x1fc>)
 8012fee:	f009 fa69 	bl	801c4c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012ff2:	4822      	ldr	r0, [pc, #136]	; (801307c <mem_malloc+0x1ec>)
 8012ff4:	f001 fcef 	bl	80149d6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012ff8:	8bba      	ldrh	r2, [r7, #28]
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	4413      	add	r3, r2
 8012ffe:	3308      	adds	r3, #8
 8013000:	4a23      	ldr	r2, [pc, #140]	; (8013090 <mem_malloc+0x200>)
 8013002:	6812      	ldr	r2, [r2, #0]
 8013004:	4293      	cmp	r3, r2
 8013006:	d906      	bls.n	8013016 <mem_malloc+0x186>
 8013008:	4b1e      	ldr	r3, [pc, #120]	; (8013084 <mem_malloc+0x1f4>)
 801300a:	f240 32b9 	movw	r2, #953	; 0x3b9
 801300e:	4922      	ldr	r1, [pc, #136]	; (8013098 <mem_malloc+0x208>)
 8013010:	481e      	ldr	r0, [pc, #120]	; (801308c <mem_malloc+0x1fc>)
 8013012:	f009 fa57 	bl	801c4c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	f003 0303 	and.w	r3, r3, #3
 801301c:	2b00      	cmp	r3, #0
 801301e:	d006      	beq.n	801302e <mem_malloc+0x19e>
 8013020:	4b18      	ldr	r3, [pc, #96]	; (8013084 <mem_malloc+0x1f4>)
 8013022:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013026:	491d      	ldr	r1, [pc, #116]	; (801309c <mem_malloc+0x20c>)
 8013028:	4818      	ldr	r0, [pc, #96]	; (801308c <mem_malloc+0x1fc>)
 801302a:	f009 fa4b 	bl	801c4c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	f003 0303 	and.w	r3, r3, #3
 8013034:	2b00      	cmp	r3, #0
 8013036:	d006      	beq.n	8013046 <mem_malloc+0x1b6>
 8013038:	4b12      	ldr	r3, [pc, #72]	; (8013084 <mem_malloc+0x1f4>)
 801303a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801303e:	4918      	ldr	r1, [pc, #96]	; (80130a0 <mem_malloc+0x210>)
 8013040:	4812      	ldr	r0, [pc, #72]	; (801308c <mem_malloc+0x1fc>)
 8013042:	f009 fa3f 	bl	801c4c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	3308      	adds	r3, #8
 801304a:	e012      	b.n	8013072 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 801304c:	8bfb      	ldrh	r3, [r7, #30]
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff fc28 	bl	80128a4 <ptr_to_mem>
 8013054:	4603      	mov	r3, r0
 8013056:	881b      	ldrh	r3, [r3, #0]
 8013058:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801305a:	8bfa      	ldrh	r2, [r7, #30]
 801305c:	8bb9      	ldrh	r1, [r7, #28]
 801305e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8013062:	1a5b      	subs	r3, r3, r1
 8013064:	429a      	cmp	r2, r3
 8013066:	f4ff af3e 	bcc.w	8012ee6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801306a:	4804      	ldr	r0, [pc, #16]	; (801307c <mem_malloc+0x1ec>)
 801306c:	f001 fcb3 	bl	80149d6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	3720      	adds	r7, #32
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	2400484c 	.word	0x2400484c
 8013080:	24004850 	.word	0x24004850
 8013084:	08020b40 	.word	0x08020b40
 8013088:	08020d24 	.word	0x08020d24
 801308c:	08020ba8 	.word	0x08020ba8
 8013090:	24004848 	.word	0x24004848
 8013094:	08020d38 	.word	0x08020d38
 8013098:	08020d54 	.word	0x08020d54
 801309c:	08020d84 	.word	0x08020d84
 80130a0:	08020db4 	.word	0x08020db4

080130a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	2200      	movs	r2, #0
 80130b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	3303      	adds	r3, #3
 80130ba:	f023 0303 	bic.w	r3, r3, #3
 80130be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80130c0:	2300      	movs	r3, #0
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	e011      	b.n	80130ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	689b      	ldr	r3, [r3, #8]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	689b      	ldr	r3, [r3, #8]
 80130d4:	68ba      	ldr	r2, [r7, #8]
 80130d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	461a      	mov	r2, r3
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	4413      	add	r3, r2
 80130e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3301      	adds	r3, #1
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	885b      	ldrh	r3, [r3, #2]
 80130ee:	461a      	mov	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	4293      	cmp	r3, r2
 80130f4:	dbe7      	blt.n	80130c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80130f6:	bf00      	nop
 80130f8:	bf00      	nop
 80130fa:	3714      	adds	r7, #20
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801310a:	2300      	movs	r3, #0
 801310c:	80fb      	strh	r3, [r7, #6]
 801310e:	e009      	b.n	8013124 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013110:	88fb      	ldrh	r3, [r7, #6]
 8013112:	4a08      	ldr	r2, [pc, #32]	; (8013134 <memp_init+0x30>)
 8013114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff ffc3 	bl	80130a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801311e:	88fb      	ldrh	r3, [r7, #6]
 8013120:	3301      	adds	r3, #1
 8013122:	80fb      	strh	r3, [r7, #6]
 8013124:	88fb      	ldrh	r3, [r7, #6]
 8013126:	2b0c      	cmp	r3, #12
 8013128:	d9f2      	bls.n	8013110 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801312a:	bf00      	nop
 801312c:	bf00      	nop
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	080465a4 	.word	0x080465a4

08013138 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013140:	f001 fc7c 	bl	8014a3c <sys_arch_protect>
 8013144:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d015      	beq.n	8013180 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	6812      	ldr	r2, [r2, #0]
 801315c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	f003 0303 	and.w	r3, r3, #3
 8013164:	2b00      	cmp	r3, #0
 8013166:	d006      	beq.n	8013176 <do_memp_malloc_pool+0x3e>
 8013168:	4b09      	ldr	r3, [pc, #36]	; (8013190 <do_memp_malloc_pool+0x58>)
 801316a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801316e:	4909      	ldr	r1, [pc, #36]	; (8013194 <do_memp_malloc_pool+0x5c>)
 8013170:	4809      	ldr	r0, [pc, #36]	; (8013198 <do_memp_malloc_pool+0x60>)
 8013172:	f009 f9a7 	bl	801c4c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f001 fc6e 	bl	8014a58 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	e003      	b.n	8013188 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f001 fc69 	bl	8014a58 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3710      	adds	r7, #16
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	08020dd8 	.word	0x08020dd8
 8013194:	08020e28 	.word	0x08020e28
 8013198:	08020e4c 	.word	0x08020e4c

0801319c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d106      	bne.n	80131b8 <memp_malloc_pool+0x1c>
 80131aa:	4b0a      	ldr	r3, [pc, #40]	; (80131d4 <memp_malloc_pool+0x38>)
 80131ac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80131b0:	4909      	ldr	r1, [pc, #36]	; (80131d8 <memp_malloc_pool+0x3c>)
 80131b2:	480a      	ldr	r0, [pc, #40]	; (80131dc <memp_malloc_pool+0x40>)
 80131b4:	f009 f986 	bl	801c4c4 <iprintf>
  if (desc == NULL) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d101      	bne.n	80131c2 <memp_malloc_pool+0x26>
    return NULL;
 80131be:	2300      	movs	r3, #0
 80131c0:	e003      	b.n	80131ca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff ffb8 	bl	8013138 <do_memp_malloc_pool>
 80131c8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3708      	adds	r7, #8
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	08020dd8 	.word	0x08020dd8
 80131d8:	08020e74 	.word	0x08020e74
 80131dc:	08020e4c 	.word	0x08020e4c

080131e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	4603      	mov	r3, r0
 80131e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	2b0c      	cmp	r3, #12
 80131ee:	d908      	bls.n	8013202 <memp_malloc+0x22>
 80131f0:	4b0a      	ldr	r3, [pc, #40]	; (801321c <memp_malloc+0x3c>)
 80131f2:	f240 1257 	movw	r2, #343	; 0x157
 80131f6:	490a      	ldr	r1, [pc, #40]	; (8013220 <memp_malloc+0x40>)
 80131f8:	480a      	ldr	r0, [pc, #40]	; (8013224 <memp_malloc+0x44>)
 80131fa:	f009 f963 	bl	801c4c4 <iprintf>
 80131fe:	2300      	movs	r3, #0
 8013200:	e008      	b.n	8013214 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013202:	79fb      	ldrb	r3, [r7, #7]
 8013204:	4a08      	ldr	r2, [pc, #32]	; (8013228 <memp_malloc+0x48>)
 8013206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801320a:	4618      	mov	r0, r3
 801320c:	f7ff ff94 	bl	8013138 <do_memp_malloc_pool>
 8013210:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013212:	68fb      	ldr	r3, [r7, #12]
}
 8013214:	4618      	mov	r0, r3
 8013216:	3710      	adds	r7, #16
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	08020dd8 	.word	0x08020dd8
 8013220:	08020e88 	.word	0x08020e88
 8013224:	08020e4c 	.word	0x08020e4c
 8013228:	080465a4 	.word	0x080465a4

0801322c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
 8013234:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	f003 0303 	and.w	r3, r3, #3
 801323c:	2b00      	cmp	r3, #0
 801323e:	d006      	beq.n	801324e <do_memp_free_pool+0x22>
 8013240:	4b0d      	ldr	r3, [pc, #52]	; (8013278 <do_memp_free_pool+0x4c>)
 8013242:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013246:	490d      	ldr	r1, [pc, #52]	; (801327c <do_memp_free_pool+0x50>)
 8013248:	480d      	ldr	r0, [pc, #52]	; (8013280 <do_memp_free_pool+0x54>)
 801324a:	f009 f93b 	bl	801c4c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013252:	f001 fbf3 	bl	8014a3c <sys_arch_protect>
 8013256:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	689b      	ldr	r3, [r3, #8]
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801326a:	68b8      	ldr	r0, [r7, #8]
 801326c:	f001 fbf4 	bl	8014a58 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013270:	bf00      	nop
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	08020dd8 	.word	0x08020dd8
 801327c:	08020ea8 	.word	0x08020ea8
 8013280:	08020e4c 	.word	0x08020e4c

08013284 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d106      	bne.n	80132a2 <memp_free_pool+0x1e>
 8013294:	4b0a      	ldr	r3, [pc, #40]	; (80132c0 <memp_free_pool+0x3c>)
 8013296:	f240 1295 	movw	r2, #405	; 0x195
 801329a:	490a      	ldr	r1, [pc, #40]	; (80132c4 <memp_free_pool+0x40>)
 801329c:	480a      	ldr	r0, [pc, #40]	; (80132c8 <memp_free_pool+0x44>)
 801329e:	f009 f911 	bl	801c4c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d007      	beq.n	80132b8 <memp_free_pool+0x34>
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d004      	beq.n	80132b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80132ae:	6839      	ldr	r1, [r7, #0]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f7ff ffbb 	bl	801322c <do_memp_free_pool>
 80132b6:	e000      	b.n	80132ba <memp_free_pool+0x36>
    return;
 80132b8:	bf00      	nop
}
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	08020dd8 	.word	0x08020dd8
 80132c4:	08020e74 	.word	0x08020e74
 80132c8:	08020e4c 	.word	0x08020e4c

080132cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	4603      	mov	r3, r0
 80132d4:	6039      	str	r1, [r7, #0]
 80132d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80132d8:	79fb      	ldrb	r3, [r7, #7]
 80132da:	2b0c      	cmp	r3, #12
 80132dc:	d907      	bls.n	80132ee <memp_free+0x22>
 80132de:	4b0c      	ldr	r3, [pc, #48]	; (8013310 <memp_free+0x44>)
 80132e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80132e4:	490b      	ldr	r1, [pc, #44]	; (8013314 <memp_free+0x48>)
 80132e6:	480c      	ldr	r0, [pc, #48]	; (8013318 <memp_free+0x4c>)
 80132e8:	f009 f8ec 	bl	801c4c4 <iprintf>
 80132ec:	e00c      	b.n	8013308 <memp_free+0x3c>

  if (mem == NULL) {
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d008      	beq.n	8013306 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80132f4:	79fb      	ldrb	r3, [r7, #7]
 80132f6:	4a09      	ldr	r2, [pc, #36]	; (801331c <memp_free+0x50>)
 80132f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132fc:	6839      	ldr	r1, [r7, #0]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7ff ff94 	bl	801322c <do_memp_free_pool>
 8013304:	e000      	b.n	8013308 <memp_free+0x3c>
    return;
 8013306:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013308:	3708      	adds	r7, #8
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
 801330e:	bf00      	nop
 8013310:	08020dd8 	.word	0x08020dd8
 8013314:	08020ec8 	.word	0x08020ec8
 8013318:	08020e4c 	.word	0x08020e4c
 801331c:	080465a4 	.word	0x080465a4

08013320 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d013      	beq.n	8013356 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00b      	beq.n	801334e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4618      	mov	r0, r3
 801333c:	f000 ff10 	bl	8014160 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2200      	movs	r2, #0
 8013344:	605a      	str	r2, [r3, #4]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685a      	ldr	r2, [r3, #4]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801334e:	6879      	ldr	r1, [r7, #4]
 8013350:	2006      	movs	r0, #6
 8013352:	f7ff ffbb 	bl	80132cc <memp_free>
  }
}
 8013356:	bf00      	nop
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
	...

08013360 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d108      	bne.n	8013384 <netbuf_data+0x24>
 8013372:	4b1b      	ldr	r3, [pc, #108]	; (80133e0 <netbuf_data+0x80>)
 8013374:	22c6      	movs	r2, #198	; 0xc6
 8013376:	491b      	ldr	r1, [pc, #108]	; (80133e4 <netbuf_data+0x84>)
 8013378:	481b      	ldr	r0, [pc, #108]	; (80133e8 <netbuf_data+0x88>)
 801337a:	f009 f8a3 	bl	801c4c4 <iprintf>
 801337e:	f06f 030f 	mvn.w	r3, #15
 8013382:	e029      	b.n	80133d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d108      	bne.n	801339c <netbuf_data+0x3c>
 801338a:	4b15      	ldr	r3, [pc, #84]	; (80133e0 <netbuf_data+0x80>)
 801338c:	22c7      	movs	r2, #199	; 0xc7
 801338e:	4917      	ldr	r1, [pc, #92]	; (80133ec <netbuf_data+0x8c>)
 8013390:	4815      	ldr	r0, [pc, #84]	; (80133e8 <netbuf_data+0x88>)
 8013392:	f009 f897 	bl	801c4c4 <iprintf>
 8013396:	f06f 030f 	mvn.w	r3, #15
 801339a:	e01d      	b.n	80133d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d108      	bne.n	80133b4 <netbuf_data+0x54>
 80133a2:	4b0f      	ldr	r3, [pc, #60]	; (80133e0 <netbuf_data+0x80>)
 80133a4:	22c8      	movs	r2, #200	; 0xc8
 80133a6:	4912      	ldr	r1, [pc, #72]	; (80133f0 <netbuf_data+0x90>)
 80133a8:	480f      	ldr	r0, [pc, #60]	; (80133e8 <netbuf_data+0x88>)
 80133aa:	f009 f88b 	bl	801c4c4 <iprintf>
 80133ae:	f06f 030f 	mvn.w	r3, #15
 80133b2:	e011      	b.n	80133d8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d102      	bne.n	80133c2 <netbuf_data+0x62>
    return ERR_BUF;
 80133bc:	f06f 0301 	mvn.w	r3, #1
 80133c0:	e00a      	b.n	80133d8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	895a      	ldrh	r2, [r3, #10]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	08020ee4 	.word	0x08020ee4
 80133e4:	08021008 	.word	0x08021008
 80133e8:	08020f50 	.word	0x08020f50
 80133ec:	08021024 	.word	0x08021024
 80133f0:	08021044 	.word	0x08021044

080133f4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d108      	bne.n	8013414 <netbuf_next+0x20>
 8013402:	4b11      	ldr	r3, [pc, #68]	; (8013448 <netbuf_next+0x54>)
 8013404:	22e0      	movs	r2, #224	; 0xe0
 8013406:	4911      	ldr	r1, [pc, #68]	; (801344c <netbuf_next+0x58>)
 8013408:	4811      	ldr	r0, [pc, #68]	; (8013450 <netbuf_next+0x5c>)
 801340a:	f009 f85b 	bl	801c4c4 <iprintf>
 801340e:	f04f 33ff 	mov.w	r3, #4294967295
 8013412:	e014      	b.n	801343e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d102      	bne.n	8013424 <netbuf_next+0x30>
    return -1;
 801341e:	f04f 33ff 	mov.w	r3, #4294967295
 8013422:	e00c      	b.n	801343e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d101      	bne.n	801343c <netbuf_next+0x48>
    return 1;
 8013438:	2301      	movs	r3, #1
 801343a:	e000      	b.n	801343e <netbuf_next+0x4a>
  }
  return 0;
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	3708      	adds	r7, #8
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	08020ee4 	.word	0x08020ee4
 801344c:	08021060 	.word	0x08021060
 8013450:	08020f50 	.word	0x08020f50

08013454 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013454:	b480      	push	{r7}
 8013456:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013458:	bf00      	nop
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr
	...

08013464 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b086      	sub	sp, #24
 8013468:	af00      	add	r7, sp, #0
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	607a      	str	r2, [r7, #4]
 8013470:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d108      	bne.n	801348a <netif_add+0x26>
 8013478:	4b5b      	ldr	r3, [pc, #364]	; (80135e8 <netif_add+0x184>)
 801347a:	f240 1227 	movw	r2, #295	; 0x127
 801347e:	495b      	ldr	r1, [pc, #364]	; (80135ec <netif_add+0x188>)
 8013480:	485b      	ldr	r0, [pc, #364]	; (80135f0 <netif_add+0x18c>)
 8013482:	f009 f81f 	bl	801c4c4 <iprintf>
 8013486:	2300      	movs	r3, #0
 8013488:	e0a9      	b.n	80135de <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	2b00      	cmp	r3, #0
 801348e:	d108      	bne.n	80134a2 <netif_add+0x3e>
 8013490:	4b55      	ldr	r3, [pc, #340]	; (80135e8 <netif_add+0x184>)
 8013492:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013496:	4957      	ldr	r1, [pc, #348]	; (80135f4 <netif_add+0x190>)
 8013498:	4855      	ldr	r0, [pc, #340]	; (80135f0 <netif_add+0x18c>)
 801349a:	f009 f813 	bl	801c4c4 <iprintf>
 801349e:	2300      	movs	r3, #0
 80134a0:	e09d      	b.n	80135de <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d101      	bne.n	80134ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80134a8:	4b53      	ldr	r3, [pc, #332]	; (80135f8 <netif_add+0x194>)
 80134aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d101      	bne.n	80134b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80134b2:	4b51      	ldr	r3, [pc, #324]	; (80135f8 <netif_add+0x194>)
 80134b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d101      	bne.n	80134c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80134bc:	4b4e      	ldr	r3, [pc, #312]	; (80135f8 <netif_add+0x194>)
 80134be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2200      	movs	r2, #0
 80134c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2200      	movs	r2, #0
 80134ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2200      	movs	r2, #0
 80134d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	4a49      	ldr	r2, [pc, #292]	; (80135fc <netif_add+0x198>)
 80134d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2200      	movs	r2, #0
 80134e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	3324      	adds	r3, #36	; 0x24
 80134ea:	2204      	movs	r2, #4
 80134ec:	2100      	movs	r1, #0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f008 fb9e 	bl	801bc30 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2200      	movs	r2, #0
 80134f8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	6a3a      	ldr	r2, [r7, #32]
 80134fe:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013500:	4b3f      	ldr	r3, [pc, #252]	; (8013600 <netif_add+0x19c>)
 8013502:	781a      	ldrb	r2, [r3, #0]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801350e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	68b9      	ldr	r1, [r7, #8]
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f000 f914 	bl	8013744 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	4798      	blx	r3
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <netif_add+0xc8>
    return NULL;
 8013528:	2300      	movs	r3, #0
 801352a:	e058      	b.n	80135de <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013532:	2bff      	cmp	r3, #255	; 0xff
 8013534:	d103      	bne.n	801353e <netif_add+0xda>
        netif->num = 0;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2200      	movs	r2, #0
 801353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801353e:	2300      	movs	r3, #0
 8013540:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013542:	4b30      	ldr	r3, [pc, #192]	; (8013604 <netif_add+0x1a0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	617b      	str	r3, [r7, #20]
 8013548:	e02b      	b.n	80135a2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	429a      	cmp	r2, r3
 8013550:	d106      	bne.n	8013560 <netif_add+0xfc>
 8013552:	4b25      	ldr	r3, [pc, #148]	; (80135e8 <netif_add+0x184>)
 8013554:	f240 128b 	movw	r2, #395	; 0x18b
 8013558:	492b      	ldr	r1, [pc, #172]	; (8013608 <netif_add+0x1a4>)
 801355a:	4825      	ldr	r0, [pc, #148]	; (80135f0 <netif_add+0x18c>)
 801355c:	f008 ffb2 	bl	801c4c4 <iprintf>
        num_netifs++;
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	3301      	adds	r3, #1
 8013564:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	2bff      	cmp	r3, #255	; 0xff
 801356a:	dd06      	ble.n	801357a <netif_add+0x116>
 801356c:	4b1e      	ldr	r3, [pc, #120]	; (80135e8 <netif_add+0x184>)
 801356e:	f240 128d 	movw	r2, #397	; 0x18d
 8013572:	4926      	ldr	r1, [pc, #152]	; (801360c <netif_add+0x1a8>)
 8013574:	481e      	ldr	r0, [pc, #120]	; (80135f0 <netif_add+0x18c>)
 8013576:	f008 ffa5 	bl	801c4c4 <iprintf>
        if (netif2->num == netif->num) {
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013586:	429a      	cmp	r2, r3
 8013588:	d108      	bne.n	801359c <netif_add+0x138>
          netif->num++;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013590:	3301      	adds	r3, #1
 8013592:	b2da      	uxtb	r2, r3
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801359a:	e005      	b.n	80135a8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	617b      	str	r3, [r7, #20]
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d1d0      	bne.n	801354a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d1be      	bne.n	801352c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80135b4:	2bfe      	cmp	r3, #254	; 0xfe
 80135b6:	d103      	bne.n	80135c0 <netif_add+0x15c>
    netif_num = 0;
 80135b8:	4b11      	ldr	r3, [pc, #68]	; (8013600 <netif_add+0x19c>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	701a      	strb	r2, [r3, #0]
 80135be:	e006      	b.n	80135ce <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80135c6:	3301      	adds	r3, #1
 80135c8:	b2da      	uxtb	r2, r3
 80135ca:	4b0d      	ldr	r3, [pc, #52]	; (8013600 <netif_add+0x19c>)
 80135cc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80135ce:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <netif_add+0x1a0>)
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80135d6:	4a0b      	ldr	r2, [pc, #44]	; (8013604 <netif_add+0x1a0>)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80135dc:	68fb      	ldr	r3, [r7, #12]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3718      	adds	r7, #24
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	08021098 	.word	0x08021098
 80135ec:	08021148 	.word	0x08021148
 80135f0:	08021104 	.word	0x08021104
 80135f4:	08021164 	.word	0x08021164
 80135f8:	08046500 	.word	0x08046500
 80135fc:	08013a27 	.word	0x08013a27
 8013600:	24007948 	.word	0x24007948
 8013604:	24007940 	.word	0x24007940
 8013608:	08021188 	.word	0x08021188
 801360c:	0802119c 	.word	0x0802119c

08013610 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801361a:	6839      	ldr	r1, [r7, #0]
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f003 f845 	bl	80166ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013622:	6839      	ldr	r1, [r7, #0]
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f008 fa77 	bl	801bb18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801362a:	bf00      	nop
 801362c:	3708      	adds	r7, #8
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
	...

08013634 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b086      	sub	sp, #24
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d106      	bne.n	8013654 <netif_do_set_ipaddr+0x20>
 8013646:	4b1d      	ldr	r3, [pc, #116]	; (80136bc <netif_do_set_ipaddr+0x88>)
 8013648:	f240 12cb 	movw	r2, #459	; 0x1cb
 801364c:	491c      	ldr	r1, [pc, #112]	; (80136c0 <netif_do_set_ipaddr+0x8c>)
 801364e:	481d      	ldr	r0, [pc, #116]	; (80136c4 <netif_do_set_ipaddr+0x90>)
 8013650:	f008 ff38 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d106      	bne.n	8013668 <netif_do_set_ipaddr+0x34>
 801365a:	4b18      	ldr	r3, [pc, #96]	; (80136bc <netif_do_set_ipaddr+0x88>)
 801365c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013660:	4917      	ldr	r1, [pc, #92]	; (80136c0 <netif_do_set_ipaddr+0x8c>)
 8013662:	4818      	ldr	r0, [pc, #96]	; (80136c4 <netif_do_set_ipaddr+0x90>)
 8013664:	f008 ff2e 	bl	801c4c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	3304      	adds	r3, #4
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	429a      	cmp	r2, r3
 8013674:	d01c      	beq.n	80136b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	3304      	adds	r3, #4
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013686:	f107 0314 	add.w	r3, r7, #20
 801368a:	4619      	mov	r1, r3
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f7ff ffbf 	bl	8013610 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <netif_do_set_ipaddr+0x6a>
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	e000      	b.n	80136a0 <netif_do_set_ipaddr+0x6c>
 801369e:	2300      	movs	r3, #0
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80136a4:	2101      	movs	r1, #1
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 f8d2 	bl	8013850 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80136ac:	2301      	movs	r3, #1
 80136ae:	e000      	b.n	80136b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3718      	adds	r7, #24
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	bf00      	nop
 80136bc:	08021098 	.word	0x08021098
 80136c0:	080211cc 	.word	0x080211cc
 80136c4:	08021104 	.word	0x08021104

080136c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	3308      	adds	r3, #8
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d00a      	beq.n	80136f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d002      	beq.n	80136ee <netif_do_set_netmask+0x26>
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	e000      	b.n	80136f0 <netif_do_set_netmask+0x28>
 80136ee:	2300      	movs	r3, #0
 80136f0:	68fa      	ldr	r2, [r7, #12]
 80136f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80136f4:	2301      	movs	r3, #1
 80136f6:	e000      	b.n	80136fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80136f8:	2300      	movs	r3, #0
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3714      	adds	r7, #20
 80136fe:	46bd      	mov	sp, r7
 8013700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013704:	4770      	bx	lr

08013706 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013706:	b480      	push	{r7}
 8013708:	b085      	sub	sp, #20
 801370a:	af00      	add	r7, sp, #0
 801370c:	60f8      	str	r0, [r7, #12]
 801370e:	60b9      	str	r1, [r7, #8]
 8013710:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	330c      	adds	r3, #12
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	d00a      	beq.n	8013736 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d002      	beq.n	801372c <netif_do_set_gw+0x26>
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	e000      	b.n	801372e <netif_do_set_gw+0x28>
 801372c:	2300      	movs	r3, #0
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013732:	2301      	movs	r3, #1
 8013734:	e000      	b.n	8013738 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013736:	2300      	movs	r3, #0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3714      	adds	r7, #20
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr

08013744 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b088      	sub	sp, #32
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013752:	2300      	movs	r3, #0
 8013754:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013756:	2300      	movs	r3, #0
 8013758:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013760:	4b1c      	ldr	r3, [pc, #112]	; (80137d4 <netif_set_addr+0x90>)
 8013762:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801376a:	4b1a      	ldr	r3, [pc, #104]	; (80137d4 <netif_set_addr+0x90>)
 801376c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013774:	4b17      	ldr	r3, [pc, #92]	; (80137d4 <netif_set_addr+0x90>)
 8013776:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d003      	beq.n	8013786 <netif_set_addr+0x42>
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <netif_set_addr+0x46>
 8013786:	2301      	movs	r3, #1
 8013788:	e000      	b.n	801378c <netif_set_addr+0x48>
 801378a:	2300      	movs	r3, #0
 801378c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d006      	beq.n	80137a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013794:	f107 0310 	add.w	r3, r7, #16
 8013798:	461a      	mov	r2, r3
 801379a:	68b9      	ldr	r1, [r7, #8]
 801379c:	68f8      	ldr	r0, [r7, #12]
 801379e:	f7ff ff49 	bl	8013634 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80137a2:	69fa      	ldr	r2, [r7, #28]
 80137a4:	6879      	ldr	r1, [r7, #4]
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff ff8e 	bl	80136c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80137ac:	69ba      	ldr	r2, [r7, #24]
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	68f8      	ldr	r0, [r7, #12]
 80137b2:	f7ff ffa8 	bl	8013706 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d106      	bne.n	80137ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80137bc:	f107 0310 	add.w	r3, r7, #16
 80137c0:	461a      	mov	r2, r3
 80137c2:	68b9      	ldr	r1, [r7, #8]
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff ff35 	bl	8013634 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80137ca:	bf00      	nop
 80137cc:	3720      	adds	r7, #32
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	08046500 	.word	0x08046500

080137d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80137e0:	4a04      	ldr	r2, [pc, #16]	; (80137f4 <netif_set_default+0x1c>)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80137e6:	bf00      	nop
 80137e8:	370c      	adds	r7, #12
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop
 80137f4:	24007944 	.word	0x24007944

080137f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d107      	bne.n	8013816 <netif_set_up+0x1e>
 8013806:	4b0f      	ldr	r3, [pc, #60]	; (8013844 <netif_set_up+0x4c>)
 8013808:	f44f 7254 	mov.w	r2, #848	; 0x350
 801380c:	490e      	ldr	r1, [pc, #56]	; (8013848 <netif_set_up+0x50>)
 801380e:	480f      	ldr	r0, [pc, #60]	; (801384c <netif_set_up+0x54>)
 8013810:	f008 fe58 	bl	801c4c4 <iprintf>
 8013814:	e013      	b.n	801383e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10c      	bne.n	801383e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801382a:	f043 0301 	orr.w	r3, r3, #1
 801382e:	b2da      	uxtb	r2, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013836:	2103      	movs	r1, #3
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f000 f809 	bl	8013850 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	08021098 	.word	0x08021098
 8013848:	0802123c 	.word	0x0802123c
 801384c:	08021104 	.word	0x08021104

08013850 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d106      	bne.n	8013870 <netif_issue_reports+0x20>
 8013862:	4b18      	ldr	r3, [pc, #96]	; (80138c4 <netif_issue_reports+0x74>)
 8013864:	f240 326d 	movw	r2, #877	; 0x36d
 8013868:	4917      	ldr	r1, [pc, #92]	; (80138c8 <netif_issue_reports+0x78>)
 801386a:	4818      	ldr	r0, [pc, #96]	; (80138cc <netif_issue_reports+0x7c>)
 801386c:	f008 fe2a 	bl	801c4c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013876:	f003 0304 	and.w	r3, r3, #4
 801387a:	2b00      	cmp	r3, #0
 801387c:	d01e      	beq.n	80138bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013884:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013888:	2b00      	cmp	r3, #0
 801388a:	d017      	beq.n	80138bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801388c:	78fb      	ldrb	r3, [r7, #3]
 801388e:	f003 0301 	and.w	r3, r3, #1
 8013892:	2b00      	cmp	r3, #0
 8013894:	d013      	beq.n	80138be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	3304      	adds	r3, #4
 801389a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00e      	beq.n	80138be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138a6:	f003 0308 	and.w	r3, r3, #8
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d007      	beq.n	80138be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	3304      	adds	r3, #4
 80138b2:	4619      	mov	r1, r3
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7fd fb09 	bl	8010ecc <etharp_request>
 80138ba:	e000      	b.n	80138be <netif_issue_reports+0x6e>
    return;
 80138bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	08021098 	.word	0x08021098
 80138c8:	08021258 	.word	0x08021258
 80138cc:	08021104 	.word	0x08021104

080138d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d107      	bne.n	80138ee <netif_set_down+0x1e>
 80138de:	4b12      	ldr	r3, [pc, #72]	; (8013928 <netif_set_down+0x58>)
 80138e0:	f240 329b 	movw	r2, #923	; 0x39b
 80138e4:	4911      	ldr	r1, [pc, #68]	; (801392c <netif_set_down+0x5c>)
 80138e6:	4812      	ldr	r0, [pc, #72]	; (8013930 <netif_set_down+0x60>)
 80138e8:	f008 fdec 	bl	801c4c4 <iprintf>
 80138ec:	e019      	b.n	8013922 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138f4:	f003 0301 	and.w	r3, r3, #1
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d012      	beq.n	8013922 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013902:	f023 0301 	bic.w	r3, r3, #1
 8013906:	b2da      	uxtb	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013914:	f003 0308 	and.w	r3, r3, #8
 8013918:	2b00      	cmp	r3, #0
 801391a:	d002      	beq.n	8013922 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7fc fe8f 	bl	8010640 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	08021098 	.word	0x08021098
 801392c:	0802127c 	.word	0x0802127c
 8013930:	08021104 	.word	0x08021104

08013934 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d107      	bne.n	8013952 <netif_set_link_up+0x1e>
 8013942:	4b15      	ldr	r3, [pc, #84]	; (8013998 <netif_set_link_up+0x64>)
 8013944:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013948:	4914      	ldr	r1, [pc, #80]	; (801399c <netif_set_link_up+0x68>)
 801394a:	4815      	ldr	r0, [pc, #84]	; (80139a0 <netif_set_link_up+0x6c>)
 801394c:	f008 fdba 	bl	801c4c4 <iprintf>
 8013950:	e01e      	b.n	8013990 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013958:	f003 0304 	and.w	r3, r3, #4
 801395c:	2b00      	cmp	r3, #0
 801395e:	d117      	bne.n	8013990 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013966:	f043 0304 	orr.w	r3, r3, #4
 801396a:	b2da      	uxtb	r2, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7fb f8d4 	bl	800eb20 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013978:	2103      	movs	r1, #3
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f7ff ff68 	bl	8013850 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	69db      	ldr	r3, [r3, #28]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d003      	beq.n	8013990 <netif_set_link_up+0x5c>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	69db      	ldr	r3, [r3, #28]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	08021098 	.word	0x08021098
 801399c:	0802129c 	.word	0x0802129c
 80139a0:	08021104 	.word	0x08021104

080139a4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d107      	bne.n	80139c2 <netif_set_link_down+0x1e>
 80139b2:	4b11      	ldr	r3, [pc, #68]	; (80139f8 <netif_set_link_down+0x54>)
 80139b4:	f240 4206 	movw	r2, #1030	; 0x406
 80139b8:	4910      	ldr	r1, [pc, #64]	; (80139fc <netif_set_link_down+0x58>)
 80139ba:	4811      	ldr	r0, [pc, #68]	; (8013a00 <netif_set_link_down+0x5c>)
 80139bc:	f008 fd82 	bl	801c4c4 <iprintf>
 80139c0:	e017      	b.n	80139f2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139c8:	f003 0304 	and.w	r3, r3, #4
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d010      	beq.n	80139f2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139d6:	f023 0304 	bic.w	r3, r3, #4
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	69db      	ldr	r3, [r3, #28]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d003      	beq.n	80139f2 <netif_set_link_down+0x4e>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	08021098 	.word	0x08021098
 80139fc:	080212c0 	.word	0x080212c0
 8013a00:	08021104 	.word	0x08021104

08013a04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d002      	beq.n	8013a1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	61da      	str	r2, [r3, #28]
  }
}
 8013a1a:	bf00      	nop
 8013a1c:	370c      	adds	r7, #12
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr

08013a26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013a26:	b480      	push	{r7}
 8013a28:	b085      	sub	sp, #20
 8013a2a:	af00      	add	r7, sp, #0
 8013a2c:	60f8      	str	r0, [r7, #12]
 8013a2e:	60b9      	str	r1, [r7, #8]
 8013a30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013a32:	f06f 030b 	mvn.w	r3, #11
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3714      	adds	r7, #20
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr
	...

08013a44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013a44:	b480      	push	{r7}
 8013a46:	b085      	sub	sp, #20
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013a4e:	79fb      	ldrb	r3, [r7, #7]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d013      	beq.n	8013a7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013a54:	4b0d      	ldr	r3, [pc, #52]	; (8013a8c <netif_get_by_index+0x48>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	e00c      	b.n	8013a76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a62:	3301      	adds	r3, #1
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	79fa      	ldrb	r2, [r7, #7]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d101      	bne.n	8013a70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	e006      	b.n	8013a7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d1ef      	bne.n	8013a5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3714      	adds	r7, #20
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	24007940 	.word	0x24007940

08013a90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013a96:	f000 ffd1 	bl	8014a3c <sys_arch_protect>
 8013a9a:	6038      	str	r0, [r7, #0]
 8013a9c:	4b0d      	ldr	r3, [pc, #52]	; (8013ad4 <pbuf_free_ooseq+0x44>)
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	701a      	strb	r2, [r3, #0]
 8013aa2:	6838      	ldr	r0, [r7, #0]
 8013aa4:	f000 ffd8 	bl	8014a58 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013aa8:	4b0b      	ldr	r3, [pc, #44]	; (8013ad8 <pbuf_free_ooseq+0x48>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	607b      	str	r3, [r7, #4]
 8013aae:	e00a      	b.n	8013ac6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d003      	beq.n	8013ac0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f002 fe35 	bl	8016728 <tcp_free_ooseq>
      return;
 8013abe:	e005      	b.n	8013acc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	607b      	str	r3, [r7, #4]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1f1      	bne.n	8013ab0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013acc:	3708      	adds	r7, #8
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	24007949 	.word	0x24007949
 8013ad8:	24007960 	.word	0x24007960

08013adc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013ae4:	f7ff ffd4 	bl	8013a90 <pbuf_free_ooseq>
}
 8013ae8:	bf00      	nop
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013af6:	f000 ffa1 	bl	8014a3c <sys_arch_protect>
 8013afa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013afc:	4b0f      	ldr	r3, [pc, #60]	; (8013b3c <pbuf_pool_is_empty+0x4c>)
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013b02:	4b0e      	ldr	r3, [pc, #56]	; (8013b3c <pbuf_pool_is_empty+0x4c>)
 8013b04:	2201      	movs	r2, #1
 8013b06:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f000 ffa5 	bl	8014a58 <sys_arch_unprotect>

  if (!queued) {
 8013b0e:	78fb      	ldrb	r3, [r7, #3]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d10f      	bne.n	8013b34 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013b14:	2100      	movs	r1, #0
 8013b16:	480a      	ldr	r0, [pc, #40]	; (8013b40 <pbuf_pool_is_empty+0x50>)
 8013b18:	f007 f928 	bl	801ad6c <tcpip_try_callback>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d008      	beq.n	8013b34 <pbuf_pool_is_empty+0x44>
 8013b22:	f000 ff8b 	bl	8014a3c <sys_arch_protect>
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	4b04      	ldr	r3, [pc, #16]	; (8013b3c <pbuf_pool_is_empty+0x4c>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	701a      	strb	r2, [r3, #0]
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 ff92 	bl	8014a58 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013b34:	bf00      	nop
 8013b36:	3708      	adds	r7, #8
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	24007949 	.word	0x24007949
 8013b40:	08013add 	.word	0x08013add

08013b44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013b44:	b480      	push	{r7}
 8013b46:	b085      	sub	sp, #20
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	4611      	mov	r1, r2
 8013b50:	461a      	mov	r2, r3
 8013b52:	460b      	mov	r3, r1
 8013b54:	80fb      	strh	r3, [r7, #6]
 8013b56:	4613      	mov	r3, r2
 8013b58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	88fa      	ldrh	r2, [r7, #6]
 8013b6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	88ba      	ldrh	r2, [r7, #4]
 8013b70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013b72:	8b3b      	ldrh	r3, [r7, #24]
 8013b74:	b2da      	uxtb	r2, r3
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	7f3a      	ldrb	r2, [r7, #28]
 8013b7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2201      	movs	r2, #1
 8013b84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	73da      	strb	r2, [r3, #15]
}
 8013b8c:	bf00      	nop
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b08c      	sub	sp, #48	; 0x30
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	71fb      	strb	r3, [r7, #7]
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	80bb      	strh	r3, [r7, #4]
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013baa:	79fb      	ldrb	r3, [r7, #7]
 8013bac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013bae:	887b      	ldrh	r3, [r7, #2]
 8013bb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013bb4:	d07f      	beq.n	8013cb6 <pbuf_alloc+0x11e>
 8013bb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013bba:	f300 80c8 	bgt.w	8013d4e <pbuf_alloc+0x1b6>
 8013bbe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013bc2:	d010      	beq.n	8013be6 <pbuf_alloc+0x4e>
 8013bc4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013bc8:	f300 80c1 	bgt.w	8013d4e <pbuf_alloc+0x1b6>
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d002      	beq.n	8013bd6 <pbuf_alloc+0x3e>
 8013bd0:	2b41      	cmp	r3, #65	; 0x41
 8013bd2:	f040 80bc 	bne.w	8013d4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013bd6:	887a      	ldrh	r2, [r7, #2]
 8013bd8:	88bb      	ldrh	r3, [r7, #4]
 8013bda:	4619      	mov	r1, r3
 8013bdc:	2000      	movs	r0, #0
 8013bde:	f000 f8d1 	bl	8013d84 <pbuf_alloc_reference>
 8013be2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013be4:	e0bd      	b.n	8013d62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013be6:	2300      	movs	r3, #0
 8013be8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013bee:	88bb      	ldrh	r3, [r7, #4]
 8013bf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013bf2:	200c      	movs	r0, #12
 8013bf4:	f7ff faf4 	bl	80131e0 <memp_malloc>
 8013bf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d109      	bne.n	8013c14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013c00:	f7ff ff76 	bl	8013af0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d002      	beq.n	8013c10 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c0c:	f000 faa8 	bl	8014160 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013c10:	2300      	movs	r3, #0
 8013c12:	e0a7      	b.n	8013d64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013c14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c16:	3303      	adds	r3, #3
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	f023 0303 	bic.w	r3, r3, #3
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	8b7a      	ldrh	r2, [r7, #26]
 8013c28:	4293      	cmp	r3, r2
 8013c2a:	bf28      	it	cs
 8013c2c:	4613      	movcs	r3, r2
 8013c2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c32:	3310      	adds	r3, #16
 8013c34:	693a      	ldr	r2, [r7, #16]
 8013c36:	4413      	add	r3, r2
 8013c38:	3303      	adds	r3, #3
 8013c3a:	f023 0303 	bic.w	r3, r3, #3
 8013c3e:	4618      	mov	r0, r3
 8013c40:	89f9      	ldrh	r1, [r7, #14]
 8013c42:	8b7a      	ldrh	r2, [r7, #26]
 8013c44:	2300      	movs	r3, #0
 8013c46:	9301      	str	r3, [sp, #4]
 8013c48:	887b      	ldrh	r3, [r7, #2]
 8013c4a:	9300      	str	r3, [sp, #0]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	4601      	mov	r1, r0
 8013c50:	6938      	ldr	r0, [r7, #16]
 8013c52:	f7ff ff77 	bl	8013b44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	f003 0303 	and.w	r3, r3, #3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d006      	beq.n	8013c70 <pbuf_alloc+0xd8>
 8013c62:	4b42      	ldr	r3, [pc, #264]	; (8013d6c <pbuf_alloc+0x1d4>)
 8013c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c68:	4941      	ldr	r1, [pc, #260]	; (8013d70 <pbuf_alloc+0x1d8>)
 8013c6a:	4842      	ldr	r0, [pc, #264]	; (8013d74 <pbuf_alloc+0x1dc>)
 8013c6c:	f008 fc2a 	bl	801c4c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013c70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c72:	3303      	adds	r3, #3
 8013c74:	f023 0303 	bic.w	r3, r3, #3
 8013c78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c7c:	d106      	bne.n	8013c8c <pbuf_alloc+0xf4>
 8013c7e:	4b3b      	ldr	r3, [pc, #236]	; (8013d6c <pbuf_alloc+0x1d4>)
 8013c80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013c84:	493c      	ldr	r1, [pc, #240]	; (8013d78 <pbuf_alloc+0x1e0>)
 8013c86:	483b      	ldr	r0, [pc, #236]	; (8013d74 <pbuf_alloc+0x1dc>)
 8013c88:	f008 fc1c 	bl	801c4c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d102      	bne.n	8013c98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	627b      	str	r3, [r7, #36]	; 0x24
 8013c96:	e002      	b.n	8013c9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	693a      	ldr	r2, [r7, #16]
 8013c9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013ca2:	8b7a      	ldrh	r2, [r7, #26]
 8013ca4:	89fb      	ldrh	r3, [r7, #14]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013cae:	8b7b      	ldrh	r3, [r7, #26]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d19e      	bne.n	8013bf2 <pbuf_alloc+0x5a>
      break;
 8013cb4:	e055      	b.n	8013d62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013cb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cb8:	3303      	adds	r3, #3
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	f023 0303 	bic.w	r3, r3, #3
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	88bb      	ldrh	r3, [r7, #4]
 8013cc4:	3303      	adds	r3, #3
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	f023 0303 	bic.w	r3, r3, #3
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	4413      	add	r3, r2
 8013cd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013cd2:	8b3b      	ldrh	r3, [r7, #24]
 8013cd4:	3310      	adds	r3, #16
 8013cd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013cd8:	8b3a      	ldrh	r2, [r7, #24]
 8013cda:	88bb      	ldrh	r3, [r7, #4]
 8013cdc:	3303      	adds	r3, #3
 8013cde:	f023 0303 	bic.w	r3, r3, #3
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d306      	bcc.n	8013cf4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013ce6:	8afa      	ldrh	r2, [r7, #22]
 8013ce8:	88bb      	ldrh	r3, [r7, #4]
 8013cea:	3303      	adds	r3, #3
 8013cec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d201      	bcs.n	8013cf8 <pbuf_alloc+0x160>
        return NULL;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e035      	b.n	8013d64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013cf8:	8afb      	ldrh	r3, [r7, #22]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7ff f8c8 	bl	8012e90 <mem_malloc>
 8013d00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d101      	bne.n	8013d0c <pbuf_alloc+0x174>
        return NULL;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e02b      	b.n	8013d64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d0e:	3310      	adds	r3, #16
 8013d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d12:	4413      	add	r3, r2
 8013d14:	3303      	adds	r3, #3
 8013d16:	f023 0303 	bic.w	r3, r3, #3
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	88b9      	ldrh	r1, [r7, #4]
 8013d1e:	88ba      	ldrh	r2, [r7, #4]
 8013d20:	2300      	movs	r3, #0
 8013d22:	9301      	str	r3, [sp, #4]
 8013d24:	887b      	ldrh	r3, [r7, #2]
 8013d26:	9300      	str	r3, [sp, #0]
 8013d28:	460b      	mov	r3, r1
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d2e:	f7ff ff09 	bl	8013b44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	f003 0303 	and.w	r3, r3, #3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d010      	beq.n	8013d60 <pbuf_alloc+0x1c8>
 8013d3e:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <pbuf_alloc+0x1d4>)
 8013d40:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013d44:	490d      	ldr	r1, [pc, #52]	; (8013d7c <pbuf_alloc+0x1e4>)
 8013d46:	480b      	ldr	r0, [pc, #44]	; (8013d74 <pbuf_alloc+0x1dc>)
 8013d48:	f008 fbbc 	bl	801c4c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013d4c:	e008      	b.n	8013d60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013d4e:	4b07      	ldr	r3, [pc, #28]	; (8013d6c <pbuf_alloc+0x1d4>)
 8013d50:	f240 1227 	movw	r2, #295	; 0x127
 8013d54:	490a      	ldr	r1, [pc, #40]	; (8013d80 <pbuf_alloc+0x1e8>)
 8013d56:	4807      	ldr	r0, [pc, #28]	; (8013d74 <pbuf_alloc+0x1dc>)
 8013d58:	f008 fbb4 	bl	801c4c4 <iprintf>
      return NULL;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e001      	b.n	8013d64 <pbuf_alloc+0x1cc>
      break;
 8013d60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3728      	adds	r7, #40	; 0x28
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	080212e4 	.word	0x080212e4
 8013d70:	08021334 	.word	0x08021334
 8013d74:	08021364 	.word	0x08021364
 8013d78:	0802138c 	.word	0x0802138c
 8013d7c:	080213c0 	.word	0x080213c0
 8013d80:	080213ec 	.word	0x080213ec

08013d84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b086      	sub	sp, #24
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	807b      	strh	r3, [r7, #2]
 8013d90:	4613      	mov	r3, r2
 8013d92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013d94:	883b      	ldrh	r3, [r7, #0]
 8013d96:	2b41      	cmp	r3, #65	; 0x41
 8013d98:	d009      	beq.n	8013dae <pbuf_alloc_reference+0x2a>
 8013d9a:	883b      	ldrh	r3, [r7, #0]
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	d006      	beq.n	8013dae <pbuf_alloc_reference+0x2a>
 8013da0:	4b0f      	ldr	r3, [pc, #60]	; (8013de0 <pbuf_alloc_reference+0x5c>)
 8013da2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013da6:	490f      	ldr	r1, [pc, #60]	; (8013de4 <pbuf_alloc_reference+0x60>)
 8013da8:	480f      	ldr	r0, [pc, #60]	; (8013de8 <pbuf_alloc_reference+0x64>)
 8013daa:	f008 fb8b 	bl	801c4c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013dae:	200b      	movs	r0, #11
 8013db0:	f7ff fa16 	bl	80131e0 <memp_malloc>
 8013db4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d101      	bne.n	8013dc0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	e00b      	b.n	8013dd8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013dc0:	8879      	ldrh	r1, [r7, #2]
 8013dc2:	887a      	ldrh	r2, [r7, #2]
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	883b      	ldrh	r3, [r7, #0]
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	460b      	mov	r3, r1
 8013dce:	6879      	ldr	r1, [r7, #4]
 8013dd0:	68f8      	ldr	r0, [r7, #12]
 8013dd2:	f7ff feb7 	bl	8013b44 <pbuf_init_alloced_pbuf>
  return p;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3710      	adds	r7, #16
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	080212e4 	.word	0x080212e4
 8013de4:	08021408 	.word	0x08021408
 8013de8:	08021364 	.word	0x08021364

08013dec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b088      	sub	sp, #32
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	607b      	str	r3, [r7, #4]
 8013df4:	4603      	mov	r3, r0
 8013df6:	73fb      	strb	r3, [r7, #15]
 8013df8:	460b      	mov	r3, r1
 8013dfa:	81bb      	strh	r3, [r7, #12]
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013e00:	7bfb      	ldrb	r3, [r7, #15]
 8013e02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013e04:	8a7b      	ldrh	r3, [r7, #18]
 8013e06:	3303      	adds	r3, #3
 8013e08:	f023 0203 	bic.w	r2, r3, #3
 8013e0c:	89bb      	ldrh	r3, [r7, #12]
 8013e0e:	441a      	add	r2, r3
 8013e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d901      	bls.n	8013e1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013e16:	2300      	movs	r3, #0
 8013e18:	e018      	b.n	8013e4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013e1a:	6a3b      	ldr	r3, [r7, #32]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d007      	beq.n	8013e30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013e20:	8a7b      	ldrh	r3, [r7, #18]
 8013e22:	3303      	adds	r3, #3
 8013e24:	f023 0303 	bic.w	r3, r3, #3
 8013e28:	6a3a      	ldr	r2, [r7, #32]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	617b      	str	r3, [r7, #20]
 8013e2e:	e001      	b.n	8013e34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013e30:	2300      	movs	r3, #0
 8013e32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	89b9      	ldrh	r1, [r7, #12]
 8013e38:	89ba      	ldrh	r2, [r7, #12]
 8013e3a:	2302      	movs	r3, #2
 8013e3c:	9301      	str	r3, [sp, #4]
 8013e3e:	897b      	ldrh	r3, [r7, #10]
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	460b      	mov	r3, r1
 8013e44:	6979      	ldr	r1, [r7, #20]
 8013e46:	f7ff fe7d 	bl	8013b44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013e4a:	687b      	ldr	r3, [r7, #4]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3718      	adds	r7, #24
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b084      	sub	sp, #16
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <pbuf_realloc+0x20>
 8013e66:	4b3a      	ldr	r3, [pc, #232]	; (8013f50 <pbuf_realloc+0xfc>)
 8013e68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013e6c:	4939      	ldr	r1, [pc, #228]	; (8013f54 <pbuf_realloc+0x100>)
 8013e6e:	483a      	ldr	r0, [pc, #232]	; (8013f58 <pbuf_realloc+0x104>)
 8013e70:	f008 fb28 	bl	801c4c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	891b      	ldrh	r3, [r3, #8]
 8013e78:	887a      	ldrh	r2, [r7, #2]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d263      	bcs.n	8013f46 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	891a      	ldrh	r2, [r3, #8]
 8013e82:	887b      	ldrh	r3, [r7, #2]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013e88:	887b      	ldrh	r3, [r7, #2]
 8013e8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013e90:	e018      	b.n	8013ec4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	895b      	ldrh	r3, [r3, #10]
 8013e96:	897a      	ldrh	r2, [r7, #10]
 8013e98:	1ad3      	subs	r3, r2, r3
 8013e9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	891a      	ldrh	r2, [r3, #8]
 8013ea0:	893b      	ldrh	r3, [r7, #8]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d106      	bne.n	8013ec4 <pbuf_realloc+0x70>
 8013eb6:	4b26      	ldr	r3, [pc, #152]	; (8013f50 <pbuf_realloc+0xfc>)
 8013eb8:	f240 12af 	movw	r2, #431	; 0x1af
 8013ebc:	4927      	ldr	r1, [pc, #156]	; (8013f5c <pbuf_realloc+0x108>)
 8013ebe:	4826      	ldr	r0, [pc, #152]	; (8013f58 <pbuf_realloc+0x104>)
 8013ec0:	f008 fb00 	bl	801c4c4 <iprintf>
  while (rem_len > q->len) {
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	895b      	ldrh	r3, [r3, #10]
 8013ec8:	897a      	ldrh	r2, [r7, #10]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d8e1      	bhi.n	8013e92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	7b1b      	ldrb	r3, [r3, #12]
 8013ed2:	f003 030f 	and.w	r3, r3, #15
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d121      	bne.n	8013f1e <pbuf_realloc+0xca>
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	895b      	ldrh	r3, [r3, #10]
 8013ede:	897a      	ldrh	r2, [r7, #10]
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d01c      	beq.n	8013f1e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	7b5b      	ldrb	r3, [r3, #13]
 8013ee8:	f003 0302 	and.w	r3, r3, #2
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d116      	bne.n	8013f1e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	685a      	ldr	r2, [r3, #4]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	1ad3      	subs	r3, r2, r3
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	897b      	ldrh	r3, [r7, #10]
 8013efc:	4413      	add	r3, r2
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	4619      	mov	r1, r3
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f7fe feb4 	bl	8012c70 <mem_trim>
 8013f08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <pbuf_realloc+0xca>
 8013f10:	4b0f      	ldr	r3, [pc, #60]	; (8013f50 <pbuf_realloc+0xfc>)
 8013f12:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013f16:	4912      	ldr	r1, [pc, #72]	; (8013f60 <pbuf_realloc+0x10c>)
 8013f18:	480f      	ldr	r0, [pc, #60]	; (8013f58 <pbuf_realloc+0x104>)
 8013f1a:	f008 fad3 	bl	801c4c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	897a      	ldrh	r2, [r7, #10]
 8013f22:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	895a      	ldrh	r2, [r3, #10]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d004      	beq.n	8013f3e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 f911 	bl	8014160 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2200      	movs	r2, #0
 8013f42:	601a      	str	r2, [r3, #0]
 8013f44:	e000      	b.n	8013f48 <pbuf_realloc+0xf4>
    return;
 8013f46:	bf00      	nop

}
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	080212e4 	.word	0x080212e4
 8013f54:	0802141c 	.word	0x0802141c
 8013f58:	08021364 	.word	0x08021364
 8013f5c:	08021434 	.word	0x08021434
 8013f60:	0802144c 	.word	0x0802144c

08013f64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b086      	sub	sp, #24
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <pbuf_add_header_impl+0x22>
 8013f78:	4b2b      	ldr	r3, [pc, #172]	; (8014028 <pbuf_add_header_impl+0xc4>)
 8013f7a:	f240 12df 	movw	r2, #479	; 0x1df
 8013f7e:	492b      	ldr	r1, [pc, #172]	; (801402c <pbuf_add_header_impl+0xc8>)
 8013f80:	482b      	ldr	r0, [pc, #172]	; (8014030 <pbuf_add_header_impl+0xcc>)
 8013f82:	f008 fa9f 	bl	801c4c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d003      	beq.n	8013f94 <pbuf_add_header_impl+0x30>
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f92:	d301      	bcc.n	8013f98 <pbuf_add_header_impl+0x34>
    return 1;
 8013f94:	2301      	movs	r3, #1
 8013f96:	e043      	b.n	8014020 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d101      	bne.n	8013fa2 <pbuf_add_header_impl+0x3e>
    return 0;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e03e      	b.n	8014020 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	891a      	ldrh	r2, [r3, #8]
 8013faa:	8a7b      	ldrh	r3, [r7, #18]
 8013fac:	4413      	add	r3, r2
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	8a7a      	ldrh	r2, [r7, #18]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d901      	bls.n	8013fba <pbuf_add_header_impl+0x56>
    return 1;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e032      	b.n	8014020 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	7b1b      	ldrb	r3, [r3, #12]
 8013fbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013fc0:	8a3b      	ldrh	r3, [r7, #16]
 8013fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00c      	beq.n	8013fe4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	425b      	negs	r3, r3
 8013fd2:	4413      	add	r3, r2
 8013fd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	3310      	adds	r3, #16
 8013fda:	697a      	ldr	r2, [r7, #20]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d20d      	bcs.n	8013ffc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e01d      	b.n	8014020 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013fe4:	79fb      	ldrb	r3, [r7, #7]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d006      	beq.n	8013ff8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	685a      	ldr	r2, [r3, #4]
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	425b      	negs	r3, r3
 8013ff2:	4413      	add	r3, r2
 8013ff4:	617b      	str	r3, [r7, #20]
 8013ff6:	e001      	b.n	8013ffc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	e011      	b.n	8014020 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	697a      	ldr	r2, [r7, #20]
 8014000:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	895a      	ldrh	r2, [r3, #10]
 8014006:	8a7b      	ldrh	r3, [r7, #18]
 8014008:	4413      	add	r3, r2
 801400a:	b29a      	uxth	r2, r3
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	891a      	ldrh	r2, [r3, #8]
 8014014:	8a7b      	ldrh	r3, [r7, #18]
 8014016:	4413      	add	r3, r2
 8014018:	b29a      	uxth	r2, r3
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	811a      	strh	r2, [r3, #8]


  return 0;
 801401e:	2300      	movs	r3, #0
}
 8014020:	4618      	mov	r0, r3
 8014022:	3718      	adds	r7, #24
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	080212e4 	.word	0x080212e4
 801402c:	08021468 	.word	0x08021468
 8014030:	08021364 	.word	0x08021364

08014034 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801403e:	2200      	movs	r2, #0
 8014040:	6839      	ldr	r1, [r7, #0]
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f7ff ff8e 	bl	8013f64 <pbuf_add_header_impl>
 8014048:	4603      	mov	r3, r0
}
 801404a:	4618      	mov	r0, r3
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
	...

08014054 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b084      	sub	sp, #16
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d106      	bne.n	8014072 <pbuf_remove_header+0x1e>
 8014064:	4b20      	ldr	r3, [pc, #128]	; (80140e8 <pbuf_remove_header+0x94>)
 8014066:	f240 224b 	movw	r2, #587	; 0x24b
 801406a:	4920      	ldr	r1, [pc, #128]	; (80140ec <pbuf_remove_header+0x98>)
 801406c:	4820      	ldr	r0, [pc, #128]	; (80140f0 <pbuf_remove_header+0x9c>)
 801406e:	f008 fa29 	bl	801c4c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d003      	beq.n	8014080 <pbuf_remove_header+0x2c>
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801407e:	d301      	bcc.n	8014084 <pbuf_remove_header+0x30>
    return 1;
 8014080:	2301      	movs	r3, #1
 8014082:	e02c      	b.n	80140de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d101      	bne.n	801408e <pbuf_remove_header+0x3a>
    return 0;
 801408a:	2300      	movs	r3, #0
 801408c:	e027      	b.n	80140de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	895b      	ldrh	r3, [r3, #10]
 8014096:	89fa      	ldrh	r2, [r7, #14]
 8014098:	429a      	cmp	r2, r3
 801409a:	d908      	bls.n	80140ae <pbuf_remove_header+0x5a>
 801409c:	4b12      	ldr	r3, [pc, #72]	; (80140e8 <pbuf_remove_header+0x94>)
 801409e:	f240 2255 	movw	r2, #597	; 0x255
 80140a2:	4914      	ldr	r1, [pc, #80]	; (80140f4 <pbuf_remove_header+0xa0>)
 80140a4:	4812      	ldr	r0, [pc, #72]	; (80140f0 <pbuf_remove_header+0x9c>)
 80140a6:	f008 fa0d 	bl	801c4c4 <iprintf>
 80140aa:	2301      	movs	r3, #1
 80140ac:	e017      	b.n	80140de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	685a      	ldr	r2, [r3, #4]
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	441a      	add	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	895a      	ldrh	r2, [r3, #10]
 80140c4:	89fb      	ldrh	r3, [r7, #14]
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	891a      	ldrh	r2, [r3, #8]
 80140d2:	89fb      	ldrh	r3, [r7, #14]
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3710      	adds	r7, #16
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	080212e4 	.word	0x080212e4
 80140ec:	08021468 	.word	0x08021468
 80140f0:	08021364 	.word	0x08021364
 80140f4:	08021474 	.word	0x08021474

080140f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	460b      	mov	r3, r1
 8014102:	807b      	strh	r3, [r7, #2]
 8014104:	4613      	mov	r3, r2
 8014106:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801410c:	2b00      	cmp	r3, #0
 801410e:	da08      	bge.n	8014122 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014114:	425b      	negs	r3, r3
 8014116:	4619      	mov	r1, r3
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7ff ff9b 	bl	8014054 <pbuf_remove_header>
 801411e:	4603      	mov	r3, r0
 8014120:	e007      	b.n	8014132 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014126:	787a      	ldrb	r2, [r7, #1]
 8014128:	4619      	mov	r1, r3
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ff ff1a 	bl	8013f64 <pbuf_add_header_impl>
 8014130:	4603      	mov	r3, r0
  }
}
 8014132:	4618      	mov	r0, r3
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b082      	sub	sp, #8
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	460b      	mov	r3, r1
 8014144:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801414a:	2201      	movs	r2, #1
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7ff ffd2 	bl	80140f8 <pbuf_header_impl>
 8014154:	4603      	mov	r3, r0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3708      	adds	r7, #8
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
	...

08014160 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d10b      	bne.n	8014186 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d106      	bne.n	8014182 <pbuf_free+0x22>
 8014174:	4b3b      	ldr	r3, [pc, #236]	; (8014264 <pbuf_free+0x104>)
 8014176:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801417a:	493b      	ldr	r1, [pc, #236]	; (8014268 <pbuf_free+0x108>)
 801417c:	483b      	ldr	r0, [pc, #236]	; (801426c <pbuf_free+0x10c>)
 801417e:	f008 f9a1 	bl	801c4c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014182:	2300      	movs	r3, #0
 8014184:	e069      	b.n	801425a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014186:	2300      	movs	r3, #0
 8014188:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801418a:	e062      	b.n	8014252 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801418c:	f000 fc56 	bl	8014a3c <sys_arch_protect>
 8014190:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	7b9b      	ldrb	r3, [r3, #14]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d106      	bne.n	80141a8 <pbuf_free+0x48>
 801419a:	4b32      	ldr	r3, [pc, #200]	; (8014264 <pbuf_free+0x104>)
 801419c:	f240 22f1 	movw	r2, #753	; 0x2f1
 80141a0:	4933      	ldr	r1, [pc, #204]	; (8014270 <pbuf_free+0x110>)
 80141a2:	4832      	ldr	r0, [pc, #200]	; (801426c <pbuf_free+0x10c>)
 80141a4:	f008 f98e 	bl	801c4c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	7b9b      	ldrb	r3, [r3, #14]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	739a      	strb	r2, [r3, #14]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	7b9b      	ldrb	r3, [r3, #14]
 80141b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80141ba:	69b8      	ldr	r0, [r7, #24]
 80141bc:	f000 fc4c 	bl	8014a58 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80141c0:	7dfb      	ldrb	r3, [r7, #23]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d143      	bne.n	801424e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7b1b      	ldrb	r3, [r3, #12]
 80141d0:	f003 030f 	and.w	r3, r3, #15
 80141d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	7b5b      	ldrb	r3, [r3, #13]
 80141da:	f003 0302 	and.w	r3, r3, #2
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d011      	beq.n	8014206 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	691b      	ldr	r3, [r3, #16]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d106      	bne.n	80141fc <pbuf_free+0x9c>
 80141ee:	4b1d      	ldr	r3, [pc, #116]	; (8014264 <pbuf_free+0x104>)
 80141f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80141f4:	491f      	ldr	r1, [pc, #124]	; (8014274 <pbuf_free+0x114>)
 80141f6:	481d      	ldr	r0, [pc, #116]	; (801426c <pbuf_free+0x10c>)
 80141f8:	f008 f964 	bl	801c4c4 <iprintf>
        pc->custom_free_function(p);
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	691b      	ldr	r3, [r3, #16]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	4798      	blx	r3
 8014204:	e01d      	b.n	8014242 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014206:	7bfb      	ldrb	r3, [r7, #15]
 8014208:	2b02      	cmp	r3, #2
 801420a:	d104      	bne.n	8014216 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801420c:	6879      	ldr	r1, [r7, #4]
 801420e:	200c      	movs	r0, #12
 8014210:	f7ff f85c 	bl	80132cc <memp_free>
 8014214:	e015      	b.n	8014242 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014216:	7bfb      	ldrb	r3, [r7, #15]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d104      	bne.n	8014226 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801421c:	6879      	ldr	r1, [r7, #4]
 801421e:	200b      	movs	r0, #11
 8014220:	f7ff f854 	bl	80132cc <memp_free>
 8014224:	e00d      	b.n	8014242 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014226:	7bfb      	ldrb	r3, [r7, #15]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d103      	bne.n	8014234 <pbuf_free+0xd4>
          mem_free(p);
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7fe fc8f 	bl	8012b50 <mem_free>
 8014232:	e006      	b.n	8014242 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014234:	4b0b      	ldr	r3, [pc, #44]	; (8014264 <pbuf_free+0x104>)
 8014236:	f240 320f 	movw	r2, #783	; 0x30f
 801423a:	490f      	ldr	r1, [pc, #60]	; (8014278 <pbuf_free+0x118>)
 801423c:	480b      	ldr	r0, [pc, #44]	; (801426c <pbuf_free+0x10c>)
 801423e:	f008 f941 	bl	801c4c4 <iprintf>
        }
      }
      count++;
 8014242:	7ffb      	ldrb	r3, [r7, #31]
 8014244:	3301      	adds	r3, #1
 8014246:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	607b      	str	r3, [r7, #4]
 801424c:	e001      	b.n	8014252 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801424e:	2300      	movs	r3, #0
 8014250:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d199      	bne.n	801418c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014258:	7ffb      	ldrb	r3, [r7, #31]
}
 801425a:	4618      	mov	r0, r3
 801425c:	3720      	adds	r7, #32
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	080212e4 	.word	0x080212e4
 8014268:	08021468 	.word	0x08021468
 801426c:	08021364 	.word	0x08021364
 8014270:	08021494 	.word	0x08021494
 8014274:	080214ac 	.word	0x080214ac
 8014278:	080214d0 	.word	0x080214d0

0801427c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801427c:	b480      	push	{r7}
 801427e:	b085      	sub	sp, #20
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014284:	2300      	movs	r3, #0
 8014286:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014288:	e005      	b.n	8014296 <pbuf_clen+0x1a>
    ++len;
 801428a:	89fb      	ldrh	r3, [r7, #14]
 801428c:	3301      	adds	r3, #1
 801428e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d1f6      	bne.n	801428a <pbuf_clen+0xe>
  }
  return len;
 801429c:	89fb      	ldrh	r3, [r7, #14]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3714      	adds	r7, #20
 80142a2:	46bd      	mov	sp, r7
 80142a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a8:	4770      	bx	lr
	...

080142ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d016      	beq.n	80142e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80142ba:	f000 fbbf 	bl	8014a3c <sys_arch_protect>
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	7b9b      	ldrb	r3, [r3, #14]
 80142c4:	3301      	adds	r3, #1
 80142c6:	b2da      	uxtb	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	739a      	strb	r2, [r3, #14]
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f000 fbc3 	bl	8014a58 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	7b9b      	ldrb	r3, [r3, #14]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d106      	bne.n	80142e8 <pbuf_ref+0x3c>
 80142da:	4b05      	ldr	r3, [pc, #20]	; (80142f0 <pbuf_ref+0x44>)
 80142dc:	f240 3242 	movw	r2, #834	; 0x342
 80142e0:	4904      	ldr	r1, [pc, #16]	; (80142f4 <pbuf_ref+0x48>)
 80142e2:	4805      	ldr	r0, [pc, #20]	; (80142f8 <pbuf_ref+0x4c>)
 80142e4:	f008 f8ee 	bl	801c4c4 <iprintf>
  }
}
 80142e8:	bf00      	nop
 80142ea:	3710      	adds	r7, #16
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	080212e4 	.word	0x080212e4
 80142f4:	080214e4 	.word	0x080214e4
 80142f8:	08021364 	.word	0x08021364

080142fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <pbuf_cat+0x16>
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d107      	bne.n	8014322 <pbuf_cat+0x26>
 8014312:	4b20      	ldr	r3, [pc, #128]	; (8014394 <pbuf_cat+0x98>)
 8014314:	f240 3259 	movw	r2, #857	; 0x359
 8014318:	491f      	ldr	r1, [pc, #124]	; (8014398 <pbuf_cat+0x9c>)
 801431a:	4820      	ldr	r0, [pc, #128]	; (801439c <pbuf_cat+0xa0>)
 801431c:	f008 f8d2 	bl	801c4c4 <iprintf>
 8014320:	e034      	b.n	801438c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	60fb      	str	r3, [r7, #12]
 8014326:	e00a      	b.n	801433e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	891a      	ldrh	r2, [r3, #8]
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	891b      	ldrh	r3, [r3, #8]
 8014330:	4413      	add	r3, r2
 8014332:	b29a      	uxth	r2, r3
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	60fb      	str	r3, [r7, #12]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d1f0      	bne.n	8014328 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	891a      	ldrh	r2, [r3, #8]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	895b      	ldrh	r3, [r3, #10]
 801434e:	429a      	cmp	r2, r3
 8014350:	d006      	beq.n	8014360 <pbuf_cat+0x64>
 8014352:	4b10      	ldr	r3, [pc, #64]	; (8014394 <pbuf_cat+0x98>)
 8014354:	f240 3262 	movw	r2, #866	; 0x362
 8014358:	4911      	ldr	r1, [pc, #68]	; (80143a0 <pbuf_cat+0xa4>)
 801435a:	4810      	ldr	r0, [pc, #64]	; (801439c <pbuf_cat+0xa0>)
 801435c:	f008 f8b2 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d006      	beq.n	8014376 <pbuf_cat+0x7a>
 8014368:	4b0a      	ldr	r3, [pc, #40]	; (8014394 <pbuf_cat+0x98>)
 801436a:	f240 3263 	movw	r2, #867	; 0x363
 801436e:	490d      	ldr	r1, [pc, #52]	; (80143a4 <pbuf_cat+0xa8>)
 8014370:	480a      	ldr	r0, [pc, #40]	; (801439c <pbuf_cat+0xa0>)
 8014372:	f008 f8a7 	bl	801c4c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	891a      	ldrh	r2, [r3, #8]
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	891b      	ldrh	r3, [r3, #8]
 801437e:	4413      	add	r3, r2
 8014380:	b29a      	uxth	r2, r3
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	683a      	ldr	r2, [r7, #0]
 801438a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801438c:	3710      	adds	r7, #16
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	080212e4 	.word	0x080212e4
 8014398:	080214f8 	.word	0x080214f8
 801439c:	08021364 	.word	0x08021364
 80143a0:	08021530 	.word	0x08021530
 80143a4:	08021560 	.word	0x08021560

080143a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80143b2:	6839      	ldr	r1, [r7, #0]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff ffa1 	bl	80142fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80143ba:	6838      	ldr	r0, [r7, #0]
 80143bc:	f7ff ff76 	bl	80142ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80143c0:	bf00      	nop
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b086      	sub	sp, #24
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80143d2:	2300      	movs	r3, #0
 80143d4:	617b      	str	r3, [r7, #20]
 80143d6:	2300      	movs	r3, #0
 80143d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d008      	beq.n	80143f2 <pbuf_copy+0x2a>
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d005      	beq.n	80143f2 <pbuf_copy+0x2a>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	891a      	ldrh	r2, [r3, #8]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	891b      	ldrh	r3, [r3, #8]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d209      	bcs.n	8014406 <pbuf_copy+0x3e>
 80143f2:	4b57      	ldr	r3, [pc, #348]	; (8014550 <pbuf_copy+0x188>)
 80143f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80143f8:	4956      	ldr	r1, [pc, #344]	; (8014554 <pbuf_copy+0x18c>)
 80143fa:	4857      	ldr	r0, [pc, #348]	; (8014558 <pbuf_copy+0x190>)
 80143fc:	f008 f862 	bl	801c4c4 <iprintf>
 8014400:	f06f 030f 	mvn.w	r3, #15
 8014404:	e09f      	b.n	8014546 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	895b      	ldrh	r3, [r3, #10]
 801440a:	461a      	mov	r2, r3
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	1ad2      	subs	r2, r2, r3
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	895b      	ldrh	r3, [r3, #10]
 8014414:	4619      	mov	r1, r3
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	1acb      	subs	r3, r1, r3
 801441a:	429a      	cmp	r2, r3
 801441c:	d306      	bcc.n	801442c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	895b      	ldrh	r3, [r3, #10]
 8014422:	461a      	mov	r2, r3
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	60fb      	str	r3, [r7, #12]
 801442a:	e005      	b.n	8014438 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	895b      	ldrh	r3, [r3, #10]
 8014430:	461a      	mov	r2, r3
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	1ad3      	subs	r3, r2, r3
 8014436:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	685a      	ldr	r2, [r3, #4]
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	18d0      	adds	r0, r2, r3
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	685a      	ldr	r2, [r3, #4]
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	4413      	add	r3, r2
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	4619      	mov	r1, r3
 801444c:	f007 fbc8 	bl	801bbe0 <memcpy>
    offset_to += len;
 8014450:	697a      	ldr	r2, [r7, #20]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	4413      	add	r3, r2
 8014456:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014458:	693a      	ldr	r2, [r7, #16]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	4413      	add	r3, r2
 801445e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	895b      	ldrh	r3, [r3, #10]
 8014464:	461a      	mov	r2, r3
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	4293      	cmp	r3, r2
 801446a:	d906      	bls.n	801447a <pbuf_copy+0xb2>
 801446c:	4b38      	ldr	r3, [pc, #224]	; (8014550 <pbuf_copy+0x188>)
 801446e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014472:	493a      	ldr	r1, [pc, #232]	; (801455c <pbuf_copy+0x194>)
 8014474:	4838      	ldr	r0, [pc, #224]	; (8014558 <pbuf_copy+0x190>)
 8014476:	f008 f825 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	895b      	ldrh	r3, [r3, #10]
 801447e:	461a      	mov	r2, r3
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	4293      	cmp	r3, r2
 8014484:	d906      	bls.n	8014494 <pbuf_copy+0xcc>
 8014486:	4b32      	ldr	r3, [pc, #200]	; (8014550 <pbuf_copy+0x188>)
 8014488:	f240 32da 	movw	r2, #986	; 0x3da
 801448c:	4934      	ldr	r1, [pc, #208]	; (8014560 <pbuf_copy+0x198>)
 801448e:	4832      	ldr	r0, [pc, #200]	; (8014558 <pbuf_copy+0x190>)
 8014490:	f008 f818 	bl	801c4c4 <iprintf>
    if (offset_from >= p_from->len) {
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	895b      	ldrh	r3, [r3, #10]
 8014498:	461a      	mov	r2, r3
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	4293      	cmp	r3, r2
 801449e:	d304      	bcc.n	80144aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	895b      	ldrh	r3, [r3, #10]
 80144ae:	461a      	mov	r2, r3
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	4293      	cmp	r3, r2
 80144b4:	d114      	bne.n	80144e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d10c      	bne.n	80144e0 <pbuf_copy+0x118>
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d009      	beq.n	80144e0 <pbuf_copy+0x118>
 80144cc:	4b20      	ldr	r3, [pc, #128]	; (8014550 <pbuf_copy+0x188>)
 80144ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80144d2:	4924      	ldr	r1, [pc, #144]	; (8014564 <pbuf_copy+0x19c>)
 80144d4:	4820      	ldr	r0, [pc, #128]	; (8014558 <pbuf_copy+0x190>)
 80144d6:	f007 fff5 	bl	801c4c4 <iprintf>
 80144da:	f06f 030f 	mvn.w	r3, #15
 80144de:	e032      	b.n	8014546 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d013      	beq.n	801450e <pbuf_copy+0x146>
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	895a      	ldrh	r2, [r3, #10]
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	891b      	ldrh	r3, [r3, #8]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d10d      	bne.n	801450e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d009      	beq.n	801450e <pbuf_copy+0x146>
 80144fa:	4b15      	ldr	r3, [pc, #84]	; (8014550 <pbuf_copy+0x188>)
 80144fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014500:	4919      	ldr	r1, [pc, #100]	; (8014568 <pbuf_copy+0x1a0>)
 8014502:	4815      	ldr	r0, [pc, #84]	; (8014558 <pbuf_copy+0x190>)
 8014504:	f007 ffde 	bl	801c4c4 <iprintf>
 8014508:	f06f 0305 	mvn.w	r3, #5
 801450c:	e01b      	b.n	8014546 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d013      	beq.n	801453c <pbuf_copy+0x174>
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	895a      	ldrh	r2, [r3, #10]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	891b      	ldrh	r3, [r3, #8]
 801451c:	429a      	cmp	r2, r3
 801451e:	d10d      	bne.n	801453c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <pbuf_copy+0x174>
 8014528:	4b09      	ldr	r3, [pc, #36]	; (8014550 <pbuf_copy+0x188>)
 801452a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801452e:	490e      	ldr	r1, [pc, #56]	; (8014568 <pbuf_copy+0x1a0>)
 8014530:	4809      	ldr	r0, [pc, #36]	; (8014558 <pbuf_copy+0x190>)
 8014532:	f007 ffc7 	bl	801c4c4 <iprintf>
 8014536:	f06f 0305 	mvn.w	r3, #5
 801453a:	e004      	b.n	8014546 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	f47f af61 	bne.w	8014406 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014544:	2300      	movs	r3, #0
}
 8014546:	4618      	mov	r0, r3
 8014548:	3718      	adds	r7, #24
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	080212e4 	.word	0x080212e4
 8014554:	080215ac 	.word	0x080215ac
 8014558:	08021364 	.word	0x08021364
 801455c:	080215dc 	.word	0x080215dc
 8014560:	080215f4 	.word	0x080215f4
 8014564:	08021610 	.word	0x08021610
 8014568:	08021620 	.word	0x08021620

0801456c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b088      	sub	sp, #32
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	4611      	mov	r1, r2
 8014578:	461a      	mov	r2, r3
 801457a:	460b      	mov	r3, r1
 801457c:	80fb      	strh	r3, [r7, #6]
 801457e:	4613      	mov	r3, r2
 8014580:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014582:	2300      	movs	r3, #0
 8014584:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d108      	bne.n	80145a2 <pbuf_copy_partial+0x36>
 8014590:	4b2b      	ldr	r3, [pc, #172]	; (8014640 <pbuf_copy_partial+0xd4>)
 8014592:	f240 420a 	movw	r2, #1034	; 0x40a
 8014596:	492b      	ldr	r1, [pc, #172]	; (8014644 <pbuf_copy_partial+0xd8>)
 8014598:	482b      	ldr	r0, [pc, #172]	; (8014648 <pbuf_copy_partial+0xdc>)
 801459a:	f007 ff93 	bl	801c4c4 <iprintf>
 801459e:	2300      	movs	r3, #0
 80145a0:	e04a      	b.n	8014638 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d108      	bne.n	80145ba <pbuf_copy_partial+0x4e>
 80145a8:	4b25      	ldr	r3, [pc, #148]	; (8014640 <pbuf_copy_partial+0xd4>)
 80145aa:	f240 420b 	movw	r2, #1035	; 0x40b
 80145ae:	4927      	ldr	r1, [pc, #156]	; (801464c <pbuf_copy_partial+0xe0>)
 80145b0:	4825      	ldr	r0, [pc, #148]	; (8014648 <pbuf_copy_partial+0xdc>)
 80145b2:	f007 ff87 	bl	801c4c4 <iprintf>
 80145b6:	2300      	movs	r3, #0
 80145b8:	e03e      	b.n	8014638 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	61fb      	str	r3, [r7, #28]
 80145be:	e034      	b.n	801462a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80145c0:	88bb      	ldrh	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00a      	beq.n	80145dc <pbuf_copy_partial+0x70>
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	895b      	ldrh	r3, [r3, #10]
 80145ca:	88ba      	ldrh	r2, [r7, #4]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d305      	bcc.n	80145dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	895b      	ldrh	r3, [r3, #10]
 80145d4:	88ba      	ldrh	r2, [r7, #4]
 80145d6:	1ad3      	subs	r3, r2, r3
 80145d8:	80bb      	strh	r3, [r7, #4]
 80145da:	e023      	b.n	8014624 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80145dc:	69fb      	ldr	r3, [r7, #28]
 80145de:	895a      	ldrh	r2, [r3, #10]
 80145e0:	88bb      	ldrh	r3, [r7, #4]
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80145e6:	8b3a      	ldrh	r2, [r7, #24]
 80145e8:	88fb      	ldrh	r3, [r7, #6]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d901      	bls.n	80145f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80145ee:	88fb      	ldrh	r3, [r7, #6]
 80145f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80145f2:	8b7b      	ldrh	r3, [r7, #26]
 80145f4:	68ba      	ldr	r2, [r7, #8]
 80145f6:	18d0      	adds	r0, r2, r3
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	685a      	ldr	r2, [r3, #4]
 80145fc:	88bb      	ldrh	r3, [r7, #4]
 80145fe:	4413      	add	r3, r2
 8014600:	8b3a      	ldrh	r2, [r7, #24]
 8014602:	4619      	mov	r1, r3
 8014604:	f007 faec 	bl	801bbe0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014608:	8afa      	ldrh	r2, [r7, #22]
 801460a:	8b3b      	ldrh	r3, [r7, #24]
 801460c:	4413      	add	r3, r2
 801460e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014610:	8b7a      	ldrh	r2, [r7, #26]
 8014612:	8b3b      	ldrh	r3, [r7, #24]
 8014614:	4413      	add	r3, r2
 8014616:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014618:	88fa      	ldrh	r2, [r7, #6]
 801461a:	8b3b      	ldrh	r3, [r7, #24]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014620:	2300      	movs	r3, #0
 8014622:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	61fb      	str	r3, [r7, #28]
 801462a:	88fb      	ldrh	r3, [r7, #6]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d002      	beq.n	8014636 <pbuf_copy_partial+0xca>
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d1c4      	bne.n	80145c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014636:	8afb      	ldrh	r3, [r7, #22]
}
 8014638:	4618      	mov	r0, r3
 801463a:	3720      	adds	r7, #32
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	080212e4 	.word	0x080212e4
 8014644:	0802164c 	.word	0x0802164c
 8014648:	08021364 	.word	0x08021364
 801464c:	0802166c 	.word	0x0802166c

08014650 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	4603      	mov	r3, r0
 8014658:	603a      	str	r2, [r7, #0]
 801465a:	71fb      	strb	r3, [r7, #7]
 801465c:	460b      	mov	r3, r1
 801465e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	8919      	ldrh	r1, [r3, #8]
 8014664:	88ba      	ldrh	r2, [r7, #4]
 8014666:	79fb      	ldrb	r3, [r7, #7]
 8014668:	4618      	mov	r0, r3
 801466a:	f7ff fa95 	bl	8013b98 <pbuf_alloc>
 801466e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <pbuf_clone+0x2a>
    return NULL;
 8014676:	2300      	movs	r3, #0
 8014678:	e011      	b.n	801469e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f7ff fea3 	bl	80143c8 <pbuf_copy>
 8014682:	4603      	mov	r3, r0
 8014684:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014686:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d006      	beq.n	801469c <pbuf_clone+0x4c>
 801468e:	4b06      	ldr	r3, [pc, #24]	; (80146a8 <pbuf_clone+0x58>)
 8014690:	f240 5224 	movw	r2, #1316	; 0x524
 8014694:	4905      	ldr	r1, [pc, #20]	; (80146ac <pbuf_clone+0x5c>)
 8014696:	4806      	ldr	r0, [pc, #24]	; (80146b0 <pbuf_clone+0x60>)
 8014698:	f007 ff14 	bl	801c4c4 <iprintf>
  return q;
 801469c:	68fb      	ldr	r3, [r7, #12]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	080212e4 	.word	0x080212e4
 80146ac:	08021778 	.word	0x08021778
 80146b0:	08021364 	.word	0x08021364

080146b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b086      	sub	sp, #24
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	60bb      	str	r3, [r7, #8]
 80146c2:	2304      	movs	r3, #4
 80146c4:	60fb      	str	r3, [r7, #12]
 80146c6:	2300      	movs	r3, #0
 80146c8:	613b      	str	r3, [r7, #16]
 80146ca:	2300      	movs	r3, #0
 80146cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80146ce:	f107 0308 	add.w	r3, r7, #8
 80146d2:	2100      	movs	r1, #0
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7f4 fee6 	bl	80094a6 <osMessageCreate>
 80146da:	4602      	mov	r2, r0
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d102      	bne.n	80146ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 80146e8:	f04f 33ff 	mov.w	r3, #4294967295
 80146ec:	e000      	b.n	80146f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80146ee:	2300      	movs	r3, #0
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3718      	adds	r7, #24
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4618      	mov	r0, r3
 8014706:	f7f4 ffab 	bl	8009660 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4618      	mov	r0, r3
 8014710:	f7f4 ffbc 	bl	800968c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014714:	bf00      	nop
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	6839      	ldr	r1, [r7, #0]
 801472c:	2200      	movs	r2, #0
 801472e:	4618      	mov	r0, r3
 8014730:	f7f4 fee2 	bl	80094f8 <osMessagePut>
 8014734:	4603      	mov	r3, r0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d102      	bne.n	8014740 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801473a:	2300      	movs	r3, #0
 801473c:	73fb      	strb	r3, [r7, #15]
 801473e:	e001      	b.n	8014744 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014740:	23ff      	movs	r3, #255	; 0xff
 8014742:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b08c      	sub	sp, #48	; 0x30
 8014754:	af00      	add	r7, sp, #0
 8014756:	61f8      	str	r0, [r7, #28]
 8014758:	61b9      	str	r1, [r7, #24]
 801475a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801475c:	f7f4 fcc1 	bl	80090e2 <osKernelSysTick>
 8014760:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d017      	beq.n	8014798 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	6819      	ldr	r1, [r3, #0]
 801476c:	f107 0320 	add.w	r3, r7, #32
 8014770:	697a      	ldr	r2, [r7, #20]
 8014772:	4618      	mov	r0, r3
 8014774:	f7f4 ff00 	bl	8009578 <osMessageGet>

    if(event.status == osEventMessage)
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	2b10      	cmp	r3, #16
 801477c:	d109      	bne.n	8014792 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	461a      	mov	r2, r3
 8014782:	69bb      	ldr	r3, [r7, #24]
 8014784:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014786:	f7f4 fcac 	bl	80090e2 <osKernelSysTick>
 801478a:	4602      	mov	r2, r0
 801478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	e019      	b.n	80147c6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014792:	f04f 33ff 	mov.w	r3, #4294967295
 8014796:	e016      	b.n	80147c6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	6819      	ldr	r1, [r3, #0]
 801479c:	463b      	mov	r3, r7
 801479e:	f04f 32ff 	mov.w	r2, #4294967295
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7f4 fee8 	bl	8009578 <osMessageGet>
 80147a8:	f107 0320 	add.w	r3, r7, #32
 80147ac:	463a      	mov	r2, r7
 80147ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80147b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80147b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b6:	461a      	mov	r2, r3
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80147bc:	f7f4 fc91 	bl	80090e2 <osKernelSysTick>
 80147c0:	4602      	mov	r2, r0
 80147c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3730      	adds	r7, #48	; 0x30
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b086      	sub	sp, #24
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
 80147d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6819      	ldr	r1, [r3, #0]
 80147dc:	f107 030c 	add.w	r3, r7, #12
 80147e0:	2200      	movs	r2, #0
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7f4 fec8 	bl	8009578 <osMessageGet>

  if(event.status == osEventMessage)
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2b10      	cmp	r3, #16
 80147ec:	d105      	bne.n	80147fa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	461a      	mov	r2, r3
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80147f6:	2300      	movs	r3, #0
 80147f8:	e001      	b.n	80147fe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80147fa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3718      	adds	r7, #24
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}

08014806 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014806:	b480      	push	{r7}
 8014808:	b083      	sub	sp, #12
 801480a:	af00      	add	r7, sp, #0
 801480c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d101      	bne.n	801481a <sys_mbox_valid+0x14>
    return 0;
 8014816:	2300      	movs	r3, #0
 8014818:	e000      	b.n	801481c <sys_mbox_valid+0x16>
  else
    return 1;
 801481a:	2301      	movs	r3, #1
}
 801481c:	4618      	mov	r0, r3
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr

08014828 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2200      	movs	r2, #0
 8014834:	601a      	str	r2, [r3, #0]
}
 8014836:	bf00      	nop
 8014838:	370c      	adds	r7, #12
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr

08014842 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014842:	b580      	push	{r7, lr}
 8014844:	b084      	sub	sp, #16
 8014846:	af00      	add	r7, sp, #0
 8014848:	6078      	str	r0, [r7, #4]
 801484a:	460b      	mov	r3, r1
 801484c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801484e:	2300      	movs	r3, #0
 8014850:	60bb      	str	r3, [r7, #8]
 8014852:	2300      	movs	r3, #0
 8014854:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014856:	f107 0308 	add.w	r3, r7, #8
 801485a:	2101      	movs	r1, #1
 801485c:	4618      	mov	r0, r3
 801485e:	f7f4 fd59 	bl	8009314 <osSemaphoreCreate>
 8014862:	4602      	mov	r2, r0
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014870:	f04f 33ff 	mov.w	r3, #4294967295
 8014874:	e009      	b.n	801488a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014876:	78fb      	ldrb	r3, [r7, #3]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d105      	bne.n	8014888 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2100      	movs	r1, #0
 8014882:	4618      	mov	r0, r3
 8014884:	f7f4 fd78 	bl	8009378 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014888:	2300      	movs	r3, #0
}
 801488a:	4618      	mov	r0, r3
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801489c:	f7f4 fc21 	bl	80090e2 <osKernelSysTick>
 80148a0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d011      	beq.n	80148cc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7f4 fd62 	bl	8009378 <osSemaphoreWait>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d105      	bne.n	80148c6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80148ba:	f7f4 fc12 	bl	80090e2 <osKernelSysTick>
 80148be:	4602      	mov	r2, r0
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	e012      	b.n	80148ec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80148c6:	f04f 33ff 	mov.w	r3, #4294967295
 80148ca:	e00f      	b.n	80148ec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80148cc:	bf00      	nop
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	f04f 31ff 	mov.w	r1, #4294967295
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7f4 fd4e 	bl	8009378 <osSemaphoreWait>
 80148dc:	4603      	mov	r3, r0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d1f5      	bne.n	80148ce <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80148e2:	f7f4 fbfe 	bl	80090e2 <osKernelSysTick>
 80148e6:	4602      	mov	r2, r0
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3710      	adds	r7, #16
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4618      	mov	r0, r3
 8014902:	f7f4 fd87 	bl	8009414 <osSemaphoreRelease>
}
 8014906:	bf00      	nop
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}

0801490e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801490e:	b580      	push	{r7, lr}
 8014910:	b082      	sub	sp, #8
 8014912:	af00      	add	r7, sp, #0
 8014914:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4618      	mov	r0, r3
 801491c:	f7f4 fdb0 	bl	8009480 <osSemaphoreDelete>
}
 8014920:	bf00      	nop
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014928:	b480      	push	{r7}
 801492a:	b083      	sub	sp, #12
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <sys_sem_valid+0x14>
    return 0;
 8014938:	2300      	movs	r3, #0
 801493a:	e000      	b.n	801493e <sys_sem_valid+0x16>
  else
    return 1;
 801493c:	2301      	movs	r3, #1
}
 801493e:	4618      	mov	r0, r3
 8014940:	370c      	adds	r7, #12
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr

0801494a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801494a:	b480      	push	{r7}
 801494c:	b083      	sub	sp, #12
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	601a      	str	r2, [r3, #0]
}
 8014958:	bf00      	nop
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014968:	4803      	ldr	r0, [pc, #12]	; (8014978 <sys_init+0x14>)
 801496a:	f7f4 fc36 	bl	80091da <osMutexCreate>
 801496e:	4603      	mov	r3, r0
 8014970:	4a02      	ldr	r2, [pc, #8]	; (801497c <sys_init+0x18>)
 8014972:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014974:	bf00      	nop
 8014976:	bd80      	pop	{r7, pc}
 8014978:	080465d8 	.word	0x080465d8
 801497c:	24007950 	.word	0x24007950

08014980 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014980:	b580      	push	{r7, lr}
 8014982:	b084      	sub	sp, #16
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014988:	2300      	movs	r3, #0
 801498a:	60bb      	str	r3, [r7, #8]
 801498c:	2300      	movs	r3, #0
 801498e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014990:	f107 0308 	add.w	r3, r7, #8
 8014994:	4618      	mov	r0, r3
 8014996:	f7f4 fc20 	bl	80091da <osMutexCreate>
 801499a:	4602      	mov	r2, r0
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d102      	bne.n	80149ae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80149a8:	f04f 33ff 	mov.w	r3, #4294967295
 80149ac:	e000      	b.n	80149b0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f04f 31ff 	mov.w	r1, #4294967295
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7f4 fc1f 	bl	800920c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80149ce:	bf00      	nop
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b082      	sub	sp, #8
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7f4 fc60 	bl	80092a8 <osMutexRelease>
}
 80149e8:	bf00      	nop
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08c      	sub	sp, #48	; 0x30
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	60b9      	str	r1, [r7, #8]
 80149fa:	607a      	str	r2, [r7, #4]
 80149fc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80149fe:	f107 0314 	add.w	r3, r7, #20
 8014a02:	2200      	movs	r2, #0
 8014a04:	601a      	str	r2, [r3, #0]
 8014a06:	605a      	str	r2, [r3, #4]
 8014a08:	609a      	str	r2, [r3, #8]
 8014a0a:	60da      	str	r2, [r3, #12]
 8014a0c:	611a      	str	r2, [r3, #16]
 8014a0e:	615a      	str	r2, [r3, #20]
 8014a10:	619a      	str	r2, [r3, #24]
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	617b      	str	r3, [r7, #20]
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	61bb      	str	r3, [r7, #24]
 8014a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1c:	b21b      	sxth	r3, r3
 8014a1e:	83bb      	strh	r3, [r7, #28]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014a24:	f107 0314 	add.w	r3, r7, #20
 8014a28:	6879      	ldr	r1, [r7, #4]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7f4 fb69 	bl	8009102 <osThreadCreate>
 8014a30:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3730      	adds	r7, #48	; 0x30
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
	...

08014a3c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014a40:	4b04      	ldr	r3, [pc, #16]	; (8014a54 <sys_arch_protect+0x18>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	f04f 31ff 	mov.w	r1, #4294967295
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7f4 fbdf 	bl	800920c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014a4e:	2301      	movs	r3, #1
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	24007950 	.word	0x24007950

08014a58 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014a60:	4b04      	ldr	r3, [pc, #16]	; (8014a74 <sys_arch_unprotect+0x1c>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f4 fc1f 	bl	80092a8 <osMutexRelease>
}
 8014a6a:	bf00      	nop
 8014a6c:	3708      	adds	r7, #8
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	24007950 	.word	0x24007950

08014a78 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a7c:	f007 fd3a 	bl	801c4f4 <rand>
 8014a80:	4603      	mov	r3, r0
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	4b01      	ldr	r3, [pc, #4]	; (8014a98 <tcp_init+0x20>)
 8014a92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a94:	bf00      	nop
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	2400002c 	.word	0x2400002c

08014a9c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	7d1b      	ldrb	r3, [r3, #20]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d105      	bne.n	8014ab8 <tcp_free+0x1c>
 8014aac:	4b06      	ldr	r3, [pc, #24]	; (8014ac8 <tcp_free+0x2c>)
 8014aae:	22d4      	movs	r2, #212	; 0xd4
 8014ab0:	4906      	ldr	r1, [pc, #24]	; (8014acc <tcp_free+0x30>)
 8014ab2:	4807      	ldr	r0, [pc, #28]	; (8014ad0 <tcp_free+0x34>)
 8014ab4:	f007 fd06 	bl	801c4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014ab8:	6879      	ldr	r1, [r7, #4]
 8014aba:	2001      	movs	r0, #1
 8014abc:	f7fe fc06 	bl	80132cc <memp_free>
}
 8014ac0:	bf00      	nop
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	08021804 	.word	0x08021804
 8014acc:	08021854 	.word	0x08021854
 8014ad0:	08021868 	.word	0x08021868

08014ad4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	7d1b      	ldrb	r3, [r3, #20]
 8014ae0:	2b01      	cmp	r3, #1
 8014ae2:	d105      	bne.n	8014af0 <tcp_free_listen+0x1c>
 8014ae4:	4b06      	ldr	r3, [pc, #24]	; (8014b00 <tcp_free_listen+0x2c>)
 8014ae6:	22df      	movs	r2, #223	; 0xdf
 8014ae8:	4906      	ldr	r1, [pc, #24]	; (8014b04 <tcp_free_listen+0x30>)
 8014aea:	4807      	ldr	r0, [pc, #28]	; (8014b08 <tcp_free_listen+0x34>)
 8014aec:	f007 fcea 	bl	801c4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014af0:	6879      	ldr	r1, [r7, #4]
 8014af2:	2002      	movs	r0, #2
 8014af4:	f7fe fbea 	bl	80132cc <memp_free>
}
 8014af8:	bf00      	nop
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	08021804 	.word	0x08021804
 8014b04:	08021890 	.word	0x08021890
 8014b08:	08021868 	.word	0x08021868

08014b0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014b10:	f001 f8a6 	bl	8015c60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014b14:	4b07      	ldr	r3, [pc, #28]	; (8014b34 <tcp_tmr+0x28>)
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	4b05      	ldr	r3, [pc, #20]	; (8014b34 <tcp_tmr+0x28>)
 8014b1e:	701a      	strb	r2, [r3, #0]
 8014b20:	4b04      	ldr	r3, [pc, #16]	; (8014b34 <tcp_tmr+0x28>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	f003 0301 	and.w	r3, r3, #1
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d001      	beq.n	8014b30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014b2c:	f000 fd58 	bl	80155e0 <tcp_slowtmr>
  }
}
 8014b30:	bf00      	nop
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	24007969 	.word	0x24007969

08014b38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d105      	bne.n	8014b54 <tcp_remove_listener+0x1c>
 8014b48:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <tcp_remove_listener+0x48>)
 8014b4a:	22ff      	movs	r2, #255	; 0xff
 8014b4c:	490d      	ldr	r1, [pc, #52]	; (8014b84 <tcp_remove_listener+0x4c>)
 8014b4e:	480e      	ldr	r0, [pc, #56]	; (8014b88 <tcp_remove_listener+0x50>)
 8014b50:	f007 fcb8 	bl	801c4c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	60fb      	str	r3, [r7, #12]
 8014b58:	e00a      	b.n	8014b70 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b5e:	683a      	ldr	r2, [r7, #0]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d102      	bne.n	8014b6a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2200      	movs	r2, #0
 8014b68:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	60fb      	str	r3, [r7, #12]
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d1f1      	bne.n	8014b5a <tcp_remove_listener+0x22>
    }
  }
}
 8014b76:	bf00      	nop
 8014b78:	bf00      	nop
 8014b7a:	3710      	adds	r7, #16
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	08021804 	.word	0x08021804
 8014b84:	080218ac 	.word	0x080218ac
 8014b88:	08021868 	.word	0x08021868

08014b8c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d106      	bne.n	8014ba8 <tcp_listen_closed+0x1c>
 8014b9a:	4b14      	ldr	r3, [pc, #80]	; (8014bec <tcp_listen_closed+0x60>)
 8014b9c:	f240 1211 	movw	r2, #273	; 0x111
 8014ba0:	4913      	ldr	r1, [pc, #76]	; (8014bf0 <tcp_listen_closed+0x64>)
 8014ba2:	4814      	ldr	r0, [pc, #80]	; (8014bf4 <tcp_listen_closed+0x68>)
 8014ba4:	f007 fc8e 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d006      	beq.n	8014bbe <tcp_listen_closed+0x32>
 8014bb0:	4b0e      	ldr	r3, [pc, #56]	; (8014bec <tcp_listen_closed+0x60>)
 8014bb2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014bb6:	4910      	ldr	r1, [pc, #64]	; (8014bf8 <tcp_listen_closed+0x6c>)
 8014bb8:	480e      	ldr	r0, [pc, #56]	; (8014bf4 <tcp_listen_closed+0x68>)
 8014bba:	f007 fc83 	bl	801c4c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	60fb      	str	r3, [r7, #12]
 8014bc2:	e00b      	b.n	8014bdc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014bc4:	4a0d      	ldr	r2, [pc, #52]	; (8014bfc <tcp_listen_closed+0x70>)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	6879      	ldr	r1, [r7, #4]
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ff ffb1 	bl	8014b38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	60fb      	str	r3, [r7, #12]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2b03      	cmp	r3, #3
 8014be0:	d9f0      	bls.n	8014bc4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014be2:	bf00      	nop
 8014be4:	bf00      	nop
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	08021804 	.word	0x08021804
 8014bf0:	080218d4 	.word	0x080218d4
 8014bf4:	08021868 	.word	0x08021868
 8014bf8:	080218e0 	.word	0x080218e0
 8014bfc:	080465f8 	.word	0x080465f8

08014c00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014c00:	b5b0      	push	{r4, r5, r7, lr}
 8014c02:	b088      	sub	sp, #32
 8014c04:	af04      	add	r7, sp, #16
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	460b      	mov	r3, r1
 8014c0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d106      	bne.n	8014c20 <tcp_close_shutdown+0x20>
 8014c12:	4b63      	ldr	r3, [pc, #396]	; (8014da0 <tcp_close_shutdown+0x1a0>)
 8014c14:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014c18:	4962      	ldr	r1, [pc, #392]	; (8014da4 <tcp_close_shutdown+0x1a4>)
 8014c1a:	4863      	ldr	r0, [pc, #396]	; (8014da8 <tcp_close_shutdown+0x1a8>)
 8014c1c:	f007 fc52 	bl	801c4c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014c20:	78fb      	ldrb	r3, [r7, #3]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d066      	beq.n	8014cf4 <tcp_close_shutdown+0xf4>
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	7d1b      	ldrb	r3, [r3, #20]
 8014c2a:	2b04      	cmp	r3, #4
 8014c2c:	d003      	beq.n	8014c36 <tcp_close_shutdown+0x36>
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	7d1b      	ldrb	r3, [r3, #20]
 8014c32:	2b07      	cmp	r3, #7
 8014c34:	d15e      	bne.n	8014cf4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d104      	bne.n	8014c48 <tcp_close_shutdown+0x48>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014c46:	d055      	beq.n	8014cf4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	8b5b      	ldrh	r3, [r3, #26]
 8014c4c:	f003 0310 	and.w	r3, r3, #16
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d106      	bne.n	8014c62 <tcp_close_shutdown+0x62>
 8014c54:	4b52      	ldr	r3, [pc, #328]	; (8014da0 <tcp_close_shutdown+0x1a0>)
 8014c56:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014c5a:	4954      	ldr	r1, [pc, #336]	; (8014dac <tcp_close_shutdown+0x1ac>)
 8014c5c:	4852      	ldr	r0, [pc, #328]	; (8014da8 <tcp_close_shutdown+0x1a8>)
 8014c5e:	f007 fc31 	bl	801c4c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014c6a:	687d      	ldr	r5, [r7, #4]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	3304      	adds	r3, #4
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	8ad2      	ldrh	r2, [r2, #22]
 8014c74:	6879      	ldr	r1, [r7, #4]
 8014c76:	8b09      	ldrh	r1, [r1, #24]
 8014c78:	9102      	str	r1, [sp, #8]
 8014c7a:	9201      	str	r2, [sp, #4]
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	462b      	mov	r3, r5
 8014c80:	4622      	mov	r2, r4
 8014c82:	4601      	mov	r1, r0
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f005 fdbb 	bl	801a800 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f001 fb98 	bl	80163c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014c90:	4b47      	ldr	r3, [pc, #284]	; (8014db0 <tcp_close_shutdown+0x1b0>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d105      	bne.n	8014ca6 <tcp_close_shutdown+0xa6>
 8014c9a:	4b45      	ldr	r3, [pc, #276]	; (8014db0 <tcp_close_shutdown+0x1b0>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	68db      	ldr	r3, [r3, #12]
 8014ca0:	4a43      	ldr	r2, [pc, #268]	; (8014db0 <tcp_close_shutdown+0x1b0>)
 8014ca2:	6013      	str	r3, [r2, #0]
 8014ca4:	e013      	b.n	8014cce <tcp_close_shutdown+0xce>
 8014ca6:	4b42      	ldr	r3, [pc, #264]	; (8014db0 <tcp_close_shutdown+0x1b0>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	60fb      	str	r3, [r7, #12]
 8014cac:	e00c      	b.n	8014cc8 <tcp_close_shutdown+0xc8>
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d104      	bne.n	8014cc2 <tcp_close_shutdown+0xc2>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68da      	ldr	r2, [r3, #12]
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	60da      	str	r2, [r3, #12]
 8014cc0:	e005      	b.n	8014cce <tcp_close_shutdown+0xce>
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	60fb      	str	r3, [r7, #12]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1ef      	bne.n	8014cae <tcp_close_shutdown+0xae>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	60da      	str	r2, [r3, #12]
 8014cd4:	4b37      	ldr	r3, [pc, #220]	; (8014db4 <tcp_close_shutdown+0x1b4>)
 8014cd6:	2201      	movs	r2, #1
 8014cd8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014cda:	4b37      	ldr	r3, [pc, #220]	; (8014db8 <tcp_close_shutdown+0x1b8>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d102      	bne.n	8014cea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014ce4:	f004 f830 	bl	8018d48 <tcp_trigger_input_pcb_close>
 8014ce8:	e002      	b.n	8014cf0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f7ff fed6 	bl	8014a9c <tcp_free>
      }
      return ERR_OK;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	e050      	b.n	8014d96 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	7d1b      	ldrb	r3, [r3, #20]
 8014cf8:	2b02      	cmp	r3, #2
 8014cfa:	d03b      	beq.n	8014d74 <tcp_close_shutdown+0x174>
 8014cfc:	2b02      	cmp	r3, #2
 8014cfe:	dc44      	bgt.n	8014d8a <tcp_close_shutdown+0x18a>
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d002      	beq.n	8014d0a <tcp_close_shutdown+0x10a>
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d02a      	beq.n	8014d5e <tcp_close_shutdown+0x15e>
 8014d08:	e03f      	b.n	8014d8a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	8adb      	ldrh	r3, [r3, #22]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d021      	beq.n	8014d56 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d12:	4b2a      	ldr	r3, [pc, #168]	; (8014dbc <tcp_close_shutdown+0x1bc>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d105      	bne.n	8014d28 <tcp_close_shutdown+0x128>
 8014d1c:	4b27      	ldr	r3, [pc, #156]	; (8014dbc <tcp_close_shutdown+0x1bc>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	68db      	ldr	r3, [r3, #12]
 8014d22:	4a26      	ldr	r2, [pc, #152]	; (8014dbc <tcp_close_shutdown+0x1bc>)
 8014d24:	6013      	str	r3, [r2, #0]
 8014d26:	e013      	b.n	8014d50 <tcp_close_shutdown+0x150>
 8014d28:	4b24      	ldr	r3, [pc, #144]	; (8014dbc <tcp_close_shutdown+0x1bc>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	60bb      	str	r3, [r7, #8]
 8014d2e:	e00c      	b.n	8014d4a <tcp_close_shutdown+0x14a>
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	68db      	ldr	r3, [r3, #12]
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d104      	bne.n	8014d44 <tcp_close_shutdown+0x144>
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	68da      	ldr	r2, [r3, #12]
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	60da      	str	r2, [r3, #12]
 8014d42:	e005      	b.n	8014d50 <tcp_close_shutdown+0x150>
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	60bb      	str	r3, [r7, #8]
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d1ef      	bne.n	8014d30 <tcp_close_shutdown+0x130>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2200      	movs	r2, #0
 8014d54:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f7ff fea0 	bl	8014a9c <tcp_free>
      break;
 8014d5c:	e01a      	b.n	8014d94 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7ff ff14 	bl	8014b8c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014d64:	6879      	ldr	r1, [r7, #4]
 8014d66:	4816      	ldr	r0, [pc, #88]	; (8014dc0 <tcp_close_shutdown+0x1c0>)
 8014d68:	f001 fb7a 	bl	8016460 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7ff feb1 	bl	8014ad4 <tcp_free_listen>
      break;
 8014d72:	e00f      	b.n	8014d94 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014d74:	6879      	ldr	r1, [r7, #4]
 8014d76:	480e      	ldr	r0, [pc, #56]	; (8014db0 <tcp_close_shutdown+0x1b0>)
 8014d78:	f001 fb72 	bl	8016460 <tcp_pcb_remove>
 8014d7c:	4b0d      	ldr	r3, [pc, #52]	; (8014db4 <tcp_close_shutdown+0x1b4>)
 8014d7e:	2201      	movs	r2, #1
 8014d80:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f7ff fe8a 	bl	8014a9c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014d88:	e004      	b.n	8014d94 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f81a 	bl	8014dc4 <tcp_close_shutdown_fin>
 8014d90:	4603      	mov	r3, r0
 8014d92:	e000      	b.n	8014d96 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d94:	2300      	movs	r3, #0
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	08021804 	.word	0x08021804
 8014da4:	080218f8 	.word	0x080218f8
 8014da8:	08021868 	.word	0x08021868
 8014dac:	08021918 	.word	0x08021918
 8014db0:	24007960 	.word	0x24007960
 8014db4:	24007968 	.word	0x24007968
 8014db8:	240079a0 	.word	0x240079a0
 8014dbc:	24007958 	.word	0x24007958
 8014dc0:	2400795c 	.word	0x2400795c

08014dc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d106      	bne.n	8014de0 <tcp_close_shutdown_fin+0x1c>
 8014dd2:	4b2e      	ldr	r3, [pc, #184]	; (8014e8c <tcp_close_shutdown_fin+0xc8>)
 8014dd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014dd8:	492d      	ldr	r1, [pc, #180]	; (8014e90 <tcp_close_shutdown_fin+0xcc>)
 8014dda:	482e      	ldr	r0, [pc, #184]	; (8014e94 <tcp_close_shutdown_fin+0xd0>)
 8014ddc:	f007 fb72 	bl	801c4c4 <iprintf>

  switch (pcb->state) {
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	7d1b      	ldrb	r3, [r3, #20]
 8014de4:	2b07      	cmp	r3, #7
 8014de6:	d020      	beq.n	8014e2a <tcp_close_shutdown_fin+0x66>
 8014de8:	2b07      	cmp	r3, #7
 8014dea:	dc2b      	bgt.n	8014e44 <tcp_close_shutdown_fin+0x80>
 8014dec:	2b03      	cmp	r3, #3
 8014dee:	d002      	beq.n	8014df6 <tcp_close_shutdown_fin+0x32>
 8014df0:	2b04      	cmp	r3, #4
 8014df2:	d00d      	beq.n	8014e10 <tcp_close_shutdown_fin+0x4c>
 8014df4:	e026      	b.n	8014e44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f004 fe10 	bl	8019a1c <tcp_send_fin>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d11f      	bne.n	8014e48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2205      	movs	r2, #5
 8014e0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e0e:	e01b      	b.n	8014e48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f004 fe03 	bl	8019a1c <tcp_send_fin>
 8014e16:	4603      	mov	r3, r0
 8014e18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d114      	bne.n	8014e4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2205      	movs	r2, #5
 8014e26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e28:	e010      	b.n	8014e4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f004 fdf6 	bl	8019a1c <tcp_send_fin>
 8014e30:	4603      	mov	r3, r0
 8014e32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d109      	bne.n	8014e50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2209      	movs	r2, #9
 8014e40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e42:	e005      	b.n	8014e50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	e01c      	b.n	8014e82 <tcp_close_shutdown_fin+0xbe>
      break;
 8014e48:	bf00      	nop
 8014e4a:	e002      	b.n	8014e52 <tcp_close_shutdown_fin+0x8e>
      break;
 8014e4c:	bf00      	nop
 8014e4e:	e000      	b.n	8014e52 <tcp_close_shutdown_fin+0x8e>
      break;
 8014e50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d103      	bne.n	8014e62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f004 ff1c 	bl	8019c98 <tcp_output>
 8014e60:	e00d      	b.n	8014e7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e6a:	d108      	bne.n	8014e7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	8b5b      	ldrh	r3, [r3, #26]
 8014e70:	f043 0308 	orr.w	r3, r3, #8
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e001      	b.n	8014e82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3710      	adds	r7, #16
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	08021804 	.word	0x08021804
 8014e90:	080218d4 	.word	0x080218d4
 8014e94:	08021868 	.word	0x08021868

08014e98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d109      	bne.n	8014eba <tcp_close+0x22>
 8014ea6:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <tcp_close+0x4c>)
 8014ea8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014eac:	490e      	ldr	r1, [pc, #56]	; (8014ee8 <tcp_close+0x50>)
 8014eae:	480f      	ldr	r0, [pc, #60]	; (8014eec <tcp_close+0x54>)
 8014eb0:	f007 fb08 	bl	801c4c4 <iprintf>
 8014eb4:	f06f 030f 	mvn.w	r3, #15
 8014eb8:	e00f      	b.n	8014eda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	7d1b      	ldrb	r3, [r3, #20]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d006      	beq.n	8014ed0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	8b5b      	ldrh	r3, [r3, #26]
 8014ec6:	f043 0310 	orr.w	r3, r3, #16
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014ed0:	2101      	movs	r1, #1
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f7ff fe94 	bl	8014c00 <tcp_close_shutdown>
 8014ed8:	4603      	mov	r3, r0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	08021804 	.word	0x08021804
 8014ee8:	08021934 	.word	0x08021934
 8014eec:	08021868 	.word	0x08021868

08014ef0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d109      	bne.n	8014f16 <tcp_shutdown+0x26>
 8014f02:	4b26      	ldr	r3, [pc, #152]	; (8014f9c <tcp_shutdown+0xac>)
 8014f04:	f240 2207 	movw	r2, #519	; 0x207
 8014f08:	4925      	ldr	r1, [pc, #148]	; (8014fa0 <tcp_shutdown+0xb0>)
 8014f0a:	4826      	ldr	r0, [pc, #152]	; (8014fa4 <tcp_shutdown+0xb4>)
 8014f0c:	f007 fada 	bl	801c4c4 <iprintf>
 8014f10:	f06f 030f 	mvn.w	r3, #15
 8014f14:	e03d      	b.n	8014f92 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	7d1b      	ldrb	r3, [r3, #20]
 8014f1a:	2b01      	cmp	r3, #1
 8014f1c:	d102      	bne.n	8014f24 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014f1e:	f06f 030a 	mvn.w	r3, #10
 8014f22:	e036      	b.n	8014f92 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d01b      	beq.n	8014f62 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	8b5b      	ldrh	r3, [r3, #26]
 8014f2e:	f043 0310 	orr.w	r3, r3, #16
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d005      	beq.n	8014f4a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014f3e:	2101      	movs	r1, #1
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	f7ff fe5d 	bl	8014c00 <tcp_close_shutdown>
 8014f46:	4603      	mov	r3, r0
 8014f48:	e023      	b.n	8014f92 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d007      	beq.n	8014f62 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7ff f902 	bl	8014160 <pbuf_free>
      pcb->refused_data = NULL;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d013      	beq.n	8014f90 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	7d1b      	ldrb	r3, [r3, #20]
 8014f6c:	2b04      	cmp	r3, #4
 8014f6e:	dc02      	bgt.n	8014f76 <tcp_shutdown+0x86>
 8014f70:	2b03      	cmp	r3, #3
 8014f72:	da02      	bge.n	8014f7a <tcp_shutdown+0x8a>
 8014f74:	e009      	b.n	8014f8a <tcp_shutdown+0x9a>
 8014f76:	2b07      	cmp	r3, #7
 8014f78:	d107      	bne.n	8014f8a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	b2db      	uxtb	r3, r3
 8014f7e:	4619      	mov	r1, r3
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f7ff fe3d 	bl	8014c00 <tcp_close_shutdown>
 8014f86:	4603      	mov	r3, r0
 8014f88:	e003      	b.n	8014f92 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014f8a:	f06f 030a 	mvn.w	r3, #10
 8014f8e:	e000      	b.n	8014f92 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	08021804 	.word	0x08021804
 8014fa0:	0802194c 	.word	0x0802194c
 8014fa4:	08021868 	.word	0x08021868

08014fa8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b08e      	sub	sp, #56	; 0x38
 8014fac:	af04      	add	r7, sp, #16
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d107      	bne.n	8014fc8 <tcp_abandon+0x20>
 8014fb8:	4b52      	ldr	r3, [pc, #328]	; (8015104 <tcp_abandon+0x15c>)
 8014fba:	f240 223d 	movw	r2, #573	; 0x23d
 8014fbe:	4952      	ldr	r1, [pc, #328]	; (8015108 <tcp_abandon+0x160>)
 8014fc0:	4852      	ldr	r0, [pc, #328]	; (801510c <tcp_abandon+0x164>)
 8014fc2:	f007 fa7f 	bl	801c4c4 <iprintf>
 8014fc6:	e099      	b.n	80150fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	7d1b      	ldrb	r3, [r3, #20]
 8014fcc:	2b01      	cmp	r3, #1
 8014fce:	d106      	bne.n	8014fde <tcp_abandon+0x36>
 8014fd0:	4b4c      	ldr	r3, [pc, #304]	; (8015104 <tcp_abandon+0x15c>)
 8014fd2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014fd6:	494e      	ldr	r1, [pc, #312]	; (8015110 <tcp_abandon+0x168>)
 8014fd8:	484c      	ldr	r0, [pc, #304]	; (801510c <tcp_abandon+0x164>)
 8014fda:	f007 fa73 	bl	801c4c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	7d1b      	ldrb	r3, [r3, #20]
 8014fe2:	2b0a      	cmp	r3, #10
 8014fe4:	d107      	bne.n	8014ff6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014fe6:	6879      	ldr	r1, [r7, #4]
 8014fe8:	484a      	ldr	r0, [pc, #296]	; (8015114 <tcp_abandon+0x16c>)
 8014fea:	f001 fa39 	bl	8016460 <tcp_pcb_remove>
    tcp_free(pcb);
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7ff fd54 	bl	8014a9c <tcp_free>
 8014ff4:	e082      	b.n	80150fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015002:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015008:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015010:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	691b      	ldr	r3, [r3, #16]
 8015016:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	7d1b      	ldrb	r3, [r3, #20]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d126      	bne.n	801506e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8adb      	ldrh	r3, [r3, #22]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d02e      	beq.n	8015086 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015028:	4b3b      	ldr	r3, [pc, #236]	; (8015118 <tcp_abandon+0x170>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	429a      	cmp	r2, r3
 8015030:	d105      	bne.n	801503e <tcp_abandon+0x96>
 8015032:	4b39      	ldr	r3, [pc, #228]	; (8015118 <tcp_abandon+0x170>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	4a37      	ldr	r2, [pc, #220]	; (8015118 <tcp_abandon+0x170>)
 801503a:	6013      	str	r3, [r2, #0]
 801503c:	e013      	b.n	8015066 <tcp_abandon+0xbe>
 801503e:	4b36      	ldr	r3, [pc, #216]	; (8015118 <tcp_abandon+0x170>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	61fb      	str	r3, [r7, #28]
 8015044:	e00c      	b.n	8015060 <tcp_abandon+0xb8>
 8015046:	69fb      	ldr	r3, [r7, #28]
 8015048:	68db      	ldr	r3, [r3, #12]
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	429a      	cmp	r2, r3
 801504e:	d104      	bne.n	801505a <tcp_abandon+0xb2>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	68da      	ldr	r2, [r3, #12]
 8015054:	69fb      	ldr	r3, [r7, #28]
 8015056:	60da      	str	r2, [r3, #12]
 8015058:	e005      	b.n	8015066 <tcp_abandon+0xbe>
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	61fb      	str	r3, [r7, #28]
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1ef      	bne.n	8015046 <tcp_abandon+0x9e>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2200      	movs	r2, #0
 801506a:	60da      	str	r2, [r3, #12]
 801506c:	e00b      	b.n	8015086 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8adb      	ldrh	r3, [r3, #22]
 8015076:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015078:	6879      	ldr	r1, [r7, #4]
 801507a:	4828      	ldr	r0, [pc, #160]	; (801511c <tcp_abandon+0x174>)
 801507c:	f001 f9f0 	bl	8016460 <tcp_pcb_remove>
 8015080:	4b27      	ldr	r3, [pc, #156]	; (8015120 <tcp_abandon+0x178>)
 8015082:	2201      	movs	r2, #1
 8015084:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801508a:	2b00      	cmp	r3, #0
 801508c:	d004      	beq.n	8015098 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015092:	4618      	mov	r0, r3
 8015094:	f000 fec4 	bl	8015e20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801509c:	2b00      	cmp	r3, #0
 801509e:	d004      	beq.n	80150aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 febb 	bl	8015e20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d004      	beq.n	80150bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150b6:	4618      	mov	r0, r3
 80150b8:	f000 feb2 	bl	8015e20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00e      	beq.n	80150e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80150c2:	6879      	ldr	r1, [r7, #4]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3304      	adds	r3, #4
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	8b12      	ldrh	r2, [r2, #24]
 80150cc:	9202      	str	r2, [sp, #8]
 80150ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80150d0:	9201      	str	r2, [sp, #4]
 80150d2:	9300      	str	r3, [sp, #0]
 80150d4:	460b      	mov	r3, r1
 80150d6:	697a      	ldr	r2, [r7, #20]
 80150d8:	69b9      	ldr	r1, [r7, #24]
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f005 fb90 	bl	801a800 <tcp_rst>
    }
    last_state = pcb->state;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	7d1b      	ldrb	r3, [r3, #20]
 80150e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7ff fcd8 	bl	8014a9c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d004      	beq.n	80150fc <tcp_abandon+0x154>
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	f06f 010c 	mvn.w	r1, #12
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	4798      	blx	r3
  }
}
 80150fc:	3728      	adds	r7, #40	; 0x28
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	08021804 	.word	0x08021804
 8015108:	08021968 	.word	0x08021968
 801510c:	08021868 	.word	0x08021868
 8015110:	08021984 	.word	0x08021984
 8015114:	24007964 	.word	0x24007964
 8015118:	24007958 	.word	0x24007958
 801511c:	24007960 	.word	0x24007960
 8015120:	24007968 	.word	0x24007968

08015124 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801512c:	2101      	movs	r1, #1
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff ff3a 	bl	8014fa8 <tcp_abandon>
}
 8015134:	bf00      	nop
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}

0801513c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b088      	sub	sp, #32
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	4613      	mov	r3, r2
 8015148:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801514a:	2304      	movs	r3, #4
 801514c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d101      	bne.n	8015158 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015154:	4b3e      	ldr	r3, [pc, #248]	; (8015250 <tcp_bind+0x114>)
 8015156:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d109      	bne.n	8015172 <tcp_bind+0x36>
 801515e:	4b3d      	ldr	r3, [pc, #244]	; (8015254 <tcp_bind+0x118>)
 8015160:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015164:	493c      	ldr	r1, [pc, #240]	; (8015258 <tcp_bind+0x11c>)
 8015166:	483d      	ldr	r0, [pc, #244]	; (801525c <tcp_bind+0x120>)
 8015168:	f007 f9ac 	bl	801c4c4 <iprintf>
 801516c:	f06f 030f 	mvn.w	r3, #15
 8015170:	e06a      	b.n	8015248 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	7d1b      	ldrb	r3, [r3, #20]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d009      	beq.n	801518e <tcp_bind+0x52>
 801517a:	4b36      	ldr	r3, [pc, #216]	; (8015254 <tcp_bind+0x118>)
 801517c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015180:	4937      	ldr	r1, [pc, #220]	; (8015260 <tcp_bind+0x124>)
 8015182:	4836      	ldr	r0, [pc, #216]	; (801525c <tcp_bind+0x120>)
 8015184:	f007 f99e 	bl	801c4c4 <iprintf>
 8015188:	f06f 0305 	mvn.w	r3, #5
 801518c:	e05c      	b.n	8015248 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801518e:	88fb      	ldrh	r3, [r7, #6]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d109      	bne.n	80151a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015194:	f000 f9de 	bl	8015554 <tcp_new_port>
 8015198:	4603      	mov	r3, r0
 801519a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801519c:	88fb      	ldrh	r3, [r7, #6]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d135      	bne.n	801520e <tcp_bind+0xd2>
      return ERR_BUF;
 80151a2:	f06f 0301 	mvn.w	r3, #1
 80151a6:	e04f      	b.n	8015248 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80151a8:	2300      	movs	r3, #0
 80151aa:	61fb      	str	r3, [r7, #28]
 80151ac:	e02b      	b.n	8015206 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80151ae:	4a2d      	ldr	r2, [pc, #180]	; (8015264 <tcp_bind+0x128>)
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	61bb      	str	r3, [r7, #24]
 80151ba:	e01e      	b.n	80151fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	8adb      	ldrh	r3, [r3, #22]
 80151c0:	88fa      	ldrh	r2, [r7, #6]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d116      	bne.n	80151f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80151c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d010      	beq.n	80151ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00c      	beq.n	80151ee <tcp_bind+0xb2>
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d009      	beq.n	80151ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d005      	beq.n	80151ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80151e2:	69bb      	ldr	r3, [r7, #24]
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d102      	bne.n	80151f4 <tcp_bind+0xb8>
              return ERR_USE;
 80151ee:	f06f 0307 	mvn.w	r3, #7
 80151f2:	e029      	b.n	8015248 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	61bb      	str	r3, [r7, #24]
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1dd      	bne.n	80151bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	3301      	adds	r3, #1
 8015204:	61fb      	str	r3, [r7, #28]
 8015206:	69fa      	ldr	r2, [r7, #28]
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	429a      	cmp	r2, r3
 801520c:	dbcf      	blt.n	80151ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d00c      	beq.n	801522e <tcp_bind+0xf2>
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d008      	beq.n	801522e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d002      	beq.n	8015228 <tcp_bind+0xec>
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	e000      	b.n	801522a <tcp_bind+0xee>
 8015228:	2300      	movs	r3, #0
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	88fa      	ldrh	r2, [r7, #6]
 8015232:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015234:	4b0c      	ldr	r3, [pc, #48]	; (8015268 <tcp_bind+0x12c>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	60da      	str	r2, [r3, #12]
 801523c:	4a0a      	ldr	r2, [pc, #40]	; (8015268 <tcp_bind+0x12c>)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	6013      	str	r3, [r2, #0]
 8015242:	f005 fe57 	bl	801aef4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015246:	2300      	movs	r3, #0
}
 8015248:	4618      	mov	r0, r3
 801524a:	3720      	adds	r7, #32
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	08046500 	.word	0x08046500
 8015254:	08021804 	.word	0x08021804
 8015258:	080219b8 	.word	0x080219b8
 801525c:	08021868 	.word	0x08021868
 8015260:	080219d0 	.word	0x080219d0
 8015264:	080465f8 	.word	0x080465f8
 8015268:	24007958 	.word	0x24007958

0801526c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	4613      	mov	r3, r2
 8015278:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d106      	bne.n	801528e <tcp_accept_null+0x22>
 8015280:	4b07      	ldr	r3, [pc, #28]	; (80152a0 <tcp_accept_null+0x34>)
 8015282:	f240 320f 	movw	r2, #783	; 0x30f
 8015286:	4907      	ldr	r1, [pc, #28]	; (80152a4 <tcp_accept_null+0x38>)
 8015288:	4807      	ldr	r0, [pc, #28]	; (80152a8 <tcp_accept_null+0x3c>)
 801528a:	f007 f91b 	bl	801c4c4 <iprintf>

  tcp_abort(pcb);
 801528e:	68b8      	ldr	r0, [r7, #8]
 8015290:	f7ff ff48 	bl	8015124 <tcp_abort>

  return ERR_ABRT;
 8015294:	f06f 030c 	mvn.w	r3, #12
}
 8015298:	4618      	mov	r0, r3
 801529a:	3710      	adds	r7, #16
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	08021804 	.word	0x08021804
 80152a4:	080219f8 	.word	0x080219f8
 80152a8:	08021868 	.word	0x08021868

080152ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b088      	sub	sp, #32
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	60f8      	str	r0, [r7, #12]
 80152b4:	460b      	mov	r3, r1
 80152b6:	607a      	str	r2, [r7, #4]
 80152b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80152ba:	2300      	movs	r3, #0
 80152bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d109      	bne.n	80152d8 <tcp_listen_with_backlog_and_err+0x2c>
 80152c4:	4b47      	ldr	r3, [pc, #284]	; (80153e4 <tcp_listen_with_backlog_and_err+0x138>)
 80152c6:	f240 3259 	movw	r2, #857	; 0x359
 80152ca:	4947      	ldr	r1, [pc, #284]	; (80153e8 <tcp_listen_with_backlog_and_err+0x13c>)
 80152cc:	4847      	ldr	r0, [pc, #284]	; (80153ec <tcp_listen_with_backlog_and_err+0x140>)
 80152ce:	f007 f8f9 	bl	801c4c4 <iprintf>
 80152d2:	23f0      	movs	r3, #240	; 0xf0
 80152d4:	76fb      	strb	r3, [r7, #27]
 80152d6:	e079      	b.n	80153cc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	7d1b      	ldrb	r3, [r3, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d009      	beq.n	80152f4 <tcp_listen_with_backlog_and_err+0x48>
 80152e0:	4b40      	ldr	r3, [pc, #256]	; (80153e4 <tcp_listen_with_backlog_and_err+0x138>)
 80152e2:	f240 325a 	movw	r2, #858	; 0x35a
 80152e6:	4942      	ldr	r1, [pc, #264]	; (80153f0 <tcp_listen_with_backlog_and_err+0x144>)
 80152e8:	4840      	ldr	r0, [pc, #256]	; (80153ec <tcp_listen_with_backlog_and_err+0x140>)
 80152ea:	f007 f8eb 	bl	801c4c4 <iprintf>
 80152ee:	23f1      	movs	r3, #241	; 0xf1
 80152f0:	76fb      	strb	r3, [r7, #27]
 80152f2:	e06b      	b.n	80153cc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	7d1b      	ldrb	r3, [r3, #20]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d104      	bne.n	8015306 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015300:	23f7      	movs	r3, #247	; 0xf7
 8015302:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015304:	e062      	b.n	80153cc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015306:	2002      	movs	r0, #2
 8015308:	f7fd ff6a 	bl	80131e0 <memp_malloc>
 801530c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d102      	bne.n	801531a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015314:	23ff      	movs	r3, #255	; 0xff
 8015316:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015318:	e058      	b.n	80153cc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	691a      	ldr	r2, [r3, #16]
 801531e:	69fb      	ldr	r3, [r7, #28]
 8015320:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	8ada      	ldrh	r2, [r3, #22]
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	2201      	movs	r2, #1
 801532e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	7d5a      	ldrb	r2, [r3, #21]
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	7a5a      	ldrb	r2, [r3, #9]
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	2200      	movs	r2, #0
 8015344:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	7ada      	ldrb	r2, [r3, #11]
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	7a9a      	ldrb	r2, [r3, #10]
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	681a      	ldr	r2, [r3, #0]
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	8adb      	ldrh	r3, [r3, #22]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d021      	beq.n	80153aa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015366:	4b23      	ldr	r3, [pc, #140]	; (80153f4 <tcp_listen_with_backlog_and_err+0x148>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	429a      	cmp	r2, r3
 801536e:	d105      	bne.n	801537c <tcp_listen_with_backlog_and_err+0xd0>
 8015370:	4b20      	ldr	r3, [pc, #128]	; (80153f4 <tcp_listen_with_backlog_and_err+0x148>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	68db      	ldr	r3, [r3, #12]
 8015376:	4a1f      	ldr	r2, [pc, #124]	; (80153f4 <tcp_listen_with_backlog_and_err+0x148>)
 8015378:	6013      	str	r3, [r2, #0]
 801537a:	e013      	b.n	80153a4 <tcp_listen_with_backlog_and_err+0xf8>
 801537c:	4b1d      	ldr	r3, [pc, #116]	; (80153f4 <tcp_listen_with_backlog_and_err+0x148>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	617b      	str	r3, [r7, #20]
 8015382:	e00c      	b.n	801539e <tcp_listen_with_backlog_and_err+0xf2>
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	429a      	cmp	r2, r3
 801538c:	d104      	bne.n	8015398 <tcp_listen_with_backlog_and_err+0xec>
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	68da      	ldr	r2, [r3, #12]
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	60da      	str	r2, [r3, #12]
 8015396:	e005      	b.n	80153a4 <tcp_listen_with_backlog_and_err+0xf8>
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	68db      	ldr	r3, [r3, #12]
 801539c:	617b      	str	r3, [r7, #20]
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d1ef      	bne.n	8015384 <tcp_listen_with_backlog_and_err+0xd8>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2200      	movs	r2, #0
 80153a8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f7ff fb76 	bl	8014a9c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	4a11      	ldr	r2, [pc, #68]	; (80153f8 <tcp_listen_with_backlog_and_err+0x14c>)
 80153b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153b6:	4b11      	ldr	r3, [pc, #68]	; (80153fc <tcp_listen_with_backlog_and_err+0x150>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	60da      	str	r2, [r3, #12]
 80153be:	4a0f      	ldr	r2, [pc, #60]	; (80153fc <tcp_listen_with_backlog_and_err+0x150>)
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	6013      	str	r3, [r2, #0]
 80153c4:	f005 fd96 	bl	801aef4 <tcp_timer_needed>
  res = ERR_OK;
 80153c8:	2300      	movs	r3, #0
 80153ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d002      	beq.n	80153d8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	7efa      	ldrb	r2, [r7, #27]
 80153d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80153d8:	69fb      	ldr	r3, [r7, #28]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3720      	adds	r7, #32
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	08021804 	.word	0x08021804
 80153e8:	08021a18 	.word	0x08021a18
 80153ec:	08021868 	.word	0x08021868
 80153f0:	08021a48 	.word	0x08021a48
 80153f4:	24007958 	.word	0x24007958
 80153f8:	0801526d 	.word	0x0801526d
 80153fc:	2400795c 	.word	0x2400795c

08015400 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d106      	bne.n	801541c <tcp_update_rcv_ann_wnd+0x1c>
 801540e:	4b25      	ldr	r3, [pc, #148]	; (80154a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015410:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015414:	4924      	ldr	r1, [pc, #144]	; (80154a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015416:	4825      	ldr	r0, [pc, #148]	; (80154ac <tcp_update_rcv_ann_wnd+0xac>)
 8015418:	f007 f854 	bl	801c4c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015424:	4413      	add	r3, r2
 8015426:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015430:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015434:	bf28      	it	cs
 8015436:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801543a:	b292      	uxth	r2, r2
 801543c:	4413      	add	r3, r2
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	2b00      	cmp	r3, #0
 8015444:	db08      	blt.n	8015458 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	1ad3      	subs	r3, r2, r3
 8015456:	e020      	b.n	801549a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	2b00      	cmp	r3, #0
 8015464:	dd03      	ble.n	801546e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801546c:	e014      	b.n	8015498 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015480:	d306      	bcc.n	8015490 <tcp_update_rcv_ann_wnd+0x90>
 8015482:	4b08      	ldr	r3, [pc, #32]	; (80154a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015484:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015488:	4909      	ldr	r1, [pc, #36]	; (80154b0 <tcp_update_rcv_ann_wnd+0xb0>)
 801548a:	4808      	ldr	r0, [pc, #32]	; (80154ac <tcp_update_rcv_ann_wnd+0xac>)
 801548c:	f007 f81a 	bl	801c4c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	b29a      	uxth	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015498:	2300      	movs	r3, #0
  }
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	08021804 	.word	0x08021804
 80154a8:	08021a80 	.word	0x08021a80
 80154ac:	08021868 	.word	0x08021868
 80154b0:	08021aa4 	.word	0x08021aa4

080154b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b084      	sub	sp, #16
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
 80154bc:	460b      	mov	r3, r1
 80154be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d107      	bne.n	80154d6 <tcp_recved+0x22>
 80154c6:	4b1f      	ldr	r3, [pc, #124]	; (8015544 <tcp_recved+0x90>)
 80154c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80154cc:	491e      	ldr	r1, [pc, #120]	; (8015548 <tcp_recved+0x94>)
 80154ce:	481f      	ldr	r0, [pc, #124]	; (801554c <tcp_recved+0x98>)
 80154d0:	f006 fff8 	bl	801c4c4 <iprintf>
 80154d4:	e032      	b.n	801553c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	7d1b      	ldrb	r3, [r3, #20]
 80154da:	2b01      	cmp	r3, #1
 80154dc:	d106      	bne.n	80154ec <tcp_recved+0x38>
 80154de:	4b19      	ldr	r3, [pc, #100]	; (8015544 <tcp_recved+0x90>)
 80154e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80154e4:	491a      	ldr	r1, [pc, #104]	; (8015550 <tcp_recved+0x9c>)
 80154e6:	4819      	ldr	r0, [pc, #100]	; (801554c <tcp_recved+0x98>)
 80154e8:	f006 ffec 	bl	801c4c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154f0:	887b      	ldrh	r3, [r7, #2]
 80154f2:	4413      	add	r3, r2
 80154f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80154f6:	89fb      	ldrh	r3, [r7, #14]
 80154f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80154fc:	d804      	bhi.n	8015508 <tcp_recved+0x54>
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015502:	89fa      	ldrh	r2, [r7, #14]
 8015504:	429a      	cmp	r2, r3
 8015506:	d204      	bcs.n	8015512 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801550e:	851a      	strh	r2, [r3, #40]	; 0x28
 8015510:	e002      	b.n	8015518 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	89fa      	ldrh	r2, [r7, #14]
 8015516:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f7ff ff71 	bl	8015400 <tcp_update_rcv_ann_wnd>
 801551e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015526:	d309      	bcc.n	801553c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	8b5b      	ldrh	r3, [r3, #26]
 801552c:	f043 0302 	orr.w	r3, r3, #2
 8015530:	b29a      	uxth	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f004 fbae 	bl	8019c98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	08021804 	.word	0x08021804
 8015548:	08021ac0 	.word	0x08021ac0
 801554c:	08021868 	.word	0x08021868
 8015550:	08021ad8 	.word	0x08021ad8

08015554 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801555a:	2300      	movs	r3, #0
 801555c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801555e:	4b1e      	ldr	r3, [pc, #120]	; (80155d8 <tcp_new_port+0x84>)
 8015560:	881b      	ldrh	r3, [r3, #0]
 8015562:	3301      	adds	r3, #1
 8015564:	b29a      	uxth	r2, r3
 8015566:	4b1c      	ldr	r3, [pc, #112]	; (80155d8 <tcp_new_port+0x84>)
 8015568:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801556a:	4b1b      	ldr	r3, [pc, #108]	; (80155d8 <tcp_new_port+0x84>)
 801556c:	881b      	ldrh	r3, [r3, #0]
 801556e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015572:	4293      	cmp	r3, r2
 8015574:	d103      	bne.n	801557e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015576:	4b18      	ldr	r3, [pc, #96]	; (80155d8 <tcp_new_port+0x84>)
 8015578:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801557c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801557e:	2300      	movs	r3, #0
 8015580:	71fb      	strb	r3, [r7, #7]
 8015582:	e01e      	b.n	80155c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015584:	79fb      	ldrb	r3, [r7, #7]
 8015586:	4a15      	ldr	r2, [pc, #84]	; (80155dc <tcp_new_port+0x88>)
 8015588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	603b      	str	r3, [r7, #0]
 8015590:	e011      	b.n	80155b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	8ada      	ldrh	r2, [r3, #22]
 8015596:	4b10      	ldr	r3, [pc, #64]	; (80155d8 <tcp_new_port+0x84>)
 8015598:	881b      	ldrh	r3, [r3, #0]
 801559a:	429a      	cmp	r2, r3
 801559c:	d108      	bne.n	80155b0 <tcp_new_port+0x5c>
        n++;
 801559e:	88bb      	ldrh	r3, [r7, #4]
 80155a0:	3301      	adds	r3, #1
 80155a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80155a4:	88bb      	ldrh	r3, [r7, #4]
 80155a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80155aa:	d3d8      	bcc.n	801555e <tcp_new_port+0xa>
          return 0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	e00d      	b.n	80155cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	68db      	ldr	r3, [r3, #12]
 80155b4:	603b      	str	r3, [r7, #0]
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d1ea      	bne.n	8015592 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80155bc:	79fb      	ldrb	r3, [r7, #7]
 80155be:	3301      	adds	r3, #1
 80155c0:	71fb      	strb	r3, [r7, #7]
 80155c2:	79fb      	ldrb	r3, [r7, #7]
 80155c4:	2b03      	cmp	r3, #3
 80155c6:	d9dd      	bls.n	8015584 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80155c8:	4b03      	ldr	r3, [pc, #12]	; (80155d8 <tcp_new_port+0x84>)
 80155ca:	881b      	ldrh	r3, [r3, #0]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	370c      	adds	r7, #12
 80155d0:	46bd      	mov	sp, r7
 80155d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d6:	4770      	bx	lr
 80155d8:	2400002c 	.word	0x2400002c
 80155dc:	080465f8 	.word	0x080465f8

080155e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80155e0:	b5b0      	push	{r4, r5, r7, lr}
 80155e2:	b090      	sub	sp, #64	; 0x40
 80155e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80155e6:	2300      	movs	r3, #0
 80155e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80155ec:	4b94      	ldr	r3, [pc, #592]	; (8015840 <tcp_slowtmr+0x260>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	3301      	adds	r3, #1
 80155f2:	4a93      	ldr	r2, [pc, #588]	; (8015840 <tcp_slowtmr+0x260>)
 80155f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80155f6:	4b93      	ldr	r3, [pc, #588]	; (8015844 <tcp_slowtmr+0x264>)
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	3301      	adds	r3, #1
 80155fc:	b2da      	uxtb	r2, r3
 80155fe:	4b91      	ldr	r3, [pc, #580]	; (8015844 <tcp_slowtmr+0x264>)
 8015600:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015602:	2300      	movs	r3, #0
 8015604:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015606:	4b90      	ldr	r3, [pc, #576]	; (8015848 <tcp_slowtmr+0x268>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801560c:	e29d      	b.n	8015b4a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015610:	7d1b      	ldrb	r3, [r3, #20]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d106      	bne.n	8015624 <tcp_slowtmr+0x44>
 8015616:	4b8d      	ldr	r3, [pc, #564]	; (801584c <tcp_slowtmr+0x26c>)
 8015618:	f240 42be 	movw	r2, #1214	; 0x4be
 801561c:	498c      	ldr	r1, [pc, #560]	; (8015850 <tcp_slowtmr+0x270>)
 801561e:	488d      	ldr	r0, [pc, #564]	; (8015854 <tcp_slowtmr+0x274>)
 8015620:	f006 ff50 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015626:	7d1b      	ldrb	r3, [r3, #20]
 8015628:	2b01      	cmp	r3, #1
 801562a:	d106      	bne.n	801563a <tcp_slowtmr+0x5a>
 801562c:	4b87      	ldr	r3, [pc, #540]	; (801584c <tcp_slowtmr+0x26c>)
 801562e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015632:	4989      	ldr	r1, [pc, #548]	; (8015858 <tcp_slowtmr+0x278>)
 8015634:	4887      	ldr	r0, [pc, #540]	; (8015854 <tcp_slowtmr+0x274>)
 8015636:	f006 ff45 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563c:	7d1b      	ldrb	r3, [r3, #20]
 801563e:	2b0a      	cmp	r3, #10
 8015640:	d106      	bne.n	8015650 <tcp_slowtmr+0x70>
 8015642:	4b82      	ldr	r3, [pc, #520]	; (801584c <tcp_slowtmr+0x26c>)
 8015644:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015648:	4984      	ldr	r1, [pc, #528]	; (801585c <tcp_slowtmr+0x27c>)
 801564a:	4882      	ldr	r0, [pc, #520]	; (8015854 <tcp_slowtmr+0x274>)
 801564c:	f006 ff3a 	bl	801c4c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015652:	7f9a      	ldrb	r2, [r3, #30]
 8015654:	4b7b      	ldr	r3, [pc, #492]	; (8015844 <tcp_slowtmr+0x264>)
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	429a      	cmp	r2, r3
 801565a:	d105      	bne.n	8015668 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015666:	e270      	b.n	8015b4a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015668:	4b76      	ldr	r3, [pc, #472]	; (8015844 <tcp_slowtmr+0x264>)
 801566a:	781a      	ldrb	r2, [r3, #0]
 801566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015670:	2300      	movs	r3, #0
 8015672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567e:	7d1b      	ldrb	r3, [r3, #20]
 8015680:	2b02      	cmp	r3, #2
 8015682:	d10a      	bne.n	801569a <tcp_slowtmr+0xba>
 8015684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801568a:	2b05      	cmp	r3, #5
 801568c:	d905      	bls.n	801569a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801568e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015692:	3301      	adds	r3, #1
 8015694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015698:	e11e      	b.n	80158d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80156a0:	2b0b      	cmp	r3, #11
 80156a2:	d905      	bls.n	80156b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80156a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156a8:	3301      	adds	r3, #1
 80156aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156ae:	e113      	b.n	80158d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80156b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d075      	beq.n	80157a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80156ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d006      	beq.n	80156d0 <tcp_slowtmr+0xf0>
 80156c2:	4b62      	ldr	r3, [pc, #392]	; (801584c <tcp_slowtmr+0x26c>)
 80156c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80156c8:	4965      	ldr	r1, [pc, #404]	; (8015860 <tcp_slowtmr+0x280>)
 80156ca:	4862      	ldr	r0, [pc, #392]	; (8015854 <tcp_slowtmr+0x274>)
 80156cc:	f006 fefa 	bl	801c4c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d106      	bne.n	80156e6 <tcp_slowtmr+0x106>
 80156d8:	4b5c      	ldr	r3, [pc, #368]	; (801584c <tcp_slowtmr+0x26c>)
 80156da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80156de:	4961      	ldr	r1, [pc, #388]	; (8015864 <tcp_slowtmr+0x284>)
 80156e0:	485c      	ldr	r0, [pc, #368]	; (8015854 <tcp_slowtmr+0x274>)
 80156e2:	f006 feef 	bl	801c4c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80156e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80156ec:	2b0b      	cmp	r3, #11
 80156ee:	d905      	bls.n	80156fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80156f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156f4:	3301      	adds	r3, #1
 80156f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156fa:	e0ed      	b.n	80158d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80156fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015702:	3b01      	subs	r3, #1
 8015704:	4a58      	ldr	r2, [pc, #352]	; (8015868 <tcp_slowtmr+0x288>)
 8015706:	5cd3      	ldrb	r3, [r2, r3]
 8015708:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015710:	7c7a      	ldrb	r2, [r7, #17]
 8015712:	429a      	cmp	r2, r3
 8015714:	d907      	bls.n	8015726 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015718:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801571c:	3301      	adds	r3, #1
 801571e:	b2da      	uxtb	r2, r3
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801572c:	7c7a      	ldrb	r2, [r7, #17]
 801572e:	429a      	cmp	r2, r3
 8015730:	f200 80d2 	bhi.w	80158d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015734:	2301      	movs	r3, #1
 8015736:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801573e:	2b00      	cmp	r3, #0
 8015740:	d108      	bne.n	8015754 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015744:	f005 f950 	bl	801a9e8 <tcp_zero_window_probe>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d014      	beq.n	8015778 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801574e:	2300      	movs	r3, #0
 8015750:	623b      	str	r3, [r7, #32]
 8015752:	e011      	b.n	8015778 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801575a:	4619      	mov	r1, r3
 801575c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801575e:	f004 f815 	bl	801978c <tcp_split_unsent_seg>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d107      	bne.n	8015778 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801576a:	f004 fa95 	bl	8019c98 <tcp_output>
 801576e:	4603      	mov	r3, r0
 8015770:	2b00      	cmp	r3, #0
 8015772:	d101      	bne.n	8015778 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015778:	6a3b      	ldr	r3, [r7, #32]
 801577a:	2b00      	cmp	r3, #0
 801577c:	f000 80ac 	beq.w	80158d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015782:	2200      	movs	r2, #0
 8015784:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801578a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801578e:	2b06      	cmp	r3, #6
 8015790:	f200 80a2 	bhi.w	80158d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015796:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801579a:	3301      	adds	r3, #1
 801579c:	b2da      	uxtb	r2, r3
 801579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80157a4:	e098      	b.n	80158d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80157a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	db0f      	blt.n	80157d0 <tcp_slowtmr+0x1f0>
 80157b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d008      	beq.n	80157d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80157be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	3301      	adds	r3, #1
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	b21a      	sxth	r2, r3
 80157cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80157d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80157d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80157dc:	429a      	cmp	r2, r3
 80157de:	db7b      	blt.n	80158d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80157e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157e2:	f004 fd4b 	bl	801a27c <tcp_rexmit_rto_prepare>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d007      	beq.n	80157fc <tcp_slowtmr+0x21c>
 80157ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d171      	bne.n	80158d8 <tcp_slowtmr+0x2f8>
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d06d      	beq.n	80158d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80157fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fe:	7d1b      	ldrb	r3, [r3, #20]
 8015800:	2b02      	cmp	r3, #2
 8015802:	d03a      	beq.n	801587a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801580a:	2b0c      	cmp	r3, #12
 801580c:	bf28      	it	cs
 801580e:	230c      	movcs	r3, #12
 8015810:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015818:	10db      	asrs	r3, r3, #3
 801581a:	b21b      	sxth	r3, r3
 801581c:	461a      	mov	r2, r3
 801581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015820:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015824:	4413      	add	r3, r2
 8015826:	7efa      	ldrb	r2, [r7, #27]
 8015828:	4910      	ldr	r1, [pc, #64]	; (801586c <tcp_slowtmr+0x28c>)
 801582a:	5c8a      	ldrb	r2, [r1, r2]
 801582c:	4093      	lsls	r3, r2
 801582e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015836:	4293      	cmp	r3, r2
 8015838:	dc1a      	bgt.n	8015870 <tcp_slowtmr+0x290>
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	b21a      	sxth	r2, r3
 801583e:	e019      	b.n	8015874 <tcp_slowtmr+0x294>
 8015840:	24007954 	.word	0x24007954
 8015844:	2400796a 	.word	0x2400796a
 8015848:	24007960 	.word	0x24007960
 801584c:	08021804 	.word	0x08021804
 8015850:	08021b68 	.word	0x08021b68
 8015854:	08021868 	.word	0x08021868
 8015858:	08021b94 	.word	0x08021b94
 801585c:	08021bc0 	.word	0x08021bc0
 8015860:	08021bf0 	.word	0x08021bf0
 8015864:	08021c24 	.word	0x08021c24
 8015868:	080465f0 	.word	0x080465f0
 801586c:	080465e0 	.word	0x080465e0
 8015870:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587c:	2200      	movs	r2, #0
 801587e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801588c:	4293      	cmp	r3, r2
 801588e:	bf28      	it	cs
 8015890:	4613      	movcs	r3, r2
 8015892:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015894:	8a7b      	ldrh	r3, [r7, #18]
 8015896:	085b      	lsrs	r3, r3, #1
 8015898:	b29a      	uxth	r2, r3
 801589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80158a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80158a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158aa:	005b      	lsls	r3, r3, #1
 80158ac:	b29b      	uxth	r3, r3
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d206      	bcs.n	80158c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80158b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80158c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80158ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158cc:	2200      	movs	r2, #0
 80158ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80158d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158d4:	f004 fd42 	bl	801a35c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	7d1b      	ldrb	r3, [r3, #20]
 80158dc:	2b06      	cmp	r3, #6
 80158de:	d111      	bne.n	8015904 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80158e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e2:	8b5b      	ldrh	r3, [r3, #26]
 80158e4:	f003 0310 	and.w	r3, r3, #16
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00b      	beq.n	8015904 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158ec:	4b9c      	ldr	r3, [pc, #624]	; (8015b60 <tcp_slowtmr+0x580>)
 80158ee:	681a      	ldr	r2, [r3, #0]
 80158f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f2:	6a1b      	ldr	r3, [r3, #32]
 80158f4:	1ad3      	subs	r3, r2, r3
 80158f6:	2b28      	cmp	r3, #40	; 0x28
 80158f8:	d904      	bls.n	8015904 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80158fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158fe:	3301      	adds	r3, #1
 8015900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015906:	7a5b      	ldrb	r3, [r3, #9]
 8015908:	f003 0308 	and.w	r3, r3, #8
 801590c:	2b00      	cmp	r3, #0
 801590e:	d04a      	beq.n	80159a6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015914:	2b04      	cmp	r3, #4
 8015916:	d003      	beq.n	8015920 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801591c:	2b07      	cmp	r3, #7
 801591e:	d142      	bne.n	80159a6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015920:	4b8f      	ldr	r3, [pc, #572]	; (8015b60 <tcp_slowtmr+0x580>)
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015926:	6a1b      	ldr	r3, [r3, #32]
 8015928:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015930:	4b8c      	ldr	r3, [pc, #560]	; (8015b64 <tcp_slowtmr+0x584>)
 8015932:	440b      	add	r3, r1
 8015934:	498c      	ldr	r1, [pc, #560]	; (8015b68 <tcp_slowtmr+0x588>)
 8015936:	fba1 1303 	umull	r1, r3, r1, r3
 801593a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801593c:	429a      	cmp	r2, r3
 801593e:	d90a      	bls.n	8015956 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015944:	3301      	adds	r3, #1
 8015946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801594a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801594e:	3301      	adds	r3, #1
 8015950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015954:	e027      	b.n	80159a6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015956:	4b82      	ldr	r3, [pc, #520]	; (8015b60 <tcp_slowtmr+0x580>)
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595c:	6a1b      	ldr	r3, [r3, #32]
 801595e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015962:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015968:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801596c:	4618      	mov	r0, r3
 801596e:	4b7f      	ldr	r3, [pc, #508]	; (8015b6c <tcp_slowtmr+0x58c>)
 8015970:	fb00 f303 	mul.w	r3, r0, r3
 8015974:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015976:	497c      	ldr	r1, [pc, #496]	; (8015b68 <tcp_slowtmr+0x588>)
 8015978:	fba1 1303 	umull	r1, r3, r1, r3
 801597c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801597e:	429a      	cmp	r2, r3
 8015980:	d911      	bls.n	80159a6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8015982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015984:	f004 fff0 	bl	801a968 <tcp_keepalive>
 8015988:	4603      	mov	r3, r0
 801598a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801598e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015992:	2b00      	cmp	r3, #0
 8015994:	d107      	bne.n	80159a6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8015996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015998:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801599c:	3301      	adds	r3, #1
 801599e:	b2da      	uxtb	r2, r3
 80159a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80159a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d011      	beq.n	80159d2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80159ae:	4b6c      	ldr	r3, [pc, #432]	; (8015b60 <tcp_slowtmr+0x580>)
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b4:	6a1b      	ldr	r3, [r3, #32]
 80159b6:	1ad2      	subs	r2, r2, r3
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80159be:	4619      	mov	r1, r3
 80159c0:	460b      	mov	r3, r1
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	440b      	add	r3, r1
 80159c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d302      	bcc.n	80159d2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80159cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159ce:	f000 feab 	bl	8016728 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80159d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d4:	7d1b      	ldrb	r3, [r3, #20]
 80159d6:	2b03      	cmp	r3, #3
 80159d8:	d10b      	bne.n	80159f2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159da:	4b61      	ldr	r3, [pc, #388]	; (8015b60 <tcp_slowtmr+0x580>)
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e0:	6a1b      	ldr	r3, [r3, #32]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	2b28      	cmp	r3, #40	; 0x28
 80159e6:	d904      	bls.n	80159f2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80159e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ec:	3301      	adds	r3, #1
 80159ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80159f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f4:	7d1b      	ldrb	r3, [r3, #20]
 80159f6:	2b09      	cmp	r3, #9
 80159f8:	d10b      	bne.n	8015a12 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80159fa:	4b59      	ldr	r3, [pc, #356]	; (8015b60 <tcp_slowtmr+0x580>)
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	6a1b      	ldr	r3, [r3, #32]
 8015a02:	1ad3      	subs	r3, r2, r3
 8015a04:	2bf0      	cmp	r3, #240	; 0xf0
 8015a06:	d904      	bls.n	8015a12 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8015a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d060      	beq.n	8015adc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a20:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a24:	f000 fccc 	bl	80163c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d010      	beq.n	8015a50 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015a2e:	4b50      	ldr	r3, [pc, #320]	; (8015b70 <tcp_slowtmr+0x590>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d106      	bne.n	8015a46 <tcp_slowtmr+0x466>
 8015a38:	4b4e      	ldr	r3, [pc, #312]	; (8015b74 <tcp_slowtmr+0x594>)
 8015a3a:	f240 526d 	movw	r2, #1389	; 0x56d
 8015a3e:	494e      	ldr	r1, [pc, #312]	; (8015b78 <tcp_slowtmr+0x598>)
 8015a40:	484e      	ldr	r0, [pc, #312]	; (8015b7c <tcp_slowtmr+0x59c>)
 8015a42:	f006 fd3f 	bl	801c4c4 <iprintf>
        prev->next = pcb->next;
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	68da      	ldr	r2, [r3, #12]
 8015a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4c:	60da      	str	r2, [r3, #12]
 8015a4e:	e00f      	b.n	8015a70 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015a50:	4b47      	ldr	r3, [pc, #284]	; (8015b70 <tcp_slowtmr+0x590>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d006      	beq.n	8015a68 <tcp_slowtmr+0x488>
 8015a5a:	4b46      	ldr	r3, [pc, #280]	; (8015b74 <tcp_slowtmr+0x594>)
 8015a5c:	f240 5271 	movw	r2, #1393	; 0x571
 8015a60:	4947      	ldr	r1, [pc, #284]	; (8015b80 <tcp_slowtmr+0x5a0>)
 8015a62:	4846      	ldr	r0, [pc, #280]	; (8015b7c <tcp_slowtmr+0x59c>)
 8015a64:	f006 fd2e 	bl	801c4c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6a:	68db      	ldr	r3, [r3, #12]
 8015a6c:	4a40      	ldr	r2, [pc, #256]	; (8015b70 <tcp_slowtmr+0x590>)
 8015a6e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015a70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d013      	beq.n	8015aa0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015a80:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a84:	3304      	adds	r3, #4
 8015a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a88:	8ad2      	ldrh	r2, [r2, #22]
 8015a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a8c:	8b09      	ldrh	r1, [r1, #24]
 8015a8e:	9102      	str	r1, [sp, #8]
 8015a90:	9201      	str	r2, [sp, #4]
 8015a92:	9300      	str	r3, [sp, #0]
 8015a94:	462b      	mov	r3, r5
 8015a96:	4622      	mov	r2, r4
 8015a98:	4601      	mov	r1, r0
 8015a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a9c:	f004 feb0 	bl	801a800 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	691b      	ldr	r3, [r3, #16]
 8015aa4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa8:	7d1b      	ldrb	r3, [r3, #20]
 8015aaa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015ab6:	6838      	ldr	r0, [r7, #0]
 8015ab8:	f7fe fff0 	bl	8014a9c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015abc:	4b31      	ldr	r3, [pc, #196]	; (8015b84 <tcp_slowtmr+0x5a4>)
 8015abe:	2200      	movs	r2, #0
 8015ac0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d004      	beq.n	8015ad2 <tcp_slowtmr+0x4f2>
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f06f 010c 	mvn.w	r1, #12
 8015ace:	68b8      	ldr	r0, [r7, #8]
 8015ad0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015ad2:	4b2c      	ldr	r3, [pc, #176]	; (8015b84 <tcp_slowtmr+0x5a4>)
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d037      	beq.n	8015b4a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8015ada:	e592      	b.n	8015602 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ade:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae8:	7f1b      	ldrb	r3, [r3, #28]
 8015aea:	3301      	adds	r3, #1
 8015aec:	b2da      	uxtb	r2, r3
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af4:	7f1a      	ldrb	r2, [r3, #28]
 8015af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af8:	7f5b      	ldrb	r3, [r3, #29]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d325      	bcc.n	8015b4a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8015afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b00:	2200      	movs	r2, #0
 8015b02:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015b04:	4b1f      	ldr	r3, [pc, #124]	; (8015b84 <tcp_slowtmr+0x5a4>)
 8015b06:	2200      	movs	r2, #0
 8015b08:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d00b      	beq.n	8015b2c <tcp_slowtmr+0x54c>
 8015b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b1c:	6912      	ldr	r2, [r2, #16]
 8015b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b20:	4610      	mov	r0, r2
 8015b22:	4798      	blx	r3
 8015b24:	4603      	mov	r3, r0
 8015b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015b2a:	e002      	b.n	8015b32 <tcp_slowtmr+0x552>
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015b32:	4b14      	ldr	r3, [pc, #80]	; (8015b84 <tcp_slowtmr+0x5a4>)
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d000      	beq.n	8015b3c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8015b3a:	e562      	b.n	8015602 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015b3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d102      	bne.n	8015b4a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8015b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b46:	f004 f8a7 	bl	8019c98 <tcp_output>
  while (pcb != NULL) {
 8015b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	f47f ad5e 	bne.w	801560e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015b52:	2300      	movs	r3, #0
 8015b54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015b56:	4b0c      	ldr	r3, [pc, #48]	; (8015b88 <tcp_slowtmr+0x5a8>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b5c:	e069      	b.n	8015c32 <tcp_slowtmr+0x652>
 8015b5e:	bf00      	nop
 8015b60:	24007954 	.word	0x24007954
 8015b64:	000a4cb8 	.word	0x000a4cb8
 8015b68:	10624dd3 	.word	0x10624dd3
 8015b6c:	000124f8 	.word	0x000124f8
 8015b70:	24007960 	.word	0x24007960
 8015b74:	08021804 	.word	0x08021804
 8015b78:	08021c5c 	.word	0x08021c5c
 8015b7c:	08021868 	.word	0x08021868
 8015b80:	08021c88 	.word	0x08021c88
 8015b84:	24007968 	.word	0x24007968
 8015b88:	24007964 	.word	0x24007964
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8e:	7d1b      	ldrb	r3, [r3, #20]
 8015b90:	2b0a      	cmp	r3, #10
 8015b92:	d006      	beq.n	8015ba2 <tcp_slowtmr+0x5c2>
 8015b94:	4b2b      	ldr	r3, [pc, #172]	; (8015c44 <tcp_slowtmr+0x664>)
 8015b96:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015b9a:	492b      	ldr	r1, [pc, #172]	; (8015c48 <tcp_slowtmr+0x668>)
 8015b9c:	482b      	ldr	r0, [pc, #172]	; (8015c4c <tcp_slowtmr+0x66c>)
 8015b9e:	f006 fc91 	bl	801c4c4 <iprintf>
    pcb_remove = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015ba8:	4b29      	ldr	r3, [pc, #164]	; (8015c50 <tcp_slowtmr+0x670>)
 8015baa:	681a      	ldr	r2, [r3, #0]
 8015bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bae:	6a1b      	ldr	r3, [r3, #32]
 8015bb0:	1ad3      	subs	r3, r2, r3
 8015bb2:	2bf0      	cmp	r3, #240	; 0xf0
 8015bb4:	d904      	bls.n	8015bc0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bba:	3301      	adds	r3, #1
 8015bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d02f      	beq.n	8015c28 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bca:	f000 fbf9 	bl	80163c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d010      	beq.n	8015bf6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015bd4:	4b1f      	ldr	r3, [pc, #124]	; (8015c54 <tcp_slowtmr+0x674>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d106      	bne.n	8015bec <tcp_slowtmr+0x60c>
 8015bde:	4b19      	ldr	r3, [pc, #100]	; (8015c44 <tcp_slowtmr+0x664>)
 8015be0:	f240 52af 	movw	r2, #1455	; 0x5af
 8015be4:	491c      	ldr	r1, [pc, #112]	; (8015c58 <tcp_slowtmr+0x678>)
 8015be6:	4819      	ldr	r0, [pc, #100]	; (8015c4c <tcp_slowtmr+0x66c>)
 8015be8:	f006 fc6c 	bl	801c4c4 <iprintf>
        prev->next = pcb->next;
 8015bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bee:	68da      	ldr	r2, [r3, #12]
 8015bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf2:	60da      	str	r2, [r3, #12]
 8015bf4:	e00f      	b.n	8015c16 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015bf6:	4b17      	ldr	r3, [pc, #92]	; (8015c54 <tcp_slowtmr+0x674>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d006      	beq.n	8015c0e <tcp_slowtmr+0x62e>
 8015c00:	4b10      	ldr	r3, [pc, #64]	; (8015c44 <tcp_slowtmr+0x664>)
 8015c02:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015c06:	4915      	ldr	r1, [pc, #84]	; (8015c5c <tcp_slowtmr+0x67c>)
 8015c08:	4810      	ldr	r0, [pc, #64]	; (8015c4c <tcp_slowtmr+0x66c>)
 8015c0a:	f006 fc5b 	bl	801c4c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	4a10      	ldr	r2, [pc, #64]	; (8015c54 <tcp_slowtmr+0x674>)
 8015c14:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c18:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015c20:	69f8      	ldr	r0, [r7, #28]
 8015c22:	f7fe ff3b 	bl	8014a9c <tcp_free>
 8015c26:	e004      	b.n	8015c32 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d1a9      	bne.n	8015b8c <tcp_slowtmr+0x5ac>
    }
  }
}
 8015c38:	bf00      	nop
 8015c3a:	bf00      	nop
 8015c3c:	3730      	adds	r7, #48	; 0x30
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bdb0      	pop	{r4, r5, r7, pc}
 8015c42:	bf00      	nop
 8015c44:	08021804 	.word	0x08021804
 8015c48:	08021cb4 	.word	0x08021cb4
 8015c4c:	08021868 	.word	0x08021868
 8015c50:	24007954 	.word	0x24007954
 8015c54:	24007964 	.word	0x24007964
 8015c58:	08021ce4 	.word	0x08021ce4
 8015c5c:	08021d0c 	.word	0x08021d0c

08015c60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015c66:	4b2d      	ldr	r3, [pc, #180]	; (8015d1c <tcp_fasttmr+0xbc>)
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	b2da      	uxtb	r2, r3
 8015c6e:	4b2b      	ldr	r3, [pc, #172]	; (8015d1c <tcp_fasttmr+0xbc>)
 8015c70:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015c72:	4b2b      	ldr	r3, [pc, #172]	; (8015d20 <tcp_fasttmr+0xc0>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c78:	e048      	b.n	8015d0c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	7f9a      	ldrb	r2, [r3, #30]
 8015c7e:	4b27      	ldr	r3, [pc, #156]	; (8015d1c <tcp_fasttmr+0xbc>)
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d03f      	beq.n	8015d06 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015c86:	4b25      	ldr	r3, [pc, #148]	; (8015d1c <tcp_fasttmr+0xbc>)
 8015c88:	781a      	ldrb	r2, [r3, #0]
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	8b5b      	ldrh	r3, [r3, #26]
 8015c92:	f003 0301 	and.w	r3, r3, #1
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d010      	beq.n	8015cbc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	8b5b      	ldrh	r3, [r3, #26]
 8015c9e:	f043 0302 	orr.w	r3, r3, #2
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f003 fff5 	bl	8019c98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	8b5b      	ldrh	r3, [r3, #26]
 8015cb2:	f023 0303 	bic.w	r3, r3, #3
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	8b5b      	ldrh	r3, [r3, #26]
 8015cc0:	f003 0308 	and.w	r3, r3, #8
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d009      	beq.n	8015cdc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	8b5b      	ldrh	r3, [r3, #26]
 8015ccc:	f023 0308 	bic.w	r3, r3, #8
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ff f874 	bl	8014dc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d00a      	beq.n	8015d00 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015cea:	4b0e      	ldr	r3, [pc, #56]	; (8015d24 <tcp_fasttmr+0xc4>)
 8015cec:	2200      	movs	r2, #0
 8015cee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f000 f819 	bl	8015d28 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015cf6:	4b0b      	ldr	r3, [pc, #44]	; (8015d24 <tcp_fasttmr+0xc4>)
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d000      	beq.n	8015d00 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015cfe:	e7b8      	b.n	8015c72 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	607b      	str	r3, [r7, #4]
 8015d04:	e002      	b.n	8015d0c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	68db      	ldr	r3, [r3, #12]
 8015d0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d1b3      	bne.n	8015c7a <tcp_fasttmr+0x1a>
    }
  }
}
 8015d12:	bf00      	nop
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	2400796a 	.word	0x2400796a
 8015d20:	24007960 	.word	0x24007960
 8015d24:	24007968 	.word	0x24007968

08015d28 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015d28:	b590      	push	{r4, r7, lr}
 8015d2a:	b085      	sub	sp, #20
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d109      	bne.n	8015d4a <tcp_process_refused_data+0x22>
 8015d36:	4b37      	ldr	r3, [pc, #220]	; (8015e14 <tcp_process_refused_data+0xec>)
 8015d38:	f240 6209 	movw	r2, #1545	; 0x609
 8015d3c:	4936      	ldr	r1, [pc, #216]	; (8015e18 <tcp_process_refused_data+0xf0>)
 8015d3e:	4837      	ldr	r0, [pc, #220]	; (8015e1c <tcp_process_refused_data+0xf4>)
 8015d40:	f006 fbc0 	bl	801c4c4 <iprintf>
 8015d44:	f06f 030f 	mvn.w	r3, #15
 8015d48:	e060      	b.n	8015e0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d4e:	7b5b      	ldrb	r3, [r3, #13]
 8015d50:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d56:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00b      	beq.n	8015d80 <tcp_process_refused_data+0x58>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6918      	ldr	r0, [r3, #16]
 8015d72:	2300      	movs	r3, #0
 8015d74:	68ba      	ldr	r2, [r7, #8]
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	47a0      	blx	r4
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	73fb      	strb	r3, [r7, #15]
 8015d7e:	e007      	b.n	8015d90 <tcp_process_refused_data+0x68>
 8015d80:	2300      	movs	r3, #0
 8015d82:	68ba      	ldr	r2, [r7, #8]
 8015d84:	6879      	ldr	r1, [r7, #4]
 8015d86:	2000      	movs	r0, #0
 8015d88:	f000 f8a4 	bl	8015ed4 <tcp_recv_null>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d12a      	bne.n	8015dee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015d98:	7bbb      	ldrb	r3, [r7, #14]
 8015d9a:	f003 0320 	and.w	r3, r3, #32
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d033      	beq.n	8015e0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015da6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015daa:	d005      	beq.n	8015db8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015db0:	3301      	adds	r3, #1
 8015db2:	b29a      	uxth	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d00b      	beq.n	8015dda <tcp_process_refused_data+0xb2>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6918      	ldr	r0, [r3, #16]
 8015dcc:	2300      	movs	r3, #0
 8015dce:	2200      	movs	r2, #0
 8015dd0:	6879      	ldr	r1, [r7, #4]
 8015dd2:	47a0      	blx	r4
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	73fb      	strb	r3, [r7, #15]
 8015dd8:	e001      	b.n	8015dde <tcp_process_refused_data+0xb6>
 8015dda:	2300      	movs	r3, #0
 8015ddc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015de2:	f113 0f0d 	cmn.w	r3, #13
 8015de6:	d110      	bne.n	8015e0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015de8:	f06f 030c 	mvn.w	r3, #12
 8015dec:	e00e      	b.n	8015e0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015df2:	f113 0f0d 	cmn.w	r3, #13
 8015df6:	d102      	bne.n	8015dfe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015df8:	f06f 030c 	mvn.w	r3, #12
 8015dfc:	e006      	b.n	8015e0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	68ba      	ldr	r2, [r7, #8]
 8015e02:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015e04:	f06f 0304 	mvn.w	r3, #4
 8015e08:	e000      	b.n	8015e0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015e0a:	2300      	movs	r3, #0
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3714      	adds	r7, #20
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd90      	pop	{r4, r7, pc}
 8015e14:	08021804 	.word	0x08021804
 8015e18:	08021d34 	.word	0x08021d34
 8015e1c:	08021868 	.word	0x08021868

08015e20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015e28:	e007      	b.n	8015e3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 f80a 	bl	8015e4a <tcp_seg_free>
    seg = next;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d1f4      	bne.n	8015e2a <tcp_segs_free+0xa>
  }
}
 8015e40:	bf00      	nop
 8015e42:	bf00      	nop
 8015e44:	3710      	adds	r7, #16
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015e4a:	b580      	push	{r7, lr}
 8015e4c:	b082      	sub	sp, #8
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d00c      	beq.n	8015e72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d004      	beq.n	8015e6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7fe f97b 	bl	8014160 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015e6a:	6879      	ldr	r1, [r7, #4]
 8015e6c:	2003      	movs	r0, #3
 8015e6e:	f7fd fa2d 	bl	80132cc <memp_free>
  }
}
 8015e72:	bf00      	nop
 8015e74:	3708      	adds	r7, #8
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
	...

08015e7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d106      	bne.n	8015e98 <tcp_seg_copy+0x1c>
 8015e8a:	4b0f      	ldr	r3, [pc, #60]	; (8015ec8 <tcp_seg_copy+0x4c>)
 8015e8c:	f240 6282 	movw	r2, #1666	; 0x682
 8015e90:	490e      	ldr	r1, [pc, #56]	; (8015ecc <tcp_seg_copy+0x50>)
 8015e92:	480f      	ldr	r0, [pc, #60]	; (8015ed0 <tcp_seg_copy+0x54>)
 8015e94:	f006 fb16 	bl	801c4c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015e98:	2003      	movs	r0, #3
 8015e9a:	f7fd f9a1 	bl	80131e0 <memp_malloc>
 8015e9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <tcp_seg_copy+0x2e>
    return NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e00a      	b.n	8015ec0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015eaa:	2210      	movs	r2, #16
 8015eac:	6879      	ldr	r1, [r7, #4]
 8015eae:	68f8      	ldr	r0, [r7, #12]
 8015eb0:	f005 fe96 	bl	801bbe0 <memcpy>
  pbuf_ref(cseg->p);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fe f9f7 	bl	80142ac <pbuf_ref>
  return cseg;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3710      	adds	r7, #16
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	08021804 	.word	0x08021804
 8015ecc:	08021d78 	.word	0x08021d78
 8015ed0:	08021868 	.word	0x08021868

08015ed4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	607a      	str	r2, [r7, #4]
 8015ee0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d109      	bne.n	8015efc <tcp_recv_null+0x28>
 8015ee8:	4b12      	ldr	r3, [pc, #72]	; (8015f34 <tcp_recv_null+0x60>)
 8015eea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015eee:	4912      	ldr	r1, [pc, #72]	; (8015f38 <tcp_recv_null+0x64>)
 8015ef0:	4812      	ldr	r0, [pc, #72]	; (8015f3c <tcp_recv_null+0x68>)
 8015ef2:	f006 fae7 	bl	801c4c4 <iprintf>
 8015ef6:	f06f 030f 	mvn.w	r3, #15
 8015efa:	e016      	b.n	8015f2a <tcp_recv_null+0x56>

  if (p != NULL) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d009      	beq.n	8015f16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	891b      	ldrh	r3, [r3, #8]
 8015f06:	4619      	mov	r1, r3
 8015f08:	68b8      	ldr	r0, [r7, #8]
 8015f0a:	f7ff fad3 	bl	80154b4 <tcp_recved>
    pbuf_free(p);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f7fe f926 	bl	8014160 <pbuf_free>
 8015f14:	e008      	b.n	8015f28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d104      	bne.n	8015f28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015f1e:	68b8      	ldr	r0, [r7, #8]
 8015f20:	f7fe ffba 	bl	8014e98 <tcp_close>
 8015f24:	4603      	mov	r3, r0
 8015f26:	e000      	b.n	8015f2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015f28:	2300      	movs	r3, #0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3710      	adds	r7, #16
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	08021804 	.word	0x08021804
 8015f38:	08021d94 	.word	0x08021d94
 8015f3c:	08021868 	.word	0x08021868

08015f40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b086      	sub	sp, #24
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	4603      	mov	r3, r0
 8015f48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	db01      	blt.n	8015f56 <tcp_kill_prio+0x16>
 8015f52:	79fb      	ldrb	r3, [r7, #7]
 8015f54:	e000      	b.n	8015f58 <tcp_kill_prio+0x18>
 8015f56:	237f      	movs	r3, #127	; 0x7f
 8015f58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015f5a:	7afb      	ldrb	r3, [r7, #11]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d034      	beq.n	8015fca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015f60:	7afb      	ldrb	r3, [r7, #11]
 8015f62:	3b01      	subs	r3, #1
 8015f64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015f66:	2300      	movs	r3, #0
 8015f68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f6e:	4b19      	ldr	r3, [pc, #100]	; (8015fd4 <tcp_kill_prio+0x94>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	617b      	str	r3, [r7, #20]
 8015f74:	e01f      	b.n	8015fb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	7d5b      	ldrb	r3, [r3, #21]
 8015f7a:	7afa      	ldrb	r2, [r7, #11]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d80c      	bhi.n	8015f9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015f84:	7afa      	ldrb	r2, [r7, #11]
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d112      	bne.n	8015fb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f8a:	4b13      	ldr	r3, [pc, #76]	; (8015fd8 <tcp_kill_prio+0x98>)
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	6a1b      	ldr	r3, [r3, #32]
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d80a      	bhi.n	8015fb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015f9a:	4b0f      	ldr	r3, [pc, #60]	; (8015fd8 <tcp_kill_prio+0x98>)
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	6a1b      	ldr	r3, [r3, #32]
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	7d5b      	ldrb	r3, [r3, #21]
 8015fae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	617b      	str	r3, [r7, #20]
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d1dc      	bne.n	8015f76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d004      	beq.n	8015fcc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015fc2:	6938      	ldr	r0, [r7, #16]
 8015fc4:	f7ff f8ae 	bl	8015124 <tcp_abort>
 8015fc8:	e000      	b.n	8015fcc <tcp_kill_prio+0x8c>
    return;
 8015fca:	bf00      	nop
  }
}
 8015fcc:	3718      	adds	r7, #24
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}
 8015fd2:	bf00      	nop
 8015fd4:	24007960 	.word	0x24007960
 8015fd8:	24007954 	.word	0x24007954

08015fdc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015fe6:	79fb      	ldrb	r3, [r7, #7]
 8015fe8:	2b08      	cmp	r3, #8
 8015fea:	d009      	beq.n	8016000 <tcp_kill_state+0x24>
 8015fec:	79fb      	ldrb	r3, [r7, #7]
 8015fee:	2b09      	cmp	r3, #9
 8015ff0:	d006      	beq.n	8016000 <tcp_kill_state+0x24>
 8015ff2:	4b1a      	ldr	r3, [pc, #104]	; (801605c <tcp_kill_state+0x80>)
 8015ff4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015ff8:	4919      	ldr	r1, [pc, #100]	; (8016060 <tcp_kill_state+0x84>)
 8015ffa:	481a      	ldr	r0, [pc, #104]	; (8016064 <tcp_kill_state+0x88>)
 8015ffc:	f006 fa62 	bl	801c4c4 <iprintf>

  inactivity = 0;
 8016000:	2300      	movs	r3, #0
 8016002:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016004:	2300      	movs	r3, #0
 8016006:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016008:	4b17      	ldr	r3, [pc, #92]	; (8016068 <tcp_kill_state+0x8c>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	617b      	str	r3, [r7, #20]
 801600e:	e017      	b.n	8016040 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	7d1b      	ldrb	r3, [r3, #20]
 8016014:	79fa      	ldrb	r2, [r7, #7]
 8016016:	429a      	cmp	r2, r3
 8016018:	d10f      	bne.n	801603a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801601a:	4b14      	ldr	r3, [pc, #80]	; (801606c <tcp_kill_state+0x90>)
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	6a1b      	ldr	r3, [r3, #32]
 8016022:	1ad3      	subs	r3, r2, r3
 8016024:	68fa      	ldr	r2, [r7, #12]
 8016026:	429a      	cmp	r2, r3
 8016028:	d807      	bhi.n	801603a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801602a:	4b10      	ldr	r3, [pc, #64]	; (801606c <tcp_kill_state+0x90>)
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	6a1b      	ldr	r3, [r3, #32]
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	68db      	ldr	r3, [r3, #12]
 801603e:	617b      	str	r3, [r7, #20]
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d1e4      	bne.n	8016010 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d003      	beq.n	8016054 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801604c:	2100      	movs	r1, #0
 801604e:	6938      	ldr	r0, [r7, #16]
 8016050:	f7fe ffaa 	bl	8014fa8 <tcp_abandon>
  }
}
 8016054:	bf00      	nop
 8016056:	3718      	adds	r7, #24
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	08021804 	.word	0x08021804
 8016060:	08021db0 	.word	0x08021db0
 8016064:	08021868 	.word	0x08021868
 8016068:	24007960 	.word	0x24007960
 801606c:	24007954 	.word	0x24007954

08016070 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016076:	2300      	movs	r3, #0
 8016078:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801607a:	2300      	movs	r3, #0
 801607c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801607e:	4b12      	ldr	r3, [pc, #72]	; (80160c8 <tcp_kill_timewait+0x58>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	60fb      	str	r3, [r7, #12]
 8016084:	e012      	b.n	80160ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016086:	4b11      	ldr	r3, [pc, #68]	; (80160cc <tcp_kill_timewait+0x5c>)
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	6a1b      	ldr	r3, [r3, #32]
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	687a      	ldr	r2, [r7, #4]
 8016092:	429a      	cmp	r2, r3
 8016094:	d807      	bhi.n	80160a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016096:	4b0d      	ldr	r3, [pc, #52]	; (80160cc <tcp_kill_timewait+0x5c>)
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	6a1b      	ldr	r3, [r3, #32]
 801609e:	1ad3      	subs	r3, r2, r3
 80160a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	60fb      	str	r3, [r7, #12]
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1e9      	bne.n	8016086 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d002      	beq.n	80160be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80160b8:	68b8      	ldr	r0, [r7, #8]
 80160ba:	f7ff f833 	bl	8015124 <tcp_abort>
  }
}
 80160be:	bf00      	nop
 80160c0:	3710      	adds	r7, #16
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	24007964 	.word	0x24007964
 80160cc:	24007954 	.word	0x24007954

080160d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80160d6:	4b10      	ldr	r3, [pc, #64]	; (8016118 <tcp_handle_closepend+0x48>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80160dc:	e014      	b.n	8016108 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	8b5b      	ldrh	r3, [r3, #26]
 80160e8:	f003 0308 	and.w	r3, r3, #8
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d009      	beq.n	8016104 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	8b5b      	ldrh	r3, [r3, #26]
 80160f4:	f023 0308 	bic.w	r3, r3, #8
 80160f8:	b29a      	uxth	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f7fe fe60 	bl	8014dc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d1e7      	bne.n	80160de <tcp_handle_closepend+0xe>
  }
}
 801610e:	bf00      	nop
 8016110:	bf00      	nop
 8016112:	3708      	adds	r7, #8
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	24007960 	.word	0x24007960

0801611c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b084      	sub	sp, #16
 8016120:	af00      	add	r7, sp, #0
 8016122:	4603      	mov	r3, r0
 8016124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016126:	2001      	movs	r0, #1
 8016128:	f7fd f85a 	bl	80131e0 <memp_malloc>
 801612c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d126      	bne.n	8016182 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016134:	f7ff ffcc 	bl	80160d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016138:	f7ff ff9a 	bl	8016070 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801613c:	2001      	movs	r0, #1
 801613e:	f7fd f84f 	bl	80131e0 <memp_malloc>
 8016142:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d11b      	bne.n	8016182 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801614a:	2009      	movs	r0, #9
 801614c:	f7ff ff46 	bl	8015fdc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016150:	2001      	movs	r0, #1
 8016152:	f7fd f845 	bl	80131e0 <memp_malloc>
 8016156:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d111      	bne.n	8016182 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801615e:	2008      	movs	r0, #8
 8016160:	f7ff ff3c 	bl	8015fdc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016164:	2001      	movs	r0, #1
 8016166:	f7fd f83b 	bl	80131e0 <memp_malloc>
 801616a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d107      	bne.n	8016182 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016172:	79fb      	ldrb	r3, [r7, #7]
 8016174:	4618      	mov	r0, r3
 8016176:	f7ff fee3 	bl	8015f40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801617a:	2001      	movs	r0, #1
 801617c:	f7fd f830 	bl	80131e0 <memp_malloc>
 8016180:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d03f      	beq.n	8016208 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016188:	229c      	movs	r2, #156	; 0x9c
 801618a:	2100      	movs	r1, #0
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f005 fd4f 	bl	801bc30 <memset>
    pcb->prio = prio;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	79fa      	ldrb	r2, [r7, #7]
 8016196:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801619e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80161a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	22ff      	movs	r2, #255	; 0xff
 80161b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80161be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2206      	movs	r2, #6
 80161c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	2206      	movs	r2, #6
 80161cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2201      	movs	r2, #1
 80161da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80161de:	4b0d      	ldr	r3, [pc, #52]	; (8016214 <tcp_alloc+0xf8>)
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80161e6:	4b0c      	ldr	r3, [pc, #48]	; (8016218 <tcp_alloc+0xfc>)
 80161e8:	781a      	ldrb	r2, [r3, #0]
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80161f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	4a08      	ldr	r2, [pc, #32]	; (801621c <tcp_alloc+0x100>)
 80161fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	4a07      	ldr	r2, [pc, #28]	; (8016220 <tcp_alloc+0x104>)
 8016204:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016208:	68fb      	ldr	r3, [r7, #12]
}
 801620a:	4618      	mov	r0, r3
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	24007954 	.word	0x24007954
 8016218:	2400796a 	.word	0x2400796a
 801621c:	08015ed5 	.word	0x08015ed5
 8016220:	006ddd00 	.word	0x006ddd00

08016224 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	4603      	mov	r3, r0
 801622c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801622e:	2040      	movs	r0, #64	; 0x40
 8016230:	f7ff ff74 	bl	801611c <tcp_alloc>
 8016234:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016236:	68fb      	ldr	r3, [r7, #12]
}
 8016238:	4618      	mov	r0, r3
 801623a:	3710      	adds	r7, #16
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016240:	b480      	push	{r7}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d002      	beq.n	8016256 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	683a      	ldr	r2, [r7, #0]
 8016254:	611a      	str	r2, [r3, #16]
  }
}
 8016256:	bf00      	nop
 8016258:	370c      	adds	r7, #12
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr
	...

08016264 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d00e      	beq.n	8016292 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	7d1b      	ldrb	r3, [r3, #20]
 8016278:	2b01      	cmp	r3, #1
 801627a:	d106      	bne.n	801628a <tcp_recv+0x26>
 801627c:	4b07      	ldr	r3, [pc, #28]	; (801629c <tcp_recv+0x38>)
 801627e:	f240 72df 	movw	r2, #2015	; 0x7df
 8016282:	4907      	ldr	r1, [pc, #28]	; (80162a0 <tcp_recv+0x3c>)
 8016284:	4807      	ldr	r0, [pc, #28]	; (80162a4 <tcp_recv+0x40>)
 8016286:	f006 f91d 	bl	801c4c4 <iprintf>
    pcb->recv = recv;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	683a      	ldr	r2, [r7, #0]
 801628e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8016292:	bf00      	nop
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	08021804 	.word	0x08021804
 80162a0:	08021dc0 	.word	0x08021dc0
 80162a4:	08021868 	.word	0x08021868

080162a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d00e      	beq.n	80162d6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	7d1b      	ldrb	r3, [r3, #20]
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d106      	bne.n	80162ce <tcp_sent+0x26>
 80162c0:	4b07      	ldr	r3, [pc, #28]	; (80162e0 <tcp_sent+0x38>)
 80162c2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80162c6:	4907      	ldr	r1, [pc, #28]	; (80162e4 <tcp_sent+0x3c>)
 80162c8:	4807      	ldr	r0, [pc, #28]	; (80162e8 <tcp_sent+0x40>)
 80162ca:	f006 f8fb 	bl	801c4c4 <iprintf>
    pcb->sent = sent;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80162d6:	bf00      	nop
 80162d8:	3708      	adds	r7, #8
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	08021804 	.word	0x08021804
 80162e4:	08021de8 	.word	0x08021de8
 80162e8:	08021868 	.word	0x08021868

080162ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d00e      	beq.n	801631a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	7d1b      	ldrb	r3, [r3, #20]
 8016300:	2b01      	cmp	r3, #1
 8016302:	d106      	bne.n	8016312 <tcp_err+0x26>
 8016304:	4b07      	ldr	r3, [pc, #28]	; (8016324 <tcp_err+0x38>)
 8016306:	f640 020d 	movw	r2, #2061	; 0x80d
 801630a:	4907      	ldr	r1, [pc, #28]	; (8016328 <tcp_err+0x3c>)
 801630c:	4807      	ldr	r0, [pc, #28]	; (801632c <tcp_err+0x40>)
 801630e:	f006 f8d9 	bl	801c4c4 <iprintf>
    pcb->errf = err;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	683a      	ldr	r2, [r7, #0]
 8016316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801631a:	bf00      	nop
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
 8016322:	bf00      	nop
 8016324:	08021804 	.word	0x08021804
 8016328:	08021e10 	.word	0x08021e10
 801632c:	08021868 	.word	0x08021868

08016330 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016330:	b480      	push	{r7}
 8016332:	b085      	sub	sp, #20
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d008      	beq.n	8016352 <tcp_accept+0x22>
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	7d1b      	ldrb	r3, [r3, #20]
 8016344:	2b01      	cmp	r3, #1
 8016346:	d104      	bne.n	8016352 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	619a      	str	r2, [r3, #24]
  }
}
 8016352:	bf00      	nop
 8016354:	3714      	adds	r7, #20
 8016356:	46bd      	mov	sp, r7
 8016358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635c:	4770      	bx	lr
	...

08016360 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	4613      	mov	r3, r2
 801636c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d107      	bne.n	8016384 <tcp_poll+0x24>
 8016374:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <tcp_poll+0x50>)
 8016376:	f640 023d 	movw	r2, #2109	; 0x83d
 801637a:	490e      	ldr	r1, [pc, #56]	; (80163b4 <tcp_poll+0x54>)
 801637c:	480e      	ldr	r0, [pc, #56]	; (80163b8 <tcp_poll+0x58>)
 801637e:	f006 f8a1 	bl	801c4c4 <iprintf>
 8016382:	e011      	b.n	80163a8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	7d1b      	ldrb	r3, [r3, #20]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d106      	bne.n	801639a <tcp_poll+0x3a>
 801638c:	4b08      	ldr	r3, [pc, #32]	; (80163b0 <tcp_poll+0x50>)
 801638e:	f640 023e 	movw	r2, #2110	; 0x83e
 8016392:	490a      	ldr	r1, [pc, #40]	; (80163bc <tcp_poll+0x5c>)
 8016394:	4808      	ldr	r0, [pc, #32]	; (80163b8 <tcp_poll+0x58>)
 8016396:	f006 f895 	bl	801c4c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	79fa      	ldrb	r2, [r7, #7]
 80163a6:	775a      	strb	r2, [r3, #29]
}
 80163a8:	3710      	adds	r7, #16
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	08021804 	.word	0x08021804
 80163b4:	08021e38 	.word	0x08021e38
 80163b8:	08021868 	.word	0x08021868
 80163bc:	08021e50 	.word	0x08021e50

080163c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d107      	bne.n	80163de <tcp_pcb_purge+0x1e>
 80163ce:	4b21      	ldr	r3, [pc, #132]	; (8016454 <tcp_pcb_purge+0x94>)
 80163d0:	f640 0251 	movw	r2, #2129	; 0x851
 80163d4:	4920      	ldr	r1, [pc, #128]	; (8016458 <tcp_pcb_purge+0x98>)
 80163d6:	4821      	ldr	r0, [pc, #132]	; (801645c <tcp_pcb_purge+0x9c>)
 80163d8:	f006 f874 	bl	801c4c4 <iprintf>
 80163dc:	e037      	b.n	801644e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	7d1b      	ldrb	r3, [r3, #20]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d033      	beq.n	801644e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80163ea:	2b0a      	cmp	r3, #10
 80163ec:	d02f      	beq.n	801644e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	d02b      	beq.n	801644e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d007      	beq.n	801640e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016402:	4618      	mov	r0, r3
 8016404:	f7fd feac 	bl	8014160 <pbuf_free>
      pcb->refused_data = NULL;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2200      	movs	r2, #0
 801640c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016412:	2b00      	cmp	r3, #0
 8016414:	d002      	beq.n	801641c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 f986 	bl	8016728 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016422:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016428:	4618      	mov	r0, r3
 801642a:	f7ff fcf9 	bl	8015e20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016432:	4618      	mov	r0, r3
 8016434:	f7ff fcf4 	bl	8015e20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2200      	movs	r2, #0
 801643c:	66da      	str	r2, [r3, #108]	; 0x6c
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2200      	movs	r2, #0
 801644a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801644e:	3708      	adds	r7, #8
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}
 8016454:	08021804 	.word	0x08021804
 8016458:	08021e70 	.word	0x08021e70
 801645c:	08021868 	.word	0x08021868

08016460 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d106      	bne.n	801647e <tcp_pcb_remove+0x1e>
 8016470:	4b3e      	ldr	r3, [pc, #248]	; (801656c <tcp_pcb_remove+0x10c>)
 8016472:	f640 0283 	movw	r2, #2179	; 0x883
 8016476:	493e      	ldr	r1, [pc, #248]	; (8016570 <tcp_pcb_remove+0x110>)
 8016478:	483e      	ldr	r0, [pc, #248]	; (8016574 <tcp_pcb_remove+0x114>)
 801647a:	f006 f823 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d106      	bne.n	8016492 <tcp_pcb_remove+0x32>
 8016484:	4b39      	ldr	r3, [pc, #228]	; (801656c <tcp_pcb_remove+0x10c>)
 8016486:	f640 0284 	movw	r2, #2180	; 0x884
 801648a:	493b      	ldr	r1, [pc, #236]	; (8016578 <tcp_pcb_remove+0x118>)
 801648c:	4839      	ldr	r0, [pc, #228]	; (8016574 <tcp_pcb_remove+0x114>)
 801648e:	f006 f819 	bl	801c4c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	683a      	ldr	r2, [r7, #0]
 8016498:	429a      	cmp	r2, r3
 801649a:	d105      	bne.n	80164a8 <tcp_pcb_remove+0x48>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	68da      	ldr	r2, [r3, #12]
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	601a      	str	r2, [r3, #0]
 80164a6:	e013      	b.n	80164d0 <tcp_pcb_remove+0x70>
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	60fb      	str	r3, [r7, #12]
 80164ae:	e00c      	b.n	80164ca <tcp_pcb_remove+0x6a>
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	683a      	ldr	r2, [r7, #0]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d104      	bne.n	80164c4 <tcp_pcb_remove+0x64>
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	68da      	ldr	r2, [r3, #12]
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	60da      	str	r2, [r3, #12]
 80164c2:	e005      	b.n	80164d0 <tcp_pcb_remove+0x70>
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	68db      	ldr	r3, [r3, #12]
 80164c8:	60fb      	str	r3, [r7, #12]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d1ef      	bne.n	80164b0 <tcp_pcb_remove+0x50>
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	2200      	movs	r2, #0
 80164d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80164d6:	6838      	ldr	r0, [r7, #0]
 80164d8:	f7ff ff72 	bl	80163c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	7d1b      	ldrb	r3, [r3, #20]
 80164e0:	2b0a      	cmp	r3, #10
 80164e2:	d013      	beq.n	801650c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	d00f      	beq.n	801650c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	8b5b      	ldrh	r3, [r3, #26]
 80164f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d009      	beq.n	801650c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	8b5b      	ldrh	r3, [r3, #26]
 80164fc:	f043 0302 	orr.w	r3, r3, #2
 8016500:	b29a      	uxth	r2, r3
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016506:	6838      	ldr	r0, [r7, #0]
 8016508:	f003 fbc6 	bl	8019c98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	7d1b      	ldrb	r3, [r3, #20]
 8016510:	2b01      	cmp	r3, #1
 8016512:	d020      	beq.n	8016556 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016518:	2b00      	cmp	r3, #0
 801651a:	d006      	beq.n	801652a <tcp_pcb_remove+0xca>
 801651c:	4b13      	ldr	r3, [pc, #76]	; (801656c <tcp_pcb_remove+0x10c>)
 801651e:	f640 0293 	movw	r2, #2195	; 0x893
 8016522:	4916      	ldr	r1, [pc, #88]	; (801657c <tcp_pcb_remove+0x11c>)
 8016524:	4813      	ldr	r0, [pc, #76]	; (8016574 <tcp_pcb_remove+0x114>)
 8016526:	f005 ffcd 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801652e:	2b00      	cmp	r3, #0
 8016530:	d006      	beq.n	8016540 <tcp_pcb_remove+0xe0>
 8016532:	4b0e      	ldr	r3, [pc, #56]	; (801656c <tcp_pcb_remove+0x10c>)
 8016534:	f640 0294 	movw	r2, #2196	; 0x894
 8016538:	4911      	ldr	r1, [pc, #68]	; (8016580 <tcp_pcb_remove+0x120>)
 801653a:	480e      	ldr	r0, [pc, #56]	; (8016574 <tcp_pcb_remove+0x114>)
 801653c:	f005 ffc2 	bl	801c4c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016544:	2b00      	cmp	r3, #0
 8016546:	d006      	beq.n	8016556 <tcp_pcb_remove+0xf6>
 8016548:	4b08      	ldr	r3, [pc, #32]	; (801656c <tcp_pcb_remove+0x10c>)
 801654a:	f640 0296 	movw	r2, #2198	; 0x896
 801654e:	490d      	ldr	r1, [pc, #52]	; (8016584 <tcp_pcb_remove+0x124>)
 8016550:	4808      	ldr	r0, [pc, #32]	; (8016574 <tcp_pcb_remove+0x114>)
 8016552:	f005 ffb7 	bl	801c4c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	2200      	movs	r2, #0
 801655a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	2200      	movs	r2, #0
 8016560:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016562:	bf00      	nop
 8016564:	3710      	adds	r7, #16
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	08021804 	.word	0x08021804
 8016570:	08021e8c 	.word	0x08021e8c
 8016574:	08021868 	.word	0x08021868
 8016578:	08021ea8 	.word	0x08021ea8
 801657c:	08021ec8 	.word	0x08021ec8
 8016580:	08021ee0 	.word	0x08021ee0
 8016584:	08021efc 	.word	0x08021efc

08016588 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d106      	bne.n	80165a4 <tcp_next_iss+0x1c>
 8016596:	4b0a      	ldr	r3, [pc, #40]	; (80165c0 <tcp_next_iss+0x38>)
 8016598:	f640 02af 	movw	r2, #2223	; 0x8af
 801659c:	4909      	ldr	r1, [pc, #36]	; (80165c4 <tcp_next_iss+0x3c>)
 801659e:	480a      	ldr	r0, [pc, #40]	; (80165c8 <tcp_next_iss+0x40>)
 80165a0:	f005 ff90 	bl	801c4c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80165a4:	4b09      	ldr	r3, [pc, #36]	; (80165cc <tcp_next_iss+0x44>)
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	4b09      	ldr	r3, [pc, #36]	; (80165d0 <tcp_next_iss+0x48>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	4413      	add	r3, r2
 80165ae:	4a07      	ldr	r2, [pc, #28]	; (80165cc <tcp_next_iss+0x44>)
 80165b0:	6013      	str	r3, [r2, #0]
  return iss;
 80165b2:	4b06      	ldr	r3, [pc, #24]	; (80165cc <tcp_next_iss+0x44>)
 80165b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3708      	adds	r7, #8
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
 80165be:	bf00      	nop
 80165c0:	08021804 	.word	0x08021804
 80165c4:	08021f14 	.word	0x08021f14
 80165c8:	08021868 	.word	0x08021868
 80165cc:	24000030 	.word	0x24000030
 80165d0:	24007954 	.word	0x24007954

080165d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b086      	sub	sp, #24
 80165d8:	af00      	add	r7, sp, #0
 80165da:	4603      	mov	r3, r0
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	607a      	str	r2, [r7, #4]
 80165e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d106      	bne.n	80165f6 <tcp_eff_send_mss_netif+0x22>
 80165e8:	4b14      	ldr	r3, [pc, #80]	; (801663c <tcp_eff_send_mss_netif+0x68>)
 80165ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80165ee:	4914      	ldr	r1, [pc, #80]	; (8016640 <tcp_eff_send_mss_netif+0x6c>)
 80165f0:	4814      	ldr	r0, [pc, #80]	; (8016644 <tcp_eff_send_mss_netif+0x70>)
 80165f2:	f005 ff67 	bl	801c4c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80165f6:	68bb      	ldr	r3, [r7, #8]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d101      	bne.n	8016600 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80165fc:	89fb      	ldrh	r3, [r7, #14]
 80165fe:	e019      	b.n	8016634 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016604:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016606:	8afb      	ldrh	r3, [r7, #22]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d012      	beq.n	8016632 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801660c:	2328      	movs	r3, #40	; 0x28
 801660e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016610:	8afa      	ldrh	r2, [r7, #22]
 8016612:	8abb      	ldrh	r3, [r7, #20]
 8016614:	429a      	cmp	r2, r3
 8016616:	d904      	bls.n	8016622 <tcp_eff_send_mss_netif+0x4e>
 8016618:	8afa      	ldrh	r2, [r7, #22]
 801661a:	8abb      	ldrh	r3, [r7, #20]
 801661c:	1ad3      	subs	r3, r2, r3
 801661e:	b29b      	uxth	r3, r3
 8016620:	e000      	b.n	8016624 <tcp_eff_send_mss_netif+0x50>
 8016622:	2300      	movs	r3, #0
 8016624:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016626:	8a7a      	ldrh	r2, [r7, #18]
 8016628:	89fb      	ldrh	r3, [r7, #14]
 801662a:	4293      	cmp	r3, r2
 801662c:	bf28      	it	cs
 801662e:	4613      	movcs	r3, r2
 8016630:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016632:	89fb      	ldrh	r3, [r7, #14]
}
 8016634:	4618      	mov	r0, r3
 8016636:	3718      	adds	r7, #24
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	08021804 	.word	0x08021804
 8016640:	08021f30 	.word	0x08021f30
 8016644:	08021868 	.word	0x08021868

08016648 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d119      	bne.n	8016690 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801665c:	4b10      	ldr	r3, [pc, #64]	; (80166a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801665e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016662:	4910      	ldr	r1, [pc, #64]	; (80166a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016664:	4810      	ldr	r0, [pc, #64]	; (80166a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016666:	f005 ff2d 	bl	801c4c4 <iprintf>

  while (pcb != NULL) {
 801666a:	e011      	b.n	8016690 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	429a      	cmp	r2, r3
 8016676:	d108      	bne.n	801668a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801667e:	68f8      	ldr	r0, [r7, #12]
 8016680:	f7fe fd50 	bl	8015124 <tcp_abort>
      pcb = next;
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	60fb      	str	r3, [r7, #12]
 8016688:	e002      	b.n	8016690 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	68db      	ldr	r3, [r3, #12]
 801668e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d1ea      	bne.n	801666c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016696:	bf00      	nop
 8016698:	bf00      	nop
 801669a:	3710      	adds	r7, #16
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	08021804 	.word	0x08021804
 80166a4:	08021f58 	.word	0x08021f58
 80166a8:	08021868 	.word	0x08021868

080166ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b084      	sub	sp, #16
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d02a      	beq.n	8016712 <tcp_netif_ip_addr_changed+0x66>
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d026      	beq.n	8016712 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80166c4:	4b15      	ldr	r3, [pc, #84]	; (801671c <tcp_netif_ip_addr_changed+0x70>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	4619      	mov	r1, r3
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f7ff ffbc 	bl	8016648 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80166d0:	4b13      	ldr	r3, [pc, #76]	; (8016720 <tcp_netif_ip_addr_changed+0x74>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	4619      	mov	r1, r3
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f7ff ffb6 	bl	8016648 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d017      	beq.n	8016712 <tcp_netif_ip_addr_changed+0x66>
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d013      	beq.n	8016712 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80166ea:	4b0e      	ldr	r3, [pc, #56]	; (8016724 <tcp_netif_ip_addr_changed+0x78>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	60fb      	str	r3, [r7, #12]
 80166f0:	e00c      	b.n	801670c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681a      	ldr	r2, [r3, #0]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d103      	bne.n	8016706 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	60fb      	str	r3, [r7, #12]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1ef      	bne.n	80166f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016712:	bf00      	nop
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop
 801671c:	24007960 	.word	0x24007960
 8016720:	24007958 	.word	0x24007958
 8016724:	2400795c 	.word	0x2400795c

08016728 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016734:	2b00      	cmp	r3, #0
 8016736:	d007      	beq.n	8016748 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801673c:	4618      	mov	r0, r3
 801673e:	f7ff fb6f 	bl	8015e20 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2200      	movs	r2, #0
 8016746:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016748:	bf00      	nop
 801674a:	3708      	adds	r7, #8
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016750:	b590      	push	{r4, r7, lr}
 8016752:	b08d      	sub	sp, #52	; 0x34
 8016754:	af04      	add	r7, sp, #16
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d105      	bne.n	801676c <tcp_input+0x1c>
 8016760:	4b9b      	ldr	r3, [pc, #620]	; (80169d0 <tcp_input+0x280>)
 8016762:	2283      	movs	r2, #131	; 0x83
 8016764:	499b      	ldr	r1, [pc, #620]	; (80169d4 <tcp_input+0x284>)
 8016766:	489c      	ldr	r0, [pc, #624]	; (80169d8 <tcp_input+0x288>)
 8016768:	f005 feac 	bl	801c4c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	685b      	ldr	r3, [r3, #4]
 8016770:	4a9a      	ldr	r2, [pc, #616]	; (80169dc <tcp_input+0x28c>)
 8016772:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	895b      	ldrh	r3, [r3, #10]
 8016778:	2b13      	cmp	r3, #19
 801677a:	f240 83d1 	bls.w	8016f20 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801677e:	4b98      	ldr	r3, [pc, #608]	; (80169e0 <tcp_input+0x290>)
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	4a97      	ldr	r2, [pc, #604]	; (80169e0 <tcp_input+0x290>)
 8016784:	6812      	ldr	r2, [r2, #0]
 8016786:	4611      	mov	r1, r2
 8016788:	4618      	mov	r0, r3
 801678a:	f7fb fa0b 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	f040 83c7 	bne.w	8016f24 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016796:	4b92      	ldr	r3, [pc, #584]	; (80169e0 <tcp_input+0x290>)
 8016798:	695b      	ldr	r3, [r3, #20]
 801679a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801679e:	2be0      	cmp	r3, #224	; 0xe0
 80167a0:	f000 83c0 	beq.w	8016f24 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80167a4:	4b8d      	ldr	r3, [pc, #564]	; (80169dc <tcp_input+0x28c>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	899b      	ldrh	r3, [r3, #12]
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7f7 fd8d 	bl	800e2cc <lwip_htons>
 80167b2:	4603      	mov	r3, r0
 80167b4:	0b1b      	lsrs	r3, r3, #12
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80167be:	7cbb      	ldrb	r3, [r7, #18]
 80167c0:	2b13      	cmp	r3, #19
 80167c2:	f240 83b1 	bls.w	8016f28 <tcp_input+0x7d8>
 80167c6:	7cbb      	ldrb	r3, [r7, #18]
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	891b      	ldrh	r3, [r3, #8]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	f200 83aa 	bhi.w	8016f28 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80167d4:	7cbb      	ldrb	r3, [r7, #18]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	3b14      	subs	r3, #20
 80167da:	b29a      	uxth	r2, r3
 80167dc:	4b81      	ldr	r3, [pc, #516]	; (80169e4 <tcp_input+0x294>)
 80167de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80167e0:	4b81      	ldr	r3, [pc, #516]	; (80169e8 <tcp_input+0x298>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	895a      	ldrh	r2, [r3, #10]
 80167ea:	7cbb      	ldrb	r3, [r7, #18]
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d309      	bcc.n	8016806 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80167f2:	4b7c      	ldr	r3, [pc, #496]	; (80169e4 <tcp_input+0x294>)
 80167f4:	881a      	ldrh	r2, [r3, #0]
 80167f6:	4b7d      	ldr	r3, [pc, #500]	; (80169ec <tcp_input+0x29c>)
 80167f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80167fa:	7cbb      	ldrb	r3, [r7, #18]
 80167fc:	4619      	mov	r1, r3
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f7fd fc28 	bl	8014054 <pbuf_remove_header>
 8016804:	e04e      	b.n	80168a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d105      	bne.n	801681a <tcp_input+0xca>
 801680e:	4b70      	ldr	r3, [pc, #448]	; (80169d0 <tcp_input+0x280>)
 8016810:	22c2      	movs	r2, #194	; 0xc2
 8016812:	4977      	ldr	r1, [pc, #476]	; (80169f0 <tcp_input+0x2a0>)
 8016814:	4870      	ldr	r0, [pc, #448]	; (80169d8 <tcp_input+0x288>)
 8016816:	f005 fe55 	bl	801c4c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801681a:	2114      	movs	r1, #20
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f7fd fc19 	bl	8014054 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	895a      	ldrh	r2, [r3, #10]
 8016826:	4b71      	ldr	r3, [pc, #452]	; (80169ec <tcp_input+0x29c>)
 8016828:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801682a:	4b6e      	ldr	r3, [pc, #440]	; (80169e4 <tcp_input+0x294>)
 801682c:	881a      	ldrh	r2, [r3, #0]
 801682e:	4b6f      	ldr	r3, [pc, #444]	; (80169ec <tcp_input+0x29c>)
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016836:	4b6d      	ldr	r3, [pc, #436]	; (80169ec <tcp_input+0x29c>)
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7fd fc09 	bl	8014054 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	895b      	ldrh	r3, [r3, #10]
 8016848:	8a3a      	ldrh	r2, [r7, #16]
 801684a:	429a      	cmp	r2, r3
 801684c:	f200 836e 	bhi.w	8016f2c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	4a64      	ldr	r2, [pc, #400]	; (80169e8 <tcp_input+0x298>)
 8016858:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	8a3a      	ldrh	r2, [r7, #16]
 8016860:	4611      	mov	r1, r2
 8016862:	4618      	mov	r0, r3
 8016864:	f7fd fbf6 	bl	8014054 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	891a      	ldrh	r2, [r3, #8]
 801686c:	8a3b      	ldrh	r3, [r7, #16]
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	b29a      	uxth	r2, r3
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	895b      	ldrh	r3, [r3, #10]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d005      	beq.n	801688a <tcp_input+0x13a>
 801687e:	4b54      	ldr	r3, [pc, #336]	; (80169d0 <tcp_input+0x280>)
 8016880:	22df      	movs	r2, #223	; 0xdf
 8016882:	495c      	ldr	r1, [pc, #368]	; (80169f4 <tcp_input+0x2a4>)
 8016884:	4854      	ldr	r0, [pc, #336]	; (80169d8 <tcp_input+0x288>)
 8016886:	f005 fe1d 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	891a      	ldrh	r2, [r3, #8]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	891b      	ldrh	r3, [r3, #8]
 8016894:	429a      	cmp	r2, r3
 8016896:	d005      	beq.n	80168a4 <tcp_input+0x154>
 8016898:	4b4d      	ldr	r3, [pc, #308]	; (80169d0 <tcp_input+0x280>)
 801689a:	22e0      	movs	r2, #224	; 0xe0
 801689c:	4956      	ldr	r1, [pc, #344]	; (80169f8 <tcp_input+0x2a8>)
 801689e:	484e      	ldr	r0, [pc, #312]	; (80169d8 <tcp_input+0x288>)
 80168a0:	f005 fe10 	bl	801c4c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80168a4:	4b4d      	ldr	r3, [pc, #308]	; (80169dc <tcp_input+0x28c>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	881b      	ldrh	r3, [r3, #0]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4a4b      	ldr	r2, [pc, #300]	; (80169dc <tcp_input+0x28c>)
 80168ae:	6814      	ldr	r4, [r2, #0]
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7f7 fd0b 	bl	800e2cc <lwip_htons>
 80168b6:	4603      	mov	r3, r0
 80168b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80168ba:	4b48      	ldr	r3, [pc, #288]	; (80169dc <tcp_input+0x28c>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	885b      	ldrh	r3, [r3, #2]
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	4a46      	ldr	r2, [pc, #280]	; (80169dc <tcp_input+0x28c>)
 80168c4:	6814      	ldr	r4, [r2, #0]
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7f7 fd00 	bl	800e2cc <lwip_htons>
 80168cc:	4603      	mov	r3, r0
 80168ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80168d0:	4b42      	ldr	r3, [pc, #264]	; (80169dc <tcp_input+0x28c>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	4a41      	ldr	r2, [pc, #260]	; (80169dc <tcp_input+0x28c>)
 80168d8:	6814      	ldr	r4, [r2, #0]
 80168da:	4618      	mov	r0, r3
 80168dc:	f7f7 fd0b 	bl	800e2f6 <lwip_htonl>
 80168e0:	4603      	mov	r3, r0
 80168e2:	6063      	str	r3, [r4, #4]
 80168e4:	6863      	ldr	r3, [r4, #4]
 80168e6:	4a45      	ldr	r2, [pc, #276]	; (80169fc <tcp_input+0x2ac>)
 80168e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80168ea:	4b3c      	ldr	r3, [pc, #240]	; (80169dc <tcp_input+0x28c>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	689b      	ldr	r3, [r3, #8]
 80168f0:	4a3a      	ldr	r2, [pc, #232]	; (80169dc <tcp_input+0x28c>)
 80168f2:	6814      	ldr	r4, [r2, #0]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7f7 fcfe 	bl	800e2f6 <lwip_htonl>
 80168fa:	4603      	mov	r3, r0
 80168fc:	60a3      	str	r3, [r4, #8]
 80168fe:	68a3      	ldr	r3, [r4, #8]
 8016900:	4a3f      	ldr	r2, [pc, #252]	; (8016a00 <tcp_input+0x2b0>)
 8016902:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016904:	4b35      	ldr	r3, [pc, #212]	; (80169dc <tcp_input+0x28c>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	89db      	ldrh	r3, [r3, #14]
 801690a:	b29b      	uxth	r3, r3
 801690c:	4a33      	ldr	r2, [pc, #204]	; (80169dc <tcp_input+0x28c>)
 801690e:	6814      	ldr	r4, [r2, #0]
 8016910:	4618      	mov	r0, r3
 8016912:	f7f7 fcdb 	bl	800e2cc <lwip_htons>
 8016916:	4603      	mov	r3, r0
 8016918:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801691a:	4b30      	ldr	r3, [pc, #192]	; (80169dc <tcp_input+0x28c>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	899b      	ldrh	r3, [r3, #12]
 8016920:	b29b      	uxth	r3, r3
 8016922:	4618      	mov	r0, r3
 8016924:	f7f7 fcd2 	bl	800e2cc <lwip_htons>
 8016928:	4603      	mov	r3, r0
 801692a:	b2db      	uxtb	r3, r3
 801692c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016930:	b2da      	uxtb	r2, r3
 8016932:	4b34      	ldr	r3, [pc, #208]	; (8016a04 <tcp_input+0x2b4>)
 8016934:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	891a      	ldrh	r2, [r3, #8]
 801693a:	4b33      	ldr	r3, [pc, #204]	; (8016a08 <tcp_input+0x2b8>)
 801693c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801693e:	4b31      	ldr	r3, [pc, #196]	; (8016a04 <tcp_input+0x2b4>)
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	f003 0303 	and.w	r3, r3, #3
 8016946:	2b00      	cmp	r3, #0
 8016948:	d00c      	beq.n	8016964 <tcp_input+0x214>
    tcplen++;
 801694a:	4b2f      	ldr	r3, [pc, #188]	; (8016a08 <tcp_input+0x2b8>)
 801694c:	881b      	ldrh	r3, [r3, #0]
 801694e:	3301      	adds	r3, #1
 8016950:	b29a      	uxth	r2, r3
 8016952:	4b2d      	ldr	r3, [pc, #180]	; (8016a08 <tcp_input+0x2b8>)
 8016954:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	891a      	ldrh	r2, [r3, #8]
 801695a:	4b2b      	ldr	r3, [pc, #172]	; (8016a08 <tcp_input+0x2b8>)
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	429a      	cmp	r2, r3
 8016960:	f200 82e6 	bhi.w	8016f30 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016964:	2300      	movs	r3, #0
 8016966:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016968:	4b28      	ldr	r3, [pc, #160]	; (8016a0c <tcp_input+0x2bc>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	61fb      	str	r3, [r7, #28]
 801696e:	e09d      	b.n	8016aac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	7d1b      	ldrb	r3, [r3, #20]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d105      	bne.n	8016984 <tcp_input+0x234>
 8016978:	4b15      	ldr	r3, [pc, #84]	; (80169d0 <tcp_input+0x280>)
 801697a:	22fb      	movs	r2, #251	; 0xfb
 801697c:	4924      	ldr	r1, [pc, #144]	; (8016a10 <tcp_input+0x2c0>)
 801697e:	4816      	ldr	r0, [pc, #88]	; (80169d8 <tcp_input+0x288>)
 8016980:	f005 fda0 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	7d1b      	ldrb	r3, [r3, #20]
 8016988:	2b0a      	cmp	r3, #10
 801698a:	d105      	bne.n	8016998 <tcp_input+0x248>
 801698c:	4b10      	ldr	r3, [pc, #64]	; (80169d0 <tcp_input+0x280>)
 801698e:	22fc      	movs	r2, #252	; 0xfc
 8016990:	4920      	ldr	r1, [pc, #128]	; (8016a14 <tcp_input+0x2c4>)
 8016992:	4811      	ldr	r0, [pc, #68]	; (80169d8 <tcp_input+0x288>)
 8016994:	f005 fd96 	bl	801c4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	7d1b      	ldrb	r3, [r3, #20]
 801699c:	2b01      	cmp	r3, #1
 801699e:	d105      	bne.n	80169ac <tcp_input+0x25c>
 80169a0:	4b0b      	ldr	r3, [pc, #44]	; (80169d0 <tcp_input+0x280>)
 80169a2:	22fd      	movs	r2, #253	; 0xfd
 80169a4:	491c      	ldr	r1, [pc, #112]	; (8016a18 <tcp_input+0x2c8>)
 80169a6:	480c      	ldr	r0, [pc, #48]	; (80169d8 <tcp_input+0x288>)
 80169a8:	f005 fd8c 	bl	801c4c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169ac:	69fb      	ldr	r3, [r7, #28]
 80169ae:	7a1b      	ldrb	r3, [r3, #8]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d033      	beq.n	8016a1c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	7a1a      	ldrb	r2, [r3, #8]
 80169b8:	4b09      	ldr	r3, [pc, #36]	; (80169e0 <tcp_input+0x290>)
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80169c0:	3301      	adds	r3, #1
 80169c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d029      	beq.n	8016a1c <tcp_input+0x2cc>
      prev = pcb;
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	61bb      	str	r3, [r7, #24]
      continue;
 80169cc:	e06b      	b.n	8016aa6 <tcp_input+0x356>
 80169ce:	bf00      	nop
 80169d0:	08021f8c 	.word	0x08021f8c
 80169d4:	08021fe0 	.word	0x08021fe0
 80169d8:	08021ff8 	.word	0x08021ff8
 80169dc:	2400797c 	.word	0x2400797c
 80169e0:	24004820 	.word	0x24004820
 80169e4:	24007980 	.word	0x24007980
 80169e8:	24007984 	.word	0x24007984
 80169ec:	24007982 	.word	0x24007982
 80169f0:	08022020 	.word	0x08022020
 80169f4:	08022030 	.word	0x08022030
 80169f8:	0802203c 	.word	0x0802203c
 80169fc:	2400798c 	.word	0x2400798c
 8016a00:	24007990 	.word	0x24007990
 8016a04:	24007998 	.word	0x24007998
 8016a08:	24007996 	.word	0x24007996
 8016a0c:	24007960 	.word	0x24007960
 8016a10:	0802205c 	.word	0x0802205c
 8016a14:	08022084 	.word	0x08022084
 8016a18:	080220b0 	.word	0x080220b0
    }

    if (pcb->remote_port == tcphdr->src &&
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	8b1a      	ldrh	r2, [r3, #24]
 8016a20:	4b72      	ldr	r3, [pc, #456]	; (8016bec <tcp_input+0x49c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	881b      	ldrh	r3, [r3, #0]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d13a      	bne.n	8016aa2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016a2c:	69fb      	ldr	r3, [r7, #28]
 8016a2e:	8ada      	ldrh	r2, [r3, #22]
 8016a30:	4b6e      	ldr	r3, [pc, #440]	; (8016bec <tcp_input+0x49c>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	885b      	ldrh	r3, [r3, #2]
 8016a36:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d132      	bne.n	8016aa2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	685a      	ldr	r2, [r3, #4]
 8016a40:	4b6b      	ldr	r3, [pc, #428]	; (8016bf0 <tcp_input+0x4a0>)
 8016a42:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d12c      	bne.n	8016aa2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	4b68      	ldr	r3, [pc, #416]	; (8016bf0 <tcp_input+0x4a0>)
 8016a4e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d126      	bne.n	8016aa2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016a54:	69fb      	ldr	r3, [r7, #28]
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	69fa      	ldr	r2, [r7, #28]
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d106      	bne.n	8016a6c <tcp_input+0x31c>
 8016a5e:	4b65      	ldr	r3, [pc, #404]	; (8016bf4 <tcp_input+0x4a4>)
 8016a60:	f240 120d 	movw	r2, #269	; 0x10d
 8016a64:	4964      	ldr	r1, [pc, #400]	; (8016bf8 <tcp_input+0x4a8>)
 8016a66:	4865      	ldr	r0, [pc, #404]	; (8016bfc <tcp_input+0x4ac>)
 8016a68:	f005 fd2c 	bl	801c4c4 <iprintf>
      if (prev != NULL) {
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d00a      	beq.n	8016a88 <tcp_input+0x338>
        prev->next = pcb->next;
 8016a72:	69fb      	ldr	r3, [r7, #28]
 8016a74:	68da      	ldr	r2, [r3, #12]
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016a7a:	4b61      	ldr	r3, [pc, #388]	; (8016c00 <tcp_input+0x4b0>)
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016a82:	4a5f      	ldr	r2, [pc, #380]	; (8016c00 <tcp_input+0x4b0>)
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	68db      	ldr	r3, [r3, #12]
 8016a8c:	69fa      	ldr	r2, [r7, #28]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d111      	bne.n	8016ab6 <tcp_input+0x366>
 8016a92:	4b58      	ldr	r3, [pc, #352]	; (8016bf4 <tcp_input+0x4a4>)
 8016a94:	f240 1215 	movw	r2, #277	; 0x115
 8016a98:	495a      	ldr	r1, [pc, #360]	; (8016c04 <tcp_input+0x4b4>)
 8016a9a:	4858      	ldr	r0, [pc, #352]	; (8016bfc <tcp_input+0x4ac>)
 8016a9c:	f005 fd12 	bl	801c4c4 <iprintf>
      break;
 8016aa0:	e009      	b.n	8016ab6 <tcp_input+0x366>
    }
    prev = pcb;
 8016aa2:	69fb      	ldr	r3, [r7, #28]
 8016aa4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	68db      	ldr	r3, [r3, #12]
 8016aaa:	61fb      	str	r3, [r7, #28]
 8016aac:	69fb      	ldr	r3, [r7, #28]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f47f af5e 	bne.w	8016970 <tcp_input+0x220>
 8016ab4:	e000      	b.n	8016ab8 <tcp_input+0x368>
      break;
 8016ab6:	bf00      	nop
  }

  if (pcb == NULL) {
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	f040 80aa 	bne.w	8016c14 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ac0:	4b51      	ldr	r3, [pc, #324]	; (8016c08 <tcp_input+0x4b8>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	61fb      	str	r3, [r7, #28]
 8016ac6:	e03f      	b.n	8016b48 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016ac8:	69fb      	ldr	r3, [r7, #28]
 8016aca:	7d1b      	ldrb	r3, [r3, #20]
 8016acc:	2b0a      	cmp	r3, #10
 8016ace:	d006      	beq.n	8016ade <tcp_input+0x38e>
 8016ad0:	4b48      	ldr	r3, [pc, #288]	; (8016bf4 <tcp_input+0x4a4>)
 8016ad2:	f240 121f 	movw	r2, #287	; 0x11f
 8016ad6:	494d      	ldr	r1, [pc, #308]	; (8016c0c <tcp_input+0x4bc>)
 8016ad8:	4848      	ldr	r0, [pc, #288]	; (8016bfc <tcp_input+0x4ac>)
 8016ada:	f005 fcf3 	bl	801c4c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ade:	69fb      	ldr	r3, [r7, #28]
 8016ae0:	7a1b      	ldrb	r3, [r3, #8]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d009      	beq.n	8016afa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ae6:	69fb      	ldr	r3, [r7, #28]
 8016ae8:	7a1a      	ldrb	r2, [r3, #8]
 8016aea:	4b41      	ldr	r3, [pc, #260]	; (8016bf0 <tcp_input+0x4a0>)
 8016aec:	685b      	ldr	r3, [r3, #4]
 8016aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016af2:	3301      	adds	r3, #1
 8016af4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d122      	bne.n	8016b40 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016afa:	69fb      	ldr	r3, [r7, #28]
 8016afc:	8b1a      	ldrh	r2, [r3, #24]
 8016afe:	4b3b      	ldr	r3, [pc, #236]	; (8016bec <tcp_input+0x49c>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d11b      	bne.n	8016b42 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	8ada      	ldrh	r2, [r3, #22]
 8016b0e:	4b37      	ldr	r3, [pc, #220]	; (8016bec <tcp_input+0x49c>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	885b      	ldrh	r3, [r3, #2]
 8016b14:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d113      	bne.n	8016b42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b1a:	69fb      	ldr	r3, [r7, #28]
 8016b1c:	685a      	ldr	r2, [r3, #4]
 8016b1e:	4b34      	ldr	r3, [pc, #208]	; (8016bf0 <tcp_input+0x4a0>)
 8016b20:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d10d      	bne.n	8016b42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	681a      	ldr	r2, [r3, #0]
 8016b2a:	4b31      	ldr	r3, [pc, #196]	; (8016bf0 <tcp_input+0x4a0>)
 8016b2c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d107      	bne.n	8016b42 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016b32:	69f8      	ldr	r0, [r7, #28]
 8016b34:	f000 fb56 	bl	80171e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f7fd fb11 	bl	8014160 <pbuf_free>
        return;
 8016b3e:	e1fd      	b.n	8016f3c <tcp_input+0x7ec>
        continue;
 8016b40:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	68db      	ldr	r3, [r3, #12]
 8016b46:	61fb      	str	r3, [r7, #28]
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d1bc      	bne.n	8016ac8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b52:	4b2f      	ldr	r3, [pc, #188]	; (8016c10 <tcp_input+0x4c0>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	617b      	str	r3, [r7, #20]
 8016b58:	e02a      	b.n	8016bb0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	7a1b      	ldrb	r3, [r3, #8]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00c      	beq.n	8016b7c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	7a1a      	ldrb	r2, [r3, #8]
 8016b66:	4b22      	ldr	r3, [pc, #136]	; (8016bf0 <tcp_input+0x4a0>)
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b6e:	3301      	adds	r3, #1
 8016b70:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d002      	beq.n	8016b7c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	61bb      	str	r3, [r7, #24]
        continue;
 8016b7a:	e016      	b.n	8016baa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	8ada      	ldrh	r2, [r3, #22]
 8016b80:	4b1a      	ldr	r3, [pc, #104]	; (8016bec <tcp_input+0x49c>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	885b      	ldrh	r3, [r3, #2]
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d10c      	bne.n	8016ba6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	681a      	ldr	r2, [r3, #0]
 8016b90:	4b17      	ldr	r3, [pc, #92]	; (8016bf0 <tcp_input+0x4a0>)
 8016b92:	695b      	ldr	r3, [r3, #20]
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d00f      	beq.n	8016bb8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00d      	beq.n	8016bba <tcp_input+0x46a>
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d009      	beq.n	8016bba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	617b      	str	r3, [r7, #20]
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d1d1      	bne.n	8016b5a <tcp_input+0x40a>
 8016bb6:	e000      	b.n	8016bba <tcp_input+0x46a>
            break;
 8016bb8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016bba:	697b      	ldr	r3, [r7, #20]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d029      	beq.n	8016c14 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d00a      	beq.n	8016bdc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	68da      	ldr	r2, [r3, #12]
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016bce:	4b10      	ldr	r3, [pc, #64]	; (8016c10 <tcp_input+0x4c0>)
 8016bd0:	681a      	ldr	r2, [r3, #0]
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016bd6:	4a0e      	ldr	r2, [pc, #56]	; (8016c10 <tcp_input+0x4c0>)
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016bdc:	6978      	ldr	r0, [r7, #20]
 8016bde:	f000 fa03 	bl	8016fe8 <tcp_listen_input>
      }
      pbuf_free(p);
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f7fd fabc 	bl	8014160 <pbuf_free>
      return;
 8016be8:	e1a8      	b.n	8016f3c <tcp_input+0x7ec>
 8016bea:	bf00      	nop
 8016bec:	2400797c 	.word	0x2400797c
 8016bf0:	24004820 	.word	0x24004820
 8016bf4:	08021f8c 	.word	0x08021f8c
 8016bf8:	080220d8 	.word	0x080220d8
 8016bfc:	08021ff8 	.word	0x08021ff8
 8016c00:	24007960 	.word	0x24007960
 8016c04:	08022104 	.word	0x08022104
 8016c08:	24007964 	.word	0x24007964
 8016c0c:	08022130 	.word	0x08022130
 8016c10:	2400795c 	.word	0x2400795c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	f000 8158 	beq.w	8016ecc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016c1c:	4b95      	ldr	r3, [pc, #596]	; (8016e74 <tcp_input+0x724>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	891a      	ldrh	r2, [r3, #8]
 8016c26:	4b93      	ldr	r3, [pc, #588]	; (8016e74 <tcp_input+0x724>)
 8016c28:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016c2a:	4a92      	ldr	r2, [pc, #584]	; (8016e74 <tcp_input+0x724>)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016c30:	4b91      	ldr	r3, [pc, #580]	; (8016e78 <tcp_input+0x728>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	4a8f      	ldr	r2, [pc, #572]	; (8016e74 <tcp_input+0x724>)
 8016c36:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016c38:	4b90      	ldr	r3, [pc, #576]	; (8016e7c <tcp_input+0x72c>)
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016c3e:	4b90      	ldr	r3, [pc, #576]	; (8016e80 <tcp_input+0x730>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016c44:	4b8f      	ldr	r3, [pc, #572]	; (8016e84 <tcp_input+0x734>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016c4a:	4b8f      	ldr	r3, [pc, #572]	; (8016e88 <tcp_input+0x738>)
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	f003 0308 	and.w	r3, r3, #8
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d006      	beq.n	8016c64 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	7b5b      	ldrb	r3, [r3, #13]
 8016c5a:	f043 0301 	orr.w	r3, r3, #1
 8016c5e:	b2da      	uxtb	r2, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016c64:	69fb      	ldr	r3, [r7, #28]
 8016c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d017      	beq.n	8016c9c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016c6c:	69f8      	ldr	r0, [r7, #28]
 8016c6e:	f7ff f85b 	bl	8015d28 <tcp_process_refused_data>
 8016c72:	4603      	mov	r3, r0
 8016c74:	f113 0f0d 	cmn.w	r3, #13
 8016c78:	d007      	beq.n	8016c8a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d00c      	beq.n	8016c9c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c82:	4b82      	ldr	r3, [pc, #520]	; (8016e8c <tcp_input+0x73c>)
 8016c84:	881b      	ldrh	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d008      	beq.n	8016c9c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	f040 80e3 	bne.w	8016e5a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016c94:	69f8      	ldr	r0, [r7, #28]
 8016c96:	f003 fe05 	bl	801a8a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016c9a:	e0de      	b.n	8016e5a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016c9c:	4a7c      	ldr	r2, [pc, #496]	; (8016e90 <tcp_input+0x740>)
 8016c9e:	69fb      	ldr	r3, [r7, #28]
 8016ca0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016ca2:	69f8      	ldr	r0, [r7, #28]
 8016ca4:	f000 fb18 	bl	80172d8 <tcp_process>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cb0:	f113 0f0d 	cmn.w	r3, #13
 8016cb4:	f000 80d3 	beq.w	8016e5e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8016cb8:	4b71      	ldr	r3, [pc, #452]	; (8016e80 <tcp_input+0x730>)
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	f003 0308 	and.w	r3, r3, #8
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d015      	beq.n	8016cf0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d008      	beq.n	8016ce0 <tcp_input+0x590>
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cd4:	69fa      	ldr	r2, [r7, #28]
 8016cd6:	6912      	ldr	r2, [r2, #16]
 8016cd8:	f06f 010d 	mvn.w	r1, #13
 8016cdc:	4610      	mov	r0, r2
 8016cde:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016ce0:	69f9      	ldr	r1, [r7, #28]
 8016ce2:	486c      	ldr	r0, [pc, #432]	; (8016e94 <tcp_input+0x744>)
 8016ce4:	f7ff fbbc 	bl	8016460 <tcp_pcb_remove>
        tcp_free(pcb);
 8016ce8:	69f8      	ldr	r0, [r7, #28]
 8016cea:	f7fd fed7 	bl	8014a9c <tcp_free>
 8016cee:	e0da      	b.n	8016ea6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016cf4:	4b63      	ldr	r3, [pc, #396]	; (8016e84 <tcp_input+0x734>)
 8016cf6:	881b      	ldrh	r3, [r3, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d01d      	beq.n	8016d38 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016cfc:	4b61      	ldr	r3, [pc, #388]	; (8016e84 <tcp_input+0x734>)
 8016cfe:	881b      	ldrh	r3, [r3, #0]
 8016d00:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016d02:	69fb      	ldr	r3, [r7, #28]
 8016d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d00a      	beq.n	8016d22 <tcp_input+0x5d2>
 8016d0c:	69fb      	ldr	r3, [r7, #28]
 8016d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d12:	69fa      	ldr	r2, [r7, #28]
 8016d14:	6910      	ldr	r0, [r2, #16]
 8016d16:	89fa      	ldrh	r2, [r7, #14]
 8016d18:	69f9      	ldr	r1, [r7, #28]
 8016d1a:	4798      	blx	r3
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	74fb      	strb	r3, [r7, #19]
 8016d20:	e001      	b.n	8016d26 <tcp_input+0x5d6>
 8016d22:	2300      	movs	r3, #0
 8016d24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d2a:	f113 0f0d 	cmn.w	r3, #13
 8016d2e:	f000 8098 	beq.w	8016e62 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016d32:	4b54      	ldr	r3, [pc, #336]	; (8016e84 <tcp_input+0x734>)
 8016d34:	2200      	movs	r2, #0
 8016d36:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016d38:	69f8      	ldr	r0, [r7, #28]
 8016d3a:	f000 f915 	bl	8016f68 <tcp_input_delayed_close>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	f040 8090 	bne.w	8016e66 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016d46:	4b4d      	ldr	r3, [pc, #308]	; (8016e7c <tcp_input+0x72c>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d041      	beq.n	8016dd2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016d4e:	69fb      	ldr	r3, [r7, #28]
 8016d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d006      	beq.n	8016d64 <tcp_input+0x614>
 8016d56:	4b50      	ldr	r3, [pc, #320]	; (8016e98 <tcp_input+0x748>)
 8016d58:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016d5c:	494f      	ldr	r1, [pc, #316]	; (8016e9c <tcp_input+0x74c>)
 8016d5e:	4850      	ldr	r0, [pc, #320]	; (8016ea0 <tcp_input+0x750>)
 8016d60:	f005 fbb0 	bl	801c4c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	8b5b      	ldrh	r3, [r3, #26]
 8016d68:	f003 0310 	and.w	r3, r3, #16
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d008      	beq.n	8016d82 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016d70:	4b42      	ldr	r3, [pc, #264]	; (8016e7c <tcp_input+0x72c>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7fd f9f3 	bl	8014160 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016d7a:	69f8      	ldr	r0, [r7, #28]
 8016d7c:	f7fe f9d2 	bl	8015124 <tcp_abort>
            goto aborted;
 8016d80:	e091      	b.n	8016ea6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016d82:	69fb      	ldr	r3, [r7, #28]
 8016d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d00c      	beq.n	8016da6 <tcp_input+0x656>
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	6918      	ldr	r0, [r3, #16]
 8016d96:	4b39      	ldr	r3, [pc, #228]	; (8016e7c <tcp_input+0x72c>)
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	69f9      	ldr	r1, [r7, #28]
 8016d9e:	47a0      	blx	r4
 8016da0:	4603      	mov	r3, r0
 8016da2:	74fb      	strb	r3, [r7, #19]
 8016da4:	e008      	b.n	8016db8 <tcp_input+0x668>
 8016da6:	4b35      	ldr	r3, [pc, #212]	; (8016e7c <tcp_input+0x72c>)
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	2300      	movs	r3, #0
 8016dac:	69f9      	ldr	r1, [r7, #28]
 8016dae:	2000      	movs	r0, #0
 8016db0:	f7ff f890 	bl	8015ed4 <tcp_recv_null>
 8016db4:	4603      	mov	r3, r0
 8016db6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016db8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dbc:	f113 0f0d 	cmn.w	r3, #13
 8016dc0:	d053      	beq.n	8016e6a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016dc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d003      	beq.n	8016dd2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016dca:	4b2c      	ldr	r3, [pc, #176]	; (8016e7c <tcp_input+0x72c>)
 8016dcc:	681a      	ldr	r2, [r3, #0]
 8016dce:	69fb      	ldr	r3, [r7, #28]
 8016dd0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016dd2:	4b2b      	ldr	r3, [pc, #172]	; (8016e80 <tcp_input+0x730>)
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	f003 0320 	and.w	r3, r3, #32
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d030      	beq.n	8016e40 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016dde:	69fb      	ldr	r3, [r7, #28]
 8016de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d009      	beq.n	8016dfa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016dea:	7b5a      	ldrb	r2, [r3, #13]
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016df0:	f042 0220 	orr.w	r2, r2, #32
 8016df4:	b2d2      	uxtb	r2, r2
 8016df6:	735a      	strb	r2, [r3, #13]
 8016df8:	e022      	b.n	8016e40 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016dfa:	69fb      	ldr	r3, [r7, #28]
 8016dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dfe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e02:	d005      	beq.n	8016e10 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016e04:	69fb      	ldr	r3, [r7, #28]
 8016e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e08:	3301      	adds	r3, #1
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	69fb      	ldr	r3, [r7, #28]
 8016e0e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00b      	beq.n	8016e32 <tcp_input+0x6e2>
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	6918      	ldr	r0, [r3, #16]
 8016e24:	2300      	movs	r3, #0
 8016e26:	2200      	movs	r2, #0
 8016e28:	69f9      	ldr	r1, [r7, #28]
 8016e2a:	47a0      	blx	r4
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	74fb      	strb	r3, [r7, #19]
 8016e30:	e001      	b.n	8016e36 <tcp_input+0x6e6>
 8016e32:	2300      	movs	r3, #0
 8016e34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e3a:	f113 0f0d 	cmn.w	r3, #13
 8016e3e:	d016      	beq.n	8016e6e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016e40:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <tcp_input+0x740>)
 8016e42:	2200      	movs	r2, #0
 8016e44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016e46:	69f8      	ldr	r0, [r7, #28]
 8016e48:	f000 f88e 	bl	8016f68 <tcp_input_delayed_close>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d128      	bne.n	8016ea4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016e52:	69f8      	ldr	r0, [r7, #28]
 8016e54:	f002 ff20 	bl	8019c98 <tcp_output>
 8016e58:	e025      	b.n	8016ea6 <tcp_input+0x756>
        goto aborted;
 8016e5a:	bf00      	nop
 8016e5c:	e023      	b.n	8016ea6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016e5e:	bf00      	nop
 8016e60:	e021      	b.n	8016ea6 <tcp_input+0x756>
              goto aborted;
 8016e62:	bf00      	nop
 8016e64:	e01f      	b.n	8016ea6 <tcp_input+0x756>
          goto aborted;
 8016e66:	bf00      	nop
 8016e68:	e01d      	b.n	8016ea6 <tcp_input+0x756>
            goto aborted;
 8016e6a:	bf00      	nop
 8016e6c:	e01b      	b.n	8016ea6 <tcp_input+0x756>
              goto aborted;
 8016e6e:	bf00      	nop
 8016e70:	e019      	b.n	8016ea6 <tcp_input+0x756>
 8016e72:	bf00      	nop
 8016e74:	2400796c 	.word	0x2400796c
 8016e78:	2400797c 	.word	0x2400797c
 8016e7c:	2400799c 	.word	0x2400799c
 8016e80:	24007999 	.word	0x24007999
 8016e84:	24007994 	.word	0x24007994
 8016e88:	24007998 	.word	0x24007998
 8016e8c:	24007996 	.word	0x24007996
 8016e90:	240079a0 	.word	0x240079a0
 8016e94:	24007960 	.word	0x24007960
 8016e98:	08021f8c 	.word	0x08021f8c
 8016e9c:	08022160 	.word	0x08022160
 8016ea0:	08021ff8 	.word	0x08021ff8
          goto aborted;
 8016ea4:	bf00      	nop
    tcp_input_pcb = NULL;
 8016ea6:	4b27      	ldr	r3, [pc, #156]	; (8016f44 <tcp_input+0x7f4>)
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016eac:	4b26      	ldr	r3, [pc, #152]	; (8016f48 <tcp_input+0x7f8>)
 8016eae:	2200      	movs	r2, #0
 8016eb0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016eb2:	4b26      	ldr	r3, [pc, #152]	; (8016f4c <tcp_input+0x7fc>)
 8016eb4:	685b      	ldr	r3, [r3, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d03f      	beq.n	8016f3a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016eba:	4b24      	ldr	r3, [pc, #144]	; (8016f4c <tcp_input+0x7fc>)
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7fd f94e 	bl	8014160 <pbuf_free>
      inseg.p = NULL;
 8016ec4:	4b21      	ldr	r3, [pc, #132]	; (8016f4c <tcp_input+0x7fc>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016eca:	e036      	b.n	8016f3a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016ecc:	4b20      	ldr	r3, [pc, #128]	; (8016f50 <tcp_input+0x800>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	899b      	ldrh	r3, [r3, #12]
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7f7 f9f9 	bl	800e2cc <lwip_htons>
 8016eda:	4603      	mov	r3, r0
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	f003 0304 	and.w	r3, r3, #4
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d118      	bne.n	8016f18 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ee6:	4b1b      	ldr	r3, [pc, #108]	; (8016f54 <tcp_input+0x804>)
 8016ee8:	6819      	ldr	r1, [r3, #0]
 8016eea:	4b1b      	ldr	r3, [pc, #108]	; (8016f58 <tcp_input+0x808>)
 8016eec:	881b      	ldrh	r3, [r3, #0]
 8016eee:	461a      	mov	r2, r3
 8016ef0:	4b1a      	ldr	r3, [pc, #104]	; (8016f5c <tcp_input+0x80c>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ef6:	4b16      	ldr	r3, [pc, #88]	; (8016f50 <tcp_input+0x800>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016efa:	885b      	ldrh	r3, [r3, #2]
 8016efc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016efe:	4a14      	ldr	r2, [pc, #80]	; (8016f50 <tcp_input+0x800>)
 8016f00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f02:	8812      	ldrh	r2, [r2, #0]
 8016f04:	b292      	uxth	r2, r2
 8016f06:	9202      	str	r2, [sp, #8]
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	4b15      	ldr	r3, [pc, #84]	; (8016f60 <tcp_input+0x810>)
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	4b15      	ldr	r3, [pc, #84]	; (8016f64 <tcp_input+0x814>)
 8016f10:	4602      	mov	r2, r0
 8016f12:	2000      	movs	r0, #0
 8016f14:	f003 fc74 	bl	801a800 <tcp_rst>
    pbuf_free(p);
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f7fd f921 	bl	8014160 <pbuf_free>
  return;
 8016f1e:	e00c      	b.n	8016f3a <tcp_input+0x7ea>
    goto dropped;
 8016f20:	bf00      	nop
 8016f22:	e006      	b.n	8016f32 <tcp_input+0x7e2>
    goto dropped;
 8016f24:	bf00      	nop
 8016f26:	e004      	b.n	8016f32 <tcp_input+0x7e2>
    goto dropped;
 8016f28:	bf00      	nop
 8016f2a:	e002      	b.n	8016f32 <tcp_input+0x7e2>
      goto dropped;
 8016f2c:	bf00      	nop
 8016f2e:	e000      	b.n	8016f32 <tcp_input+0x7e2>
      goto dropped;
 8016f30:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f7fd f914 	bl	8014160 <pbuf_free>
 8016f38:	e000      	b.n	8016f3c <tcp_input+0x7ec>
  return;
 8016f3a:	bf00      	nop
}
 8016f3c:	3724      	adds	r7, #36	; 0x24
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd90      	pop	{r4, r7, pc}
 8016f42:	bf00      	nop
 8016f44:	240079a0 	.word	0x240079a0
 8016f48:	2400799c 	.word	0x2400799c
 8016f4c:	2400796c 	.word	0x2400796c
 8016f50:	2400797c 	.word	0x2400797c
 8016f54:	24007990 	.word	0x24007990
 8016f58:	24007996 	.word	0x24007996
 8016f5c:	2400798c 	.word	0x2400798c
 8016f60:	24004830 	.word	0x24004830
 8016f64:	24004834 	.word	0x24004834

08016f68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b082      	sub	sp, #8
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d106      	bne.n	8016f84 <tcp_input_delayed_close+0x1c>
 8016f76:	4b17      	ldr	r3, [pc, #92]	; (8016fd4 <tcp_input_delayed_close+0x6c>)
 8016f78:	f240 225a 	movw	r2, #602	; 0x25a
 8016f7c:	4916      	ldr	r1, [pc, #88]	; (8016fd8 <tcp_input_delayed_close+0x70>)
 8016f7e:	4817      	ldr	r0, [pc, #92]	; (8016fdc <tcp_input_delayed_close+0x74>)
 8016f80:	f005 faa0 	bl	801c4c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016f84:	4b16      	ldr	r3, [pc, #88]	; (8016fe0 <tcp_input_delayed_close+0x78>)
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	f003 0310 	and.w	r3, r3, #16
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d01c      	beq.n	8016fca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	8b5b      	ldrh	r3, [r3, #26]
 8016f94:	f003 0310 	and.w	r3, r3, #16
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d10d      	bne.n	8016fb8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d008      	beq.n	8016fb8 <tcp_input_delayed_close+0x50>
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fac:	687a      	ldr	r2, [r7, #4]
 8016fae:	6912      	ldr	r2, [r2, #16]
 8016fb0:	f06f 010e 	mvn.w	r1, #14
 8016fb4:	4610      	mov	r0, r2
 8016fb6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016fb8:	6879      	ldr	r1, [r7, #4]
 8016fba:	480a      	ldr	r0, [pc, #40]	; (8016fe4 <tcp_input_delayed_close+0x7c>)
 8016fbc:	f7ff fa50 	bl	8016460 <tcp_pcb_remove>
    tcp_free(pcb);
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7fd fd6b 	bl	8014a9c <tcp_free>
    return 1;
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	e000      	b.n	8016fcc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016fca:	2300      	movs	r3, #0
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3708      	adds	r7, #8
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	08021f8c 	.word	0x08021f8c
 8016fd8:	0802217c 	.word	0x0802217c
 8016fdc:	08021ff8 	.word	0x08021ff8
 8016fe0:	24007999 	.word	0x24007999
 8016fe4:	24007960 	.word	0x24007960

08016fe8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016fe8:	b590      	push	{r4, r7, lr}
 8016fea:	b08b      	sub	sp, #44	; 0x2c
 8016fec:	af04      	add	r7, sp, #16
 8016fee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016ff0:	4b6f      	ldr	r3, [pc, #444]	; (80171b0 <tcp_listen_input+0x1c8>)
 8016ff2:	781b      	ldrb	r3, [r3, #0]
 8016ff4:	f003 0304 	and.w	r3, r3, #4
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	f040 80d2 	bne.w	80171a2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d106      	bne.n	8017012 <tcp_listen_input+0x2a>
 8017004:	4b6b      	ldr	r3, [pc, #428]	; (80171b4 <tcp_listen_input+0x1cc>)
 8017006:	f240 2281 	movw	r2, #641	; 0x281
 801700a:	496b      	ldr	r1, [pc, #428]	; (80171b8 <tcp_listen_input+0x1d0>)
 801700c:	486b      	ldr	r0, [pc, #428]	; (80171bc <tcp_listen_input+0x1d4>)
 801700e:	f005 fa59 	bl	801c4c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017012:	4b67      	ldr	r3, [pc, #412]	; (80171b0 <tcp_listen_input+0x1c8>)
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	f003 0310 	and.w	r3, r3, #16
 801701a:	2b00      	cmp	r3, #0
 801701c:	d019      	beq.n	8017052 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801701e:	4b68      	ldr	r3, [pc, #416]	; (80171c0 <tcp_listen_input+0x1d8>)
 8017020:	6819      	ldr	r1, [r3, #0]
 8017022:	4b68      	ldr	r3, [pc, #416]	; (80171c4 <tcp_listen_input+0x1dc>)
 8017024:	881b      	ldrh	r3, [r3, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	4b67      	ldr	r3, [pc, #412]	; (80171c8 <tcp_listen_input+0x1e0>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801702e:	4b67      	ldr	r3, [pc, #412]	; (80171cc <tcp_listen_input+0x1e4>)
 8017030:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017032:	885b      	ldrh	r3, [r3, #2]
 8017034:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017036:	4a65      	ldr	r2, [pc, #404]	; (80171cc <tcp_listen_input+0x1e4>)
 8017038:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801703a:	8812      	ldrh	r2, [r2, #0]
 801703c:	b292      	uxth	r2, r2
 801703e:	9202      	str	r2, [sp, #8]
 8017040:	9301      	str	r3, [sp, #4]
 8017042:	4b63      	ldr	r3, [pc, #396]	; (80171d0 <tcp_listen_input+0x1e8>)
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	4b63      	ldr	r3, [pc, #396]	; (80171d4 <tcp_listen_input+0x1ec>)
 8017048:	4602      	mov	r2, r0
 801704a:	6878      	ldr	r0, [r7, #4]
 801704c:	f003 fbd8 	bl	801a800 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017050:	e0a9      	b.n	80171a6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017052:	4b57      	ldr	r3, [pc, #348]	; (80171b0 <tcp_listen_input+0x1c8>)
 8017054:	781b      	ldrb	r3, [r3, #0]
 8017056:	f003 0302 	and.w	r3, r3, #2
 801705a:	2b00      	cmp	r3, #0
 801705c:	f000 80a3 	beq.w	80171a6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	7d5b      	ldrb	r3, [r3, #21]
 8017064:	4618      	mov	r0, r3
 8017066:	f7ff f859 	bl	801611c <tcp_alloc>
 801706a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801706c:	697b      	ldr	r3, [r7, #20]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d111      	bne.n	8017096 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	699b      	ldr	r3, [r3, #24]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d00a      	beq.n	8017090 <tcp_listen_input+0xa8>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	699b      	ldr	r3, [r3, #24]
 801707e:	687a      	ldr	r2, [r7, #4]
 8017080:	6910      	ldr	r0, [r2, #16]
 8017082:	f04f 32ff 	mov.w	r2, #4294967295
 8017086:	2100      	movs	r1, #0
 8017088:	4798      	blx	r3
 801708a:	4603      	mov	r3, r0
 801708c:	73bb      	strb	r3, [r7, #14]
      return;
 801708e:	e08b      	b.n	80171a8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017090:	23f0      	movs	r3, #240	; 0xf0
 8017092:	73bb      	strb	r3, [r7, #14]
      return;
 8017094:	e088      	b.n	80171a8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017096:	4b50      	ldr	r3, [pc, #320]	; (80171d8 <tcp_listen_input+0x1f0>)
 8017098:	695a      	ldr	r2, [r3, #20]
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801709e:	4b4e      	ldr	r3, [pc, #312]	; (80171d8 <tcp_listen_input+0x1f0>)
 80170a0:	691a      	ldr	r2, [r3, #16]
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	8ada      	ldrh	r2, [r3, #22]
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80170ae:	4b47      	ldr	r3, [pc, #284]	; (80171cc <tcp_listen_input+0x1e4>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	881b      	ldrh	r3, [r3, #0]
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	2203      	movs	r2, #3
 80170be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80170c0:	4b41      	ldr	r3, [pc, #260]	; (80171c8 <tcp_listen_input+0x1e0>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	1c5a      	adds	r2, r3, #1
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80170d2:	6978      	ldr	r0, [r7, #20]
 80170d4:	f7ff fa58 	bl	8016588 <tcp_next_iss>
 80170d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	693a      	ldr	r2, [r7, #16]
 80170de:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	693a      	ldr	r2, [r7, #16]
 80170e4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	693a      	ldr	r2, [r7, #16]
 80170ea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	693a      	ldr	r2, [r7, #16]
 80170f0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80170f2:	4b35      	ldr	r3, [pc, #212]	; (80171c8 <tcp_listen_input+0x1e0>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	1e5a      	subs	r2, r3, #1
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	691a      	ldr	r2, [r3, #16]
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	7a5b      	ldrb	r3, [r3, #9]
 801710e:	f003 030c 	and.w	r3, r3, #12
 8017112:	b2da      	uxtb	r2, r3
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	7a1a      	ldrb	r2, [r3, #8]
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017120:	4b2e      	ldr	r3, [pc, #184]	; (80171dc <tcp_listen_input+0x1f4>)
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	60da      	str	r2, [r3, #12]
 8017128:	4a2c      	ldr	r2, [pc, #176]	; (80171dc <tcp_listen_input+0x1f4>)
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	6013      	str	r3, [r2, #0]
 801712e:	f003 fee1 	bl	801aef4 <tcp_timer_needed>
 8017132:	4b2b      	ldr	r3, [pc, #172]	; (80171e0 <tcp_listen_input+0x1f8>)
 8017134:	2201      	movs	r2, #1
 8017136:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017138:	6978      	ldr	r0, [r7, #20]
 801713a:	f001 fd8f 	bl	8018c5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801713e:	4b23      	ldr	r3, [pc, #140]	; (80171cc <tcp_listen_input+0x1e4>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	89db      	ldrh	r3, [r3, #14]
 8017144:	b29a      	uxth	r2, r3
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017158:	697b      	ldr	r3, [r7, #20]
 801715a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	3304      	adds	r3, #4
 8017160:	4618      	mov	r0, r3
 8017162:	f7fa fa6b 	bl	801163c <ip4_route>
 8017166:	4601      	mov	r1, r0
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	3304      	adds	r3, #4
 801716c:	461a      	mov	r2, r3
 801716e:	4620      	mov	r0, r4
 8017170:	f7ff fa30 	bl	80165d4 <tcp_eff_send_mss_netif>
 8017174:	4603      	mov	r3, r0
 8017176:	461a      	mov	r2, r3
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801717c:	2112      	movs	r1, #18
 801717e:	6978      	ldr	r0, [r7, #20]
 8017180:	f002 fc9c 	bl	8019abc <tcp_enqueue_flags>
 8017184:	4603      	mov	r3, r0
 8017186:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d004      	beq.n	801719a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017190:	2100      	movs	r1, #0
 8017192:	6978      	ldr	r0, [r7, #20]
 8017194:	f7fd ff08 	bl	8014fa8 <tcp_abandon>
      return;
 8017198:	e006      	b.n	80171a8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801719a:	6978      	ldr	r0, [r7, #20]
 801719c:	f002 fd7c 	bl	8019c98 <tcp_output>
  return;
 80171a0:	e001      	b.n	80171a6 <tcp_listen_input+0x1be>
    return;
 80171a2:	bf00      	nop
 80171a4:	e000      	b.n	80171a8 <tcp_listen_input+0x1c0>
  return;
 80171a6:	bf00      	nop
}
 80171a8:	371c      	adds	r7, #28
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd90      	pop	{r4, r7, pc}
 80171ae:	bf00      	nop
 80171b0:	24007998 	.word	0x24007998
 80171b4:	08021f8c 	.word	0x08021f8c
 80171b8:	080221a4 	.word	0x080221a4
 80171bc:	08021ff8 	.word	0x08021ff8
 80171c0:	24007990 	.word	0x24007990
 80171c4:	24007996 	.word	0x24007996
 80171c8:	2400798c 	.word	0x2400798c
 80171cc:	2400797c 	.word	0x2400797c
 80171d0:	24004830 	.word	0x24004830
 80171d4:	24004834 	.word	0x24004834
 80171d8:	24004820 	.word	0x24004820
 80171dc:	24007960 	.word	0x24007960
 80171e0:	24007968 	.word	0x24007968

080171e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b086      	sub	sp, #24
 80171e8:	af04      	add	r7, sp, #16
 80171ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80171ec:	4b2f      	ldr	r3, [pc, #188]	; (80172ac <tcp_timewait_input+0xc8>)
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	f003 0304 	and.w	r3, r3, #4
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d153      	bne.n	80172a0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d106      	bne.n	801720c <tcp_timewait_input+0x28>
 80171fe:	4b2c      	ldr	r3, [pc, #176]	; (80172b0 <tcp_timewait_input+0xcc>)
 8017200:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017204:	492b      	ldr	r1, [pc, #172]	; (80172b4 <tcp_timewait_input+0xd0>)
 8017206:	482c      	ldr	r0, [pc, #176]	; (80172b8 <tcp_timewait_input+0xd4>)
 8017208:	f005 f95c 	bl	801c4c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801720c:	4b27      	ldr	r3, [pc, #156]	; (80172ac <tcp_timewait_input+0xc8>)
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	f003 0302 	and.w	r3, r3, #2
 8017214:	2b00      	cmp	r3, #0
 8017216:	d02a      	beq.n	801726e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017218:	4b28      	ldr	r3, [pc, #160]	; (80172bc <tcp_timewait_input+0xd8>)
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017220:	1ad3      	subs	r3, r2, r3
 8017222:	2b00      	cmp	r3, #0
 8017224:	db2d      	blt.n	8017282 <tcp_timewait_input+0x9e>
 8017226:	4b25      	ldr	r3, [pc, #148]	; (80172bc <tcp_timewait_input+0xd8>)
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017232:	440b      	add	r3, r1
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	dc23      	bgt.n	8017282 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801723a:	4b21      	ldr	r3, [pc, #132]	; (80172c0 <tcp_timewait_input+0xdc>)
 801723c:	6819      	ldr	r1, [r3, #0]
 801723e:	4b21      	ldr	r3, [pc, #132]	; (80172c4 <tcp_timewait_input+0xe0>)
 8017240:	881b      	ldrh	r3, [r3, #0]
 8017242:	461a      	mov	r2, r3
 8017244:	4b1d      	ldr	r3, [pc, #116]	; (80172bc <tcp_timewait_input+0xd8>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801724a:	4b1f      	ldr	r3, [pc, #124]	; (80172c8 <tcp_timewait_input+0xe4>)
 801724c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801724e:	885b      	ldrh	r3, [r3, #2]
 8017250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017252:	4a1d      	ldr	r2, [pc, #116]	; (80172c8 <tcp_timewait_input+0xe4>)
 8017254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017256:	8812      	ldrh	r2, [r2, #0]
 8017258:	b292      	uxth	r2, r2
 801725a:	9202      	str	r2, [sp, #8]
 801725c:	9301      	str	r3, [sp, #4]
 801725e:	4b1b      	ldr	r3, [pc, #108]	; (80172cc <tcp_timewait_input+0xe8>)
 8017260:	9300      	str	r3, [sp, #0]
 8017262:	4b1b      	ldr	r3, [pc, #108]	; (80172d0 <tcp_timewait_input+0xec>)
 8017264:	4602      	mov	r2, r0
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f003 faca 	bl	801a800 <tcp_rst>
      return;
 801726c:	e01b      	b.n	80172a6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801726e:	4b0f      	ldr	r3, [pc, #60]	; (80172ac <tcp_timewait_input+0xc8>)
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	f003 0301 	and.w	r3, r3, #1
 8017276:	2b00      	cmp	r3, #0
 8017278:	d003      	beq.n	8017282 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801727a:	4b16      	ldr	r3, [pc, #88]	; (80172d4 <tcp_timewait_input+0xf0>)
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017282:	4b10      	ldr	r3, [pc, #64]	; (80172c4 <tcp_timewait_input+0xe0>)
 8017284:	881b      	ldrh	r3, [r3, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d00c      	beq.n	80172a4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	8b5b      	ldrh	r3, [r3, #26]
 801728e:	f043 0302 	orr.w	r3, r3, #2
 8017292:	b29a      	uxth	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f002 fcfd 	bl	8019c98 <tcp_output>
  }
  return;
 801729e:	e001      	b.n	80172a4 <tcp_timewait_input+0xc0>
    return;
 80172a0:	bf00      	nop
 80172a2:	e000      	b.n	80172a6 <tcp_timewait_input+0xc2>
  return;
 80172a4:	bf00      	nop
}
 80172a6:	3708      	adds	r7, #8
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	24007998 	.word	0x24007998
 80172b0:	08021f8c 	.word	0x08021f8c
 80172b4:	080221c4 	.word	0x080221c4
 80172b8:	08021ff8 	.word	0x08021ff8
 80172bc:	2400798c 	.word	0x2400798c
 80172c0:	24007990 	.word	0x24007990
 80172c4:	24007996 	.word	0x24007996
 80172c8:	2400797c 	.word	0x2400797c
 80172cc:	24004830 	.word	0x24004830
 80172d0:	24004834 	.word	0x24004834
 80172d4:	24007954 	.word	0x24007954

080172d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80172d8:	b590      	push	{r4, r7, lr}
 80172da:	b08d      	sub	sp, #52	; 0x34
 80172dc:	af04      	add	r7, sp, #16
 80172de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80172e4:	2300      	movs	r3, #0
 80172e6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <tcp_process+0x24>
 80172ee:	4b9d      	ldr	r3, [pc, #628]	; (8017564 <tcp_process+0x28c>)
 80172f0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80172f4:	499c      	ldr	r1, [pc, #624]	; (8017568 <tcp_process+0x290>)
 80172f6:	489d      	ldr	r0, [pc, #628]	; (801756c <tcp_process+0x294>)
 80172f8:	f005 f8e4 	bl	801c4c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80172fc:	4b9c      	ldr	r3, [pc, #624]	; (8017570 <tcp_process+0x298>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	f003 0304 	and.w	r3, r3, #4
 8017304:	2b00      	cmp	r3, #0
 8017306:	d04e      	beq.n	80173a6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	7d1b      	ldrb	r3, [r3, #20]
 801730c:	2b02      	cmp	r3, #2
 801730e:	d108      	bne.n	8017322 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017314:	4b97      	ldr	r3, [pc, #604]	; (8017574 <tcp_process+0x29c>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	429a      	cmp	r2, r3
 801731a:	d123      	bne.n	8017364 <tcp_process+0x8c>
        acceptable = 1;
 801731c:	2301      	movs	r3, #1
 801731e:	76fb      	strb	r3, [r7, #27]
 8017320:	e020      	b.n	8017364 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017326:	4b94      	ldr	r3, [pc, #592]	; (8017578 <tcp_process+0x2a0>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	429a      	cmp	r2, r3
 801732c:	d102      	bne.n	8017334 <tcp_process+0x5c>
        acceptable = 1;
 801732e:	2301      	movs	r3, #1
 8017330:	76fb      	strb	r3, [r7, #27]
 8017332:	e017      	b.n	8017364 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017334:	4b90      	ldr	r3, [pc, #576]	; (8017578 <tcp_process+0x2a0>)
 8017336:	681a      	ldr	r2, [r3, #0]
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801733c:	1ad3      	subs	r3, r2, r3
 801733e:	2b00      	cmp	r3, #0
 8017340:	db10      	blt.n	8017364 <tcp_process+0x8c>
 8017342:	4b8d      	ldr	r3, [pc, #564]	; (8017578 <tcp_process+0x2a0>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801734a:	6879      	ldr	r1, [r7, #4]
 801734c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801734e:	440b      	add	r3, r1
 8017350:	1ad3      	subs	r3, r2, r3
 8017352:	2b00      	cmp	r3, #0
 8017354:	dc06      	bgt.n	8017364 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	8b5b      	ldrh	r3, [r3, #26]
 801735a:	f043 0302 	orr.w	r3, r3, #2
 801735e:	b29a      	uxth	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017364:	7efb      	ldrb	r3, [r7, #27]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d01b      	beq.n	80173a2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	7d1b      	ldrb	r3, [r3, #20]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d106      	bne.n	8017380 <tcp_process+0xa8>
 8017372:	4b7c      	ldr	r3, [pc, #496]	; (8017564 <tcp_process+0x28c>)
 8017374:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017378:	4980      	ldr	r1, [pc, #512]	; (801757c <tcp_process+0x2a4>)
 801737a:	487c      	ldr	r0, [pc, #496]	; (801756c <tcp_process+0x294>)
 801737c:	f005 f8a2 	bl	801c4c4 <iprintf>
      recv_flags |= TF_RESET;
 8017380:	4b7f      	ldr	r3, [pc, #508]	; (8017580 <tcp_process+0x2a8>)
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	f043 0308 	orr.w	r3, r3, #8
 8017388:	b2da      	uxtb	r2, r3
 801738a:	4b7d      	ldr	r3, [pc, #500]	; (8017580 <tcp_process+0x2a8>)
 801738c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	8b5b      	ldrh	r3, [r3, #26]
 8017392:	f023 0301 	bic.w	r3, r3, #1
 8017396:	b29a      	uxth	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801739c:	f06f 030d 	mvn.w	r3, #13
 80173a0:	e37a      	b.n	8017a98 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80173a2:	2300      	movs	r3, #0
 80173a4:	e378      	b.n	8017a98 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80173a6:	4b72      	ldr	r3, [pc, #456]	; (8017570 <tcp_process+0x298>)
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	f003 0302 	and.w	r3, r3, #2
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d010      	beq.n	80173d4 <tcp_process+0xfc>
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	7d1b      	ldrb	r3, [r3, #20]
 80173b6:	2b02      	cmp	r3, #2
 80173b8:	d00c      	beq.n	80173d4 <tcp_process+0xfc>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	7d1b      	ldrb	r3, [r3, #20]
 80173be:	2b03      	cmp	r3, #3
 80173c0:	d008      	beq.n	80173d4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	8b5b      	ldrh	r3, [r3, #26]
 80173c6:	f043 0302 	orr.w	r3, r3, #2
 80173ca:	b29a      	uxth	r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80173d0:	2300      	movs	r3, #0
 80173d2:	e361      	b.n	8017a98 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	8b5b      	ldrh	r3, [r3, #26]
 80173d8:	f003 0310 	and.w	r3, r3, #16
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d103      	bne.n	80173e8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80173e0:	4b68      	ldr	r3, [pc, #416]	; (8017584 <tcp_process+0x2ac>)
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2200      	movs	r2, #0
 80173ec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2200      	movs	r2, #0
 80173f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f001 fc2f 	bl	8018c5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	7d1b      	ldrb	r3, [r3, #20]
 8017402:	3b02      	subs	r3, #2
 8017404:	2b07      	cmp	r3, #7
 8017406:	f200 8337 	bhi.w	8017a78 <tcp_process+0x7a0>
 801740a:	a201      	add	r2, pc, #4	; (adr r2, 8017410 <tcp_process+0x138>)
 801740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017410:	08017431 	.word	0x08017431
 8017414:	08017661 	.word	0x08017661
 8017418:	080177d9 	.word	0x080177d9
 801741c:	08017803 	.word	0x08017803
 8017420:	08017927 	.word	0x08017927
 8017424:	080177d9 	.word	0x080177d9
 8017428:	080179b3 	.word	0x080179b3
 801742c:	08017a43 	.word	0x08017a43
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017430:	4b4f      	ldr	r3, [pc, #316]	; (8017570 <tcp_process+0x298>)
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	f003 0310 	and.w	r3, r3, #16
 8017438:	2b00      	cmp	r3, #0
 801743a:	f000 80e4 	beq.w	8017606 <tcp_process+0x32e>
 801743e:	4b4c      	ldr	r3, [pc, #304]	; (8017570 <tcp_process+0x298>)
 8017440:	781b      	ldrb	r3, [r3, #0]
 8017442:	f003 0302 	and.w	r3, r3, #2
 8017446:	2b00      	cmp	r3, #0
 8017448:	f000 80dd 	beq.w	8017606 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017450:	1c5a      	adds	r2, r3, #1
 8017452:	4b48      	ldr	r3, [pc, #288]	; (8017574 <tcp_process+0x29c>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	429a      	cmp	r2, r3
 8017458:	f040 80d5 	bne.w	8017606 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801745c:	4b46      	ldr	r3, [pc, #280]	; (8017578 <tcp_process+0x2a0>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	1c5a      	adds	r2, r3, #1
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801746e:	4b41      	ldr	r3, [pc, #260]	; (8017574 <tcp_process+0x29c>)
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017476:	4b44      	ldr	r3, [pc, #272]	; (8017588 <tcp_process+0x2b0>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	89db      	ldrh	r3, [r3, #14]
 801747c:	b29a      	uxth	r2, r3
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017490:	4b39      	ldr	r3, [pc, #228]	; (8017578 <tcp_process+0x2a0>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	1e5a      	subs	r2, r3, #1
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2204      	movs	r2, #4
 801749e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	3304      	adds	r3, #4
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7fa f8c7 	bl	801163c <ip4_route>
 80174ae:	4601      	mov	r1, r0
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	3304      	adds	r3, #4
 80174b4:	461a      	mov	r2, r3
 80174b6:	4620      	mov	r0, r4
 80174b8:	f7ff f88c 	bl	80165d4 <tcp_eff_send_mss_netif>
 80174bc:	4603      	mov	r3, r0
 80174be:	461a      	mov	r2, r3
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174c8:	009a      	lsls	r2, r3, #2
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	f241 111c 	movw	r1, #4380	; 0x111c
 80174d4:	428b      	cmp	r3, r1
 80174d6:	bf38      	it	cc
 80174d8:	460b      	movcc	r3, r1
 80174da:	429a      	cmp	r2, r3
 80174dc:	d204      	bcs.n	80174e8 <tcp_process+0x210>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	e00d      	b.n	8017504 <tcp_process+0x22c>
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	f241 121c 	movw	r2, #4380	; 0x111c
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d904      	bls.n	8017500 <tcp_process+0x228>
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174fa:	005b      	lsls	r3, r3, #1
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	e001      	b.n	8017504 <tcp_process+0x22c>
 8017500:	f241 131c 	movw	r3, #4380	; 0x111c
 8017504:	687a      	ldr	r2, [r7, #4]
 8017506:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017510:	2b00      	cmp	r3, #0
 8017512:	d106      	bne.n	8017522 <tcp_process+0x24a>
 8017514:	4b13      	ldr	r3, [pc, #76]	; (8017564 <tcp_process+0x28c>)
 8017516:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801751a:	491c      	ldr	r1, [pc, #112]	; (801758c <tcp_process+0x2b4>)
 801751c:	4813      	ldr	r0, [pc, #76]	; (801756c <tcp_process+0x294>)
 801751e:	f004 ffd1 	bl	801c4c4 <iprintf>
        --pcb->snd_queuelen;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017528:	3b01      	subs	r3, #1
 801752a:	b29a      	uxth	r2, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017536:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d12a      	bne.n	8017594 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017542:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d106      	bne.n	8017558 <tcp_process+0x280>
 801754a:	4b06      	ldr	r3, [pc, #24]	; (8017564 <tcp_process+0x28c>)
 801754c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017550:	490f      	ldr	r1, [pc, #60]	; (8017590 <tcp_process+0x2b8>)
 8017552:	4806      	ldr	r0, [pc, #24]	; (801756c <tcp_process+0x294>)
 8017554:	f004 ffb6 	bl	801c4c4 <iprintf>
          pcb->unsent = rseg->next;
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	66da      	str	r2, [r3, #108]	; 0x6c
 8017560:	e01c      	b.n	801759c <tcp_process+0x2c4>
 8017562:	bf00      	nop
 8017564:	08021f8c 	.word	0x08021f8c
 8017568:	080221e4 	.word	0x080221e4
 801756c:	08021ff8 	.word	0x08021ff8
 8017570:	24007998 	.word	0x24007998
 8017574:	24007990 	.word	0x24007990
 8017578:	2400798c 	.word	0x2400798c
 801757c:	08022200 	.word	0x08022200
 8017580:	24007999 	.word	0x24007999
 8017584:	24007954 	.word	0x24007954
 8017588:	2400797c 	.word	0x2400797c
 801758c:	08022220 	.word	0x08022220
 8017590:	08022238 	.word	0x08022238
        } else {
          pcb->unacked = rseg->next;
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	681a      	ldr	r2, [r3, #0]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801759c:	69f8      	ldr	r0, [r7, #28]
 801759e:	f7fe fc54 	bl	8015e4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d104      	bne.n	80175b4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175b0:	861a      	strh	r2, [r3, #48]	; 0x30
 80175b2:	e006      	b.n	80175c2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2200      	movs	r2, #0
 80175be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d00a      	beq.n	80175e2 <tcp_process+0x30a>
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	6910      	ldr	r0, [r2, #16]
 80175d6:	2200      	movs	r2, #0
 80175d8:	6879      	ldr	r1, [r7, #4]
 80175da:	4798      	blx	r3
 80175dc:	4603      	mov	r3, r0
 80175de:	76bb      	strb	r3, [r7, #26]
 80175e0:	e001      	b.n	80175e6 <tcp_process+0x30e>
 80175e2:	2300      	movs	r3, #0
 80175e4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80175e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80175ea:	f113 0f0d 	cmn.w	r3, #13
 80175ee:	d102      	bne.n	80175f6 <tcp_process+0x31e>
          return ERR_ABRT;
 80175f0:	f06f 030c 	mvn.w	r3, #12
 80175f4:	e250      	b.n	8017a98 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	8b5b      	ldrh	r3, [r3, #26]
 80175fa:	f043 0302 	orr.w	r3, r3, #2
 80175fe:	b29a      	uxth	r2, r3
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017604:	e23a      	b.n	8017a7c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017606:	4b98      	ldr	r3, [pc, #608]	; (8017868 <tcp_process+0x590>)
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	f003 0310 	and.w	r3, r3, #16
 801760e:	2b00      	cmp	r3, #0
 8017610:	f000 8234 	beq.w	8017a7c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017614:	4b95      	ldr	r3, [pc, #596]	; (801786c <tcp_process+0x594>)
 8017616:	6819      	ldr	r1, [r3, #0]
 8017618:	4b95      	ldr	r3, [pc, #596]	; (8017870 <tcp_process+0x598>)
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	461a      	mov	r2, r3
 801761e:	4b95      	ldr	r3, [pc, #596]	; (8017874 <tcp_process+0x59c>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017624:	4b94      	ldr	r3, [pc, #592]	; (8017878 <tcp_process+0x5a0>)
 8017626:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017628:	885b      	ldrh	r3, [r3, #2]
 801762a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801762c:	4a92      	ldr	r2, [pc, #584]	; (8017878 <tcp_process+0x5a0>)
 801762e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017630:	8812      	ldrh	r2, [r2, #0]
 8017632:	b292      	uxth	r2, r2
 8017634:	9202      	str	r2, [sp, #8]
 8017636:	9301      	str	r3, [sp, #4]
 8017638:	4b90      	ldr	r3, [pc, #576]	; (801787c <tcp_process+0x5a4>)
 801763a:	9300      	str	r3, [sp, #0]
 801763c:	4b90      	ldr	r3, [pc, #576]	; (8017880 <tcp_process+0x5a8>)
 801763e:	4602      	mov	r2, r0
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f003 f8dd 	bl	801a800 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801764c:	2b05      	cmp	r3, #5
 801764e:	f200 8215 	bhi.w	8017a7c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	2200      	movs	r2, #0
 8017656:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f002 fea7 	bl	801a3ac <tcp_rexmit_rto>
      break;
 801765e:	e20d      	b.n	8017a7c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017660:	4b81      	ldr	r3, [pc, #516]	; (8017868 <tcp_process+0x590>)
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	f003 0310 	and.w	r3, r3, #16
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 80a1 	beq.w	80177b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801766e:	4b7f      	ldr	r3, [pc, #508]	; (801786c <tcp_process+0x594>)
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017676:	1ad3      	subs	r3, r2, r3
 8017678:	3b01      	subs	r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	db7e      	blt.n	801777c <tcp_process+0x4a4>
 801767e:	4b7b      	ldr	r3, [pc, #492]	; (801786c <tcp_process+0x594>)
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	2b00      	cmp	r3, #0
 801768a:	dc77      	bgt.n	801777c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2204      	movs	r2, #4
 8017690:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017696:	2b00      	cmp	r3, #0
 8017698:	d102      	bne.n	80176a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801769a:	23fa      	movs	r3, #250	; 0xfa
 801769c:	76bb      	strb	r3, [r7, #26]
 801769e:	e01d      	b.n	80176dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176a4:	699b      	ldr	r3, [r3, #24]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d106      	bne.n	80176b8 <tcp_process+0x3e0>
 80176aa:	4b76      	ldr	r3, [pc, #472]	; (8017884 <tcp_process+0x5ac>)
 80176ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80176b0:	4975      	ldr	r1, [pc, #468]	; (8017888 <tcp_process+0x5b0>)
 80176b2:	4876      	ldr	r0, [pc, #472]	; (801788c <tcp_process+0x5b4>)
 80176b4:	f004 ff06 	bl	801c4c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176bc:	699b      	ldr	r3, [r3, #24]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d00a      	beq.n	80176d8 <tcp_process+0x400>
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176c6:	699b      	ldr	r3, [r3, #24]
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	6910      	ldr	r0, [r2, #16]
 80176cc:	2200      	movs	r2, #0
 80176ce:	6879      	ldr	r1, [r7, #4]
 80176d0:	4798      	blx	r3
 80176d2:	4603      	mov	r3, r0
 80176d4:	76bb      	strb	r3, [r7, #26]
 80176d6:	e001      	b.n	80176dc <tcp_process+0x404>
 80176d8:	23f0      	movs	r3, #240	; 0xf0
 80176da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80176dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d00a      	beq.n	80176fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80176e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80176e8:	f113 0f0d 	cmn.w	r3, #13
 80176ec:	d002      	beq.n	80176f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f7fd fd18 	bl	8015124 <tcp_abort>
            }
            return ERR_ABRT;
 80176f4:	f06f 030c 	mvn.w	r3, #12
 80176f8:	e1ce      	b.n	8017a98 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f000 fae0 	bl	8017cc0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017700:	4b63      	ldr	r3, [pc, #396]	; (8017890 <tcp_process+0x5b8>)
 8017702:	881b      	ldrh	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d005      	beq.n	8017714 <tcp_process+0x43c>
            recv_acked--;
 8017708:	4b61      	ldr	r3, [pc, #388]	; (8017890 <tcp_process+0x5b8>)
 801770a:	881b      	ldrh	r3, [r3, #0]
 801770c:	3b01      	subs	r3, #1
 801770e:	b29a      	uxth	r2, r3
 8017710:	4b5f      	ldr	r3, [pc, #380]	; (8017890 <tcp_process+0x5b8>)
 8017712:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017718:	009a      	lsls	r2, r3, #2
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801771e:	005b      	lsls	r3, r3, #1
 8017720:	f241 111c 	movw	r1, #4380	; 0x111c
 8017724:	428b      	cmp	r3, r1
 8017726:	bf38      	it	cc
 8017728:	460b      	movcc	r3, r1
 801772a:	429a      	cmp	r2, r3
 801772c:	d204      	bcs.n	8017738 <tcp_process+0x460>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	b29b      	uxth	r3, r3
 8017736:	e00d      	b.n	8017754 <tcp_process+0x47c>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801773c:	005b      	lsls	r3, r3, #1
 801773e:	f241 121c 	movw	r2, #4380	; 0x111c
 8017742:	4293      	cmp	r3, r2
 8017744:	d904      	bls.n	8017750 <tcp_process+0x478>
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801774a:	005b      	lsls	r3, r3, #1
 801774c:	b29b      	uxth	r3, r3
 801774e:	e001      	b.n	8017754 <tcp_process+0x47c>
 8017750:	f241 131c 	movw	r3, #4380	; 0x111c
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801775a:	4b4e      	ldr	r3, [pc, #312]	; (8017894 <tcp_process+0x5bc>)
 801775c:	781b      	ldrb	r3, [r3, #0]
 801775e:	f003 0320 	and.w	r3, r3, #32
 8017762:	2b00      	cmp	r3, #0
 8017764:	d037      	beq.n	80177d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	8b5b      	ldrh	r3, [r3, #26]
 801776a:	f043 0302 	orr.w	r3, r3, #2
 801776e:	b29a      	uxth	r2, r3
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2207      	movs	r2, #7
 8017778:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801777a:	e02c      	b.n	80177d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801777c:	4b3b      	ldr	r3, [pc, #236]	; (801786c <tcp_process+0x594>)
 801777e:	6819      	ldr	r1, [r3, #0]
 8017780:	4b3b      	ldr	r3, [pc, #236]	; (8017870 <tcp_process+0x598>)
 8017782:	881b      	ldrh	r3, [r3, #0]
 8017784:	461a      	mov	r2, r3
 8017786:	4b3b      	ldr	r3, [pc, #236]	; (8017874 <tcp_process+0x59c>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801778c:	4b3a      	ldr	r3, [pc, #232]	; (8017878 <tcp_process+0x5a0>)
 801778e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017790:	885b      	ldrh	r3, [r3, #2]
 8017792:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017794:	4a38      	ldr	r2, [pc, #224]	; (8017878 <tcp_process+0x5a0>)
 8017796:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017798:	8812      	ldrh	r2, [r2, #0]
 801779a:	b292      	uxth	r2, r2
 801779c:	9202      	str	r2, [sp, #8]
 801779e:	9301      	str	r3, [sp, #4]
 80177a0:	4b36      	ldr	r3, [pc, #216]	; (801787c <tcp_process+0x5a4>)
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	4b36      	ldr	r3, [pc, #216]	; (8017880 <tcp_process+0x5a8>)
 80177a6:	4602      	mov	r2, r0
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f003 f829 	bl	801a800 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80177ae:	e167      	b.n	8017a80 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80177b0:	4b2d      	ldr	r3, [pc, #180]	; (8017868 <tcp_process+0x590>)
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	f003 0302 	and.w	r3, r3, #2
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	f000 8161 	beq.w	8017a80 <tcp_process+0x7a8>
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177c2:	1e5a      	subs	r2, r3, #1
 80177c4:	4b2b      	ldr	r3, [pc, #172]	; (8017874 <tcp_process+0x59c>)
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	429a      	cmp	r2, r3
 80177ca:	f040 8159 	bne.w	8017a80 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f002 fe0e 	bl	801a3f0 <tcp_rexmit>
      break;
 80177d4:	e154      	b.n	8017a80 <tcp_process+0x7a8>
 80177d6:	e153      	b.n	8017a80 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f000 fa71 	bl	8017cc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80177de:	4b2d      	ldr	r3, [pc, #180]	; (8017894 <tcp_process+0x5bc>)
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	f003 0320 	and.w	r3, r3, #32
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	f000 814c 	beq.w	8017a84 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	8b5b      	ldrh	r3, [r3, #26]
 80177f0:	f043 0302 	orr.w	r3, r3, #2
 80177f4:	b29a      	uxth	r2, r3
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2207      	movs	r2, #7
 80177fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017800:	e140      	b.n	8017a84 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f000 fa5c 	bl	8017cc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017808:	4b22      	ldr	r3, [pc, #136]	; (8017894 <tcp_process+0x5bc>)
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	f003 0320 	and.w	r3, r3, #32
 8017810:	2b00      	cmp	r3, #0
 8017812:	d071      	beq.n	80178f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017814:	4b14      	ldr	r3, [pc, #80]	; (8017868 <tcp_process+0x590>)
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	f003 0310 	and.w	r3, r3, #16
 801781c:	2b00      	cmp	r3, #0
 801781e:	d060      	beq.n	80178e2 <tcp_process+0x60a>
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017824:	4b11      	ldr	r3, [pc, #68]	; (801786c <tcp_process+0x594>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	429a      	cmp	r2, r3
 801782a:	d15a      	bne.n	80178e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017830:	2b00      	cmp	r3, #0
 8017832:	d156      	bne.n	80178e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	8b5b      	ldrh	r3, [r3, #26]
 8017838:	f043 0302 	orr.w	r3, r3, #2
 801783c:	b29a      	uxth	r2, r3
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f7fe fdbc 	bl	80163c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017848:	4b13      	ldr	r3, [pc, #76]	; (8017898 <tcp_process+0x5c0>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	429a      	cmp	r2, r3
 8017850:	d105      	bne.n	801785e <tcp_process+0x586>
 8017852:	4b11      	ldr	r3, [pc, #68]	; (8017898 <tcp_process+0x5c0>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	4a0f      	ldr	r2, [pc, #60]	; (8017898 <tcp_process+0x5c0>)
 801785a:	6013      	str	r3, [r2, #0]
 801785c:	e02e      	b.n	80178bc <tcp_process+0x5e4>
 801785e:	4b0e      	ldr	r3, [pc, #56]	; (8017898 <tcp_process+0x5c0>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	617b      	str	r3, [r7, #20]
 8017864:	e027      	b.n	80178b6 <tcp_process+0x5de>
 8017866:	bf00      	nop
 8017868:	24007998 	.word	0x24007998
 801786c:	24007990 	.word	0x24007990
 8017870:	24007996 	.word	0x24007996
 8017874:	2400798c 	.word	0x2400798c
 8017878:	2400797c 	.word	0x2400797c
 801787c:	24004830 	.word	0x24004830
 8017880:	24004834 	.word	0x24004834
 8017884:	08021f8c 	.word	0x08021f8c
 8017888:	0802224c 	.word	0x0802224c
 801788c:	08021ff8 	.word	0x08021ff8
 8017890:	24007994 	.word	0x24007994
 8017894:	24007999 	.word	0x24007999
 8017898:	24007960 	.word	0x24007960
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d104      	bne.n	80178b0 <tcp_process+0x5d8>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	68da      	ldr	r2, [r3, #12]
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	60da      	str	r2, [r3, #12]
 80178ae:	e005      	b.n	80178bc <tcp_process+0x5e4>
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	617b      	str	r3, [r7, #20]
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d1ef      	bne.n	801789c <tcp_process+0x5c4>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2200      	movs	r2, #0
 80178c0:	60da      	str	r2, [r3, #12]
 80178c2:	4b77      	ldr	r3, [pc, #476]	; (8017aa0 <tcp_process+0x7c8>)
 80178c4:	2201      	movs	r2, #1
 80178c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	220a      	movs	r2, #10
 80178cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80178ce:	4b75      	ldr	r3, [pc, #468]	; (8017aa4 <tcp_process+0x7cc>)
 80178d0:	681a      	ldr	r2, [r3, #0]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	60da      	str	r2, [r3, #12]
 80178d6:	4a73      	ldr	r2, [pc, #460]	; (8017aa4 <tcp_process+0x7cc>)
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6013      	str	r3, [r2, #0]
 80178dc:	f003 fb0a 	bl	801aef4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80178e0:	e0d2      	b.n	8017a88 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	8b5b      	ldrh	r3, [r3, #26]
 80178e6:	f043 0302 	orr.w	r3, r3, #2
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2208      	movs	r2, #8
 80178f4:	751a      	strb	r2, [r3, #20]
      break;
 80178f6:	e0c7      	b.n	8017a88 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80178f8:	4b6b      	ldr	r3, [pc, #428]	; (8017aa8 <tcp_process+0x7d0>)
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	f003 0310 	and.w	r3, r3, #16
 8017900:	2b00      	cmp	r3, #0
 8017902:	f000 80c1 	beq.w	8017a88 <tcp_process+0x7b0>
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801790a:	4b68      	ldr	r3, [pc, #416]	; (8017aac <tcp_process+0x7d4>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	429a      	cmp	r2, r3
 8017910:	f040 80ba 	bne.w	8017a88 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017918:	2b00      	cmp	r3, #0
 801791a:	f040 80b5 	bne.w	8017a88 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2206      	movs	r2, #6
 8017922:	751a      	strb	r2, [r3, #20]
      break;
 8017924:	e0b0      	b.n	8017a88 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f000 f9ca 	bl	8017cc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801792c:	4b60      	ldr	r3, [pc, #384]	; (8017ab0 <tcp_process+0x7d8>)
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	f003 0320 	and.w	r3, r3, #32
 8017934:	2b00      	cmp	r3, #0
 8017936:	f000 80a9 	beq.w	8017a8c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	8b5b      	ldrh	r3, [r3, #26]
 801793e:	f043 0302 	orr.w	r3, r3, #2
 8017942:	b29a      	uxth	r2, r3
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7fe fd39 	bl	80163c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801794e:	4b59      	ldr	r3, [pc, #356]	; (8017ab4 <tcp_process+0x7dc>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	429a      	cmp	r2, r3
 8017956:	d105      	bne.n	8017964 <tcp_process+0x68c>
 8017958:	4b56      	ldr	r3, [pc, #344]	; (8017ab4 <tcp_process+0x7dc>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	68db      	ldr	r3, [r3, #12]
 801795e:	4a55      	ldr	r2, [pc, #340]	; (8017ab4 <tcp_process+0x7dc>)
 8017960:	6013      	str	r3, [r2, #0]
 8017962:	e013      	b.n	801798c <tcp_process+0x6b4>
 8017964:	4b53      	ldr	r3, [pc, #332]	; (8017ab4 <tcp_process+0x7dc>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	613b      	str	r3, [r7, #16]
 801796a:	e00c      	b.n	8017986 <tcp_process+0x6ae>
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	68db      	ldr	r3, [r3, #12]
 8017970:	687a      	ldr	r2, [r7, #4]
 8017972:	429a      	cmp	r2, r3
 8017974:	d104      	bne.n	8017980 <tcp_process+0x6a8>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	68da      	ldr	r2, [r3, #12]
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	60da      	str	r2, [r3, #12]
 801797e:	e005      	b.n	801798c <tcp_process+0x6b4>
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	68db      	ldr	r3, [r3, #12]
 8017984:	613b      	str	r3, [r7, #16]
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d1ef      	bne.n	801796c <tcp_process+0x694>
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2200      	movs	r2, #0
 8017990:	60da      	str	r2, [r3, #12]
 8017992:	4b43      	ldr	r3, [pc, #268]	; (8017aa0 <tcp_process+0x7c8>)
 8017994:	2201      	movs	r2, #1
 8017996:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	220a      	movs	r2, #10
 801799c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801799e:	4b41      	ldr	r3, [pc, #260]	; (8017aa4 <tcp_process+0x7cc>)
 80179a0:	681a      	ldr	r2, [r3, #0]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	60da      	str	r2, [r3, #12]
 80179a6:	4a3f      	ldr	r2, [pc, #252]	; (8017aa4 <tcp_process+0x7cc>)
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6013      	str	r3, [r2, #0]
 80179ac:	f003 faa2 	bl	801aef4 <tcp_timer_needed>
      }
      break;
 80179b0:	e06c      	b.n	8017a8c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f000 f984 	bl	8017cc0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80179b8:	4b3b      	ldr	r3, [pc, #236]	; (8017aa8 <tcp_process+0x7d0>)
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	f003 0310 	and.w	r3, r3, #16
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d065      	beq.n	8017a90 <tcp_process+0x7b8>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179c8:	4b38      	ldr	r3, [pc, #224]	; (8017aac <tcp_process+0x7d4>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d15f      	bne.n	8017a90 <tcp_process+0x7b8>
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d15b      	bne.n	8017a90 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7fe fcf1 	bl	80163c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80179de:	4b35      	ldr	r3, [pc, #212]	; (8017ab4 <tcp_process+0x7dc>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d105      	bne.n	80179f4 <tcp_process+0x71c>
 80179e8:	4b32      	ldr	r3, [pc, #200]	; (8017ab4 <tcp_process+0x7dc>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	68db      	ldr	r3, [r3, #12]
 80179ee:	4a31      	ldr	r2, [pc, #196]	; (8017ab4 <tcp_process+0x7dc>)
 80179f0:	6013      	str	r3, [r2, #0]
 80179f2:	e013      	b.n	8017a1c <tcp_process+0x744>
 80179f4:	4b2f      	ldr	r3, [pc, #188]	; (8017ab4 <tcp_process+0x7dc>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	60fb      	str	r3, [r7, #12]
 80179fa:	e00c      	b.n	8017a16 <tcp_process+0x73e>
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d104      	bne.n	8017a10 <tcp_process+0x738>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	68da      	ldr	r2, [r3, #12]
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	60da      	str	r2, [r3, #12]
 8017a0e:	e005      	b.n	8017a1c <tcp_process+0x744>
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	60fb      	str	r3, [r7, #12]
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d1ef      	bne.n	80179fc <tcp_process+0x724>
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	60da      	str	r2, [r3, #12]
 8017a22:	4b1f      	ldr	r3, [pc, #124]	; (8017aa0 <tcp_process+0x7c8>)
 8017a24:	2201      	movs	r2, #1
 8017a26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	220a      	movs	r2, #10
 8017a2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017a2e:	4b1d      	ldr	r3, [pc, #116]	; (8017aa4 <tcp_process+0x7cc>)
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	60da      	str	r2, [r3, #12]
 8017a36:	4a1b      	ldr	r2, [pc, #108]	; (8017aa4 <tcp_process+0x7cc>)
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6013      	str	r3, [r2, #0]
 8017a3c:	f003 fa5a 	bl	801aef4 <tcp_timer_needed>
      }
      break;
 8017a40:	e026      	b.n	8017a90 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f000 f93c 	bl	8017cc0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017a48:	4b17      	ldr	r3, [pc, #92]	; (8017aa8 <tcp_process+0x7d0>)
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	f003 0310 	and.w	r3, r3, #16
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d01f      	beq.n	8017a94 <tcp_process+0x7bc>
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a58:	4b14      	ldr	r3, [pc, #80]	; (8017aac <tcp_process+0x7d4>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d119      	bne.n	8017a94 <tcp_process+0x7bc>
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d115      	bne.n	8017a94 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017a68:	4b11      	ldr	r3, [pc, #68]	; (8017ab0 <tcp_process+0x7d8>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	f043 0310 	orr.w	r3, r3, #16
 8017a70:	b2da      	uxtb	r2, r3
 8017a72:	4b0f      	ldr	r3, [pc, #60]	; (8017ab0 <tcp_process+0x7d8>)
 8017a74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017a76:	e00d      	b.n	8017a94 <tcp_process+0x7bc>
    default:
      break;
 8017a78:	bf00      	nop
 8017a7a:	e00c      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a7c:	bf00      	nop
 8017a7e:	e00a      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a80:	bf00      	nop
 8017a82:	e008      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a84:	bf00      	nop
 8017a86:	e006      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a88:	bf00      	nop
 8017a8a:	e004      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a8c:	bf00      	nop
 8017a8e:	e002      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a90:	bf00      	nop
 8017a92:	e000      	b.n	8017a96 <tcp_process+0x7be>
      break;
 8017a94:	bf00      	nop
  }
  return ERR_OK;
 8017a96:	2300      	movs	r3, #0
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3724      	adds	r7, #36	; 0x24
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd90      	pop	{r4, r7, pc}
 8017aa0:	24007968 	.word	0x24007968
 8017aa4:	24007964 	.word	0x24007964
 8017aa8:	24007998 	.word	0x24007998
 8017aac:	24007990 	.word	0x24007990
 8017ab0:	24007999 	.word	0x24007999
 8017ab4:	24007960 	.word	0x24007960

08017ab8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017ab8:	b590      	push	{r4, r7, lr}
 8017aba:	b085      	sub	sp, #20
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d106      	bne.n	8017ad6 <tcp_oos_insert_segment+0x1e>
 8017ac8:	4b3b      	ldr	r3, [pc, #236]	; (8017bb8 <tcp_oos_insert_segment+0x100>)
 8017aca:	f240 421f 	movw	r2, #1055	; 0x41f
 8017ace:	493b      	ldr	r1, [pc, #236]	; (8017bbc <tcp_oos_insert_segment+0x104>)
 8017ad0:	483b      	ldr	r0, [pc, #236]	; (8017bc0 <tcp_oos_insert_segment+0x108>)
 8017ad2:	f004 fcf7 	bl	801c4c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	899b      	ldrh	r3, [r3, #12]
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7f6 fbf4 	bl	800e2cc <lwip_htons>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	f003 0301 	and.w	r3, r3, #1
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d028      	beq.n	8017b42 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017af0:	6838      	ldr	r0, [r7, #0]
 8017af2:	f7fe f995 	bl	8015e20 <tcp_segs_free>
    next = NULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	603b      	str	r3, [r7, #0]
 8017afa:	e056      	b.n	8017baa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	68db      	ldr	r3, [r3, #12]
 8017b00:	899b      	ldrh	r3, [r3, #12]
 8017b02:	b29b      	uxth	r3, r3
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7f6 fbe1 	bl	800e2cc <lwip_htons>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	b2db      	uxtb	r3, r3
 8017b0e:	f003 0301 	and.w	r3, r3, #1
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d00d      	beq.n	8017b32 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	68db      	ldr	r3, [r3, #12]
 8017b1a:	899b      	ldrh	r3, [r3, #12]
 8017b1c:	b29c      	uxth	r4, r3
 8017b1e:	2001      	movs	r0, #1
 8017b20:	f7f6 fbd4 	bl	800e2cc <lwip_htons>
 8017b24:	4603      	mov	r3, r0
 8017b26:	461a      	mov	r2, r3
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	68db      	ldr	r3, [r3, #12]
 8017b2c:	4322      	orrs	r2, r4
 8017b2e:	b292      	uxth	r2, r2
 8017b30:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017b3c:	68f8      	ldr	r0, [r7, #12]
 8017b3e:	f7fe f984 	bl	8015e4a <tcp_seg_free>
    while (next &&
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d00e      	beq.n	8017b66 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	891b      	ldrh	r3, [r3, #8]
 8017b4c:	461a      	mov	r2, r3
 8017b4e:	4b1d      	ldr	r3, [pc, #116]	; (8017bc4 <tcp_oos_insert_segment+0x10c>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	441a      	add	r2, r3
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	68db      	ldr	r3, [r3, #12]
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	8909      	ldrh	r1, [r1, #8]
 8017b5e:	440b      	add	r3, r1
 8017b60:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	daca      	bge.n	8017afc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017b66:	683b      	ldr	r3, [r7, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d01e      	beq.n	8017baa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	891b      	ldrh	r3, [r3, #8]
 8017b70:	461a      	mov	r2, r3
 8017b72:	4b14      	ldr	r3, [pc, #80]	; (8017bc4 <tcp_oos_insert_segment+0x10c>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	441a      	add	r2, r3
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	dd12      	ble.n	8017baa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	68db      	ldr	r3, [r3, #12]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	4b0d      	ldr	r3, [pc, #52]	; (8017bc4 <tcp_oos_insert_segment+0x10c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	b29b      	uxth	r3, r3
 8017b92:	1ad3      	subs	r3, r2, r3
 8017b94:	b29a      	uxth	r2, r3
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	685a      	ldr	r2, [r3, #4]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	891b      	ldrh	r3, [r3, #8]
 8017ba2:	4619      	mov	r1, r3
 8017ba4:	4610      	mov	r0, r2
 8017ba6:	f7fc f955 	bl	8013e54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	683a      	ldr	r2, [r7, #0]
 8017bae:	601a      	str	r2, [r3, #0]
}
 8017bb0:	bf00      	nop
 8017bb2:	3714      	adds	r7, #20
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd90      	pop	{r4, r7, pc}
 8017bb8:	08021f8c 	.word	0x08021f8c
 8017bbc:	0802226c 	.word	0x0802226c
 8017bc0:	08021ff8 	.word	0x08021ff8
 8017bc4:	2400798c 	.word	0x2400798c

08017bc8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017bc8:	b5b0      	push	{r4, r5, r7, lr}
 8017bca:	b086      	sub	sp, #24
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	60f8      	str	r0, [r7, #12]
 8017bd0:	60b9      	str	r1, [r7, #8]
 8017bd2:	607a      	str	r2, [r7, #4]
 8017bd4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017bd6:	e03e      	b.n	8017c56 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017be2:	697b      	ldr	r3, [r7, #20]
 8017be4:	685b      	ldr	r3, [r3, #4]
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7fc fb48 	bl	801427c <pbuf_clen>
 8017bec:	4603      	mov	r3, r0
 8017bee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bf6:	8a7a      	ldrh	r2, [r7, #18]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d906      	bls.n	8017c0a <tcp_free_acked_segments+0x42>
 8017bfc:	4b2a      	ldr	r3, [pc, #168]	; (8017ca8 <tcp_free_acked_segments+0xe0>)
 8017bfe:	f240 4257 	movw	r2, #1111	; 0x457
 8017c02:	492a      	ldr	r1, [pc, #168]	; (8017cac <tcp_free_acked_segments+0xe4>)
 8017c04:	482a      	ldr	r0, [pc, #168]	; (8017cb0 <tcp_free_acked_segments+0xe8>)
 8017c06:	f004 fc5d 	bl	801c4c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017c10:	8a7b      	ldrh	r3, [r7, #18]
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	b29a      	uxth	r2, r3
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	891a      	ldrh	r2, [r3, #8]
 8017c20:	4b24      	ldr	r3, [pc, #144]	; (8017cb4 <tcp_free_acked_segments+0xec>)
 8017c22:	881b      	ldrh	r3, [r3, #0]
 8017c24:	4413      	add	r3, r2
 8017c26:	b29a      	uxth	r2, r3
 8017c28:	4b22      	ldr	r3, [pc, #136]	; (8017cb4 <tcp_free_acked_segments+0xec>)
 8017c2a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017c2c:	6978      	ldr	r0, [r7, #20]
 8017c2e:	f7fe f90c 	bl	8015e4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d00c      	beq.n	8017c56 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d109      	bne.n	8017c56 <tcp_free_acked_segments+0x8e>
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d106      	bne.n	8017c56 <tcp_free_acked_segments+0x8e>
 8017c48:	4b17      	ldr	r3, [pc, #92]	; (8017ca8 <tcp_free_acked_segments+0xe0>)
 8017c4a:	f240 4261 	movw	r2, #1121	; 0x461
 8017c4e:	491a      	ldr	r1, [pc, #104]	; (8017cb8 <tcp_free_acked_segments+0xf0>)
 8017c50:	4817      	ldr	r0, [pc, #92]	; (8017cb0 <tcp_free_acked_segments+0xe8>)
 8017c52:	f004 fc37 	bl	801c4c4 <iprintf>
  while (seg_list != NULL &&
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d020      	beq.n	8017c9e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	68db      	ldr	r3, [r3, #12]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7f6 fb47 	bl	800e2f6 <lwip_htonl>
 8017c68:	4604      	mov	r4, r0
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	891b      	ldrh	r3, [r3, #8]
 8017c6e:	461d      	mov	r5, r3
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	68db      	ldr	r3, [r3, #12]
 8017c74:	899b      	ldrh	r3, [r3, #12]
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f7f6 fb27 	bl	800e2cc <lwip_htons>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	f003 0303 	and.w	r3, r3, #3
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d001      	beq.n	8017c8e <tcp_free_acked_segments+0xc6>
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	e000      	b.n	8017c90 <tcp_free_acked_segments+0xc8>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	442b      	add	r3, r5
 8017c92:	18e2      	adds	r2, r4, r3
 8017c94:	4b09      	ldr	r3, [pc, #36]	; (8017cbc <tcp_free_acked_segments+0xf4>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	dd9c      	ble.n	8017bd8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017c9e:	68bb      	ldr	r3, [r7, #8]
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3718      	adds	r7, #24
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8017ca8:	08021f8c 	.word	0x08021f8c
 8017cac:	08022294 	.word	0x08022294
 8017cb0:	08021ff8 	.word	0x08021ff8
 8017cb4:	24007994 	.word	0x24007994
 8017cb8:	080222bc 	.word	0x080222bc
 8017cbc:	24007990 	.word	0x24007990

08017cc0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017cc0:	b5b0      	push	{r4, r5, r7, lr}
 8017cc2:	b094      	sub	sp, #80	; 0x50
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d106      	bne.n	8017ce0 <tcp_receive+0x20>
 8017cd2:	4b91      	ldr	r3, [pc, #580]	; (8017f18 <tcp_receive+0x258>)
 8017cd4:	f240 427b 	movw	r2, #1147	; 0x47b
 8017cd8:	4990      	ldr	r1, [pc, #576]	; (8017f1c <tcp_receive+0x25c>)
 8017cda:	4891      	ldr	r0, [pc, #580]	; (8017f20 <tcp_receive+0x260>)
 8017cdc:	f004 fbf2 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	7d1b      	ldrb	r3, [r3, #20]
 8017ce4:	2b03      	cmp	r3, #3
 8017ce6:	d806      	bhi.n	8017cf6 <tcp_receive+0x36>
 8017ce8:	4b8b      	ldr	r3, [pc, #556]	; (8017f18 <tcp_receive+0x258>)
 8017cea:	f240 427c 	movw	r2, #1148	; 0x47c
 8017cee:	498d      	ldr	r1, [pc, #564]	; (8017f24 <tcp_receive+0x264>)
 8017cf0:	488b      	ldr	r0, [pc, #556]	; (8017f20 <tcp_receive+0x260>)
 8017cf2:	f004 fbe7 	bl	801c4c4 <iprintf>

  if (flags & TCP_ACK) {
 8017cf6:	4b8c      	ldr	r3, [pc, #560]	; (8017f28 <tcp_receive+0x268>)
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	f003 0310 	and.w	r3, r3, #16
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	f000 8264 	beq.w	80181cc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d10:	4413      	add	r3, r2
 8017d12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d18:	4b84      	ldr	r3, [pc, #528]	; (8017f2c <tcp_receive+0x26c>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	1ad3      	subs	r3, r2, r3
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	db1b      	blt.n	8017d5a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d26:	4b81      	ldr	r3, [pc, #516]	; (8017f2c <tcp_receive+0x26c>)
 8017d28:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d106      	bne.n	8017d3c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d32:	4b7f      	ldr	r3, [pc, #508]	; (8017f30 <tcp_receive+0x270>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	1ad3      	subs	r3, r2, r3
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	db0e      	blt.n	8017d5a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d40:	4b7b      	ldr	r3, [pc, #492]	; (8017f30 <tcp_receive+0x270>)
 8017d42:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d125      	bne.n	8017d94 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017d48:	4b7a      	ldr	r3, [pc, #488]	; (8017f34 <tcp_receive+0x274>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	89db      	ldrh	r3, [r3, #14]
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d91c      	bls.n	8017d94 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017d5a:	4b76      	ldr	r3, [pc, #472]	; (8017f34 <tcp_receive+0x274>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	89db      	ldrh	r3, [r3, #14]
 8017d60:	b29a      	uxth	r2, r3
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d205      	bcs.n	8017d84 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017d84:	4b69      	ldr	r3, [pc, #420]	; (8017f2c <tcp_receive+0x26c>)
 8017d86:	681a      	ldr	r2, [r3, #0]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017d8c:	4b68      	ldr	r3, [pc, #416]	; (8017f30 <tcp_receive+0x270>)
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017d94:	4b66      	ldr	r3, [pc, #408]	; (8017f30 <tcp_receive+0x270>)
 8017d96:	681a      	ldr	r2, [r3, #0]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d9c:	1ad3      	subs	r3, r2, r3
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	dc58      	bgt.n	8017e54 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017da2:	4b65      	ldr	r3, [pc, #404]	; (8017f38 <tcp_receive+0x278>)
 8017da4:	881b      	ldrh	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d14b      	bne.n	8017e42 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dae:	687a      	ldr	r2, [r7, #4]
 8017db0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017db4:	4413      	add	r3, r2
 8017db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d142      	bne.n	8017e42 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	db3d      	blt.n	8017e42 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017dca:	4b59      	ldr	r3, [pc, #356]	; (8017f30 <tcp_receive+0x270>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d137      	bne.n	8017e42 <tcp_receive+0x182>
              found_dupack = 1;
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017ddc:	2bff      	cmp	r3, #255	; 0xff
 8017dde:	d007      	beq.n	8017df0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017de6:	3301      	adds	r3, #1
 8017de8:	b2da      	uxtb	r2, r3
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017df6:	2b03      	cmp	r3, #3
 8017df8:	d91b      	bls.n	8017e32 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e04:	4413      	add	r3, r2
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d30a      	bcc.n	8017e28 <tcp_receive+0x168>
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e1c:	4413      	add	r3, r2
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e26:	e004      	b.n	8017e32 <tcp_receive+0x172>
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	d902      	bls.n	8017e42 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	f002 fb43 	bl	801a4c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f040 8161 	bne.w	801810c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017e52:	e15b      	b.n	801810c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017e54:	4b36      	ldr	r3, [pc, #216]	; (8017f30 <tcp_receive+0x270>)
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e5c:	1ad3      	subs	r3, r2, r3
 8017e5e:	3b01      	subs	r3, #1
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f2c0 814e 	blt.w	8018102 <tcp_receive+0x442>
 8017e66:	4b32      	ldr	r3, [pc, #200]	; (8017f30 <tcp_receive+0x270>)
 8017e68:	681a      	ldr	r2, [r3, #0]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e6e:	1ad3      	subs	r3, r2, r3
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	f300 8146 	bgt.w	8018102 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	8b5b      	ldrh	r3, [r3, #26]
 8017e7a:	f003 0304 	and.w	r3, r3, #4
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d010      	beq.n	8017ea4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	8b5b      	ldrh	r3, [r3, #26]
 8017e86:	f023 0304 	bic.w	r3, r3, #4
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017eb2:	10db      	asrs	r3, r3, #3
 8017eb4:	b21b      	sxth	r3, r3
 8017eb6:	b29a      	uxth	r2, r3
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	4413      	add	r3, r2
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	b21a      	sxth	r2, r3
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017ecc:	4b18      	ldr	r3, [pc, #96]	; (8017f30 <tcp_receive+0x270>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	b29a      	uxth	r2, r3
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ed6:	b29b      	uxth	r3, r3
 8017ed8:	1ad3      	subs	r3, r2, r3
 8017eda:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017ee4:	4b12      	ldr	r3, [pc, #72]	; (8017f30 <tcp_receive+0x270>)
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	7d1b      	ldrb	r3, [r3, #20]
 8017ef0:	2b03      	cmp	r3, #3
 8017ef2:	f240 8097 	bls.w	8018024 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d245      	bcs.n	8017f92 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	8b5b      	ldrh	r3, [r3, #26]
 8017f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d014      	beq.n	8017f3c <tcp_receive+0x27c>
 8017f12:	2301      	movs	r3, #1
 8017f14:	e013      	b.n	8017f3e <tcp_receive+0x27e>
 8017f16:	bf00      	nop
 8017f18:	08021f8c 	.word	0x08021f8c
 8017f1c:	080222dc 	.word	0x080222dc
 8017f20:	08021ff8 	.word	0x08021ff8
 8017f24:	080222f8 	.word	0x080222f8
 8017f28:	24007998 	.word	0x24007998
 8017f2c:	2400798c 	.word	0x2400798c
 8017f30:	24007990 	.word	0x24007990
 8017f34:	2400797c 	.word	0x2400797c
 8017f38:	24007996 	.word	0x24007996
 8017f3c:	2302      	movs	r3, #2
 8017f3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017f42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f4c:	fb12 f303 	smulbb	r3, r2, r3
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017f54:	4293      	cmp	r3, r2
 8017f56:	bf28      	it	cs
 8017f58:	4613      	movcs	r3, r2
 8017f5a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f64:	4413      	add	r3, r2
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d309      	bcc.n	8017f86 <tcp_receive+0x2c6>
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f7a:	4413      	add	r3, r2
 8017f7c:	b29a      	uxth	r2, r3
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f84:	e04e      	b.n	8018024 <tcp_receive+0x364>
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f90:	e048      	b.n	8018024 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017f98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017f9a:	4413      	add	r3, r2
 8017f9c:	b29a      	uxth	r2, r3
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d309      	bcc.n	8017fbc <tcp_receive+0x2fc>
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017fb0:	4413      	add	r3, r2
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017fba:	e004      	b.n	8017fc6 <tcp_receive+0x306>
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d326      	bcc.n	8018024 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fe2:	1ad3      	subs	r3, r2, r3
 8017fe4:	b29a      	uxth	r2, r3
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ff6:	4413      	add	r3, r2
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018000:	429a      	cmp	r2, r3
 8018002:	d30a      	bcc.n	801801a <tcp_receive+0x35a>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801800e:	4413      	add	r3, r2
 8018010:	b29a      	uxth	r2, r3
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018018:	e004      	b.n	8018024 <tcp_receive+0x364>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018020:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801802c:	4a98      	ldr	r2, [pc, #608]	; (8018290 <tcp_receive+0x5d0>)
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f7ff fdca 	bl	8017bc8 <tcp_free_acked_segments>
 8018034:	4602      	mov	r2, r0
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018042:	4a94      	ldr	r2, [pc, #592]	; (8018294 <tcp_receive+0x5d4>)
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f7ff fdbf 	bl	8017bc8 <tcp_free_acked_segments>
 801804a:	4602      	mov	r2, r0
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018054:	2b00      	cmp	r3, #0
 8018056:	d104      	bne.n	8018062 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801805e:	861a      	strh	r2, [r3, #48]	; 0x30
 8018060:	e002      	b.n	8018068 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2200      	movs	r2, #0
 8018066:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2200      	movs	r2, #0
 801806c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018072:	2b00      	cmp	r3, #0
 8018074:	d103      	bne.n	801807e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	2200      	movs	r2, #0
 801807a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018084:	4b84      	ldr	r3, [pc, #528]	; (8018298 <tcp_receive+0x5d8>)
 8018086:	881b      	ldrh	r3, [r3, #0]
 8018088:	4413      	add	r3, r2
 801808a:	b29a      	uxth	r2, r3
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	8b5b      	ldrh	r3, [r3, #26]
 8018096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801809a:	2b00      	cmp	r3, #0
 801809c:	d035      	beq.n	801810a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d118      	bne.n	80180d8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d00c      	beq.n	80180c8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180b6:	68db      	ldr	r3, [r3, #12]
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	4618      	mov	r0, r3
 80180bc:	f7f6 f91b 	bl	800e2f6 <lwip_htonl>
 80180c0:	4603      	mov	r3, r0
 80180c2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	dc20      	bgt.n	801810a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	8b5b      	ldrh	r3, [r3, #26]
 80180cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80180d0:	b29a      	uxth	r2, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80180d6:	e018      	b.n	801810a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180e0:	68db      	ldr	r3, [r3, #12]
 80180e2:	685b      	ldr	r3, [r3, #4]
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7f6 f906 	bl	800e2f6 <lwip_htonl>
 80180ea:	4603      	mov	r3, r0
 80180ec:	1ae3      	subs	r3, r4, r3
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	dc0b      	bgt.n	801810a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	8b5b      	ldrh	r3, [r3, #26]
 80180f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80180fa:	b29a      	uxth	r2, r3
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018100:	e003      	b.n	801810a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f002 fbce 	bl	801a8a4 <tcp_send_empty_ack>
 8018108:	e000      	b.n	801810c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801810a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018110:	2b00      	cmp	r3, #0
 8018112:	d05b      	beq.n	80181cc <tcp_receive+0x50c>
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018118:	4b60      	ldr	r3, [pc, #384]	; (801829c <tcp_receive+0x5dc>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	1ad3      	subs	r3, r2, r3
 801811e:	2b00      	cmp	r3, #0
 8018120:	da54      	bge.n	80181cc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018122:	4b5f      	ldr	r3, [pc, #380]	; (80182a0 <tcp_receive+0x5e0>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	b29a      	uxth	r2, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801812c:	b29b      	uxth	r3, r3
 801812e:	1ad3      	subs	r3, r2, r3
 8018130:	b29b      	uxth	r3, r3
 8018132:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018136:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018140:	10db      	asrs	r3, r3, #3
 8018142:	b21b      	sxth	r3, r3
 8018144:	b29b      	uxth	r3, r3
 8018146:	1ad3      	subs	r3, r2, r3
 8018148:	b29b      	uxth	r3, r3
 801814a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018154:	b29a      	uxth	r2, r3
 8018156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801815a:	4413      	add	r3, r2
 801815c:	b29b      	uxth	r3, r3
 801815e:	b21a      	sxth	r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018164:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018168:	2b00      	cmp	r3, #0
 801816a:	da05      	bge.n	8018178 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801816c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018170:	425b      	negs	r3, r3
 8018172:	b29b      	uxth	r3, r3
 8018174:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018178:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018182:	109b      	asrs	r3, r3, #2
 8018184:	b21b      	sxth	r3, r3
 8018186:	b29b      	uxth	r3, r3
 8018188:	1ad3      	subs	r3, r2, r3
 801818a:	b29b      	uxth	r3, r3
 801818c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018196:	b29a      	uxth	r2, r3
 8018198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801819c:	4413      	add	r3, r2
 801819e:	b29b      	uxth	r3, r3
 80181a0:	b21a      	sxth	r2, r3
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80181ac:	10db      	asrs	r3, r3, #3
 80181ae:	b21b      	sxth	r3, r3
 80181b0:	b29a      	uxth	r2, r3
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	4413      	add	r3, r2
 80181bc:	b29b      	uxth	r3, r3
 80181be:	b21a      	sxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	2200      	movs	r2, #0
 80181ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80181cc:	4b35      	ldr	r3, [pc, #212]	; (80182a4 <tcp_receive+0x5e4>)
 80181ce:	881b      	ldrh	r3, [r3, #0]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	f000 84e2 	beq.w	8018b9a <tcp_receive+0xeda>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	7d1b      	ldrb	r3, [r3, #20]
 80181da:	2b06      	cmp	r3, #6
 80181dc:	f200 84dd 	bhi.w	8018b9a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181e4:	4b30      	ldr	r3, [pc, #192]	; (80182a8 <tcp_receive+0x5e8>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	3b01      	subs	r3, #1
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	f2c0 808f 	blt.w	8018310 <tcp_receive+0x650>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181f6:	4b2b      	ldr	r3, [pc, #172]	; (80182a4 <tcp_receive+0x5e4>)
 80181f8:	881b      	ldrh	r3, [r3, #0]
 80181fa:	4619      	mov	r1, r3
 80181fc:	4b2a      	ldr	r3, [pc, #168]	; (80182a8 <tcp_receive+0x5e8>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	440b      	add	r3, r1
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	3301      	adds	r3, #1
 8018206:	2b00      	cmp	r3, #0
 8018208:	f300 8082 	bgt.w	8018310 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801820c:	4b27      	ldr	r3, [pc, #156]	; (80182ac <tcp_receive+0x5ec>)
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018216:	4b24      	ldr	r3, [pc, #144]	; (80182a8 <tcp_receive+0x5e8>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	1ad3      	subs	r3, r2, r3
 801821c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801821e:	4b23      	ldr	r3, [pc, #140]	; (80182ac <tcp_receive+0x5ec>)
 8018220:	685b      	ldr	r3, [r3, #4]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d106      	bne.n	8018234 <tcp_receive+0x574>
 8018226:	4b22      	ldr	r3, [pc, #136]	; (80182b0 <tcp_receive+0x5f0>)
 8018228:	f240 5294 	movw	r2, #1428	; 0x594
 801822c:	4921      	ldr	r1, [pc, #132]	; (80182b4 <tcp_receive+0x5f4>)
 801822e:	4822      	ldr	r0, [pc, #136]	; (80182b8 <tcp_receive+0x5f8>)
 8018230:	f004 f948 	bl	801c4c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018236:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801823a:	4293      	cmp	r3, r2
 801823c:	d906      	bls.n	801824c <tcp_receive+0x58c>
 801823e:	4b1c      	ldr	r3, [pc, #112]	; (80182b0 <tcp_receive+0x5f0>)
 8018240:	f240 5295 	movw	r2, #1429	; 0x595
 8018244:	491d      	ldr	r1, [pc, #116]	; (80182bc <tcp_receive+0x5fc>)
 8018246:	481c      	ldr	r0, [pc, #112]	; (80182b8 <tcp_receive+0x5f8>)
 8018248:	f004 f93c 	bl	801c4c4 <iprintf>
      off = (u16_t)off32;
 801824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018252:	4b16      	ldr	r3, [pc, #88]	; (80182ac <tcp_receive+0x5ec>)
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	891b      	ldrh	r3, [r3, #8]
 8018258:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801825c:	429a      	cmp	r2, r3
 801825e:	d906      	bls.n	801826e <tcp_receive+0x5ae>
 8018260:	4b13      	ldr	r3, [pc, #76]	; (80182b0 <tcp_receive+0x5f0>)
 8018262:	f240 5297 	movw	r2, #1431	; 0x597
 8018266:	4916      	ldr	r1, [pc, #88]	; (80182c0 <tcp_receive+0x600>)
 8018268:	4813      	ldr	r0, [pc, #76]	; (80182b8 <tcp_receive+0x5f8>)
 801826a:	f004 f92b 	bl	801c4c4 <iprintf>
      inseg.len -= off;
 801826e:	4b0f      	ldr	r3, [pc, #60]	; (80182ac <tcp_receive+0x5ec>)
 8018270:	891a      	ldrh	r2, [r3, #8]
 8018272:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018276:	1ad3      	subs	r3, r2, r3
 8018278:	b29a      	uxth	r2, r3
 801827a:	4b0c      	ldr	r3, [pc, #48]	; (80182ac <tcp_receive+0x5ec>)
 801827c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801827e:	4b0b      	ldr	r3, [pc, #44]	; (80182ac <tcp_receive+0x5ec>)
 8018280:	685b      	ldr	r3, [r3, #4]
 8018282:	891a      	ldrh	r2, [r3, #8]
 8018284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018288:	1ad3      	subs	r3, r2, r3
 801828a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801828c:	e02a      	b.n	80182e4 <tcp_receive+0x624>
 801828e:	bf00      	nop
 8018290:	08022314 	.word	0x08022314
 8018294:	0802231c 	.word	0x0802231c
 8018298:	24007994 	.word	0x24007994
 801829c:	24007990 	.word	0x24007990
 80182a0:	24007954 	.word	0x24007954
 80182a4:	24007996 	.word	0x24007996
 80182a8:	2400798c 	.word	0x2400798c
 80182ac:	2400796c 	.word	0x2400796c
 80182b0:	08021f8c 	.word	0x08021f8c
 80182b4:	08022324 	.word	0x08022324
 80182b8:	08021ff8 	.word	0x08021ff8
 80182bc:	08022334 	.word	0x08022334
 80182c0:	08022344 	.word	0x08022344
        off -= p->len;
 80182c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182c6:	895b      	ldrh	r3, [r3, #10]
 80182c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182cc:	1ad3      	subs	r3, r2, r3
 80182ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80182d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80182d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80182d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182da:	2200      	movs	r2, #0
 80182dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80182de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80182e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182e6:	895b      	ldrh	r3, [r3, #10]
 80182e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182ec:	429a      	cmp	r2, r3
 80182ee:	d8e9      	bhi.n	80182c4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80182f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80182f4:	4619      	mov	r1, r3
 80182f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80182f8:	f7fb feac 	bl	8014054 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018300:	4a91      	ldr	r2, [pc, #580]	; (8018548 <tcp_receive+0x888>)
 8018302:	6013      	str	r3, [r2, #0]
 8018304:	4b91      	ldr	r3, [pc, #580]	; (801854c <tcp_receive+0x88c>)
 8018306:	68db      	ldr	r3, [r3, #12]
 8018308:	4a8f      	ldr	r2, [pc, #572]	; (8018548 <tcp_receive+0x888>)
 801830a:	6812      	ldr	r2, [r2, #0]
 801830c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801830e:	e00d      	b.n	801832c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018310:	4b8d      	ldr	r3, [pc, #564]	; (8018548 <tcp_receive+0x888>)
 8018312:	681a      	ldr	r2, [r3, #0]
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018318:	1ad3      	subs	r3, r2, r3
 801831a:	2b00      	cmp	r3, #0
 801831c:	da06      	bge.n	801832c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	8b5b      	ldrh	r3, [r3, #26]
 8018322:	f043 0302 	orr.w	r3, r3, #2
 8018326:	b29a      	uxth	r2, r3
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801832c:	4b86      	ldr	r3, [pc, #536]	; (8018548 <tcp_receive+0x888>)
 801832e:	681a      	ldr	r2, [r3, #0]
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	2b00      	cmp	r3, #0
 8018338:	f2c0 842a 	blt.w	8018b90 <tcp_receive+0xed0>
 801833c:	4b82      	ldr	r3, [pc, #520]	; (8018548 <tcp_receive+0x888>)
 801833e:	681a      	ldr	r2, [r3, #0]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018344:	6879      	ldr	r1, [r7, #4]
 8018346:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018348:	440b      	add	r3, r1
 801834a:	1ad3      	subs	r3, r2, r3
 801834c:	3301      	adds	r3, #1
 801834e:	2b00      	cmp	r3, #0
 8018350:	f300 841e 	bgt.w	8018b90 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018358:	4b7b      	ldr	r3, [pc, #492]	; (8018548 <tcp_receive+0x888>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	429a      	cmp	r2, r3
 801835e:	f040 829a 	bne.w	8018896 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018362:	4b7a      	ldr	r3, [pc, #488]	; (801854c <tcp_receive+0x88c>)
 8018364:	891c      	ldrh	r4, [r3, #8]
 8018366:	4b79      	ldr	r3, [pc, #484]	; (801854c <tcp_receive+0x88c>)
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	899b      	ldrh	r3, [r3, #12]
 801836c:	b29b      	uxth	r3, r3
 801836e:	4618      	mov	r0, r3
 8018370:	f7f5 ffac 	bl	800e2cc <lwip_htons>
 8018374:	4603      	mov	r3, r0
 8018376:	b2db      	uxtb	r3, r3
 8018378:	f003 0303 	and.w	r3, r3, #3
 801837c:	2b00      	cmp	r3, #0
 801837e:	d001      	beq.n	8018384 <tcp_receive+0x6c4>
 8018380:	2301      	movs	r3, #1
 8018382:	e000      	b.n	8018386 <tcp_receive+0x6c6>
 8018384:	2300      	movs	r3, #0
 8018386:	4423      	add	r3, r4
 8018388:	b29a      	uxth	r2, r3
 801838a:	4b71      	ldr	r3, [pc, #452]	; (8018550 <tcp_receive+0x890>)
 801838c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018392:	4b6f      	ldr	r3, [pc, #444]	; (8018550 <tcp_receive+0x890>)
 8018394:	881b      	ldrh	r3, [r3, #0]
 8018396:	429a      	cmp	r2, r3
 8018398:	d275      	bcs.n	8018486 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801839a:	4b6c      	ldr	r3, [pc, #432]	; (801854c <tcp_receive+0x88c>)
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	899b      	ldrh	r3, [r3, #12]
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7f5 ff92 	bl	800e2cc <lwip_htons>
 80183a8:	4603      	mov	r3, r0
 80183aa:	b2db      	uxtb	r3, r3
 80183ac:	f003 0301 	and.w	r3, r3, #1
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d01f      	beq.n	80183f4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80183b4:	4b65      	ldr	r3, [pc, #404]	; (801854c <tcp_receive+0x88c>)
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	899b      	ldrh	r3, [r3, #12]
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	b21b      	sxth	r3, r3
 80183be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80183c2:	b21c      	sxth	r4, r3
 80183c4:	4b61      	ldr	r3, [pc, #388]	; (801854c <tcp_receive+0x88c>)
 80183c6:	68db      	ldr	r3, [r3, #12]
 80183c8:	899b      	ldrh	r3, [r3, #12]
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7f5 ff7d 	bl	800e2cc <lwip_htons>
 80183d2:	4603      	mov	r3, r0
 80183d4:	b2db      	uxtb	r3, r3
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80183dc:	b29b      	uxth	r3, r3
 80183de:	4618      	mov	r0, r3
 80183e0:	f7f5 ff74 	bl	800e2cc <lwip_htons>
 80183e4:	4603      	mov	r3, r0
 80183e6:	b21b      	sxth	r3, r3
 80183e8:	4323      	orrs	r3, r4
 80183ea:	b21a      	sxth	r2, r3
 80183ec:	4b57      	ldr	r3, [pc, #348]	; (801854c <tcp_receive+0x88c>)
 80183ee:	68db      	ldr	r3, [r3, #12]
 80183f0:	b292      	uxth	r2, r2
 80183f2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80183f8:	4b54      	ldr	r3, [pc, #336]	; (801854c <tcp_receive+0x88c>)
 80183fa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80183fc:	4b53      	ldr	r3, [pc, #332]	; (801854c <tcp_receive+0x88c>)
 80183fe:	68db      	ldr	r3, [r3, #12]
 8018400:	899b      	ldrh	r3, [r3, #12]
 8018402:	b29b      	uxth	r3, r3
 8018404:	4618      	mov	r0, r3
 8018406:	f7f5 ff61 	bl	800e2cc <lwip_htons>
 801840a:	4603      	mov	r3, r0
 801840c:	b2db      	uxtb	r3, r3
 801840e:	f003 0302 	and.w	r3, r3, #2
 8018412:	2b00      	cmp	r3, #0
 8018414:	d005      	beq.n	8018422 <tcp_receive+0x762>
            inseg.len -= 1;
 8018416:	4b4d      	ldr	r3, [pc, #308]	; (801854c <tcp_receive+0x88c>)
 8018418:	891b      	ldrh	r3, [r3, #8]
 801841a:	3b01      	subs	r3, #1
 801841c:	b29a      	uxth	r2, r3
 801841e:	4b4b      	ldr	r3, [pc, #300]	; (801854c <tcp_receive+0x88c>)
 8018420:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018422:	4b4a      	ldr	r3, [pc, #296]	; (801854c <tcp_receive+0x88c>)
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	4a49      	ldr	r2, [pc, #292]	; (801854c <tcp_receive+0x88c>)
 8018428:	8912      	ldrh	r2, [r2, #8]
 801842a:	4611      	mov	r1, r2
 801842c:	4618      	mov	r0, r3
 801842e:	f7fb fd11 	bl	8013e54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018432:	4b46      	ldr	r3, [pc, #280]	; (801854c <tcp_receive+0x88c>)
 8018434:	891c      	ldrh	r4, [r3, #8]
 8018436:	4b45      	ldr	r3, [pc, #276]	; (801854c <tcp_receive+0x88c>)
 8018438:	68db      	ldr	r3, [r3, #12]
 801843a:	899b      	ldrh	r3, [r3, #12]
 801843c:	b29b      	uxth	r3, r3
 801843e:	4618      	mov	r0, r3
 8018440:	f7f5 ff44 	bl	800e2cc <lwip_htons>
 8018444:	4603      	mov	r3, r0
 8018446:	b2db      	uxtb	r3, r3
 8018448:	f003 0303 	and.w	r3, r3, #3
 801844c:	2b00      	cmp	r3, #0
 801844e:	d001      	beq.n	8018454 <tcp_receive+0x794>
 8018450:	2301      	movs	r3, #1
 8018452:	e000      	b.n	8018456 <tcp_receive+0x796>
 8018454:	2300      	movs	r3, #0
 8018456:	4423      	add	r3, r4
 8018458:	b29a      	uxth	r2, r3
 801845a:	4b3d      	ldr	r3, [pc, #244]	; (8018550 <tcp_receive+0x890>)
 801845c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801845e:	4b3c      	ldr	r3, [pc, #240]	; (8018550 <tcp_receive+0x890>)
 8018460:	881b      	ldrh	r3, [r3, #0]
 8018462:	461a      	mov	r2, r3
 8018464:	4b38      	ldr	r3, [pc, #224]	; (8018548 <tcp_receive+0x888>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	441a      	add	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801846e:	6879      	ldr	r1, [r7, #4]
 8018470:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018472:	440b      	add	r3, r1
 8018474:	429a      	cmp	r2, r3
 8018476:	d006      	beq.n	8018486 <tcp_receive+0x7c6>
 8018478:	4b36      	ldr	r3, [pc, #216]	; (8018554 <tcp_receive+0x894>)
 801847a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801847e:	4936      	ldr	r1, [pc, #216]	; (8018558 <tcp_receive+0x898>)
 8018480:	4836      	ldr	r0, [pc, #216]	; (801855c <tcp_receive+0x89c>)
 8018482:	f004 f81f 	bl	801c4c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801848a:	2b00      	cmp	r3, #0
 801848c:	f000 80e7 	beq.w	801865e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018490:	4b2e      	ldr	r3, [pc, #184]	; (801854c <tcp_receive+0x88c>)
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	899b      	ldrh	r3, [r3, #12]
 8018496:	b29b      	uxth	r3, r3
 8018498:	4618      	mov	r0, r3
 801849a:	f7f5 ff17 	bl	800e2cc <lwip_htons>
 801849e:	4603      	mov	r3, r0
 80184a0:	b2db      	uxtb	r3, r3
 80184a2:	f003 0301 	and.w	r3, r3, #1
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d010      	beq.n	80184cc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80184aa:	e00a      	b.n	80184c2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184b6:	681a      	ldr	r2, [r3, #0]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80184bc:	68f8      	ldr	r0, [r7, #12]
 80184be:	f7fd fcc4 	bl	8015e4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d1f0      	bne.n	80184ac <tcp_receive+0x7ec>
 80184ca:	e0c8      	b.n	801865e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80184d2:	e052      	b.n	801857a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80184d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	899b      	ldrh	r3, [r3, #12]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f5 fef5 	bl	800e2cc <lwip_htons>
 80184e2:	4603      	mov	r3, r0
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d03d      	beq.n	801856a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80184ee:	4b17      	ldr	r3, [pc, #92]	; (801854c <tcp_receive+0x88c>)
 80184f0:	68db      	ldr	r3, [r3, #12]
 80184f2:	899b      	ldrh	r3, [r3, #12]
 80184f4:	b29b      	uxth	r3, r3
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7f5 fee8 	bl	800e2cc <lwip_htons>
 80184fc:	4603      	mov	r3, r0
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018504:	2b00      	cmp	r3, #0
 8018506:	d130      	bne.n	801856a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018508:	4b10      	ldr	r3, [pc, #64]	; (801854c <tcp_receive+0x88c>)
 801850a:	68db      	ldr	r3, [r3, #12]
 801850c:	899b      	ldrh	r3, [r3, #12]
 801850e:	b29c      	uxth	r4, r3
 8018510:	2001      	movs	r0, #1
 8018512:	f7f5 fedb 	bl	800e2cc <lwip_htons>
 8018516:	4603      	mov	r3, r0
 8018518:	461a      	mov	r2, r3
 801851a:	4b0c      	ldr	r3, [pc, #48]	; (801854c <tcp_receive+0x88c>)
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	4322      	orrs	r2, r4
 8018520:	b292      	uxth	r2, r2
 8018522:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018524:	4b09      	ldr	r3, [pc, #36]	; (801854c <tcp_receive+0x88c>)
 8018526:	891c      	ldrh	r4, [r3, #8]
 8018528:	4b08      	ldr	r3, [pc, #32]	; (801854c <tcp_receive+0x88c>)
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	899b      	ldrh	r3, [r3, #12]
 801852e:	b29b      	uxth	r3, r3
 8018530:	4618      	mov	r0, r3
 8018532:	f7f5 fecb 	bl	800e2cc <lwip_htons>
 8018536:	4603      	mov	r3, r0
 8018538:	b2db      	uxtb	r3, r3
 801853a:	f003 0303 	and.w	r3, r3, #3
 801853e:	2b00      	cmp	r3, #0
 8018540:	d00e      	beq.n	8018560 <tcp_receive+0x8a0>
 8018542:	2301      	movs	r3, #1
 8018544:	e00d      	b.n	8018562 <tcp_receive+0x8a2>
 8018546:	bf00      	nop
 8018548:	2400798c 	.word	0x2400798c
 801854c:	2400796c 	.word	0x2400796c
 8018550:	24007996 	.word	0x24007996
 8018554:	08021f8c 	.word	0x08021f8c
 8018558:	08022354 	.word	0x08022354
 801855c:	08021ff8 	.word	0x08021ff8
 8018560:	2300      	movs	r3, #0
 8018562:	4423      	add	r3, r4
 8018564:	b29a      	uxth	r2, r3
 8018566:	4b98      	ldr	r3, [pc, #608]	; (80187c8 <tcp_receive+0xb08>)
 8018568:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801856a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801856c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018574:	6938      	ldr	r0, [r7, #16]
 8018576:	f7fd fc68 	bl	8015e4a <tcp_seg_free>
            while (next &&
 801857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801857c:	2b00      	cmp	r3, #0
 801857e:	d00e      	beq.n	801859e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018580:	4b91      	ldr	r3, [pc, #580]	; (80187c8 <tcp_receive+0xb08>)
 8018582:	881b      	ldrh	r3, [r3, #0]
 8018584:	461a      	mov	r2, r3
 8018586:	4b91      	ldr	r3, [pc, #580]	; (80187cc <tcp_receive+0xb0c>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	441a      	add	r2, r3
 801858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801858e:	68db      	ldr	r3, [r3, #12]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018594:	8909      	ldrh	r1, [r1, #8]
 8018596:	440b      	add	r3, r1
 8018598:	1ad3      	subs	r3, r2, r3
            while (next &&
 801859a:	2b00      	cmp	r3, #0
 801859c:	da9a      	bge.n	80184d4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d059      	beq.n	8018658 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80185a4:	4b88      	ldr	r3, [pc, #544]	; (80187c8 <tcp_receive+0xb08>)
 80185a6:	881b      	ldrh	r3, [r3, #0]
 80185a8:	461a      	mov	r2, r3
 80185aa:	4b88      	ldr	r3, [pc, #544]	; (80187cc <tcp_receive+0xb0c>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	441a      	add	r2, r3
 80185b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185b2:	68db      	ldr	r3, [r3, #12]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	dd4d      	ble.n	8018658 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80185bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	b29a      	uxth	r2, r3
 80185c4:	4b81      	ldr	r3, [pc, #516]	; (80187cc <tcp_receive+0xb0c>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	b29b      	uxth	r3, r3
 80185ca:	1ad3      	subs	r3, r2, r3
 80185cc:	b29a      	uxth	r2, r3
 80185ce:	4b80      	ldr	r3, [pc, #512]	; (80187d0 <tcp_receive+0xb10>)
 80185d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80185d2:	4b7f      	ldr	r3, [pc, #508]	; (80187d0 <tcp_receive+0xb10>)
 80185d4:	68db      	ldr	r3, [r3, #12]
 80185d6:	899b      	ldrh	r3, [r3, #12]
 80185d8:	b29b      	uxth	r3, r3
 80185da:	4618      	mov	r0, r3
 80185dc:	f7f5 fe76 	bl	800e2cc <lwip_htons>
 80185e0:	4603      	mov	r3, r0
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	f003 0302 	and.w	r3, r3, #2
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d005      	beq.n	80185f8 <tcp_receive+0x938>
                inseg.len -= 1;
 80185ec:	4b78      	ldr	r3, [pc, #480]	; (80187d0 <tcp_receive+0xb10>)
 80185ee:	891b      	ldrh	r3, [r3, #8]
 80185f0:	3b01      	subs	r3, #1
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	4b76      	ldr	r3, [pc, #472]	; (80187d0 <tcp_receive+0xb10>)
 80185f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80185f8:	4b75      	ldr	r3, [pc, #468]	; (80187d0 <tcp_receive+0xb10>)
 80185fa:	685b      	ldr	r3, [r3, #4]
 80185fc:	4a74      	ldr	r2, [pc, #464]	; (80187d0 <tcp_receive+0xb10>)
 80185fe:	8912      	ldrh	r2, [r2, #8]
 8018600:	4611      	mov	r1, r2
 8018602:	4618      	mov	r0, r3
 8018604:	f7fb fc26 	bl	8013e54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018608:	4b71      	ldr	r3, [pc, #452]	; (80187d0 <tcp_receive+0xb10>)
 801860a:	891c      	ldrh	r4, [r3, #8]
 801860c:	4b70      	ldr	r3, [pc, #448]	; (80187d0 <tcp_receive+0xb10>)
 801860e:	68db      	ldr	r3, [r3, #12]
 8018610:	899b      	ldrh	r3, [r3, #12]
 8018612:	b29b      	uxth	r3, r3
 8018614:	4618      	mov	r0, r3
 8018616:	f7f5 fe59 	bl	800e2cc <lwip_htons>
 801861a:	4603      	mov	r3, r0
 801861c:	b2db      	uxtb	r3, r3
 801861e:	f003 0303 	and.w	r3, r3, #3
 8018622:	2b00      	cmp	r3, #0
 8018624:	d001      	beq.n	801862a <tcp_receive+0x96a>
 8018626:	2301      	movs	r3, #1
 8018628:	e000      	b.n	801862c <tcp_receive+0x96c>
 801862a:	2300      	movs	r3, #0
 801862c:	4423      	add	r3, r4
 801862e:	b29a      	uxth	r2, r3
 8018630:	4b65      	ldr	r3, [pc, #404]	; (80187c8 <tcp_receive+0xb08>)
 8018632:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018634:	4b64      	ldr	r3, [pc, #400]	; (80187c8 <tcp_receive+0xb08>)
 8018636:	881b      	ldrh	r3, [r3, #0]
 8018638:	461a      	mov	r2, r3
 801863a:	4b64      	ldr	r3, [pc, #400]	; (80187cc <tcp_receive+0xb0c>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	441a      	add	r2, r3
 8018640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018642:	68db      	ldr	r3, [r3, #12]
 8018644:	685b      	ldr	r3, [r3, #4]
 8018646:	429a      	cmp	r2, r3
 8018648:	d006      	beq.n	8018658 <tcp_receive+0x998>
 801864a:	4b62      	ldr	r3, [pc, #392]	; (80187d4 <tcp_receive+0xb14>)
 801864c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018650:	4961      	ldr	r1, [pc, #388]	; (80187d8 <tcp_receive+0xb18>)
 8018652:	4862      	ldr	r0, [pc, #392]	; (80187dc <tcp_receive+0xb1c>)
 8018654:	f003 ff36 	bl	801c4c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801865c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801865e:	4b5a      	ldr	r3, [pc, #360]	; (80187c8 <tcp_receive+0xb08>)
 8018660:	881b      	ldrh	r3, [r3, #0]
 8018662:	461a      	mov	r2, r3
 8018664:	4b59      	ldr	r3, [pc, #356]	; (80187cc <tcp_receive+0xb0c>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	441a      	add	r2, r3
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018672:	4b55      	ldr	r3, [pc, #340]	; (80187c8 <tcp_receive+0xb08>)
 8018674:	881b      	ldrh	r3, [r3, #0]
 8018676:	429a      	cmp	r2, r3
 8018678:	d206      	bcs.n	8018688 <tcp_receive+0x9c8>
 801867a:	4b56      	ldr	r3, [pc, #344]	; (80187d4 <tcp_receive+0xb14>)
 801867c:	f240 6207 	movw	r2, #1543	; 0x607
 8018680:	4957      	ldr	r1, [pc, #348]	; (80187e0 <tcp_receive+0xb20>)
 8018682:	4856      	ldr	r0, [pc, #344]	; (80187dc <tcp_receive+0xb1c>)
 8018684:	f003 ff1e 	bl	801c4c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801868c:	4b4e      	ldr	r3, [pc, #312]	; (80187c8 <tcp_receive+0xb08>)
 801868e:	881b      	ldrh	r3, [r3, #0]
 8018690:	1ad3      	subs	r3, r2, r3
 8018692:	b29a      	uxth	r2, r3
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f7fc feb1 	bl	8015400 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801869e:	4b4c      	ldr	r3, [pc, #304]	; (80187d0 <tcp_receive+0xb10>)
 80186a0:	685b      	ldr	r3, [r3, #4]
 80186a2:	891b      	ldrh	r3, [r3, #8]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d006      	beq.n	80186b6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80186a8:	4b49      	ldr	r3, [pc, #292]	; (80187d0 <tcp_receive+0xb10>)
 80186aa:	685b      	ldr	r3, [r3, #4]
 80186ac:	4a4d      	ldr	r2, [pc, #308]	; (80187e4 <tcp_receive+0xb24>)
 80186ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80186b0:	4b47      	ldr	r3, [pc, #284]	; (80187d0 <tcp_receive+0xb10>)
 80186b2:	2200      	movs	r2, #0
 80186b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80186b6:	4b46      	ldr	r3, [pc, #280]	; (80187d0 <tcp_receive+0xb10>)
 80186b8:	68db      	ldr	r3, [r3, #12]
 80186ba:	899b      	ldrh	r3, [r3, #12]
 80186bc:	b29b      	uxth	r3, r3
 80186be:	4618      	mov	r0, r3
 80186c0:	f7f5 fe04 	bl	800e2cc <lwip_htons>
 80186c4:	4603      	mov	r3, r0
 80186c6:	b2db      	uxtb	r3, r3
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	f000 80b8 	beq.w	8018842 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80186d2:	4b45      	ldr	r3, [pc, #276]	; (80187e8 <tcp_receive+0xb28>)
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	f043 0320 	orr.w	r3, r3, #32
 80186da:	b2da      	uxtb	r2, r3
 80186dc:	4b42      	ldr	r3, [pc, #264]	; (80187e8 <tcp_receive+0xb28>)
 80186de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80186e0:	e0af      	b.n	8018842 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186ec:	68db      	ldr	r3, [r3, #12]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	4a36      	ldr	r2, [pc, #216]	; (80187cc <tcp_receive+0xb0c>)
 80186f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	891b      	ldrh	r3, [r3, #8]
 80186f8:	461c      	mov	r4, r3
 80186fa:	68bb      	ldr	r3, [r7, #8]
 80186fc:	68db      	ldr	r3, [r3, #12]
 80186fe:	899b      	ldrh	r3, [r3, #12]
 8018700:	b29b      	uxth	r3, r3
 8018702:	4618      	mov	r0, r3
 8018704:	f7f5 fde2 	bl	800e2cc <lwip_htons>
 8018708:	4603      	mov	r3, r0
 801870a:	b2db      	uxtb	r3, r3
 801870c:	f003 0303 	and.w	r3, r3, #3
 8018710:	2b00      	cmp	r3, #0
 8018712:	d001      	beq.n	8018718 <tcp_receive+0xa58>
 8018714:	2301      	movs	r3, #1
 8018716:	e000      	b.n	801871a <tcp_receive+0xa5a>
 8018718:	2300      	movs	r3, #0
 801871a:	191a      	adds	r2, r3, r4
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018720:	441a      	add	r2, r3
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801872a:	461c      	mov	r4, r3
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	891b      	ldrh	r3, [r3, #8]
 8018730:	461d      	mov	r5, r3
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	68db      	ldr	r3, [r3, #12]
 8018736:	899b      	ldrh	r3, [r3, #12]
 8018738:	b29b      	uxth	r3, r3
 801873a:	4618      	mov	r0, r3
 801873c:	f7f5 fdc6 	bl	800e2cc <lwip_htons>
 8018740:	4603      	mov	r3, r0
 8018742:	b2db      	uxtb	r3, r3
 8018744:	f003 0303 	and.w	r3, r3, #3
 8018748:	2b00      	cmp	r3, #0
 801874a:	d001      	beq.n	8018750 <tcp_receive+0xa90>
 801874c:	2301      	movs	r3, #1
 801874e:	e000      	b.n	8018752 <tcp_receive+0xa92>
 8018750:	2300      	movs	r3, #0
 8018752:	442b      	add	r3, r5
 8018754:	429c      	cmp	r4, r3
 8018756:	d206      	bcs.n	8018766 <tcp_receive+0xaa6>
 8018758:	4b1e      	ldr	r3, [pc, #120]	; (80187d4 <tcp_receive+0xb14>)
 801875a:	f240 622b 	movw	r2, #1579	; 0x62b
 801875e:	4923      	ldr	r1, [pc, #140]	; (80187ec <tcp_receive+0xb2c>)
 8018760:	481e      	ldr	r0, [pc, #120]	; (80187dc <tcp_receive+0xb1c>)
 8018762:	f003 feaf 	bl	801c4c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	891b      	ldrh	r3, [r3, #8]
 801876a:	461c      	mov	r4, r3
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	68db      	ldr	r3, [r3, #12]
 8018770:	899b      	ldrh	r3, [r3, #12]
 8018772:	b29b      	uxth	r3, r3
 8018774:	4618      	mov	r0, r3
 8018776:	f7f5 fda9 	bl	800e2cc <lwip_htons>
 801877a:	4603      	mov	r3, r0
 801877c:	b2db      	uxtb	r3, r3
 801877e:	f003 0303 	and.w	r3, r3, #3
 8018782:	2b00      	cmp	r3, #0
 8018784:	d001      	beq.n	801878a <tcp_receive+0xaca>
 8018786:	2301      	movs	r3, #1
 8018788:	e000      	b.n	801878c <tcp_receive+0xacc>
 801878a:	2300      	movs	r3, #0
 801878c:	1919      	adds	r1, r3, r4
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018792:	b28b      	uxth	r3, r1
 8018794:	1ad3      	subs	r3, r2, r3
 8018796:	b29a      	uxth	r2, r3
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f7fc fe2f 	bl	8015400 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	891b      	ldrh	r3, [r3, #8]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d028      	beq.n	80187fe <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80187ac:	4b0d      	ldr	r3, [pc, #52]	; (80187e4 <tcp_receive+0xb24>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d01d      	beq.n	80187f0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80187b4:	4b0b      	ldr	r3, [pc, #44]	; (80187e4 <tcp_receive+0xb24>)
 80187b6:	681a      	ldr	r2, [r3, #0]
 80187b8:	68bb      	ldr	r3, [r7, #8]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	4619      	mov	r1, r3
 80187be:	4610      	mov	r0, r2
 80187c0:	f7fb fd9c 	bl	80142fc <pbuf_cat>
 80187c4:	e018      	b.n	80187f8 <tcp_receive+0xb38>
 80187c6:	bf00      	nop
 80187c8:	24007996 	.word	0x24007996
 80187cc:	2400798c 	.word	0x2400798c
 80187d0:	2400796c 	.word	0x2400796c
 80187d4:	08021f8c 	.word	0x08021f8c
 80187d8:	0802238c 	.word	0x0802238c
 80187dc:	08021ff8 	.word	0x08021ff8
 80187e0:	080223c8 	.word	0x080223c8
 80187e4:	2400799c 	.word	0x2400799c
 80187e8:	24007999 	.word	0x24007999
 80187ec:	080223e8 	.word	0x080223e8
            } else {
              recv_data = cseg->p;
 80187f0:	68bb      	ldr	r3, [r7, #8]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	4a70      	ldr	r2, [pc, #448]	; (80189b8 <tcp_receive+0xcf8>)
 80187f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	2200      	movs	r2, #0
 80187fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	68db      	ldr	r3, [r3, #12]
 8018802:	899b      	ldrh	r3, [r3, #12]
 8018804:	b29b      	uxth	r3, r3
 8018806:	4618      	mov	r0, r3
 8018808:	f7f5 fd60 	bl	800e2cc <lwip_htons>
 801880c:	4603      	mov	r3, r0
 801880e:	b2db      	uxtb	r3, r3
 8018810:	f003 0301 	and.w	r3, r3, #1
 8018814:	2b00      	cmp	r3, #0
 8018816:	d00d      	beq.n	8018834 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018818:	4b68      	ldr	r3, [pc, #416]	; (80189bc <tcp_receive+0xcfc>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	f043 0320 	orr.w	r3, r3, #32
 8018820:	b2da      	uxtb	r2, r3
 8018822:	4b66      	ldr	r3, [pc, #408]	; (80189bc <tcp_receive+0xcfc>)
 8018824:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	7d1b      	ldrb	r3, [r3, #20]
 801882a:	2b04      	cmp	r3, #4
 801882c:	d102      	bne.n	8018834 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2207      	movs	r2, #7
 8018832:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801883c:	68b8      	ldr	r0, [r7, #8]
 801883e:	f7fd fb04 	bl	8015e4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018846:	2b00      	cmp	r3, #0
 8018848:	d008      	beq.n	801885c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	685a      	ldr	r2, [r3, #4]
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018856:	429a      	cmp	r2, r3
 8018858:	f43f af43 	beq.w	80186e2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	8b5b      	ldrh	r3, [r3, #26]
 8018860:	f003 0301 	and.w	r3, r3, #1
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00e      	beq.n	8018886 <tcp_receive+0xbc6>
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	8b5b      	ldrh	r3, [r3, #26]
 801886c:	f023 0301 	bic.w	r3, r3, #1
 8018870:	b29a      	uxth	r2, r3
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	835a      	strh	r2, [r3, #26]
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	8b5b      	ldrh	r3, [r3, #26]
 801887a:	f043 0302 	orr.w	r3, r3, #2
 801887e:	b29a      	uxth	r2, r3
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018884:	e188      	b.n	8018b98 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	8b5b      	ldrh	r3, [r3, #26]
 801888a:	f043 0301 	orr.w	r3, r3, #1
 801888e:	b29a      	uxth	r2, r3
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018894:	e180      	b.n	8018b98 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801889a:	2b00      	cmp	r3, #0
 801889c:	d106      	bne.n	80188ac <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801889e:	4848      	ldr	r0, [pc, #288]	; (80189c0 <tcp_receive+0xd00>)
 80188a0:	f7fd faec 	bl	8015e7c <tcp_seg_copy>
 80188a4:	4602      	mov	r2, r0
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	675a      	str	r2, [r3, #116]	; 0x74
 80188aa:	e16d      	b.n	8018b88 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80188ac:	2300      	movs	r3, #0
 80188ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80188b6:	e157      	b.n	8018b68 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80188b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	685a      	ldr	r2, [r3, #4]
 80188be:	4b41      	ldr	r3, [pc, #260]	; (80189c4 <tcp_receive+0xd04>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	429a      	cmp	r2, r3
 80188c4:	d11d      	bne.n	8018902 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80188c6:	4b3e      	ldr	r3, [pc, #248]	; (80189c0 <tcp_receive+0xd00>)
 80188c8:	891a      	ldrh	r2, [r3, #8]
 80188ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188cc:	891b      	ldrh	r3, [r3, #8]
 80188ce:	429a      	cmp	r2, r3
 80188d0:	f240 814f 	bls.w	8018b72 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188d4:	483a      	ldr	r0, [pc, #232]	; (80189c0 <tcp_receive+0xd00>)
 80188d6:	f7fd fad1 	bl	8015e7c <tcp_seg_copy>
 80188da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f000 8149 	beq.w	8018b76 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80188e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d003      	beq.n	80188f2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80188ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ec:	697a      	ldr	r2, [r7, #20]
 80188ee:	601a      	str	r2, [r3, #0]
 80188f0:	e002      	b.n	80188f8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	697a      	ldr	r2, [r7, #20]
 80188f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80188f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188fa:	6978      	ldr	r0, [r7, #20]
 80188fc:	f7ff f8dc 	bl	8017ab8 <tcp_oos_insert_segment>
                }
                break;
 8018900:	e139      	b.n	8018b76 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018904:	2b00      	cmp	r3, #0
 8018906:	d117      	bne.n	8018938 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018908:	4b2e      	ldr	r3, [pc, #184]	; (80189c4 <tcp_receive+0xd04>)
 801890a:	681a      	ldr	r2, [r3, #0]
 801890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801890e:	68db      	ldr	r3, [r3, #12]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	1ad3      	subs	r3, r2, r3
 8018914:	2b00      	cmp	r3, #0
 8018916:	da57      	bge.n	80189c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018918:	4829      	ldr	r0, [pc, #164]	; (80189c0 <tcp_receive+0xd00>)
 801891a:	f7fd faaf 	bl	8015e7c <tcp_seg_copy>
 801891e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018920:	69bb      	ldr	r3, [r7, #24]
 8018922:	2b00      	cmp	r3, #0
 8018924:	f000 8129 	beq.w	8018b7a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	69ba      	ldr	r2, [r7, #24]
 801892c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801892e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018930:	69b8      	ldr	r0, [r7, #24]
 8018932:	f7ff f8c1 	bl	8017ab8 <tcp_oos_insert_segment>
                  }
                  break;
 8018936:	e120      	b.n	8018b7a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018938:	4b22      	ldr	r3, [pc, #136]	; (80189c4 <tcp_receive+0xd04>)
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	685b      	ldr	r3, [r3, #4]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	3b01      	subs	r3, #1
 8018946:	2b00      	cmp	r3, #0
 8018948:	db3e      	blt.n	80189c8 <tcp_receive+0xd08>
 801894a:	4b1e      	ldr	r3, [pc, #120]	; (80189c4 <tcp_receive+0xd04>)
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018950:	68db      	ldr	r3, [r3, #12]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	1ad3      	subs	r3, r2, r3
 8018956:	3301      	adds	r3, #1
 8018958:	2b00      	cmp	r3, #0
 801895a:	dc35      	bgt.n	80189c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801895c:	4818      	ldr	r0, [pc, #96]	; (80189c0 <tcp_receive+0xd00>)
 801895e:	f7fd fa8d 	bl	8015e7c <tcp_seg_copy>
 8018962:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018964:	69fb      	ldr	r3, [r7, #28]
 8018966:	2b00      	cmp	r3, #0
 8018968:	f000 8109 	beq.w	8018b7e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018974:	8912      	ldrh	r2, [r2, #8]
 8018976:	441a      	add	r2, r3
 8018978:	4b12      	ldr	r3, [pc, #72]	; (80189c4 <tcp_receive+0xd04>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	1ad3      	subs	r3, r2, r3
 801897e:	2b00      	cmp	r3, #0
 8018980:	dd12      	ble.n	80189a8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018982:	4b10      	ldr	r3, [pc, #64]	; (80189c4 <tcp_receive+0xd04>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	b29a      	uxth	r2, r3
 8018988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801898a:	68db      	ldr	r3, [r3, #12]
 801898c:	685b      	ldr	r3, [r3, #4]
 801898e:	b29b      	uxth	r3, r3
 8018990:	1ad3      	subs	r3, r2, r3
 8018992:	b29a      	uxth	r2, r3
 8018994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018996:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801899a:	685a      	ldr	r2, [r3, #4]
 801899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801899e:	891b      	ldrh	r3, [r3, #8]
 80189a0:	4619      	mov	r1, r3
 80189a2:	4610      	mov	r0, r2
 80189a4:	f7fb fa56 	bl	8013e54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80189a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189aa:	69fa      	ldr	r2, [r7, #28]
 80189ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80189ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80189b0:	69f8      	ldr	r0, [r7, #28]
 80189b2:	f7ff f881 	bl	8017ab8 <tcp_oos_insert_segment>
                  }
                  break;
 80189b6:	e0e2      	b.n	8018b7e <tcp_receive+0xebe>
 80189b8:	2400799c 	.word	0x2400799c
 80189bc:	24007999 	.word	0x24007999
 80189c0:	2400796c 	.word	0x2400796c
 80189c4:	2400798c 	.word	0x2400798c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80189c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80189cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	f040 80c6 	bne.w	8018b62 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80189d6:	4b80      	ldr	r3, [pc, #512]	; (8018bd8 <tcp_receive+0xf18>)
 80189d8:	681a      	ldr	r2, [r3, #0]
 80189da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189dc:	68db      	ldr	r3, [r3, #12]
 80189de:	685b      	ldr	r3, [r3, #4]
 80189e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	f340 80bd 	ble.w	8018b62 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80189e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ea:	68db      	ldr	r3, [r3, #12]
 80189ec:	899b      	ldrh	r3, [r3, #12]
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7f5 fc6b 	bl	800e2cc <lwip_htons>
 80189f6:	4603      	mov	r3, r0
 80189f8:	b2db      	uxtb	r3, r3
 80189fa:	f003 0301 	and.w	r3, r3, #1
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	f040 80bf 	bne.w	8018b82 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018a04:	4875      	ldr	r0, [pc, #468]	; (8018bdc <tcp_receive+0xf1c>)
 8018a06:	f7fd fa39 	bl	8015e7c <tcp_seg_copy>
 8018a0a:	4602      	mov	r2, r0
 8018a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	f000 80b6 	beq.w	8018b86 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1c:	68db      	ldr	r3, [r3, #12]
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a22:	8912      	ldrh	r2, [r2, #8]
 8018a24:	441a      	add	r2, r3
 8018a26:	4b6c      	ldr	r3, [pc, #432]	; (8018bd8 <tcp_receive+0xf18>)
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	1ad3      	subs	r3, r2, r3
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	dd12      	ble.n	8018a56 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018a30:	4b69      	ldr	r3, [pc, #420]	; (8018bd8 <tcp_receive+0xf18>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	b29a      	uxth	r2, r3
 8018a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a38:	68db      	ldr	r3, [r3, #12]
 8018a3a:	685b      	ldr	r3, [r3, #4]
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	1ad3      	subs	r3, r2, r3
 8018a40:	b29a      	uxth	r2, r3
 8018a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a48:	685a      	ldr	r2, [r3, #4]
 8018a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4c:	891b      	ldrh	r3, [r3, #8]
 8018a4e:	4619      	mov	r1, r3
 8018a50:	4610      	mov	r0, r2
 8018a52:	f7fb f9ff 	bl	8013e54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018a56:	4b62      	ldr	r3, [pc, #392]	; (8018be0 <tcp_receive+0xf20>)
 8018a58:	881b      	ldrh	r3, [r3, #0]
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	4b5e      	ldr	r3, [pc, #376]	; (8018bd8 <tcp_receive+0xf18>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	441a      	add	r2, r3
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a66:	6879      	ldr	r1, [r7, #4]
 8018a68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a6a:	440b      	add	r3, r1
 8018a6c:	1ad3      	subs	r3, r2, r3
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	f340 8089 	ble.w	8018b86 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	68db      	ldr	r3, [r3, #12]
 8018a7a:	899b      	ldrh	r3, [r3, #12]
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7f5 fc24 	bl	800e2cc <lwip_htons>
 8018a84:	4603      	mov	r3, r0
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	f003 0301 	and.w	r3, r3, #1
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d022      	beq.n	8018ad6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	899b      	ldrh	r3, [r3, #12]
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	b21b      	sxth	r3, r3
 8018a9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018aa0:	b21c      	sxth	r4, r3
 8018aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	899b      	ldrh	r3, [r3, #12]
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7f5 fc0d 	bl	800e2cc <lwip_htons>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	b29b      	uxth	r3, r3
 8018ab8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7f5 fc04 	bl	800e2cc <lwip_htons>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	b21b      	sxth	r3, r3
 8018ac8:	4323      	orrs	r3, r4
 8018aca:	b21a      	sxth	r2, r3
 8018acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	68db      	ldr	r3, [r3, #12]
 8018ad2:	b292      	uxth	r2, r2
 8018ad4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ada:	b29a      	uxth	r2, r3
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ae0:	4413      	add	r3, r2
 8018ae2:	b299      	uxth	r1, r3
 8018ae4:	4b3c      	ldr	r3, [pc, #240]	; (8018bd8 <tcp_receive+0xf18>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	b29a      	uxth	r2, r3
 8018aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	1a8a      	subs	r2, r1, r2
 8018af0:	b292      	uxth	r2, r2
 8018af2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	685a      	ldr	r2, [r3, #4]
 8018afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	891b      	ldrh	r3, [r3, #8]
 8018b00:	4619      	mov	r1, r3
 8018b02:	4610      	mov	r0, r2
 8018b04:	f7fb f9a6 	bl	8013e54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	891c      	ldrh	r4, [r3, #8]
 8018b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	899b      	ldrh	r3, [r3, #12]
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f5 fbd7 	bl	800e2cc <lwip_htons>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	f003 0303 	and.w	r3, r3, #3
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d001      	beq.n	8018b2e <tcp_receive+0xe6e>
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	e000      	b.n	8018b30 <tcp_receive+0xe70>
 8018b2e:	2300      	movs	r3, #0
 8018b30:	4423      	add	r3, r4
 8018b32:	b29a      	uxth	r2, r3
 8018b34:	4b2a      	ldr	r3, [pc, #168]	; (8018be0 <tcp_receive+0xf20>)
 8018b36:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b38:	4b29      	ldr	r3, [pc, #164]	; (8018be0 <tcp_receive+0xf20>)
 8018b3a:	881b      	ldrh	r3, [r3, #0]
 8018b3c:	461a      	mov	r2, r3
 8018b3e:	4b26      	ldr	r3, [pc, #152]	; (8018bd8 <tcp_receive+0xf18>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	441a      	add	r2, r3
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b48:	6879      	ldr	r1, [r7, #4]
 8018b4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b4c:	440b      	add	r3, r1
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d019      	beq.n	8018b86 <tcp_receive+0xec6>
 8018b52:	4b24      	ldr	r3, [pc, #144]	; (8018be4 <tcp_receive+0xf24>)
 8018b54:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018b58:	4923      	ldr	r1, [pc, #140]	; (8018be8 <tcp_receive+0xf28>)
 8018b5a:	4824      	ldr	r0, [pc, #144]	; (8018bec <tcp_receive+0xf2c>)
 8018b5c:	f003 fcb2 	bl	801c4c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018b60:	e011      	b.n	8018b86 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8018b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	f47f aea4 	bne.w	80188b8 <tcp_receive+0xbf8>
 8018b70:	e00a      	b.n	8018b88 <tcp_receive+0xec8>
                break;
 8018b72:	bf00      	nop
 8018b74:	e008      	b.n	8018b88 <tcp_receive+0xec8>
                break;
 8018b76:	bf00      	nop
 8018b78:	e006      	b.n	8018b88 <tcp_receive+0xec8>
                  break;
 8018b7a:	bf00      	nop
 8018b7c:	e004      	b.n	8018b88 <tcp_receive+0xec8>
                  break;
 8018b7e:	bf00      	nop
 8018b80:	e002      	b.n	8018b88 <tcp_receive+0xec8>
                  break;
 8018b82:	bf00      	nop
 8018b84:	e000      	b.n	8018b88 <tcp_receive+0xec8>
                break;
 8018b86:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f001 fe8b 	bl	801a8a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018b8e:	e003      	b.n	8018b98 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f001 fe87 	bl	801a8a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018b96:	e01a      	b.n	8018bce <tcp_receive+0xf0e>
 8018b98:	e019      	b.n	8018bce <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018b9a:	4b0f      	ldr	r3, [pc, #60]	; (8018bd8 <tcp_receive+0xf18>)
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	db0a      	blt.n	8018bbe <tcp_receive+0xefe>
 8018ba8:	4b0b      	ldr	r3, [pc, #44]	; (8018bd8 <tcp_receive+0xf18>)
 8018baa:	681a      	ldr	r2, [r3, #0]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb0:	6879      	ldr	r1, [r7, #4]
 8018bb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018bb4:	440b      	add	r3, r1
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	3301      	adds	r3, #1
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	dd07      	ble.n	8018bce <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	8b5b      	ldrh	r3, [r3, #26]
 8018bc2:	f043 0302 	orr.w	r3, r3, #2
 8018bc6:	b29a      	uxth	r2, r3
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018bcc:	e7ff      	b.n	8018bce <tcp_receive+0xf0e>
 8018bce:	bf00      	nop
 8018bd0:	3750      	adds	r7, #80	; 0x50
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8018bd6:	bf00      	nop
 8018bd8:	2400798c 	.word	0x2400798c
 8018bdc:	2400796c 	.word	0x2400796c
 8018be0:	24007996 	.word	0x24007996
 8018be4:	08021f8c 	.word	0x08021f8c
 8018be8:	08022354 	.word	0x08022354
 8018bec:	08021ff8 	.word	0x08021ff8

08018bf0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018bf0:	b480      	push	{r7}
 8018bf2:	b083      	sub	sp, #12
 8018bf4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018bf6:	4b15      	ldr	r3, [pc, #84]	; (8018c4c <tcp_get_next_optbyte+0x5c>)
 8018bf8:	881b      	ldrh	r3, [r3, #0]
 8018bfa:	1c5a      	adds	r2, r3, #1
 8018bfc:	b291      	uxth	r1, r2
 8018bfe:	4a13      	ldr	r2, [pc, #76]	; (8018c4c <tcp_get_next_optbyte+0x5c>)
 8018c00:	8011      	strh	r1, [r2, #0]
 8018c02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018c04:	4b12      	ldr	r3, [pc, #72]	; (8018c50 <tcp_get_next_optbyte+0x60>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d004      	beq.n	8018c16 <tcp_get_next_optbyte+0x26>
 8018c0c:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <tcp_get_next_optbyte+0x64>)
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	88fa      	ldrh	r2, [r7, #6]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d208      	bcs.n	8018c28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018c16:	4b10      	ldr	r3, [pc, #64]	; (8018c58 <tcp_get_next_optbyte+0x68>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	3314      	adds	r3, #20
 8018c1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018c1e:	88fb      	ldrh	r3, [r7, #6]
 8018c20:	683a      	ldr	r2, [r7, #0]
 8018c22:	4413      	add	r3, r2
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	e00b      	b.n	8018c40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018c28:	88fb      	ldrh	r3, [r7, #6]
 8018c2a:	b2da      	uxtb	r2, r3
 8018c2c:	4b09      	ldr	r3, [pc, #36]	; (8018c54 <tcp_get_next_optbyte+0x64>)
 8018c2e:	881b      	ldrh	r3, [r3, #0]
 8018c30:	b2db      	uxtb	r3, r3
 8018c32:	1ad3      	subs	r3, r2, r3
 8018c34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018c36:	4b06      	ldr	r3, [pc, #24]	; (8018c50 <tcp_get_next_optbyte+0x60>)
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	797b      	ldrb	r3, [r7, #5]
 8018c3c:	4413      	add	r3, r2
 8018c3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018c40:	4618      	mov	r0, r3
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr
 8018c4c:	24007988 	.word	0x24007988
 8018c50:	24007984 	.word	0x24007984
 8018c54:	24007982 	.word	0x24007982
 8018c58:	2400797c 	.word	0x2400797c

08018c5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b084      	sub	sp, #16
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d106      	bne.n	8018c78 <tcp_parseopt+0x1c>
 8018c6a:	4b32      	ldr	r3, [pc, #200]	; (8018d34 <tcp_parseopt+0xd8>)
 8018c6c:	f240 727d 	movw	r2, #1917	; 0x77d
 8018c70:	4931      	ldr	r1, [pc, #196]	; (8018d38 <tcp_parseopt+0xdc>)
 8018c72:	4832      	ldr	r0, [pc, #200]	; (8018d3c <tcp_parseopt+0xe0>)
 8018c74:	f003 fc26 	bl	801c4c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018c78:	4b31      	ldr	r3, [pc, #196]	; (8018d40 <tcp_parseopt+0xe4>)
 8018c7a:	881b      	ldrh	r3, [r3, #0]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d055      	beq.n	8018d2c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c80:	4b30      	ldr	r3, [pc, #192]	; (8018d44 <tcp_parseopt+0xe8>)
 8018c82:	2200      	movs	r2, #0
 8018c84:	801a      	strh	r2, [r3, #0]
 8018c86:	e045      	b.n	8018d14 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018c88:	f7ff ffb2 	bl	8018bf0 <tcp_get_next_optbyte>
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018c90:	7bfb      	ldrb	r3, [r7, #15]
 8018c92:	2b02      	cmp	r3, #2
 8018c94:	d006      	beq.n	8018ca4 <tcp_parseopt+0x48>
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	dc2b      	bgt.n	8018cf2 <tcp_parseopt+0x96>
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d041      	beq.n	8018d22 <tcp_parseopt+0xc6>
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d127      	bne.n	8018cf2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018ca2:	e037      	b.n	8018d14 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018ca4:	f7ff ffa4 	bl	8018bf0 <tcp_get_next_optbyte>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	2b04      	cmp	r3, #4
 8018cac:	d13b      	bne.n	8018d26 <tcp_parseopt+0xca>
 8018cae:	4b25      	ldr	r3, [pc, #148]	; (8018d44 <tcp_parseopt+0xe8>)
 8018cb0:	881b      	ldrh	r3, [r3, #0]
 8018cb2:	3301      	adds	r3, #1
 8018cb4:	4a22      	ldr	r2, [pc, #136]	; (8018d40 <tcp_parseopt+0xe4>)
 8018cb6:	8812      	ldrh	r2, [r2, #0]
 8018cb8:	4293      	cmp	r3, r2
 8018cba:	da34      	bge.n	8018d26 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018cbc:	f7ff ff98 	bl	8018bf0 <tcp_get_next_optbyte>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	021b      	lsls	r3, r3, #8
 8018cc6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018cc8:	f7ff ff92 	bl	8018bf0 <tcp_get_next_optbyte>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	b29a      	uxth	r2, r3
 8018cd0:	89bb      	ldrh	r3, [r7, #12]
 8018cd2:	4313      	orrs	r3, r2
 8018cd4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018cd6:	89bb      	ldrh	r3, [r7, #12]
 8018cd8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018cdc:	d804      	bhi.n	8018ce8 <tcp_parseopt+0x8c>
 8018cde:	89bb      	ldrh	r3, [r7, #12]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d001      	beq.n	8018ce8 <tcp_parseopt+0x8c>
 8018ce4:	89ba      	ldrh	r2, [r7, #12]
 8018ce6:	e001      	b.n	8018cec <tcp_parseopt+0x90>
 8018ce8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018cf0:	e010      	b.n	8018d14 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018cf2:	f7ff ff7d 	bl	8018bf0 <tcp_get_next_optbyte>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018cfa:	7afb      	ldrb	r3, [r7, #11]
 8018cfc:	2b01      	cmp	r3, #1
 8018cfe:	d914      	bls.n	8018d2a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018d00:	7afb      	ldrb	r3, [r7, #11]
 8018d02:	b29a      	uxth	r2, r3
 8018d04:	4b0f      	ldr	r3, [pc, #60]	; (8018d44 <tcp_parseopt+0xe8>)
 8018d06:	881b      	ldrh	r3, [r3, #0]
 8018d08:	4413      	add	r3, r2
 8018d0a:	b29b      	uxth	r3, r3
 8018d0c:	3b02      	subs	r3, #2
 8018d0e:	b29a      	uxth	r2, r3
 8018d10:	4b0c      	ldr	r3, [pc, #48]	; (8018d44 <tcp_parseopt+0xe8>)
 8018d12:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018d14:	4b0b      	ldr	r3, [pc, #44]	; (8018d44 <tcp_parseopt+0xe8>)
 8018d16:	881a      	ldrh	r2, [r3, #0]
 8018d18:	4b09      	ldr	r3, [pc, #36]	; (8018d40 <tcp_parseopt+0xe4>)
 8018d1a:	881b      	ldrh	r3, [r3, #0]
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d3b3      	bcc.n	8018c88 <tcp_parseopt+0x2c>
 8018d20:	e004      	b.n	8018d2c <tcp_parseopt+0xd0>
          return;
 8018d22:	bf00      	nop
 8018d24:	e002      	b.n	8018d2c <tcp_parseopt+0xd0>
            return;
 8018d26:	bf00      	nop
 8018d28:	e000      	b.n	8018d2c <tcp_parseopt+0xd0>
            return;
 8018d2a:	bf00      	nop
      }
    }
  }
}
 8018d2c:	3710      	adds	r7, #16
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	08021f8c 	.word	0x08021f8c
 8018d38:	08022410 	.word	0x08022410
 8018d3c:	08021ff8 	.word	0x08021ff8
 8018d40:	24007980 	.word	0x24007980
 8018d44:	24007988 	.word	0x24007988

08018d48 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018d48:	b480      	push	{r7}
 8018d4a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018d4c:	4b05      	ldr	r3, [pc, #20]	; (8018d64 <tcp_trigger_input_pcb_close+0x1c>)
 8018d4e:	781b      	ldrb	r3, [r3, #0]
 8018d50:	f043 0310 	orr.w	r3, r3, #16
 8018d54:	b2da      	uxtb	r2, r3
 8018d56:	4b03      	ldr	r3, [pc, #12]	; (8018d64 <tcp_trigger_input_pcb_close+0x1c>)
 8018d58:	701a      	strb	r2, [r3, #0]
}
 8018d5a:	bf00      	nop
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d62:	4770      	bx	lr
 8018d64:	24007999 	.word	0x24007999

08018d68 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b084      	sub	sp, #16
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	60f8      	str	r0, [r7, #12]
 8018d70:	60b9      	str	r1, [r7, #8]
 8018d72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d00a      	beq.n	8018d90 <tcp_route+0x28>
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	7a1b      	ldrb	r3, [r3, #8]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d006      	beq.n	8018d90 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	7a1b      	ldrb	r3, [r3, #8]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7fa fe5c 	bl	8013a44 <netif_get_by_index>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	e003      	b.n	8018d98 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	f7f8 fc53 	bl	801163c <ip4_route>
 8018d96:	4603      	mov	r3, r0
  }
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3710      	adds	r7, #16
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018da0:	b590      	push	{r4, r7, lr}
 8018da2:	b087      	sub	sp, #28
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	60b9      	str	r1, [r7, #8]
 8018daa:	603b      	str	r3, [r7, #0]
 8018dac:	4613      	mov	r3, r2
 8018dae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d105      	bne.n	8018dc2 <tcp_create_segment+0x22>
 8018db6:	4b44      	ldr	r3, [pc, #272]	; (8018ec8 <tcp_create_segment+0x128>)
 8018db8:	22a3      	movs	r2, #163	; 0xa3
 8018dba:	4944      	ldr	r1, [pc, #272]	; (8018ecc <tcp_create_segment+0x12c>)
 8018dbc:	4844      	ldr	r0, [pc, #272]	; (8018ed0 <tcp_create_segment+0x130>)
 8018dbe:	f003 fb81 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d105      	bne.n	8018dd4 <tcp_create_segment+0x34>
 8018dc8:	4b3f      	ldr	r3, [pc, #252]	; (8018ec8 <tcp_create_segment+0x128>)
 8018dca:	22a4      	movs	r2, #164	; 0xa4
 8018dcc:	4941      	ldr	r1, [pc, #260]	; (8018ed4 <tcp_create_segment+0x134>)
 8018dce:	4840      	ldr	r0, [pc, #256]	; (8018ed0 <tcp_create_segment+0x130>)
 8018dd0:	f003 fb78 	bl	801c4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018dd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	b2db      	uxtb	r3, r3
 8018ddc:	f003 0304 	and.w	r3, r3, #4
 8018de0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018de2:	2003      	movs	r0, #3
 8018de4:	f7fa f9fc 	bl	80131e0 <memp_malloc>
 8018de8:	6138      	str	r0, [r7, #16]
 8018dea:	693b      	ldr	r3, [r7, #16]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d104      	bne.n	8018dfa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018df0:	68b8      	ldr	r0, [r7, #8]
 8018df2:	f7fb f9b5 	bl	8014160 <pbuf_free>
    return NULL;
 8018df6:	2300      	movs	r3, #0
 8018df8:	e061      	b.n	8018ebe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018dfa:	693b      	ldr	r3, [r7, #16]
 8018dfc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	2200      	movs	r2, #0
 8018e06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	68ba      	ldr	r2, [r7, #8]
 8018e0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018e0e:	68bb      	ldr	r3, [r7, #8]
 8018e10:	891a      	ldrh	r2, [r3, #8]
 8018e12:	7dfb      	ldrb	r3, [r7, #23]
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d205      	bcs.n	8018e26 <tcp_create_segment+0x86>
 8018e1a:	4b2b      	ldr	r3, [pc, #172]	; (8018ec8 <tcp_create_segment+0x128>)
 8018e1c:	22b0      	movs	r2, #176	; 0xb0
 8018e1e:	492e      	ldr	r1, [pc, #184]	; (8018ed8 <tcp_create_segment+0x138>)
 8018e20:	482b      	ldr	r0, [pc, #172]	; (8018ed0 <tcp_create_segment+0x130>)
 8018e22:	f003 fb4f 	bl	801c4c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	891a      	ldrh	r2, [r3, #8]
 8018e2a:	7dfb      	ldrb	r3, [r7, #23]
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	b29a      	uxth	r2, r3
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018e36:	2114      	movs	r1, #20
 8018e38:	68b8      	ldr	r0, [r7, #8]
 8018e3a:	f7fb f8fb 	bl	8014034 <pbuf_add_header>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d004      	beq.n	8018e4e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018e44:	6938      	ldr	r0, [r7, #16]
 8018e46:	f7fd f800 	bl	8015e4a <tcp_seg_free>
    return NULL;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	e037      	b.n	8018ebe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018e4e:	693b      	ldr	r3, [r7, #16]
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	685a      	ldr	r2, [r3, #4]
 8018e54:	693b      	ldr	r3, [r7, #16]
 8018e56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	8ada      	ldrh	r2, [r3, #22]
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	68dc      	ldr	r4, [r3, #12]
 8018e60:	4610      	mov	r0, r2
 8018e62:	f7f5 fa33 	bl	800e2cc <lwip_htons>
 8018e66:	4603      	mov	r3, r0
 8018e68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	8b1a      	ldrh	r2, [r3, #24]
 8018e6e:	693b      	ldr	r3, [r7, #16]
 8018e70:	68dc      	ldr	r4, [r3, #12]
 8018e72:	4610      	mov	r0, r2
 8018e74:	f7f5 fa2a 	bl	800e2cc <lwip_htons>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018e7c:	693b      	ldr	r3, [r7, #16]
 8018e7e:	68dc      	ldr	r4, [r3, #12]
 8018e80:	6838      	ldr	r0, [r7, #0]
 8018e82:	f7f5 fa38 	bl	800e2f6 <lwip_htonl>
 8018e86:	4603      	mov	r3, r0
 8018e88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018e8a:	7dfb      	ldrb	r3, [r7, #23]
 8018e8c:	089b      	lsrs	r3, r3, #2
 8018e8e:	b2db      	uxtb	r3, r3
 8018e90:	b29b      	uxth	r3, r3
 8018e92:	3305      	adds	r3, #5
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	031b      	lsls	r3, r3, #12
 8018e98:	b29a      	uxth	r2, r3
 8018e9a:	79fb      	ldrb	r3, [r7, #7]
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	4313      	orrs	r3, r2
 8018ea0:	b29a      	uxth	r2, r3
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	68dc      	ldr	r4, [r3, #12]
 8018ea6:	4610      	mov	r0, r2
 8018ea8:	f7f5 fa10 	bl	800e2cc <lwip_htons>
 8018eac:	4603      	mov	r3, r0
 8018eae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	68db      	ldr	r3, [r3, #12]
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	749a      	strb	r2, [r3, #18]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	74da      	strb	r2, [r3, #19]
  return seg;
 8018ebc:	693b      	ldr	r3, [r7, #16]
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	371c      	adds	r7, #28
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd90      	pop	{r4, r7, pc}
 8018ec6:	bf00      	nop
 8018ec8:	0802242c 	.word	0x0802242c
 8018ecc:	08022480 	.word	0x08022480
 8018ed0:	080224a0 	.word	0x080224a0
 8018ed4:	080224c8 	.word	0x080224c8
 8018ed8:	080224ec 	.word	0x080224ec

08018edc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b086      	sub	sp, #24
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	607b      	str	r3, [r7, #4]
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	73fb      	strb	r3, [r7, #15]
 8018ee8:	460b      	mov	r3, r1
 8018eea:	81bb      	strh	r3, [r7, #12]
 8018eec:	4613      	mov	r3, r2
 8018eee:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018ef0:	89bb      	ldrh	r3, [r7, #12]
 8018ef2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d105      	bne.n	8018f06 <tcp_pbuf_prealloc+0x2a>
 8018efa:	4b30      	ldr	r3, [pc, #192]	; (8018fbc <tcp_pbuf_prealloc+0xe0>)
 8018efc:	22e8      	movs	r2, #232	; 0xe8
 8018efe:	4930      	ldr	r1, [pc, #192]	; (8018fc0 <tcp_pbuf_prealloc+0xe4>)
 8018f00:	4830      	ldr	r0, [pc, #192]	; (8018fc4 <tcp_pbuf_prealloc+0xe8>)
 8018f02:	f003 fadf 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018f06:	6a3b      	ldr	r3, [r7, #32]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d105      	bne.n	8018f18 <tcp_pbuf_prealloc+0x3c>
 8018f0c:	4b2b      	ldr	r3, [pc, #172]	; (8018fbc <tcp_pbuf_prealloc+0xe0>)
 8018f0e:	22e9      	movs	r2, #233	; 0xe9
 8018f10:	492d      	ldr	r1, [pc, #180]	; (8018fc8 <tcp_pbuf_prealloc+0xec>)
 8018f12:	482c      	ldr	r0, [pc, #176]	; (8018fc4 <tcp_pbuf_prealloc+0xe8>)
 8018f14:	f003 fad6 	bl	801c4c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018f18:	89ba      	ldrh	r2, [r7, #12]
 8018f1a:	897b      	ldrh	r3, [r7, #10]
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d221      	bcs.n	8018f64 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f24:	f003 0302 	and.w	r3, r3, #2
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d111      	bne.n	8018f50 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018f2c:	6a3b      	ldr	r3, [r7, #32]
 8018f2e:	8b5b      	ldrh	r3, [r3, #26]
 8018f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d115      	bne.n	8018f64 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018f38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d007      	beq.n	8018f50 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018f40:	6a3b      	ldr	r3, [r7, #32]
 8018f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d103      	bne.n	8018f50 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018f48:	6a3b      	ldr	r3, [r7, #32]
 8018f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d009      	beq.n	8018f64 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018f50:	89bb      	ldrh	r3, [r7, #12]
 8018f52:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018f56:	f023 0203 	bic.w	r2, r3, #3
 8018f5a:	897b      	ldrh	r3, [r7, #10]
 8018f5c:	4293      	cmp	r3, r2
 8018f5e:	bf28      	it	cs
 8018f60:	4613      	movcs	r3, r2
 8018f62:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018f64:	8af9      	ldrh	r1, [r7, #22]
 8018f66:	7bfb      	ldrb	r3, [r7, #15]
 8018f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7fa fe13 	bl	8013b98 <pbuf_alloc>
 8018f72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d101      	bne.n	8018f7e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	e019      	b.n	8018fb2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018f7e:	693b      	ldr	r3, [r7, #16]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d006      	beq.n	8018f94 <tcp_pbuf_prealloc+0xb8>
 8018f86:	4b0d      	ldr	r3, [pc, #52]	; (8018fbc <tcp_pbuf_prealloc+0xe0>)
 8018f88:	f240 120b 	movw	r2, #267	; 0x10b
 8018f8c:	490f      	ldr	r1, [pc, #60]	; (8018fcc <tcp_pbuf_prealloc+0xf0>)
 8018f8e:	480d      	ldr	r0, [pc, #52]	; (8018fc4 <tcp_pbuf_prealloc+0xe8>)
 8018f90:	f003 fa98 	bl	801c4c4 <iprintf>
  *oversize = p->len - length;
 8018f94:	693b      	ldr	r3, [r7, #16]
 8018f96:	895a      	ldrh	r2, [r3, #10]
 8018f98:	89bb      	ldrh	r3, [r7, #12]
 8018f9a:	1ad3      	subs	r3, r2, r3
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	89ba      	ldrh	r2, [r7, #12]
 8018fa6:	811a      	strh	r2, [r3, #8]
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	891a      	ldrh	r2, [r3, #8]
 8018fac:	693b      	ldr	r3, [r7, #16]
 8018fae:	815a      	strh	r2, [r3, #10]
  return p;
 8018fb0:	693b      	ldr	r3, [r7, #16]
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3718      	adds	r7, #24
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bd80      	pop	{r7, pc}
 8018fba:	bf00      	nop
 8018fbc:	0802242c 	.word	0x0802242c
 8018fc0:	08022504 	.word	0x08022504
 8018fc4:	080224a0 	.word	0x080224a0
 8018fc8:	08022528 	.word	0x08022528
 8018fcc:	08022548 	.word	0x08022548

08018fd0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	460b      	mov	r3, r1
 8018fda:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d106      	bne.n	8018ff0 <tcp_write_checks+0x20>
 8018fe2:	4b33      	ldr	r3, [pc, #204]	; (80190b0 <tcp_write_checks+0xe0>)
 8018fe4:	f240 1233 	movw	r2, #307	; 0x133
 8018fe8:	4932      	ldr	r1, [pc, #200]	; (80190b4 <tcp_write_checks+0xe4>)
 8018fea:	4833      	ldr	r0, [pc, #204]	; (80190b8 <tcp_write_checks+0xe8>)
 8018fec:	f003 fa6a 	bl	801c4c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	7d1b      	ldrb	r3, [r3, #20]
 8018ff4:	2b04      	cmp	r3, #4
 8018ff6:	d00e      	beq.n	8019016 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018ffc:	2b07      	cmp	r3, #7
 8018ffe:	d00a      	beq.n	8019016 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019004:	2b02      	cmp	r3, #2
 8019006:	d006      	beq.n	8019016 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801900c:	2b03      	cmp	r3, #3
 801900e:	d002      	beq.n	8019016 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019010:	f06f 030a 	mvn.w	r3, #10
 8019014:	e048      	b.n	80190a8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019016:	887b      	ldrh	r3, [r7, #2]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d101      	bne.n	8019020 <tcp_write_checks+0x50>
    return ERR_OK;
 801901c:	2300      	movs	r3, #0
 801901e:	e043      	b.n	80190a8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019026:	887a      	ldrh	r2, [r7, #2]
 8019028:	429a      	cmp	r2, r3
 801902a:	d909      	bls.n	8019040 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8b5b      	ldrh	r3, [r3, #26]
 8019030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019034:	b29a      	uxth	r2, r3
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801903a:	f04f 33ff 	mov.w	r3, #4294967295
 801903e:	e033      	b.n	80190a8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019046:	2b08      	cmp	r3, #8
 8019048:	d909      	bls.n	801905e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	8b5b      	ldrh	r3, [r3, #26]
 801904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019052:	b29a      	uxth	r2, r3
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019058:	f04f 33ff 	mov.w	r3, #4294967295
 801905c:	e024      	b.n	80190a8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019064:	2b00      	cmp	r3, #0
 8019066:	d00f      	beq.n	8019088 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801906c:	2b00      	cmp	r3, #0
 801906e:	d11a      	bne.n	80190a6 <tcp_write_checks+0xd6>
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019074:	2b00      	cmp	r3, #0
 8019076:	d116      	bne.n	80190a6 <tcp_write_checks+0xd6>
 8019078:	4b0d      	ldr	r3, [pc, #52]	; (80190b0 <tcp_write_checks+0xe0>)
 801907a:	f240 1255 	movw	r2, #341	; 0x155
 801907e:	490f      	ldr	r1, [pc, #60]	; (80190bc <tcp_write_checks+0xec>)
 8019080:	480d      	ldr	r0, [pc, #52]	; (80190b8 <tcp_write_checks+0xe8>)
 8019082:	f003 fa1f 	bl	801c4c4 <iprintf>
 8019086:	e00e      	b.n	80190a6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801908c:	2b00      	cmp	r3, #0
 801908e:	d103      	bne.n	8019098 <tcp_write_checks+0xc8>
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019094:	2b00      	cmp	r3, #0
 8019096:	d006      	beq.n	80190a6 <tcp_write_checks+0xd6>
 8019098:	4b05      	ldr	r3, [pc, #20]	; (80190b0 <tcp_write_checks+0xe0>)
 801909a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801909e:	4908      	ldr	r1, [pc, #32]	; (80190c0 <tcp_write_checks+0xf0>)
 80190a0:	4805      	ldr	r0, [pc, #20]	; (80190b8 <tcp_write_checks+0xe8>)
 80190a2:	f003 fa0f 	bl	801c4c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80190a6:	2300      	movs	r3, #0
}
 80190a8:	4618      	mov	r0, r3
 80190aa:	3708      	adds	r7, #8
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd80      	pop	{r7, pc}
 80190b0:	0802242c 	.word	0x0802242c
 80190b4:	0802255c 	.word	0x0802255c
 80190b8:	080224a0 	.word	0x080224a0
 80190bc:	0802257c 	.word	0x0802257c
 80190c0:	080225b8 	.word	0x080225b8

080190c4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80190c4:	b590      	push	{r4, r7, lr}
 80190c6:	b09b      	sub	sp, #108	; 0x6c
 80190c8:	af04      	add	r7, sp, #16
 80190ca:	60f8      	str	r0, [r7, #12]
 80190cc:	60b9      	str	r1, [r7, #8]
 80190ce:	4611      	mov	r1, r2
 80190d0:	461a      	mov	r2, r3
 80190d2:	460b      	mov	r3, r1
 80190d4:	80fb      	strh	r3, [r7, #6]
 80190d6:	4613      	mov	r3, r2
 80190d8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80190da:	2300      	movs	r3, #0
 80190dc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80190de:	2300      	movs	r3, #0
 80190e0:	653b      	str	r3, [r7, #80]	; 0x50
 80190e2:	2300      	movs	r3, #0
 80190e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80190e6:	2300      	movs	r3, #0
 80190e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80190ea:	2300      	movs	r3, #0
 80190ec:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80190ee:	2300      	movs	r3, #0
 80190f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80190f4:	2300      	movs	r3, #0
 80190f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80190fa:	2300      	movs	r3, #0
 80190fc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80190fe:	2300      	movs	r3, #0
 8019100:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019102:	2300      	movs	r3, #0
 8019104:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d109      	bne.n	8019120 <tcp_write+0x5c>
 801910c:	4ba4      	ldr	r3, [pc, #656]	; (80193a0 <tcp_write+0x2dc>)
 801910e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019112:	49a4      	ldr	r1, [pc, #656]	; (80193a4 <tcp_write+0x2e0>)
 8019114:	48a4      	ldr	r0, [pc, #656]	; (80193a8 <tcp_write+0x2e4>)
 8019116:	f003 f9d5 	bl	801c4c4 <iprintf>
 801911a:	f06f 030f 	mvn.w	r3, #15
 801911e:	e32a      	b.n	8019776 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019126:	085b      	lsrs	r3, r3, #1
 8019128:	b29a      	uxth	r2, r3
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801912e:	4293      	cmp	r3, r2
 8019130:	bf28      	it	cs
 8019132:	4613      	movcs	r3, r2
 8019134:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019138:	2b00      	cmp	r3, #0
 801913a:	d102      	bne.n	8019142 <tcp_write+0x7e>
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019140:	e000      	b.n	8019144 <tcp_write+0x80>
 8019142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019144:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d109      	bne.n	8019160 <tcp_write+0x9c>
 801914c:	4b94      	ldr	r3, [pc, #592]	; (80193a0 <tcp_write+0x2dc>)
 801914e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019152:	4996      	ldr	r1, [pc, #600]	; (80193ac <tcp_write+0x2e8>)
 8019154:	4894      	ldr	r0, [pc, #592]	; (80193a8 <tcp_write+0x2e4>)
 8019156:	f003 f9b5 	bl	801c4c4 <iprintf>
 801915a:	f06f 030f 	mvn.w	r3, #15
 801915e:	e30a      	b.n	8019776 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019160:	88fb      	ldrh	r3, [r7, #6]
 8019162:	4619      	mov	r1, r3
 8019164:	68f8      	ldr	r0, [r7, #12]
 8019166:	f7ff ff33 	bl	8018fd0 <tcp_write_checks>
 801916a:	4603      	mov	r3, r0
 801916c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019170:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019174:	2b00      	cmp	r3, #0
 8019176:	d002      	beq.n	801917e <tcp_write+0xba>
    return err;
 8019178:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801917c:	e2fb      	b.n	8019776 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019184:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019188:	2300      	movs	r3, #0
 801918a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019192:	2b00      	cmp	r3, #0
 8019194:	f000 80f6 	beq.w	8019384 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801919c:	653b      	str	r3, [r7, #80]	; 0x50
 801919e:	e002      	b.n	80191a6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80191a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80191a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d1f8      	bne.n	80191a0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80191ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191b0:	7a9b      	ldrb	r3, [r3, #10]
 80191b2:	009b      	lsls	r3, r3, #2
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	f003 0304 	and.w	r3, r3, #4
 80191ba:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80191bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80191be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191c0:	891b      	ldrh	r3, [r3, #8]
 80191c2:	4619      	mov	r1, r3
 80191c4:	8c3b      	ldrh	r3, [r7, #32]
 80191c6:	440b      	add	r3, r1
 80191c8:	429a      	cmp	r2, r3
 80191ca:	da06      	bge.n	80191da <tcp_write+0x116>
 80191cc:	4b74      	ldr	r3, [pc, #464]	; (80193a0 <tcp_write+0x2dc>)
 80191ce:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80191d2:	4977      	ldr	r1, [pc, #476]	; (80193b0 <tcp_write+0x2ec>)
 80191d4:	4874      	ldr	r0, [pc, #464]	; (80193a8 <tcp_write+0x2e4>)
 80191d6:	f003 f975 	bl	801c4c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80191da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191dc:	891a      	ldrh	r2, [r3, #8]
 80191de:	8c3b      	ldrh	r3, [r7, #32]
 80191e0:	4413      	add	r3, r2
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80191e6:	1ad3      	subs	r3, r2, r3
 80191e8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80191f0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80191f2:	8a7b      	ldrh	r3, [r7, #18]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d026      	beq.n	8019246 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80191f8:	8a7b      	ldrh	r3, [r7, #18]
 80191fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d206      	bcs.n	801920e <tcp_write+0x14a>
 8019200:	4b67      	ldr	r3, [pc, #412]	; (80193a0 <tcp_write+0x2dc>)
 8019202:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8019206:	496b      	ldr	r1, [pc, #428]	; (80193b4 <tcp_write+0x2f0>)
 8019208:	4867      	ldr	r0, [pc, #412]	; (80193a8 <tcp_write+0x2e4>)
 801920a:	f003 f95b 	bl	801c4c4 <iprintf>
      seg = last_unsent;
 801920e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019210:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019212:	8a7b      	ldrh	r3, [r7, #18]
 8019214:	88fa      	ldrh	r2, [r7, #6]
 8019216:	4293      	cmp	r3, r2
 8019218:	bf28      	it	cs
 801921a:	4613      	movcs	r3, r2
 801921c:	b29b      	uxth	r3, r3
 801921e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019220:	4293      	cmp	r3, r2
 8019222:	bf28      	it	cs
 8019224:	4613      	movcs	r3, r2
 8019226:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8019228:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801922c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801922e:	4413      	add	r3, r2
 8019230:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019234:	8a7a      	ldrh	r2, [r7, #18]
 8019236:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019238:	1ad3      	subs	r3, r2, r3
 801923a:	b29b      	uxth	r3, r3
 801923c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801923e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019240:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019242:	1ad3      	subs	r3, r2, r3
 8019244:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019246:	8a7b      	ldrh	r3, [r7, #18]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d00b      	beq.n	8019264 <tcp_write+0x1a0>
 801924c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019250:	88fb      	ldrh	r3, [r7, #6]
 8019252:	429a      	cmp	r2, r3
 8019254:	d006      	beq.n	8019264 <tcp_write+0x1a0>
 8019256:	4b52      	ldr	r3, [pc, #328]	; (80193a0 <tcp_write+0x2dc>)
 8019258:	f44f 7200 	mov.w	r2, #512	; 0x200
 801925c:	4956      	ldr	r1, [pc, #344]	; (80193b8 <tcp_write+0x2f4>)
 801925e:	4852      	ldr	r0, [pc, #328]	; (80193a8 <tcp_write+0x2e4>)
 8019260:	f003 f930 	bl	801c4c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019268:	88fb      	ldrh	r3, [r7, #6]
 801926a:	429a      	cmp	r2, r3
 801926c:	f080 8167 	bcs.w	801953e <tcp_write+0x47a>
 8019270:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019272:	2b00      	cmp	r3, #0
 8019274:	f000 8163 	beq.w	801953e <tcp_write+0x47a>
 8019278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801927a:	891b      	ldrh	r3, [r3, #8]
 801927c:	2b00      	cmp	r3, #0
 801927e:	f000 815e 	beq.w	801953e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019282:	88fa      	ldrh	r2, [r7, #6]
 8019284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019288:	1ad2      	subs	r2, r2, r3
 801928a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801928c:	4293      	cmp	r3, r2
 801928e:	bfa8      	it	ge
 8019290:	4613      	movge	r3, r2
 8019292:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019296:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019298:	797b      	ldrb	r3, [r7, #5]
 801929a:	f003 0301 	and.w	r3, r3, #1
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d027      	beq.n	80192f2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80192a2:	f107 0012 	add.w	r0, r7, #18
 80192a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80192a8:	8bf9      	ldrh	r1, [r7, #30]
 80192aa:	2301      	movs	r3, #1
 80192ac:	9302      	str	r3, [sp, #8]
 80192ae:	797b      	ldrb	r3, [r7, #5]
 80192b0:	9301      	str	r3, [sp, #4]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	9300      	str	r3, [sp, #0]
 80192b6:	4603      	mov	r3, r0
 80192b8:	2000      	movs	r0, #0
 80192ba:	f7ff fe0f 	bl	8018edc <tcp_pbuf_prealloc>
 80192be:	6578      	str	r0, [r7, #84]	; 0x54
 80192c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	f000 8225 	beq.w	8019712 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80192c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192ca:	6858      	ldr	r0, [r3, #4]
 80192cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192d0:	68ba      	ldr	r2, [r7, #8]
 80192d2:	4413      	add	r3, r2
 80192d4:	8bfa      	ldrh	r2, [r7, #30]
 80192d6:	4619      	mov	r1, r3
 80192d8:	f002 fc82 	bl	801bbe0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80192dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80192de:	f7fa ffcd 	bl	801427c <pbuf_clen>
 80192e2:	4603      	mov	r3, r0
 80192e4:	461a      	mov	r2, r3
 80192e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80192ea:	4413      	add	r3, r2
 80192ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80192f0:	e041      	b.n	8019376 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80192f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	637b      	str	r3, [r7, #52]	; 0x34
 80192f8:	e002      	b.n	8019300 <tcp_write+0x23c>
 80192fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	637b      	str	r3, [r7, #52]	; 0x34
 8019300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d1f8      	bne.n	80192fa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801930a:	7b1b      	ldrb	r3, [r3, #12]
 801930c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019310:	2b00      	cmp	r3, #0
 8019312:	d115      	bne.n	8019340 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019316:	685b      	ldr	r3, [r3, #4]
 8019318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801931a:	8952      	ldrh	r2, [r2, #10]
 801931c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801931e:	68ba      	ldr	r2, [r7, #8]
 8019320:	429a      	cmp	r2, r3
 8019322:	d10d      	bne.n	8019340 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019328:	2b00      	cmp	r3, #0
 801932a:	d006      	beq.n	801933a <tcp_write+0x276>
 801932c:	4b1c      	ldr	r3, [pc, #112]	; (80193a0 <tcp_write+0x2dc>)
 801932e:	f240 2231 	movw	r2, #561	; 0x231
 8019332:	4922      	ldr	r1, [pc, #136]	; (80193bc <tcp_write+0x2f8>)
 8019334:	481c      	ldr	r0, [pc, #112]	; (80193a8 <tcp_write+0x2e4>)
 8019336:	f003 f8c5 	bl	801c4c4 <iprintf>
          extendlen = seglen;
 801933a:	8bfb      	ldrh	r3, [r7, #30]
 801933c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801933e:	e01a      	b.n	8019376 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019340:	8bfb      	ldrh	r3, [r7, #30]
 8019342:	2201      	movs	r2, #1
 8019344:	4619      	mov	r1, r3
 8019346:	2000      	movs	r0, #0
 8019348:	f7fa fc26 	bl	8013b98 <pbuf_alloc>
 801934c:	6578      	str	r0, [r7, #84]	; 0x54
 801934e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019350:	2b00      	cmp	r3, #0
 8019352:	f000 81e0 	beq.w	8019716 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019356:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801935a:	68ba      	ldr	r2, [r7, #8]
 801935c:	441a      	add	r2, r3
 801935e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019360:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019362:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019364:	f7fa ff8a 	bl	801427c <pbuf_clen>
 8019368:	4603      	mov	r3, r0
 801936a:	461a      	mov	r2, r3
 801936c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019370:	4413      	add	r3, r2
 8019372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801937a:	8bfb      	ldrh	r3, [r7, #30]
 801937c:	4413      	add	r3, r2
 801937e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019382:	e0dc      	b.n	801953e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801938a:	2b00      	cmp	r3, #0
 801938c:	f000 80d7 	beq.w	801953e <tcp_write+0x47a>
 8019390:	4b03      	ldr	r3, [pc, #12]	; (80193a0 <tcp_write+0x2dc>)
 8019392:	f240 224a 	movw	r2, #586	; 0x24a
 8019396:	490a      	ldr	r1, [pc, #40]	; (80193c0 <tcp_write+0x2fc>)
 8019398:	4803      	ldr	r0, [pc, #12]	; (80193a8 <tcp_write+0x2e4>)
 801939a:	f003 f893 	bl	801c4c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801939e:	e0ce      	b.n	801953e <tcp_write+0x47a>
 80193a0:	0802242c 	.word	0x0802242c
 80193a4:	080225ec 	.word	0x080225ec
 80193a8:	080224a0 	.word	0x080224a0
 80193ac:	08022604 	.word	0x08022604
 80193b0:	08022638 	.word	0x08022638
 80193b4:	08022650 	.word	0x08022650
 80193b8:	08022670 	.word	0x08022670
 80193bc:	08022690 	.word	0x08022690
 80193c0:	080226bc 	.word	0x080226bc
    struct pbuf *p;
    u16_t left = len - pos;
 80193c4:	88fa      	ldrh	r2, [r7, #6]
 80193c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193ca:	1ad3      	subs	r3, r2, r3
 80193cc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80193ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193d2:	b29b      	uxth	r3, r3
 80193d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80193d6:	1ad3      	subs	r3, r2, r3
 80193d8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80193da:	8b7a      	ldrh	r2, [r7, #26]
 80193dc:	8bbb      	ldrh	r3, [r7, #28]
 80193de:	4293      	cmp	r3, r2
 80193e0:	bf28      	it	cs
 80193e2:	4613      	movcs	r3, r2
 80193e4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80193e6:	797b      	ldrb	r3, [r7, #5]
 80193e8:	f003 0301 	and.w	r3, r3, #1
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d036      	beq.n	801945e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80193f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193f4:	b29a      	uxth	r2, r3
 80193f6:	8b3b      	ldrh	r3, [r7, #24]
 80193f8:	4413      	add	r3, r2
 80193fa:	b299      	uxth	r1, r3
 80193fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193fe:	2b00      	cmp	r3, #0
 8019400:	bf0c      	ite	eq
 8019402:	2301      	moveq	r3, #1
 8019404:	2300      	movne	r3, #0
 8019406:	b2db      	uxtb	r3, r3
 8019408:	f107 0012 	add.w	r0, r7, #18
 801940c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801940e:	9302      	str	r3, [sp, #8]
 8019410:	797b      	ldrb	r3, [r7, #5]
 8019412:	9301      	str	r3, [sp, #4]
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	9300      	str	r3, [sp, #0]
 8019418:	4603      	mov	r3, r0
 801941a:	2036      	movs	r0, #54	; 0x36
 801941c:	f7ff fd5e 	bl	8018edc <tcp_pbuf_prealloc>
 8019420:	6338      	str	r0, [r7, #48]	; 0x30
 8019422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019424:	2b00      	cmp	r3, #0
 8019426:	f000 8178 	beq.w	801971a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801942c:	895b      	ldrh	r3, [r3, #10]
 801942e:	8b3a      	ldrh	r2, [r7, #24]
 8019430:	429a      	cmp	r2, r3
 8019432:	d906      	bls.n	8019442 <tcp_write+0x37e>
 8019434:	4b8c      	ldr	r3, [pc, #560]	; (8019668 <tcp_write+0x5a4>)
 8019436:	f240 2266 	movw	r2, #614	; 0x266
 801943a:	498c      	ldr	r1, [pc, #560]	; (801966c <tcp_write+0x5a8>)
 801943c:	488c      	ldr	r0, [pc, #560]	; (8019670 <tcp_write+0x5ac>)
 801943e:	f003 f841 	bl	801c4c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019444:	685a      	ldr	r2, [r3, #4]
 8019446:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801944a:	18d0      	adds	r0, r2, r3
 801944c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019450:	68ba      	ldr	r2, [r7, #8]
 8019452:	4413      	add	r3, r2
 8019454:	8b3a      	ldrh	r2, [r7, #24]
 8019456:	4619      	mov	r1, r3
 8019458:	f002 fbc2 	bl	801bbe0 <memcpy>
 801945c:	e02f      	b.n	80194be <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801945e:	8a7b      	ldrh	r3, [r7, #18]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d006      	beq.n	8019472 <tcp_write+0x3ae>
 8019464:	4b80      	ldr	r3, [pc, #512]	; (8019668 <tcp_write+0x5a4>)
 8019466:	f240 2271 	movw	r2, #625	; 0x271
 801946a:	4982      	ldr	r1, [pc, #520]	; (8019674 <tcp_write+0x5b0>)
 801946c:	4880      	ldr	r0, [pc, #512]	; (8019670 <tcp_write+0x5ac>)
 801946e:	f003 f829 	bl	801c4c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019472:	8b3b      	ldrh	r3, [r7, #24]
 8019474:	2201      	movs	r2, #1
 8019476:	4619      	mov	r1, r3
 8019478:	2036      	movs	r0, #54	; 0x36
 801947a:	f7fa fb8d 	bl	8013b98 <pbuf_alloc>
 801947e:	6178      	str	r0, [r7, #20]
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	2b00      	cmp	r3, #0
 8019484:	f000 814b 	beq.w	801971e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019488:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801948c:	68ba      	ldr	r2, [r7, #8]
 801948e:	441a      	add	r2, r3
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019498:	b29b      	uxth	r3, r3
 801949a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801949e:	4619      	mov	r1, r3
 80194a0:	2036      	movs	r0, #54	; 0x36
 80194a2:	f7fa fb79 	bl	8013b98 <pbuf_alloc>
 80194a6:	6338      	str	r0, [r7, #48]	; 0x30
 80194a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d103      	bne.n	80194b6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80194ae:	6978      	ldr	r0, [r7, #20]
 80194b0:	f7fa fe56 	bl	8014160 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80194b4:	e136      	b.n	8019724 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80194b6:	6979      	ldr	r1, [r7, #20]
 80194b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194ba:	f7fa ff1f 	bl	80142fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80194be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194c0:	f7fa fedc 	bl	801427c <pbuf_clen>
 80194c4:	4603      	mov	r3, r0
 80194c6:	461a      	mov	r2, r3
 80194c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194cc:	4413      	add	r3, r2
 80194ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80194d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194d6:	2b09      	cmp	r3, #9
 80194d8:	d903      	bls.n	80194e2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80194da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194dc:	f7fa fe40 	bl	8014160 <pbuf_free>
      goto memerr;
 80194e0:	e120      	b.n	8019724 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80194e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194ea:	441a      	add	r2, r3
 80194ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194f0:	9300      	str	r3, [sp, #0]
 80194f2:	4613      	mov	r3, r2
 80194f4:	2200      	movs	r2, #0
 80194f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80194f8:	68f8      	ldr	r0, [r7, #12]
 80194fa:	f7ff fc51 	bl	8018da0 <tcp_create_segment>
 80194fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019502:	2b00      	cmp	r3, #0
 8019504:	f000 810d 	beq.w	8019722 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801950a:	2b00      	cmp	r3, #0
 801950c:	d102      	bne.n	8019514 <tcp_write+0x450>
      queue = seg;
 801950e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019510:	647b      	str	r3, [r7, #68]	; 0x44
 8019512:	e00c      	b.n	801952e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019516:	2b00      	cmp	r3, #0
 8019518:	d106      	bne.n	8019528 <tcp_write+0x464>
 801951a:	4b53      	ldr	r3, [pc, #332]	; (8019668 <tcp_write+0x5a4>)
 801951c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019520:	4955      	ldr	r1, [pc, #340]	; (8019678 <tcp_write+0x5b4>)
 8019522:	4853      	ldr	r0, [pc, #332]	; (8019670 <tcp_write+0x5ac>)
 8019524:	f002 ffce 	bl	801c4c4 <iprintf>
      prev_seg->next = seg;
 8019528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801952a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801952c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801952e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019530:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019532:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019536:	8b3b      	ldrh	r3, [r7, #24]
 8019538:	4413      	add	r3, r2
 801953a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801953e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019542:	88fb      	ldrh	r3, [r7, #6]
 8019544:	429a      	cmp	r2, r3
 8019546:	f4ff af3d 	bcc.w	80193c4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801954a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801954c:	2b00      	cmp	r3, #0
 801954e:	d02c      	beq.n	80195aa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019556:	e01e      	b.n	8019596 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801955a:	891a      	ldrh	r2, [r3, #8]
 801955c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801955e:	4413      	add	r3, r2
 8019560:	b29a      	uxth	r2, r3
 8019562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019564:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d110      	bne.n	8019590 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019570:	685b      	ldr	r3, [r3, #4]
 8019572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019574:	8952      	ldrh	r2, [r2, #10]
 8019576:	4413      	add	r3, r2
 8019578:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801957a:	68b9      	ldr	r1, [r7, #8]
 801957c:	4618      	mov	r0, r3
 801957e:	f002 fb2f 	bl	801bbe0 <memcpy>
        p->len += oversize_used;
 8019582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019584:	895a      	ldrh	r2, [r3, #10]
 8019586:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019588:	4413      	add	r3, r2
 801958a:	b29a      	uxth	r2, r3
 801958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019598:	2b00      	cmp	r3, #0
 801959a:	d1dd      	bne.n	8019558 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801959c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801959e:	891a      	ldrh	r2, [r3, #8]
 80195a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80195a2:	4413      	add	r3, r2
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80195aa:	8a7a      	ldrh	r2, [r7, #18]
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80195b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d018      	beq.n	80195ea <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80195b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d106      	bne.n	80195cc <tcp_write+0x508>
 80195be:	4b2a      	ldr	r3, [pc, #168]	; (8019668 <tcp_write+0x5a4>)
 80195c0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80195c4:	492d      	ldr	r1, [pc, #180]	; (801967c <tcp_write+0x5b8>)
 80195c6:	482a      	ldr	r0, [pc, #168]	; (8019670 <tcp_write+0x5ac>)
 80195c8:	f002 ff7c 	bl	801c4c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80195cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ce:	685b      	ldr	r3, [r3, #4]
 80195d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7fa fe92 	bl	80142fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80195d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195da:	891a      	ldrh	r2, [r3, #8]
 80195dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195de:	891b      	ldrh	r3, [r3, #8]
 80195e0:	4413      	add	r3, r2
 80195e2:	b29a      	uxth	r2, r3
 80195e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195e6:	811a      	strh	r2, [r3, #8]
 80195e8:	e037      	b.n	801965a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80195ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d034      	beq.n	801965a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80195f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d003      	beq.n	80195fe <tcp_write+0x53a>
 80195f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195f8:	685b      	ldr	r3, [r3, #4]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d106      	bne.n	801960c <tcp_write+0x548>
 80195fe:	4b1a      	ldr	r3, [pc, #104]	; (8019668 <tcp_write+0x5a4>)
 8019600:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019604:	491e      	ldr	r1, [pc, #120]	; (8019680 <tcp_write+0x5bc>)
 8019606:	481a      	ldr	r0, [pc, #104]	; (8019670 <tcp_write+0x5ac>)
 8019608:	f002 ff5c 	bl	801c4c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801960c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801960e:	685b      	ldr	r3, [r3, #4]
 8019610:	62bb      	str	r3, [r7, #40]	; 0x28
 8019612:	e009      	b.n	8019628 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019616:	891a      	ldrh	r2, [r3, #8]
 8019618:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801961a:	4413      	add	r3, r2
 801961c:	b29a      	uxth	r2, r3
 801961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019620:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	62bb      	str	r3, [r7, #40]	; 0x28
 8019628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d1f1      	bne.n	8019614 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019632:	891a      	ldrh	r2, [r3, #8]
 8019634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019636:	4413      	add	r3, r2
 8019638:	b29a      	uxth	r2, r3
 801963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019640:	895a      	ldrh	r2, [r3, #10]
 8019642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019644:	4413      	add	r3, r2
 8019646:	b29a      	uxth	r2, r3
 8019648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801964c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801964e:	891a      	ldrh	r2, [r3, #8]
 8019650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019652:	4413      	add	r3, r2
 8019654:	b29a      	uxth	r2, r3
 8019656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019658:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801965a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801965c:	2b00      	cmp	r3, #0
 801965e:	d111      	bne.n	8019684 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019664:	66da      	str	r2, [r3, #108]	; 0x6c
 8019666:	e010      	b.n	801968a <tcp_write+0x5c6>
 8019668:	0802242c 	.word	0x0802242c
 801966c:	080226ec 	.word	0x080226ec
 8019670:	080224a0 	.word	0x080224a0
 8019674:	0802272c 	.word	0x0802272c
 8019678:	0802273c 	.word	0x0802273c
 801967c:	08022750 	.word	0x08022750
 8019680:	08022788 	.word	0x08022788
  } else {
    last_unsent->next = queue;
 8019684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019688:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801968e:	88fb      	ldrh	r3, [r7, #6]
 8019690:	441a      	add	r2, r3
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801969c:	88fb      	ldrh	r3, [r7, #6]
 801969e:	1ad3      	subs	r3, r2, r3
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80196ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00e      	beq.n	80196da <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d10a      	bne.n	80196da <tcp_write+0x616>
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d106      	bne.n	80196da <tcp_write+0x616>
 80196cc:	4b2c      	ldr	r3, [pc, #176]	; (8019780 <tcp_write+0x6bc>)
 80196ce:	f240 3212 	movw	r2, #786	; 0x312
 80196d2:	492c      	ldr	r1, [pc, #176]	; (8019784 <tcp_write+0x6c0>)
 80196d4:	482c      	ldr	r0, [pc, #176]	; (8019788 <tcp_write+0x6c4>)
 80196d6:	f002 fef5 	bl	801c4c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80196da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d016      	beq.n	801970e <tcp_write+0x64a>
 80196e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196e2:	68db      	ldr	r3, [r3, #12]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d012      	beq.n	801970e <tcp_write+0x64a>
 80196e8:	797b      	ldrb	r3, [r7, #5]
 80196ea:	f003 0302 	and.w	r3, r3, #2
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d10d      	bne.n	801970e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80196f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196f4:	68db      	ldr	r3, [r3, #12]
 80196f6:	899b      	ldrh	r3, [r3, #12]
 80196f8:	b29c      	uxth	r4, r3
 80196fa:	2008      	movs	r0, #8
 80196fc:	f7f4 fde6 	bl	800e2cc <lwip_htons>
 8019700:	4603      	mov	r3, r0
 8019702:	461a      	mov	r2, r3
 8019704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	4322      	orrs	r2, r4
 801970a:	b292      	uxth	r2, r2
 801970c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801970e:	2300      	movs	r3, #0
 8019710:	e031      	b.n	8019776 <tcp_write+0x6b2>
          goto memerr;
 8019712:	bf00      	nop
 8019714:	e006      	b.n	8019724 <tcp_write+0x660>
            goto memerr;
 8019716:	bf00      	nop
 8019718:	e004      	b.n	8019724 <tcp_write+0x660>
        goto memerr;
 801971a:	bf00      	nop
 801971c:	e002      	b.n	8019724 <tcp_write+0x660>
        goto memerr;
 801971e:	bf00      	nop
 8019720:	e000      	b.n	8019724 <tcp_write+0x660>
      goto memerr;
 8019722:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	8b5b      	ldrh	r3, [r3, #26]
 8019728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801972c:	b29a      	uxth	r2, r3
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019734:	2b00      	cmp	r3, #0
 8019736:	d002      	beq.n	801973e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019738:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801973a:	f7fa fd11 	bl	8014160 <pbuf_free>
  }
  if (queue != NULL) {
 801973e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019740:	2b00      	cmp	r3, #0
 8019742:	d002      	beq.n	801974a <tcp_write+0x686>
    tcp_segs_free(queue);
 8019744:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019746:	f7fc fb6b 	bl	8015e20 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019750:	2b00      	cmp	r3, #0
 8019752:	d00e      	beq.n	8019772 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019758:	2b00      	cmp	r3, #0
 801975a:	d10a      	bne.n	8019772 <tcp_write+0x6ae>
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019760:	2b00      	cmp	r3, #0
 8019762:	d106      	bne.n	8019772 <tcp_write+0x6ae>
 8019764:	4b06      	ldr	r3, [pc, #24]	; (8019780 <tcp_write+0x6bc>)
 8019766:	f240 3227 	movw	r2, #807	; 0x327
 801976a:	4906      	ldr	r1, [pc, #24]	; (8019784 <tcp_write+0x6c0>)
 801976c:	4806      	ldr	r0, [pc, #24]	; (8019788 <tcp_write+0x6c4>)
 801976e:	f002 fea9 	bl	801c4c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019776:	4618      	mov	r0, r3
 8019778:	375c      	adds	r7, #92	; 0x5c
 801977a:	46bd      	mov	sp, r7
 801977c:	bd90      	pop	{r4, r7, pc}
 801977e:	bf00      	nop
 8019780:	0802242c 	.word	0x0802242c
 8019784:	080227c0 	.word	0x080227c0
 8019788:	080224a0 	.word	0x080224a0

0801978c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801978c:	b590      	push	{r4, r7, lr}
 801978e:	b08b      	sub	sp, #44	; 0x2c
 8019790:	af02      	add	r7, sp, #8
 8019792:	6078      	str	r0, [r7, #4]
 8019794:	460b      	mov	r3, r1
 8019796:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019798:	2300      	movs	r3, #0
 801979a:	61fb      	str	r3, [r7, #28]
 801979c:	2300      	movs	r3, #0
 801979e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80197a0:	2300      	movs	r3, #0
 80197a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d106      	bne.n	80197b8 <tcp_split_unsent_seg+0x2c>
 80197aa:	4b95      	ldr	r3, [pc, #596]	; (8019a00 <tcp_split_unsent_seg+0x274>)
 80197ac:	f240 324b 	movw	r2, #843	; 0x34b
 80197b0:	4994      	ldr	r1, [pc, #592]	; (8019a04 <tcp_split_unsent_seg+0x278>)
 80197b2:	4895      	ldr	r0, [pc, #596]	; (8019a08 <tcp_split_unsent_seg+0x27c>)
 80197b4:	f002 fe86 	bl	801c4c4 <iprintf>

  useg = pcb->unsent;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80197be:	697b      	ldr	r3, [r7, #20]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d102      	bne.n	80197ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80197c4:	f04f 33ff 	mov.w	r3, #4294967295
 80197c8:	e116      	b.n	80199f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80197ca:	887b      	ldrh	r3, [r7, #2]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d109      	bne.n	80197e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80197d0:	4b8b      	ldr	r3, [pc, #556]	; (8019a00 <tcp_split_unsent_seg+0x274>)
 80197d2:	f240 3253 	movw	r2, #851	; 0x353
 80197d6:	498d      	ldr	r1, [pc, #564]	; (8019a0c <tcp_split_unsent_seg+0x280>)
 80197d8:	488b      	ldr	r0, [pc, #556]	; (8019a08 <tcp_split_unsent_seg+0x27c>)
 80197da:	f002 fe73 	bl	801c4c4 <iprintf>
    return ERR_VAL;
 80197de:	f06f 0305 	mvn.w	r3, #5
 80197e2:	e109      	b.n	80199f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	891b      	ldrh	r3, [r3, #8]
 80197e8:	887a      	ldrh	r2, [r7, #2]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d301      	bcc.n	80197f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80197ee:	2300      	movs	r3, #0
 80197f0:	e102      	b.n	80199f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197f6:	887a      	ldrh	r2, [r7, #2]
 80197f8:	429a      	cmp	r2, r3
 80197fa:	d906      	bls.n	801980a <tcp_split_unsent_seg+0x7e>
 80197fc:	4b80      	ldr	r3, [pc, #512]	; (8019a00 <tcp_split_unsent_seg+0x274>)
 80197fe:	f240 325b 	movw	r2, #859	; 0x35b
 8019802:	4983      	ldr	r1, [pc, #524]	; (8019a10 <tcp_split_unsent_seg+0x284>)
 8019804:	4880      	ldr	r0, [pc, #512]	; (8019a08 <tcp_split_unsent_seg+0x27c>)
 8019806:	f002 fe5d 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	891b      	ldrh	r3, [r3, #8]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d106      	bne.n	8019820 <tcp_split_unsent_seg+0x94>
 8019812:	4b7b      	ldr	r3, [pc, #492]	; (8019a00 <tcp_split_unsent_seg+0x274>)
 8019814:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019818:	497e      	ldr	r1, [pc, #504]	; (8019a14 <tcp_split_unsent_seg+0x288>)
 801981a:	487b      	ldr	r0, [pc, #492]	; (8019a08 <tcp_split_unsent_seg+0x27c>)
 801981c:	f002 fe52 	bl	801c4c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019820:	697b      	ldr	r3, [r7, #20]
 8019822:	7a9b      	ldrb	r3, [r3, #10]
 8019824:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019826:	7bfb      	ldrb	r3, [r7, #15]
 8019828:	009b      	lsls	r3, r3, #2
 801982a:	b2db      	uxtb	r3, r3
 801982c:	f003 0304 	and.w	r3, r3, #4
 8019830:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	891a      	ldrh	r2, [r3, #8]
 8019836:	887b      	ldrh	r3, [r7, #2]
 8019838:	1ad3      	subs	r3, r2, r3
 801983a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801983c:	7bbb      	ldrb	r3, [r7, #14]
 801983e:	b29a      	uxth	r2, r3
 8019840:	89bb      	ldrh	r3, [r7, #12]
 8019842:	4413      	add	r3, r2
 8019844:	b29b      	uxth	r3, r3
 8019846:	f44f 7220 	mov.w	r2, #640	; 0x280
 801984a:	4619      	mov	r1, r3
 801984c:	2036      	movs	r0, #54	; 0x36
 801984e:	f7fa f9a3 	bl	8013b98 <pbuf_alloc>
 8019852:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019854:	693b      	ldr	r3, [r7, #16]
 8019856:	2b00      	cmp	r3, #0
 8019858:	f000 80b7 	beq.w	80199ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	685b      	ldr	r3, [r3, #4]
 8019860:	891a      	ldrh	r2, [r3, #8]
 8019862:	697b      	ldr	r3, [r7, #20]
 8019864:	891b      	ldrh	r3, [r3, #8]
 8019866:	1ad3      	subs	r3, r2, r3
 8019868:	b29a      	uxth	r2, r3
 801986a:	887b      	ldrh	r3, [r7, #2]
 801986c:	4413      	add	r3, r2
 801986e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	6858      	ldr	r0, [r3, #4]
 8019874:	693b      	ldr	r3, [r7, #16]
 8019876:	685a      	ldr	r2, [r3, #4]
 8019878:	7bbb      	ldrb	r3, [r7, #14]
 801987a:	18d1      	adds	r1, r2, r3
 801987c:	897b      	ldrh	r3, [r7, #10]
 801987e:	89ba      	ldrh	r2, [r7, #12]
 8019880:	f7fa fe74 	bl	801456c <pbuf_copy_partial>
 8019884:	4603      	mov	r3, r0
 8019886:	461a      	mov	r2, r3
 8019888:	89bb      	ldrh	r3, [r7, #12]
 801988a:	4293      	cmp	r3, r2
 801988c:	f040 809f 	bne.w	80199ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	68db      	ldr	r3, [r3, #12]
 8019894:	899b      	ldrh	r3, [r3, #12]
 8019896:	b29b      	uxth	r3, r3
 8019898:	4618      	mov	r0, r3
 801989a:	f7f4 fd17 	bl	800e2cc <lwip_htons>
 801989e:	4603      	mov	r3, r0
 80198a0:	b2db      	uxtb	r3, r3
 80198a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80198a8:	2300      	movs	r3, #0
 80198aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80198ac:	7efb      	ldrb	r3, [r7, #27]
 80198ae:	f003 0308 	and.w	r3, r3, #8
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d007      	beq.n	80198c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80198b6:	7efb      	ldrb	r3, [r7, #27]
 80198b8:	f023 0308 	bic.w	r3, r3, #8
 80198bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80198be:	7ebb      	ldrb	r3, [r7, #26]
 80198c0:	f043 0308 	orr.w	r3, r3, #8
 80198c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80198c6:	7efb      	ldrb	r3, [r7, #27]
 80198c8:	f003 0301 	and.w	r3, r3, #1
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d007      	beq.n	80198e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80198d0:	7efb      	ldrb	r3, [r7, #27]
 80198d2:	f023 0301 	bic.w	r3, r3, #1
 80198d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80198d8:	7ebb      	ldrb	r3, [r7, #26]
 80198da:	f043 0301 	orr.w	r3, r3, #1
 80198de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80198e0:	697b      	ldr	r3, [r7, #20]
 80198e2:	68db      	ldr	r3, [r3, #12]
 80198e4:	685b      	ldr	r3, [r3, #4]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7f4 fd05 	bl	800e2f6 <lwip_htonl>
 80198ec:	4602      	mov	r2, r0
 80198ee:	887b      	ldrh	r3, [r7, #2]
 80198f0:	18d1      	adds	r1, r2, r3
 80198f2:	7eba      	ldrb	r2, [r7, #26]
 80198f4:	7bfb      	ldrb	r3, [r7, #15]
 80198f6:	9300      	str	r3, [sp, #0]
 80198f8:	460b      	mov	r3, r1
 80198fa:	6939      	ldr	r1, [r7, #16]
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f7ff fa4f 	bl	8018da0 <tcp_create_segment>
 8019902:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019904:	69fb      	ldr	r3, [r7, #28]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d063      	beq.n	80199d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	4618      	mov	r0, r3
 8019910:	f7fa fcb4 	bl	801427c <pbuf_clen>
 8019914:	4603      	mov	r3, r0
 8019916:	461a      	mov	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801991e:	1a9b      	subs	r3, r3, r2
 8019920:	b29a      	uxth	r2, r3
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	6858      	ldr	r0, [r3, #4]
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	891a      	ldrh	r2, [r3, #8]
 8019932:	89bb      	ldrh	r3, [r7, #12]
 8019934:	1ad3      	subs	r3, r2, r3
 8019936:	b29b      	uxth	r3, r3
 8019938:	4619      	mov	r1, r3
 801993a:	f7fa fa8b 	bl	8013e54 <pbuf_realloc>
  useg->len -= remainder;
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	891a      	ldrh	r2, [r3, #8]
 8019942:	89bb      	ldrh	r3, [r7, #12]
 8019944:	1ad3      	subs	r3, r2, r3
 8019946:	b29a      	uxth	r2, r3
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801994c:	697b      	ldr	r3, [r7, #20]
 801994e:	68db      	ldr	r3, [r3, #12]
 8019950:	899b      	ldrh	r3, [r3, #12]
 8019952:	b29c      	uxth	r4, r3
 8019954:	7efb      	ldrb	r3, [r7, #27]
 8019956:	b29b      	uxth	r3, r3
 8019958:	4618      	mov	r0, r3
 801995a:	f7f4 fcb7 	bl	800e2cc <lwip_htons>
 801995e:	4603      	mov	r3, r0
 8019960:	461a      	mov	r2, r3
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	68db      	ldr	r3, [r3, #12]
 8019966:	4322      	orrs	r2, r4
 8019968:	b292      	uxth	r2, r2
 801996a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801996c:	697b      	ldr	r3, [r7, #20]
 801996e:	685b      	ldr	r3, [r3, #4]
 8019970:	4618      	mov	r0, r3
 8019972:	f7fa fc83 	bl	801427c <pbuf_clen>
 8019976:	4603      	mov	r3, r0
 8019978:	461a      	mov	r2, r3
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019980:	4413      	add	r3, r2
 8019982:	b29a      	uxth	r2, r3
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801998a:	69fb      	ldr	r3, [r7, #28]
 801998c:	685b      	ldr	r3, [r3, #4]
 801998e:	4618      	mov	r0, r3
 8019990:	f7fa fc74 	bl	801427c <pbuf_clen>
 8019994:	4603      	mov	r3, r0
 8019996:	461a      	mov	r2, r3
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801999e:	4413      	add	r3, r2
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	69fb      	ldr	r3, [r7, #28]
 80199ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80199b0:	697b      	ldr	r3, [r7, #20]
 80199b2:	69fa      	ldr	r2, [r7, #28]
 80199b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80199b6:	69fb      	ldr	r3, [r7, #28]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d103      	bne.n	80199c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	2200      	movs	r2, #0
 80199c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80199c6:	2300      	movs	r3, #0
 80199c8:	e016      	b.n	80199f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80199ca:	bf00      	nop
 80199cc:	e002      	b.n	80199d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80199ce:	bf00      	nop
 80199d0:	e000      	b.n	80199d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80199d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80199d4:	69fb      	ldr	r3, [r7, #28]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d006      	beq.n	80199e8 <tcp_split_unsent_seg+0x25c>
 80199da:	4b09      	ldr	r3, [pc, #36]	; (8019a00 <tcp_split_unsent_seg+0x274>)
 80199dc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80199e0:	490d      	ldr	r1, [pc, #52]	; (8019a18 <tcp_split_unsent_seg+0x28c>)
 80199e2:	4809      	ldr	r0, [pc, #36]	; (8019a08 <tcp_split_unsent_seg+0x27c>)
 80199e4:	f002 fd6e 	bl	801c4c4 <iprintf>
  if (p != NULL) {
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d002      	beq.n	80199f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80199ee:	6938      	ldr	r0, [r7, #16]
 80199f0:	f7fa fbb6 	bl	8014160 <pbuf_free>
  }

  return ERR_MEM;
 80199f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3724      	adds	r7, #36	; 0x24
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd90      	pop	{r4, r7, pc}
 8019a00:	0802242c 	.word	0x0802242c
 8019a04:	080227e0 	.word	0x080227e0
 8019a08:	080224a0 	.word	0x080224a0
 8019a0c:	08022804 	.word	0x08022804
 8019a10:	08022828 	.word	0x08022828
 8019a14:	08022838 	.word	0x08022838
 8019a18:	08022848 	.word	0x08022848

08019a1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019a1c:	b590      	push	{r4, r7, lr}
 8019a1e:	b085      	sub	sp, #20
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d106      	bne.n	8019a38 <tcp_send_fin+0x1c>
 8019a2a:	4b21      	ldr	r3, [pc, #132]	; (8019ab0 <tcp_send_fin+0x94>)
 8019a2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019a30:	4920      	ldr	r1, [pc, #128]	; (8019ab4 <tcp_send_fin+0x98>)
 8019a32:	4821      	ldr	r0, [pc, #132]	; (8019ab8 <tcp_send_fin+0x9c>)
 8019a34:	f002 fd46 	bl	801c4c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d02e      	beq.n	8019a9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a44:	60fb      	str	r3, [r7, #12]
 8019a46:	e002      	b.n	8019a4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d1f8      	bne.n	8019a48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	68db      	ldr	r3, [r3, #12]
 8019a5a:	899b      	ldrh	r3, [r3, #12]
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7f4 fc34 	bl	800e2cc <lwip_htons>
 8019a64:	4603      	mov	r3, r0
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	f003 0307 	and.w	r3, r3, #7
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d116      	bne.n	8019a9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	68db      	ldr	r3, [r3, #12]
 8019a74:	899b      	ldrh	r3, [r3, #12]
 8019a76:	b29c      	uxth	r4, r3
 8019a78:	2001      	movs	r0, #1
 8019a7a:	f7f4 fc27 	bl	800e2cc <lwip_htons>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	461a      	mov	r2, r3
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	68db      	ldr	r3, [r3, #12]
 8019a86:	4322      	orrs	r2, r4
 8019a88:	b292      	uxth	r2, r2
 8019a8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	8b5b      	ldrh	r3, [r3, #26]
 8019a90:	f043 0320 	orr.w	r3, r3, #32
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	e004      	b.n	8019aa8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019a9e:	2101      	movs	r1, #1
 8019aa0:	6878      	ldr	r0, [r7, #4]
 8019aa2:	f000 f80b 	bl	8019abc <tcp_enqueue_flags>
 8019aa6:	4603      	mov	r3, r0
}
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	3714      	adds	r7, #20
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd90      	pop	{r4, r7, pc}
 8019ab0:	0802242c 	.word	0x0802242c
 8019ab4:	08022854 	.word	0x08022854
 8019ab8:	080224a0 	.word	0x080224a0

08019abc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b08a      	sub	sp, #40	; 0x28
 8019ac0:	af02      	add	r7, sp, #8
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019ac8:	2300      	movs	r3, #0
 8019aca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019acc:	2300      	movs	r3, #0
 8019ace:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019ad0:	78fb      	ldrb	r3, [r7, #3]
 8019ad2:	f003 0303 	and.w	r3, r3, #3
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d106      	bne.n	8019ae8 <tcp_enqueue_flags+0x2c>
 8019ada:	4b67      	ldr	r3, [pc, #412]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019adc:	f240 4211 	movw	r2, #1041	; 0x411
 8019ae0:	4966      	ldr	r1, [pc, #408]	; (8019c7c <tcp_enqueue_flags+0x1c0>)
 8019ae2:	4867      	ldr	r0, [pc, #412]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019ae4:	f002 fcee 	bl	801c4c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d106      	bne.n	8019afc <tcp_enqueue_flags+0x40>
 8019aee:	4b62      	ldr	r3, [pc, #392]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019af0:	f240 4213 	movw	r2, #1043	; 0x413
 8019af4:	4963      	ldr	r1, [pc, #396]	; (8019c84 <tcp_enqueue_flags+0x1c8>)
 8019af6:	4862      	ldr	r0, [pc, #392]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019af8:	f002 fce4 	bl	801c4c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019afc:	78fb      	ldrb	r3, [r7, #3]
 8019afe:	f003 0302 	and.w	r3, r3, #2
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d001      	beq.n	8019b0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019b06:	2301      	movs	r3, #1
 8019b08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b0a:	7ffb      	ldrb	r3, [r7, #31]
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	f003 0304 	and.w	r3, r3, #4
 8019b14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019b16:	7dfb      	ldrb	r3, [r7, #23]
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b1e:	4619      	mov	r1, r3
 8019b20:	2036      	movs	r0, #54	; 0x36
 8019b22:	f7fa f839 	bl	8013b98 <pbuf_alloc>
 8019b26:	6138      	str	r0, [r7, #16]
 8019b28:	693b      	ldr	r3, [r7, #16]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d109      	bne.n	8019b42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	8b5b      	ldrh	r3, [r3, #26]
 8019b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b36:	b29a      	uxth	r2, r3
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019b40:	e095      	b.n	8019c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	895a      	ldrh	r2, [r3, #10]
 8019b46:	7dfb      	ldrb	r3, [r7, #23]
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d206      	bcs.n	8019b5c <tcp_enqueue_flags+0xa0>
 8019b4e:	4b4a      	ldr	r3, [pc, #296]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019b50:	f240 4239 	movw	r2, #1081	; 0x439
 8019b54:	494c      	ldr	r1, [pc, #304]	; (8019c88 <tcp_enqueue_flags+0x1cc>)
 8019b56:	484a      	ldr	r0, [pc, #296]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019b58:	f002 fcb4 	bl	801c4c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019b60:	78fa      	ldrb	r2, [r7, #3]
 8019b62:	7ffb      	ldrb	r3, [r7, #31]
 8019b64:	9300      	str	r3, [sp, #0]
 8019b66:	460b      	mov	r3, r1
 8019b68:	6939      	ldr	r1, [r7, #16]
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f7ff f918 	bl	8018da0 <tcp_create_segment>
 8019b70:	60f8      	str	r0, [r7, #12]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d109      	bne.n	8019b8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	8b5b      	ldrh	r3, [r3, #26]
 8019b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b80:	b29a      	uxth	r2, r3
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b86:	f04f 33ff 	mov.w	r3, #4294967295
 8019b8a:	e070      	b.n	8019c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	68db      	ldr	r3, [r3, #12]
 8019b90:	f003 0303 	and.w	r3, r3, #3
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d006      	beq.n	8019ba6 <tcp_enqueue_flags+0xea>
 8019b98:	4b37      	ldr	r3, [pc, #220]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019b9a:	f240 4242 	movw	r2, #1090	; 0x442
 8019b9e:	493b      	ldr	r1, [pc, #236]	; (8019c8c <tcp_enqueue_flags+0x1d0>)
 8019ba0:	4837      	ldr	r0, [pc, #220]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019ba2:	f002 fc8f 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	891b      	ldrh	r3, [r3, #8]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d006      	beq.n	8019bbc <tcp_enqueue_flags+0x100>
 8019bae:	4b32      	ldr	r3, [pc, #200]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019bb0:	f240 4243 	movw	r2, #1091	; 0x443
 8019bb4:	4936      	ldr	r1, [pc, #216]	; (8019c90 <tcp_enqueue_flags+0x1d4>)
 8019bb6:	4832      	ldr	r0, [pc, #200]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019bb8:	f002 fc84 	bl	801c4c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d103      	bne.n	8019bcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	68fa      	ldr	r2, [r7, #12]
 8019bc8:	66da      	str	r2, [r3, #108]	; 0x6c
 8019bca:	e00d      	b.n	8019be8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bd0:	61bb      	str	r3, [r7, #24]
 8019bd2:	e002      	b.n	8019bda <tcp_enqueue_flags+0x11e>
 8019bd4:	69bb      	ldr	r3, [r7, #24]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	61bb      	str	r3, [r7, #24]
 8019bda:	69bb      	ldr	r3, [r7, #24]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d1f8      	bne.n	8019bd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019be2:	69bb      	ldr	r3, [r7, #24]
 8019be4:	68fa      	ldr	r2, [r7, #12]
 8019be6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	2200      	movs	r2, #0
 8019bec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019bf0:	78fb      	ldrb	r3, [r7, #3]
 8019bf2:	f003 0302 	and.w	r3, r3, #2
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d104      	bne.n	8019c04 <tcp_enqueue_flags+0x148>
 8019bfa:	78fb      	ldrb	r3, [r7, #3]
 8019bfc:	f003 0301 	and.w	r3, r3, #1
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d004      	beq.n	8019c0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c08:	1c5a      	adds	r2, r3, #1
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019c0e:	78fb      	ldrb	r3, [r7, #3]
 8019c10:	f003 0301 	and.w	r3, r3, #1
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d006      	beq.n	8019c26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	8b5b      	ldrh	r3, [r3, #26]
 8019c1c:	f043 0320 	orr.w	r3, r3, #32
 8019c20:	b29a      	uxth	r2, r3
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	685b      	ldr	r3, [r3, #4]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7fa fb26 	bl	801427c <pbuf_clen>
 8019c30:	4603      	mov	r3, r0
 8019c32:	461a      	mov	r2, r3
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c3a:	4413      	add	r3, r2
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d00e      	beq.n	8019c6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d10a      	bne.n	8019c6c <tcp_enqueue_flags+0x1b0>
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d106      	bne.n	8019c6c <tcp_enqueue_flags+0x1b0>
 8019c5e:	4b06      	ldr	r3, [pc, #24]	; (8019c78 <tcp_enqueue_flags+0x1bc>)
 8019c60:	f240 4265 	movw	r2, #1125	; 0x465
 8019c64:	490b      	ldr	r1, [pc, #44]	; (8019c94 <tcp_enqueue_flags+0x1d8>)
 8019c66:	4806      	ldr	r0, [pc, #24]	; (8019c80 <tcp_enqueue_flags+0x1c4>)
 8019c68:	f002 fc2c 	bl	801c4c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019c6c:	2300      	movs	r3, #0
}
 8019c6e:	4618      	mov	r0, r3
 8019c70:	3720      	adds	r7, #32
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}
 8019c76:	bf00      	nop
 8019c78:	0802242c 	.word	0x0802242c
 8019c7c:	08022870 	.word	0x08022870
 8019c80:	080224a0 	.word	0x080224a0
 8019c84:	080228c8 	.word	0x080228c8
 8019c88:	080228e8 	.word	0x080228e8
 8019c8c:	08022924 	.word	0x08022924
 8019c90:	0802293c 	.word	0x0802293c
 8019c94:	08022968 	.word	0x08022968

08019c98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019c98:	b5b0      	push	{r4, r5, r7, lr}
 8019c9a:	b08a      	sub	sp, #40	; 0x28
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d106      	bne.n	8019cb4 <tcp_output+0x1c>
 8019ca6:	4b8a      	ldr	r3, [pc, #552]	; (8019ed0 <tcp_output+0x238>)
 8019ca8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019cac:	4989      	ldr	r1, [pc, #548]	; (8019ed4 <tcp_output+0x23c>)
 8019cae:	488a      	ldr	r0, [pc, #552]	; (8019ed8 <tcp_output+0x240>)
 8019cb0:	f002 fc08 	bl	801c4c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	7d1b      	ldrb	r3, [r3, #20]
 8019cb8:	2b01      	cmp	r3, #1
 8019cba:	d106      	bne.n	8019cca <tcp_output+0x32>
 8019cbc:	4b84      	ldr	r3, [pc, #528]	; (8019ed0 <tcp_output+0x238>)
 8019cbe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019cc2:	4986      	ldr	r1, [pc, #536]	; (8019edc <tcp_output+0x244>)
 8019cc4:	4884      	ldr	r0, [pc, #528]	; (8019ed8 <tcp_output+0x240>)
 8019cc6:	f002 fbfd 	bl	801c4c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019cca:	4b85      	ldr	r3, [pc, #532]	; (8019ee0 <tcp_output+0x248>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	687a      	ldr	r2, [r7, #4]
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	d101      	bne.n	8019cd8 <tcp_output+0x40>
    return ERR_OK;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	e1ce      	b.n	801a076 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019ce4:	4293      	cmp	r3, r2
 8019ce6:	bf28      	it	cs
 8019ce8:	4613      	movcs	r3, r2
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d10b      	bne.n	8019d12 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	8b5b      	ldrh	r3, [r3, #26]
 8019cfe:	f003 0302 	and.w	r3, r3, #2
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f000 81aa 	beq.w	801a05c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019d08:	6878      	ldr	r0, [r7, #4]
 8019d0a:	f000 fdcb 	bl	801a8a4 <tcp_send_empty_ack>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	e1b1      	b.n	801a076 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019d12:	6879      	ldr	r1, [r7, #4]
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	3304      	adds	r3, #4
 8019d18:	461a      	mov	r2, r3
 8019d1a:	6878      	ldr	r0, [r7, #4]
 8019d1c:	f7ff f824 	bl	8018d68 <tcp_route>
 8019d20:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d102      	bne.n	8019d2e <tcp_output+0x96>
    return ERR_RTE;
 8019d28:	f06f 0303 	mvn.w	r3, #3
 8019d2c:	e1a3      	b.n	801a076 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d003      	beq.n	8019d3c <tcp_output+0xa4>
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d111      	bne.n	8019d60 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019d3c:	697b      	ldr	r3, [r7, #20]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d002      	beq.n	8019d48 <tcp_output+0xb0>
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	3304      	adds	r3, #4
 8019d46:	e000      	b.n	8019d4a <tcp_output+0xb2>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019d4c:	693b      	ldr	r3, [r7, #16]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d102      	bne.n	8019d58 <tcp_output+0xc0>
      return ERR_RTE;
 8019d52:	f06f 0303 	mvn.w	r3, #3
 8019d56:	e18e      	b.n	801a076 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019d58:	693b      	ldr	r3, [r7, #16]
 8019d5a:	681a      	ldr	r2, [r3, #0]
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d62:	68db      	ldr	r3, [r3, #12]
 8019d64:	685b      	ldr	r3, [r3, #4]
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7f4 fac5 	bl	800e2f6 <lwip_htonl>
 8019d6c:	4602      	mov	r2, r0
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d72:	1ad3      	subs	r3, r2, r3
 8019d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d76:	8912      	ldrh	r2, [r2, #8]
 8019d78:	4413      	add	r3, r2
 8019d7a:	69ba      	ldr	r2, [r7, #24]
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d227      	bcs.n	8019dd0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d86:	461a      	mov	r2, r3
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	4293      	cmp	r3, r2
 8019d8c:	d114      	bne.n	8019db8 <tcp_output+0x120>
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d110      	bne.n	8019db8 <tcp_output+0x120>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d10b      	bne.n	8019db8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2200      	movs	r2, #0
 8019da4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2201      	movs	r2, #1
 8019dac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2200      	movs	r2, #0
 8019db4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	8b5b      	ldrh	r3, [r3, #26]
 8019dbc:	f003 0302 	and.w	r3, r3, #2
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	f000 814d 	beq.w	801a060 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019dc6:	6878      	ldr	r0, [r7, #4]
 8019dc8:	f000 fd6c 	bl	801a8a4 <tcp_send_empty_ack>
 8019dcc:	4603      	mov	r3, r0
 8019dce:	e152      	b.n	801a076 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ddc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019dde:	6a3b      	ldr	r3, [r7, #32]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	f000 811c 	beq.w	801a01e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019de6:	e002      	b.n	8019dee <tcp_output+0x156>
 8019de8:	6a3b      	ldr	r3, [r7, #32]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	623b      	str	r3, [r7, #32]
 8019dee:	6a3b      	ldr	r3, [r7, #32]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d1f8      	bne.n	8019de8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019df6:	e112      	b.n	801a01e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	899b      	ldrh	r3, [r3, #12]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7f4 fa63 	bl	800e2cc <lwip_htons>
 8019e06:	4603      	mov	r3, r0
 8019e08:	b2db      	uxtb	r3, r3
 8019e0a:	f003 0304 	and.w	r3, r3, #4
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d006      	beq.n	8019e20 <tcp_output+0x188>
 8019e12:	4b2f      	ldr	r3, [pc, #188]	; (8019ed0 <tcp_output+0x238>)
 8019e14:	f240 5236 	movw	r2, #1334	; 0x536
 8019e18:	4932      	ldr	r1, [pc, #200]	; (8019ee4 <tcp_output+0x24c>)
 8019e1a:	482f      	ldr	r0, [pc, #188]	; (8019ed8 <tcp_output+0x240>)
 8019e1c:	f002 fb52 	bl	801c4c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d01f      	beq.n	8019e68 <tcp_output+0x1d0>
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	8b5b      	ldrh	r3, [r3, #26]
 8019e2c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d119      	bne.n	8019e68 <tcp_output+0x1d0>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d00b      	beq.n	8019e54 <tcp_output+0x1bc>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d110      	bne.n	8019e68 <tcp_output+0x1d0>
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e4a:	891a      	ldrh	r2, [r3, #8]
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d209      	bcs.n	8019e68 <tcp_output+0x1d0>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d004      	beq.n	8019e68 <tcp_output+0x1d0>
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e64:	2b08      	cmp	r3, #8
 8019e66:	d901      	bls.n	8019e6c <tcp_output+0x1d4>
 8019e68:	2301      	movs	r3, #1
 8019e6a:	e000      	b.n	8019e6e <tcp_output+0x1d6>
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d106      	bne.n	8019e80 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	8b5b      	ldrh	r3, [r3, #26]
 8019e76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	f000 80e4 	beq.w	801a048 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	7d1b      	ldrb	r3, [r3, #20]
 8019e84:	2b02      	cmp	r3, #2
 8019e86:	d00d      	beq.n	8019ea4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e8a:	68db      	ldr	r3, [r3, #12]
 8019e8c:	899b      	ldrh	r3, [r3, #12]
 8019e8e:	b29c      	uxth	r4, r3
 8019e90:	2010      	movs	r0, #16
 8019e92:	f7f4 fa1b 	bl	800e2cc <lwip_htons>
 8019e96:	4603      	mov	r3, r0
 8019e98:	461a      	mov	r2, r3
 8019e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9c:	68db      	ldr	r3, [r3, #12]
 8019e9e:	4322      	orrs	r2, r4
 8019ea0:	b292      	uxth	r2, r2
 8019ea2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019ea4:	697a      	ldr	r2, [r7, #20]
 8019ea6:	6879      	ldr	r1, [r7, #4]
 8019ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019eaa:	f000 f909 	bl	801a0c0 <tcp_output_segment>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d016      	beq.n	8019ee8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	8b5b      	ldrh	r3, [r3, #26]
 8019ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	835a      	strh	r2, [r3, #26]
      return err;
 8019ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ecc:	e0d3      	b.n	801a076 <tcp_output+0x3de>
 8019ece:	bf00      	nop
 8019ed0:	0802242c 	.word	0x0802242c
 8019ed4:	08022990 	.word	0x08022990
 8019ed8:	080224a0 	.word	0x080224a0
 8019edc:	080229a8 	.word	0x080229a8
 8019ee0:	240079a0 	.word	0x240079a0
 8019ee4:	080229d0 	.word	0x080229d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eea:	681a      	ldr	r2, [r3, #0]
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	7d1b      	ldrb	r3, [r3, #20]
 8019ef4:	2b02      	cmp	r3, #2
 8019ef6:	d006      	beq.n	8019f06 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	8b5b      	ldrh	r3, [r3, #26]
 8019efc:	f023 0303 	bic.w	r3, r3, #3
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f08:	68db      	ldr	r3, [r3, #12]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7f4 f9f2 	bl	800e2f6 <lwip_htonl>
 8019f12:	4604      	mov	r4, r0
 8019f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f16:	891b      	ldrh	r3, [r3, #8]
 8019f18:	461d      	mov	r5, r3
 8019f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1c:	68db      	ldr	r3, [r3, #12]
 8019f1e:	899b      	ldrh	r3, [r3, #12]
 8019f20:	b29b      	uxth	r3, r3
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7f4 f9d2 	bl	800e2cc <lwip_htons>
 8019f28:	4603      	mov	r3, r0
 8019f2a:	b2db      	uxtb	r3, r3
 8019f2c:	f003 0303 	and.w	r3, r3, #3
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d001      	beq.n	8019f38 <tcp_output+0x2a0>
 8019f34:	2301      	movs	r3, #1
 8019f36:	e000      	b.n	8019f3a <tcp_output+0x2a2>
 8019f38:	2300      	movs	r3, #0
 8019f3a:	442b      	add	r3, r5
 8019f3c:	4423      	add	r3, r4
 8019f3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f44:	68bb      	ldr	r3, [r7, #8]
 8019f46:	1ad3      	subs	r3, r2, r3
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	da02      	bge.n	8019f52 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	68ba      	ldr	r2, [r7, #8]
 8019f50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f54:	891b      	ldrh	r3, [r3, #8]
 8019f56:	461c      	mov	r4, r3
 8019f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5a:	68db      	ldr	r3, [r3, #12]
 8019f5c:	899b      	ldrh	r3, [r3, #12]
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	4618      	mov	r0, r3
 8019f62:	f7f4 f9b3 	bl	800e2cc <lwip_htons>
 8019f66:	4603      	mov	r3, r0
 8019f68:	b2db      	uxtb	r3, r3
 8019f6a:	f003 0303 	and.w	r3, r3, #3
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d001      	beq.n	8019f76 <tcp_output+0x2de>
 8019f72:	2301      	movs	r3, #1
 8019f74:	e000      	b.n	8019f78 <tcp_output+0x2e0>
 8019f76:	2300      	movs	r3, #0
 8019f78:	4423      	add	r3, r4
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d049      	beq.n	801a012 <tcp_output+0x37a>
      seg->next = NULL;
 8019f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f80:	2200      	movs	r2, #0
 8019f82:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d105      	bne.n	8019f98 <tcp_output+0x300>
        pcb->unacked = seg;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f90:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f94:	623b      	str	r3, [r7, #32]
 8019f96:	e03f      	b.n	801a018 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f7f4 f9a9 	bl	800e2f6 <lwip_htonl>
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	6a3b      	ldr	r3, [r7, #32]
 8019fa8:	68db      	ldr	r3, [r3, #12]
 8019faa:	685b      	ldr	r3, [r3, #4]
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7f4 f9a2 	bl	800e2f6 <lwip_htonl>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	1ae3      	subs	r3, r4, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	da24      	bge.n	801a004 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	3370      	adds	r3, #112	; 0x70
 8019fbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019fc0:	e002      	b.n	8019fc8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019fc2:	69fb      	ldr	r3, [r7, #28]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019fc8:	69fb      	ldr	r3, [r7, #28]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d011      	beq.n	8019ff4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	68db      	ldr	r3, [r3, #12]
 8019fd6:	685b      	ldr	r3, [r3, #4]
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f7f4 f98c 	bl	800e2f6 <lwip_htonl>
 8019fde:	4604      	mov	r4, r0
 8019fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe2:	68db      	ldr	r3, [r3, #12]
 8019fe4:	685b      	ldr	r3, [r3, #4]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f7f4 f985 	bl	800e2f6 <lwip_htonl>
 8019fec:	4603      	mov	r3, r0
 8019fee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	dbe6      	blt.n	8019fc2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019ff4:	69fb      	ldr	r3, [r7, #28]
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019ffc:	69fb      	ldr	r3, [r7, #28]
 8019ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a000:	601a      	str	r2, [r3, #0]
 801a002:	e009      	b.n	801a018 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a004:	6a3b      	ldr	r3, [r7, #32]
 801a006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a008:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a00a:	6a3b      	ldr	r3, [r7, #32]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	623b      	str	r3, [r7, #32]
 801a010:	e002      	b.n	801a018 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a014:	f7fb ff19 	bl	8015e4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a01c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a020:	2b00      	cmp	r3, #0
 801a022:	d012      	beq.n	801a04a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a026:	68db      	ldr	r3, [r3, #12]
 801a028:	685b      	ldr	r3, [r3, #4]
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7f4 f963 	bl	800e2f6 <lwip_htonl>
 801a030:	4602      	mov	r2, r0
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a036:	1ad3      	subs	r3, r2, r3
 801a038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a03a:	8912      	ldrh	r2, [r2, #8]
 801a03c:	4413      	add	r3, r2
  while (seg != NULL &&
 801a03e:	69ba      	ldr	r2, [r7, #24]
 801a040:	429a      	cmp	r2, r3
 801a042:	f4bf aed9 	bcs.w	8019df8 <tcp_output+0x160>
 801a046:	e000      	b.n	801a04a <tcp_output+0x3b2>
      break;
 801a048:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d108      	bne.n	801a064 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	2200      	movs	r2, #0
 801a056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a05a:	e004      	b.n	801a066 <tcp_output+0x3ce>
    goto output_done;
 801a05c:	bf00      	nop
 801a05e:	e002      	b.n	801a066 <tcp_output+0x3ce>
    goto output_done;
 801a060:	bf00      	nop
 801a062:	e000      	b.n	801a066 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a064:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	8b5b      	ldrh	r3, [r3, #26]
 801a06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a06e:	b29a      	uxth	r2, r3
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a074:	2300      	movs	r3, #0
}
 801a076:	4618      	mov	r0, r3
 801a078:	3728      	adds	r7, #40	; 0x28
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bdb0      	pop	{r4, r5, r7, pc}
 801a07e:	bf00      	nop

0801a080 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b082      	sub	sp, #8
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d106      	bne.n	801a09c <tcp_output_segment_busy+0x1c>
 801a08e:	4b09      	ldr	r3, [pc, #36]	; (801a0b4 <tcp_output_segment_busy+0x34>)
 801a090:	f240 529a 	movw	r2, #1434	; 0x59a
 801a094:	4908      	ldr	r1, [pc, #32]	; (801a0b8 <tcp_output_segment_busy+0x38>)
 801a096:	4809      	ldr	r0, [pc, #36]	; (801a0bc <tcp_output_segment_busy+0x3c>)
 801a098:	f002 fa14 	bl	801c4c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	685b      	ldr	r3, [r3, #4]
 801a0a0:	7b9b      	ldrb	r3, [r3, #14]
 801a0a2:	2b01      	cmp	r3, #1
 801a0a4:	d001      	beq.n	801a0aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a0a6:	2301      	movs	r3, #1
 801a0a8:	e000      	b.n	801a0ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a0aa:	2300      	movs	r3, #0
}
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	3708      	adds	r7, #8
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}
 801a0b4:	0802242c 	.word	0x0802242c
 801a0b8:	080229e8 	.word	0x080229e8
 801a0bc:	080224a0 	.word	0x080224a0

0801a0c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a0c0:	b5b0      	push	{r4, r5, r7, lr}
 801a0c2:	b08c      	sub	sp, #48	; 0x30
 801a0c4:	af04      	add	r7, sp, #16
 801a0c6:	60f8      	str	r0, [r7, #12]
 801a0c8:	60b9      	str	r1, [r7, #8]
 801a0ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d106      	bne.n	801a0e0 <tcp_output_segment+0x20>
 801a0d2:	4b63      	ldr	r3, [pc, #396]	; (801a260 <tcp_output_segment+0x1a0>)
 801a0d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a0d8:	4962      	ldr	r1, [pc, #392]	; (801a264 <tcp_output_segment+0x1a4>)
 801a0da:	4863      	ldr	r0, [pc, #396]	; (801a268 <tcp_output_segment+0x1a8>)
 801a0dc:	f002 f9f2 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d106      	bne.n	801a0f4 <tcp_output_segment+0x34>
 801a0e6:	4b5e      	ldr	r3, [pc, #376]	; (801a260 <tcp_output_segment+0x1a0>)
 801a0e8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a0ec:	495f      	ldr	r1, [pc, #380]	; (801a26c <tcp_output_segment+0x1ac>)
 801a0ee:	485e      	ldr	r0, [pc, #376]	; (801a268 <tcp_output_segment+0x1a8>)
 801a0f0:	f002 f9e8 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d106      	bne.n	801a108 <tcp_output_segment+0x48>
 801a0fa:	4b59      	ldr	r3, [pc, #356]	; (801a260 <tcp_output_segment+0x1a0>)
 801a0fc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a100:	495b      	ldr	r1, [pc, #364]	; (801a270 <tcp_output_segment+0x1b0>)
 801a102:	4859      	ldr	r0, [pc, #356]	; (801a268 <tcp_output_segment+0x1a8>)
 801a104:	f002 f9de 	bl	801c4c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a108:	68f8      	ldr	r0, [r7, #12]
 801a10a:	f7ff ffb9 	bl	801a080 <tcp_output_segment_busy>
 801a10e:	4603      	mov	r3, r0
 801a110:	2b00      	cmp	r3, #0
 801a112:	d001      	beq.n	801a118 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a114:	2300      	movs	r3, #0
 801a116:	e09f      	b.n	801a258 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a118:	68bb      	ldr	r3, [r7, #8]
 801a11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	68dc      	ldr	r4, [r3, #12]
 801a120:	4610      	mov	r0, r2
 801a122:	f7f4 f8e8 	bl	800e2f6 <lwip_htonl>
 801a126:	4603      	mov	r3, r0
 801a128:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	68dc      	ldr	r4, [r3, #12]
 801a132:	4610      	mov	r0, r2
 801a134:	f7f4 f8ca 	bl	800e2cc <lwip_htons>
 801a138:	4603      	mov	r3, r0
 801a13a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a140:	68ba      	ldr	r2, [r7, #8]
 801a142:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a144:	441a      	add	r2, r3
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	68db      	ldr	r3, [r3, #12]
 801a14e:	3314      	adds	r3, #20
 801a150:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	7a9b      	ldrb	r3, [r3, #10]
 801a156:	f003 0301 	and.w	r3, r3, #1
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d015      	beq.n	801a18a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a15e:	68bb      	ldr	r3, [r7, #8]
 801a160:	3304      	adds	r3, #4
 801a162:	461a      	mov	r2, r3
 801a164:	6879      	ldr	r1, [r7, #4]
 801a166:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a16a:	f7fc fa33 	bl	80165d4 <tcp_eff_send_mss_netif>
 801a16e:	4603      	mov	r3, r0
 801a170:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a172:	8b7b      	ldrh	r3, [r7, #26]
 801a174:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f4 f8bc 	bl	800e2f6 <lwip_htonl>
 801a17e:	4602      	mov	r2, r0
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	3304      	adds	r3, #4
 801a188:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a190:	2b00      	cmp	r3, #0
 801a192:	da02      	bge.n	801a19a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	2200      	movs	r2, #0
 801a198:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d10c      	bne.n	801a1bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a1a2:	4b34      	ldr	r3, [pc, #208]	; (801a274 <tcp_output_segment+0x1b4>)
 801a1a4:	681a      	ldr	r2, [r3, #0]
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	685b      	ldr	r3, [r3, #4]
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7f4 f8a0 	bl	800e2f6 <lwip_htonl>
 801a1b6:	4602      	mov	r2, r0
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	68da      	ldr	r2, [r3, #12]
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	1ad3      	subs	r3, r2, r3
 801a1c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	685b      	ldr	r3, [r3, #4]
 801a1ce:	8959      	ldrh	r1, [r3, #10]
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	8b3a      	ldrh	r2, [r7, #24]
 801a1d6:	1a8a      	subs	r2, r1, r2
 801a1d8:	b292      	uxth	r2, r2
 801a1da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	8919      	ldrh	r1, [r3, #8]
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	685b      	ldr	r3, [r3, #4]
 801a1e6:	8b3a      	ldrh	r2, [r7, #24]
 801a1e8:	1a8a      	subs	r2, r1, r2
 801a1ea:	b292      	uxth	r2, r2
 801a1ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	68fa      	ldr	r2, [r7, #12]
 801a1f4:	68d2      	ldr	r2, [r2, #12]
 801a1f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	68db      	ldr	r3, [r3, #12]
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	741a      	strb	r2, [r3, #16]
 801a200:	2200      	movs	r2, #0
 801a202:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	68db      	ldr	r3, [r3, #12]
 801a208:	f103 0214 	add.w	r2, r3, #20
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	7a9b      	ldrb	r3, [r3, #10]
 801a210:	009b      	lsls	r3, r3, #2
 801a212:	f003 0304 	and.w	r3, r3, #4
 801a216:	4413      	add	r3, r2
 801a218:	69fa      	ldr	r2, [r7, #28]
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d006      	beq.n	801a22c <tcp_output_segment+0x16c>
 801a21e:	4b10      	ldr	r3, [pc, #64]	; (801a260 <tcp_output_segment+0x1a0>)
 801a220:	f240 621c 	movw	r2, #1564	; 0x61c
 801a224:	4914      	ldr	r1, [pc, #80]	; (801a278 <tcp_output_segment+0x1b8>)
 801a226:	4810      	ldr	r0, [pc, #64]	; (801a268 <tcp_output_segment+0x1a8>)
 801a228:	f002 f94c 	bl	801c4c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	6858      	ldr	r0, [r3, #4]
 801a230:	68b9      	ldr	r1, [r7, #8]
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	1d1c      	adds	r4, r3, #4
 801a236:	68bb      	ldr	r3, [r7, #8]
 801a238:	7add      	ldrb	r5, [r3, #11]
 801a23a:	68bb      	ldr	r3, [r7, #8]
 801a23c:	7a9b      	ldrb	r3, [r3, #10]
 801a23e:	687a      	ldr	r2, [r7, #4]
 801a240:	9202      	str	r2, [sp, #8]
 801a242:	2206      	movs	r2, #6
 801a244:	9201      	str	r2, [sp, #4]
 801a246:	9300      	str	r3, [sp, #0]
 801a248:	462b      	mov	r3, r5
 801a24a:	4622      	mov	r2, r4
 801a24c:	f7f7 fbd2 	bl	80119f4 <ip4_output_if>
 801a250:	4603      	mov	r3, r0
 801a252:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a258:	4618      	mov	r0, r3
 801a25a:	3720      	adds	r7, #32
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bdb0      	pop	{r4, r5, r7, pc}
 801a260:	0802242c 	.word	0x0802242c
 801a264:	08022a10 	.word	0x08022a10
 801a268:	080224a0 	.word	0x080224a0
 801a26c:	08022a30 	.word	0x08022a30
 801a270:	08022a50 	.word	0x08022a50
 801a274:	24007954 	.word	0x24007954
 801a278:	08022a74 	.word	0x08022a74

0801a27c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a27c:	b5b0      	push	{r4, r5, r7, lr}
 801a27e:	b084      	sub	sp, #16
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d106      	bne.n	801a298 <tcp_rexmit_rto_prepare+0x1c>
 801a28a:	4b31      	ldr	r3, [pc, #196]	; (801a350 <tcp_rexmit_rto_prepare+0xd4>)
 801a28c:	f240 6263 	movw	r2, #1635	; 0x663
 801a290:	4930      	ldr	r1, [pc, #192]	; (801a354 <tcp_rexmit_rto_prepare+0xd8>)
 801a292:	4831      	ldr	r0, [pc, #196]	; (801a358 <tcp_rexmit_rto_prepare+0xdc>)
 801a294:	f002 f916 	bl	801c4c4 <iprintf>

  if (pcb->unacked == NULL) {
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d102      	bne.n	801a2a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a2a0:	f06f 0305 	mvn.w	r3, #5
 801a2a4:	e050      	b.n	801a348 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2aa:	60fb      	str	r3, [r7, #12]
 801a2ac:	e00b      	b.n	801a2c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a2ae:	68f8      	ldr	r0, [r7, #12]
 801a2b0:	f7ff fee6 	bl	801a080 <tcp_output_segment_busy>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d002      	beq.n	801a2c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a2ba:	f06f 0305 	mvn.w	r3, #5
 801a2be:	e043      	b.n	801a348 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	60fb      	str	r3, [r7, #12]
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d1ef      	bne.n	801a2ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a2ce:	68f8      	ldr	r0, [r7, #12]
 801a2d0:	f7ff fed6 	bl	801a080 <tcp_output_segment_busy>
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d002      	beq.n	801a2e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a2da:	f06f 0305 	mvn.w	r3, #5
 801a2de:	e033      	b.n	801a348 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	8b5b      	ldrh	r3, [r3, #26]
 801a2fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	68db      	ldr	r3, [r3, #12]
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	4618      	mov	r0, r3
 801a30c:	f7f3 fff3 	bl	800e2f6 <lwip_htonl>
 801a310:	4604      	mov	r4, r0
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	891b      	ldrh	r3, [r3, #8]
 801a316:	461d      	mov	r5, r3
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	899b      	ldrh	r3, [r3, #12]
 801a31e:	b29b      	uxth	r3, r3
 801a320:	4618      	mov	r0, r3
 801a322:	f7f3 ffd3 	bl	800e2cc <lwip_htons>
 801a326:	4603      	mov	r3, r0
 801a328:	b2db      	uxtb	r3, r3
 801a32a:	f003 0303 	and.w	r3, r3, #3
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d001      	beq.n	801a336 <tcp_rexmit_rto_prepare+0xba>
 801a332:	2301      	movs	r3, #1
 801a334:	e000      	b.n	801a338 <tcp_rexmit_rto_prepare+0xbc>
 801a336:	2300      	movs	r3, #0
 801a338:	442b      	add	r3, r5
 801a33a:	18e2      	adds	r2, r4, r3
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2200      	movs	r2, #0
 801a344:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a346:	2300      	movs	r3, #0
}
 801a348:	4618      	mov	r0, r3
 801a34a:	3710      	adds	r7, #16
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bdb0      	pop	{r4, r5, r7, pc}
 801a350:	0802242c 	.word	0x0802242c
 801a354:	08022a88 	.word	0x08022a88
 801a358:	080224a0 	.word	0x080224a0

0801a35c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b082      	sub	sp, #8
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d106      	bne.n	801a378 <tcp_rexmit_rto_commit+0x1c>
 801a36a:	4b0d      	ldr	r3, [pc, #52]	; (801a3a0 <tcp_rexmit_rto_commit+0x44>)
 801a36c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a370:	490c      	ldr	r1, [pc, #48]	; (801a3a4 <tcp_rexmit_rto_commit+0x48>)
 801a372:	480d      	ldr	r0, [pc, #52]	; (801a3a8 <tcp_rexmit_rto_commit+0x4c>)
 801a374:	f002 f8a6 	bl	801c4c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a37e:	2bff      	cmp	r3, #255	; 0xff
 801a380:	d007      	beq.n	801a392 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a388:	3301      	adds	r3, #1
 801a38a:	b2da      	uxtb	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a392:	6878      	ldr	r0, [r7, #4]
 801a394:	f7ff fc80 	bl	8019c98 <tcp_output>
}
 801a398:	bf00      	nop
 801a39a:	3708      	adds	r7, #8
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd80      	pop	{r7, pc}
 801a3a0:	0802242c 	.word	0x0802242c
 801a3a4:	08022aac 	.word	0x08022aac
 801a3a8:	080224a0 	.word	0x080224a0

0801a3ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b082      	sub	sp, #8
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d106      	bne.n	801a3c8 <tcp_rexmit_rto+0x1c>
 801a3ba:	4b0a      	ldr	r3, [pc, #40]	; (801a3e4 <tcp_rexmit_rto+0x38>)
 801a3bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a3c0:	4909      	ldr	r1, [pc, #36]	; (801a3e8 <tcp_rexmit_rto+0x3c>)
 801a3c2:	480a      	ldr	r0, [pc, #40]	; (801a3ec <tcp_rexmit_rto+0x40>)
 801a3c4:	f002 f87e 	bl	801c4c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f7ff ff57 	bl	801a27c <tcp_rexmit_rto_prepare>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d102      	bne.n	801a3da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7ff ffc1 	bl	801a35c <tcp_rexmit_rto_commit>
  }
}
 801a3da:	bf00      	nop
 801a3dc:	3708      	adds	r7, #8
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
 801a3e2:	bf00      	nop
 801a3e4:	0802242c 	.word	0x0802242c
 801a3e8:	08022ad0 	.word	0x08022ad0
 801a3ec:	080224a0 	.word	0x080224a0

0801a3f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a3f0:	b590      	push	{r4, r7, lr}
 801a3f2:	b085      	sub	sp, #20
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d106      	bne.n	801a40c <tcp_rexmit+0x1c>
 801a3fe:	4b2f      	ldr	r3, [pc, #188]	; (801a4bc <tcp_rexmit+0xcc>)
 801a400:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a404:	492e      	ldr	r1, [pc, #184]	; (801a4c0 <tcp_rexmit+0xd0>)
 801a406:	482f      	ldr	r0, [pc, #188]	; (801a4c4 <tcp_rexmit+0xd4>)
 801a408:	f002 f85c 	bl	801c4c4 <iprintf>

  if (pcb->unacked == NULL) {
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a410:	2b00      	cmp	r3, #0
 801a412:	d102      	bne.n	801a41a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a414:	f06f 0305 	mvn.w	r3, #5
 801a418:	e04c      	b.n	801a4b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a41e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a420:	68b8      	ldr	r0, [r7, #8]
 801a422:	f7ff fe2d 	bl	801a080 <tcp_output_segment_busy>
 801a426:	4603      	mov	r3, r0
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d002      	beq.n	801a432 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a42c:	f06f 0305 	mvn.w	r3, #5
 801a430:	e040      	b.n	801a4b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	681a      	ldr	r2, [r3, #0]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	336c      	adds	r3, #108	; 0x6c
 801a43e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a440:	e002      	b.n	801a448 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d011      	beq.n	801a474 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	68db      	ldr	r3, [r3, #12]
 801a456:	685b      	ldr	r3, [r3, #4]
 801a458:	4618      	mov	r0, r3
 801a45a:	f7f3 ff4c 	bl	800e2f6 <lwip_htonl>
 801a45e:	4604      	mov	r4, r0
 801a460:	68bb      	ldr	r3, [r7, #8]
 801a462:	68db      	ldr	r3, [r3, #12]
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	4618      	mov	r0, r3
 801a468:	f7f3 ff45 	bl	800e2f6 <lwip_htonl>
 801a46c:	4603      	mov	r3, r0
 801a46e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a470:	2b00      	cmp	r3, #0
 801a472:	dbe6      	blt.n	801a442 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	681a      	ldr	r2, [r3, #0]
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	68ba      	ldr	r2, [r7, #8]
 801a480:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d103      	bne.n	801a492 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	2200      	movs	r2, #0
 801a48e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a498:	2bff      	cmp	r3, #255	; 0xff
 801a49a:	d007      	beq.n	801a4ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4a2:	3301      	adds	r3, #1
 801a4a4:	b2da      	uxtb	r2, r3
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a4b2:	2300      	movs	r3, #0
}
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	3714      	adds	r7, #20
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd90      	pop	{r4, r7, pc}
 801a4bc:	0802242c 	.word	0x0802242c
 801a4c0:	08022aec 	.word	0x08022aec
 801a4c4:	080224a0 	.word	0x080224a0

0801a4c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d106      	bne.n	801a4e4 <tcp_rexmit_fast+0x1c>
 801a4d6:	4b2a      	ldr	r3, [pc, #168]	; (801a580 <tcp_rexmit_fast+0xb8>)
 801a4d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a4dc:	4929      	ldr	r1, [pc, #164]	; (801a584 <tcp_rexmit_fast+0xbc>)
 801a4de:	482a      	ldr	r0, [pc, #168]	; (801a588 <tcp_rexmit_fast+0xc0>)
 801a4e0:	f001 fff0 	bl	801c4c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d045      	beq.n	801a578 <tcp_rexmit_fast+0xb0>
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	8b5b      	ldrh	r3, [r3, #26]
 801a4f0:	f003 0304 	and.w	r3, r3, #4
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d13f      	bne.n	801a578 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a4f8:	6878      	ldr	r0, [r7, #4]
 801a4fa:	f7ff ff79 	bl	801a3f0 <tcp_rexmit>
 801a4fe:	4603      	mov	r3, r0
 801a500:	2b00      	cmp	r3, #0
 801a502:	d139      	bne.n	801a578 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a510:	4293      	cmp	r3, r2
 801a512:	bf28      	it	cs
 801a514:	4613      	movcs	r3, r2
 801a516:	b29b      	uxth	r3, r3
 801a518:	2b00      	cmp	r3, #0
 801a51a:	da00      	bge.n	801a51e <tcp_rexmit_fast+0x56>
 801a51c:	3301      	adds	r3, #1
 801a51e:	105b      	asrs	r3, r3, #1
 801a520:	b29a      	uxth	r2, r3
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a52e:	461a      	mov	r2, r3
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a534:	005b      	lsls	r3, r3, #1
 801a536:	429a      	cmp	r2, r3
 801a538:	d206      	bcs.n	801a548 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	b29a      	uxth	r2, r3
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a552:	4619      	mov	r1, r3
 801a554:	0049      	lsls	r1, r1, #1
 801a556:	440b      	add	r3, r1
 801a558:	b29b      	uxth	r3, r3
 801a55a:	4413      	add	r3, r2
 801a55c:	b29a      	uxth	r2, r3
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	8b5b      	ldrh	r3, [r3, #26]
 801a568:	f043 0304 	orr.w	r3, r3, #4
 801a56c:	b29a      	uxth	r2, r3
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2200      	movs	r2, #0
 801a576:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a578:	bf00      	nop
 801a57a:	3708      	adds	r7, #8
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}
 801a580:	0802242c 	.word	0x0802242c
 801a584:	08022b04 	.word	0x08022b04
 801a588:	080224a0 	.word	0x080224a0

0801a58c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b086      	sub	sp, #24
 801a590:	af00      	add	r7, sp, #0
 801a592:	60f8      	str	r0, [r7, #12]
 801a594:	607b      	str	r3, [r7, #4]
 801a596:	460b      	mov	r3, r1
 801a598:	817b      	strh	r3, [r7, #10]
 801a59a:	4613      	mov	r3, r2
 801a59c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a59e:	897a      	ldrh	r2, [r7, #10]
 801a5a0:	893b      	ldrh	r3, [r7, #8]
 801a5a2:	4413      	add	r3, r2
 801a5a4:	b29b      	uxth	r3, r3
 801a5a6:	3314      	adds	r3, #20
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a5ae:	4619      	mov	r1, r3
 801a5b0:	2022      	movs	r0, #34	; 0x22
 801a5b2:	f7f9 faf1 	bl	8013b98 <pbuf_alloc>
 801a5b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d04d      	beq.n	801a65a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a5be:	897b      	ldrh	r3, [r7, #10]
 801a5c0:	3313      	adds	r3, #19
 801a5c2:	697a      	ldr	r2, [r7, #20]
 801a5c4:	8952      	ldrh	r2, [r2, #10]
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	db06      	blt.n	801a5d8 <tcp_output_alloc_header_common+0x4c>
 801a5ca:	4b26      	ldr	r3, [pc, #152]	; (801a664 <tcp_output_alloc_header_common+0xd8>)
 801a5cc:	f240 7223 	movw	r2, #1827	; 0x723
 801a5d0:	4925      	ldr	r1, [pc, #148]	; (801a668 <tcp_output_alloc_header_common+0xdc>)
 801a5d2:	4826      	ldr	r0, [pc, #152]	; (801a66c <tcp_output_alloc_header_common+0xe0>)
 801a5d4:	f001 ff76 	bl	801c4c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a5d8:	697b      	ldr	r3, [r7, #20]
 801a5da:	685b      	ldr	r3, [r3, #4]
 801a5dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a5de:	8c3b      	ldrh	r3, [r7, #32]
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f7f3 fe73 	bl	800e2cc <lwip_htons>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	461a      	mov	r2, r3
 801a5ea:	693b      	ldr	r3, [r7, #16]
 801a5ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7f3 fe6b 	bl	800e2cc <lwip_htons>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	461a      	mov	r2, r3
 801a5fa:	693b      	ldr	r3, [r7, #16]
 801a5fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a5fe:	693b      	ldr	r3, [r7, #16]
 801a600:	687a      	ldr	r2, [r7, #4]
 801a602:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a604:	68f8      	ldr	r0, [r7, #12]
 801a606:	f7f3 fe76 	bl	800e2f6 <lwip_htonl>
 801a60a:	4602      	mov	r2, r0
 801a60c:	693b      	ldr	r3, [r7, #16]
 801a60e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a610:	897b      	ldrh	r3, [r7, #10]
 801a612:	089b      	lsrs	r3, r3, #2
 801a614:	b29b      	uxth	r3, r3
 801a616:	3305      	adds	r3, #5
 801a618:	b29b      	uxth	r3, r3
 801a61a:	031b      	lsls	r3, r3, #12
 801a61c:	b29a      	uxth	r2, r3
 801a61e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a622:	b29b      	uxth	r3, r3
 801a624:	4313      	orrs	r3, r2
 801a626:	b29b      	uxth	r3, r3
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f3 fe4f 	bl	800e2cc <lwip_htons>
 801a62e:	4603      	mov	r3, r0
 801a630:	461a      	mov	r2, r3
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a638:	4618      	mov	r0, r3
 801a63a:	f7f3 fe47 	bl	800e2cc <lwip_htons>
 801a63e:	4603      	mov	r3, r0
 801a640:	461a      	mov	r2, r3
 801a642:	693b      	ldr	r3, [r7, #16]
 801a644:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a646:	693b      	ldr	r3, [r7, #16]
 801a648:	2200      	movs	r2, #0
 801a64a:	741a      	strb	r2, [r3, #16]
 801a64c:	2200      	movs	r2, #0
 801a64e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a650:	693b      	ldr	r3, [r7, #16]
 801a652:	2200      	movs	r2, #0
 801a654:	749a      	strb	r2, [r3, #18]
 801a656:	2200      	movs	r2, #0
 801a658:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a65a:	697b      	ldr	r3, [r7, #20]
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	3718      	adds	r7, #24
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	0802242c 	.word	0x0802242c
 801a668:	08022b24 	.word	0x08022b24
 801a66c:	080224a0 	.word	0x080224a0

0801a670 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a670:	b5b0      	push	{r4, r5, r7, lr}
 801a672:	b08a      	sub	sp, #40	; 0x28
 801a674:	af04      	add	r7, sp, #16
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	607b      	str	r3, [r7, #4]
 801a67a:	460b      	mov	r3, r1
 801a67c:	817b      	strh	r3, [r7, #10]
 801a67e:	4613      	mov	r3, r2
 801a680:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d106      	bne.n	801a696 <tcp_output_alloc_header+0x26>
 801a688:	4b15      	ldr	r3, [pc, #84]	; (801a6e0 <tcp_output_alloc_header+0x70>)
 801a68a:	f240 7242 	movw	r2, #1858	; 0x742
 801a68e:	4915      	ldr	r1, [pc, #84]	; (801a6e4 <tcp_output_alloc_header+0x74>)
 801a690:	4815      	ldr	r0, [pc, #84]	; (801a6e8 <tcp_output_alloc_header+0x78>)
 801a692:	f001 ff17 	bl	801c4c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	8adb      	ldrh	r3, [r3, #22]
 801a69e:	68fa      	ldr	r2, [r7, #12]
 801a6a0:	8b12      	ldrh	r2, [r2, #24]
 801a6a2:	68f9      	ldr	r1, [r7, #12]
 801a6a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a6a6:	893d      	ldrh	r5, [r7, #8]
 801a6a8:	897c      	ldrh	r4, [r7, #10]
 801a6aa:	9103      	str	r1, [sp, #12]
 801a6ac:	2110      	movs	r1, #16
 801a6ae:	9102      	str	r1, [sp, #8]
 801a6b0:	9201      	str	r2, [sp, #4]
 801a6b2:	9300      	str	r3, [sp, #0]
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	462a      	mov	r2, r5
 801a6b8:	4621      	mov	r1, r4
 801a6ba:	f7ff ff67 	bl	801a58c <tcp_output_alloc_header_common>
 801a6be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a6c0:	697b      	ldr	r3, [r7, #20]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d006      	beq.n	801a6d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ca:	68fa      	ldr	r2, [r7, #12]
 801a6cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a6ce:	441a      	add	r2, r3
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a6d4:	697b      	ldr	r3, [r7, #20]
}
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	3718      	adds	r7, #24
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bdb0      	pop	{r4, r5, r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	0802242c 	.word	0x0802242c
 801a6e4:	08022b54 	.word	0x08022b54
 801a6e8:	080224a0 	.word	0x080224a0

0801a6ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b088      	sub	sp, #32
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	60f8      	str	r0, [r7, #12]
 801a6f4:	60b9      	str	r1, [r7, #8]
 801a6f6:	4611      	mov	r1, r2
 801a6f8:	461a      	mov	r2, r3
 801a6fa:	460b      	mov	r3, r1
 801a6fc:	71fb      	strb	r3, [r7, #7]
 801a6fe:	4613      	mov	r3, r2
 801a700:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a702:	2300      	movs	r3, #0
 801a704:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d106      	bne.n	801a71a <tcp_output_fill_options+0x2e>
 801a70c:	4b13      	ldr	r3, [pc, #76]	; (801a75c <tcp_output_fill_options+0x70>)
 801a70e:	f240 7256 	movw	r2, #1878	; 0x756
 801a712:	4913      	ldr	r1, [pc, #76]	; (801a760 <tcp_output_fill_options+0x74>)
 801a714:	4813      	ldr	r0, [pc, #76]	; (801a764 <tcp_output_fill_options+0x78>)
 801a716:	f001 fed5 	bl	801c4c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	685b      	ldr	r3, [r3, #4]
 801a71e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a720:	69bb      	ldr	r3, [r7, #24]
 801a722:	3314      	adds	r3, #20
 801a724:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a726:	69bb      	ldr	r3, [r7, #24]
 801a728:	f103 0214 	add.w	r2, r3, #20
 801a72c:	8bfb      	ldrh	r3, [r7, #30]
 801a72e:	009b      	lsls	r3, r3, #2
 801a730:	4619      	mov	r1, r3
 801a732:	79fb      	ldrb	r3, [r7, #7]
 801a734:	009b      	lsls	r3, r3, #2
 801a736:	f003 0304 	and.w	r3, r3, #4
 801a73a:	440b      	add	r3, r1
 801a73c:	4413      	add	r3, r2
 801a73e:	697a      	ldr	r2, [r7, #20]
 801a740:	429a      	cmp	r2, r3
 801a742:	d006      	beq.n	801a752 <tcp_output_fill_options+0x66>
 801a744:	4b05      	ldr	r3, [pc, #20]	; (801a75c <tcp_output_fill_options+0x70>)
 801a746:	f240 7275 	movw	r2, #1909	; 0x775
 801a74a:	4907      	ldr	r1, [pc, #28]	; (801a768 <tcp_output_fill_options+0x7c>)
 801a74c:	4805      	ldr	r0, [pc, #20]	; (801a764 <tcp_output_fill_options+0x78>)
 801a74e:	f001 feb9 	bl	801c4c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a752:	bf00      	nop
 801a754:	3720      	adds	r7, #32
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}
 801a75a:	bf00      	nop
 801a75c:	0802242c 	.word	0x0802242c
 801a760:	08022b7c 	.word	0x08022b7c
 801a764:	080224a0 	.word	0x080224a0
 801a768:	08022a74 	.word	0x08022a74

0801a76c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b08a      	sub	sp, #40	; 0x28
 801a770:	af04      	add	r7, sp, #16
 801a772:	60f8      	str	r0, [r7, #12]
 801a774:	60b9      	str	r1, [r7, #8]
 801a776:	607a      	str	r2, [r7, #4]
 801a778:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d106      	bne.n	801a78e <tcp_output_control_segment+0x22>
 801a780:	4b1c      	ldr	r3, [pc, #112]	; (801a7f4 <tcp_output_control_segment+0x88>)
 801a782:	f240 7287 	movw	r2, #1927	; 0x787
 801a786:	491c      	ldr	r1, [pc, #112]	; (801a7f8 <tcp_output_control_segment+0x8c>)
 801a788:	481c      	ldr	r0, [pc, #112]	; (801a7fc <tcp_output_control_segment+0x90>)
 801a78a:	f001 fe9b 	bl	801c4c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a78e:	683a      	ldr	r2, [r7, #0]
 801a790:	6879      	ldr	r1, [r7, #4]
 801a792:	68f8      	ldr	r0, [r7, #12]
 801a794:	f7fe fae8 	bl	8018d68 <tcp_route>
 801a798:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a79a:	693b      	ldr	r3, [r7, #16]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d102      	bne.n	801a7a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a7a0:	23fc      	movs	r3, #252	; 0xfc
 801a7a2:	75fb      	strb	r3, [r7, #23]
 801a7a4:	e01c      	b.n	801a7e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d006      	beq.n	801a7ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	7adb      	ldrb	r3, [r3, #11]
 801a7b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	7a9b      	ldrb	r3, [r3, #10]
 801a7b6:	757b      	strb	r3, [r7, #21]
 801a7b8:	e003      	b.n	801a7c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a7ba:	23ff      	movs	r3, #255	; 0xff
 801a7bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a7be:	2300      	movs	r3, #0
 801a7c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a7c2:	7dba      	ldrb	r2, [r7, #22]
 801a7c4:	693b      	ldr	r3, [r7, #16]
 801a7c6:	9302      	str	r3, [sp, #8]
 801a7c8:	2306      	movs	r3, #6
 801a7ca:	9301      	str	r3, [sp, #4]
 801a7cc:	7d7b      	ldrb	r3, [r7, #21]
 801a7ce:	9300      	str	r3, [sp, #0]
 801a7d0:	4613      	mov	r3, r2
 801a7d2:	683a      	ldr	r2, [r7, #0]
 801a7d4:	6879      	ldr	r1, [r7, #4]
 801a7d6:	68b8      	ldr	r0, [r7, #8]
 801a7d8:	f7f7 f90c 	bl	80119f4 <ip4_output_if>
 801a7dc:	4603      	mov	r3, r0
 801a7de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a7e0:	68b8      	ldr	r0, [r7, #8]
 801a7e2:	f7f9 fcbd 	bl	8014160 <pbuf_free>
  return err;
 801a7e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	3718      	adds	r7, #24
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	bd80      	pop	{r7, pc}
 801a7f2:	bf00      	nop
 801a7f4:	0802242c 	.word	0x0802242c
 801a7f8:	08022ba4 	.word	0x08022ba4
 801a7fc:	080224a0 	.word	0x080224a0

0801a800 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a800:	b590      	push	{r4, r7, lr}
 801a802:	b08b      	sub	sp, #44	; 0x2c
 801a804:	af04      	add	r7, sp, #16
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
 801a80c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d106      	bne.n	801a822 <tcp_rst+0x22>
 801a814:	4b1f      	ldr	r3, [pc, #124]	; (801a894 <tcp_rst+0x94>)
 801a816:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a81a:	491f      	ldr	r1, [pc, #124]	; (801a898 <tcp_rst+0x98>)
 801a81c:	481f      	ldr	r0, [pc, #124]	; (801a89c <tcp_rst+0x9c>)
 801a81e:	f001 fe51 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a824:	2b00      	cmp	r3, #0
 801a826:	d106      	bne.n	801a836 <tcp_rst+0x36>
 801a828:	4b1a      	ldr	r3, [pc, #104]	; (801a894 <tcp_rst+0x94>)
 801a82a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a82e:	491c      	ldr	r1, [pc, #112]	; (801a8a0 <tcp_rst+0xa0>)
 801a830:	481a      	ldr	r0, [pc, #104]	; (801a89c <tcp_rst+0x9c>)
 801a832:	f001 fe47 	bl	801c4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a836:	2300      	movs	r3, #0
 801a838:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a83a:	f246 0308 	movw	r3, #24584	; 0x6008
 801a83e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a840:	7dfb      	ldrb	r3, [r7, #23]
 801a842:	b29c      	uxth	r4, r3
 801a844:	68b8      	ldr	r0, [r7, #8]
 801a846:	f7f3 fd56 	bl	800e2f6 <lwip_htonl>
 801a84a:	4602      	mov	r2, r0
 801a84c:	8abb      	ldrh	r3, [r7, #20]
 801a84e:	9303      	str	r3, [sp, #12]
 801a850:	2314      	movs	r3, #20
 801a852:	9302      	str	r3, [sp, #8]
 801a854:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a856:	9301      	str	r3, [sp, #4]
 801a858:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a85a:	9300      	str	r3, [sp, #0]
 801a85c:	4613      	mov	r3, r2
 801a85e:	2200      	movs	r2, #0
 801a860:	4621      	mov	r1, r4
 801a862:	6878      	ldr	r0, [r7, #4]
 801a864:	f7ff fe92 	bl	801a58c <tcp_output_alloc_header_common>
 801a868:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a86a:	693b      	ldr	r3, [r7, #16]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d00c      	beq.n	801a88a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a870:	7dfb      	ldrb	r3, [r7, #23]
 801a872:	2200      	movs	r2, #0
 801a874:	6939      	ldr	r1, [r7, #16]
 801a876:	68f8      	ldr	r0, [r7, #12]
 801a878:	f7ff ff38 	bl	801a6ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a87e:	683a      	ldr	r2, [r7, #0]
 801a880:	6939      	ldr	r1, [r7, #16]
 801a882:	68f8      	ldr	r0, [r7, #12]
 801a884:	f7ff ff72 	bl	801a76c <tcp_output_control_segment>
 801a888:	e000      	b.n	801a88c <tcp_rst+0x8c>
    return;
 801a88a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a88c:	371c      	adds	r7, #28
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd90      	pop	{r4, r7, pc}
 801a892:	bf00      	nop
 801a894:	0802242c 	.word	0x0802242c
 801a898:	08022bd0 	.word	0x08022bd0
 801a89c:	080224a0 	.word	0x080224a0
 801a8a0:	08022bec 	.word	0x08022bec

0801a8a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a8a4:	b590      	push	{r4, r7, lr}
 801a8a6:	b087      	sub	sp, #28
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d106      	bne.n	801a8c8 <tcp_send_empty_ack+0x24>
 801a8ba:	4b28      	ldr	r3, [pc, #160]	; (801a95c <tcp_send_empty_ack+0xb8>)
 801a8bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a8c0:	4927      	ldr	r1, [pc, #156]	; (801a960 <tcp_send_empty_ack+0xbc>)
 801a8c2:	4828      	ldr	r0, [pc, #160]	; (801a964 <tcp_send_empty_ack+0xc0>)
 801a8c4:	f001 fdfe 	bl	801c4c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a8c8:	7dfb      	ldrb	r3, [r7, #23]
 801a8ca:	009b      	lsls	r3, r3, #2
 801a8cc:	b2db      	uxtb	r3, r3
 801a8ce:	f003 0304 	and.w	r3, r3, #4
 801a8d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a8d4:	7d7b      	ldrb	r3, [r7, #21]
 801a8d6:	b29c      	uxth	r4, r3
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f7f3 fd0a 	bl	800e2f6 <lwip_htonl>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	4621      	mov	r1, r4
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f7ff fec1 	bl	801a670 <tcp_output_alloc_header>
 801a8ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a8f0:	693b      	ldr	r3, [r7, #16]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d109      	bne.n	801a90a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	8b5b      	ldrh	r3, [r3, #26]
 801a8fa:	f043 0303 	orr.w	r3, r3, #3
 801a8fe:	b29a      	uxth	r2, r3
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a904:	f06f 0301 	mvn.w	r3, #1
 801a908:	e023      	b.n	801a952 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a90a:	7dbb      	ldrb	r3, [r7, #22]
 801a90c:	7dfa      	ldrb	r2, [r7, #23]
 801a90e:	6939      	ldr	r1, [r7, #16]
 801a910:	6878      	ldr	r0, [r7, #4]
 801a912:	f7ff feeb 	bl	801a6ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	3304      	adds	r3, #4
 801a91c:	6939      	ldr	r1, [r7, #16]
 801a91e:	6878      	ldr	r0, [r7, #4]
 801a920:	f7ff ff24 	bl	801a76c <tcp_output_control_segment>
 801a924:	4603      	mov	r3, r0
 801a926:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d007      	beq.n	801a940 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	8b5b      	ldrh	r3, [r3, #26]
 801a934:	f043 0303 	orr.w	r3, r3, #3
 801a938:	b29a      	uxth	r2, r3
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	835a      	strh	r2, [r3, #26]
 801a93e:	e006      	b.n	801a94e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	8b5b      	ldrh	r3, [r3, #26]
 801a944:	f023 0303 	bic.w	r3, r3, #3
 801a948:	b29a      	uxth	r2, r3
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a94e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a952:	4618      	mov	r0, r3
 801a954:	371c      	adds	r7, #28
 801a956:	46bd      	mov	sp, r7
 801a958:	bd90      	pop	{r4, r7, pc}
 801a95a:	bf00      	nop
 801a95c:	0802242c 	.word	0x0802242c
 801a960:	08022c08 	.word	0x08022c08
 801a964:	080224a0 	.word	0x080224a0

0801a968 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a968:	b590      	push	{r4, r7, lr}
 801a96a:	b087      	sub	sp, #28
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a970:	2300      	movs	r3, #0
 801a972:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d106      	bne.n	801a988 <tcp_keepalive+0x20>
 801a97a:	4b18      	ldr	r3, [pc, #96]	; (801a9dc <tcp_keepalive+0x74>)
 801a97c:	f640 0224 	movw	r2, #2084	; 0x824
 801a980:	4917      	ldr	r1, [pc, #92]	; (801a9e0 <tcp_keepalive+0x78>)
 801a982:	4818      	ldr	r0, [pc, #96]	; (801a9e4 <tcp_keepalive+0x7c>)
 801a984:	f001 fd9e 	bl	801c4c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a988:	7dfb      	ldrb	r3, [r7, #23]
 801a98a:	b29c      	uxth	r4, r3
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a990:	3b01      	subs	r3, #1
 801a992:	4618      	mov	r0, r3
 801a994:	f7f3 fcaf 	bl	800e2f6 <lwip_htonl>
 801a998:	4603      	mov	r3, r0
 801a99a:	2200      	movs	r2, #0
 801a99c:	4621      	mov	r1, r4
 801a99e:	6878      	ldr	r0, [r7, #4]
 801a9a0:	f7ff fe66 	bl	801a670 <tcp_output_alloc_header>
 801a9a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a9a6:	693b      	ldr	r3, [r7, #16]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d102      	bne.n	801a9b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a9ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b0:	e010      	b.n	801a9d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a9b2:	7dfb      	ldrb	r3, [r7, #23]
 801a9b4:	2200      	movs	r2, #0
 801a9b6:	6939      	ldr	r1, [r7, #16]
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	f7ff fe97 	bl	801a6ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a9be:	687a      	ldr	r2, [r7, #4]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	3304      	adds	r3, #4
 801a9c4:	6939      	ldr	r1, [r7, #16]
 801a9c6:	6878      	ldr	r0, [r7, #4]
 801a9c8:	f7ff fed0 	bl	801a76c <tcp_output_control_segment>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	371c      	adds	r7, #28
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd90      	pop	{r4, r7, pc}
 801a9dc:	0802242c 	.word	0x0802242c
 801a9e0:	08022c28 	.word	0x08022c28
 801a9e4:	080224a0 	.word	0x080224a0

0801a9e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a9e8:	b590      	push	{r4, r7, lr}
 801a9ea:	b08b      	sub	sp, #44	; 0x2c
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d106      	bne.n	801aa0a <tcp_zero_window_probe+0x22>
 801a9fc:	4b4c      	ldr	r3, [pc, #304]	; (801ab30 <tcp_zero_window_probe+0x148>)
 801a9fe:	f640 024f 	movw	r2, #2127	; 0x84f
 801aa02:	494c      	ldr	r1, [pc, #304]	; (801ab34 <tcp_zero_window_probe+0x14c>)
 801aa04:	484c      	ldr	r0, [pc, #304]	; (801ab38 <tcp_zero_window_probe+0x150>)
 801aa06:	f001 fd5d 	bl	801c4c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801aa10:	6a3b      	ldr	r3, [r7, #32]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d101      	bne.n	801aa1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801aa16:	2300      	movs	r3, #0
 801aa18:	e086      	b.n	801ab28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801aa20:	2bff      	cmp	r3, #255	; 0xff
 801aa22:	d007      	beq.n	801aa34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	b2da      	uxtb	r2, r3
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801aa34:	6a3b      	ldr	r3, [r7, #32]
 801aa36:	68db      	ldr	r3, [r3, #12]
 801aa38:	899b      	ldrh	r3, [r3, #12]
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7f3 fc45 	bl	800e2cc <lwip_htons>
 801aa42:	4603      	mov	r3, r0
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	f003 0301 	and.w	r3, r3, #1
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d005      	beq.n	801aa5a <tcp_zero_window_probe+0x72>
 801aa4e:	6a3b      	ldr	r3, [r7, #32]
 801aa50:	891b      	ldrh	r3, [r3, #8]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d101      	bne.n	801aa5a <tcp_zero_window_probe+0x72>
 801aa56:	2301      	movs	r3, #1
 801aa58:	e000      	b.n	801aa5c <tcp_zero_window_probe+0x74>
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801aa5e:	7ffb      	ldrb	r3, [r7, #31]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	bf0c      	ite	eq
 801aa64:	2301      	moveq	r3, #1
 801aa66:	2300      	movne	r3, #0
 801aa68:	b2db      	uxtb	r3, r3
 801aa6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801aa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa70:	b299      	uxth	r1, r3
 801aa72:	6a3b      	ldr	r3, [r7, #32]
 801aa74:	68db      	ldr	r3, [r3, #12]
 801aa76:	685b      	ldr	r3, [r3, #4]
 801aa78:	8bba      	ldrh	r2, [r7, #28]
 801aa7a:	6878      	ldr	r0, [r7, #4]
 801aa7c:	f7ff fdf8 	bl	801a670 <tcp_output_alloc_header>
 801aa80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801aa82:	69bb      	ldr	r3, [r7, #24]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d102      	bne.n	801aa8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801aa88:	f04f 33ff 	mov.w	r3, #4294967295
 801aa8c:	e04c      	b.n	801ab28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801aa8e:	69bb      	ldr	r3, [r7, #24]
 801aa90:	685b      	ldr	r3, [r3, #4]
 801aa92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801aa94:	7ffb      	ldrb	r3, [r7, #31]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d011      	beq.n	801aabe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801aa9a:	697b      	ldr	r3, [r7, #20]
 801aa9c:	899b      	ldrh	r3, [r3, #12]
 801aa9e:	b29b      	uxth	r3, r3
 801aaa0:	b21b      	sxth	r3, r3
 801aaa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801aaa6:	b21c      	sxth	r4, r3
 801aaa8:	2011      	movs	r0, #17
 801aaaa:	f7f3 fc0f 	bl	800e2cc <lwip_htons>
 801aaae:	4603      	mov	r3, r0
 801aab0:	b21b      	sxth	r3, r3
 801aab2:	4323      	orrs	r3, r4
 801aab4:	b21b      	sxth	r3, r3
 801aab6:	b29a      	uxth	r2, r3
 801aab8:	697b      	ldr	r3, [r7, #20]
 801aaba:	819a      	strh	r2, [r3, #12]
 801aabc:	e010      	b.n	801aae0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801aabe:	69bb      	ldr	r3, [r7, #24]
 801aac0:	685b      	ldr	r3, [r3, #4]
 801aac2:	3314      	adds	r3, #20
 801aac4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801aac6:	6a3b      	ldr	r3, [r7, #32]
 801aac8:	6858      	ldr	r0, [r3, #4]
 801aaca:	6a3b      	ldr	r3, [r7, #32]
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	891a      	ldrh	r2, [r3, #8]
 801aad0:	6a3b      	ldr	r3, [r7, #32]
 801aad2:	891b      	ldrh	r3, [r3, #8]
 801aad4:	1ad3      	subs	r3, r2, r3
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	2201      	movs	r2, #1
 801aada:	6939      	ldr	r1, [r7, #16]
 801aadc:	f7f9 fd46 	bl	801456c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801aae0:	6a3b      	ldr	r3, [r7, #32]
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	685b      	ldr	r3, [r3, #4]
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7f3 fc05 	bl	800e2f6 <lwip_htonl>
 801aaec:	4603      	mov	r3, r0
 801aaee:	3301      	adds	r3, #1
 801aaf0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	1ad3      	subs	r3, r2, r3
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	da02      	bge.n	801ab04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	68fa      	ldr	r2, [r7, #12]
 801ab02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ab04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab08:	2200      	movs	r2, #0
 801ab0a:	69b9      	ldr	r1, [r7, #24]
 801ab0c:	6878      	ldr	r0, [r7, #4]
 801ab0e:	f7ff fded 	bl	801a6ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ab12:	687a      	ldr	r2, [r7, #4]
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	3304      	adds	r3, #4
 801ab18:	69b9      	ldr	r1, [r7, #24]
 801ab1a:	6878      	ldr	r0, [r7, #4]
 801ab1c:	f7ff fe26 	bl	801a76c <tcp_output_control_segment>
 801ab20:	4603      	mov	r3, r0
 801ab22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ab24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801ab28:	4618      	mov	r0, r3
 801ab2a:	372c      	adds	r7, #44	; 0x2c
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd90      	pop	{r4, r7, pc}
 801ab30:	0802242c 	.word	0x0802242c
 801ab34:	08022c44 	.word	0x08022c44
 801ab38:	080224a0 	.word	0x080224a0

0801ab3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	b084      	sub	sp, #16
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]
 801ab44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801ab46:	f000 fb17 	bl	801b178 <sys_timeouts_sleeptime>
 801ab4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab52:	d10b      	bne.n	801ab6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801ab54:	4813      	ldr	r0, [pc, #76]	; (801aba4 <tcpip_timeouts_mbox_fetch+0x68>)
 801ab56:	f7f9 ff3e 	bl	80149d6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	6839      	ldr	r1, [r7, #0]
 801ab5e:	6878      	ldr	r0, [r7, #4]
 801ab60:	f7f9 fdf6 	bl	8014750 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801ab64:	480f      	ldr	r0, [pc, #60]	; (801aba4 <tcpip_timeouts_mbox_fetch+0x68>)
 801ab66:	f7f9 ff27 	bl	80149b8 <sys_mutex_lock>
    return;
 801ab6a:	e018      	b.n	801ab9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d102      	bne.n	801ab78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801ab72:	f000 fac7 	bl	801b104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ab76:	e7e6      	b.n	801ab46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801ab78:	480a      	ldr	r0, [pc, #40]	; (801aba4 <tcpip_timeouts_mbox_fetch+0x68>)
 801ab7a:	f7f9 ff2c 	bl	80149d6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801ab7e:	68fa      	ldr	r2, [r7, #12]
 801ab80:	6839      	ldr	r1, [r7, #0]
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f7f9 fde4 	bl	8014750 <sys_arch_mbox_fetch>
 801ab88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801ab8a:	4806      	ldr	r0, [pc, #24]	; (801aba4 <tcpip_timeouts_mbox_fetch+0x68>)
 801ab8c:	f7f9 ff14 	bl	80149b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801ab90:	68bb      	ldr	r3, [r7, #8]
 801ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab96:	d102      	bne.n	801ab9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801ab98:	f000 fab4 	bl	801b104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ab9c:	e7d3      	b.n	801ab46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801ab9e:	3710      	adds	r7, #16
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	240079b0 	.word	0x240079b0

0801aba8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b084      	sub	sp, #16
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801abb0:	4810      	ldr	r0, [pc, #64]	; (801abf4 <tcpip_thread+0x4c>)
 801abb2:	f7f9 ff01 	bl	80149b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801abb6:	4b10      	ldr	r3, [pc, #64]	; (801abf8 <tcpip_thread+0x50>)
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d005      	beq.n	801abca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801abbe:	4b0e      	ldr	r3, [pc, #56]	; (801abf8 <tcpip_thread+0x50>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	4a0e      	ldr	r2, [pc, #56]	; (801abfc <tcpip_thread+0x54>)
 801abc4:	6812      	ldr	r2, [r2, #0]
 801abc6:	4610      	mov	r0, r2
 801abc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801abca:	f107 030c 	add.w	r3, r7, #12
 801abce:	4619      	mov	r1, r3
 801abd0:	480b      	ldr	r0, [pc, #44]	; (801ac00 <tcpip_thread+0x58>)
 801abd2:	f7ff ffb3 	bl	801ab3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d106      	bne.n	801abea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801abdc:	4b09      	ldr	r3, [pc, #36]	; (801ac04 <tcpip_thread+0x5c>)
 801abde:	2291      	movs	r2, #145	; 0x91
 801abe0:	4909      	ldr	r1, [pc, #36]	; (801ac08 <tcpip_thread+0x60>)
 801abe2:	480a      	ldr	r0, [pc, #40]	; (801ac0c <tcpip_thread+0x64>)
 801abe4:	f001 fc6e 	bl	801c4c4 <iprintf>
      continue;
 801abe8:	e003      	b.n	801abf2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	4618      	mov	r0, r3
 801abee:	f000 f80f 	bl	801ac10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801abf2:	e7ea      	b.n	801abca <tcpip_thread+0x22>
 801abf4:	240079b0 	.word	0x240079b0
 801abf8:	240079a4 	.word	0x240079a4
 801abfc:	240079a8 	.word	0x240079a8
 801ac00:	240079ac 	.word	0x240079ac
 801ac04:	08022c68 	.word	0x08022c68
 801ac08:	08022cb8 	.word	0x08022cb8
 801ac0c:	08022cd8 	.word	0x08022cd8

0801ac10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b082      	sub	sp, #8
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	781b      	ldrb	r3, [r3, #0]
 801ac1c:	2b02      	cmp	r3, #2
 801ac1e:	d026      	beq.n	801ac6e <tcpip_thread_handle_msg+0x5e>
 801ac20:	2b02      	cmp	r3, #2
 801ac22:	dc2b      	bgt.n	801ac7c <tcpip_thread_handle_msg+0x6c>
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d002      	beq.n	801ac2e <tcpip_thread_handle_msg+0x1e>
 801ac28:	2b01      	cmp	r3, #1
 801ac2a:	d015      	beq.n	801ac58 <tcpip_thread_handle_msg+0x48>
 801ac2c:	e026      	b.n	801ac7c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	68db      	ldr	r3, [r3, #12]
 801ac32:	687a      	ldr	r2, [r7, #4]
 801ac34:	6850      	ldr	r0, [r2, #4]
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	6892      	ldr	r2, [r2, #8]
 801ac3a:	4611      	mov	r1, r2
 801ac3c:	4798      	blx	r3
 801ac3e:	4603      	mov	r3, r0
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d004      	beq.n	801ac4e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f7f9 fa89 	bl	8014160 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ac4e:	6879      	ldr	r1, [r7, #4]
 801ac50:	2009      	movs	r0, #9
 801ac52:	f7f8 fb3b 	bl	80132cc <memp_free>
      break;
 801ac56:	e018      	b.n	801ac8a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	685b      	ldr	r3, [r3, #4]
 801ac5c:	687a      	ldr	r2, [r7, #4]
 801ac5e:	6892      	ldr	r2, [r2, #8]
 801ac60:	4610      	mov	r0, r2
 801ac62:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801ac64:	6879      	ldr	r1, [r7, #4]
 801ac66:	2008      	movs	r0, #8
 801ac68:	f7f8 fb30 	bl	80132cc <memp_free>
      break;
 801ac6c:	e00d      	b.n	801ac8a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	685b      	ldr	r3, [r3, #4]
 801ac72:	687a      	ldr	r2, [r7, #4]
 801ac74:	6892      	ldr	r2, [r2, #8]
 801ac76:	4610      	mov	r0, r2
 801ac78:	4798      	blx	r3
      break;
 801ac7a:	e006      	b.n	801ac8a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ac7c:	4b05      	ldr	r3, [pc, #20]	; (801ac94 <tcpip_thread_handle_msg+0x84>)
 801ac7e:	22cf      	movs	r2, #207	; 0xcf
 801ac80:	4905      	ldr	r1, [pc, #20]	; (801ac98 <tcpip_thread_handle_msg+0x88>)
 801ac82:	4806      	ldr	r0, [pc, #24]	; (801ac9c <tcpip_thread_handle_msg+0x8c>)
 801ac84:	f001 fc1e 	bl	801c4c4 <iprintf>
      break;
 801ac88:	bf00      	nop
  }
}
 801ac8a:	bf00      	nop
 801ac8c:	3708      	adds	r7, #8
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd80      	pop	{r7, pc}
 801ac92:	bf00      	nop
 801ac94:	08022c68 	.word	0x08022c68
 801ac98:	08022cb8 	.word	0x08022cb8
 801ac9c:	08022cd8 	.word	0x08022cd8

0801aca0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b086      	sub	sp, #24
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	60f8      	str	r0, [r7, #12]
 801aca8:	60b9      	str	r1, [r7, #8]
 801acaa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801acac:	481a      	ldr	r0, [pc, #104]	; (801ad18 <tcpip_inpkt+0x78>)
 801acae:	f7f9 fdaa 	bl	8014806 <sys_mbox_valid>
 801acb2:	4603      	mov	r3, r0
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d105      	bne.n	801acc4 <tcpip_inpkt+0x24>
 801acb8:	4b18      	ldr	r3, [pc, #96]	; (801ad1c <tcpip_inpkt+0x7c>)
 801acba:	22fc      	movs	r2, #252	; 0xfc
 801acbc:	4918      	ldr	r1, [pc, #96]	; (801ad20 <tcpip_inpkt+0x80>)
 801acbe:	4819      	ldr	r0, [pc, #100]	; (801ad24 <tcpip_inpkt+0x84>)
 801acc0:	f001 fc00 	bl	801c4c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801acc4:	2009      	movs	r0, #9
 801acc6:	f7f8 fa8b 	bl	80131e0 <memp_malloc>
 801acca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801accc:	697b      	ldr	r3, [r7, #20]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d102      	bne.n	801acd8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801acd2:	f04f 33ff 	mov.w	r3, #4294967295
 801acd6:	e01a      	b.n	801ad0e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	2200      	movs	r2, #0
 801acdc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801acde:	697b      	ldr	r3, [r7, #20]
 801ace0:	68fa      	ldr	r2, [r7, #12]
 801ace2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	68ba      	ldr	r2, [r7, #8]
 801ace8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801acea:	697b      	ldr	r3, [r7, #20]
 801acec:	687a      	ldr	r2, [r7, #4]
 801acee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801acf0:	6979      	ldr	r1, [r7, #20]
 801acf2:	4809      	ldr	r0, [pc, #36]	; (801ad18 <tcpip_inpkt+0x78>)
 801acf4:	f7f9 fd12 	bl	801471c <sys_mbox_trypost>
 801acf8:	4603      	mov	r3, r0
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d006      	beq.n	801ad0c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801acfe:	6979      	ldr	r1, [r7, #20]
 801ad00:	2009      	movs	r0, #9
 801ad02:	f7f8 fae3 	bl	80132cc <memp_free>
    return ERR_MEM;
 801ad06:	f04f 33ff 	mov.w	r3, #4294967295
 801ad0a:	e000      	b.n	801ad0e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801ad0c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801ad0e:	4618      	mov	r0, r3
 801ad10:	3718      	adds	r7, #24
 801ad12:	46bd      	mov	sp, r7
 801ad14:	bd80      	pop	{r7, pc}
 801ad16:	bf00      	nop
 801ad18:	240079ac 	.word	0x240079ac
 801ad1c:	08022c68 	.word	0x08022c68
 801ad20:	08022d00 	.word	0x08022d00
 801ad24:	08022cd8 	.word	0x08022cd8

0801ad28 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b082      	sub	sp, #8
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
 801ad30:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ad38:	f003 0318 	and.w	r3, r3, #24
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d006      	beq.n	801ad4e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801ad40:	4a08      	ldr	r2, [pc, #32]	; (801ad64 <tcpip_input+0x3c>)
 801ad42:	6839      	ldr	r1, [r7, #0]
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f7ff ffab 	bl	801aca0 <tcpip_inpkt>
 801ad4a:	4603      	mov	r3, r0
 801ad4c:	e005      	b.n	801ad5a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801ad4e:	4a06      	ldr	r2, [pc, #24]	; (801ad68 <tcpip_input+0x40>)
 801ad50:	6839      	ldr	r1, [r7, #0]
 801ad52:	6878      	ldr	r0, [r7, #4]
 801ad54:	f7ff ffa4 	bl	801aca0 <tcpip_inpkt>
 801ad58:	4603      	mov	r3, r0
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3708      	adds	r7, #8
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}
 801ad62:	bf00      	nop
 801ad64:	08010ef1 	.word	0x08010ef1
 801ad68:	08011771 	.word	0x08011771

0801ad6c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b084      	sub	sp, #16
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801ad76:	4819      	ldr	r0, [pc, #100]	; (801addc <tcpip_try_callback+0x70>)
 801ad78:	f7f9 fd45 	bl	8014806 <sys_mbox_valid>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d106      	bne.n	801ad90 <tcpip_try_callback+0x24>
 801ad82:	4b17      	ldr	r3, [pc, #92]	; (801ade0 <tcpip_try_callback+0x74>)
 801ad84:	f240 125d 	movw	r2, #349	; 0x15d
 801ad88:	4916      	ldr	r1, [pc, #88]	; (801ade4 <tcpip_try_callback+0x78>)
 801ad8a:	4817      	ldr	r0, [pc, #92]	; (801ade8 <tcpip_try_callback+0x7c>)
 801ad8c:	f001 fb9a 	bl	801c4c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801ad90:	2008      	movs	r0, #8
 801ad92:	f7f8 fa25 	bl	80131e0 <memp_malloc>
 801ad96:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d102      	bne.n	801ada4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801ad9e:	f04f 33ff 	mov.w	r3, #4294967295
 801ada2:	e017      	b.n	801add4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	2201      	movs	r2, #1
 801ada8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	683a      	ldr	r2, [r7, #0]
 801adb4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801adb6:	68f9      	ldr	r1, [r7, #12]
 801adb8:	4808      	ldr	r0, [pc, #32]	; (801addc <tcpip_try_callback+0x70>)
 801adba:	f7f9 fcaf 	bl	801471c <sys_mbox_trypost>
 801adbe:	4603      	mov	r3, r0
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d006      	beq.n	801add2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801adc4:	68f9      	ldr	r1, [r7, #12]
 801adc6:	2008      	movs	r0, #8
 801adc8:	f7f8 fa80 	bl	80132cc <memp_free>
    return ERR_MEM;
 801adcc:	f04f 33ff 	mov.w	r3, #4294967295
 801add0:	e000      	b.n	801add4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801add2:	2300      	movs	r3, #0
}
 801add4:	4618      	mov	r0, r3
 801add6:	3710      	adds	r7, #16
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}
 801addc:	240079ac 	.word	0x240079ac
 801ade0:	08022c68 	.word	0x08022c68
 801ade4:	08022d00 	.word	0x08022d00
 801ade8:	08022cd8 	.word	0x08022cd8

0801adec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b084      	sub	sp, #16
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	60b9      	str	r1, [r7, #8]
 801adf6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801adf8:	4806      	ldr	r0, [pc, #24]	; (801ae14 <tcpip_send_msg_wait_sem+0x28>)
 801adfa:	f7f9 fddd 	bl	80149b8 <sys_mutex_lock>
  fn(apimsg);
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	68b8      	ldr	r0, [r7, #8]
 801ae02:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801ae04:	4803      	ldr	r0, [pc, #12]	; (801ae14 <tcpip_send_msg_wait_sem+0x28>)
 801ae06:	f7f9 fde6 	bl	80149d6 <sys_mutex_unlock>
  return ERR_OK;
 801ae0a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	3710      	adds	r7, #16
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}
 801ae14:	240079b0 	.word	0x240079b0

0801ae18 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b084      	sub	sp, #16
 801ae1c:	af02      	add	r7, sp, #8
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	6039      	str	r1, [r7, #0]
  lwip_init();
 801ae22:	f7f6 fbf3 	bl	801160c <lwip_init>

  tcpip_init_done = initfunc;
 801ae26:	4a17      	ldr	r2, [pc, #92]	; (801ae84 <tcpip_init+0x6c>)
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801ae2c:	4a16      	ldr	r2, [pc, #88]	; (801ae88 <tcpip_init+0x70>)
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801ae32:	2106      	movs	r1, #6
 801ae34:	4815      	ldr	r0, [pc, #84]	; (801ae8c <tcpip_init+0x74>)
 801ae36:	f7f9 fc3d 	bl	80146b4 <sys_mbox_new>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d006      	beq.n	801ae4e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801ae40:	4b13      	ldr	r3, [pc, #76]	; (801ae90 <tcpip_init+0x78>)
 801ae42:	f240 2261 	movw	r2, #609	; 0x261
 801ae46:	4913      	ldr	r1, [pc, #76]	; (801ae94 <tcpip_init+0x7c>)
 801ae48:	4813      	ldr	r0, [pc, #76]	; (801ae98 <tcpip_init+0x80>)
 801ae4a:	f001 fb3b 	bl	801c4c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801ae4e:	4813      	ldr	r0, [pc, #76]	; (801ae9c <tcpip_init+0x84>)
 801ae50:	f7f9 fd96 	bl	8014980 <sys_mutex_new>
 801ae54:	4603      	mov	r3, r0
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d006      	beq.n	801ae68 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801ae5a:	4b0d      	ldr	r3, [pc, #52]	; (801ae90 <tcpip_init+0x78>)
 801ae5c:	f240 2265 	movw	r2, #613	; 0x265
 801ae60:	490f      	ldr	r1, [pc, #60]	; (801aea0 <tcpip_init+0x88>)
 801ae62:	480d      	ldr	r0, [pc, #52]	; (801ae98 <tcpip_init+0x80>)
 801ae64:	f001 fb2e 	bl	801c4c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801ae68:	2300      	movs	r3, #0
 801ae6a:	9300      	str	r3, [sp, #0]
 801ae6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ae70:	2200      	movs	r2, #0
 801ae72:	490c      	ldr	r1, [pc, #48]	; (801aea4 <tcpip_init+0x8c>)
 801ae74:	480c      	ldr	r0, [pc, #48]	; (801aea8 <tcpip_init+0x90>)
 801ae76:	f7f9 fdbb 	bl	80149f0 <sys_thread_new>
}
 801ae7a:	bf00      	nop
 801ae7c:	3708      	adds	r7, #8
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	240079a4 	.word	0x240079a4
 801ae88:	240079a8 	.word	0x240079a8
 801ae8c:	240079ac 	.word	0x240079ac
 801ae90:	08022c68 	.word	0x08022c68
 801ae94:	08022d10 	.word	0x08022d10
 801ae98:	08022cd8 	.word	0x08022cd8
 801ae9c:	240079b0 	.word	0x240079b0
 801aea0:	08022d34 	.word	0x08022d34
 801aea4:	0801aba9 	.word	0x0801aba9
 801aea8:	08022d58 	.word	0x08022d58

0801aeac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b082      	sub	sp, #8
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801aeb4:	f7f9 fe2a 	bl	8014b0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801aeb8:	4b0a      	ldr	r3, [pc, #40]	; (801aee4 <tcpip_tcp_timer+0x38>)
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d103      	bne.n	801aec8 <tcpip_tcp_timer+0x1c>
 801aec0:	4b09      	ldr	r3, [pc, #36]	; (801aee8 <tcpip_tcp_timer+0x3c>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d005      	beq.n	801aed4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aec8:	2200      	movs	r2, #0
 801aeca:	4908      	ldr	r1, [pc, #32]	; (801aeec <tcpip_tcp_timer+0x40>)
 801aecc:	20fa      	movs	r0, #250	; 0xfa
 801aece:	f000 f8f3 	bl	801b0b8 <sys_timeout>
 801aed2:	e003      	b.n	801aedc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801aed4:	4b06      	ldr	r3, [pc, #24]	; (801aef0 <tcpip_tcp_timer+0x44>)
 801aed6:	2200      	movs	r2, #0
 801aed8:	601a      	str	r2, [r3, #0]
  }
}
 801aeda:	bf00      	nop
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}
 801aee4:	24007960 	.word	0x24007960
 801aee8:	24007964 	.word	0x24007964
 801aeec:	0801aead 	.word	0x0801aead
 801aef0:	240079bc 	.word	0x240079bc

0801aef4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801aef8:	4b0a      	ldr	r3, [pc, #40]	; (801af24 <tcp_timer_needed+0x30>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d10f      	bne.n	801af20 <tcp_timer_needed+0x2c>
 801af00:	4b09      	ldr	r3, [pc, #36]	; (801af28 <tcp_timer_needed+0x34>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d103      	bne.n	801af10 <tcp_timer_needed+0x1c>
 801af08:	4b08      	ldr	r3, [pc, #32]	; (801af2c <tcp_timer_needed+0x38>)
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d007      	beq.n	801af20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801af10:	4b04      	ldr	r3, [pc, #16]	; (801af24 <tcp_timer_needed+0x30>)
 801af12:	2201      	movs	r2, #1
 801af14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801af16:	2200      	movs	r2, #0
 801af18:	4905      	ldr	r1, [pc, #20]	; (801af30 <tcp_timer_needed+0x3c>)
 801af1a:	20fa      	movs	r0, #250	; 0xfa
 801af1c:	f000 f8cc 	bl	801b0b8 <sys_timeout>
  }
}
 801af20:	bf00      	nop
 801af22:	bd80      	pop	{r7, pc}
 801af24:	240079bc 	.word	0x240079bc
 801af28:	24007960 	.word	0x24007960
 801af2c:	24007964 	.word	0x24007964
 801af30:	0801aead 	.word	0x0801aead

0801af34 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b086      	sub	sp, #24
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801af40:	200a      	movs	r0, #10
 801af42:	f7f8 f94d 	bl	80131e0 <memp_malloc>
 801af46:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801af48:	693b      	ldr	r3, [r7, #16]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d109      	bne.n	801af62 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801af4e:	693b      	ldr	r3, [r7, #16]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d151      	bne.n	801aff8 <sys_timeout_abs+0xc4>
 801af54:	4b2a      	ldr	r3, [pc, #168]	; (801b000 <sys_timeout_abs+0xcc>)
 801af56:	22be      	movs	r2, #190	; 0xbe
 801af58:	492a      	ldr	r1, [pc, #168]	; (801b004 <sys_timeout_abs+0xd0>)
 801af5a:	482b      	ldr	r0, [pc, #172]	; (801b008 <sys_timeout_abs+0xd4>)
 801af5c:	f001 fab2 	bl	801c4c4 <iprintf>
    return;
 801af60:	e04a      	b.n	801aff8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801af62:	693b      	ldr	r3, [r7, #16]
 801af64:	2200      	movs	r2, #0
 801af66:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801af68:	693b      	ldr	r3, [r7, #16]
 801af6a:	68ba      	ldr	r2, [r7, #8]
 801af6c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	687a      	ldr	r2, [r7, #4]
 801af72:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801af74:	693b      	ldr	r3, [r7, #16]
 801af76:	68fa      	ldr	r2, [r7, #12]
 801af78:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801af7a:	4b24      	ldr	r3, [pc, #144]	; (801b00c <sys_timeout_abs+0xd8>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d103      	bne.n	801af8a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801af82:	4a22      	ldr	r2, [pc, #136]	; (801b00c <sys_timeout_abs+0xd8>)
 801af84:	693b      	ldr	r3, [r7, #16]
 801af86:	6013      	str	r3, [r2, #0]
    return;
 801af88:	e037      	b.n	801affa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801af8a:	693b      	ldr	r3, [r7, #16]
 801af8c:	685a      	ldr	r2, [r3, #4]
 801af8e:	4b1f      	ldr	r3, [pc, #124]	; (801b00c <sys_timeout_abs+0xd8>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	685b      	ldr	r3, [r3, #4]
 801af94:	1ad3      	subs	r3, r2, r3
 801af96:	0fdb      	lsrs	r3, r3, #31
 801af98:	f003 0301 	and.w	r3, r3, #1
 801af9c:	b2db      	uxtb	r3, r3
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d007      	beq.n	801afb2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801afa2:	4b1a      	ldr	r3, [pc, #104]	; (801b00c <sys_timeout_abs+0xd8>)
 801afa4:	681a      	ldr	r2, [r3, #0]
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801afaa:	4a18      	ldr	r2, [pc, #96]	; (801b00c <sys_timeout_abs+0xd8>)
 801afac:	693b      	ldr	r3, [r7, #16]
 801afae:	6013      	str	r3, [r2, #0]
 801afb0:	e023      	b.n	801affa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801afb2:	4b16      	ldr	r3, [pc, #88]	; (801b00c <sys_timeout_abs+0xd8>)
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	617b      	str	r3, [r7, #20]
 801afb8:	e01a      	b.n	801aff0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801afba:	697b      	ldr	r3, [r7, #20]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d00b      	beq.n	801afda <sys_timeout_abs+0xa6>
 801afc2:	693b      	ldr	r3, [r7, #16]
 801afc4:	685a      	ldr	r2, [r3, #4]
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	685b      	ldr	r3, [r3, #4]
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	0fdb      	lsrs	r3, r3, #31
 801afd0:	f003 0301 	and.w	r3, r3, #1
 801afd4:	b2db      	uxtb	r3, r3
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d007      	beq.n	801afea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801afda:	697b      	ldr	r3, [r7, #20]
 801afdc:	681a      	ldr	r2, [r3, #0]
 801afde:	693b      	ldr	r3, [r7, #16]
 801afe0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801afe2:	697b      	ldr	r3, [r7, #20]
 801afe4:	693a      	ldr	r2, [r7, #16]
 801afe6:	601a      	str	r2, [r3, #0]
        break;
 801afe8:	e007      	b.n	801affa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	617b      	str	r3, [r7, #20]
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d1e1      	bne.n	801afba <sys_timeout_abs+0x86>
 801aff6:	e000      	b.n	801affa <sys_timeout_abs+0xc6>
    return;
 801aff8:	bf00      	nop
      }
    }
  }
}
 801affa:	3718      	adds	r7, #24
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}
 801b000:	08022d68 	.word	0x08022d68
 801b004:	08022dbc 	.word	0x08022dbc
 801b008:	08022dfc 	.word	0x08022dfc
 801b00c:	240079b4 	.word	0x240079b4

0801b010 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b086      	sub	sp, #24
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	685b      	ldr	r3, [r3, #4]
 801b020:	4798      	blx	r3

  now = sys_now();
 801b022:	f7ed ff51 	bl	8008ec8 <sys_now>
 801b026:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	681a      	ldr	r2, [r3, #0]
 801b02c:	4b0f      	ldr	r3, [pc, #60]	; (801b06c <lwip_cyclic_timer+0x5c>)
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	4413      	add	r3, r2
 801b032:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b034:	68fa      	ldr	r2, [r7, #12]
 801b036:	693b      	ldr	r3, [r7, #16]
 801b038:	1ad3      	subs	r3, r2, r3
 801b03a:	0fdb      	lsrs	r3, r3, #31
 801b03c:	f003 0301 	and.w	r3, r3, #1
 801b040:	b2db      	uxtb	r3, r3
 801b042:	2b00      	cmp	r3, #0
 801b044:	d009      	beq.n	801b05a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	681a      	ldr	r2, [r3, #0]
 801b04a:	693b      	ldr	r3, [r7, #16]
 801b04c:	4413      	add	r3, r2
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	4907      	ldr	r1, [pc, #28]	; (801b070 <lwip_cyclic_timer+0x60>)
 801b052:	4618      	mov	r0, r3
 801b054:	f7ff ff6e 	bl	801af34 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b058:	e004      	b.n	801b064 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b05a:	687a      	ldr	r2, [r7, #4]
 801b05c:	4904      	ldr	r1, [pc, #16]	; (801b070 <lwip_cyclic_timer+0x60>)
 801b05e:	68f8      	ldr	r0, [r7, #12]
 801b060:	f7ff ff68 	bl	801af34 <sys_timeout_abs>
}
 801b064:	bf00      	nop
 801b066:	3718      	adds	r7, #24
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	240079b8 	.word	0x240079b8
 801b070:	0801b011 	.word	0x0801b011

0801b074 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b07a:	2301      	movs	r3, #1
 801b07c:	607b      	str	r3, [r7, #4]
 801b07e:	e00e      	b.n	801b09e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b080:	4a0b      	ldr	r2, [pc, #44]	; (801b0b0 <sys_timeouts_init+0x3c>)
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	00db      	lsls	r3, r3, #3
 801b08c:	4a08      	ldr	r2, [pc, #32]	; (801b0b0 <sys_timeouts_init+0x3c>)
 801b08e:	4413      	add	r3, r2
 801b090:	461a      	mov	r2, r3
 801b092:	4908      	ldr	r1, [pc, #32]	; (801b0b4 <sys_timeouts_init+0x40>)
 801b094:	f000 f810 	bl	801b0b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	3301      	adds	r3, #1
 801b09c:	607b      	str	r3, [r7, #4]
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2b04      	cmp	r3, #4
 801b0a2:	d9ed      	bls.n	801b080 <sys_timeouts_init+0xc>
  }
}
 801b0a4:	bf00      	nop
 801b0a6:	bf00      	nop
 801b0a8:	3708      	adds	r7, #8
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bd80      	pop	{r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	08046608 	.word	0x08046608
 801b0b4:	0801b011 	.word	0x0801b011

0801b0b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b086      	sub	sp, #24
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	60b9      	str	r1, [r7, #8]
 801b0c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b0ca:	d306      	bcc.n	801b0da <sys_timeout+0x22>
 801b0cc:	4b0a      	ldr	r3, [pc, #40]	; (801b0f8 <sys_timeout+0x40>)
 801b0ce:	f240 1229 	movw	r2, #297	; 0x129
 801b0d2:	490a      	ldr	r1, [pc, #40]	; (801b0fc <sys_timeout+0x44>)
 801b0d4:	480a      	ldr	r0, [pc, #40]	; (801b100 <sys_timeout+0x48>)
 801b0d6:	f001 f9f5 	bl	801c4c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b0da:	f7ed fef5 	bl	8008ec8 <sys_now>
 801b0de:	4602      	mov	r2, r0
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	4413      	add	r3, r2
 801b0e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b0e6:	687a      	ldr	r2, [r7, #4]
 801b0e8:	68b9      	ldr	r1, [r7, #8]
 801b0ea:	6978      	ldr	r0, [r7, #20]
 801b0ec:	f7ff ff22 	bl	801af34 <sys_timeout_abs>
#endif
}
 801b0f0:	bf00      	nop
 801b0f2:	3718      	adds	r7, #24
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	08022d68 	.word	0x08022d68
 801b0fc:	08022e24 	.word	0x08022e24
 801b100:	08022dfc 	.word	0x08022dfc

0801b104 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b084      	sub	sp, #16
 801b108:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b10a:	f7ed fedd 	bl	8008ec8 <sys_now>
 801b10e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b110:	4b17      	ldr	r3, [pc, #92]	; (801b170 <sys_check_timeouts+0x6c>)
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d022      	beq.n	801b162 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	685b      	ldr	r3, [r3, #4]
 801b120:	68fa      	ldr	r2, [r7, #12]
 801b122:	1ad3      	subs	r3, r2, r3
 801b124:	0fdb      	lsrs	r3, r3, #31
 801b126:	f003 0301 	and.w	r3, r3, #1
 801b12a:	b2db      	uxtb	r3, r3
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d11a      	bne.n	801b166 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	4a0e      	ldr	r2, [pc, #56]	; (801b170 <sys_check_timeouts+0x6c>)
 801b136:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	689b      	ldr	r3, [r3, #8]
 801b13c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b13e:	68bb      	ldr	r3, [r7, #8]
 801b140:	68db      	ldr	r3, [r3, #12]
 801b142:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	4a0a      	ldr	r2, [pc, #40]	; (801b174 <sys_check_timeouts+0x70>)
 801b14a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b14c:	68b9      	ldr	r1, [r7, #8]
 801b14e:	200a      	movs	r0, #10
 801b150:	f7f8 f8bc 	bl	80132cc <memp_free>
    if (handler != NULL) {
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d0da      	beq.n	801b110 <sys_check_timeouts+0xc>
      handler(arg);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	6838      	ldr	r0, [r7, #0]
 801b15e:	4798      	blx	r3
  do {
 801b160:	e7d6      	b.n	801b110 <sys_check_timeouts+0xc>
      return;
 801b162:	bf00      	nop
 801b164:	e000      	b.n	801b168 <sys_check_timeouts+0x64>
      return;
 801b166:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b168:	3710      	adds	r7, #16
 801b16a:	46bd      	mov	sp, r7
 801b16c:	bd80      	pop	{r7, pc}
 801b16e:	bf00      	nop
 801b170:	240079b4 	.word	0x240079b4
 801b174:	240079b8 	.word	0x240079b8

0801b178 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b17e:	4b16      	ldr	r3, [pc, #88]	; (801b1d8 <sys_timeouts_sleeptime+0x60>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d102      	bne.n	801b18c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b186:	f04f 33ff 	mov.w	r3, #4294967295
 801b18a:	e020      	b.n	801b1ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b18c:	f7ed fe9c 	bl	8008ec8 <sys_now>
 801b190:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b192:	4b11      	ldr	r3, [pc, #68]	; (801b1d8 <sys_timeouts_sleeptime+0x60>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	685a      	ldr	r2, [r3, #4]
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	1ad3      	subs	r3, r2, r3
 801b19c:	0fdb      	lsrs	r3, r3, #31
 801b19e:	f003 0301 	and.w	r3, r3, #1
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d001      	beq.n	801b1ac <sys_timeouts_sleeptime+0x34>
    return 0;
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	e010      	b.n	801b1ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b1ac:	4b0a      	ldr	r3, [pc, #40]	; (801b1d8 <sys_timeouts_sleeptime+0x60>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	685a      	ldr	r2, [r3, #4]
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	1ad3      	subs	r3, r2, r3
 801b1b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	da06      	bge.n	801b1cc <sys_timeouts_sleeptime+0x54>
 801b1be:	4b07      	ldr	r3, [pc, #28]	; (801b1dc <sys_timeouts_sleeptime+0x64>)
 801b1c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b1c4:	4906      	ldr	r1, [pc, #24]	; (801b1e0 <sys_timeouts_sleeptime+0x68>)
 801b1c6:	4807      	ldr	r0, [pc, #28]	; (801b1e4 <sys_timeouts_sleeptime+0x6c>)
 801b1c8:	f001 f97c 	bl	801c4c4 <iprintf>
    return ret;
 801b1cc:	683b      	ldr	r3, [r7, #0]
  }
}
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	3708      	adds	r7, #8
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}
 801b1d6:	bf00      	nop
 801b1d8:	240079b4 	.word	0x240079b4
 801b1dc:	08022d68 	.word	0x08022d68
 801b1e0:	08022e5c 	.word	0x08022e5c
 801b1e4:	08022dfc 	.word	0x08022dfc

0801b1e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b1ec:	f001 f982 	bl	801c4f4 <rand>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	b29b      	uxth	r3, r3
 801b1f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801b1fe:	b29a      	uxth	r2, r3
 801b200:	4b01      	ldr	r3, [pc, #4]	; (801b208 <udp_init+0x20>)
 801b202:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b204:	bf00      	nop
 801b206:	bd80      	pop	{r7, pc}
 801b208:	24000034 	.word	0x24000034

0801b20c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b20c:	b480      	push	{r7}
 801b20e:	b083      	sub	sp, #12
 801b210:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b212:	2300      	movs	r3, #0
 801b214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b216:	4b17      	ldr	r3, [pc, #92]	; (801b274 <udp_new_port+0x68>)
 801b218:	881b      	ldrh	r3, [r3, #0]
 801b21a:	1c5a      	adds	r2, r3, #1
 801b21c:	b291      	uxth	r1, r2
 801b21e:	4a15      	ldr	r2, [pc, #84]	; (801b274 <udp_new_port+0x68>)
 801b220:	8011      	strh	r1, [r2, #0]
 801b222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b226:	4293      	cmp	r3, r2
 801b228:	d103      	bne.n	801b232 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b22a:	4b12      	ldr	r3, [pc, #72]	; (801b274 <udp_new_port+0x68>)
 801b22c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b232:	4b11      	ldr	r3, [pc, #68]	; (801b278 <udp_new_port+0x6c>)
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	603b      	str	r3, [r7, #0]
 801b238:	e011      	b.n	801b25e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	8a5a      	ldrh	r2, [r3, #18]
 801b23e:	4b0d      	ldr	r3, [pc, #52]	; (801b274 <udp_new_port+0x68>)
 801b240:	881b      	ldrh	r3, [r3, #0]
 801b242:	429a      	cmp	r2, r3
 801b244:	d108      	bne.n	801b258 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b246:	88fb      	ldrh	r3, [r7, #6]
 801b248:	3301      	adds	r3, #1
 801b24a:	80fb      	strh	r3, [r7, #6]
 801b24c:	88fb      	ldrh	r3, [r7, #6]
 801b24e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b252:	d3e0      	bcc.n	801b216 <udp_new_port+0xa>
        return 0;
 801b254:	2300      	movs	r3, #0
 801b256:	e007      	b.n	801b268 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b258:	683b      	ldr	r3, [r7, #0]
 801b25a:	68db      	ldr	r3, [r3, #12]
 801b25c:	603b      	str	r3, [r7, #0]
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d1ea      	bne.n	801b23a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b264:	4b03      	ldr	r3, [pc, #12]	; (801b274 <udp_new_port+0x68>)
 801b266:	881b      	ldrh	r3, [r3, #0]
}
 801b268:	4618      	mov	r0, r3
 801b26a:	370c      	adds	r7, #12
 801b26c:	46bd      	mov	sp, r7
 801b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b272:	4770      	bx	lr
 801b274:	24000034 	.word	0x24000034
 801b278:	240079c0 	.word	0x240079c0

0801b27c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b084      	sub	sp, #16
 801b280:	af00      	add	r7, sp, #0
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	60b9      	str	r1, [r7, #8]
 801b286:	4613      	mov	r3, r2
 801b288:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b28a:	68fb      	ldr	r3, [r7, #12]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d105      	bne.n	801b29c <udp_input_local_match+0x20>
 801b290:	4b27      	ldr	r3, [pc, #156]	; (801b330 <udp_input_local_match+0xb4>)
 801b292:	2287      	movs	r2, #135	; 0x87
 801b294:	4927      	ldr	r1, [pc, #156]	; (801b334 <udp_input_local_match+0xb8>)
 801b296:	4828      	ldr	r0, [pc, #160]	; (801b338 <udp_input_local_match+0xbc>)
 801b298:	f001 f914 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b29c:	68bb      	ldr	r3, [r7, #8]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d105      	bne.n	801b2ae <udp_input_local_match+0x32>
 801b2a2:	4b23      	ldr	r3, [pc, #140]	; (801b330 <udp_input_local_match+0xb4>)
 801b2a4:	2288      	movs	r2, #136	; 0x88
 801b2a6:	4925      	ldr	r1, [pc, #148]	; (801b33c <udp_input_local_match+0xc0>)
 801b2a8:	4823      	ldr	r0, [pc, #140]	; (801b338 <udp_input_local_match+0xbc>)
 801b2aa:	f001 f90b 	bl	801c4c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	7a1b      	ldrb	r3, [r3, #8]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d00b      	beq.n	801b2ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	7a1a      	ldrb	r2, [r3, #8]
 801b2ba:	4b21      	ldr	r3, [pc, #132]	; (801b340 <udp_input_local_match+0xc4>)
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b2c2:	3301      	adds	r3, #1
 801b2c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	d001      	beq.n	801b2ce <udp_input_local_match+0x52>
    return 0;
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	e02b      	b.n	801b326 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b2ce:	79fb      	ldrb	r3, [r7, #7]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d018      	beq.n	801b306 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d013      	beq.n	801b302 <udp_input_local_match+0x86>
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d00f      	beq.n	801b302 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b2e2:	4b17      	ldr	r3, [pc, #92]	; (801b340 <udp_input_local_match+0xc4>)
 801b2e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2ea:	d00a      	beq.n	801b302 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	681a      	ldr	r2, [r3, #0]
 801b2f0:	4b13      	ldr	r3, [pc, #76]	; (801b340 <udp_input_local_match+0xc4>)
 801b2f2:	695b      	ldr	r3, [r3, #20]
 801b2f4:	405a      	eors	r2, r3
 801b2f6:	68bb      	ldr	r3, [r7, #8]
 801b2f8:	3308      	adds	r3, #8
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d110      	bne.n	801b324 <udp_input_local_match+0xa8>
          return 1;
 801b302:	2301      	movs	r3, #1
 801b304:	e00f      	b.n	801b326 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d009      	beq.n	801b320 <udp_input_local_match+0xa4>
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d005      	beq.n	801b320 <udp_input_local_match+0xa4>
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	681a      	ldr	r2, [r3, #0]
 801b318:	4b09      	ldr	r3, [pc, #36]	; (801b340 <udp_input_local_match+0xc4>)
 801b31a:	695b      	ldr	r3, [r3, #20]
 801b31c:	429a      	cmp	r2, r3
 801b31e:	d101      	bne.n	801b324 <udp_input_local_match+0xa8>
        return 1;
 801b320:	2301      	movs	r3, #1
 801b322:	e000      	b.n	801b326 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b324:	2300      	movs	r3, #0
}
 801b326:	4618      	mov	r0, r3
 801b328:	3710      	adds	r7, #16
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	08022e70 	.word	0x08022e70
 801b334:	08022ec0 	.word	0x08022ec0
 801b338:	08022ee4 	.word	0x08022ee4
 801b33c:	08022f0c 	.word	0x08022f0c
 801b340:	24004820 	.word	0x24004820

0801b344 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b344:	b590      	push	{r4, r7, lr}
 801b346:	b08d      	sub	sp, #52	; 0x34
 801b348:	af02      	add	r7, sp, #8
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b34e:	2300      	movs	r3, #0
 801b350:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d105      	bne.n	801b364 <udp_input+0x20>
 801b358:	4b7c      	ldr	r3, [pc, #496]	; (801b54c <udp_input+0x208>)
 801b35a:	22cf      	movs	r2, #207	; 0xcf
 801b35c:	497c      	ldr	r1, [pc, #496]	; (801b550 <udp_input+0x20c>)
 801b35e:	487d      	ldr	r0, [pc, #500]	; (801b554 <udp_input+0x210>)
 801b360:	f001 f8b0 	bl	801c4c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d105      	bne.n	801b376 <udp_input+0x32>
 801b36a:	4b78      	ldr	r3, [pc, #480]	; (801b54c <udp_input+0x208>)
 801b36c:	22d0      	movs	r2, #208	; 0xd0
 801b36e:	497a      	ldr	r1, [pc, #488]	; (801b558 <udp_input+0x214>)
 801b370:	4878      	ldr	r0, [pc, #480]	; (801b554 <udp_input+0x210>)
 801b372:	f001 f8a7 	bl	801c4c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	895b      	ldrh	r3, [r3, #10]
 801b37a:	2b07      	cmp	r3, #7
 801b37c:	d803      	bhi.n	801b386 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b37e:	6878      	ldr	r0, [r7, #4]
 801b380:	f7f8 feee 	bl	8014160 <pbuf_free>
    goto end;
 801b384:	e0de      	b.n	801b544 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	685b      	ldr	r3, [r3, #4]
 801b38a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b38c:	4b73      	ldr	r3, [pc, #460]	; (801b55c <udp_input+0x218>)
 801b38e:	695b      	ldr	r3, [r3, #20]
 801b390:	4a72      	ldr	r2, [pc, #456]	; (801b55c <udp_input+0x218>)
 801b392:	6812      	ldr	r2, [r2, #0]
 801b394:	4611      	mov	r1, r2
 801b396:	4618      	mov	r0, r3
 801b398:	f7f6 fc04 	bl	8011ba4 <ip4_addr_isbroadcast_u32>
 801b39c:	4603      	mov	r3, r0
 801b39e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b3a0:	697b      	ldr	r3, [r7, #20]
 801b3a2:	881b      	ldrh	r3, [r3, #0]
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7f2 ff90 	bl	800e2cc <lwip_htons>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	885b      	ldrh	r3, [r3, #2]
 801b3b4:	b29b      	uxth	r3, r3
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f7f2 ff88 	bl	800e2cc <lwip_htons>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b3cc:	4b64      	ldr	r3, [pc, #400]	; (801b560 <udp_input+0x21c>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	627b      	str	r3, [r7, #36]	; 0x24
 801b3d2:	e054      	b.n	801b47e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d6:	8a5b      	ldrh	r3, [r3, #18]
 801b3d8:	89fa      	ldrh	r2, [r7, #14]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d14a      	bne.n	801b474 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b3de:	7cfb      	ldrb	r3, [r7, #19]
 801b3e0:	461a      	mov	r2, r3
 801b3e2:	6839      	ldr	r1, [r7, #0]
 801b3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3e6:	f7ff ff49 	bl	801b27c <udp_input_local_match>
 801b3ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d041      	beq.n	801b474 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	7c1b      	ldrb	r3, [r3, #16]
 801b3f4:	f003 0304 	and.w	r3, r3, #4
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d11d      	bne.n	801b438 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b3fc:	69fb      	ldr	r3, [r7, #28]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d102      	bne.n	801b408 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b404:	61fb      	str	r3, [r7, #28]
 801b406:	e017      	b.n	801b438 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b408:	7cfb      	ldrb	r3, [r7, #19]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d014      	beq.n	801b438 <udp_input+0xf4>
 801b40e:	4b53      	ldr	r3, [pc, #332]	; (801b55c <udp_input+0x218>)
 801b410:	695b      	ldr	r3, [r3, #20]
 801b412:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b416:	d10f      	bne.n	801b438 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b418:	69fb      	ldr	r3, [r7, #28]
 801b41a:	681a      	ldr	r2, [r3, #0]
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	3304      	adds	r3, #4
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	429a      	cmp	r2, r3
 801b424:	d008      	beq.n	801b438 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b428:	681a      	ldr	r2, [r3, #0]
 801b42a:	683b      	ldr	r3, [r7, #0]
 801b42c:	3304      	adds	r3, #4
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	429a      	cmp	r2, r3
 801b432:	d101      	bne.n	801b438 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b436:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b43a:	8a9b      	ldrh	r3, [r3, #20]
 801b43c:	8a3a      	ldrh	r2, [r7, #16]
 801b43e:	429a      	cmp	r2, r3
 801b440:	d118      	bne.n	801b474 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b444:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b446:	2b00      	cmp	r3, #0
 801b448:	d005      	beq.n	801b456 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b44c:	685a      	ldr	r2, [r3, #4]
 801b44e:	4b43      	ldr	r3, [pc, #268]	; (801b55c <udp_input+0x218>)
 801b450:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b452:	429a      	cmp	r2, r3
 801b454:	d10e      	bne.n	801b474 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b456:	6a3b      	ldr	r3, [r7, #32]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d014      	beq.n	801b486 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b45e:	68da      	ldr	r2, [r3, #12]
 801b460:	6a3b      	ldr	r3, [r7, #32]
 801b462:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b464:	4b3e      	ldr	r3, [pc, #248]	; (801b560 <udp_input+0x21c>)
 801b466:	681a      	ldr	r2, [r3, #0]
 801b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b46a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b46c:	4a3c      	ldr	r2, [pc, #240]	; (801b560 <udp_input+0x21c>)
 801b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b470:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b472:	e008      	b.n	801b486 <udp_input+0x142>
      }
    }

    prev = pcb;
 801b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b476:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47a:	68db      	ldr	r3, [r3, #12]
 801b47c:	627b      	str	r3, [r7, #36]	; 0x24
 801b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b480:	2b00      	cmp	r3, #0
 801b482:	d1a7      	bne.n	801b3d4 <udp_input+0x90>
 801b484:	e000      	b.n	801b488 <udp_input+0x144>
        break;
 801b486:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d101      	bne.n	801b492 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b48e:	69fb      	ldr	r3, [r7, #28]
 801b490:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b494:	2b00      	cmp	r3, #0
 801b496:	d002      	beq.n	801b49e <udp_input+0x15a>
    for_us = 1;
 801b498:	2301      	movs	r3, #1
 801b49a:	76fb      	strb	r3, [r7, #27]
 801b49c:	e00a      	b.n	801b4b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b49e:	683b      	ldr	r3, [r7, #0]
 801b4a0:	3304      	adds	r3, #4
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	4b2d      	ldr	r3, [pc, #180]	; (801b55c <udp_input+0x218>)
 801b4a6:	695b      	ldr	r3, [r3, #20]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	bf0c      	ite	eq
 801b4ac:	2301      	moveq	r3, #1
 801b4ae:	2300      	movne	r3, #0
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b4b4:	7efb      	ldrb	r3, [r7, #27]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d041      	beq.n	801b53e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b4ba:	2108      	movs	r1, #8
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7f8 fdc9 	bl	8014054 <pbuf_remove_header>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d00a      	beq.n	801b4de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b4c8:	4b20      	ldr	r3, [pc, #128]	; (801b54c <udp_input+0x208>)
 801b4ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b4ce:	4925      	ldr	r1, [pc, #148]	; (801b564 <udp_input+0x220>)
 801b4d0:	4820      	ldr	r0, [pc, #128]	; (801b554 <udp_input+0x210>)
 801b4d2:	f000 fff7 	bl	801c4c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b4d6:	6878      	ldr	r0, [r7, #4]
 801b4d8:	f7f8 fe42 	bl	8014160 <pbuf_free>
      goto end;
 801b4dc:	e032      	b.n	801b544 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d012      	beq.n	801b50a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e6:	699b      	ldr	r3, [r3, #24]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d00a      	beq.n	801b502 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ee:	699c      	ldr	r4, [r3, #24]
 801b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4f2:	69d8      	ldr	r0, [r3, #28]
 801b4f4:	8a3b      	ldrh	r3, [r7, #16]
 801b4f6:	9300      	str	r3, [sp, #0]
 801b4f8:	4b1b      	ldr	r3, [pc, #108]	; (801b568 <udp_input+0x224>)
 801b4fa:	687a      	ldr	r2, [r7, #4]
 801b4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b4fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b500:	e021      	b.n	801b546 <udp_input+0x202>
        pbuf_free(p);
 801b502:	6878      	ldr	r0, [r7, #4]
 801b504:	f7f8 fe2c 	bl	8014160 <pbuf_free>
        goto end;
 801b508:	e01c      	b.n	801b544 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b50a:	7cfb      	ldrb	r3, [r7, #19]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d112      	bne.n	801b536 <udp_input+0x1f2>
 801b510:	4b12      	ldr	r3, [pc, #72]	; (801b55c <udp_input+0x218>)
 801b512:	695b      	ldr	r3, [r3, #20]
 801b514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b518:	2be0      	cmp	r3, #224	; 0xe0
 801b51a:	d00c      	beq.n	801b536 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b51c:	4b0f      	ldr	r3, [pc, #60]	; (801b55c <udp_input+0x218>)
 801b51e:	899b      	ldrh	r3, [r3, #12]
 801b520:	3308      	adds	r3, #8
 801b522:	b29b      	uxth	r3, r3
 801b524:	b21b      	sxth	r3, r3
 801b526:	4619      	mov	r1, r3
 801b528:	6878      	ldr	r0, [r7, #4]
 801b52a:	f7f8 fe06 	bl	801413a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b52e:	2103      	movs	r1, #3
 801b530:	6878      	ldr	r0, [r7, #4]
 801b532:	f7f5 ff1b 	bl	801136c <icmp_dest_unreach>
      pbuf_free(p);
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7f8 fe12 	bl	8014160 <pbuf_free>
  return;
 801b53c:	e003      	b.n	801b546 <udp_input+0x202>
    pbuf_free(p);
 801b53e:	6878      	ldr	r0, [r7, #4]
 801b540:	f7f8 fe0e 	bl	8014160 <pbuf_free>
  return;
 801b544:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b546:	372c      	adds	r7, #44	; 0x2c
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd90      	pop	{r4, r7, pc}
 801b54c:	08022e70 	.word	0x08022e70
 801b550:	08022f34 	.word	0x08022f34
 801b554:	08022ee4 	.word	0x08022ee4
 801b558:	08022f4c 	.word	0x08022f4c
 801b55c:	24004820 	.word	0x24004820
 801b560:	240079c0 	.word	0x240079c0
 801b564:	08022f68 	.word	0x08022f68
 801b568:	24004830 	.word	0x24004830

0801b56c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b088      	sub	sp, #32
 801b570:	af02      	add	r7, sp, #8
 801b572:	60f8      	str	r0, [r7, #12]
 801b574:	60b9      	str	r1, [r7, #8]
 801b576:	607a      	str	r2, [r7, #4]
 801b578:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d109      	bne.n	801b594 <udp_sendto_if+0x28>
 801b580:	4b2e      	ldr	r3, [pc, #184]	; (801b63c <udp_sendto_if+0xd0>)
 801b582:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b586:	492e      	ldr	r1, [pc, #184]	; (801b640 <udp_sendto_if+0xd4>)
 801b588:	482e      	ldr	r0, [pc, #184]	; (801b644 <udp_sendto_if+0xd8>)
 801b58a:	f000 ff9b 	bl	801c4c4 <iprintf>
 801b58e:	f06f 030f 	mvn.w	r3, #15
 801b592:	e04f      	b.n	801b634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	2b00      	cmp	r3, #0
 801b598:	d109      	bne.n	801b5ae <udp_sendto_if+0x42>
 801b59a:	4b28      	ldr	r3, [pc, #160]	; (801b63c <udp_sendto_if+0xd0>)
 801b59c:	f240 2281 	movw	r2, #641	; 0x281
 801b5a0:	4929      	ldr	r1, [pc, #164]	; (801b648 <udp_sendto_if+0xdc>)
 801b5a2:	4828      	ldr	r0, [pc, #160]	; (801b644 <udp_sendto_if+0xd8>)
 801b5a4:	f000 ff8e 	bl	801c4c4 <iprintf>
 801b5a8:	f06f 030f 	mvn.w	r3, #15
 801b5ac:	e042      	b.n	801b634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d109      	bne.n	801b5c8 <udp_sendto_if+0x5c>
 801b5b4:	4b21      	ldr	r3, [pc, #132]	; (801b63c <udp_sendto_if+0xd0>)
 801b5b6:	f240 2282 	movw	r2, #642	; 0x282
 801b5ba:	4924      	ldr	r1, [pc, #144]	; (801b64c <udp_sendto_if+0xe0>)
 801b5bc:	4821      	ldr	r0, [pc, #132]	; (801b644 <udp_sendto_if+0xd8>)
 801b5be:	f000 ff81 	bl	801c4c4 <iprintf>
 801b5c2:	f06f 030f 	mvn.w	r3, #15
 801b5c6:	e035      	b.n	801b634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b5c8:	6a3b      	ldr	r3, [r7, #32]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d109      	bne.n	801b5e2 <udp_sendto_if+0x76>
 801b5ce:	4b1b      	ldr	r3, [pc, #108]	; (801b63c <udp_sendto_if+0xd0>)
 801b5d0:	f240 2283 	movw	r2, #643	; 0x283
 801b5d4:	491e      	ldr	r1, [pc, #120]	; (801b650 <udp_sendto_if+0xe4>)
 801b5d6:	481b      	ldr	r0, [pc, #108]	; (801b644 <udp_sendto_if+0xd8>)
 801b5d8:	f000 ff74 	bl	801c4c4 <iprintf>
 801b5dc:	f06f 030f 	mvn.w	r3, #15
 801b5e0:	e028      	b.n	801b634 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d009      	beq.n	801b5fc <udp_sendto_if+0x90>
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d005      	beq.n	801b5fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5f8:	2be0      	cmp	r3, #224	; 0xe0
 801b5fa:	d103      	bne.n	801b604 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b5fc:	6a3b      	ldr	r3, [r7, #32]
 801b5fe:	3304      	adds	r3, #4
 801b600:	617b      	str	r3, [r7, #20]
 801b602:	e00b      	b.n	801b61c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	681a      	ldr	r2, [r3, #0]
 801b608:	6a3b      	ldr	r3, [r7, #32]
 801b60a:	3304      	adds	r3, #4
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	429a      	cmp	r2, r3
 801b610:	d002      	beq.n	801b618 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b612:	f06f 0303 	mvn.w	r3, #3
 801b616:	e00d      	b.n	801b634 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b61c:	887a      	ldrh	r2, [r7, #2]
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	9301      	str	r3, [sp, #4]
 801b622:	6a3b      	ldr	r3, [r7, #32]
 801b624:	9300      	str	r3, [sp, #0]
 801b626:	4613      	mov	r3, r2
 801b628:	687a      	ldr	r2, [r7, #4]
 801b62a:	68b9      	ldr	r1, [r7, #8]
 801b62c:	68f8      	ldr	r0, [r7, #12]
 801b62e:	f000 f811 	bl	801b654 <udp_sendto_if_src>
 801b632:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b634:	4618      	mov	r0, r3
 801b636:	3718      	adds	r7, #24
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}
 801b63c:	08022e70 	.word	0x08022e70
 801b640:	08023004 	.word	0x08023004
 801b644:	08022ee4 	.word	0x08022ee4
 801b648:	08023020 	.word	0x08023020
 801b64c:	0802303c 	.word	0x0802303c
 801b650:	0802305c 	.word	0x0802305c

0801b654 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b08c      	sub	sp, #48	; 0x30
 801b658:	af04      	add	r7, sp, #16
 801b65a:	60f8      	str	r0, [r7, #12]
 801b65c:	60b9      	str	r1, [r7, #8]
 801b65e:	607a      	str	r2, [r7, #4]
 801b660:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d109      	bne.n	801b67c <udp_sendto_if_src+0x28>
 801b668:	4b65      	ldr	r3, [pc, #404]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b66a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b66e:	4965      	ldr	r1, [pc, #404]	; (801b804 <udp_sendto_if_src+0x1b0>)
 801b670:	4865      	ldr	r0, [pc, #404]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b672:	f000 ff27 	bl	801c4c4 <iprintf>
 801b676:	f06f 030f 	mvn.w	r3, #15
 801b67a:	e0bc      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b67c:	68bb      	ldr	r3, [r7, #8]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d109      	bne.n	801b696 <udp_sendto_if_src+0x42>
 801b682:	4b5f      	ldr	r3, [pc, #380]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b684:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b688:	4960      	ldr	r1, [pc, #384]	; (801b80c <udp_sendto_if_src+0x1b8>)
 801b68a:	485f      	ldr	r0, [pc, #380]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b68c:	f000 ff1a 	bl	801c4c4 <iprintf>
 801b690:	f06f 030f 	mvn.w	r3, #15
 801b694:	e0af      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d109      	bne.n	801b6b0 <udp_sendto_if_src+0x5c>
 801b69c:	4b58      	ldr	r3, [pc, #352]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b69e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b6a2:	495b      	ldr	r1, [pc, #364]	; (801b810 <udp_sendto_if_src+0x1bc>)
 801b6a4:	4858      	ldr	r0, [pc, #352]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b6a6:	f000 ff0d 	bl	801c4c4 <iprintf>
 801b6aa:	f06f 030f 	mvn.w	r3, #15
 801b6ae:	e0a2      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d109      	bne.n	801b6ca <udp_sendto_if_src+0x76>
 801b6b6:	4b52      	ldr	r3, [pc, #328]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b6b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b6bc:	4955      	ldr	r1, [pc, #340]	; (801b814 <udp_sendto_if_src+0x1c0>)
 801b6be:	4852      	ldr	r0, [pc, #328]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b6c0:	f000 ff00 	bl	801c4c4 <iprintf>
 801b6c4:	f06f 030f 	mvn.w	r3, #15
 801b6c8:	e095      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d109      	bne.n	801b6e4 <udp_sendto_if_src+0x90>
 801b6d0:	4b4b      	ldr	r3, [pc, #300]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b6d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b6d6:	4950      	ldr	r1, [pc, #320]	; (801b818 <udp_sendto_if_src+0x1c4>)
 801b6d8:	484b      	ldr	r0, [pc, #300]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b6da:	f000 fef3 	bl	801c4c4 <iprintf>
 801b6de:	f06f 030f 	mvn.w	r3, #15
 801b6e2:	e088      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	8a5b      	ldrh	r3, [r3, #18]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d10f      	bne.n	801b70c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b6ec:	68f9      	ldr	r1, [r7, #12]
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	8a5b      	ldrh	r3, [r3, #18]
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	68f8      	ldr	r0, [r7, #12]
 801b6f6:	f000 f893 	bl	801b820 <udp_bind>
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b6fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d002      	beq.n	801b70c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b706:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b70a:	e074      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	891b      	ldrh	r3, [r3, #8]
 801b710:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b714:	4293      	cmp	r3, r2
 801b716:	d902      	bls.n	801b71e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b718:	f04f 33ff 	mov.w	r3, #4294967295
 801b71c:	e06b      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b71e:	2108      	movs	r1, #8
 801b720:	68b8      	ldr	r0, [r7, #8]
 801b722:	f7f8 fc87 	bl	8014034 <pbuf_add_header>
 801b726:	4603      	mov	r3, r0
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d015      	beq.n	801b758 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b72c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b730:	2108      	movs	r1, #8
 801b732:	2022      	movs	r0, #34	; 0x22
 801b734:	f7f8 fa30 	bl	8013b98 <pbuf_alloc>
 801b738:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b73a:	69fb      	ldr	r3, [r7, #28]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d102      	bne.n	801b746 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b740:	f04f 33ff 	mov.w	r3, #4294967295
 801b744:	e057      	b.n	801b7f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b746:	68bb      	ldr	r3, [r7, #8]
 801b748:	891b      	ldrh	r3, [r3, #8]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d006      	beq.n	801b75c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b74e:	68b9      	ldr	r1, [r7, #8]
 801b750:	69f8      	ldr	r0, [r7, #28]
 801b752:	f7f8 fe29 	bl	80143a8 <pbuf_chain>
 801b756:	e001      	b.n	801b75c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b758:	68bb      	ldr	r3, [r7, #8]
 801b75a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b75c:	69fb      	ldr	r3, [r7, #28]
 801b75e:	895b      	ldrh	r3, [r3, #10]
 801b760:	2b07      	cmp	r3, #7
 801b762:	d806      	bhi.n	801b772 <udp_sendto_if_src+0x11e>
 801b764:	4b26      	ldr	r3, [pc, #152]	; (801b800 <udp_sendto_if_src+0x1ac>)
 801b766:	f240 320d 	movw	r2, #781	; 0x30d
 801b76a:	492c      	ldr	r1, [pc, #176]	; (801b81c <udp_sendto_if_src+0x1c8>)
 801b76c:	4826      	ldr	r0, [pc, #152]	; (801b808 <udp_sendto_if_src+0x1b4>)
 801b76e:	f000 fea9 	bl	801c4c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b772:	69fb      	ldr	r3, [r7, #28]
 801b774:	685b      	ldr	r3, [r3, #4]
 801b776:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	8a5b      	ldrh	r3, [r3, #18]
 801b77c:	4618      	mov	r0, r3
 801b77e:	f7f2 fda5 	bl	800e2cc <lwip_htons>
 801b782:	4603      	mov	r3, r0
 801b784:	461a      	mov	r2, r3
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b78a:	887b      	ldrh	r3, [r7, #2]
 801b78c:	4618      	mov	r0, r3
 801b78e:	f7f2 fd9d 	bl	800e2cc <lwip_htons>
 801b792:	4603      	mov	r3, r0
 801b794:	461a      	mov	r2, r3
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b79a:	697b      	ldr	r3, [r7, #20]
 801b79c:	2200      	movs	r2, #0
 801b79e:	719a      	strb	r2, [r3, #6]
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b7a4:	69fb      	ldr	r3, [r7, #28]
 801b7a6:	891b      	ldrh	r3, [r3, #8]
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f7f2 fd8f 	bl	800e2cc <lwip_htons>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b7b6:	2311      	movs	r3, #17
 801b7b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	7adb      	ldrb	r3, [r3, #11]
 801b7be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	7a9b      	ldrb	r3, [r3, #10]
 801b7c4:	7cb9      	ldrb	r1, [r7, #18]
 801b7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b7c8:	9202      	str	r2, [sp, #8]
 801b7ca:	7cfa      	ldrb	r2, [r7, #19]
 801b7cc:	9201      	str	r2, [sp, #4]
 801b7ce:	9300      	str	r3, [sp, #0]
 801b7d0:	460b      	mov	r3, r1
 801b7d2:	687a      	ldr	r2, [r7, #4]
 801b7d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b7d6:	69f8      	ldr	r0, [r7, #28]
 801b7d8:	f7f6 f936 	bl	8011a48 <ip4_output_if_src>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b7e0:	69fa      	ldr	r2, [r7, #28]
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	429a      	cmp	r2, r3
 801b7e6:	d004      	beq.n	801b7f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b7e8:	69f8      	ldr	r0, [r7, #28]
 801b7ea:	f7f8 fcb9 	bl	8014160 <pbuf_free>
    q = NULL;
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b7f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	3720      	adds	r7, #32
 801b7fa:	46bd      	mov	sp, r7
 801b7fc:	bd80      	pop	{r7, pc}
 801b7fe:	bf00      	nop
 801b800:	08022e70 	.word	0x08022e70
 801b804:	0802307c 	.word	0x0802307c
 801b808:	08022ee4 	.word	0x08022ee4
 801b80c:	0802309c 	.word	0x0802309c
 801b810:	080230bc 	.word	0x080230bc
 801b814:	080230e0 	.word	0x080230e0
 801b818:	08023104 	.word	0x08023104
 801b81c:	08023128 	.word	0x08023128

0801b820 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b820:	b580      	push	{r7, lr}
 801b822:	b086      	sub	sp, #24
 801b824:	af00      	add	r7, sp, #0
 801b826:	60f8      	str	r0, [r7, #12]
 801b828:	60b9      	str	r1, [r7, #8]
 801b82a:	4613      	mov	r3, r2
 801b82c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d101      	bne.n	801b838 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b834:	4b39      	ldr	r3, [pc, #228]	; (801b91c <udp_bind+0xfc>)
 801b836:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d109      	bne.n	801b852 <udp_bind+0x32>
 801b83e:	4b38      	ldr	r3, [pc, #224]	; (801b920 <udp_bind+0x100>)
 801b840:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b844:	4937      	ldr	r1, [pc, #220]	; (801b924 <udp_bind+0x104>)
 801b846:	4838      	ldr	r0, [pc, #224]	; (801b928 <udp_bind+0x108>)
 801b848:	f000 fe3c 	bl	801c4c4 <iprintf>
 801b84c:	f06f 030f 	mvn.w	r3, #15
 801b850:	e060      	b.n	801b914 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b852:	2300      	movs	r3, #0
 801b854:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b856:	4b35      	ldr	r3, [pc, #212]	; (801b92c <udp_bind+0x10c>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	617b      	str	r3, [r7, #20]
 801b85c:	e009      	b.n	801b872 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b85e:	68fa      	ldr	r2, [r7, #12]
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	429a      	cmp	r2, r3
 801b864:	d102      	bne.n	801b86c <udp_bind+0x4c>
      rebind = 1;
 801b866:	2301      	movs	r3, #1
 801b868:	74fb      	strb	r3, [r7, #19]
      break;
 801b86a:	e005      	b.n	801b878 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b86c:	697b      	ldr	r3, [r7, #20]
 801b86e:	68db      	ldr	r3, [r3, #12]
 801b870:	617b      	str	r3, [r7, #20]
 801b872:	697b      	ldr	r3, [r7, #20]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d1f2      	bne.n	801b85e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b878:	88fb      	ldrh	r3, [r7, #6]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d109      	bne.n	801b892 <udp_bind+0x72>
    port = udp_new_port();
 801b87e:	f7ff fcc5 	bl	801b20c <udp_new_port>
 801b882:	4603      	mov	r3, r0
 801b884:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b886:	88fb      	ldrh	r3, [r7, #6]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d12c      	bne.n	801b8e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b88c:	f06f 0307 	mvn.w	r3, #7
 801b890:	e040      	b.n	801b914 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b892:	4b26      	ldr	r3, [pc, #152]	; (801b92c <udp_bind+0x10c>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	617b      	str	r3, [r7, #20]
 801b898:	e022      	b.n	801b8e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b89a:	68fa      	ldr	r2, [r7, #12]
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d01b      	beq.n	801b8da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b8a2:	697b      	ldr	r3, [r7, #20]
 801b8a4:	8a5b      	ldrh	r3, [r3, #18]
 801b8a6:	88fa      	ldrh	r2, [r7, #6]
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d116      	bne.n	801b8da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	681a      	ldr	r2, [r3, #0]
 801b8b0:	68bb      	ldr	r3, [r7, #8]
 801b8b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d00d      	beq.n	801b8d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b8b8:	68bb      	ldr	r3, [r7, #8]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d00a      	beq.n	801b8d4 <udp_bind+0xb4>
 801b8be:	68bb      	ldr	r3, [r7, #8]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d006      	beq.n	801b8d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b8c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d003      	beq.n	801b8d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b8cc:	697b      	ldr	r3, [r7, #20]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d102      	bne.n	801b8da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b8d4:	f06f 0307 	mvn.w	r3, #7
 801b8d8:	e01c      	b.n	801b914 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	68db      	ldr	r3, [r3, #12]
 801b8de:	617b      	str	r3, [r7, #20]
 801b8e0:	697b      	ldr	r3, [r7, #20]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d1d9      	bne.n	801b89a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d002      	beq.n	801b8f2 <udp_bind+0xd2>
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	e000      	b.n	801b8f4 <udp_bind+0xd4>
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	68fa      	ldr	r2, [r7, #12]
 801b8f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	88fa      	ldrh	r2, [r7, #6]
 801b8fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b8fe:	7cfb      	ldrb	r3, [r7, #19]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d106      	bne.n	801b912 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b904:	4b09      	ldr	r3, [pc, #36]	; (801b92c <udp_bind+0x10c>)
 801b906:	681a      	ldr	r2, [r3, #0]
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b90c:	4a07      	ldr	r2, [pc, #28]	; (801b92c <udp_bind+0x10c>)
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b912:	2300      	movs	r3, #0
}
 801b914:	4618      	mov	r0, r3
 801b916:	3718      	adds	r7, #24
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	08046500 	.word	0x08046500
 801b920:	08022e70 	.word	0x08022e70
 801b924:	08023158 	.word	0x08023158
 801b928:	08022ee4 	.word	0x08022ee4
 801b92c:	240079c0 	.word	0x240079c0

0801b930 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b086      	sub	sp, #24
 801b934:	af00      	add	r7, sp, #0
 801b936:	60f8      	str	r0, [r7, #12]
 801b938:	60b9      	str	r1, [r7, #8]
 801b93a:	4613      	mov	r3, r2
 801b93c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d109      	bne.n	801b958 <udp_connect+0x28>
 801b944:	4b2c      	ldr	r3, [pc, #176]	; (801b9f8 <udp_connect+0xc8>)
 801b946:	f240 4235 	movw	r2, #1077	; 0x435
 801b94a:	492c      	ldr	r1, [pc, #176]	; (801b9fc <udp_connect+0xcc>)
 801b94c:	482c      	ldr	r0, [pc, #176]	; (801ba00 <udp_connect+0xd0>)
 801b94e:	f000 fdb9 	bl	801c4c4 <iprintf>
 801b952:	f06f 030f 	mvn.w	r3, #15
 801b956:	e04b      	b.n	801b9f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d109      	bne.n	801b972 <udp_connect+0x42>
 801b95e:	4b26      	ldr	r3, [pc, #152]	; (801b9f8 <udp_connect+0xc8>)
 801b960:	f240 4236 	movw	r2, #1078	; 0x436
 801b964:	4927      	ldr	r1, [pc, #156]	; (801ba04 <udp_connect+0xd4>)
 801b966:	4826      	ldr	r0, [pc, #152]	; (801ba00 <udp_connect+0xd0>)
 801b968:	f000 fdac 	bl	801c4c4 <iprintf>
 801b96c:	f06f 030f 	mvn.w	r3, #15
 801b970:	e03e      	b.n	801b9f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	8a5b      	ldrh	r3, [r3, #18]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d10f      	bne.n	801b99a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b97a:	68f9      	ldr	r1, [r7, #12]
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	8a5b      	ldrh	r3, [r3, #18]
 801b980:	461a      	mov	r2, r3
 801b982:	68f8      	ldr	r0, [r7, #12]
 801b984:	f7ff ff4c 	bl	801b820 <udp_bind>
 801b988:	4603      	mov	r3, r0
 801b98a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b98c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d002      	beq.n	801b99a <udp_connect+0x6a>
      return err;
 801b994:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b998:	e02a      	b.n	801b9f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d002      	beq.n	801b9a6 <udp_connect+0x76>
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	e000      	b.n	801b9a8 <udp_connect+0x78>
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	68fa      	ldr	r2, [r7, #12]
 801b9aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	88fa      	ldrh	r2, [r7, #6]
 801b9b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	7c1b      	ldrb	r3, [r3, #16]
 801b9b6:	f043 0304 	orr.w	r3, r3, #4
 801b9ba:	b2da      	uxtb	r2, r3
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b9c0:	4b11      	ldr	r3, [pc, #68]	; (801ba08 <udp_connect+0xd8>)
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	617b      	str	r3, [r7, #20]
 801b9c6:	e008      	b.n	801b9da <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b9c8:	68fa      	ldr	r2, [r7, #12]
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	429a      	cmp	r2, r3
 801b9ce:	d101      	bne.n	801b9d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	e00d      	b.n	801b9f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b9d4:	697b      	ldr	r3, [r7, #20]
 801b9d6:	68db      	ldr	r3, [r3, #12]
 801b9d8:	617b      	str	r3, [r7, #20]
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d1f3      	bne.n	801b9c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b9e0:	4b09      	ldr	r3, [pc, #36]	; (801ba08 <udp_connect+0xd8>)
 801b9e2:	681a      	ldr	r2, [r3, #0]
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b9e8:	4a07      	ldr	r2, [pc, #28]	; (801ba08 <udp_connect+0xd8>)
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b9ee:	2300      	movs	r3, #0
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	3718      	adds	r7, #24
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	bd80      	pop	{r7, pc}
 801b9f8:	08022e70 	.word	0x08022e70
 801b9fc:	08023170 	.word	0x08023170
 801ba00:	08022ee4 	.word	0x08022ee4
 801ba04:	0802318c 	.word	0x0802318c
 801ba08:	240079c0 	.word	0x240079c0

0801ba0c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b084      	sub	sp, #16
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	60f8      	str	r0, [r7, #12]
 801ba14:	60b9      	str	r1, [r7, #8]
 801ba16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d107      	bne.n	801ba2e <udp_recv+0x22>
 801ba1e:	4b08      	ldr	r3, [pc, #32]	; (801ba40 <udp_recv+0x34>)
 801ba20:	f240 428a 	movw	r2, #1162	; 0x48a
 801ba24:	4907      	ldr	r1, [pc, #28]	; (801ba44 <udp_recv+0x38>)
 801ba26:	4808      	ldr	r0, [pc, #32]	; (801ba48 <udp_recv+0x3c>)
 801ba28:	f000 fd4c 	bl	801c4c4 <iprintf>
 801ba2c:	e005      	b.n	801ba3a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	68ba      	ldr	r2, [r7, #8]
 801ba32:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	687a      	ldr	r2, [r7, #4]
 801ba38:	61da      	str	r2, [r3, #28]
}
 801ba3a:	3710      	adds	r7, #16
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	bd80      	pop	{r7, pc}
 801ba40:	08022e70 	.word	0x08022e70
 801ba44:	080231c4 	.word	0x080231c4
 801ba48:	08022ee4 	.word	0x08022ee4

0801ba4c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b084      	sub	sp, #16
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d107      	bne.n	801ba6a <udp_remove+0x1e>
 801ba5a:	4b19      	ldr	r3, [pc, #100]	; (801bac0 <udp_remove+0x74>)
 801ba5c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ba60:	4918      	ldr	r1, [pc, #96]	; (801bac4 <udp_remove+0x78>)
 801ba62:	4819      	ldr	r0, [pc, #100]	; (801bac8 <udp_remove+0x7c>)
 801ba64:	f000 fd2e 	bl	801c4c4 <iprintf>
 801ba68:	e026      	b.n	801bab8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ba6a:	4b18      	ldr	r3, [pc, #96]	; (801bacc <udp_remove+0x80>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	429a      	cmp	r2, r3
 801ba72:	d105      	bne.n	801ba80 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ba74:	4b15      	ldr	r3, [pc, #84]	; (801bacc <udp_remove+0x80>)
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	68db      	ldr	r3, [r3, #12]
 801ba7a:	4a14      	ldr	r2, [pc, #80]	; (801bacc <udp_remove+0x80>)
 801ba7c:	6013      	str	r3, [r2, #0]
 801ba7e:	e017      	b.n	801bab0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ba80:	4b12      	ldr	r3, [pc, #72]	; (801bacc <udp_remove+0x80>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	60fb      	str	r3, [r7, #12]
 801ba86:	e010      	b.n	801baaa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	68db      	ldr	r3, [r3, #12]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d009      	beq.n	801baa4 <udp_remove+0x58>
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	68db      	ldr	r3, [r3, #12]
 801ba94:	687a      	ldr	r2, [r7, #4]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d104      	bne.n	801baa4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	68da      	ldr	r2, [r3, #12]
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	60da      	str	r2, [r3, #12]
        break;
 801baa2:	e005      	b.n	801bab0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	60fb      	str	r3, [r7, #12]
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d1eb      	bne.n	801ba88 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801bab0:	6879      	ldr	r1, [r7, #4]
 801bab2:	2000      	movs	r0, #0
 801bab4:	f7f7 fc0a 	bl	80132cc <memp_free>
}
 801bab8:	3710      	adds	r7, #16
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	08022e70 	.word	0x08022e70
 801bac4:	080231dc 	.word	0x080231dc
 801bac8:	08022ee4 	.word	0x08022ee4
 801bacc:	240079c0 	.word	0x240079c0

0801bad0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b082      	sub	sp, #8
 801bad4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bad6:	2000      	movs	r0, #0
 801bad8:	f7f7 fb82 	bl	80131e0 <memp_malloc>
 801badc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d007      	beq.n	801baf4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bae4:	2220      	movs	r2, #32
 801bae6:	2100      	movs	r1, #0
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f000 f8a1 	bl	801bc30 <memset>
    pcb->ttl = UDP_TTL;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	22ff      	movs	r2, #255	; 0xff
 801baf2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801baf4:	687b      	ldr	r3, [r7, #4]
}
 801baf6:	4618      	mov	r0, r3
 801baf8:	3708      	adds	r7, #8
 801bafa:	46bd      	mov	sp, r7
 801bafc:	bd80      	pop	{r7, pc}

0801bafe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bafe:	b580      	push	{r7, lr}
 801bb00:	b084      	sub	sp, #16
 801bb02:	af00      	add	r7, sp, #0
 801bb04:	4603      	mov	r3, r0
 801bb06:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bb08:	f7ff ffe2 	bl	801bad0 <udp_new>
 801bb0c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bb0e:	68fb      	ldr	r3, [r7, #12]
}
 801bb10:	4618      	mov	r0, r3
 801bb12:	3710      	adds	r7, #16
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}

0801bb18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bb18:	b480      	push	{r7}
 801bb1a:	b085      	sub	sp, #20
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
 801bb20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d01e      	beq.n	801bb66 <udp_netif_ip_addr_changed+0x4e>
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d01a      	beq.n	801bb66 <udp_netif_ip_addr_changed+0x4e>
 801bb30:	683b      	ldr	r3, [r7, #0]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d017      	beq.n	801bb66 <udp_netif_ip_addr_changed+0x4e>
 801bb36:	683b      	ldr	r3, [r7, #0]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d013      	beq.n	801bb66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bb3e:	4b0d      	ldr	r3, [pc, #52]	; (801bb74 <udp_netif_ip_addr_changed+0x5c>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	60fb      	str	r3, [r7, #12]
 801bb44:	e00c      	b.n	801bb60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	681a      	ldr	r2, [r3, #0]
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	429a      	cmp	r2, r3
 801bb50:	d103      	bne.n	801bb5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	681a      	ldr	r2, [r3, #0]
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	68db      	ldr	r3, [r3, #12]
 801bb5e:	60fb      	str	r3, [r7, #12]
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d1ef      	bne.n	801bb46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801bb66:	bf00      	nop
 801bb68:	3714      	adds	r7, #20
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb70:	4770      	bx	lr
 801bb72:	bf00      	nop
 801bb74:	240079c0 	.word	0x240079c0

0801bb78 <__libc_init_array>:
 801bb78:	b570      	push	{r4, r5, r6, lr}
 801bb7a:	4d0d      	ldr	r5, [pc, #52]	; (801bbb0 <__libc_init_array+0x38>)
 801bb7c:	4c0d      	ldr	r4, [pc, #52]	; (801bbb4 <__libc_init_array+0x3c>)
 801bb7e:	1b64      	subs	r4, r4, r5
 801bb80:	10a4      	asrs	r4, r4, #2
 801bb82:	2600      	movs	r6, #0
 801bb84:	42a6      	cmp	r6, r4
 801bb86:	d109      	bne.n	801bb9c <__libc_init_array+0x24>
 801bb88:	4d0b      	ldr	r5, [pc, #44]	; (801bbb8 <__libc_init_array+0x40>)
 801bb8a:	4c0c      	ldr	r4, [pc, #48]	; (801bbbc <__libc_init_array+0x44>)
 801bb8c:	f003 fba8 	bl	801f2e0 <_init>
 801bb90:	1b64      	subs	r4, r4, r5
 801bb92:	10a4      	asrs	r4, r4, #2
 801bb94:	2600      	movs	r6, #0
 801bb96:	42a6      	cmp	r6, r4
 801bb98:	d105      	bne.n	801bba6 <__libc_init_array+0x2e>
 801bb9a:	bd70      	pop	{r4, r5, r6, pc}
 801bb9c:	f855 3b04 	ldr.w	r3, [r5], #4
 801bba0:	4798      	blx	r3
 801bba2:	3601      	adds	r6, #1
 801bba4:	e7ee      	b.n	801bb84 <__libc_init_array+0xc>
 801bba6:	f855 3b04 	ldr.w	r3, [r5], #4
 801bbaa:	4798      	blx	r3
 801bbac:	3601      	adds	r6, #1
 801bbae:	e7f2      	b.n	801bb96 <__libc_init_array+0x1e>
 801bbb0:	08046a8c 	.word	0x08046a8c
 801bbb4:	08046a8c 	.word	0x08046a8c
 801bbb8:	08046a8c 	.word	0x08046a8c
 801bbbc:	08046a90 	.word	0x08046a90

0801bbc0 <memcmp>:
 801bbc0:	b510      	push	{r4, lr}
 801bbc2:	3901      	subs	r1, #1
 801bbc4:	4402      	add	r2, r0
 801bbc6:	4290      	cmp	r0, r2
 801bbc8:	d101      	bne.n	801bbce <memcmp+0xe>
 801bbca:	2000      	movs	r0, #0
 801bbcc:	e005      	b.n	801bbda <memcmp+0x1a>
 801bbce:	7803      	ldrb	r3, [r0, #0]
 801bbd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bbd4:	42a3      	cmp	r3, r4
 801bbd6:	d001      	beq.n	801bbdc <memcmp+0x1c>
 801bbd8:	1b18      	subs	r0, r3, r4
 801bbda:	bd10      	pop	{r4, pc}
 801bbdc:	3001      	adds	r0, #1
 801bbde:	e7f2      	b.n	801bbc6 <memcmp+0x6>

0801bbe0 <memcpy>:
 801bbe0:	440a      	add	r2, r1
 801bbe2:	4291      	cmp	r1, r2
 801bbe4:	f100 33ff 	add.w	r3, r0, #4294967295
 801bbe8:	d100      	bne.n	801bbec <memcpy+0xc>
 801bbea:	4770      	bx	lr
 801bbec:	b510      	push	{r4, lr}
 801bbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bbf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bbf6:	4291      	cmp	r1, r2
 801bbf8:	d1f9      	bne.n	801bbee <memcpy+0xe>
 801bbfa:	bd10      	pop	{r4, pc}

0801bbfc <memmove>:
 801bbfc:	4288      	cmp	r0, r1
 801bbfe:	b510      	push	{r4, lr}
 801bc00:	eb01 0402 	add.w	r4, r1, r2
 801bc04:	d902      	bls.n	801bc0c <memmove+0x10>
 801bc06:	4284      	cmp	r4, r0
 801bc08:	4623      	mov	r3, r4
 801bc0a:	d807      	bhi.n	801bc1c <memmove+0x20>
 801bc0c:	1e43      	subs	r3, r0, #1
 801bc0e:	42a1      	cmp	r1, r4
 801bc10:	d008      	beq.n	801bc24 <memmove+0x28>
 801bc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc16:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bc1a:	e7f8      	b.n	801bc0e <memmove+0x12>
 801bc1c:	4402      	add	r2, r0
 801bc1e:	4601      	mov	r1, r0
 801bc20:	428a      	cmp	r2, r1
 801bc22:	d100      	bne.n	801bc26 <memmove+0x2a>
 801bc24:	bd10      	pop	{r4, pc}
 801bc26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bc2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bc2e:	e7f7      	b.n	801bc20 <memmove+0x24>

0801bc30 <memset>:
 801bc30:	4402      	add	r2, r0
 801bc32:	4603      	mov	r3, r0
 801bc34:	4293      	cmp	r3, r2
 801bc36:	d100      	bne.n	801bc3a <memset+0xa>
 801bc38:	4770      	bx	lr
 801bc3a:	f803 1b01 	strb.w	r1, [r3], #1
 801bc3e:	e7f9      	b.n	801bc34 <memset+0x4>

0801bc40 <__cvt>:
 801bc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc42:	ed2d 8b02 	vpush	{d8}
 801bc46:	eeb0 8b40 	vmov.f64	d8, d0
 801bc4a:	b085      	sub	sp, #20
 801bc4c:	4617      	mov	r7, r2
 801bc4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bc50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bc52:	ee18 2a90 	vmov	r2, s17
 801bc56:	f025 0520 	bic.w	r5, r5, #32
 801bc5a:	2a00      	cmp	r2, #0
 801bc5c:	bfb6      	itet	lt
 801bc5e:	222d      	movlt	r2, #45	; 0x2d
 801bc60:	2200      	movge	r2, #0
 801bc62:	eeb1 8b40 	vneglt.f64	d8, d0
 801bc66:	2d46      	cmp	r5, #70	; 0x46
 801bc68:	460c      	mov	r4, r1
 801bc6a:	701a      	strb	r2, [r3, #0]
 801bc6c:	d004      	beq.n	801bc78 <__cvt+0x38>
 801bc6e:	2d45      	cmp	r5, #69	; 0x45
 801bc70:	d100      	bne.n	801bc74 <__cvt+0x34>
 801bc72:	3401      	adds	r4, #1
 801bc74:	2102      	movs	r1, #2
 801bc76:	e000      	b.n	801bc7a <__cvt+0x3a>
 801bc78:	2103      	movs	r1, #3
 801bc7a:	ab03      	add	r3, sp, #12
 801bc7c:	9301      	str	r3, [sp, #4]
 801bc7e:	ab02      	add	r3, sp, #8
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	4622      	mov	r2, r4
 801bc84:	4633      	mov	r3, r6
 801bc86:	eeb0 0b48 	vmov.f64	d0, d8
 801bc8a:	f000 fe75 	bl	801c978 <_dtoa_r>
 801bc8e:	2d47      	cmp	r5, #71	; 0x47
 801bc90:	d101      	bne.n	801bc96 <__cvt+0x56>
 801bc92:	07fb      	lsls	r3, r7, #31
 801bc94:	d51a      	bpl.n	801bccc <__cvt+0x8c>
 801bc96:	2d46      	cmp	r5, #70	; 0x46
 801bc98:	eb00 0204 	add.w	r2, r0, r4
 801bc9c:	d10c      	bne.n	801bcb8 <__cvt+0x78>
 801bc9e:	7803      	ldrb	r3, [r0, #0]
 801bca0:	2b30      	cmp	r3, #48	; 0x30
 801bca2:	d107      	bne.n	801bcb4 <__cvt+0x74>
 801bca4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcac:	bf1c      	itt	ne
 801bcae:	f1c4 0401 	rsbne	r4, r4, #1
 801bcb2:	6034      	strne	r4, [r6, #0]
 801bcb4:	6833      	ldr	r3, [r6, #0]
 801bcb6:	441a      	add	r2, r3
 801bcb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcc0:	bf08      	it	eq
 801bcc2:	9203      	streq	r2, [sp, #12]
 801bcc4:	2130      	movs	r1, #48	; 0x30
 801bcc6:	9b03      	ldr	r3, [sp, #12]
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	d307      	bcc.n	801bcdc <__cvt+0x9c>
 801bccc:	9b03      	ldr	r3, [sp, #12]
 801bcce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bcd0:	1a1b      	subs	r3, r3, r0
 801bcd2:	6013      	str	r3, [r2, #0]
 801bcd4:	b005      	add	sp, #20
 801bcd6:	ecbd 8b02 	vpop	{d8}
 801bcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcdc:	1c5c      	adds	r4, r3, #1
 801bcde:	9403      	str	r4, [sp, #12]
 801bce0:	7019      	strb	r1, [r3, #0]
 801bce2:	e7f0      	b.n	801bcc6 <__cvt+0x86>

0801bce4 <__exponent>:
 801bce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bce6:	4603      	mov	r3, r0
 801bce8:	2900      	cmp	r1, #0
 801bcea:	bfb8      	it	lt
 801bcec:	4249      	neglt	r1, r1
 801bcee:	f803 2b02 	strb.w	r2, [r3], #2
 801bcf2:	bfb4      	ite	lt
 801bcf4:	222d      	movlt	r2, #45	; 0x2d
 801bcf6:	222b      	movge	r2, #43	; 0x2b
 801bcf8:	2909      	cmp	r1, #9
 801bcfa:	7042      	strb	r2, [r0, #1]
 801bcfc:	dd2a      	ble.n	801bd54 <__exponent+0x70>
 801bcfe:	f10d 0407 	add.w	r4, sp, #7
 801bd02:	46a4      	mov	ip, r4
 801bd04:	270a      	movs	r7, #10
 801bd06:	46a6      	mov	lr, r4
 801bd08:	460a      	mov	r2, r1
 801bd0a:	fb91 f6f7 	sdiv	r6, r1, r7
 801bd0e:	fb07 1516 	mls	r5, r7, r6, r1
 801bd12:	3530      	adds	r5, #48	; 0x30
 801bd14:	2a63      	cmp	r2, #99	; 0x63
 801bd16:	f104 34ff 	add.w	r4, r4, #4294967295
 801bd1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bd1e:	4631      	mov	r1, r6
 801bd20:	dcf1      	bgt.n	801bd06 <__exponent+0x22>
 801bd22:	3130      	adds	r1, #48	; 0x30
 801bd24:	f1ae 0502 	sub.w	r5, lr, #2
 801bd28:	f804 1c01 	strb.w	r1, [r4, #-1]
 801bd2c:	1c44      	adds	r4, r0, #1
 801bd2e:	4629      	mov	r1, r5
 801bd30:	4561      	cmp	r1, ip
 801bd32:	d30a      	bcc.n	801bd4a <__exponent+0x66>
 801bd34:	f10d 0209 	add.w	r2, sp, #9
 801bd38:	eba2 020e 	sub.w	r2, r2, lr
 801bd3c:	4565      	cmp	r5, ip
 801bd3e:	bf88      	it	hi
 801bd40:	2200      	movhi	r2, #0
 801bd42:	4413      	add	r3, r2
 801bd44:	1a18      	subs	r0, r3, r0
 801bd46:	b003      	add	sp, #12
 801bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bd52:	e7ed      	b.n	801bd30 <__exponent+0x4c>
 801bd54:	2330      	movs	r3, #48	; 0x30
 801bd56:	3130      	adds	r1, #48	; 0x30
 801bd58:	7083      	strb	r3, [r0, #2]
 801bd5a:	70c1      	strb	r1, [r0, #3]
 801bd5c:	1d03      	adds	r3, r0, #4
 801bd5e:	e7f1      	b.n	801bd44 <__exponent+0x60>

0801bd60 <_printf_float>:
 801bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd64:	b08b      	sub	sp, #44	; 0x2c
 801bd66:	460c      	mov	r4, r1
 801bd68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bd6c:	4616      	mov	r6, r2
 801bd6e:	461f      	mov	r7, r3
 801bd70:	4605      	mov	r5, r0
 801bd72:	f001 fc7d 	bl	801d670 <_localeconv_r>
 801bd76:	f8d0 b000 	ldr.w	fp, [r0]
 801bd7a:	4658      	mov	r0, fp
 801bd7c:	f7e4 faba 	bl	80002f4 <strlen>
 801bd80:	2300      	movs	r3, #0
 801bd82:	9308      	str	r3, [sp, #32]
 801bd84:	f8d8 3000 	ldr.w	r3, [r8]
 801bd88:	f894 9018 	ldrb.w	r9, [r4, #24]
 801bd8c:	6822      	ldr	r2, [r4, #0]
 801bd8e:	3307      	adds	r3, #7
 801bd90:	f023 0307 	bic.w	r3, r3, #7
 801bd94:	f103 0108 	add.w	r1, r3, #8
 801bd98:	f8c8 1000 	str.w	r1, [r8]
 801bd9c:	4682      	mov	sl, r0
 801bd9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bda2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801bda6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801c008 <_printf_float+0x2a8>
 801bdaa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801bdae:	eeb0 6bc0 	vabs.f64	d6, d0
 801bdb2:	eeb4 6b47 	vcmp.f64	d6, d7
 801bdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdba:	dd24      	ble.n	801be06 <_printf_float+0xa6>
 801bdbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdc4:	d502      	bpl.n	801bdcc <_printf_float+0x6c>
 801bdc6:	232d      	movs	r3, #45	; 0x2d
 801bdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bdcc:	4b90      	ldr	r3, [pc, #576]	; (801c010 <_printf_float+0x2b0>)
 801bdce:	4891      	ldr	r0, [pc, #580]	; (801c014 <_printf_float+0x2b4>)
 801bdd0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801bdd4:	bf94      	ite	ls
 801bdd6:	4698      	movls	r8, r3
 801bdd8:	4680      	movhi	r8, r0
 801bdda:	2303      	movs	r3, #3
 801bddc:	6123      	str	r3, [r4, #16]
 801bdde:	f022 0204 	bic.w	r2, r2, #4
 801bde2:	2300      	movs	r3, #0
 801bde4:	6022      	str	r2, [r4, #0]
 801bde6:	9304      	str	r3, [sp, #16]
 801bde8:	9700      	str	r7, [sp, #0]
 801bdea:	4633      	mov	r3, r6
 801bdec:	aa09      	add	r2, sp, #36	; 0x24
 801bdee:	4621      	mov	r1, r4
 801bdf0:	4628      	mov	r0, r5
 801bdf2:	f000 f9d3 	bl	801c19c <_printf_common>
 801bdf6:	3001      	adds	r0, #1
 801bdf8:	f040 808a 	bne.w	801bf10 <_printf_float+0x1b0>
 801bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 801be00:	b00b      	add	sp, #44	; 0x2c
 801be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be06:	eeb4 0b40 	vcmp.f64	d0, d0
 801be0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be0e:	d709      	bvc.n	801be24 <_printf_float+0xc4>
 801be10:	ee10 3a90 	vmov	r3, s1
 801be14:	2b00      	cmp	r3, #0
 801be16:	bfbc      	itt	lt
 801be18:	232d      	movlt	r3, #45	; 0x2d
 801be1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801be1e:	487e      	ldr	r0, [pc, #504]	; (801c018 <_printf_float+0x2b8>)
 801be20:	4b7e      	ldr	r3, [pc, #504]	; (801c01c <_printf_float+0x2bc>)
 801be22:	e7d5      	b.n	801bdd0 <_printf_float+0x70>
 801be24:	6863      	ldr	r3, [r4, #4]
 801be26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801be2a:	9104      	str	r1, [sp, #16]
 801be2c:	1c59      	adds	r1, r3, #1
 801be2e:	d13c      	bne.n	801beaa <_printf_float+0x14a>
 801be30:	2306      	movs	r3, #6
 801be32:	6063      	str	r3, [r4, #4]
 801be34:	2300      	movs	r3, #0
 801be36:	9303      	str	r3, [sp, #12]
 801be38:	ab08      	add	r3, sp, #32
 801be3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801be3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801be42:	ab07      	add	r3, sp, #28
 801be44:	6861      	ldr	r1, [r4, #4]
 801be46:	9300      	str	r3, [sp, #0]
 801be48:	6022      	str	r2, [r4, #0]
 801be4a:	f10d 031b 	add.w	r3, sp, #27
 801be4e:	4628      	mov	r0, r5
 801be50:	f7ff fef6 	bl	801bc40 <__cvt>
 801be54:	9b04      	ldr	r3, [sp, #16]
 801be56:	9907      	ldr	r1, [sp, #28]
 801be58:	2b47      	cmp	r3, #71	; 0x47
 801be5a:	4680      	mov	r8, r0
 801be5c:	d108      	bne.n	801be70 <_printf_float+0x110>
 801be5e:	1cc8      	adds	r0, r1, #3
 801be60:	db02      	blt.n	801be68 <_printf_float+0x108>
 801be62:	6863      	ldr	r3, [r4, #4]
 801be64:	4299      	cmp	r1, r3
 801be66:	dd41      	ble.n	801beec <_printf_float+0x18c>
 801be68:	f1a9 0902 	sub.w	r9, r9, #2
 801be6c:	fa5f f989 	uxtb.w	r9, r9
 801be70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801be74:	d820      	bhi.n	801beb8 <_printf_float+0x158>
 801be76:	3901      	subs	r1, #1
 801be78:	464a      	mov	r2, r9
 801be7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801be7e:	9107      	str	r1, [sp, #28]
 801be80:	f7ff ff30 	bl	801bce4 <__exponent>
 801be84:	9a08      	ldr	r2, [sp, #32]
 801be86:	9004      	str	r0, [sp, #16]
 801be88:	1813      	adds	r3, r2, r0
 801be8a:	2a01      	cmp	r2, #1
 801be8c:	6123      	str	r3, [r4, #16]
 801be8e:	dc02      	bgt.n	801be96 <_printf_float+0x136>
 801be90:	6822      	ldr	r2, [r4, #0]
 801be92:	07d2      	lsls	r2, r2, #31
 801be94:	d501      	bpl.n	801be9a <_printf_float+0x13a>
 801be96:	3301      	adds	r3, #1
 801be98:	6123      	str	r3, [r4, #16]
 801be9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d0a2      	beq.n	801bde8 <_printf_float+0x88>
 801bea2:	232d      	movs	r3, #45	; 0x2d
 801bea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bea8:	e79e      	b.n	801bde8 <_printf_float+0x88>
 801beaa:	9904      	ldr	r1, [sp, #16]
 801beac:	2947      	cmp	r1, #71	; 0x47
 801beae:	d1c1      	bne.n	801be34 <_printf_float+0xd4>
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d1bf      	bne.n	801be34 <_printf_float+0xd4>
 801beb4:	2301      	movs	r3, #1
 801beb6:	e7bc      	b.n	801be32 <_printf_float+0xd2>
 801beb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801bebc:	d118      	bne.n	801bef0 <_printf_float+0x190>
 801bebe:	2900      	cmp	r1, #0
 801bec0:	6863      	ldr	r3, [r4, #4]
 801bec2:	dd0b      	ble.n	801bedc <_printf_float+0x17c>
 801bec4:	6121      	str	r1, [r4, #16]
 801bec6:	b913      	cbnz	r3, 801bece <_printf_float+0x16e>
 801bec8:	6822      	ldr	r2, [r4, #0]
 801beca:	07d0      	lsls	r0, r2, #31
 801becc:	d502      	bpl.n	801bed4 <_printf_float+0x174>
 801bece:	3301      	adds	r3, #1
 801bed0:	440b      	add	r3, r1
 801bed2:	6123      	str	r3, [r4, #16]
 801bed4:	2300      	movs	r3, #0
 801bed6:	65a1      	str	r1, [r4, #88]	; 0x58
 801bed8:	9304      	str	r3, [sp, #16]
 801beda:	e7de      	b.n	801be9a <_printf_float+0x13a>
 801bedc:	b913      	cbnz	r3, 801bee4 <_printf_float+0x184>
 801bede:	6822      	ldr	r2, [r4, #0]
 801bee0:	07d2      	lsls	r2, r2, #31
 801bee2:	d501      	bpl.n	801bee8 <_printf_float+0x188>
 801bee4:	3302      	adds	r3, #2
 801bee6:	e7f4      	b.n	801bed2 <_printf_float+0x172>
 801bee8:	2301      	movs	r3, #1
 801beea:	e7f2      	b.n	801bed2 <_printf_float+0x172>
 801beec:	f04f 0967 	mov.w	r9, #103	; 0x67
 801bef0:	9b08      	ldr	r3, [sp, #32]
 801bef2:	4299      	cmp	r1, r3
 801bef4:	db05      	blt.n	801bf02 <_printf_float+0x1a2>
 801bef6:	6823      	ldr	r3, [r4, #0]
 801bef8:	6121      	str	r1, [r4, #16]
 801befa:	07d8      	lsls	r0, r3, #31
 801befc:	d5ea      	bpl.n	801bed4 <_printf_float+0x174>
 801befe:	1c4b      	adds	r3, r1, #1
 801bf00:	e7e7      	b.n	801bed2 <_printf_float+0x172>
 801bf02:	2900      	cmp	r1, #0
 801bf04:	bfd4      	ite	le
 801bf06:	f1c1 0202 	rsble	r2, r1, #2
 801bf0a:	2201      	movgt	r2, #1
 801bf0c:	4413      	add	r3, r2
 801bf0e:	e7e0      	b.n	801bed2 <_printf_float+0x172>
 801bf10:	6823      	ldr	r3, [r4, #0]
 801bf12:	055a      	lsls	r2, r3, #21
 801bf14:	d407      	bmi.n	801bf26 <_printf_float+0x1c6>
 801bf16:	6923      	ldr	r3, [r4, #16]
 801bf18:	4642      	mov	r2, r8
 801bf1a:	4631      	mov	r1, r6
 801bf1c:	4628      	mov	r0, r5
 801bf1e:	47b8      	blx	r7
 801bf20:	3001      	adds	r0, #1
 801bf22:	d12a      	bne.n	801bf7a <_printf_float+0x21a>
 801bf24:	e76a      	b.n	801bdfc <_printf_float+0x9c>
 801bf26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bf2a:	f240 80e2 	bls.w	801c0f2 <_printf_float+0x392>
 801bf2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bf32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf3a:	d133      	bne.n	801bfa4 <_printf_float+0x244>
 801bf3c:	4a38      	ldr	r2, [pc, #224]	; (801c020 <_printf_float+0x2c0>)
 801bf3e:	2301      	movs	r3, #1
 801bf40:	4631      	mov	r1, r6
 801bf42:	4628      	mov	r0, r5
 801bf44:	47b8      	blx	r7
 801bf46:	3001      	adds	r0, #1
 801bf48:	f43f af58 	beq.w	801bdfc <_printf_float+0x9c>
 801bf4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bf50:	429a      	cmp	r2, r3
 801bf52:	db02      	blt.n	801bf5a <_printf_float+0x1fa>
 801bf54:	6823      	ldr	r3, [r4, #0]
 801bf56:	07d8      	lsls	r0, r3, #31
 801bf58:	d50f      	bpl.n	801bf7a <_printf_float+0x21a>
 801bf5a:	4653      	mov	r3, sl
 801bf5c:	465a      	mov	r2, fp
 801bf5e:	4631      	mov	r1, r6
 801bf60:	4628      	mov	r0, r5
 801bf62:	47b8      	blx	r7
 801bf64:	3001      	adds	r0, #1
 801bf66:	f43f af49 	beq.w	801bdfc <_printf_float+0x9c>
 801bf6a:	f04f 0800 	mov.w	r8, #0
 801bf6e:	f104 091a 	add.w	r9, r4, #26
 801bf72:	9b08      	ldr	r3, [sp, #32]
 801bf74:	3b01      	subs	r3, #1
 801bf76:	4543      	cmp	r3, r8
 801bf78:	dc09      	bgt.n	801bf8e <_printf_float+0x22e>
 801bf7a:	6823      	ldr	r3, [r4, #0]
 801bf7c:	079b      	lsls	r3, r3, #30
 801bf7e:	f100 8108 	bmi.w	801c192 <_printf_float+0x432>
 801bf82:	68e0      	ldr	r0, [r4, #12]
 801bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf86:	4298      	cmp	r0, r3
 801bf88:	bfb8      	it	lt
 801bf8a:	4618      	movlt	r0, r3
 801bf8c:	e738      	b.n	801be00 <_printf_float+0xa0>
 801bf8e:	2301      	movs	r3, #1
 801bf90:	464a      	mov	r2, r9
 801bf92:	4631      	mov	r1, r6
 801bf94:	4628      	mov	r0, r5
 801bf96:	47b8      	blx	r7
 801bf98:	3001      	adds	r0, #1
 801bf9a:	f43f af2f 	beq.w	801bdfc <_printf_float+0x9c>
 801bf9e:	f108 0801 	add.w	r8, r8, #1
 801bfa2:	e7e6      	b.n	801bf72 <_printf_float+0x212>
 801bfa4:	9b07      	ldr	r3, [sp, #28]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	dc3c      	bgt.n	801c024 <_printf_float+0x2c4>
 801bfaa:	4a1d      	ldr	r2, [pc, #116]	; (801c020 <_printf_float+0x2c0>)
 801bfac:	2301      	movs	r3, #1
 801bfae:	4631      	mov	r1, r6
 801bfb0:	4628      	mov	r0, r5
 801bfb2:	47b8      	blx	r7
 801bfb4:	3001      	adds	r0, #1
 801bfb6:	f43f af21 	beq.w	801bdfc <_printf_float+0x9c>
 801bfba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bfbe:	4313      	orrs	r3, r2
 801bfc0:	d102      	bne.n	801bfc8 <_printf_float+0x268>
 801bfc2:	6823      	ldr	r3, [r4, #0]
 801bfc4:	07d9      	lsls	r1, r3, #31
 801bfc6:	d5d8      	bpl.n	801bf7a <_printf_float+0x21a>
 801bfc8:	4653      	mov	r3, sl
 801bfca:	465a      	mov	r2, fp
 801bfcc:	4631      	mov	r1, r6
 801bfce:	4628      	mov	r0, r5
 801bfd0:	47b8      	blx	r7
 801bfd2:	3001      	adds	r0, #1
 801bfd4:	f43f af12 	beq.w	801bdfc <_printf_float+0x9c>
 801bfd8:	f04f 0900 	mov.w	r9, #0
 801bfdc:	f104 0a1a 	add.w	sl, r4, #26
 801bfe0:	9b07      	ldr	r3, [sp, #28]
 801bfe2:	425b      	negs	r3, r3
 801bfe4:	454b      	cmp	r3, r9
 801bfe6:	dc01      	bgt.n	801bfec <_printf_float+0x28c>
 801bfe8:	9b08      	ldr	r3, [sp, #32]
 801bfea:	e795      	b.n	801bf18 <_printf_float+0x1b8>
 801bfec:	2301      	movs	r3, #1
 801bfee:	4652      	mov	r2, sl
 801bff0:	4631      	mov	r1, r6
 801bff2:	4628      	mov	r0, r5
 801bff4:	47b8      	blx	r7
 801bff6:	3001      	adds	r0, #1
 801bff8:	f43f af00 	beq.w	801bdfc <_printf_float+0x9c>
 801bffc:	f109 0901 	add.w	r9, r9, #1
 801c000:	e7ee      	b.n	801bfe0 <_printf_float+0x280>
 801c002:	bf00      	nop
 801c004:	f3af 8000 	nop.w
 801c008:	ffffffff 	.word	0xffffffff
 801c00c:	7fefffff 	.word	0x7fefffff
 801c010:	08046738 	.word	0x08046738
 801c014:	0804673c 	.word	0x0804673c
 801c018:	08046744 	.word	0x08046744
 801c01c:	08046740 	.word	0x08046740
 801c020:	08046a61 	.word	0x08046a61
 801c024:	9a08      	ldr	r2, [sp, #32]
 801c026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c028:	429a      	cmp	r2, r3
 801c02a:	bfa8      	it	ge
 801c02c:	461a      	movge	r2, r3
 801c02e:	2a00      	cmp	r2, #0
 801c030:	4691      	mov	r9, r2
 801c032:	dc38      	bgt.n	801c0a6 <_printf_float+0x346>
 801c034:	2300      	movs	r3, #0
 801c036:	9305      	str	r3, [sp, #20]
 801c038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c03c:	f104 021a 	add.w	r2, r4, #26
 801c040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c042:	9905      	ldr	r1, [sp, #20]
 801c044:	9304      	str	r3, [sp, #16]
 801c046:	eba3 0309 	sub.w	r3, r3, r9
 801c04a:	428b      	cmp	r3, r1
 801c04c:	dc33      	bgt.n	801c0b6 <_printf_float+0x356>
 801c04e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c052:	429a      	cmp	r2, r3
 801c054:	db3c      	blt.n	801c0d0 <_printf_float+0x370>
 801c056:	6823      	ldr	r3, [r4, #0]
 801c058:	07da      	lsls	r2, r3, #31
 801c05a:	d439      	bmi.n	801c0d0 <_printf_float+0x370>
 801c05c:	9b08      	ldr	r3, [sp, #32]
 801c05e:	9a04      	ldr	r2, [sp, #16]
 801c060:	9907      	ldr	r1, [sp, #28]
 801c062:	1a9a      	subs	r2, r3, r2
 801c064:	eba3 0901 	sub.w	r9, r3, r1
 801c068:	4591      	cmp	r9, r2
 801c06a:	bfa8      	it	ge
 801c06c:	4691      	movge	r9, r2
 801c06e:	f1b9 0f00 	cmp.w	r9, #0
 801c072:	dc35      	bgt.n	801c0e0 <_printf_float+0x380>
 801c074:	f04f 0800 	mov.w	r8, #0
 801c078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c07c:	f104 0a1a 	add.w	sl, r4, #26
 801c080:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c084:	1a9b      	subs	r3, r3, r2
 801c086:	eba3 0309 	sub.w	r3, r3, r9
 801c08a:	4543      	cmp	r3, r8
 801c08c:	f77f af75 	ble.w	801bf7a <_printf_float+0x21a>
 801c090:	2301      	movs	r3, #1
 801c092:	4652      	mov	r2, sl
 801c094:	4631      	mov	r1, r6
 801c096:	4628      	mov	r0, r5
 801c098:	47b8      	blx	r7
 801c09a:	3001      	adds	r0, #1
 801c09c:	f43f aeae 	beq.w	801bdfc <_printf_float+0x9c>
 801c0a0:	f108 0801 	add.w	r8, r8, #1
 801c0a4:	e7ec      	b.n	801c080 <_printf_float+0x320>
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	4631      	mov	r1, r6
 801c0aa:	4642      	mov	r2, r8
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	47b8      	blx	r7
 801c0b0:	3001      	adds	r0, #1
 801c0b2:	d1bf      	bne.n	801c034 <_printf_float+0x2d4>
 801c0b4:	e6a2      	b.n	801bdfc <_printf_float+0x9c>
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	4631      	mov	r1, r6
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	9204      	str	r2, [sp, #16]
 801c0be:	47b8      	blx	r7
 801c0c0:	3001      	adds	r0, #1
 801c0c2:	f43f ae9b 	beq.w	801bdfc <_printf_float+0x9c>
 801c0c6:	9b05      	ldr	r3, [sp, #20]
 801c0c8:	9a04      	ldr	r2, [sp, #16]
 801c0ca:	3301      	adds	r3, #1
 801c0cc:	9305      	str	r3, [sp, #20]
 801c0ce:	e7b7      	b.n	801c040 <_printf_float+0x2e0>
 801c0d0:	4653      	mov	r3, sl
 801c0d2:	465a      	mov	r2, fp
 801c0d4:	4631      	mov	r1, r6
 801c0d6:	4628      	mov	r0, r5
 801c0d8:	47b8      	blx	r7
 801c0da:	3001      	adds	r0, #1
 801c0dc:	d1be      	bne.n	801c05c <_printf_float+0x2fc>
 801c0de:	e68d      	b.n	801bdfc <_printf_float+0x9c>
 801c0e0:	9a04      	ldr	r2, [sp, #16]
 801c0e2:	464b      	mov	r3, r9
 801c0e4:	4442      	add	r2, r8
 801c0e6:	4631      	mov	r1, r6
 801c0e8:	4628      	mov	r0, r5
 801c0ea:	47b8      	blx	r7
 801c0ec:	3001      	adds	r0, #1
 801c0ee:	d1c1      	bne.n	801c074 <_printf_float+0x314>
 801c0f0:	e684      	b.n	801bdfc <_printf_float+0x9c>
 801c0f2:	9a08      	ldr	r2, [sp, #32]
 801c0f4:	2a01      	cmp	r2, #1
 801c0f6:	dc01      	bgt.n	801c0fc <_printf_float+0x39c>
 801c0f8:	07db      	lsls	r3, r3, #31
 801c0fa:	d537      	bpl.n	801c16c <_printf_float+0x40c>
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	4642      	mov	r2, r8
 801c100:	4631      	mov	r1, r6
 801c102:	4628      	mov	r0, r5
 801c104:	47b8      	blx	r7
 801c106:	3001      	adds	r0, #1
 801c108:	f43f ae78 	beq.w	801bdfc <_printf_float+0x9c>
 801c10c:	4653      	mov	r3, sl
 801c10e:	465a      	mov	r2, fp
 801c110:	4631      	mov	r1, r6
 801c112:	4628      	mov	r0, r5
 801c114:	47b8      	blx	r7
 801c116:	3001      	adds	r0, #1
 801c118:	f43f ae70 	beq.w	801bdfc <_printf_float+0x9c>
 801c11c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801c120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c128:	d01b      	beq.n	801c162 <_printf_float+0x402>
 801c12a:	9b08      	ldr	r3, [sp, #32]
 801c12c:	f108 0201 	add.w	r2, r8, #1
 801c130:	3b01      	subs	r3, #1
 801c132:	4631      	mov	r1, r6
 801c134:	4628      	mov	r0, r5
 801c136:	47b8      	blx	r7
 801c138:	3001      	adds	r0, #1
 801c13a:	d10e      	bne.n	801c15a <_printf_float+0x3fa>
 801c13c:	e65e      	b.n	801bdfc <_printf_float+0x9c>
 801c13e:	2301      	movs	r3, #1
 801c140:	464a      	mov	r2, r9
 801c142:	4631      	mov	r1, r6
 801c144:	4628      	mov	r0, r5
 801c146:	47b8      	blx	r7
 801c148:	3001      	adds	r0, #1
 801c14a:	f43f ae57 	beq.w	801bdfc <_printf_float+0x9c>
 801c14e:	f108 0801 	add.w	r8, r8, #1
 801c152:	9b08      	ldr	r3, [sp, #32]
 801c154:	3b01      	subs	r3, #1
 801c156:	4543      	cmp	r3, r8
 801c158:	dcf1      	bgt.n	801c13e <_printf_float+0x3de>
 801c15a:	9b04      	ldr	r3, [sp, #16]
 801c15c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c160:	e6db      	b.n	801bf1a <_printf_float+0x1ba>
 801c162:	f04f 0800 	mov.w	r8, #0
 801c166:	f104 091a 	add.w	r9, r4, #26
 801c16a:	e7f2      	b.n	801c152 <_printf_float+0x3f2>
 801c16c:	2301      	movs	r3, #1
 801c16e:	4642      	mov	r2, r8
 801c170:	e7df      	b.n	801c132 <_printf_float+0x3d2>
 801c172:	2301      	movs	r3, #1
 801c174:	464a      	mov	r2, r9
 801c176:	4631      	mov	r1, r6
 801c178:	4628      	mov	r0, r5
 801c17a:	47b8      	blx	r7
 801c17c:	3001      	adds	r0, #1
 801c17e:	f43f ae3d 	beq.w	801bdfc <_printf_float+0x9c>
 801c182:	f108 0801 	add.w	r8, r8, #1
 801c186:	68e3      	ldr	r3, [r4, #12]
 801c188:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c18a:	1a5b      	subs	r3, r3, r1
 801c18c:	4543      	cmp	r3, r8
 801c18e:	dcf0      	bgt.n	801c172 <_printf_float+0x412>
 801c190:	e6f7      	b.n	801bf82 <_printf_float+0x222>
 801c192:	f04f 0800 	mov.w	r8, #0
 801c196:	f104 0919 	add.w	r9, r4, #25
 801c19a:	e7f4      	b.n	801c186 <_printf_float+0x426>

0801c19c <_printf_common>:
 801c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a0:	4616      	mov	r6, r2
 801c1a2:	4699      	mov	r9, r3
 801c1a4:	688a      	ldr	r2, [r1, #8]
 801c1a6:	690b      	ldr	r3, [r1, #16]
 801c1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c1ac:	4293      	cmp	r3, r2
 801c1ae:	bfb8      	it	lt
 801c1b0:	4613      	movlt	r3, r2
 801c1b2:	6033      	str	r3, [r6, #0]
 801c1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c1b8:	4607      	mov	r7, r0
 801c1ba:	460c      	mov	r4, r1
 801c1bc:	b10a      	cbz	r2, 801c1c2 <_printf_common+0x26>
 801c1be:	3301      	adds	r3, #1
 801c1c0:	6033      	str	r3, [r6, #0]
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	0699      	lsls	r1, r3, #26
 801c1c6:	bf42      	ittt	mi
 801c1c8:	6833      	ldrmi	r3, [r6, #0]
 801c1ca:	3302      	addmi	r3, #2
 801c1cc:	6033      	strmi	r3, [r6, #0]
 801c1ce:	6825      	ldr	r5, [r4, #0]
 801c1d0:	f015 0506 	ands.w	r5, r5, #6
 801c1d4:	d106      	bne.n	801c1e4 <_printf_common+0x48>
 801c1d6:	f104 0a19 	add.w	sl, r4, #25
 801c1da:	68e3      	ldr	r3, [r4, #12]
 801c1dc:	6832      	ldr	r2, [r6, #0]
 801c1de:	1a9b      	subs	r3, r3, r2
 801c1e0:	42ab      	cmp	r3, r5
 801c1e2:	dc26      	bgt.n	801c232 <_printf_common+0x96>
 801c1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c1e8:	1e13      	subs	r3, r2, #0
 801c1ea:	6822      	ldr	r2, [r4, #0]
 801c1ec:	bf18      	it	ne
 801c1ee:	2301      	movne	r3, #1
 801c1f0:	0692      	lsls	r2, r2, #26
 801c1f2:	d42b      	bmi.n	801c24c <_printf_common+0xb0>
 801c1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c1f8:	4649      	mov	r1, r9
 801c1fa:	4638      	mov	r0, r7
 801c1fc:	47c0      	blx	r8
 801c1fe:	3001      	adds	r0, #1
 801c200:	d01e      	beq.n	801c240 <_printf_common+0xa4>
 801c202:	6823      	ldr	r3, [r4, #0]
 801c204:	68e5      	ldr	r5, [r4, #12]
 801c206:	6832      	ldr	r2, [r6, #0]
 801c208:	f003 0306 	and.w	r3, r3, #6
 801c20c:	2b04      	cmp	r3, #4
 801c20e:	bf08      	it	eq
 801c210:	1aad      	subeq	r5, r5, r2
 801c212:	68a3      	ldr	r3, [r4, #8]
 801c214:	6922      	ldr	r2, [r4, #16]
 801c216:	bf0c      	ite	eq
 801c218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c21c:	2500      	movne	r5, #0
 801c21e:	4293      	cmp	r3, r2
 801c220:	bfc4      	itt	gt
 801c222:	1a9b      	subgt	r3, r3, r2
 801c224:	18ed      	addgt	r5, r5, r3
 801c226:	2600      	movs	r6, #0
 801c228:	341a      	adds	r4, #26
 801c22a:	42b5      	cmp	r5, r6
 801c22c:	d11a      	bne.n	801c264 <_printf_common+0xc8>
 801c22e:	2000      	movs	r0, #0
 801c230:	e008      	b.n	801c244 <_printf_common+0xa8>
 801c232:	2301      	movs	r3, #1
 801c234:	4652      	mov	r2, sl
 801c236:	4649      	mov	r1, r9
 801c238:	4638      	mov	r0, r7
 801c23a:	47c0      	blx	r8
 801c23c:	3001      	adds	r0, #1
 801c23e:	d103      	bne.n	801c248 <_printf_common+0xac>
 801c240:	f04f 30ff 	mov.w	r0, #4294967295
 801c244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c248:	3501      	adds	r5, #1
 801c24a:	e7c6      	b.n	801c1da <_printf_common+0x3e>
 801c24c:	18e1      	adds	r1, r4, r3
 801c24e:	1c5a      	adds	r2, r3, #1
 801c250:	2030      	movs	r0, #48	; 0x30
 801c252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c256:	4422      	add	r2, r4
 801c258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c260:	3302      	adds	r3, #2
 801c262:	e7c7      	b.n	801c1f4 <_printf_common+0x58>
 801c264:	2301      	movs	r3, #1
 801c266:	4622      	mov	r2, r4
 801c268:	4649      	mov	r1, r9
 801c26a:	4638      	mov	r0, r7
 801c26c:	47c0      	blx	r8
 801c26e:	3001      	adds	r0, #1
 801c270:	d0e6      	beq.n	801c240 <_printf_common+0xa4>
 801c272:	3601      	adds	r6, #1
 801c274:	e7d9      	b.n	801c22a <_printf_common+0x8e>
	...

0801c278 <_printf_i>:
 801c278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c27c:	7e0f      	ldrb	r7, [r1, #24]
 801c27e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c280:	2f78      	cmp	r7, #120	; 0x78
 801c282:	4691      	mov	r9, r2
 801c284:	4680      	mov	r8, r0
 801c286:	460c      	mov	r4, r1
 801c288:	469a      	mov	sl, r3
 801c28a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c28e:	d807      	bhi.n	801c2a0 <_printf_i+0x28>
 801c290:	2f62      	cmp	r7, #98	; 0x62
 801c292:	d80a      	bhi.n	801c2aa <_printf_i+0x32>
 801c294:	2f00      	cmp	r7, #0
 801c296:	f000 80d8 	beq.w	801c44a <_printf_i+0x1d2>
 801c29a:	2f58      	cmp	r7, #88	; 0x58
 801c29c:	f000 80a3 	beq.w	801c3e6 <_printf_i+0x16e>
 801c2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c2a8:	e03a      	b.n	801c320 <_printf_i+0xa8>
 801c2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c2ae:	2b15      	cmp	r3, #21
 801c2b0:	d8f6      	bhi.n	801c2a0 <_printf_i+0x28>
 801c2b2:	a101      	add	r1, pc, #4	; (adr r1, 801c2b8 <_printf_i+0x40>)
 801c2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c2b8:	0801c311 	.word	0x0801c311
 801c2bc:	0801c325 	.word	0x0801c325
 801c2c0:	0801c2a1 	.word	0x0801c2a1
 801c2c4:	0801c2a1 	.word	0x0801c2a1
 801c2c8:	0801c2a1 	.word	0x0801c2a1
 801c2cc:	0801c2a1 	.word	0x0801c2a1
 801c2d0:	0801c325 	.word	0x0801c325
 801c2d4:	0801c2a1 	.word	0x0801c2a1
 801c2d8:	0801c2a1 	.word	0x0801c2a1
 801c2dc:	0801c2a1 	.word	0x0801c2a1
 801c2e0:	0801c2a1 	.word	0x0801c2a1
 801c2e4:	0801c431 	.word	0x0801c431
 801c2e8:	0801c355 	.word	0x0801c355
 801c2ec:	0801c413 	.word	0x0801c413
 801c2f0:	0801c2a1 	.word	0x0801c2a1
 801c2f4:	0801c2a1 	.word	0x0801c2a1
 801c2f8:	0801c453 	.word	0x0801c453
 801c2fc:	0801c2a1 	.word	0x0801c2a1
 801c300:	0801c355 	.word	0x0801c355
 801c304:	0801c2a1 	.word	0x0801c2a1
 801c308:	0801c2a1 	.word	0x0801c2a1
 801c30c:	0801c41b 	.word	0x0801c41b
 801c310:	682b      	ldr	r3, [r5, #0]
 801c312:	1d1a      	adds	r2, r3, #4
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	602a      	str	r2, [r5, #0]
 801c318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c320:	2301      	movs	r3, #1
 801c322:	e0a3      	b.n	801c46c <_printf_i+0x1f4>
 801c324:	6820      	ldr	r0, [r4, #0]
 801c326:	6829      	ldr	r1, [r5, #0]
 801c328:	0606      	lsls	r6, r0, #24
 801c32a:	f101 0304 	add.w	r3, r1, #4
 801c32e:	d50a      	bpl.n	801c346 <_printf_i+0xce>
 801c330:	680e      	ldr	r6, [r1, #0]
 801c332:	602b      	str	r3, [r5, #0]
 801c334:	2e00      	cmp	r6, #0
 801c336:	da03      	bge.n	801c340 <_printf_i+0xc8>
 801c338:	232d      	movs	r3, #45	; 0x2d
 801c33a:	4276      	negs	r6, r6
 801c33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c340:	485e      	ldr	r0, [pc, #376]	; (801c4bc <_printf_i+0x244>)
 801c342:	230a      	movs	r3, #10
 801c344:	e019      	b.n	801c37a <_printf_i+0x102>
 801c346:	680e      	ldr	r6, [r1, #0]
 801c348:	602b      	str	r3, [r5, #0]
 801c34a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c34e:	bf18      	it	ne
 801c350:	b236      	sxthne	r6, r6
 801c352:	e7ef      	b.n	801c334 <_printf_i+0xbc>
 801c354:	682b      	ldr	r3, [r5, #0]
 801c356:	6820      	ldr	r0, [r4, #0]
 801c358:	1d19      	adds	r1, r3, #4
 801c35a:	6029      	str	r1, [r5, #0]
 801c35c:	0601      	lsls	r1, r0, #24
 801c35e:	d501      	bpl.n	801c364 <_printf_i+0xec>
 801c360:	681e      	ldr	r6, [r3, #0]
 801c362:	e002      	b.n	801c36a <_printf_i+0xf2>
 801c364:	0646      	lsls	r6, r0, #25
 801c366:	d5fb      	bpl.n	801c360 <_printf_i+0xe8>
 801c368:	881e      	ldrh	r6, [r3, #0]
 801c36a:	4854      	ldr	r0, [pc, #336]	; (801c4bc <_printf_i+0x244>)
 801c36c:	2f6f      	cmp	r7, #111	; 0x6f
 801c36e:	bf0c      	ite	eq
 801c370:	2308      	moveq	r3, #8
 801c372:	230a      	movne	r3, #10
 801c374:	2100      	movs	r1, #0
 801c376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c37a:	6865      	ldr	r5, [r4, #4]
 801c37c:	60a5      	str	r5, [r4, #8]
 801c37e:	2d00      	cmp	r5, #0
 801c380:	bfa2      	ittt	ge
 801c382:	6821      	ldrge	r1, [r4, #0]
 801c384:	f021 0104 	bicge.w	r1, r1, #4
 801c388:	6021      	strge	r1, [r4, #0]
 801c38a:	b90e      	cbnz	r6, 801c390 <_printf_i+0x118>
 801c38c:	2d00      	cmp	r5, #0
 801c38e:	d04d      	beq.n	801c42c <_printf_i+0x1b4>
 801c390:	4615      	mov	r5, r2
 801c392:	fbb6 f1f3 	udiv	r1, r6, r3
 801c396:	fb03 6711 	mls	r7, r3, r1, r6
 801c39a:	5dc7      	ldrb	r7, [r0, r7]
 801c39c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c3a0:	4637      	mov	r7, r6
 801c3a2:	42bb      	cmp	r3, r7
 801c3a4:	460e      	mov	r6, r1
 801c3a6:	d9f4      	bls.n	801c392 <_printf_i+0x11a>
 801c3a8:	2b08      	cmp	r3, #8
 801c3aa:	d10b      	bne.n	801c3c4 <_printf_i+0x14c>
 801c3ac:	6823      	ldr	r3, [r4, #0]
 801c3ae:	07de      	lsls	r6, r3, #31
 801c3b0:	d508      	bpl.n	801c3c4 <_printf_i+0x14c>
 801c3b2:	6923      	ldr	r3, [r4, #16]
 801c3b4:	6861      	ldr	r1, [r4, #4]
 801c3b6:	4299      	cmp	r1, r3
 801c3b8:	bfde      	ittt	le
 801c3ba:	2330      	movle	r3, #48	; 0x30
 801c3bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c3c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c3c4:	1b52      	subs	r2, r2, r5
 801c3c6:	6122      	str	r2, [r4, #16]
 801c3c8:	f8cd a000 	str.w	sl, [sp]
 801c3cc:	464b      	mov	r3, r9
 801c3ce:	aa03      	add	r2, sp, #12
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	4640      	mov	r0, r8
 801c3d4:	f7ff fee2 	bl	801c19c <_printf_common>
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d14c      	bne.n	801c476 <_printf_i+0x1fe>
 801c3dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e0:	b004      	add	sp, #16
 801c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3e6:	4835      	ldr	r0, [pc, #212]	; (801c4bc <_printf_i+0x244>)
 801c3e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c3ec:	6829      	ldr	r1, [r5, #0]
 801c3ee:	6823      	ldr	r3, [r4, #0]
 801c3f0:	f851 6b04 	ldr.w	r6, [r1], #4
 801c3f4:	6029      	str	r1, [r5, #0]
 801c3f6:	061d      	lsls	r5, r3, #24
 801c3f8:	d514      	bpl.n	801c424 <_printf_i+0x1ac>
 801c3fa:	07df      	lsls	r7, r3, #31
 801c3fc:	bf44      	itt	mi
 801c3fe:	f043 0320 	orrmi.w	r3, r3, #32
 801c402:	6023      	strmi	r3, [r4, #0]
 801c404:	b91e      	cbnz	r6, 801c40e <_printf_i+0x196>
 801c406:	6823      	ldr	r3, [r4, #0]
 801c408:	f023 0320 	bic.w	r3, r3, #32
 801c40c:	6023      	str	r3, [r4, #0]
 801c40e:	2310      	movs	r3, #16
 801c410:	e7b0      	b.n	801c374 <_printf_i+0xfc>
 801c412:	6823      	ldr	r3, [r4, #0]
 801c414:	f043 0320 	orr.w	r3, r3, #32
 801c418:	6023      	str	r3, [r4, #0]
 801c41a:	2378      	movs	r3, #120	; 0x78
 801c41c:	4828      	ldr	r0, [pc, #160]	; (801c4c0 <_printf_i+0x248>)
 801c41e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c422:	e7e3      	b.n	801c3ec <_printf_i+0x174>
 801c424:	0659      	lsls	r1, r3, #25
 801c426:	bf48      	it	mi
 801c428:	b2b6      	uxthmi	r6, r6
 801c42a:	e7e6      	b.n	801c3fa <_printf_i+0x182>
 801c42c:	4615      	mov	r5, r2
 801c42e:	e7bb      	b.n	801c3a8 <_printf_i+0x130>
 801c430:	682b      	ldr	r3, [r5, #0]
 801c432:	6826      	ldr	r6, [r4, #0]
 801c434:	6961      	ldr	r1, [r4, #20]
 801c436:	1d18      	adds	r0, r3, #4
 801c438:	6028      	str	r0, [r5, #0]
 801c43a:	0635      	lsls	r5, r6, #24
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	d501      	bpl.n	801c444 <_printf_i+0x1cc>
 801c440:	6019      	str	r1, [r3, #0]
 801c442:	e002      	b.n	801c44a <_printf_i+0x1d2>
 801c444:	0670      	lsls	r0, r6, #25
 801c446:	d5fb      	bpl.n	801c440 <_printf_i+0x1c8>
 801c448:	8019      	strh	r1, [r3, #0]
 801c44a:	2300      	movs	r3, #0
 801c44c:	6123      	str	r3, [r4, #16]
 801c44e:	4615      	mov	r5, r2
 801c450:	e7ba      	b.n	801c3c8 <_printf_i+0x150>
 801c452:	682b      	ldr	r3, [r5, #0]
 801c454:	1d1a      	adds	r2, r3, #4
 801c456:	602a      	str	r2, [r5, #0]
 801c458:	681d      	ldr	r5, [r3, #0]
 801c45a:	6862      	ldr	r2, [r4, #4]
 801c45c:	2100      	movs	r1, #0
 801c45e:	4628      	mov	r0, r5
 801c460:	f7e3 ff56 	bl	8000310 <memchr>
 801c464:	b108      	cbz	r0, 801c46a <_printf_i+0x1f2>
 801c466:	1b40      	subs	r0, r0, r5
 801c468:	6060      	str	r0, [r4, #4]
 801c46a:	6863      	ldr	r3, [r4, #4]
 801c46c:	6123      	str	r3, [r4, #16]
 801c46e:	2300      	movs	r3, #0
 801c470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c474:	e7a8      	b.n	801c3c8 <_printf_i+0x150>
 801c476:	6923      	ldr	r3, [r4, #16]
 801c478:	462a      	mov	r2, r5
 801c47a:	4649      	mov	r1, r9
 801c47c:	4640      	mov	r0, r8
 801c47e:	47d0      	blx	sl
 801c480:	3001      	adds	r0, #1
 801c482:	d0ab      	beq.n	801c3dc <_printf_i+0x164>
 801c484:	6823      	ldr	r3, [r4, #0]
 801c486:	079b      	lsls	r3, r3, #30
 801c488:	d413      	bmi.n	801c4b2 <_printf_i+0x23a>
 801c48a:	68e0      	ldr	r0, [r4, #12]
 801c48c:	9b03      	ldr	r3, [sp, #12]
 801c48e:	4298      	cmp	r0, r3
 801c490:	bfb8      	it	lt
 801c492:	4618      	movlt	r0, r3
 801c494:	e7a4      	b.n	801c3e0 <_printf_i+0x168>
 801c496:	2301      	movs	r3, #1
 801c498:	4632      	mov	r2, r6
 801c49a:	4649      	mov	r1, r9
 801c49c:	4640      	mov	r0, r8
 801c49e:	47d0      	blx	sl
 801c4a0:	3001      	adds	r0, #1
 801c4a2:	d09b      	beq.n	801c3dc <_printf_i+0x164>
 801c4a4:	3501      	adds	r5, #1
 801c4a6:	68e3      	ldr	r3, [r4, #12]
 801c4a8:	9903      	ldr	r1, [sp, #12]
 801c4aa:	1a5b      	subs	r3, r3, r1
 801c4ac:	42ab      	cmp	r3, r5
 801c4ae:	dcf2      	bgt.n	801c496 <_printf_i+0x21e>
 801c4b0:	e7eb      	b.n	801c48a <_printf_i+0x212>
 801c4b2:	2500      	movs	r5, #0
 801c4b4:	f104 0619 	add.w	r6, r4, #25
 801c4b8:	e7f5      	b.n	801c4a6 <_printf_i+0x22e>
 801c4ba:	bf00      	nop
 801c4bc:	08046748 	.word	0x08046748
 801c4c0:	08046759 	.word	0x08046759

0801c4c4 <iprintf>:
 801c4c4:	b40f      	push	{r0, r1, r2, r3}
 801c4c6:	4b0a      	ldr	r3, [pc, #40]	; (801c4f0 <iprintf+0x2c>)
 801c4c8:	b513      	push	{r0, r1, r4, lr}
 801c4ca:	681c      	ldr	r4, [r3, #0]
 801c4cc:	b124      	cbz	r4, 801c4d8 <iprintf+0x14>
 801c4ce:	69a3      	ldr	r3, [r4, #24]
 801c4d0:	b913      	cbnz	r3, 801c4d8 <iprintf+0x14>
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f001 f81c 	bl	801d510 <__sinit>
 801c4d8:	ab05      	add	r3, sp, #20
 801c4da:	9a04      	ldr	r2, [sp, #16]
 801c4dc:	68a1      	ldr	r1, [r4, #8]
 801c4de:	9301      	str	r3, [sp, #4]
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	f002 f8b9 	bl	801e658 <_vfiprintf_r>
 801c4e6:	b002      	add	sp, #8
 801c4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4ec:	b004      	add	sp, #16
 801c4ee:	4770      	bx	lr
 801c4f0:	24000038 	.word	0x24000038

0801c4f4 <rand>:
 801c4f4:	4b16      	ldr	r3, [pc, #88]	; (801c550 <rand+0x5c>)
 801c4f6:	b510      	push	{r4, lr}
 801c4f8:	681c      	ldr	r4, [r3, #0]
 801c4fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c4fc:	b9b3      	cbnz	r3, 801c52c <rand+0x38>
 801c4fe:	2018      	movs	r0, #24
 801c500:	f001 f8d0 	bl	801d6a4 <malloc>
 801c504:	63a0      	str	r0, [r4, #56]	; 0x38
 801c506:	b928      	cbnz	r0, 801c514 <rand+0x20>
 801c508:	4602      	mov	r2, r0
 801c50a:	4b12      	ldr	r3, [pc, #72]	; (801c554 <rand+0x60>)
 801c50c:	4812      	ldr	r0, [pc, #72]	; (801c558 <rand+0x64>)
 801c50e:	214e      	movs	r1, #78	; 0x4e
 801c510:	f000 f978 	bl	801c804 <__assert_func>
 801c514:	4a11      	ldr	r2, [pc, #68]	; (801c55c <rand+0x68>)
 801c516:	4b12      	ldr	r3, [pc, #72]	; (801c560 <rand+0x6c>)
 801c518:	e9c0 2300 	strd	r2, r3, [r0]
 801c51c:	4b11      	ldr	r3, [pc, #68]	; (801c564 <rand+0x70>)
 801c51e:	6083      	str	r3, [r0, #8]
 801c520:	230b      	movs	r3, #11
 801c522:	8183      	strh	r3, [r0, #12]
 801c524:	2201      	movs	r2, #1
 801c526:	2300      	movs	r3, #0
 801c528:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c52c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801c52e:	4a0e      	ldr	r2, [pc, #56]	; (801c568 <rand+0x74>)
 801c530:	6920      	ldr	r0, [r4, #16]
 801c532:	6963      	ldr	r3, [r4, #20]
 801c534:	490d      	ldr	r1, [pc, #52]	; (801c56c <rand+0x78>)
 801c536:	4342      	muls	r2, r0
 801c538:	fb01 2203 	mla	r2, r1, r3, r2
 801c53c:	fba0 0101 	umull	r0, r1, r0, r1
 801c540:	1c43      	adds	r3, r0, #1
 801c542:	eb42 0001 	adc.w	r0, r2, r1
 801c546:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801c54a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c54e:	bd10      	pop	{r4, pc}
 801c550:	24000038 	.word	0x24000038
 801c554:	0804676a 	.word	0x0804676a
 801c558:	08046781 	.word	0x08046781
 801c55c:	abcd330e 	.word	0xabcd330e
 801c560:	e66d1234 	.word	0xe66d1234
 801c564:	0005deec 	.word	0x0005deec
 801c568:	5851f42d 	.word	0x5851f42d
 801c56c:	4c957f2d 	.word	0x4c957f2d

0801c570 <siprintf>:
 801c570:	b40e      	push	{r1, r2, r3}
 801c572:	b500      	push	{lr}
 801c574:	b09c      	sub	sp, #112	; 0x70
 801c576:	ab1d      	add	r3, sp, #116	; 0x74
 801c578:	9002      	str	r0, [sp, #8]
 801c57a:	9006      	str	r0, [sp, #24]
 801c57c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c580:	4809      	ldr	r0, [pc, #36]	; (801c5a8 <siprintf+0x38>)
 801c582:	9107      	str	r1, [sp, #28]
 801c584:	9104      	str	r1, [sp, #16]
 801c586:	4909      	ldr	r1, [pc, #36]	; (801c5ac <siprintf+0x3c>)
 801c588:	f853 2b04 	ldr.w	r2, [r3], #4
 801c58c:	9105      	str	r1, [sp, #20]
 801c58e:	6800      	ldr	r0, [r0, #0]
 801c590:	9301      	str	r3, [sp, #4]
 801c592:	a902      	add	r1, sp, #8
 801c594:	f001 fd64 	bl	801e060 <_svfiprintf_r>
 801c598:	9b02      	ldr	r3, [sp, #8]
 801c59a:	2200      	movs	r2, #0
 801c59c:	701a      	strb	r2, [r3, #0]
 801c59e:	b01c      	add	sp, #112	; 0x70
 801c5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c5a4:	b003      	add	sp, #12
 801c5a6:	4770      	bx	lr
 801c5a8:	24000038 	.word	0x24000038
 801c5ac:	ffff0208 	.word	0xffff0208

0801c5b0 <siscanf>:
 801c5b0:	b40e      	push	{r1, r2, r3}
 801c5b2:	b510      	push	{r4, lr}
 801c5b4:	b09f      	sub	sp, #124	; 0x7c
 801c5b6:	ac21      	add	r4, sp, #132	; 0x84
 801c5b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801c5bc:	f854 2b04 	ldr.w	r2, [r4], #4
 801c5c0:	9201      	str	r2, [sp, #4]
 801c5c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c5c6:	9004      	str	r0, [sp, #16]
 801c5c8:	9008      	str	r0, [sp, #32]
 801c5ca:	f7e3 fe93 	bl	80002f4 <strlen>
 801c5ce:	4b0c      	ldr	r3, [pc, #48]	; (801c600 <siscanf+0x50>)
 801c5d0:	9005      	str	r0, [sp, #20]
 801c5d2:	9009      	str	r0, [sp, #36]	; 0x24
 801c5d4:	930d      	str	r3, [sp, #52]	; 0x34
 801c5d6:	480b      	ldr	r0, [pc, #44]	; (801c604 <siscanf+0x54>)
 801c5d8:	9a01      	ldr	r2, [sp, #4]
 801c5da:	6800      	ldr	r0, [r0, #0]
 801c5dc:	9403      	str	r4, [sp, #12]
 801c5de:	2300      	movs	r3, #0
 801c5e0:	9311      	str	r3, [sp, #68]	; 0x44
 801c5e2:	9316      	str	r3, [sp, #88]	; 0x58
 801c5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c5ec:	a904      	add	r1, sp, #16
 801c5ee:	4623      	mov	r3, r4
 801c5f0:	f001 fe90 	bl	801e314 <__ssvfiscanf_r>
 801c5f4:	b01f      	add	sp, #124	; 0x7c
 801c5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5fa:	b003      	add	sp, #12
 801c5fc:	4770      	bx	lr
 801c5fe:	bf00      	nop
 801c600:	0801c62b 	.word	0x0801c62b
 801c604:	24000038 	.word	0x24000038

0801c608 <__sread>:
 801c608:	b510      	push	{r4, lr}
 801c60a:	460c      	mov	r4, r1
 801c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c610:	f002 faa4 	bl	801eb5c <_read_r>
 801c614:	2800      	cmp	r0, #0
 801c616:	bfab      	itete	ge
 801c618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c61a:	89a3      	ldrhlt	r3, [r4, #12]
 801c61c:	181b      	addge	r3, r3, r0
 801c61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c622:	bfac      	ite	ge
 801c624:	6563      	strge	r3, [r4, #84]	; 0x54
 801c626:	81a3      	strhlt	r3, [r4, #12]
 801c628:	bd10      	pop	{r4, pc}

0801c62a <__seofread>:
 801c62a:	2000      	movs	r0, #0
 801c62c:	4770      	bx	lr

0801c62e <__swrite>:
 801c62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c632:	461f      	mov	r7, r3
 801c634:	898b      	ldrh	r3, [r1, #12]
 801c636:	05db      	lsls	r3, r3, #23
 801c638:	4605      	mov	r5, r0
 801c63a:	460c      	mov	r4, r1
 801c63c:	4616      	mov	r6, r2
 801c63e:	d505      	bpl.n	801c64c <__swrite+0x1e>
 801c640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c644:	2302      	movs	r3, #2
 801c646:	2200      	movs	r2, #0
 801c648:	f001 f81a 	bl	801d680 <_lseek_r>
 801c64c:	89a3      	ldrh	r3, [r4, #12]
 801c64e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c656:	81a3      	strh	r3, [r4, #12]
 801c658:	4632      	mov	r2, r6
 801c65a:	463b      	mov	r3, r7
 801c65c:	4628      	mov	r0, r5
 801c65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c662:	f000 b8bd 	b.w	801c7e0 <_write_r>

0801c666 <__sseek>:
 801c666:	b510      	push	{r4, lr}
 801c668:	460c      	mov	r4, r1
 801c66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c66e:	f001 f807 	bl	801d680 <_lseek_r>
 801c672:	1c43      	adds	r3, r0, #1
 801c674:	89a3      	ldrh	r3, [r4, #12]
 801c676:	bf15      	itete	ne
 801c678:	6560      	strne	r0, [r4, #84]	; 0x54
 801c67a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c67e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c682:	81a3      	strheq	r3, [r4, #12]
 801c684:	bf18      	it	ne
 801c686:	81a3      	strhne	r3, [r4, #12]
 801c688:	bd10      	pop	{r4, pc}

0801c68a <__sclose>:
 801c68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c68e:	f000 b8d7 	b.w	801c840 <_close_r>

0801c692 <strcat>:
 801c692:	b510      	push	{r4, lr}
 801c694:	4602      	mov	r2, r0
 801c696:	7814      	ldrb	r4, [r2, #0]
 801c698:	4613      	mov	r3, r2
 801c69a:	3201      	adds	r2, #1
 801c69c:	2c00      	cmp	r4, #0
 801c69e:	d1fa      	bne.n	801c696 <strcat+0x4>
 801c6a0:	3b01      	subs	r3, #1
 801c6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c6aa:	2a00      	cmp	r2, #0
 801c6ac:	d1f9      	bne.n	801c6a2 <strcat+0x10>
 801c6ae:	bd10      	pop	{r4, pc}

0801c6b0 <strncmp>:
 801c6b0:	b510      	push	{r4, lr}
 801c6b2:	b17a      	cbz	r2, 801c6d4 <strncmp+0x24>
 801c6b4:	4603      	mov	r3, r0
 801c6b6:	3901      	subs	r1, #1
 801c6b8:	1884      	adds	r4, r0, r2
 801c6ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c6be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c6c2:	4290      	cmp	r0, r2
 801c6c4:	d101      	bne.n	801c6ca <strncmp+0x1a>
 801c6c6:	42a3      	cmp	r3, r4
 801c6c8:	d101      	bne.n	801c6ce <strncmp+0x1e>
 801c6ca:	1a80      	subs	r0, r0, r2
 801c6cc:	bd10      	pop	{r4, pc}
 801c6ce:	2800      	cmp	r0, #0
 801c6d0:	d1f3      	bne.n	801c6ba <strncmp+0xa>
 801c6d2:	e7fa      	b.n	801c6ca <strncmp+0x1a>
 801c6d4:	4610      	mov	r0, r2
 801c6d6:	e7f9      	b.n	801c6cc <strncmp+0x1c>

0801c6d8 <_strtol_l.constprop.0>:
 801c6d8:	2b01      	cmp	r3, #1
 801c6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6de:	d001      	beq.n	801c6e4 <_strtol_l.constprop.0+0xc>
 801c6e0:	2b24      	cmp	r3, #36	; 0x24
 801c6e2:	d906      	bls.n	801c6f2 <_strtol_l.constprop.0+0x1a>
 801c6e4:	f000 feb6 	bl	801d454 <__errno>
 801c6e8:	2316      	movs	r3, #22
 801c6ea:	6003      	str	r3, [r0, #0]
 801c6ec:	2000      	movs	r0, #0
 801c6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c7d8 <_strtol_l.constprop.0+0x100>
 801c6f6:	460d      	mov	r5, r1
 801c6f8:	462e      	mov	r6, r5
 801c6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c6fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c702:	f017 0708 	ands.w	r7, r7, #8
 801c706:	d1f7      	bne.n	801c6f8 <_strtol_l.constprop.0+0x20>
 801c708:	2c2d      	cmp	r4, #45	; 0x2d
 801c70a:	d132      	bne.n	801c772 <_strtol_l.constprop.0+0x9a>
 801c70c:	782c      	ldrb	r4, [r5, #0]
 801c70e:	2701      	movs	r7, #1
 801c710:	1cb5      	adds	r5, r6, #2
 801c712:	2b00      	cmp	r3, #0
 801c714:	d05b      	beq.n	801c7ce <_strtol_l.constprop.0+0xf6>
 801c716:	2b10      	cmp	r3, #16
 801c718:	d109      	bne.n	801c72e <_strtol_l.constprop.0+0x56>
 801c71a:	2c30      	cmp	r4, #48	; 0x30
 801c71c:	d107      	bne.n	801c72e <_strtol_l.constprop.0+0x56>
 801c71e:	782c      	ldrb	r4, [r5, #0]
 801c720:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c724:	2c58      	cmp	r4, #88	; 0x58
 801c726:	d14d      	bne.n	801c7c4 <_strtol_l.constprop.0+0xec>
 801c728:	786c      	ldrb	r4, [r5, #1]
 801c72a:	2310      	movs	r3, #16
 801c72c:	3502      	adds	r5, #2
 801c72e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c732:	f108 38ff 	add.w	r8, r8, #4294967295
 801c736:	f04f 0c00 	mov.w	ip, #0
 801c73a:	fbb8 f9f3 	udiv	r9, r8, r3
 801c73e:	4666      	mov	r6, ip
 801c740:	fb03 8a19 	mls	sl, r3, r9, r8
 801c744:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c748:	f1be 0f09 	cmp.w	lr, #9
 801c74c:	d816      	bhi.n	801c77c <_strtol_l.constprop.0+0xa4>
 801c74e:	4674      	mov	r4, lr
 801c750:	42a3      	cmp	r3, r4
 801c752:	dd24      	ble.n	801c79e <_strtol_l.constprop.0+0xc6>
 801c754:	f1bc 0f00 	cmp.w	ip, #0
 801c758:	db1e      	blt.n	801c798 <_strtol_l.constprop.0+0xc0>
 801c75a:	45b1      	cmp	r9, r6
 801c75c:	d31c      	bcc.n	801c798 <_strtol_l.constprop.0+0xc0>
 801c75e:	d101      	bne.n	801c764 <_strtol_l.constprop.0+0x8c>
 801c760:	45a2      	cmp	sl, r4
 801c762:	db19      	blt.n	801c798 <_strtol_l.constprop.0+0xc0>
 801c764:	fb06 4603 	mla	r6, r6, r3, r4
 801c768:	f04f 0c01 	mov.w	ip, #1
 801c76c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c770:	e7e8      	b.n	801c744 <_strtol_l.constprop.0+0x6c>
 801c772:	2c2b      	cmp	r4, #43	; 0x2b
 801c774:	bf04      	itt	eq
 801c776:	782c      	ldrbeq	r4, [r5, #0]
 801c778:	1cb5      	addeq	r5, r6, #2
 801c77a:	e7ca      	b.n	801c712 <_strtol_l.constprop.0+0x3a>
 801c77c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c780:	f1be 0f19 	cmp.w	lr, #25
 801c784:	d801      	bhi.n	801c78a <_strtol_l.constprop.0+0xb2>
 801c786:	3c37      	subs	r4, #55	; 0x37
 801c788:	e7e2      	b.n	801c750 <_strtol_l.constprop.0+0x78>
 801c78a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c78e:	f1be 0f19 	cmp.w	lr, #25
 801c792:	d804      	bhi.n	801c79e <_strtol_l.constprop.0+0xc6>
 801c794:	3c57      	subs	r4, #87	; 0x57
 801c796:	e7db      	b.n	801c750 <_strtol_l.constprop.0+0x78>
 801c798:	f04f 3cff 	mov.w	ip, #4294967295
 801c79c:	e7e6      	b.n	801c76c <_strtol_l.constprop.0+0x94>
 801c79e:	f1bc 0f00 	cmp.w	ip, #0
 801c7a2:	da05      	bge.n	801c7b0 <_strtol_l.constprop.0+0xd8>
 801c7a4:	2322      	movs	r3, #34	; 0x22
 801c7a6:	6003      	str	r3, [r0, #0]
 801c7a8:	4646      	mov	r6, r8
 801c7aa:	b942      	cbnz	r2, 801c7be <_strtol_l.constprop.0+0xe6>
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	e79e      	b.n	801c6ee <_strtol_l.constprop.0+0x16>
 801c7b0:	b107      	cbz	r7, 801c7b4 <_strtol_l.constprop.0+0xdc>
 801c7b2:	4276      	negs	r6, r6
 801c7b4:	2a00      	cmp	r2, #0
 801c7b6:	d0f9      	beq.n	801c7ac <_strtol_l.constprop.0+0xd4>
 801c7b8:	f1bc 0f00 	cmp.w	ip, #0
 801c7bc:	d000      	beq.n	801c7c0 <_strtol_l.constprop.0+0xe8>
 801c7be:	1e69      	subs	r1, r5, #1
 801c7c0:	6011      	str	r1, [r2, #0]
 801c7c2:	e7f3      	b.n	801c7ac <_strtol_l.constprop.0+0xd4>
 801c7c4:	2430      	movs	r4, #48	; 0x30
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d1b1      	bne.n	801c72e <_strtol_l.constprop.0+0x56>
 801c7ca:	2308      	movs	r3, #8
 801c7cc:	e7af      	b.n	801c72e <_strtol_l.constprop.0+0x56>
 801c7ce:	2c30      	cmp	r4, #48	; 0x30
 801c7d0:	d0a5      	beq.n	801c71e <_strtol_l.constprop.0+0x46>
 801c7d2:	230a      	movs	r3, #10
 801c7d4:	e7ab      	b.n	801c72e <_strtol_l.constprop.0+0x56>
 801c7d6:	bf00      	nop
 801c7d8:	08046631 	.word	0x08046631

0801c7dc <_strtol_r>:
 801c7dc:	f7ff bf7c 	b.w	801c6d8 <_strtol_l.constprop.0>

0801c7e0 <_write_r>:
 801c7e0:	b538      	push	{r3, r4, r5, lr}
 801c7e2:	4d07      	ldr	r5, [pc, #28]	; (801c800 <_write_r+0x20>)
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	4608      	mov	r0, r1
 801c7e8:	4611      	mov	r1, r2
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	602a      	str	r2, [r5, #0]
 801c7ee:	461a      	mov	r2, r3
 801c7f0:	f7e5 fb61 	bl	8001eb6 <_write>
 801c7f4:	1c43      	adds	r3, r0, #1
 801c7f6:	d102      	bne.n	801c7fe <_write_r+0x1e>
 801c7f8:	682b      	ldr	r3, [r5, #0]
 801c7fa:	b103      	cbz	r3, 801c7fe <_write_r+0x1e>
 801c7fc:	6023      	str	r3, [r4, #0]
 801c7fe:	bd38      	pop	{r3, r4, r5, pc}
 801c800:	2400794c 	.word	0x2400794c

0801c804 <__assert_func>:
 801c804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c806:	4614      	mov	r4, r2
 801c808:	461a      	mov	r2, r3
 801c80a:	4b09      	ldr	r3, [pc, #36]	; (801c830 <__assert_func+0x2c>)
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	4605      	mov	r5, r0
 801c810:	68d8      	ldr	r0, [r3, #12]
 801c812:	b14c      	cbz	r4, 801c828 <__assert_func+0x24>
 801c814:	4b07      	ldr	r3, [pc, #28]	; (801c834 <__assert_func+0x30>)
 801c816:	9100      	str	r1, [sp, #0]
 801c818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c81c:	4906      	ldr	r1, [pc, #24]	; (801c838 <__assert_func+0x34>)
 801c81e:	462b      	mov	r3, r5
 801c820:	f000 fef4 	bl	801d60c <fiprintf>
 801c824:	f002 fb62 	bl	801eeec <abort>
 801c828:	4b04      	ldr	r3, [pc, #16]	; (801c83c <__assert_func+0x38>)
 801c82a:	461c      	mov	r4, r3
 801c82c:	e7f3      	b.n	801c816 <__assert_func+0x12>
 801c82e:	bf00      	nop
 801c830:	24000038 	.word	0x24000038
 801c834:	080467dc 	.word	0x080467dc
 801c838:	080467e9 	.word	0x080467e9
 801c83c:	08046817 	.word	0x08046817

0801c840 <_close_r>:
 801c840:	b538      	push	{r3, r4, r5, lr}
 801c842:	4d06      	ldr	r5, [pc, #24]	; (801c85c <_close_r+0x1c>)
 801c844:	2300      	movs	r3, #0
 801c846:	4604      	mov	r4, r0
 801c848:	4608      	mov	r0, r1
 801c84a:	602b      	str	r3, [r5, #0]
 801c84c:	f7e5 fb4f 	bl	8001eee <_close>
 801c850:	1c43      	adds	r3, r0, #1
 801c852:	d102      	bne.n	801c85a <_close_r+0x1a>
 801c854:	682b      	ldr	r3, [r5, #0]
 801c856:	b103      	cbz	r3, 801c85a <_close_r+0x1a>
 801c858:	6023      	str	r3, [r4, #0]
 801c85a:	bd38      	pop	{r3, r4, r5, pc}
 801c85c:	2400794c 	.word	0x2400794c

0801c860 <quorem>:
 801c860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c864:	6903      	ldr	r3, [r0, #16]
 801c866:	690c      	ldr	r4, [r1, #16]
 801c868:	42a3      	cmp	r3, r4
 801c86a:	4607      	mov	r7, r0
 801c86c:	f2c0 8081 	blt.w	801c972 <quorem+0x112>
 801c870:	3c01      	subs	r4, #1
 801c872:	f101 0814 	add.w	r8, r1, #20
 801c876:	f100 0514 	add.w	r5, r0, #20
 801c87a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c87e:	9301      	str	r3, [sp, #4]
 801c880:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c888:	3301      	adds	r3, #1
 801c88a:	429a      	cmp	r2, r3
 801c88c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c894:	fbb2 f6f3 	udiv	r6, r2, r3
 801c898:	d331      	bcc.n	801c8fe <quorem+0x9e>
 801c89a:	f04f 0e00 	mov.w	lr, #0
 801c89e:	4640      	mov	r0, r8
 801c8a0:	46ac      	mov	ip, r5
 801c8a2:	46f2      	mov	sl, lr
 801c8a4:	f850 2b04 	ldr.w	r2, [r0], #4
 801c8a8:	b293      	uxth	r3, r2
 801c8aa:	fb06 e303 	mla	r3, r6, r3, lr
 801c8ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	ebaa 0303 	sub.w	r3, sl, r3
 801c8b8:	f8dc a000 	ldr.w	sl, [ip]
 801c8bc:	0c12      	lsrs	r2, r2, #16
 801c8be:	fa13 f38a 	uxtah	r3, r3, sl
 801c8c2:	fb06 e202 	mla	r2, r6, r2, lr
 801c8c6:	9300      	str	r3, [sp, #0]
 801c8c8:	9b00      	ldr	r3, [sp, #0]
 801c8ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c8ce:	b292      	uxth	r2, r2
 801c8d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8d8:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8dc:	4581      	cmp	r9, r0
 801c8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8e2:	f84c 3b04 	str.w	r3, [ip], #4
 801c8e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c8ea:	d2db      	bcs.n	801c8a4 <quorem+0x44>
 801c8ec:	f855 300b 	ldr.w	r3, [r5, fp]
 801c8f0:	b92b      	cbnz	r3, 801c8fe <quorem+0x9e>
 801c8f2:	9b01      	ldr	r3, [sp, #4]
 801c8f4:	3b04      	subs	r3, #4
 801c8f6:	429d      	cmp	r5, r3
 801c8f8:	461a      	mov	r2, r3
 801c8fa:	d32e      	bcc.n	801c95a <quorem+0xfa>
 801c8fc:	613c      	str	r4, [r7, #16]
 801c8fe:	4638      	mov	r0, r7
 801c900:	f001 f95a 	bl	801dbb8 <__mcmp>
 801c904:	2800      	cmp	r0, #0
 801c906:	db24      	blt.n	801c952 <quorem+0xf2>
 801c908:	3601      	adds	r6, #1
 801c90a:	4628      	mov	r0, r5
 801c90c:	f04f 0c00 	mov.w	ip, #0
 801c910:	f858 2b04 	ldr.w	r2, [r8], #4
 801c914:	f8d0 e000 	ldr.w	lr, [r0]
 801c918:	b293      	uxth	r3, r2
 801c91a:	ebac 0303 	sub.w	r3, ip, r3
 801c91e:	0c12      	lsrs	r2, r2, #16
 801c920:	fa13 f38e 	uxtah	r3, r3, lr
 801c924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c92c:	b29b      	uxth	r3, r3
 801c92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c932:	45c1      	cmp	r9, r8
 801c934:	f840 3b04 	str.w	r3, [r0], #4
 801c938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c93c:	d2e8      	bcs.n	801c910 <quorem+0xb0>
 801c93e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c946:	b922      	cbnz	r2, 801c952 <quorem+0xf2>
 801c948:	3b04      	subs	r3, #4
 801c94a:	429d      	cmp	r5, r3
 801c94c:	461a      	mov	r2, r3
 801c94e:	d30a      	bcc.n	801c966 <quorem+0x106>
 801c950:	613c      	str	r4, [r7, #16]
 801c952:	4630      	mov	r0, r6
 801c954:	b003      	add	sp, #12
 801c956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c95a:	6812      	ldr	r2, [r2, #0]
 801c95c:	3b04      	subs	r3, #4
 801c95e:	2a00      	cmp	r2, #0
 801c960:	d1cc      	bne.n	801c8fc <quorem+0x9c>
 801c962:	3c01      	subs	r4, #1
 801c964:	e7c7      	b.n	801c8f6 <quorem+0x96>
 801c966:	6812      	ldr	r2, [r2, #0]
 801c968:	3b04      	subs	r3, #4
 801c96a:	2a00      	cmp	r2, #0
 801c96c:	d1f0      	bne.n	801c950 <quorem+0xf0>
 801c96e:	3c01      	subs	r4, #1
 801c970:	e7eb      	b.n	801c94a <quorem+0xea>
 801c972:	2000      	movs	r0, #0
 801c974:	e7ee      	b.n	801c954 <quorem+0xf4>
	...

0801c978 <_dtoa_r>:
 801c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c97c:	ed2d 8b02 	vpush	{d8}
 801c980:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c982:	b091      	sub	sp, #68	; 0x44
 801c984:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c988:	ec59 8b10 	vmov	r8, r9, d0
 801c98c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c98e:	9106      	str	r1, [sp, #24]
 801c990:	4606      	mov	r6, r0
 801c992:	9208      	str	r2, [sp, #32]
 801c994:	930c      	str	r3, [sp, #48]	; 0x30
 801c996:	b975      	cbnz	r5, 801c9b6 <_dtoa_r+0x3e>
 801c998:	2010      	movs	r0, #16
 801c99a:	f000 fe83 	bl	801d6a4 <malloc>
 801c99e:	4602      	mov	r2, r0
 801c9a0:	6270      	str	r0, [r6, #36]	; 0x24
 801c9a2:	b920      	cbnz	r0, 801c9ae <_dtoa_r+0x36>
 801c9a4:	4baa      	ldr	r3, [pc, #680]	; (801cc50 <_dtoa_r+0x2d8>)
 801c9a6:	21ea      	movs	r1, #234	; 0xea
 801c9a8:	48aa      	ldr	r0, [pc, #680]	; (801cc54 <_dtoa_r+0x2dc>)
 801c9aa:	f7ff ff2b 	bl	801c804 <__assert_func>
 801c9ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c9b2:	6005      	str	r5, [r0, #0]
 801c9b4:	60c5      	str	r5, [r0, #12]
 801c9b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c9b8:	6819      	ldr	r1, [r3, #0]
 801c9ba:	b151      	cbz	r1, 801c9d2 <_dtoa_r+0x5a>
 801c9bc:	685a      	ldr	r2, [r3, #4]
 801c9be:	604a      	str	r2, [r1, #4]
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	4093      	lsls	r3, r2
 801c9c4:	608b      	str	r3, [r1, #8]
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	f000 feb4 	bl	801d734 <_Bfree>
 801c9cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c9ce:	2200      	movs	r2, #0
 801c9d0:	601a      	str	r2, [r3, #0]
 801c9d2:	f1b9 0300 	subs.w	r3, r9, #0
 801c9d6:	bfbb      	ittet	lt
 801c9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c9dc:	9303      	strlt	r3, [sp, #12]
 801c9de:	2300      	movge	r3, #0
 801c9e0:	2201      	movlt	r2, #1
 801c9e2:	bfac      	ite	ge
 801c9e4:	6023      	strge	r3, [r4, #0]
 801c9e6:	6022      	strlt	r2, [r4, #0]
 801c9e8:	4b9b      	ldr	r3, [pc, #620]	; (801cc58 <_dtoa_r+0x2e0>)
 801c9ea:	9c03      	ldr	r4, [sp, #12]
 801c9ec:	43a3      	bics	r3, r4
 801c9ee:	d11c      	bne.n	801ca2a <_dtoa_r+0xb2>
 801c9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9f2:	f242 730f 	movw	r3, #9999	; 0x270f
 801c9f6:	6013      	str	r3, [r2, #0]
 801c9f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c9fc:	ea53 0308 	orrs.w	r3, r3, r8
 801ca00:	f000 84fd 	beq.w	801d3fe <_dtoa_r+0xa86>
 801ca04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca06:	b963      	cbnz	r3, 801ca22 <_dtoa_r+0xaa>
 801ca08:	4b94      	ldr	r3, [pc, #592]	; (801cc5c <_dtoa_r+0x2e4>)
 801ca0a:	e01f      	b.n	801ca4c <_dtoa_r+0xd4>
 801ca0c:	4b94      	ldr	r3, [pc, #592]	; (801cc60 <_dtoa_r+0x2e8>)
 801ca0e:	9301      	str	r3, [sp, #4]
 801ca10:	3308      	adds	r3, #8
 801ca12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ca14:	6013      	str	r3, [r2, #0]
 801ca16:	9801      	ldr	r0, [sp, #4]
 801ca18:	b011      	add	sp, #68	; 0x44
 801ca1a:	ecbd 8b02 	vpop	{d8}
 801ca1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca22:	4b8e      	ldr	r3, [pc, #568]	; (801cc5c <_dtoa_r+0x2e4>)
 801ca24:	9301      	str	r3, [sp, #4]
 801ca26:	3303      	adds	r3, #3
 801ca28:	e7f3      	b.n	801ca12 <_dtoa_r+0x9a>
 801ca2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ca2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca36:	d10b      	bne.n	801ca50 <_dtoa_r+0xd8>
 801ca38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	6013      	str	r3, [r2, #0]
 801ca3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	f000 84d9 	beq.w	801d3f8 <_dtoa_r+0xa80>
 801ca46:	4887      	ldr	r0, [pc, #540]	; (801cc64 <_dtoa_r+0x2ec>)
 801ca48:	6018      	str	r0, [r3, #0]
 801ca4a:	1e43      	subs	r3, r0, #1
 801ca4c:	9301      	str	r3, [sp, #4]
 801ca4e:	e7e2      	b.n	801ca16 <_dtoa_r+0x9e>
 801ca50:	a90f      	add	r1, sp, #60	; 0x3c
 801ca52:	aa0e      	add	r2, sp, #56	; 0x38
 801ca54:	4630      	mov	r0, r6
 801ca56:	eeb0 0b48 	vmov.f64	d0, d8
 801ca5a:	f001 f953 	bl	801dd04 <__d2b>
 801ca5e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801ca62:	4605      	mov	r5, r0
 801ca64:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ca66:	2900      	cmp	r1, #0
 801ca68:	d046      	beq.n	801caf8 <_dtoa_r+0x180>
 801ca6a:	ee18 4a90 	vmov	r4, s17
 801ca6e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ca72:	ec53 2b18 	vmov	r2, r3, d8
 801ca76:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801ca7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ca7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ca82:	2400      	movs	r4, #0
 801ca84:	ec43 2b16 	vmov	d6, r2, r3
 801ca88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801ca8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc38 <_dtoa_r+0x2c0>
 801ca90:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ca94:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801cc40 <_dtoa_r+0x2c8>
 801ca98:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ca9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc48 <_dtoa_r+0x2d0>
 801caa0:	ee07 1a90 	vmov	s15, r1
 801caa4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801caa8:	eeb0 7b46 	vmov.f64	d7, d6
 801caac:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cab0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801cab4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801cab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cabc:	ee16 ba90 	vmov	fp, s13
 801cac0:	940a      	str	r4, [sp, #40]	; 0x28
 801cac2:	d508      	bpl.n	801cad6 <_dtoa_r+0x15e>
 801cac4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801cac8:	eeb4 6b47 	vcmp.f64	d6, d7
 801cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cad0:	bf18      	it	ne
 801cad2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801cad6:	f1bb 0f16 	cmp.w	fp, #22
 801cada:	d82f      	bhi.n	801cb3c <_dtoa_r+0x1c4>
 801cadc:	4b62      	ldr	r3, [pc, #392]	; (801cc68 <_dtoa_r+0x2f0>)
 801cade:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cae2:	ed93 7b00 	vldr	d7, [r3]
 801cae6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caee:	d501      	bpl.n	801caf4 <_dtoa_r+0x17c>
 801caf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801caf4:	2300      	movs	r3, #0
 801caf6:	e022      	b.n	801cb3e <_dtoa_r+0x1c6>
 801caf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cafa:	4401      	add	r1, r0
 801cafc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801cb00:	2b20      	cmp	r3, #32
 801cb02:	bfc1      	itttt	gt
 801cb04:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cb08:	fa04 f303 	lslgt.w	r3, r4, r3
 801cb0c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801cb10:	fa28 f804 	lsrgt.w	r8, r8, r4
 801cb14:	bfd6      	itet	le
 801cb16:	f1c3 0320 	rsble	r3, r3, #32
 801cb1a:	ea43 0808 	orrgt.w	r8, r3, r8
 801cb1e:	fa08 f803 	lslle.w	r8, r8, r3
 801cb22:	ee07 8a90 	vmov	s15, r8
 801cb26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cb2a:	3901      	subs	r1, #1
 801cb2c:	ee17 4a90 	vmov	r4, s15
 801cb30:	ec53 2b17 	vmov	r2, r3, d7
 801cb34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801cb38:	2401      	movs	r4, #1
 801cb3a:	e7a3      	b.n	801ca84 <_dtoa_r+0x10c>
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb40:	1a43      	subs	r3, r0, r1
 801cb42:	1e5a      	subs	r2, r3, #1
 801cb44:	bf45      	ittet	mi
 801cb46:	f1c3 0301 	rsbmi	r3, r3, #1
 801cb4a:	9304      	strmi	r3, [sp, #16]
 801cb4c:	2300      	movpl	r3, #0
 801cb4e:	2300      	movmi	r3, #0
 801cb50:	9205      	str	r2, [sp, #20]
 801cb52:	bf54      	ite	pl
 801cb54:	9304      	strpl	r3, [sp, #16]
 801cb56:	9305      	strmi	r3, [sp, #20]
 801cb58:	f1bb 0f00 	cmp.w	fp, #0
 801cb5c:	db18      	blt.n	801cb90 <_dtoa_r+0x218>
 801cb5e:	9b05      	ldr	r3, [sp, #20]
 801cb60:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cb64:	445b      	add	r3, fp
 801cb66:	9305      	str	r3, [sp, #20]
 801cb68:	2300      	movs	r3, #0
 801cb6a:	9a06      	ldr	r2, [sp, #24]
 801cb6c:	2a09      	cmp	r2, #9
 801cb6e:	d849      	bhi.n	801cc04 <_dtoa_r+0x28c>
 801cb70:	2a05      	cmp	r2, #5
 801cb72:	bfc4      	itt	gt
 801cb74:	3a04      	subgt	r2, #4
 801cb76:	9206      	strgt	r2, [sp, #24]
 801cb78:	9a06      	ldr	r2, [sp, #24]
 801cb7a:	f1a2 0202 	sub.w	r2, r2, #2
 801cb7e:	bfcc      	ite	gt
 801cb80:	2400      	movgt	r4, #0
 801cb82:	2401      	movle	r4, #1
 801cb84:	2a03      	cmp	r2, #3
 801cb86:	d848      	bhi.n	801cc1a <_dtoa_r+0x2a2>
 801cb88:	e8df f002 	tbb	[pc, r2]
 801cb8c:	3a2c2e0b 	.word	0x3a2c2e0b
 801cb90:	9b04      	ldr	r3, [sp, #16]
 801cb92:	2200      	movs	r2, #0
 801cb94:	eba3 030b 	sub.w	r3, r3, fp
 801cb98:	9304      	str	r3, [sp, #16]
 801cb9a:	9209      	str	r2, [sp, #36]	; 0x24
 801cb9c:	f1cb 0300 	rsb	r3, fp, #0
 801cba0:	e7e3      	b.n	801cb6a <_dtoa_r+0x1f2>
 801cba2:	2200      	movs	r2, #0
 801cba4:	9207      	str	r2, [sp, #28]
 801cba6:	9a08      	ldr	r2, [sp, #32]
 801cba8:	2a00      	cmp	r2, #0
 801cbaa:	dc39      	bgt.n	801cc20 <_dtoa_r+0x2a8>
 801cbac:	f04f 0a01 	mov.w	sl, #1
 801cbb0:	46d1      	mov	r9, sl
 801cbb2:	4652      	mov	r2, sl
 801cbb4:	f8cd a020 	str.w	sl, [sp, #32]
 801cbb8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801cbba:	2100      	movs	r1, #0
 801cbbc:	6079      	str	r1, [r7, #4]
 801cbbe:	2004      	movs	r0, #4
 801cbc0:	f100 0c14 	add.w	ip, r0, #20
 801cbc4:	4594      	cmp	ip, r2
 801cbc6:	6879      	ldr	r1, [r7, #4]
 801cbc8:	d92f      	bls.n	801cc2a <_dtoa_r+0x2b2>
 801cbca:	4630      	mov	r0, r6
 801cbcc:	930d      	str	r3, [sp, #52]	; 0x34
 801cbce:	f000 fd71 	bl	801d6b4 <_Balloc>
 801cbd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbd4:	9001      	str	r0, [sp, #4]
 801cbd6:	4602      	mov	r2, r0
 801cbd8:	2800      	cmp	r0, #0
 801cbda:	d149      	bne.n	801cc70 <_dtoa_r+0x2f8>
 801cbdc:	4b23      	ldr	r3, [pc, #140]	; (801cc6c <_dtoa_r+0x2f4>)
 801cbde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cbe2:	e6e1      	b.n	801c9a8 <_dtoa_r+0x30>
 801cbe4:	2201      	movs	r2, #1
 801cbe6:	e7dd      	b.n	801cba4 <_dtoa_r+0x22c>
 801cbe8:	2200      	movs	r2, #0
 801cbea:	9207      	str	r2, [sp, #28]
 801cbec:	9a08      	ldr	r2, [sp, #32]
 801cbee:	eb0b 0a02 	add.w	sl, fp, r2
 801cbf2:	f10a 0901 	add.w	r9, sl, #1
 801cbf6:	464a      	mov	r2, r9
 801cbf8:	2a01      	cmp	r2, #1
 801cbfa:	bfb8      	it	lt
 801cbfc:	2201      	movlt	r2, #1
 801cbfe:	e7db      	b.n	801cbb8 <_dtoa_r+0x240>
 801cc00:	2201      	movs	r2, #1
 801cc02:	e7f2      	b.n	801cbea <_dtoa_r+0x272>
 801cc04:	2401      	movs	r4, #1
 801cc06:	2200      	movs	r2, #0
 801cc08:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801cc0c:	f04f 3aff 	mov.w	sl, #4294967295
 801cc10:	2100      	movs	r1, #0
 801cc12:	46d1      	mov	r9, sl
 801cc14:	2212      	movs	r2, #18
 801cc16:	9108      	str	r1, [sp, #32]
 801cc18:	e7ce      	b.n	801cbb8 <_dtoa_r+0x240>
 801cc1a:	2201      	movs	r2, #1
 801cc1c:	9207      	str	r2, [sp, #28]
 801cc1e:	e7f5      	b.n	801cc0c <_dtoa_r+0x294>
 801cc20:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cc24:	46d1      	mov	r9, sl
 801cc26:	4652      	mov	r2, sl
 801cc28:	e7c6      	b.n	801cbb8 <_dtoa_r+0x240>
 801cc2a:	3101      	adds	r1, #1
 801cc2c:	6079      	str	r1, [r7, #4]
 801cc2e:	0040      	lsls	r0, r0, #1
 801cc30:	e7c6      	b.n	801cbc0 <_dtoa_r+0x248>
 801cc32:	bf00      	nop
 801cc34:	f3af 8000 	nop.w
 801cc38:	636f4361 	.word	0x636f4361
 801cc3c:	3fd287a7 	.word	0x3fd287a7
 801cc40:	8b60c8b3 	.word	0x8b60c8b3
 801cc44:	3fc68a28 	.word	0x3fc68a28
 801cc48:	509f79fb 	.word	0x509f79fb
 801cc4c:	3fd34413 	.word	0x3fd34413
 801cc50:	0804676a 	.word	0x0804676a
 801cc54:	08046825 	.word	0x08046825
 801cc58:	7ff00000 	.word	0x7ff00000
 801cc5c:	08046821 	.word	0x08046821
 801cc60:	08046818 	.word	0x08046818
 801cc64:	08046a62 	.word	0x08046a62
 801cc68:	08046978 	.word	0x08046978
 801cc6c:	08046880 	.word	0x08046880
 801cc70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cc72:	9901      	ldr	r1, [sp, #4]
 801cc74:	6011      	str	r1, [r2, #0]
 801cc76:	f1b9 0f0e 	cmp.w	r9, #14
 801cc7a:	d86c      	bhi.n	801cd56 <_dtoa_r+0x3de>
 801cc7c:	2c00      	cmp	r4, #0
 801cc7e:	d06a      	beq.n	801cd56 <_dtoa_r+0x3de>
 801cc80:	f1bb 0f00 	cmp.w	fp, #0
 801cc84:	f340 80a0 	ble.w	801cdc8 <_dtoa_r+0x450>
 801cc88:	49c1      	ldr	r1, [pc, #772]	; (801cf90 <_dtoa_r+0x618>)
 801cc8a:	f00b 020f 	and.w	r2, fp, #15
 801cc8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cc92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cc96:	ed92 7b00 	vldr	d7, [r2]
 801cc9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cc9e:	f000 8087 	beq.w	801cdb0 <_dtoa_r+0x438>
 801cca2:	4abc      	ldr	r2, [pc, #752]	; (801cf94 <_dtoa_r+0x61c>)
 801cca4:	ed92 6b08 	vldr	d6, [r2, #32]
 801cca8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801ccac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ccb0:	f001 010f 	and.w	r1, r1, #15
 801ccb4:	2203      	movs	r2, #3
 801ccb6:	48b7      	ldr	r0, [pc, #732]	; (801cf94 <_dtoa_r+0x61c>)
 801ccb8:	2900      	cmp	r1, #0
 801ccba:	d17b      	bne.n	801cdb4 <_dtoa_r+0x43c>
 801ccbc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ccc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ccc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ccc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ccca:	2900      	cmp	r1, #0
 801cccc:	f000 80a2 	beq.w	801ce14 <_dtoa_r+0x49c>
 801ccd0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ccd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ccd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ccdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce0:	f140 8098 	bpl.w	801ce14 <_dtoa_r+0x49c>
 801cce4:	f1b9 0f00 	cmp.w	r9, #0
 801cce8:	f000 8094 	beq.w	801ce14 <_dtoa_r+0x49c>
 801ccec:	f1ba 0f00 	cmp.w	sl, #0
 801ccf0:	dd2f      	ble.n	801cd52 <_dtoa_r+0x3da>
 801ccf2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ccf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ccfa:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ccfe:	f10b 37ff 	add.w	r7, fp, #4294967295
 801cd02:	3201      	adds	r2, #1
 801cd04:	4650      	mov	r0, sl
 801cd06:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cd0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801cd0e:	ee07 2a90 	vmov	s15, r2
 801cd12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cd16:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cd1a:	ee15 4a90 	vmov	r4, s11
 801cd1e:	ec52 1b15 	vmov	r1, r2, d5
 801cd22:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801cd26:	2800      	cmp	r0, #0
 801cd28:	d177      	bne.n	801ce1a <_dtoa_r+0x4a2>
 801cd2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cd2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cd32:	ec42 1b17 	vmov	d7, r1, r2
 801cd36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd3e:	f300 8263 	bgt.w	801d208 <_dtoa_r+0x890>
 801cd42:	eeb1 7b47 	vneg.f64	d7, d7
 801cd46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd4e:	f100 8258 	bmi.w	801d202 <_dtoa_r+0x88a>
 801cd52:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cd56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd58:	2a00      	cmp	r2, #0
 801cd5a:	f2c0 811d 	blt.w	801cf98 <_dtoa_r+0x620>
 801cd5e:	f1bb 0f0e 	cmp.w	fp, #14
 801cd62:	f300 8119 	bgt.w	801cf98 <_dtoa_r+0x620>
 801cd66:	4b8a      	ldr	r3, [pc, #552]	; (801cf90 <_dtoa_r+0x618>)
 801cd68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cd6c:	ed93 6b00 	vldr	d6, [r3]
 801cd70:	9b08      	ldr	r3, [sp, #32]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	f280 80b7 	bge.w	801cee6 <_dtoa_r+0x56e>
 801cd78:	f1b9 0f00 	cmp.w	r9, #0
 801cd7c:	f300 80b3 	bgt.w	801cee6 <_dtoa_r+0x56e>
 801cd80:	f040 823f 	bne.w	801d202 <_dtoa_r+0x88a>
 801cd84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cd88:	ee26 6b07 	vmul.f64	d6, d6, d7
 801cd8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cd90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd98:	464c      	mov	r4, r9
 801cd9a:	464f      	mov	r7, r9
 801cd9c:	f280 8215 	bge.w	801d1ca <_dtoa_r+0x852>
 801cda0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cda4:	2331      	movs	r3, #49	; 0x31
 801cda6:	f808 3b01 	strb.w	r3, [r8], #1
 801cdaa:	f10b 0b01 	add.w	fp, fp, #1
 801cdae:	e211      	b.n	801d1d4 <_dtoa_r+0x85c>
 801cdb0:	2202      	movs	r2, #2
 801cdb2:	e780      	b.n	801ccb6 <_dtoa_r+0x33e>
 801cdb4:	07cc      	lsls	r4, r1, #31
 801cdb6:	d504      	bpl.n	801cdc2 <_dtoa_r+0x44a>
 801cdb8:	ed90 6b00 	vldr	d6, [r0]
 801cdbc:	3201      	adds	r2, #1
 801cdbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cdc2:	1049      	asrs	r1, r1, #1
 801cdc4:	3008      	adds	r0, #8
 801cdc6:	e777      	b.n	801ccb8 <_dtoa_r+0x340>
 801cdc8:	d022      	beq.n	801ce10 <_dtoa_r+0x498>
 801cdca:	f1cb 0100 	rsb	r1, fp, #0
 801cdce:	4a70      	ldr	r2, [pc, #448]	; (801cf90 <_dtoa_r+0x618>)
 801cdd0:	f001 000f 	and.w	r0, r1, #15
 801cdd4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cdd8:	ed92 7b00 	vldr	d7, [r2]
 801cddc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801cde0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cde4:	486b      	ldr	r0, [pc, #428]	; (801cf94 <_dtoa_r+0x61c>)
 801cde6:	1109      	asrs	r1, r1, #4
 801cde8:	2400      	movs	r4, #0
 801cdea:	2202      	movs	r2, #2
 801cdec:	b929      	cbnz	r1, 801cdfa <_dtoa_r+0x482>
 801cdee:	2c00      	cmp	r4, #0
 801cdf0:	f43f af6a 	beq.w	801ccc8 <_dtoa_r+0x350>
 801cdf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cdf8:	e766      	b.n	801ccc8 <_dtoa_r+0x350>
 801cdfa:	07cf      	lsls	r7, r1, #31
 801cdfc:	d505      	bpl.n	801ce0a <_dtoa_r+0x492>
 801cdfe:	ed90 6b00 	vldr	d6, [r0]
 801ce02:	3201      	adds	r2, #1
 801ce04:	2401      	movs	r4, #1
 801ce06:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ce0a:	1049      	asrs	r1, r1, #1
 801ce0c:	3008      	adds	r0, #8
 801ce0e:	e7ed      	b.n	801cdec <_dtoa_r+0x474>
 801ce10:	2202      	movs	r2, #2
 801ce12:	e759      	b.n	801ccc8 <_dtoa_r+0x350>
 801ce14:	465f      	mov	r7, fp
 801ce16:	4648      	mov	r0, r9
 801ce18:	e775      	b.n	801cd06 <_dtoa_r+0x38e>
 801ce1a:	ec42 1b17 	vmov	d7, r1, r2
 801ce1e:	4a5c      	ldr	r2, [pc, #368]	; (801cf90 <_dtoa_r+0x618>)
 801ce20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ce24:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ce28:	9a01      	ldr	r2, [sp, #4]
 801ce2a:	1814      	adds	r4, r2, r0
 801ce2c:	9a07      	ldr	r2, [sp, #28]
 801ce2e:	b352      	cbz	r2, 801ce86 <_dtoa_r+0x50e>
 801ce30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ce34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ce38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce3c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ce40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ce44:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ce4c:	ee14 2a90 	vmov	r2, s9
 801ce50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ce54:	3230      	adds	r2, #48	; 0x30
 801ce56:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ce5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce62:	f808 2b01 	strb.w	r2, [r8], #1
 801ce66:	d439      	bmi.n	801cedc <_dtoa_r+0x564>
 801ce68:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ce6c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ce70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce74:	d472      	bmi.n	801cf5c <_dtoa_r+0x5e4>
 801ce76:	45a0      	cmp	r8, r4
 801ce78:	f43f af6b 	beq.w	801cd52 <_dtoa_r+0x3da>
 801ce7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ce80:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ce84:	e7e0      	b.n	801ce48 <_dtoa_r+0x4d0>
 801ce86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ce8e:	4621      	mov	r1, r4
 801ce90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ce94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ce98:	ee14 2a90 	vmov	r2, s9
 801ce9c:	3230      	adds	r2, #48	; 0x30
 801ce9e:	f808 2b01 	strb.w	r2, [r8], #1
 801cea2:	45a0      	cmp	r8, r4
 801cea4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cea8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ceac:	d118      	bne.n	801cee0 <_dtoa_r+0x568>
 801ceae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ceb2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ceb6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ceba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cebe:	dc4d      	bgt.n	801cf5c <_dtoa_r+0x5e4>
 801cec0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801cec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cecc:	f57f af41 	bpl.w	801cd52 <_dtoa_r+0x3da>
 801ced0:	4688      	mov	r8, r1
 801ced2:	3901      	subs	r1, #1
 801ced4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ced8:	2b30      	cmp	r3, #48	; 0x30
 801ceda:	d0f9      	beq.n	801ced0 <_dtoa_r+0x558>
 801cedc:	46bb      	mov	fp, r7
 801cede:	e02a      	b.n	801cf36 <_dtoa_r+0x5be>
 801cee0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cee4:	e7d6      	b.n	801ce94 <_dtoa_r+0x51c>
 801cee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ceea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ceee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cef2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cef6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801cefa:	ee15 3a10 	vmov	r3, s10
 801cefe:	3330      	adds	r3, #48	; 0x30
 801cf00:	f808 3b01 	strb.w	r3, [r8], #1
 801cf04:	9b01      	ldr	r3, [sp, #4]
 801cf06:	eba8 0303 	sub.w	r3, r8, r3
 801cf0a:	4599      	cmp	r9, r3
 801cf0c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cf10:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cf14:	d133      	bne.n	801cf7e <_dtoa_r+0x606>
 801cf16:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cf1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf22:	dc1a      	bgt.n	801cf5a <_dtoa_r+0x5e2>
 801cf24:	eeb4 7b46 	vcmp.f64	d7, d6
 801cf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf2c:	d103      	bne.n	801cf36 <_dtoa_r+0x5be>
 801cf2e:	ee15 3a10 	vmov	r3, s10
 801cf32:	07d9      	lsls	r1, r3, #31
 801cf34:	d411      	bmi.n	801cf5a <_dtoa_r+0x5e2>
 801cf36:	4629      	mov	r1, r5
 801cf38:	4630      	mov	r0, r6
 801cf3a:	f000 fbfb 	bl	801d734 <_Bfree>
 801cf3e:	2300      	movs	r3, #0
 801cf40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf42:	f888 3000 	strb.w	r3, [r8]
 801cf46:	f10b 0301 	add.w	r3, fp, #1
 801cf4a:	6013      	str	r3, [r2, #0]
 801cf4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	f43f ad61 	beq.w	801ca16 <_dtoa_r+0x9e>
 801cf54:	f8c3 8000 	str.w	r8, [r3]
 801cf58:	e55d      	b.n	801ca16 <_dtoa_r+0x9e>
 801cf5a:	465f      	mov	r7, fp
 801cf5c:	4643      	mov	r3, r8
 801cf5e:	4698      	mov	r8, r3
 801cf60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf64:	2a39      	cmp	r2, #57	; 0x39
 801cf66:	d106      	bne.n	801cf76 <_dtoa_r+0x5fe>
 801cf68:	9a01      	ldr	r2, [sp, #4]
 801cf6a:	429a      	cmp	r2, r3
 801cf6c:	d1f7      	bne.n	801cf5e <_dtoa_r+0x5e6>
 801cf6e:	9901      	ldr	r1, [sp, #4]
 801cf70:	2230      	movs	r2, #48	; 0x30
 801cf72:	3701      	adds	r7, #1
 801cf74:	700a      	strb	r2, [r1, #0]
 801cf76:	781a      	ldrb	r2, [r3, #0]
 801cf78:	3201      	adds	r2, #1
 801cf7a:	701a      	strb	r2, [r3, #0]
 801cf7c:	e7ae      	b.n	801cedc <_dtoa_r+0x564>
 801cf7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cf82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf8a:	d1b2      	bne.n	801cef2 <_dtoa_r+0x57a>
 801cf8c:	e7d3      	b.n	801cf36 <_dtoa_r+0x5be>
 801cf8e:	bf00      	nop
 801cf90:	08046978 	.word	0x08046978
 801cf94:	08046950 	.word	0x08046950
 801cf98:	9907      	ldr	r1, [sp, #28]
 801cf9a:	2900      	cmp	r1, #0
 801cf9c:	f000 80d0 	beq.w	801d140 <_dtoa_r+0x7c8>
 801cfa0:	9906      	ldr	r1, [sp, #24]
 801cfa2:	2901      	cmp	r1, #1
 801cfa4:	f300 80b4 	bgt.w	801d110 <_dtoa_r+0x798>
 801cfa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cfaa:	2900      	cmp	r1, #0
 801cfac:	f000 80ac 	beq.w	801d108 <_dtoa_r+0x790>
 801cfb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cfb4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cfb8:	461c      	mov	r4, r3
 801cfba:	930a      	str	r3, [sp, #40]	; 0x28
 801cfbc:	9b04      	ldr	r3, [sp, #16]
 801cfbe:	4413      	add	r3, r2
 801cfc0:	9304      	str	r3, [sp, #16]
 801cfc2:	9b05      	ldr	r3, [sp, #20]
 801cfc4:	2101      	movs	r1, #1
 801cfc6:	4413      	add	r3, r2
 801cfc8:	4630      	mov	r0, r6
 801cfca:	9305      	str	r3, [sp, #20]
 801cfcc:	f000 fc6a 	bl	801d8a4 <__i2b>
 801cfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfd2:	4607      	mov	r7, r0
 801cfd4:	f1b8 0f00 	cmp.w	r8, #0
 801cfd8:	dd0d      	ble.n	801cff6 <_dtoa_r+0x67e>
 801cfda:	9a05      	ldr	r2, [sp, #20]
 801cfdc:	2a00      	cmp	r2, #0
 801cfde:	dd0a      	ble.n	801cff6 <_dtoa_r+0x67e>
 801cfe0:	4542      	cmp	r2, r8
 801cfe2:	9904      	ldr	r1, [sp, #16]
 801cfe4:	bfa8      	it	ge
 801cfe6:	4642      	movge	r2, r8
 801cfe8:	1a89      	subs	r1, r1, r2
 801cfea:	9104      	str	r1, [sp, #16]
 801cfec:	9905      	ldr	r1, [sp, #20]
 801cfee:	eba8 0802 	sub.w	r8, r8, r2
 801cff2:	1a8a      	subs	r2, r1, r2
 801cff4:	9205      	str	r2, [sp, #20]
 801cff6:	b303      	cbz	r3, 801d03a <_dtoa_r+0x6c2>
 801cff8:	9a07      	ldr	r2, [sp, #28]
 801cffa:	2a00      	cmp	r2, #0
 801cffc:	f000 80a5 	beq.w	801d14a <_dtoa_r+0x7d2>
 801d000:	2c00      	cmp	r4, #0
 801d002:	dd13      	ble.n	801d02c <_dtoa_r+0x6b4>
 801d004:	4639      	mov	r1, r7
 801d006:	4622      	mov	r2, r4
 801d008:	4630      	mov	r0, r6
 801d00a:	930d      	str	r3, [sp, #52]	; 0x34
 801d00c:	f000 fd0a 	bl	801da24 <__pow5mult>
 801d010:	462a      	mov	r2, r5
 801d012:	4601      	mov	r1, r0
 801d014:	4607      	mov	r7, r0
 801d016:	4630      	mov	r0, r6
 801d018:	f000 fc5a 	bl	801d8d0 <__multiply>
 801d01c:	4629      	mov	r1, r5
 801d01e:	900a      	str	r0, [sp, #40]	; 0x28
 801d020:	4630      	mov	r0, r6
 801d022:	f000 fb87 	bl	801d734 <_Bfree>
 801d026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d02a:	4615      	mov	r5, r2
 801d02c:	1b1a      	subs	r2, r3, r4
 801d02e:	d004      	beq.n	801d03a <_dtoa_r+0x6c2>
 801d030:	4629      	mov	r1, r5
 801d032:	4630      	mov	r0, r6
 801d034:	f000 fcf6 	bl	801da24 <__pow5mult>
 801d038:	4605      	mov	r5, r0
 801d03a:	2101      	movs	r1, #1
 801d03c:	4630      	mov	r0, r6
 801d03e:	f000 fc31 	bl	801d8a4 <__i2b>
 801d042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d044:	2b00      	cmp	r3, #0
 801d046:	4604      	mov	r4, r0
 801d048:	f340 8081 	ble.w	801d14e <_dtoa_r+0x7d6>
 801d04c:	461a      	mov	r2, r3
 801d04e:	4601      	mov	r1, r0
 801d050:	4630      	mov	r0, r6
 801d052:	f000 fce7 	bl	801da24 <__pow5mult>
 801d056:	9b06      	ldr	r3, [sp, #24]
 801d058:	2b01      	cmp	r3, #1
 801d05a:	4604      	mov	r4, r0
 801d05c:	dd7a      	ble.n	801d154 <_dtoa_r+0x7dc>
 801d05e:	2300      	movs	r3, #0
 801d060:	930a      	str	r3, [sp, #40]	; 0x28
 801d062:	6922      	ldr	r2, [r4, #16]
 801d064:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d068:	6910      	ldr	r0, [r2, #16]
 801d06a:	f000 fbcb 	bl	801d804 <__hi0bits>
 801d06e:	f1c0 0020 	rsb	r0, r0, #32
 801d072:	9b05      	ldr	r3, [sp, #20]
 801d074:	4418      	add	r0, r3
 801d076:	f010 001f 	ands.w	r0, r0, #31
 801d07a:	f000 808c 	beq.w	801d196 <_dtoa_r+0x81e>
 801d07e:	f1c0 0220 	rsb	r2, r0, #32
 801d082:	2a04      	cmp	r2, #4
 801d084:	f340 8085 	ble.w	801d192 <_dtoa_r+0x81a>
 801d088:	f1c0 001c 	rsb	r0, r0, #28
 801d08c:	9b04      	ldr	r3, [sp, #16]
 801d08e:	4403      	add	r3, r0
 801d090:	9304      	str	r3, [sp, #16]
 801d092:	9b05      	ldr	r3, [sp, #20]
 801d094:	4403      	add	r3, r0
 801d096:	4480      	add	r8, r0
 801d098:	9305      	str	r3, [sp, #20]
 801d09a:	9b04      	ldr	r3, [sp, #16]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	dd05      	ble.n	801d0ac <_dtoa_r+0x734>
 801d0a0:	4629      	mov	r1, r5
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	4630      	mov	r0, r6
 801d0a6:	f000 fd17 	bl	801dad8 <__lshift>
 801d0aa:	4605      	mov	r5, r0
 801d0ac:	9b05      	ldr	r3, [sp, #20]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	dd05      	ble.n	801d0be <_dtoa_r+0x746>
 801d0b2:	4621      	mov	r1, r4
 801d0b4:	461a      	mov	r2, r3
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	f000 fd0e 	bl	801dad8 <__lshift>
 801d0bc:	4604      	mov	r4, r0
 801d0be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d06a      	beq.n	801d19a <_dtoa_r+0x822>
 801d0c4:	4621      	mov	r1, r4
 801d0c6:	4628      	mov	r0, r5
 801d0c8:	f000 fd76 	bl	801dbb8 <__mcmp>
 801d0cc:	2800      	cmp	r0, #0
 801d0ce:	da64      	bge.n	801d19a <_dtoa_r+0x822>
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	4629      	mov	r1, r5
 801d0d4:	220a      	movs	r2, #10
 801d0d6:	4630      	mov	r0, r6
 801d0d8:	f000 fb4e 	bl	801d778 <__multadd>
 801d0dc:	9b07      	ldr	r3, [sp, #28]
 801d0de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d0e2:	4605      	mov	r5, r0
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f000 8191 	beq.w	801d40c <_dtoa_r+0xa94>
 801d0ea:	4639      	mov	r1, r7
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	220a      	movs	r2, #10
 801d0f0:	4630      	mov	r0, r6
 801d0f2:	f000 fb41 	bl	801d778 <__multadd>
 801d0f6:	f1ba 0f00 	cmp.w	sl, #0
 801d0fa:	4607      	mov	r7, r0
 801d0fc:	f300 808d 	bgt.w	801d21a <_dtoa_r+0x8a2>
 801d100:	9b06      	ldr	r3, [sp, #24]
 801d102:	2b02      	cmp	r3, #2
 801d104:	dc50      	bgt.n	801d1a8 <_dtoa_r+0x830>
 801d106:	e088      	b.n	801d21a <_dtoa_r+0x8a2>
 801d108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d10a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d10e:	e751      	b.n	801cfb4 <_dtoa_r+0x63c>
 801d110:	f109 34ff 	add.w	r4, r9, #4294967295
 801d114:	42a3      	cmp	r3, r4
 801d116:	bfbf      	itttt	lt
 801d118:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d11a:	1ae3      	sublt	r3, r4, r3
 801d11c:	18d2      	addlt	r2, r2, r3
 801d11e:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d120:	bfb6      	itet	lt
 801d122:	4623      	movlt	r3, r4
 801d124:	1b1c      	subge	r4, r3, r4
 801d126:	2400      	movlt	r4, #0
 801d128:	f1b9 0f00 	cmp.w	r9, #0
 801d12c:	bfb5      	itete	lt
 801d12e:	9a04      	ldrlt	r2, [sp, #16]
 801d130:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d134:	eba2 0809 	sublt.w	r8, r2, r9
 801d138:	464a      	movge	r2, r9
 801d13a:	bfb8      	it	lt
 801d13c:	2200      	movlt	r2, #0
 801d13e:	e73c      	b.n	801cfba <_dtoa_r+0x642>
 801d140:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d144:	9f07      	ldr	r7, [sp, #28]
 801d146:	461c      	mov	r4, r3
 801d148:	e744      	b.n	801cfd4 <_dtoa_r+0x65c>
 801d14a:	461a      	mov	r2, r3
 801d14c:	e770      	b.n	801d030 <_dtoa_r+0x6b8>
 801d14e:	9b06      	ldr	r3, [sp, #24]
 801d150:	2b01      	cmp	r3, #1
 801d152:	dc18      	bgt.n	801d186 <_dtoa_r+0x80e>
 801d154:	9b02      	ldr	r3, [sp, #8]
 801d156:	b9b3      	cbnz	r3, 801d186 <_dtoa_r+0x80e>
 801d158:	9b03      	ldr	r3, [sp, #12]
 801d15a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d15e:	b9a2      	cbnz	r2, 801d18a <_dtoa_r+0x812>
 801d160:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d164:	0d12      	lsrs	r2, r2, #20
 801d166:	0512      	lsls	r2, r2, #20
 801d168:	b18a      	cbz	r2, 801d18e <_dtoa_r+0x816>
 801d16a:	9b04      	ldr	r3, [sp, #16]
 801d16c:	3301      	adds	r3, #1
 801d16e:	9304      	str	r3, [sp, #16]
 801d170:	9b05      	ldr	r3, [sp, #20]
 801d172:	3301      	adds	r3, #1
 801d174:	9305      	str	r3, [sp, #20]
 801d176:	2301      	movs	r3, #1
 801d178:	930a      	str	r3, [sp, #40]	; 0x28
 801d17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	f47f af70 	bne.w	801d062 <_dtoa_r+0x6ea>
 801d182:	2001      	movs	r0, #1
 801d184:	e775      	b.n	801d072 <_dtoa_r+0x6fa>
 801d186:	2300      	movs	r3, #0
 801d188:	e7f6      	b.n	801d178 <_dtoa_r+0x800>
 801d18a:	9b02      	ldr	r3, [sp, #8]
 801d18c:	e7f4      	b.n	801d178 <_dtoa_r+0x800>
 801d18e:	920a      	str	r2, [sp, #40]	; 0x28
 801d190:	e7f3      	b.n	801d17a <_dtoa_r+0x802>
 801d192:	d082      	beq.n	801d09a <_dtoa_r+0x722>
 801d194:	4610      	mov	r0, r2
 801d196:	301c      	adds	r0, #28
 801d198:	e778      	b.n	801d08c <_dtoa_r+0x714>
 801d19a:	f1b9 0f00 	cmp.w	r9, #0
 801d19e:	dc37      	bgt.n	801d210 <_dtoa_r+0x898>
 801d1a0:	9b06      	ldr	r3, [sp, #24]
 801d1a2:	2b02      	cmp	r3, #2
 801d1a4:	dd34      	ble.n	801d210 <_dtoa_r+0x898>
 801d1a6:	46ca      	mov	sl, r9
 801d1a8:	f1ba 0f00 	cmp.w	sl, #0
 801d1ac:	d10d      	bne.n	801d1ca <_dtoa_r+0x852>
 801d1ae:	4621      	mov	r1, r4
 801d1b0:	4653      	mov	r3, sl
 801d1b2:	2205      	movs	r2, #5
 801d1b4:	4630      	mov	r0, r6
 801d1b6:	f000 fadf 	bl	801d778 <__multadd>
 801d1ba:	4601      	mov	r1, r0
 801d1bc:	4604      	mov	r4, r0
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f000 fcfa 	bl	801dbb8 <__mcmp>
 801d1c4:	2800      	cmp	r0, #0
 801d1c6:	f73f adeb 	bgt.w	801cda0 <_dtoa_r+0x428>
 801d1ca:	9b08      	ldr	r3, [sp, #32]
 801d1cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d1d0:	ea6f 0b03 	mvn.w	fp, r3
 801d1d4:	f04f 0900 	mov.w	r9, #0
 801d1d8:	4621      	mov	r1, r4
 801d1da:	4630      	mov	r0, r6
 801d1dc:	f000 faaa 	bl	801d734 <_Bfree>
 801d1e0:	2f00      	cmp	r7, #0
 801d1e2:	f43f aea8 	beq.w	801cf36 <_dtoa_r+0x5be>
 801d1e6:	f1b9 0f00 	cmp.w	r9, #0
 801d1ea:	d005      	beq.n	801d1f8 <_dtoa_r+0x880>
 801d1ec:	45b9      	cmp	r9, r7
 801d1ee:	d003      	beq.n	801d1f8 <_dtoa_r+0x880>
 801d1f0:	4649      	mov	r1, r9
 801d1f2:	4630      	mov	r0, r6
 801d1f4:	f000 fa9e 	bl	801d734 <_Bfree>
 801d1f8:	4639      	mov	r1, r7
 801d1fa:	4630      	mov	r0, r6
 801d1fc:	f000 fa9a 	bl	801d734 <_Bfree>
 801d200:	e699      	b.n	801cf36 <_dtoa_r+0x5be>
 801d202:	2400      	movs	r4, #0
 801d204:	4627      	mov	r7, r4
 801d206:	e7e0      	b.n	801d1ca <_dtoa_r+0x852>
 801d208:	46bb      	mov	fp, r7
 801d20a:	4604      	mov	r4, r0
 801d20c:	4607      	mov	r7, r0
 801d20e:	e5c7      	b.n	801cda0 <_dtoa_r+0x428>
 801d210:	9b07      	ldr	r3, [sp, #28]
 801d212:	46ca      	mov	sl, r9
 801d214:	2b00      	cmp	r3, #0
 801d216:	f000 8100 	beq.w	801d41a <_dtoa_r+0xaa2>
 801d21a:	f1b8 0f00 	cmp.w	r8, #0
 801d21e:	dd05      	ble.n	801d22c <_dtoa_r+0x8b4>
 801d220:	4639      	mov	r1, r7
 801d222:	4642      	mov	r2, r8
 801d224:	4630      	mov	r0, r6
 801d226:	f000 fc57 	bl	801dad8 <__lshift>
 801d22a:	4607      	mov	r7, r0
 801d22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d05d      	beq.n	801d2ee <_dtoa_r+0x976>
 801d232:	6879      	ldr	r1, [r7, #4]
 801d234:	4630      	mov	r0, r6
 801d236:	f000 fa3d 	bl	801d6b4 <_Balloc>
 801d23a:	4680      	mov	r8, r0
 801d23c:	b928      	cbnz	r0, 801d24a <_dtoa_r+0x8d2>
 801d23e:	4b82      	ldr	r3, [pc, #520]	; (801d448 <_dtoa_r+0xad0>)
 801d240:	4602      	mov	r2, r0
 801d242:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d246:	f7ff bbaf 	b.w	801c9a8 <_dtoa_r+0x30>
 801d24a:	693a      	ldr	r2, [r7, #16]
 801d24c:	3202      	adds	r2, #2
 801d24e:	0092      	lsls	r2, r2, #2
 801d250:	f107 010c 	add.w	r1, r7, #12
 801d254:	300c      	adds	r0, #12
 801d256:	f7fe fcc3 	bl	801bbe0 <memcpy>
 801d25a:	2201      	movs	r2, #1
 801d25c:	4641      	mov	r1, r8
 801d25e:	4630      	mov	r0, r6
 801d260:	f000 fc3a 	bl	801dad8 <__lshift>
 801d264:	9b01      	ldr	r3, [sp, #4]
 801d266:	3301      	adds	r3, #1
 801d268:	9304      	str	r3, [sp, #16]
 801d26a:	9b01      	ldr	r3, [sp, #4]
 801d26c:	4453      	add	r3, sl
 801d26e:	9308      	str	r3, [sp, #32]
 801d270:	9b02      	ldr	r3, [sp, #8]
 801d272:	f003 0301 	and.w	r3, r3, #1
 801d276:	46b9      	mov	r9, r7
 801d278:	9307      	str	r3, [sp, #28]
 801d27a:	4607      	mov	r7, r0
 801d27c:	9b04      	ldr	r3, [sp, #16]
 801d27e:	4621      	mov	r1, r4
 801d280:	3b01      	subs	r3, #1
 801d282:	4628      	mov	r0, r5
 801d284:	9302      	str	r3, [sp, #8]
 801d286:	f7ff faeb 	bl	801c860 <quorem>
 801d28a:	4603      	mov	r3, r0
 801d28c:	3330      	adds	r3, #48	; 0x30
 801d28e:	9005      	str	r0, [sp, #20]
 801d290:	4649      	mov	r1, r9
 801d292:	4628      	mov	r0, r5
 801d294:	9309      	str	r3, [sp, #36]	; 0x24
 801d296:	f000 fc8f 	bl	801dbb8 <__mcmp>
 801d29a:	463a      	mov	r2, r7
 801d29c:	4682      	mov	sl, r0
 801d29e:	4621      	mov	r1, r4
 801d2a0:	4630      	mov	r0, r6
 801d2a2:	f000 fca5 	bl	801dbf0 <__mdiff>
 801d2a6:	68c2      	ldr	r2, [r0, #12]
 801d2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2aa:	4680      	mov	r8, r0
 801d2ac:	bb0a      	cbnz	r2, 801d2f2 <_dtoa_r+0x97a>
 801d2ae:	4601      	mov	r1, r0
 801d2b0:	4628      	mov	r0, r5
 801d2b2:	f000 fc81 	bl	801dbb8 <__mcmp>
 801d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b8:	4602      	mov	r2, r0
 801d2ba:	4641      	mov	r1, r8
 801d2bc:	4630      	mov	r0, r6
 801d2be:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d2c2:	f000 fa37 	bl	801d734 <_Bfree>
 801d2c6:	9b06      	ldr	r3, [sp, #24]
 801d2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d2ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d2ce:	ea43 0102 	orr.w	r1, r3, r2
 801d2d2:	9b07      	ldr	r3, [sp, #28]
 801d2d4:	430b      	orrs	r3, r1
 801d2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2d8:	d10d      	bne.n	801d2f6 <_dtoa_r+0x97e>
 801d2da:	2b39      	cmp	r3, #57	; 0x39
 801d2dc:	d029      	beq.n	801d332 <_dtoa_r+0x9ba>
 801d2de:	f1ba 0f00 	cmp.w	sl, #0
 801d2e2:	dd01      	ble.n	801d2e8 <_dtoa_r+0x970>
 801d2e4:	9b05      	ldr	r3, [sp, #20]
 801d2e6:	3331      	adds	r3, #49	; 0x31
 801d2e8:	9a02      	ldr	r2, [sp, #8]
 801d2ea:	7013      	strb	r3, [r2, #0]
 801d2ec:	e774      	b.n	801d1d8 <_dtoa_r+0x860>
 801d2ee:	4638      	mov	r0, r7
 801d2f0:	e7b8      	b.n	801d264 <_dtoa_r+0x8ec>
 801d2f2:	2201      	movs	r2, #1
 801d2f4:	e7e1      	b.n	801d2ba <_dtoa_r+0x942>
 801d2f6:	f1ba 0f00 	cmp.w	sl, #0
 801d2fa:	db06      	blt.n	801d30a <_dtoa_r+0x992>
 801d2fc:	9906      	ldr	r1, [sp, #24]
 801d2fe:	ea41 0a0a 	orr.w	sl, r1, sl
 801d302:	9907      	ldr	r1, [sp, #28]
 801d304:	ea5a 0101 	orrs.w	r1, sl, r1
 801d308:	d120      	bne.n	801d34c <_dtoa_r+0x9d4>
 801d30a:	2a00      	cmp	r2, #0
 801d30c:	ddec      	ble.n	801d2e8 <_dtoa_r+0x970>
 801d30e:	4629      	mov	r1, r5
 801d310:	2201      	movs	r2, #1
 801d312:	4630      	mov	r0, r6
 801d314:	9304      	str	r3, [sp, #16]
 801d316:	f000 fbdf 	bl	801dad8 <__lshift>
 801d31a:	4621      	mov	r1, r4
 801d31c:	4605      	mov	r5, r0
 801d31e:	f000 fc4b 	bl	801dbb8 <__mcmp>
 801d322:	2800      	cmp	r0, #0
 801d324:	9b04      	ldr	r3, [sp, #16]
 801d326:	dc02      	bgt.n	801d32e <_dtoa_r+0x9b6>
 801d328:	d1de      	bne.n	801d2e8 <_dtoa_r+0x970>
 801d32a:	07da      	lsls	r2, r3, #31
 801d32c:	d5dc      	bpl.n	801d2e8 <_dtoa_r+0x970>
 801d32e:	2b39      	cmp	r3, #57	; 0x39
 801d330:	d1d8      	bne.n	801d2e4 <_dtoa_r+0x96c>
 801d332:	9a02      	ldr	r2, [sp, #8]
 801d334:	2339      	movs	r3, #57	; 0x39
 801d336:	7013      	strb	r3, [r2, #0]
 801d338:	4643      	mov	r3, r8
 801d33a:	4698      	mov	r8, r3
 801d33c:	3b01      	subs	r3, #1
 801d33e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d342:	2a39      	cmp	r2, #57	; 0x39
 801d344:	d051      	beq.n	801d3ea <_dtoa_r+0xa72>
 801d346:	3201      	adds	r2, #1
 801d348:	701a      	strb	r2, [r3, #0]
 801d34a:	e745      	b.n	801d1d8 <_dtoa_r+0x860>
 801d34c:	2a00      	cmp	r2, #0
 801d34e:	dd03      	ble.n	801d358 <_dtoa_r+0x9e0>
 801d350:	2b39      	cmp	r3, #57	; 0x39
 801d352:	d0ee      	beq.n	801d332 <_dtoa_r+0x9ba>
 801d354:	3301      	adds	r3, #1
 801d356:	e7c7      	b.n	801d2e8 <_dtoa_r+0x970>
 801d358:	9a04      	ldr	r2, [sp, #16]
 801d35a:	9908      	ldr	r1, [sp, #32]
 801d35c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d360:	428a      	cmp	r2, r1
 801d362:	d02b      	beq.n	801d3bc <_dtoa_r+0xa44>
 801d364:	4629      	mov	r1, r5
 801d366:	2300      	movs	r3, #0
 801d368:	220a      	movs	r2, #10
 801d36a:	4630      	mov	r0, r6
 801d36c:	f000 fa04 	bl	801d778 <__multadd>
 801d370:	45b9      	cmp	r9, r7
 801d372:	4605      	mov	r5, r0
 801d374:	f04f 0300 	mov.w	r3, #0
 801d378:	f04f 020a 	mov.w	r2, #10
 801d37c:	4649      	mov	r1, r9
 801d37e:	4630      	mov	r0, r6
 801d380:	d107      	bne.n	801d392 <_dtoa_r+0xa1a>
 801d382:	f000 f9f9 	bl	801d778 <__multadd>
 801d386:	4681      	mov	r9, r0
 801d388:	4607      	mov	r7, r0
 801d38a:	9b04      	ldr	r3, [sp, #16]
 801d38c:	3301      	adds	r3, #1
 801d38e:	9304      	str	r3, [sp, #16]
 801d390:	e774      	b.n	801d27c <_dtoa_r+0x904>
 801d392:	f000 f9f1 	bl	801d778 <__multadd>
 801d396:	4639      	mov	r1, r7
 801d398:	4681      	mov	r9, r0
 801d39a:	2300      	movs	r3, #0
 801d39c:	220a      	movs	r2, #10
 801d39e:	4630      	mov	r0, r6
 801d3a0:	f000 f9ea 	bl	801d778 <__multadd>
 801d3a4:	4607      	mov	r7, r0
 801d3a6:	e7f0      	b.n	801d38a <_dtoa_r+0xa12>
 801d3a8:	f1ba 0f00 	cmp.w	sl, #0
 801d3ac:	9a01      	ldr	r2, [sp, #4]
 801d3ae:	bfcc      	ite	gt
 801d3b0:	46d0      	movgt	r8, sl
 801d3b2:	f04f 0801 	movle.w	r8, #1
 801d3b6:	4490      	add	r8, r2
 801d3b8:	f04f 0900 	mov.w	r9, #0
 801d3bc:	4629      	mov	r1, r5
 801d3be:	2201      	movs	r2, #1
 801d3c0:	4630      	mov	r0, r6
 801d3c2:	9302      	str	r3, [sp, #8]
 801d3c4:	f000 fb88 	bl	801dad8 <__lshift>
 801d3c8:	4621      	mov	r1, r4
 801d3ca:	4605      	mov	r5, r0
 801d3cc:	f000 fbf4 	bl	801dbb8 <__mcmp>
 801d3d0:	2800      	cmp	r0, #0
 801d3d2:	dcb1      	bgt.n	801d338 <_dtoa_r+0x9c0>
 801d3d4:	d102      	bne.n	801d3dc <_dtoa_r+0xa64>
 801d3d6:	9b02      	ldr	r3, [sp, #8]
 801d3d8:	07db      	lsls	r3, r3, #31
 801d3da:	d4ad      	bmi.n	801d338 <_dtoa_r+0x9c0>
 801d3dc:	4643      	mov	r3, r8
 801d3de:	4698      	mov	r8, r3
 801d3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d3e4:	2a30      	cmp	r2, #48	; 0x30
 801d3e6:	d0fa      	beq.n	801d3de <_dtoa_r+0xa66>
 801d3e8:	e6f6      	b.n	801d1d8 <_dtoa_r+0x860>
 801d3ea:	9a01      	ldr	r2, [sp, #4]
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d1a4      	bne.n	801d33a <_dtoa_r+0x9c2>
 801d3f0:	f10b 0b01 	add.w	fp, fp, #1
 801d3f4:	2331      	movs	r3, #49	; 0x31
 801d3f6:	e778      	b.n	801d2ea <_dtoa_r+0x972>
 801d3f8:	4b14      	ldr	r3, [pc, #80]	; (801d44c <_dtoa_r+0xad4>)
 801d3fa:	f7ff bb27 	b.w	801ca4c <_dtoa_r+0xd4>
 801d3fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d400:	2b00      	cmp	r3, #0
 801d402:	f47f ab03 	bne.w	801ca0c <_dtoa_r+0x94>
 801d406:	4b12      	ldr	r3, [pc, #72]	; (801d450 <_dtoa_r+0xad8>)
 801d408:	f7ff bb20 	b.w	801ca4c <_dtoa_r+0xd4>
 801d40c:	f1ba 0f00 	cmp.w	sl, #0
 801d410:	dc03      	bgt.n	801d41a <_dtoa_r+0xaa2>
 801d412:	9b06      	ldr	r3, [sp, #24]
 801d414:	2b02      	cmp	r3, #2
 801d416:	f73f aec7 	bgt.w	801d1a8 <_dtoa_r+0x830>
 801d41a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d41e:	4621      	mov	r1, r4
 801d420:	4628      	mov	r0, r5
 801d422:	f7ff fa1d 	bl	801c860 <quorem>
 801d426:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d42a:	f808 3b01 	strb.w	r3, [r8], #1
 801d42e:	9a01      	ldr	r2, [sp, #4]
 801d430:	eba8 0202 	sub.w	r2, r8, r2
 801d434:	4592      	cmp	sl, r2
 801d436:	ddb7      	ble.n	801d3a8 <_dtoa_r+0xa30>
 801d438:	4629      	mov	r1, r5
 801d43a:	2300      	movs	r3, #0
 801d43c:	220a      	movs	r2, #10
 801d43e:	4630      	mov	r0, r6
 801d440:	f000 f99a 	bl	801d778 <__multadd>
 801d444:	4605      	mov	r5, r0
 801d446:	e7ea      	b.n	801d41e <_dtoa_r+0xaa6>
 801d448:	08046880 	.word	0x08046880
 801d44c:	08046a61 	.word	0x08046a61
 801d450:	08046818 	.word	0x08046818

0801d454 <__errno>:
 801d454:	4b01      	ldr	r3, [pc, #4]	; (801d45c <__errno+0x8>)
 801d456:	6818      	ldr	r0, [r3, #0]
 801d458:	4770      	bx	lr
 801d45a:	bf00      	nop
 801d45c:	24000038 	.word	0x24000038

0801d460 <std>:
 801d460:	2300      	movs	r3, #0
 801d462:	b510      	push	{r4, lr}
 801d464:	4604      	mov	r4, r0
 801d466:	e9c0 3300 	strd	r3, r3, [r0]
 801d46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d46e:	6083      	str	r3, [r0, #8]
 801d470:	8181      	strh	r1, [r0, #12]
 801d472:	6643      	str	r3, [r0, #100]	; 0x64
 801d474:	81c2      	strh	r2, [r0, #14]
 801d476:	6183      	str	r3, [r0, #24]
 801d478:	4619      	mov	r1, r3
 801d47a:	2208      	movs	r2, #8
 801d47c:	305c      	adds	r0, #92	; 0x5c
 801d47e:	f7fe fbd7 	bl	801bc30 <memset>
 801d482:	4b05      	ldr	r3, [pc, #20]	; (801d498 <std+0x38>)
 801d484:	6263      	str	r3, [r4, #36]	; 0x24
 801d486:	4b05      	ldr	r3, [pc, #20]	; (801d49c <std+0x3c>)
 801d488:	62a3      	str	r3, [r4, #40]	; 0x28
 801d48a:	4b05      	ldr	r3, [pc, #20]	; (801d4a0 <std+0x40>)
 801d48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d48e:	4b05      	ldr	r3, [pc, #20]	; (801d4a4 <std+0x44>)
 801d490:	6224      	str	r4, [r4, #32]
 801d492:	6323      	str	r3, [r4, #48]	; 0x30
 801d494:	bd10      	pop	{r4, pc}
 801d496:	bf00      	nop
 801d498:	0801c609 	.word	0x0801c609
 801d49c:	0801c62f 	.word	0x0801c62f
 801d4a0:	0801c667 	.word	0x0801c667
 801d4a4:	0801c68b 	.word	0x0801c68b

0801d4a8 <_cleanup_r>:
 801d4a8:	4901      	ldr	r1, [pc, #4]	; (801d4b0 <_cleanup_r+0x8>)
 801d4aa:	f000 b8c1 	b.w	801d630 <_fwalk_reent>
 801d4ae:	bf00      	nop
 801d4b0:	0801f009 	.word	0x0801f009

0801d4b4 <__sfmoreglue>:
 801d4b4:	b570      	push	{r4, r5, r6, lr}
 801d4b6:	2268      	movs	r2, #104	; 0x68
 801d4b8:	1e4d      	subs	r5, r1, #1
 801d4ba:	4355      	muls	r5, r2
 801d4bc:	460e      	mov	r6, r1
 801d4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d4c2:	f000 fcfd 	bl	801dec0 <_malloc_r>
 801d4c6:	4604      	mov	r4, r0
 801d4c8:	b140      	cbz	r0, 801d4dc <__sfmoreglue+0x28>
 801d4ca:	2100      	movs	r1, #0
 801d4cc:	e9c0 1600 	strd	r1, r6, [r0]
 801d4d0:	300c      	adds	r0, #12
 801d4d2:	60a0      	str	r0, [r4, #8]
 801d4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d4d8:	f7fe fbaa 	bl	801bc30 <memset>
 801d4dc:	4620      	mov	r0, r4
 801d4de:	bd70      	pop	{r4, r5, r6, pc}

0801d4e0 <__sfp_lock_acquire>:
 801d4e0:	4801      	ldr	r0, [pc, #4]	; (801d4e8 <__sfp_lock_acquire+0x8>)
 801d4e2:	f000 b8ca 	b.w	801d67a <__retarget_lock_acquire_recursive>
 801d4e6:	bf00      	nop
 801d4e8:	240079c5 	.word	0x240079c5

0801d4ec <__sfp_lock_release>:
 801d4ec:	4801      	ldr	r0, [pc, #4]	; (801d4f4 <__sfp_lock_release+0x8>)
 801d4ee:	f000 b8c5 	b.w	801d67c <__retarget_lock_release_recursive>
 801d4f2:	bf00      	nop
 801d4f4:	240079c5 	.word	0x240079c5

0801d4f8 <__sinit_lock_acquire>:
 801d4f8:	4801      	ldr	r0, [pc, #4]	; (801d500 <__sinit_lock_acquire+0x8>)
 801d4fa:	f000 b8be 	b.w	801d67a <__retarget_lock_acquire_recursive>
 801d4fe:	bf00      	nop
 801d500:	240079c6 	.word	0x240079c6

0801d504 <__sinit_lock_release>:
 801d504:	4801      	ldr	r0, [pc, #4]	; (801d50c <__sinit_lock_release+0x8>)
 801d506:	f000 b8b9 	b.w	801d67c <__retarget_lock_release_recursive>
 801d50a:	bf00      	nop
 801d50c:	240079c6 	.word	0x240079c6

0801d510 <__sinit>:
 801d510:	b510      	push	{r4, lr}
 801d512:	4604      	mov	r4, r0
 801d514:	f7ff fff0 	bl	801d4f8 <__sinit_lock_acquire>
 801d518:	69a3      	ldr	r3, [r4, #24]
 801d51a:	b11b      	cbz	r3, 801d524 <__sinit+0x14>
 801d51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d520:	f7ff bff0 	b.w	801d504 <__sinit_lock_release>
 801d524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d528:	6523      	str	r3, [r4, #80]	; 0x50
 801d52a:	4b13      	ldr	r3, [pc, #76]	; (801d578 <__sinit+0x68>)
 801d52c:	4a13      	ldr	r2, [pc, #76]	; (801d57c <__sinit+0x6c>)
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	62a2      	str	r2, [r4, #40]	; 0x28
 801d532:	42a3      	cmp	r3, r4
 801d534:	bf04      	itt	eq
 801d536:	2301      	moveq	r3, #1
 801d538:	61a3      	streq	r3, [r4, #24]
 801d53a:	4620      	mov	r0, r4
 801d53c:	f000 f820 	bl	801d580 <__sfp>
 801d540:	6060      	str	r0, [r4, #4]
 801d542:	4620      	mov	r0, r4
 801d544:	f000 f81c 	bl	801d580 <__sfp>
 801d548:	60a0      	str	r0, [r4, #8]
 801d54a:	4620      	mov	r0, r4
 801d54c:	f000 f818 	bl	801d580 <__sfp>
 801d550:	2200      	movs	r2, #0
 801d552:	60e0      	str	r0, [r4, #12]
 801d554:	2104      	movs	r1, #4
 801d556:	6860      	ldr	r0, [r4, #4]
 801d558:	f7ff ff82 	bl	801d460 <std>
 801d55c:	68a0      	ldr	r0, [r4, #8]
 801d55e:	2201      	movs	r2, #1
 801d560:	2109      	movs	r1, #9
 801d562:	f7ff ff7d 	bl	801d460 <std>
 801d566:	68e0      	ldr	r0, [r4, #12]
 801d568:	2202      	movs	r2, #2
 801d56a:	2112      	movs	r1, #18
 801d56c:	f7ff ff78 	bl	801d460 <std>
 801d570:	2301      	movs	r3, #1
 801d572:	61a3      	str	r3, [r4, #24]
 801d574:	e7d2      	b.n	801d51c <__sinit+0xc>
 801d576:	bf00      	nop
 801d578:	08046734 	.word	0x08046734
 801d57c:	0801d4a9 	.word	0x0801d4a9

0801d580 <__sfp>:
 801d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d582:	4607      	mov	r7, r0
 801d584:	f7ff ffac 	bl	801d4e0 <__sfp_lock_acquire>
 801d588:	4b1e      	ldr	r3, [pc, #120]	; (801d604 <__sfp+0x84>)
 801d58a:	681e      	ldr	r6, [r3, #0]
 801d58c:	69b3      	ldr	r3, [r6, #24]
 801d58e:	b913      	cbnz	r3, 801d596 <__sfp+0x16>
 801d590:	4630      	mov	r0, r6
 801d592:	f7ff ffbd 	bl	801d510 <__sinit>
 801d596:	3648      	adds	r6, #72	; 0x48
 801d598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d59c:	3b01      	subs	r3, #1
 801d59e:	d503      	bpl.n	801d5a8 <__sfp+0x28>
 801d5a0:	6833      	ldr	r3, [r6, #0]
 801d5a2:	b30b      	cbz	r3, 801d5e8 <__sfp+0x68>
 801d5a4:	6836      	ldr	r6, [r6, #0]
 801d5a6:	e7f7      	b.n	801d598 <__sfp+0x18>
 801d5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d5ac:	b9d5      	cbnz	r5, 801d5e4 <__sfp+0x64>
 801d5ae:	4b16      	ldr	r3, [pc, #88]	; (801d608 <__sfp+0x88>)
 801d5b0:	60e3      	str	r3, [r4, #12]
 801d5b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d5b6:	6665      	str	r5, [r4, #100]	; 0x64
 801d5b8:	f000 f85e 	bl	801d678 <__retarget_lock_init_recursive>
 801d5bc:	f7ff ff96 	bl	801d4ec <__sfp_lock_release>
 801d5c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d5c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d5c8:	6025      	str	r5, [r4, #0]
 801d5ca:	61a5      	str	r5, [r4, #24]
 801d5cc:	2208      	movs	r2, #8
 801d5ce:	4629      	mov	r1, r5
 801d5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d5d4:	f7fe fb2c 	bl	801bc30 <memset>
 801d5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5e4:	3468      	adds	r4, #104	; 0x68
 801d5e6:	e7d9      	b.n	801d59c <__sfp+0x1c>
 801d5e8:	2104      	movs	r1, #4
 801d5ea:	4638      	mov	r0, r7
 801d5ec:	f7ff ff62 	bl	801d4b4 <__sfmoreglue>
 801d5f0:	4604      	mov	r4, r0
 801d5f2:	6030      	str	r0, [r6, #0]
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	d1d5      	bne.n	801d5a4 <__sfp+0x24>
 801d5f8:	f7ff ff78 	bl	801d4ec <__sfp_lock_release>
 801d5fc:	230c      	movs	r3, #12
 801d5fe:	603b      	str	r3, [r7, #0]
 801d600:	e7ee      	b.n	801d5e0 <__sfp+0x60>
 801d602:	bf00      	nop
 801d604:	08046734 	.word	0x08046734
 801d608:	ffff0001 	.word	0xffff0001

0801d60c <fiprintf>:
 801d60c:	b40e      	push	{r1, r2, r3}
 801d60e:	b503      	push	{r0, r1, lr}
 801d610:	4601      	mov	r1, r0
 801d612:	ab03      	add	r3, sp, #12
 801d614:	4805      	ldr	r0, [pc, #20]	; (801d62c <fiprintf+0x20>)
 801d616:	f853 2b04 	ldr.w	r2, [r3], #4
 801d61a:	6800      	ldr	r0, [r0, #0]
 801d61c:	9301      	str	r3, [sp, #4]
 801d61e:	f001 f81b 	bl	801e658 <_vfiprintf_r>
 801d622:	b002      	add	sp, #8
 801d624:	f85d eb04 	ldr.w	lr, [sp], #4
 801d628:	b003      	add	sp, #12
 801d62a:	4770      	bx	lr
 801d62c:	24000038 	.word	0x24000038

0801d630 <_fwalk_reent>:
 801d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d634:	4606      	mov	r6, r0
 801d636:	4688      	mov	r8, r1
 801d638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d63c:	2700      	movs	r7, #0
 801d63e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d642:	f1b9 0901 	subs.w	r9, r9, #1
 801d646:	d505      	bpl.n	801d654 <_fwalk_reent+0x24>
 801d648:	6824      	ldr	r4, [r4, #0]
 801d64a:	2c00      	cmp	r4, #0
 801d64c:	d1f7      	bne.n	801d63e <_fwalk_reent+0xe>
 801d64e:	4638      	mov	r0, r7
 801d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d654:	89ab      	ldrh	r3, [r5, #12]
 801d656:	2b01      	cmp	r3, #1
 801d658:	d907      	bls.n	801d66a <_fwalk_reent+0x3a>
 801d65a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d65e:	3301      	adds	r3, #1
 801d660:	d003      	beq.n	801d66a <_fwalk_reent+0x3a>
 801d662:	4629      	mov	r1, r5
 801d664:	4630      	mov	r0, r6
 801d666:	47c0      	blx	r8
 801d668:	4307      	orrs	r7, r0
 801d66a:	3568      	adds	r5, #104	; 0x68
 801d66c:	e7e9      	b.n	801d642 <_fwalk_reent+0x12>
	...

0801d670 <_localeconv_r>:
 801d670:	4800      	ldr	r0, [pc, #0]	; (801d674 <_localeconv_r+0x4>)
 801d672:	4770      	bx	lr
 801d674:	2400018c 	.word	0x2400018c

0801d678 <__retarget_lock_init_recursive>:
 801d678:	4770      	bx	lr

0801d67a <__retarget_lock_acquire_recursive>:
 801d67a:	4770      	bx	lr

0801d67c <__retarget_lock_release_recursive>:
 801d67c:	4770      	bx	lr
	...

0801d680 <_lseek_r>:
 801d680:	b538      	push	{r3, r4, r5, lr}
 801d682:	4d07      	ldr	r5, [pc, #28]	; (801d6a0 <_lseek_r+0x20>)
 801d684:	4604      	mov	r4, r0
 801d686:	4608      	mov	r0, r1
 801d688:	4611      	mov	r1, r2
 801d68a:	2200      	movs	r2, #0
 801d68c:	602a      	str	r2, [r5, #0]
 801d68e:	461a      	mov	r2, r3
 801d690:	f7e4 fc54 	bl	8001f3c <_lseek>
 801d694:	1c43      	adds	r3, r0, #1
 801d696:	d102      	bne.n	801d69e <_lseek_r+0x1e>
 801d698:	682b      	ldr	r3, [r5, #0]
 801d69a:	b103      	cbz	r3, 801d69e <_lseek_r+0x1e>
 801d69c:	6023      	str	r3, [r4, #0]
 801d69e:	bd38      	pop	{r3, r4, r5, pc}
 801d6a0:	2400794c 	.word	0x2400794c

0801d6a4 <malloc>:
 801d6a4:	4b02      	ldr	r3, [pc, #8]	; (801d6b0 <malloc+0xc>)
 801d6a6:	4601      	mov	r1, r0
 801d6a8:	6818      	ldr	r0, [r3, #0]
 801d6aa:	f000 bc09 	b.w	801dec0 <_malloc_r>
 801d6ae:	bf00      	nop
 801d6b0:	24000038 	.word	0x24000038

0801d6b4 <_Balloc>:
 801d6b4:	b570      	push	{r4, r5, r6, lr}
 801d6b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d6b8:	4604      	mov	r4, r0
 801d6ba:	460d      	mov	r5, r1
 801d6bc:	b976      	cbnz	r6, 801d6dc <_Balloc+0x28>
 801d6be:	2010      	movs	r0, #16
 801d6c0:	f7ff fff0 	bl	801d6a4 <malloc>
 801d6c4:	4602      	mov	r2, r0
 801d6c6:	6260      	str	r0, [r4, #36]	; 0x24
 801d6c8:	b920      	cbnz	r0, 801d6d4 <_Balloc+0x20>
 801d6ca:	4b18      	ldr	r3, [pc, #96]	; (801d72c <_Balloc+0x78>)
 801d6cc:	4818      	ldr	r0, [pc, #96]	; (801d730 <_Balloc+0x7c>)
 801d6ce:	2166      	movs	r1, #102	; 0x66
 801d6d0:	f7ff f898 	bl	801c804 <__assert_func>
 801d6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d6d8:	6006      	str	r6, [r0, #0]
 801d6da:	60c6      	str	r6, [r0, #12]
 801d6dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d6de:	68f3      	ldr	r3, [r6, #12]
 801d6e0:	b183      	cbz	r3, 801d704 <_Balloc+0x50>
 801d6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d6ea:	b9b8      	cbnz	r0, 801d71c <_Balloc+0x68>
 801d6ec:	2101      	movs	r1, #1
 801d6ee:	fa01 f605 	lsl.w	r6, r1, r5
 801d6f2:	1d72      	adds	r2, r6, #5
 801d6f4:	0092      	lsls	r2, r2, #2
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f000 fb60 	bl	801ddbc <_calloc_r>
 801d6fc:	b160      	cbz	r0, 801d718 <_Balloc+0x64>
 801d6fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d702:	e00e      	b.n	801d722 <_Balloc+0x6e>
 801d704:	2221      	movs	r2, #33	; 0x21
 801d706:	2104      	movs	r1, #4
 801d708:	4620      	mov	r0, r4
 801d70a:	f000 fb57 	bl	801ddbc <_calloc_r>
 801d70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d710:	60f0      	str	r0, [r6, #12]
 801d712:	68db      	ldr	r3, [r3, #12]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d1e4      	bne.n	801d6e2 <_Balloc+0x2e>
 801d718:	2000      	movs	r0, #0
 801d71a:	bd70      	pop	{r4, r5, r6, pc}
 801d71c:	6802      	ldr	r2, [r0, #0]
 801d71e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d722:	2300      	movs	r3, #0
 801d724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d728:	e7f7      	b.n	801d71a <_Balloc+0x66>
 801d72a:	bf00      	nop
 801d72c:	0804676a 	.word	0x0804676a
 801d730:	080468f4 	.word	0x080468f4

0801d734 <_Bfree>:
 801d734:	b570      	push	{r4, r5, r6, lr}
 801d736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d738:	4605      	mov	r5, r0
 801d73a:	460c      	mov	r4, r1
 801d73c:	b976      	cbnz	r6, 801d75c <_Bfree+0x28>
 801d73e:	2010      	movs	r0, #16
 801d740:	f7ff ffb0 	bl	801d6a4 <malloc>
 801d744:	4602      	mov	r2, r0
 801d746:	6268      	str	r0, [r5, #36]	; 0x24
 801d748:	b920      	cbnz	r0, 801d754 <_Bfree+0x20>
 801d74a:	4b09      	ldr	r3, [pc, #36]	; (801d770 <_Bfree+0x3c>)
 801d74c:	4809      	ldr	r0, [pc, #36]	; (801d774 <_Bfree+0x40>)
 801d74e:	218a      	movs	r1, #138	; 0x8a
 801d750:	f7ff f858 	bl	801c804 <__assert_func>
 801d754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d758:	6006      	str	r6, [r0, #0]
 801d75a:	60c6      	str	r6, [r0, #12]
 801d75c:	b13c      	cbz	r4, 801d76e <_Bfree+0x3a>
 801d75e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d760:	6862      	ldr	r2, [r4, #4]
 801d762:	68db      	ldr	r3, [r3, #12]
 801d764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d768:	6021      	str	r1, [r4, #0]
 801d76a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d76e:	bd70      	pop	{r4, r5, r6, pc}
 801d770:	0804676a 	.word	0x0804676a
 801d774:	080468f4 	.word	0x080468f4

0801d778 <__multadd>:
 801d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d77c:	690d      	ldr	r5, [r1, #16]
 801d77e:	4607      	mov	r7, r0
 801d780:	460c      	mov	r4, r1
 801d782:	461e      	mov	r6, r3
 801d784:	f101 0c14 	add.w	ip, r1, #20
 801d788:	2000      	movs	r0, #0
 801d78a:	f8dc 3000 	ldr.w	r3, [ip]
 801d78e:	b299      	uxth	r1, r3
 801d790:	fb02 6101 	mla	r1, r2, r1, r6
 801d794:	0c1e      	lsrs	r6, r3, #16
 801d796:	0c0b      	lsrs	r3, r1, #16
 801d798:	fb02 3306 	mla	r3, r2, r6, r3
 801d79c:	b289      	uxth	r1, r1
 801d79e:	3001      	adds	r0, #1
 801d7a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d7a4:	4285      	cmp	r5, r0
 801d7a6:	f84c 1b04 	str.w	r1, [ip], #4
 801d7aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d7ae:	dcec      	bgt.n	801d78a <__multadd+0x12>
 801d7b0:	b30e      	cbz	r6, 801d7f6 <__multadd+0x7e>
 801d7b2:	68a3      	ldr	r3, [r4, #8]
 801d7b4:	42ab      	cmp	r3, r5
 801d7b6:	dc19      	bgt.n	801d7ec <__multadd+0x74>
 801d7b8:	6861      	ldr	r1, [r4, #4]
 801d7ba:	4638      	mov	r0, r7
 801d7bc:	3101      	adds	r1, #1
 801d7be:	f7ff ff79 	bl	801d6b4 <_Balloc>
 801d7c2:	4680      	mov	r8, r0
 801d7c4:	b928      	cbnz	r0, 801d7d2 <__multadd+0x5a>
 801d7c6:	4602      	mov	r2, r0
 801d7c8:	4b0c      	ldr	r3, [pc, #48]	; (801d7fc <__multadd+0x84>)
 801d7ca:	480d      	ldr	r0, [pc, #52]	; (801d800 <__multadd+0x88>)
 801d7cc:	21b5      	movs	r1, #181	; 0xb5
 801d7ce:	f7ff f819 	bl	801c804 <__assert_func>
 801d7d2:	6922      	ldr	r2, [r4, #16]
 801d7d4:	3202      	adds	r2, #2
 801d7d6:	f104 010c 	add.w	r1, r4, #12
 801d7da:	0092      	lsls	r2, r2, #2
 801d7dc:	300c      	adds	r0, #12
 801d7de:	f7fe f9ff 	bl	801bbe0 <memcpy>
 801d7e2:	4621      	mov	r1, r4
 801d7e4:	4638      	mov	r0, r7
 801d7e6:	f7ff ffa5 	bl	801d734 <_Bfree>
 801d7ea:	4644      	mov	r4, r8
 801d7ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d7f0:	3501      	adds	r5, #1
 801d7f2:	615e      	str	r6, [r3, #20]
 801d7f4:	6125      	str	r5, [r4, #16]
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7fc:	08046880 	.word	0x08046880
 801d800:	080468f4 	.word	0x080468f4

0801d804 <__hi0bits>:
 801d804:	0c03      	lsrs	r3, r0, #16
 801d806:	041b      	lsls	r3, r3, #16
 801d808:	b9d3      	cbnz	r3, 801d840 <__hi0bits+0x3c>
 801d80a:	0400      	lsls	r0, r0, #16
 801d80c:	2310      	movs	r3, #16
 801d80e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d812:	bf04      	itt	eq
 801d814:	0200      	lsleq	r0, r0, #8
 801d816:	3308      	addeq	r3, #8
 801d818:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d81c:	bf04      	itt	eq
 801d81e:	0100      	lsleq	r0, r0, #4
 801d820:	3304      	addeq	r3, #4
 801d822:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d826:	bf04      	itt	eq
 801d828:	0080      	lsleq	r0, r0, #2
 801d82a:	3302      	addeq	r3, #2
 801d82c:	2800      	cmp	r0, #0
 801d82e:	db05      	blt.n	801d83c <__hi0bits+0x38>
 801d830:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d834:	f103 0301 	add.w	r3, r3, #1
 801d838:	bf08      	it	eq
 801d83a:	2320      	moveq	r3, #32
 801d83c:	4618      	mov	r0, r3
 801d83e:	4770      	bx	lr
 801d840:	2300      	movs	r3, #0
 801d842:	e7e4      	b.n	801d80e <__hi0bits+0xa>

0801d844 <__lo0bits>:
 801d844:	6803      	ldr	r3, [r0, #0]
 801d846:	f013 0207 	ands.w	r2, r3, #7
 801d84a:	4601      	mov	r1, r0
 801d84c:	d00b      	beq.n	801d866 <__lo0bits+0x22>
 801d84e:	07da      	lsls	r2, r3, #31
 801d850:	d423      	bmi.n	801d89a <__lo0bits+0x56>
 801d852:	0798      	lsls	r0, r3, #30
 801d854:	bf49      	itett	mi
 801d856:	085b      	lsrmi	r3, r3, #1
 801d858:	089b      	lsrpl	r3, r3, #2
 801d85a:	2001      	movmi	r0, #1
 801d85c:	600b      	strmi	r3, [r1, #0]
 801d85e:	bf5c      	itt	pl
 801d860:	600b      	strpl	r3, [r1, #0]
 801d862:	2002      	movpl	r0, #2
 801d864:	4770      	bx	lr
 801d866:	b298      	uxth	r0, r3
 801d868:	b9a8      	cbnz	r0, 801d896 <__lo0bits+0x52>
 801d86a:	0c1b      	lsrs	r3, r3, #16
 801d86c:	2010      	movs	r0, #16
 801d86e:	b2da      	uxtb	r2, r3
 801d870:	b90a      	cbnz	r2, 801d876 <__lo0bits+0x32>
 801d872:	3008      	adds	r0, #8
 801d874:	0a1b      	lsrs	r3, r3, #8
 801d876:	071a      	lsls	r2, r3, #28
 801d878:	bf04      	itt	eq
 801d87a:	091b      	lsreq	r3, r3, #4
 801d87c:	3004      	addeq	r0, #4
 801d87e:	079a      	lsls	r2, r3, #30
 801d880:	bf04      	itt	eq
 801d882:	089b      	lsreq	r3, r3, #2
 801d884:	3002      	addeq	r0, #2
 801d886:	07da      	lsls	r2, r3, #31
 801d888:	d403      	bmi.n	801d892 <__lo0bits+0x4e>
 801d88a:	085b      	lsrs	r3, r3, #1
 801d88c:	f100 0001 	add.w	r0, r0, #1
 801d890:	d005      	beq.n	801d89e <__lo0bits+0x5a>
 801d892:	600b      	str	r3, [r1, #0]
 801d894:	4770      	bx	lr
 801d896:	4610      	mov	r0, r2
 801d898:	e7e9      	b.n	801d86e <__lo0bits+0x2a>
 801d89a:	2000      	movs	r0, #0
 801d89c:	4770      	bx	lr
 801d89e:	2020      	movs	r0, #32
 801d8a0:	4770      	bx	lr
	...

0801d8a4 <__i2b>:
 801d8a4:	b510      	push	{r4, lr}
 801d8a6:	460c      	mov	r4, r1
 801d8a8:	2101      	movs	r1, #1
 801d8aa:	f7ff ff03 	bl	801d6b4 <_Balloc>
 801d8ae:	4602      	mov	r2, r0
 801d8b0:	b928      	cbnz	r0, 801d8be <__i2b+0x1a>
 801d8b2:	4b05      	ldr	r3, [pc, #20]	; (801d8c8 <__i2b+0x24>)
 801d8b4:	4805      	ldr	r0, [pc, #20]	; (801d8cc <__i2b+0x28>)
 801d8b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d8ba:	f7fe ffa3 	bl	801c804 <__assert_func>
 801d8be:	2301      	movs	r3, #1
 801d8c0:	6144      	str	r4, [r0, #20]
 801d8c2:	6103      	str	r3, [r0, #16]
 801d8c4:	bd10      	pop	{r4, pc}
 801d8c6:	bf00      	nop
 801d8c8:	08046880 	.word	0x08046880
 801d8cc:	080468f4 	.word	0x080468f4

0801d8d0 <__multiply>:
 801d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8d4:	4691      	mov	r9, r2
 801d8d6:	690a      	ldr	r2, [r1, #16]
 801d8d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d8dc:	429a      	cmp	r2, r3
 801d8de:	bfb8      	it	lt
 801d8e0:	460b      	movlt	r3, r1
 801d8e2:	460c      	mov	r4, r1
 801d8e4:	bfbc      	itt	lt
 801d8e6:	464c      	movlt	r4, r9
 801d8e8:	4699      	movlt	r9, r3
 801d8ea:	6927      	ldr	r7, [r4, #16]
 801d8ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d8f0:	68a3      	ldr	r3, [r4, #8]
 801d8f2:	6861      	ldr	r1, [r4, #4]
 801d8f4:	eb07 060a 	add.w	r6, r7, sl
 801d8f8:	42b3      	cmp	r3, r6
 801d8fa:	b085      	sub	sp, #20
 801d8fc:	bfb8      	it	lt
 801d8fe:	3101      	addlt	r1, #1
 801d900:	f7ff fed8 	bl	801d6b4 <_Balloc>
 801d904:	b930      	cbnz	r0, 801d914 <__multiply+0x44>
 801d906:	4602      	mov	r2, r0
 801d908:	4b44      	ldr	r3, [pc, #272]	; (801da1c <__multiply+0x14c>)
 801d90a:	4845      	ldr	r0, [pc, #276]	; (801da20 <__multiply+0x150>)
 801d90c:	f240 115d 	movw	r1, #349	; 0x15d
 801d910:	f7fe ff78 	bl	801c804 <__assert_func>
 801d914:	f100 0514 	add.w	r5, r0, #20
 801d918:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d91c:	462b      	mov	r3, r5
 801d91e:	2200      	movs	r2, #0
 801d920:	4543      	cmp	r3, r8
 801d922:	d321      	bcc.n	801d968 <__multiply+0x98>
 801d924:	f104 0314 	add.w	r3, r4, #20
 801d928:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d92c:	f109 0314 	add.w	r3, r9, #20
 801d930:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d934:	9202      	str	r2, [sp, #8]
 801d936:	1b3a      	subs	r2, r7, r4
 801d938:	3a15      	subs	r2, #21
 801d93a:	f022 0203 	bic.w	r2, r2, #3
 801d93e:	3204      	adds	r2, #4
 801d940:	f104 0115 	add.w	r1, r4, #21
 801d944:	428f      	cmp	r7, r1
 801d946:	bf38      	it	cc
 801d948:	2204      	movcc	r2, #4
 801d94a:	9201      	str	r2, [sp, #4]
 801d94c:	9a02      	ldr	r2, [sp, #8]
 801d94e:	9303      	str	r3, [sp, #12]
 801d950:	429a      	cmp	r2, r3
 801d952:	d80c      	bhi.n	801d96e <__multiply+0x9e>
 801d954:	2e00      	cmp	r6, #0
 801d956:	dd03      	ble.n	801d960 <__multiply+0x90>
 801d958:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d05a      	beq.n	801da16 <__multiply+0x146>
 801d960:	6106      	str	r6, [r0, #16]
 801d962:	b005      	add	sp, #20
 801d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d968:	f843 2b04 	str.w	r2, [r3], #4
 801d96c:	e7d8      	b.n	801d920 <__multiply+0x50>
 801d96e:	f8b3 a000 	ldrh.w	sl, [r3]
 801d972:	f1ba 0f00 	cmp.w	sl, #0
 801d976:	d024      	beq.n	801d9c2 <__multiply+0xf2>
 801d978:	f104 0e14 	add.w	lr, r4, #20
 801d97c:	46a9      	mov	r9, r5
 801d97e:	f04f 0c00 	mov.w	ip, #0
 801d982:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d986:	f8d9 1000 	ldr.w	r1, [r9]
 801d98a:	fa1f fb82 	uxth.w	fp, r2
 801d98e:	b289      	uxth	r1, r1
 801d990:	fb0a 110b 	mla	r1, sl, fp, r1
 801d994:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d998:	f8d9 2000 	ldr.w	r2, [r9]
 801d99c:	4461      	add	r1, ip
 801d99e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d9a2:	fb0a c20b 	mla	r2, sl, fp, ip
 801d9a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d9aa:	b289      	uxth	r1, r1
 801d9ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d9b0:	4577      	cmp	r7, lr
 801d9b2:	f849 1b04 	str.w	r1, [r9], #4
 801d9b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d9ba:	d8e2      	bhi.n	801d982 <__multiply+0xb2>
 801d9bc:	9a01      	ldr	r2, [sp, #4]
 801d9be:	f845 c002 	str.w	ip, [r5, r2]
 801d9c2:	9a03      	ldr	r2, [sp, #12]
 801d9c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d9c8:	3304      	adds	r3, #4
 801d9ca:	f1b9 0f00 	cmp.w	r9, #0
 801d9ce:	d020      	beq.n	801da12 <__multiply+0x142>
 801d9d0:	6829      	ldr	r1, [r5, #0]
 801d9d2:	f104 0c14 	add.w	ip, r4, #20
 801d9d6:	46ae      	mov	lr, r5
 801d9d8:	f04f 0a00 	mov.w	sl, #0
 801d9dc:	f8bc b000 	ldrh.w	fp, [ip]
 801d9e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d9e4:	fb09 220b 	mla	r2, r9, fp, r2
 801d9e8:	4492      	add	sl, r2
 801d9ea:	b289      	uxth	r1, r1
 801d9ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d9f0:	f84e 1b04 	str.w	r1, [lr], #4
 801d9f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d9f8:	f8be 1000 	ldrh.w	r1, [lr]
 801d9fc:	0c12      	lsrs	r2, r2, #16
 801d9fe:	fb09 1102 	mla	r1, r9, r2, r1
 801da02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801da06:	4567      	cmp	r7, ip
 801da08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801da0c:	d8e6      	bhi.n	801d9dc <__multiply+0x10c>
 801da0e:	9a01      	ldr	r2, [sp, #4]
 801da10:	50a9      	str	r1, [r5, r2]
 801da12:	3504      	adds	r5, #4
 801da14:	e79a      	b.n	801d94c <__multiply+0x7c>
 801da16:	3e01      	subs	r6, #1
 801da18:	e79c      	b.n	801d954 <__multiply+0x84>
 801da1a:	bf00      	nop
 801da1c:	08046880 	.word	0x08046880
 801da20:	080468f4 	.word	0x080468f4

0801da24 <__pow5mult>:
 801da24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da28:	4615      	mov	r5, r2
 801da2a:	f012 0203 	ands.w	r2, r2, #3
 801da2e:	4606      	mov	r6, r0
 801da30:	460f      	mov	r7, r1
 801da32:	d007      	beq.n	801da44 <__pow5mult+0x20>
 801da34:	4c25      	ldr	r4, [pc, #148]	; (801dacc <__pow5mult+0xa8>)
 801da36:	3a01      	subs	r2, #1
 801da38:	2300      	movs	r3, #0
 801da3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801da3e:	f7ff fe9b 	bl	801d778 <__multadd>
 801da42:	4607      	mov	r7, r0
 801da44:	10ad      	asrs	r5, r5, #2
 801da46:	d03d      	beq.n	801dac4 <__pow5mult+0xa0>
 801da48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801da4a:	b97c      	cbnz	r4, 801da6c <__pow5mult+0x48>
 801da4c:	2010      	movs	r0, #16
 801da4e:	f7ff fe29 	bl	801d6a4 <malloc>
 801da52:	4602      	mov	r2, r0
 801da54:	6270      	str	r0, [r6, #36]	; 0x24
 801da56:	b928      	cbnz	r0, 801da64 <__pow5mult+0x40>
 801da58:	4b1d      	ldr	r3, [pc, #116]	; (801dad0 <__pow5mult+0xac>)
 801da5a:	481e      	ldr	r0, [pc, #120]	; (801dad4 <__pow5mult+0xb0>)
 801da5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801da60:	f7fe fed0 	bl	801c804 <__assert_func>
 801da64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801da68:	6004      	str	r4, [r0, #0]
 801da6a:	60c4      	str	r4, [r0, #12]
 801da6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801da70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801da74:	b94c      	cbnz	r4, 801da8a <__pow5mult+0x66>
 801da76:	f240 2171 	movw	r1, #625	; 0x271
 801da7a:	4630      	mov	r0, r6
 801da7c:	f7ff ff12 	bl	801d8a4 <__i2b>
 801da80:	2300      	movs	r3, #0
 801da82:	f8c8 0008 	str.w	r0, [r8, #8]
 801da86:	4604      	mov	r4, r0
 801da88:	6003      	str	r3, [r0, #0]
 801da8a:	f04f 0900 	mov.w	r9, #0
 801da8e:	07eb      	lsls	r3, r5, #31
 801da90:	d50a      	bpl.n	801daa8 <__pow5mult+0x84>
 801da92:	4639      	mov	r1, r7
 801da94:	4622      	mov	r2, r4
 801da96:	4630      	mov	r0, r6
 801da98:	f7ff ff1a 	bl	801d8d0 <__multiply>
 801da9c:	4639      	mov	r1, r7
 801da9e:	4680      	mov	r8, r0
 801daa0:	4630      	mov	r0, r6
 801daa2:	f7ff fe47 	bl	801d734 <_Bfree>
 801daa6:	4647      	mov	r7, r8
 801daa8:	106d      	asrs	r5, r5, #1
 801daaa:	d00b      	beq.n	801dac4 <__pow5mult+0xa0>
 801daac:	6820      	ldr	r0, [r4, #0]
 801daae:	b938      	cbnz	r0, 801dac0 <__pow5mult+0x9c>
 801dab0:	4622      	mov	r2, r4
 801dab2:	4621      	mov	r1, r4
 801dab4:	4630      	mov	r0, r6
 801dab6:	f7ff ff0b 	bl	801d8d0 <__multiply>
 801daba:	6020      	str	r0, [r4, #0]
 801dabc:	f8c0 9000 	str.w	r9, [r0]
 801dac0:	4604      	mov	r4, r0
 801dac2:	e7e4      	b.n	801da8e <__pow5mult+0x6a>
 801dac4:	4638      	mov	r0, r7
 801dac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801daca:	bf00      	nop
 801dacc:	08046a40 	.word	0x08046a40
 801dad0:	0804676a 	.word	0x0804676a
 801dad4:	080468f4 	.word	0x080468f4

0801dad8 <__lshift>:
 801dad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dadc:	460c      	mov	r4, r1
 801dade:	6849      	ldr	r1, [r1, #4]
 801dae0:	6923      	ldr	r3, [r4, #16]
 801dae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dae6:	68a3      	ldr	r3, [r4, #8]
 801dae8:	4607      	mov	r7, r0
 801daea:	4691      	mov	r9, r2
 801daec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801daf0:	f108 0601 	add.w	r6, r8, #1
 801daf4:	42b3      	cmp	r3, r6
 801daf6:	db0b      	blt.n	801db10 <__lshift+0x38>
 801daf8:	4638      	mov	r0, r7
 801dafa:	f7ff fddb 	bl	801d6b4 <_Balloc>
 801dafe:	4605      	mov	r5, r0
 801db00:	b948      	cbnz	r0, 801db16 <__lshift+0x3e>
 801db02:	4602      	mov	r2, r0
 801db04:	4b2a      	ldr	r3, [pc, #168]	; (801dbb0 <__lshift+0xd8>)
 801db06:	482b      	ldr	r0, [pc, #172]	; (801dbb4 <__lshift+0xdc>)
 801db08:	f240 11d9 	movw	r1, #473	; 0x1d9
 801db0c:	f7fe fe7a 	bl	801c804 <__assert_func>
 801db10:	3101      	adds	r1, #1
 801db12:	005b      	lsls	r3, r3, #1
 801db14:	e7ee      	b.n	801daf4 <__lshift+0x1c>
 801db16:	2300      	movs	r3, #0
 801db18:	f100 0114 	add.w	r1, r0, #20
 801db1c:	f100 0210 	add.w	r2, r0, #16
 801db20:	4618      	mov	r0, r3
 801db22:	4553      	cmp	r3, sl
 801db24:	db37      	blt.n	801db96 <__lshift+0xbe>
 801db26:	6920      	ldr	r0, [r4, #16]
 801db28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801db2c:	f104 0314 	add.w	r3, r4, #20
 801db30:	f019 091f 	ands.w	r9, r9, #31
 801db34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801db38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801db3c:	d02f      	beq.n	801db9e <__lshift+0xc6>
 801db3e:	f1c9 0e20 	rsb	lr, r9, #32
 801db42:	468a      	mov	sl, r1
 801db44:	f04f 0c00 	mov.w	ip, #0
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	fa02 f209 	lsl.w	r2, r2, r9
 801db4e:	ea42 020c 	orr.w	r2, r2, ip
 801db52:	f84a 2b04 	str.w	r2, [sl], #4
 801db56:	f853 2b04 	ldr.w	r2, [r3], #4
 801db5a:	4298      	cmp	r0, r3
 801db5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801db60:	d8f2      	bhi.n	801db48 <__lshift+0x70>
 801db62:	1b03      	subs	r3, r0, r4
 801db64:	3b15      	subs	r3, #21
 801db66:	f023 0303 	bic.w	r3, r3, #3
 801db6a:	3304      	adds	r3, #4
 801db6c:	f104 0215 	add.w	r2, r4, #21
 801db70:	4290      	cmp	r0, r2
 801db72:	bf38      	it	cc
 801db74:	2304      	movcc	r3, #4
 801db76:	f841 c003 	str.w	ip, [r1, r3]
 801db7a:	f1bc 0f00 	cmp.w	ip, #0
 801db7e:	d001      	beq.n	801db84 <__lshift+0xac>
 801db80:	f108 0602 	add.w	r6, r8, #2
 801db84:	3e01      	subs	r6, #1
 801db86:	4638      	mov	r0, r7
 801db88:	612e      	str	r6, [r5, #16]
 801db8a:	4621      	mov	r1, r4
 801db8c:	f7ff fdd2 	bl	801d734 <_Bfree>
 801db90:	4628      	mov	r0, r5
 801db92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db96:	f842 0f04 	str.w	r0, [r2, #4]!
 801db9a:	3301      	adds	r3, #1
 801db9c:	e7c1      	b.n	801db22 <__lshift+0x4a>
 801db9e:	3904      	subs	r1, #4
 801dba0:	f853 2b04 	ldr.w	r2, [r3], #4
 801dba4:	f841 2f04 	str.w	r2, [r1, #4]!
 801dba8:	4298      	cmp	r0, r3
 801dbaa:	d8f9      	bhi.n	801dba0 <__lshift+0xc8>
 801dbac:	e7ea      	b.n	801db84 <__lshift+0xac>
 801dbae:	bf00      	nop
 801dbb0:	08046880 	.word	0x08046880
 801dbb4:	080468f4 	.word	0x080468f4

0801dbb8 <__mcmp>:
 801dbb8:	b530      	push	{r4, r5, lr}
 801dbba:	6902      	ldr	r2, [r0, #16]
 801dbbc:	690c      	ldr	r4, [r1, #16]
 801dbbe:	1b12      	subs	r2, r2, r4
 801dbc0:	d10e      	bne.n	801dbe0 <__mcmp+0x28>
 801dbc2:	f100 0314 	add.w	r3, r0, #20
 801dbc6:	3114      	adds	r1, #20
 801dbc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dbcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dbd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801dbd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dbd8:	42a5      	cmp	r5, r4
 801dbda:	d003      	beq.n	801dbe4 <__mcmp+0x2c>
 801dbdc:	d305      	bcc.n	801dbea <__mcmp+0x32>
 801dbde:	2201      	movs	r2, #1
 801dbe0:	4610      	mov	r0, r2
 801dbe2:	bd30      	pop	{r4, r5, pc}
 801dbe4:	4283      	cmp	r3, r0
 801dbe6:	d3f3      	bcc.n	801dbd0 <__mcmp+0x18>
 801dbe8:	e7fa      	b.n	801dbe0 <__mcmp+0x28>
 801dbea:	f04f 32ff 	mov.w	r2, #4294967295
 801dbee:	e7f7      	b.n	801dbe0 <__mcmp+0x28>

0801dbf0 <__mdiff>:
 801dbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbf4:	460c      	mov	r4, r1
 801dbf6:	4606      	mov	r6, r0
 801dbf8:	4611      	mov	r1, r2
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	4690      	mov	r8, r2
 801dbfe:	f7ff ffdb 	bl	801dbb8 <__mcmp>
 801dc02:	1e05      	subs	r5, r0, #0
 801dc04:	d110      	bne.n	801dc28 <__mdiff+0x38>
 801dc06:	4629      	mov	r1, r5
 801dc08:	4630      	mov	r0, r6
 801dc0a:	f7ff fd53 	bl	801d6b4 <_Balloc>
 801dc0e:	b930      	cbnz	r0, 801dc1e <__mdiff+0x2e>
 801dc10:	4b3a      	ldr	r3, [pc, #232]	; (801dcfc <__mdiff+0x10c>)
 801dc12:	4602      	mov	r2, r0
 801dc14:	f240 2132 	movw	r1, #562	; 0x232
 801dc18:	4839      	ldr	r0, [pc, #228]	; (801dd00 <__mdiff+0x110>)
 801dc1a:	f7fe fdf3 	bl	801c804 <__assert_func>
 801dc1e:	2301      	movs	r3, #1
 801dc20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dc24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc28:	bfa4      	itt	ge
 801dc2a:	4643      	movge	r3, r8
 801dc2c:	46a0      	movge	r8, r4
 801dc2e:	4630      	mov	r0, r6
 801dc30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dc34:	bfa6      	itte	ge
 801dc36:	461c      	movge	r4, r3
 801dc38:	2500      	movge	r5, #0
 801dc3a:	2501      	movlt	r5, #1
 801dc3c:	f7ff fd3a 	bl	801d6b4 <_Balloc>
 801dc40:	b920      	cbnz	r0, 801dc4c <__mdiff+0x5c>
 801dc42:	4b2e      	ldr	r3, [pc, #184]	; (801dcfc <__mdiff+0x10c>)
 801dc44:	4602      	mov	r2, r0
 801dc46:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dc4a:	e7e5      	b.n	801dc18 <__mdiff+0x28>
 801dc4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801dc50:	6926      	ldr	r6, [r4, #16]
 801dc52:	60c5      	str	r5, [r0, #12]
 801dc54:	f104 0914 	add.w	r9, r4, #20
 801dc58:	f108 0514 	add.w	r5, r8, #20
 801dc5c:	f100 0e14 	add.w	lr, r0, #20
 801dc60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801dc64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801dc68:	f108 0210 	add.w	r2, r8, #16
 801dc6c:	46f2      	mov	sl, lr
 801dc6e:	2100      	movs	r1, #0
 801dc70:	f859 3b04 	ldr.w	r3, [r9], #4
 801dc74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801dc78:	fa1f f883 	uxth.w	r8, r3
 801dc7c:	fa11 f18b 	uxtah	r1, r1, fp
 801dc80:	0c1b      	lsrs	r3, r3, #16
 801dc82:	eba1 0808 	sub.w	r8, r1, r8
 801dc86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801dc8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801dc8e:	fa1f f888 	uxth.w	r8, r8
 801dc92:	1419      	asrs	r1, r3, #16
 801dc94:	454e      	cmp	r6, r9
 801dc96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801dc9a:	f84a 3b04 	str.w	r3, [sl], #4
 801dc9e:	d8e7      	bhi.n	801dc70 <__mdiff+0x80>
 801dca0:	1b33      	subs	r3, r6, r4
 801dca2:	3b15      	subs	r3, #21
 801dca4:	f023 0303 	bic.w	r3, r3, #3
 801dca8:	3304      	adds	r3, #4
 801dcaa:	3415      	adds	r4, #21
 801dcac:	42a6      	cmp	r6, r4
 801dcae:	bf38      	it	cc
 801dcb0:	2304      	movcc	r3, #4
 801dcb2:	441d      	add	r5, r3
 801dcb4:	4473      	add	r3, lr
 801dcb6:	469e      	mov	lr, r3
 801dcb8:	462e      	mov	r6, r5
 801dcba:	4566      	cmp	r6, ip
 801dcbc:	d30e      	bcc.n	801dcdc <__mdiff+0xec>
 801dcbe:	f10c 0203 	add.w	r2, ip, #3
 801dcc2:	1b52      	subs	r2, r2, r5
 801dcc4:	f022 0203 	bic.w	r2, r2, #3
 801dcc8:	3d03      	subs	r5, #3
 801dcca:	45ac      	cmp	ip, r5
 801dccc:	bf38      	it	cc
 801dcce:	2200      	movcc	r2, #0
 801dcd0:	441a      	add	r2, r3
 801dcd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801dcd6:	b17b      	cbz	r3, 801dcf8 <__mdiff+0x108>
 801dcd8:	6107      	str	r7, [r0, #16]
 801dcda:	e7a3      	b.n	801dc24 <__mdiff+0x34>
 801dcdc:	f856 8b04 	ldr.w	r8, [r6], #4
 801dce0:	fa11 f288 	uxtah	r2, r1, r8
 801dce4:	1414      	asrs	r4, r2, #16
 801dce6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801dcea:	b292      	uxth	r2, r2
 801dcec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801dcf0:	f84e 2b04 	str.w	r2, [lr], #4
 801dcf4:	1421      	asrs	r1, r4, #16
 801dcf6:	e7e0      	b.n	801dcba <__mdiff+0xca>
 801dcf8:	3f01      	subs	r7, #1
 801dcfa:	e7ea      	b.n	801dcd2 <__mdiff+0xe2>
 801dcfc:	08046880 	.word	0x08046880
 801dd00:	080468f4 	.word	0x080468f4

0801dd04 <__d2b>:
 801dd04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dd08:	4689      	mov	r9, r1
 801dd0a:	2101      	movs	r1, #1
 801dd0c:	ec57 6b10 	vmov	r6, r7, d0
 801dd10:	4690      	mov	r8, r2
 801dd12:	f7ff fccf 	bl	801d6b4 <_Balloc>
 801dd16:	4604      	mov	r4, r0
 801dd18:	b930      	cbnz	r0, 801dd28 <__d2b+0x24>
 801dd1a:	4602      	mov	r2, r0
 801dd1c:	4b25      	ldr	r3, [pc, #148]	; (801ddb4 <__d2b+0xb0>)
 801dd1e:	4826      	ldr	r0, [pc, #152]	; (801ddb8 <__d2b+0xb4>)
 801dd20:	f240 310a 	movw	r1, #778	; 0x30a
 801dd24:	f7fe fd6e 	bl	801c804 <__assert_func>
 801dd28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dd2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dd30:	bb35      	cbnz	r5, 801dd80 <__d2b+0x7c>
 801dd32:	2e00      	cmp	r6, #0
 801dd34:	9301      	str	r3, [sp, #4]
 801dd36:	d028      	beq.n	801dd8a <__d2b+0x86>
 801dd38:	4668      	mov	r0, sp
 801dd3a:	9600      	str	r6, [sp, #0]
 801dd3c:	f7ff fd82 	bl	801d844 <__lo0bits>
 801dd40:	9900      	ldr	r1, [sp, #0]
 801dd42:	b300      	cbz	r0, 801dd86 <__d2b+0x82>
 801dd44:	9a01      	ldr	r2, [sp, #4]
 801dd46:	f1c0 0320 	rsb	r3, r0, #32
 801dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 801dd4e:	430b      	orrs	r3, r1
 801dd50:	40c2      	lsrs	r2, r0
 801dd52:	6163      	str	r3, [r4, #20]
 801dd54:	9201      	str	r2, [sp, #4]
 801dd56:	9b01      	ldr	r3, [sp, #4]
 801dd58:	61a3      	str	r3, [r4, #24]
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	bf14      	ite	ne
 801dd5e:	2202      	movne	r2, #2
 801dd60:	2201      	moveq	r2, #1
 801dd62:	6122      	str	r2, [r4, #16]
 801dd64:	b1d5      	cbz	r5, 801dd9c <__d2b+0x98>
 801dd66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801dd6a:	4405      	add	r5, r0
 801dd6c:	f8c9 5000 	str.w	r5, [r9]
 801dd70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dd74:	f8c8 0000 	str.w	r0, [r8]
 801dd78:	4620      	mov	r0, r4
 801dd7a:	b003      	add	sp, #12
 801dd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dd84:	e7d5      	b.n	801dd32 <__d2b+0x2e>
 801dd86:	6161      	str	r1, [r4, #20]
 801dd88:	e7e5      	b.n	801dd56 <__d2b+0x52>
 801dd8a:	a801      	add	r0, sp, #4
 801dd8c:	f7ff fd5a 	bl	801d844 <__lo0bits>
 801dd90:	9b01      	ldr	r3, [sp, #4]
 801dd92:	6163      	str	r3, [r4, #20]
 801dd94:	2201      	movs	r2, #1
 801dd96:	6122      	str	r2, [r4, #16]
 801dd98:	3020      	adds	r0, #32
 801dd9a:	e7e3      	b.n	801dd64 <__d2b+0x60>
 801dd9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dda0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dda4:	f8c9 0000 	str.w	r0, [r9]
 801dda8:	6918      	ldr	r0, [r3, #16]
 801ddaa:	f7ff fd2b 	bl	801d804 <__hi0bits>
 801ddae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ddb2:	e7df      	b.n	801dd74 <__d2b+0x70>
 801ddb4:	08046880 	.word	0x08046880
 801ddb8:	080468f4 	.word	0x080468f4

0801ddbc <_calloc_r>:
 801ddbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ddbe:	fba1 2402 	umull	r2, r4, r1, r2
 801ddc2:	b94c      	cbnz	r4, 801ddd8 <_calloc_r+0x1c>
 801ddc4:	4611      	mov	r1, r2
 801ddc6:	9201      	str	r2, [sp, #4]
 801ddc8:	f000 f87a 	bl	801dec0 <_malloc_r>
 801ddcc:	9a01      	ldr	r2, [sp, #4]
 801ddce:	4605      	mov	r5, r0
 801ddd0:	b930      	cbnz	r0, 801dde0 <_calloc_r+0x24>
 801ddd2:	4628      	mov	r0, r5
 801ddd4:	b003      	add	sp, #12
 801ddd6:	bd30      	pop	{r4, r5, pc}
 801ddd8:	220c      	movs	r2, #12
 801ddda:	6002      	str	r2, [r0, #0]
 801dddc:	2500      	movs	r5, #0
 801ddde:	e7f8      	b.n	801ddd2 <_calloc_r+0x16>
 801dde0:	4621      	mov	r1, r4
 801dde2:	f7fd ff25 	bl	801bc30 <memset>
 801dde6:	e7f4      	b.n	801ddd2 <_calloc_r+0x16>

0801dde8 <_free_r>:
 801dde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ddea:	2900      	cmp	r1, #0
 801ddec:	d044      	beq.n	801de78 <_free_r+0x90>
 801ddee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddf2:	9001      	str	r0, [sp, #4]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f1a1 0404 	sub.w	r4, r1, #4
 801ddfa:	bfb8      	it	lt
 801ddfc:	18e4      	addlt	r4, r4, r3
 801ddfe:	f001 f9b7 	bl	801f170 <__malloc_lock>
 801de02:	4a1e      	ldr	r2, [pc, #120]	; (801de7c <_free_r+0x94>)
 801de04:	9801      	ldr	r0, [sp, #4]
 801de06:	6813      	ldr	r3, [r2, #0]
 801de08:	b933      	cbnz	r3, 801de18 <_free_r+0x30>
 801de0a:	6063      	str	r3, [r4, #4]
 801de0c:	6014      	str	r4, [r2, #0]
 801de0e:	b003      	add	sp, #12
 801de10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de14:	f001 b9b2 	b.w	801f17c <__malloc_unlock>
 801de18:	42a3      	cmp	r3, r4
 801de1a:	d908      	bls.n	801de2e <_free_r+0x46>
 801de1c:	6825      	ldr	r5, [r4, #0]
 801de1e:	1961      	adds	r1, r4, r5
 801de20:	428b      	cmp	r3, r1
 801de22:	bf01      	itttt	eq
 801de24:	6819      	ldreq	r1, [r3, #0]
 801de26:	685b      	ldreq	r3, [r3, #4]
 801de28:	1949      	addeq	r1, r1, r5
 801de2a:	6021      	streq	r1, [r4, #0]
 801de2c:	e7ed      	b.n	801de0a <_free_r+0x22>
 801de2e:	461a      	mov	r2, r3
 801de30:	685b      	ldr	r3, [r3, #4]
 801de32:	b10b      	cbz	r3, 801de38 <_free_r+0x50>
 801de34:	42a3      	cmp	r3, r4
 801de36:	d9fa      	bls.n	801de2e <_free_r+0x46>
 801de38:	6811      	ldr	r1, [r2, #0]
 801de3a:	1855      	adds	r5, r2, r1
 801de3c:	42a5      	cmp	r5, r4
 801de3e:	d10b      	bne.n	801de58 <_free_r+0x70>
 801de40:	6824      	ldr	r4, [r4, #0]
 801de42:	4421      	add	r1, r4
 801de44:	1854      	adds	r4, r2, r1
 801de46:	42a3      	cmp	r3, r4
 801de48:	6011      	str	r1, [r2, #0]
 801de4a:	d1e0      	bne.n	801de0e <_free_r+0x26>
 801de4c:	681c      	ldr	r4, [r3, #0]
 801de4e:	685b      	ldr	r3, [r3, #4]
 801de50:	6053      	str	r3, [r2, #4]
 801de52:	4421      	add	r1, r4
 801de54:	6011      	str	r1, [r2, #0]
 801de56:	e7da      	b.n	801de0e <_free_r+0x26>
 801de58:	d902      	bls.n	801de60 <_free_r+0x78>
 801de5a:	230c      	movs	r3, #12
 801de5c:	6003      	str	r3, [r0, #0]
 801de5e:	e7d6      	b.n	801de0e <_free_r+0x26>
 801de60:	6825      	ldr	r5, [r4, #0]
 801de62:	1961      	adds	r1, r4, r5
 801de64:	428b      	cmp	r3, r1
 801de66:	bf04      	itt	eq
 801de68:	6819      	ldreq	r1, [r3, #0]
 801de6a:	685b      	ldreq	r3, [r3, #4]
 801de6c:	6063      	str	r3, [r4, #4]
 801de6e:	bf04      	itt	eq
 801de70:	1949      	addeq	r1, r1, r5
 801de72:	6021      	streq	r1, [r4, #0]
 801de74:	6054      	str	r4, [r2, #4]
 801de76:	e7ca      	b.n	801de0e <_free_r+0x26>
 801de78:	b003      	add	sp, #12
 801de7a:	bd30      	pop	{r4, r5, pc}
 801de7c:	240079c8 	.word	0x240079c8

0801de80 <sbrk_aligned>:
 801de80:	b570      	push	{r4, r5, r6, lr}
 801de82:	4e0e      	ldr	r6, [pc, #56]	; (801debc <sbrk_aligned+0x3c>)
 801de84:	460c      	mov	r4, r1
 801de86:	6831      	ldr	r1, [r6, #0]
 801de88:	4605      	mov	r5, r0
 801de8a:	b911      	cbnz	r1, 801de92 <sbrk_aligned+0x12>
 801de8c:	f000 fe78 	bl	801eb80 <_sbrk_r>
 801de90:	6030      	str	r0, [r6, #0]
 801de92:	4621      	mov	r1, r4
 801de94:	4628      	mov	r0, r5
 801de96:	f000 fe73 	bl	801eb80 <_sbrk_r>
 801de9a:	1c43      	adds	r3, r0, #1
 801de9c:	d00a      	beq.n	801deb4 <sbrk_aligned+0x34>
 801de9e:	1cc4      	adds	r4, r0, #3
 801dea0:	f024 0403 	bic.w	r4, r4, #3
 801dea4:	42a0      	cmp	r0, r4
 801dea6:	d007      	beq.n	801deb8 <sbrk_aligned+0x38>
 801dea8:	1a21      	subs	r1, r4, r0
 801deaa:	4628      	mov	r0, r5
 801deac:	f000 fe68 	bl	801eb80 <_sbrk_r>
 801deb0:	3001      	adds	r0, #1
 801deb2:	d101      	bne.n	801deb8 <sbrk_aligned+0x38>
 801deb4:	f04f 34ff 	mov.w	r4, #4294967295
 801deb8:	4620      	mov	r0, r4
 801deba:	bd70      	pop	{r4, r5, r6, pc}
 801debc:	240079cc 	.word	0x240079cc

0801dec0 <_malloc_r>:
 801dec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dec4:	1ccd      	adds	r5, r1, #3
 801dec6:	f025 0503 	bic.w	r5, r5, #3
 801deca:	3508      	adds	r5, #8
 801decc:	2d0c      	cmp	r5, #12
 801dece:	bf38      	it	cc
 801ded0:	250c      	movcc	r5, #12
 801ded2:	2d00      	cmp	r5, #0
 801ded4:	4607      	mov	r7, r0
 801ded6:	db01      	blt.n	801dedc <_malloc_r+0x1c>
 801ded8:	42a9      	cmp	r1, r5
 801deda:	d905      	bls.n	801dee8 <_malloc_r+0x28>
 801dedc:	230c      	movs	r3, #12
 801dede:	603b      	str	r3, [r7, #0]
 801dee0:	2600      	movs	r6, #0
 801dee2:	4630      	mov	r0, r6
 801dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dee8:	4e2e      	ldr	r6, [pc, #184]	; (801dfa4 <_malloc_r+0xe4>)
 801deea:	f001 f941 	bl	801f170 <__malloc_lock>
 801deee:	6833      	ldr	r3, [r6, #0]
 801def0:	461c      	mov	r4, r3
 801def2:	bb34      	cbnz	r4, 801df42 <_malloc_r+0x82>
 801def4:	4629      	mov	r1, r5
 801def6:	4638      	mov	r0, r7
 801def8:	f7ff ffc2 	bl	801de80 <sbrk_aligned>
 801defc:	1c43      	adds	r3, r0, #1
 801defe:	4604      	mov	r4, r0
 801df00:	d14d      	bne.n	801df9e <_malloc_r+0xde>
 801df02:	6834      	ldr	r4, [r6, #0]
 801df04:	4626      	mov	r6, r4
 801df06:	2e00      	cmp	r6, #0
 801df08:	d140      	bne.n	801df8c <_malloc_r+0xcc>
 801df0a:	6823      	ldr	r3, [r4, #0]
 801df0c:	4631      	mov	r1, r6
 801df0e:	4638      	mov	r0, r7
 801df10:	eb04 0803 	add.w	r8, r4, r3
 801df14:	f000 fe34 	bl	801eb80 <_sbrk_r>
 801df18:	4580      	cmp	r8, r0
 801df1a:	d13a      	bne.n	801df92 <_malloc_r+0xd2>
 801df1c:	6821      	ldr	r1, [r4, #0]
 801df1e:	3503      	adds	r5, #3
 801df20:	1a6d      	subs	r5, r5, r1
 801df22:	f025 0503 	bic.w	r5, r5, #3
 801df26:	3508      	adds	r5, #8
 801df28:	2d0c      	cmp	r5, #12
 801df2a:	bf38      	it	cc
 801df2c:	250c      	movcc	r5, #12
 801df2e:	4629      	mov	r1, r5
 801df30:	4638      	mov	r0, r7
 801df32:	f7ff ffa5 	bl	801de80 <sbrk_aligned>
 801df36:	3001      	adds	r0, #1
 801df38:	d02b      	beq.n	801df92 <_malloc_r+0xd2>
 801df3a:	6823      	ldr	r3, [r4, #0]
 801df3c:	442b      	add	r3, r5
 801df3e:	6023      	str	r3, [r4, #0]
 801df40:	e00e      	b.n	801df60 <_malloc_r+0xa0>
 801df42:	6822      	ldr	r2, [r4, #0]
 801df44:	1b52      	subs	r2, r2, r5
 801df46:	d41e      	bmi.n	801df86 <_malloc_r+0xc6>
 801df48:	2a0b      	cmp	r2, #11
 801df4a:	d916      	bls.n	801df7a <_malloc_r+0xba>
 801df4c:	1961      	adds	r1, r4, r5
 801df4e:	42a3      	cmp	r3, r4
 801df50:	6025      	str	r5, [r4, #0]
 801df52:	bf18      	it	ne
 801df54:	6059      	strne	r1, [r3, #4]
 801df56:	6863      	ldr	r3, [r4, #4]
 801df58:	bf08      	it	eq
 801df5a:	6031      	streq	r1, [r6, #0]
 801df5c:	5162      	str	r2, [r4, r5]
 801df5e:	604b      	str	r3, [r1, #4]
 801df60:	4638      	mov	r0, r7
 801df62:	f104 060b 	add.w	r6, r4, #11
 801df66:	f001 f909 	bl	801f17c <__malloc_unlock>
 801df6a:	f026 0607 	bic.w	r6, r6, #7
 801df6e:	1d23      	adds	r3, r4, #4
 801df70:	1af2      	subs	r2, r6, r3
 801df72:	d0b6      	beq.n	801dee2 <_malloc_r+0x22>
 801df74:	1b9b      	subs	r3, r3, r6
 801df76:	50a3      	str	r3, [r4, r2]
 801df78:	e7b3      	b.n	801dee2 <_malloc_r+0x22>
 801df7a:	6862      	ldr	r2, [r4, #4]
 801df7c:	42a3      	cmp	r3, r4
 801df7e:	bf0c      	ite	eq
 801df80:	6032      	streq	r2, [r6, #0]
 801df82:	605a      	strne	r2, [r3, #4]
 801df84:	e7ec      	b.n	801df60 <_malloc_r+0xa0>
 801df86:	4623      	mov	r3, r4
 801df88:	6864      	ldr	r4, [r4, #4]
 801df8a:	e7b2      	b.n	801def2 <_malloc_r+0x32>
 801df8c:	4634      	mov	r4, r6
 801df8e:	6876      	ldr	r6, [r6, #4]
 801df90:	e7b9      	b.n	801df06 <_malloc_r+0x46>
 801df92:	230c      	movs	r3, #12
 801df94:	603b      	str	r3, [r7, #0]
 801df96:	4638      	mov	r0, r7
 801df98:	f001 f8f0 	bl	801f17c <__malloc_unlock>
 801df9c:	e7a1      	b.n	801dee2 <_malloc_r+0x22>
 801df9e:	6025      	str	r5, [r4, #0]
 801dfa0:	e7de      	b.n	801df60 <_malloc_r+0xa0>
 801dfa2:	bf00      	nop
 801dfa4:	240079c8 	.word	0x240079c8

0801dfa8 <__ssputs_r>:
 801dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfac:	688e      	ldr	r6, [r1, #8]
 801dfae:	429e      	cmp	r6, r3
 801dfb0:	4682      	mov	sl, r0
 801dfb2:	460c      	mov	r4, r1
 801dfb4:	4690      	mov	r8, r2
 801dfb6:	461f      	mov	r7, r3
 801dfb8:	d838      	bhi.n	801e02c <__ssputs_r+0x84>
 801dfba:	898a      	ldrh	r2, [r1, #12]
 801dfbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dfc0:	d032      	beq.n	801e028 <__ssputs_r+0x80>
 801dfc2:	6825      	ldr	r5, [r4, #0]
 801dfc4:	6909      	ldr	r1, [r1, #16]
 801dfc6:	eba5 0901 	sub.w	r9, r5, r1
 801dfca:	6965      	ldr	r5, [r4, #20]
 801dfcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dfd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	444b      	add	r3, r9
 801dfd8:	106d      	asrs	r5, r5, #1
 801dfda:	429d      	cmp	r5, r3
 801dfdc:	bf38      	it	cc
 801dfde:	461d      	movcc	r5, r3
 801dfe0:	0553      	lsls	r3, r2, #21
 801dfe2:	d531      	bpl.n	801e048 <__ssputs_r+0xa0>
 801dfe4:	4629      	mov	r1, r5
 801dfe6:	f7ff ff6b 	bl	801dec0 <_malloc_r>
 801dfea:	4606      	mov	r6, r0
 801dfec:	b950      	cbnz	r0, 801e004 <__ssputs_r+0x5c>
 801dfee:	230c      	movs	r3, #12
 801dff0:	f8ca 3000 	str.w	r3, [sl]
 801dff4:	89a3      	ldrh	r3, [r4, #12]
 801dff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dffa:	81a3      	strh	r3, [r4, #12]
 801dffc:	f04f 30ff 	mov.w	r0, #4294967295
 801e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e004:	6921      	ldr	r1, [r4, #16]
 801e006:	464a      	mov	r2, r9
 801e008:	f7fd fdea 	bl	801bbe0 <memcpy>
 801e00c:	89a3      	ldrh	r3, [r4, #12]
 801e00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e016:	81a3      	strh	r3, [r4, #12]
 801e018:	6126      	str	r6, [r4, #16]
 801e01a:	6165      	str	r5, [r4, #20]
 801e01c:	444e      	add	r6, r9
 801e01e:	eba5 0509 	sub.w	r5, r5, r9
 801e022:	6026      	str	r6, [r4, #0]
 801e024:	60a5      	str	r5, [r4, #8]
 801e026:	463e      	mov	r6, r7
 801e028:	42be      	cmp	r6, r7
 801e02a:	d900      	bls.n	801e02e <__ssputs_r+0x86>
 801e02c:	463e      	mov	r6, r7
 801e02e:	6820      	ldr	r0, [r4, #0]
 801e030:	4632      	mov	r2, r6
 801e032:	4641      	mov	r1, r8
 801e034:	f7fd fde2 	bl	801bbfc <memmove>
 801e038:	68a3      	ldr	r3, [r4, #8]
 801e03a:	1b9b      	subs	r3, r3, r6
 801e03c:	60a3      	str	r3, [r4, #8]
 801e03e:	6823      	ldr	r3, [r4, #0]
 801e040:	4433      	add	r3, r6
 801e042:	6023      	str	r3, [r4, #0]
 801e044:	2000      	movs	r0, #0
 801e046:	e7db      	b.n	801e000 <__ssputs_r+0x58>
 801e048:	462a      	mov	r2, r5
 801e04a:	f001 f89d 	bl	801f188 <_realloc_r>
 801e04e:	4606      	mov	r6, r0
 801e050:	2800      	cmp	r0, #0
 801e052:	d1e1      	bne.n	801e018 <__ssputs_r+0x70>
 801e054:	6921      	ldr	r1, [r4, #16]
 801e056:	4650      	mov	r0, sl
 801e058:	f7ff fec6 	bl	801dde8 <_free_r>
 801e05c:	e7c7      	b.n	801dfee <__ssputs_r+0x46>
	...

0801e060 <_svfiprintf_r>:
 801e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e064:	4698      	mov	r8, r3
 801e066:	898b      	ldrh	r3, [r1, #12]
 801e068:	061b      	lsls	r3, r3, #24
 801e06a:	b09d      	sub	sp, #116	; 0x74
 801e06c:	4607      	mov	r7, r0
 801e06e:	460d      	mov	r5, r1
 801e070:	4614      	mov	r4, r2
 801e072:	d50e      	bpl.n	801e092 <_svfiprintf_r+0x32>
 801e074:	690b      	ldr	r3, [r1, #16]
 801e076:	b963      	cbnz	r3, 801e092 <_svfiprintf_r+0x32>
 801e078:	2140      	movs	r1, #64	; 0x40
 801e07a:	f7ff ff21 	bl	801dec0 <_malloc_r>
 801e07e:	6028      	str	r0, [r5, #0]
 801e080:	6128      	str	r0, [r5, #16]
 801e082:	b920      	cbnz	r0, 801e08e <_svfiprintf_r+0x2e>
 801e084:	230c      	movs	r3, #12
 801e086:	603b      	str	r3, [r7, #0]
 801e088:	f04f 30ff 	mov.w	r0, #4294967295
 801e08c:	e0d1      	b.n	801e232 <_svfiprintf_r+0x1d2>
 801e08e:	2340      	movs	r3, #64	; 0x40
 801e090:	616b      	str	r3, [r5, #20]
 801e092:	2300      	movs	r3, #0
 801e094:	9309      	str	r3, [sp, #36]	; 0x24
 801e096:	2320      	movs	r3, #32
 801e098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e09c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0a0:	2330      	movs	r3, #48	; 0x30
 801e0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e24c <_svfiprintf_r+0x1ec>
 801e0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e0aa:	f04f 0901 	mov.w	r9, #1
 801e0ae:	4623      	mov	r3, r4
 801e0b0:	469a      	mov	sl, r3
 801e0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0b6:	b10a      	cbz	r2, 801e0bc <_svfiprintf_r+0x5c>
 801e0b8:	2a25      	cmp	r2, #37	; 0x25
 801e0ba:	d1f9      	bne.n	801e0b0 <_svfiprintf_r+0x50>
 801e0bc:	ebba 0b04 	subs.w	fp, sl, r4
 801e0c0:	d00b      	beq.n	801e0da <_svfiprintf_r+0x7a>
 801e0c2:	465b      	mov	r3, fp
 801e0c4:	4622      	mov	r2, r4
 801e0c6:	4629      	mov	r1, r5
 801e0c8:	4638      	mov	r0, r7
 801e0ca:	f7ff ff6d 	bl	801dfa8 <__ssputs_r>
 801e0ce:	3001      	adds	r0, #1
 801e0d0:	f000 80aa 	beq.w	801e228 <_svfiprintf_r+0x1c8>
 801e0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0d6:	445a      	add	r2, fp
 801e0d8:	9209      	str	r2, [sp, #36]	; 0x24
 801e0da:	f89a 3000 	ldrb.w	r3, [sl]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	f000 80a2 	beq.w	801e228 <_svfiprintf_r+0x1c8>
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 801e0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0ee:	f10a 0a01 	add.w	sl, sl, #1
 801e0f2:	9304      	str	r3, [sp, #16]
 801e0f4:	9307      	str	r3, [sp, #28]
 801e0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0fa:	931a      	str	r3, [sp, #104]	; 0x68
 801e0fc:	4654      	mov	r4, sl
 801e0fe:	2205      	movs	r2, #5
 801e100:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e104:	4851      	ldr	r0, [pc, #324]	; (801e24c <_svfiprintf_r+0x1ec>)
 801e106:	f7e2 f903 	bl	8000310 <memchr>
 801e10a:	9a04      	ldr	r2, [sp, #16]
 801e10c:	b9d8      	cbnz	r0, 801e146 <_svfiprintf_r+0xe6>
 801e10e:	06d0      	lsls	r0, r2, #27
 801e110:	bf44      	itt	mi
 801e112:	2320      	movmi	r3, #32
 801e114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e118:	0711      	lsls	r1, r2, #28
 801e11a:	bf44      	itt	mi
 801e11c:	232b      	movmi	r3, #43	; 0x2b
 801e11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e122:	f89a 3000 	ldrb.w	r3, [sl]
 801e126:	2b2a      	cmp	r3, #42	; 0x2a
 801e128:	d015      	beq.n	801e156 <_svfiprintf_r+0xf6>
 801e12a:	9a07      	ldr	r2, [sp, #28]
 801e12c:	4654      	mov	r4, sl
 801e12e:	2000      	movs	r0, #0
 801e130:	f04f 0c0a 	mov.w	ip, #10
 801e134:	4621      	mov	r1, r4
 801e136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e13a:	3b30      	subs	r3, #48	; 0x30
 801e13c:	2b09      	cmp	r3, #9
 801e13e:	d94e      	bls.n	801e1de <_svfiprintf_r+0x17e>
 801e140:	b1b0      	cbz	r0, 801e170 <_svfiprintf_r+0x110>
 801e142:	9207      	str	r2, [sp, #28]
 801e144:	e014      	b.n	801e170 <_svfiprintf_r+0x110>
 801e146:	eba0 0308 	sub.w	r3, r0, r8
 801e14a:	fa09 f303 	lsl.w	r3, r9, r3
 801e14e:	4313      	orrs	r3, r2
 801e150:	9304      	str	r3, [sp, #16]
 801e152:	46a2      	mov	sl, r4
 801e154:	e7d2      	b.n	801e0fc <_svfiprintf_r+0x9c>
 801e156:	9b03      	ldr	r3, [sp, #12]
 801e158:	1d19      	adds	r1, r3, #4
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	9103      	str	r1, [sp, #12]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	bfbb      	ittet	lt
 801e162:	425b      	neglt	r3, r3
 801e164:	f042 0202 	orrlt.w	r2, r2, #2
 801e168:	9307      	strge	r3, [sp, #28]
 801e16a:	9307      	strlt	r3, [sp, #28]
 801e16c:	bfb8      	it	lt
 801e16e:	9204      	strlt	r2, [sp, #16]
 801e170:	7823      	ldrb	r3, [r4, #0]
 801e172:	2b2e      	cmp	r3, #46	; 0x2e
 801e174:	d10c      	bne.n	801e190 <_svfiprintf_r+0x130>
 801e176:	7863      	ldrb	r3, [r4, #1]
 801e178:	2b2a      	cmp	r3, #42	; 0x2a
 801e17a:	d135      	bne.n	801e1e8 <_svfiprintf_r+0x188>
 801e17c:	9b03      	ldr	r3, [sp, #12]
 801e17e:	1d1a      	adds	r2, r3, #4
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	9203      	str	r2, [sp, #12]
 801e184:	2b00      	cmp	r3, #0
 801e186:	bfb8      	it	lt
 801e188:	f04f 33ff 	movlt.w	r3, #4294967295
 801e18c:	3402      	adds	r4, #2
 801e18e:	9305      	str	r3, [sp, #20]
 801e190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e25c <_svfiprintf_r+0x1fc>
 801e194:	7821      	ldrb	r1, [r4, #0]
 801e196:	2203      	movs	r2, #3
 801e198:	4650      	mov	r0, sl
 801e19a:	f7e2 f8b9 	bl	8000310 <memchr>
 801e19e:	b140      	cbz	r0, 801e1b2 <_svfiprintf_r+0x152>
 801e1a0:	2340      	movs	r3, #64	; 0x40
 801e1a2:	eba0 000a 	sub.w	r0, r0, sl
 801e1a6:	fa03 f000 	lsl.w	r0, r3, r0
 801e1aa:	9b04      	ldr	r3, [sp, #16]
 801e1ac:	4303      	orrs	r3, r0
 801e1ae:	3401      	adds	r4, #1
 801e1b0:	9304      	str	r3, [sp, #16]
 801e1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1b6:	4826      	ldr	r0, [pc, #152]	; (801e250 <_svfiprintf_r+0x1f0>)
 801e1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e1bc:	2206      	movs	r2, #6
 801e1be:	f7e2 f8a7 	bl	8000310 <memchr>
 801e1c2:	2800      	cmp	r0, #0
 801e1c4:	d038      	beq.n	801e238 <_svfiprintf_r+0x1d8>
 801e1c6:	4b23      	ldr	r3, [pc, #140]	; (801e254 <_svfiprintf_r+0x1f4>)
 801e1c8:	bb1b      	cbnz	r3, 801e212 <_svfiprintf_r+0x1b2>
 801e1ca:	9b03      	ldr	r3, [sp, #12]
 801e1cc:	3307      	adds	r3, #7
 801e1ce:	f023 0307 	bic.w	r3, r3, #7
 801e1d2:	3308      	adds	r3, #8
 801e1d4:	9303      	str	r3, [sp, #12]
 801e1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1d8:	4433      	add	r3, r6
 801e1da:	9309      	str	r3, [sp, #36]	; 0x24
 801e1dc:	e767      	b.n	801e0ae <_svfiprintf_r+0x4e>
 801e1de:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1e2:	460c      	mov	r4, r1
 801e1e4:	2001      	movs	r0, #1
 801e1e6:	e7a5      	b.n	801e134 <_svfiprintf_r+0xd4>
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	3401      	adds	r4, #1
 801e1ec:	9305      	str	r3, [sp, #20]
 801e1ee:	4619      	mov	r1, r3
 801e1f0:	f04f 0c0a 	mov.w	ip, #10
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1fa:	3a30      	subs	r2, #48	; 0x30
 801e1fc:	2a09      	cmp	r2, #9
 801e1fe:	d903      	bls.n	801e208 <_svfiprintf_r+0x1a8>
 801e200:	2b00      	cmp	r3, #0
 801e202:	d0c5      	beq.n	801e190 <_svfiprintf_r+0x130>
 801e204:	9105      	str	r1, [sp, #20]
 801e206:	e7c3      	b.n	801e190 <_svfiprintf_r+0x130>
 801e208:	fb0c 2101 	mla	r1, ip, r1, r2
 801e20c:	4604      	mov	r4, r0
 801e20e:	2301      	movs	r3, #1
 801e210:	e7f0      	b.n	801e1f4 <_svfiprintf_r+0x194>
 801e212:	ab03      	add	r3, sp, #12
 801e214:	9300      	str	r3, [sp, #0]
 801e216:	462a      	mov	r2, r5
 801e218:	4b0f      	ldr	r3, [pc, #60]	; (801e258 <_svfiprintf_r+0x1f8>)
 801e21a:	a904      	add	r1, sp, #16
 801e21c:	4638      	mov	r0, r7
 801e21e:	f7fd fd9f 	bl	801bd60 <_printf_float>
 801e222:	1c42      	adds	r2, r0, #1
 801e224:	4606      	mov	r6, r0
 801e226:	d1d6      	bne.n	801e1d6 <_svfiprintf_r+0x176>
 801e228:	89ab      	ldrh	r3, [r5, #12]
 801e22a:	065b      	lsls	r3, r3, #25
 801e22c:	f53f af2c 	bmi.w	801e088 <_svfiprintf_r+0x28>
 801e230:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e232:	b01d      	add	sp, #116	; 0x74
 801e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e238:	ab03      	add	r3, sp, #12
 801e23a:	9300      	str	r3, [sp, #0]
 801e23c:	462a      	mov	r2, r5
 801e23e:	4b06      	ldr	r3, [pc, #24]	; (801e258 <_svfiprintf_r+0x1f8>)
 801e240:	a904      	add	r1, sp, #16
 801e242:	4638      	mov	r0, r7
 801e244:	f7fe f818 	bl	801c278 <_printf_i>
 801e248:	e7eb      	b.n	801e222 <_svfiprintf_r+0x1c2>
 801e24a:	bf00      	nop
 801e24c:	08046a4c 	.word	0x08046a4c
 801e250:	08046a56 	.word	0x08046a56
 801e254:	0801bd61 	.word	0x0801bd61
 801e258:	0801dfa9 	.word	0x0801dfa9
 801e25c:	08046a52 	.word	0x08046a52

0801e260 <_sungetc_r>:
 801e260:	b538      	push	{r3, r4, r5, lr}
 801e262:	1c4b      	adds	r3, r1, #1
 801e264:	4614      	mov	r4, r2
 801e266:	d103      	bne.n	801e270 <_sungetc_r+0x10>
 801e268:	f04f 35ff 	mov.w	r5, #4294967295
 801e26c:	4628      	mov	r0, r5
 801e26e:	bd38      	pop	{r3, r4, r5, pc}
 801e270:	8993      	ldrh	r3, [r2, #12]
 801e272:	f023 0320 	bic.w	r3, r3, #32
 801e276:	8193      	strh	r3, [r2, #12]
 801e278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e27a:	6852      	ldr	r2, [r2, #4]
 801e27c:	b2cd      	uxtb	r5, r1
 801e27e:	b18b      	cbz	r3, 801e2a4 <_sungetc_r+0x44>
 801e280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e282:	4293      	cmp	r3, r2
 801e284:	dd08      	ble.n	801e298 <_sungetc_r+0x38>
 801e286:	6823      	ldr	r3, [r4, #0]
 801e288:	1e5a      	subs	r2, r3, #1
 801e28a:	6022      	str	r2, [r4, #0]
 801e28c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e290:	6863      	ldr	r3, [r4, #4]
 801e292:	3301      	adds	r3, #1
 801e294:	6063      	str	r3, [r4, #4]
 801e296:	e7e9      	b.n	801e26c <_sungetc_r+0xc>
 801e298:	4621      	mov	r1, r4
 801e29a:	f000 fd2d 	bl	801ecf8 <__submore>
 801e29e:	2800      	cmp	r0, #0
 801e2a0:	d0f1      	beq.n	801e286 <_sungetc_r+0x26>
 801e2a2:	e7e1      	b.n	801e268 <_sungetc_r+0x8>
 801e2a4:	6921      	ldr	r1, [r4, #16]
 801e2a6:	6823      	ldr	r3, [r4, #0]
 801e2a8:	b151      	cbz	r1, 801e2c0 <_sungetc_r+0x60>
 801e2aa:	4299      	cmp	r1, r3
 801e2ac:	d208      	bcs.n	801e2c0 <_sungetc_r+0x60>
 801e2ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e2b2:	42a9      	cmp	r1, r5
 801e2b4:	d104      	bne.n	801e2c0 <_sungetc_r+0x60>
 801e2b6:	3b01      	subs	r3, #1
 801e2b8:	3201      	adds	r2, #1
 801e2ba:	6023      	str	r3, [r4, #0]
 801e2bc:	6062      	str	r2, [r4, #4]
 801e2be:	e7d5      	b.n	801e26c <_sungetc_r+0xc>
 801e2c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2c8:	6363      	str	r3, [r4, #52]	; 0x34
 801e2ca:	2303      	movs	r3, #3
 801e2cc:	63a3      	str	r3, [r4, #56]	; 0x38
 801e2ce:	4623      	mov	r3, r4
 801e2d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e2d4:	6023      	str	r3, [r4, #0]
 801e2d6:	2301      	movs	r3, #1
 801e2d8:	e7dc      	b.n	801e294 <_sungetc_r+0x34>

0801e2da <__ssrefill_r>:
 801e2da:	b510      	push	{r4, lr}
 801e2dc:	460c      	mov	r4, r1
 801e2de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e2e0:	b169      	cbz	r1, 801e2fe <__ssrefill_r+0x24>
 801e2e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2e6:	4299      	cmp	r1, r3
 801e2e8:	d001      	beq.n	801e2ee <__ssrefill_r+0x14>
 801e2ea:	f7ff fd7d 	bl	801dde8 <_free_r>
 801e2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2f0:	6063      	str	r3, [r4, #4]
 801e2f2:	2000      	movs	r0, #0
 801e2f4:	6360      	str	r0, [r4, #52]	; 0x34
 801e2f6:	b113      	cbz	r3, 801e2fe <__ssrefill_r+0x24>
 801e2f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e2fa:	6023      	str	r3, [r4, #0]
 801e2fc:	bd10      	pop	{r4, pc}
 801e2fe:	6923      	ldr	r3, [r4, #16]
 801e300:	6023      	str	r3, [r4, #0]
 801e302:	2300      	movs	r3, #0
 801e304:	6063      	str	r3, [r4, #4]
 801e306:	89a3      	ldrh	r3, [r4, #12]
 801e308:	f043 0320 	orr.w	r3, r3, #32
 801e30c:	81a3      	strh	r3, [r4, #12]
 801e30e:	f04f 30ff 	mov.w	r0, #4294967295
 801e312:	e7f3      	b.n	801e2fc <__ssrefill_r+0x22>

0801e314 <__ssvfiscanf_r>:
 801e314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e318:	460c      	mov	r4, r1
 801e31a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801e31e:	2100      	movs	r1, #0
 801e320:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e324:	49a6      	ldr	r1, [pc, #664]	; (801e5c0 <__ssvfiscanf_r+0x2ac>)
 801e326:	91a0      	str	r1, [sp, #640]	; 0x280
 801e328:	f10d 0804 	add.w	r8, sp, #4
 801e32c:	49a5      	ldr	r1, [pc, #660]	; (801e5c4 <__ssvfiscanf_r+0x2b0>)
 801e32e:	4fa6      	ldr	r7, [pc, #664]	; (801e5c8 <__ssvfiscanf_r+0x2b4>)
 801e330:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801e5cc <__ssvfiscanf_r+0x2b8>
 801e334:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e338:	4606      	mov	r6, r0
 801e33a:	91a1      	str	r1, [sp, #644]	; 0x284
 801e33c:	9300      	str	r3, [sp, #0]
 801e33e:	7813      	ldrb	r3, [r2, #0]
 801e340:	2b00      	cmp	r3, #0
 801e342:	f000 815a 	beq.w	801e5fa <__ssvfiscanf_r+0x2e6>
 801e346:	5dd9      	ldrb	r1, [r3, r7]
 801e348:	f011 0108 	ands.w	r1, r1, #8
 801e34c:	f102 0501 	add.w	r5, r2, #1
 801e350:	d019      	beq.n	801e386 <__ssvfiscanf_r+0x72>
 801e352:	6863      	ldr	r3, [r4, #4]
 801e354:	2b00      	cmp	r3, #0
 801e356:	dd0f      	ble.n	801e378 <__ssvfiscanf_r+0x64>
 801e358:	6823      	ldr	r3, [r4, #0]
 801e35a:	781a      	ldrb	r2, [r3, #0]
 801e35c:	5cba      	ldrb	r2, [r7, r2]
 801e35e:	0712      	lsls	r2, r2, #28
 801e360:	d401      	bmi.n	801e366 <__ssvfiscanf_r+0x52>
 801e362:	462a      	mov	r2, r5
 801e364:	e7eb      	b.n	801e33e <__ssvfiscanf_r+0x2a>
 801e366:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e368:	3201      	adds	r2, #1
 801e36a:	9245      	str	r2, [sp, #276]	; 0x114
 801e36c:	6862      	ldr	r2, [r4, #4]
 801e36e:	3301      	adds	r3, #1
 801e370:	3a01      	subs	r2, #1
 801e372:	6062      	str	r2, [r4, #4]
 801e374:	6023      	str	r3, [r4, #0]
 801e376:	e7ec      	b.n	801e352 <__ssvfiscanf_r+0x3e>
 801e378:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e37a:	4621      	mov	r1, r4
 801e37c:	4630      	mov	r0, r6
 801e37e:	4798      	blx	r3
 801e380:	2800      	cmp	r0, #0
 801e382:	d0e9      	beq.n	801e358 <__ssvfiscanf_r+0x44>
 801e384:	e7ed      	b.n	801e362 <__ssvfiscanf_r+0x4e>
 801e386:	2b25      	cmp	r3, #37	; 0x25
 801e388:	d012      	beq.n	801e3b0 <__ssvfiscanf_r+0x9c>
 801e38a:	469a      	mov	sl, r3
 801e38c:	6863      	ldr	r3, [r4, #4]
 801e38e:	2b00      	cmp	r3, #0
 801e390:	f340 8091 	ble.w	801e4b6 <__ssvfiscanf_r+0x1a2>
 801e394:	6822      	ldr	r2, [r4, #0]
 801e396:	7813      	ldrb	r3, [r2, #0]
 801e398:	4553      	cmp	r3, sl
 801e39a:	f040 812e 	bne.w	801e5fa <__ssvfiscanf_r+0x2e6>
 801e39e:	6863      	ldr	r3, [r4, #4]
 801e3a0:	3b01      	subs	r3, #1
 801e3a2:	6063      	str	r3, [r4, #4]
 801e3a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e3a6:	3201      	adds	r2, #1
 801e3a8:	3301      	adds	r3, #1
 801e3aa:	6022      	str	r2, [r4, #0]
 801e3ac:	9345      	str	r3, [sp, #276]	; 0x114
 801e3ae:	e7d8      	b.n	801e362 <__ssvfiscanf_r+0x4e>
 801e3b0:	9141      	str	r1, [sp, #260]	; 0x104
 801e3b2:	9143      	str	r1, [sp, #268]	; 0x10c
 801e3b4:	7853      	ldrb	r3, [r2, #1]
 801e3b6:	2b2a      	cmp	r3, #42	; 0x2a
 801e3b8:	bf02      	ittt	eq
 801e3ba:	2310      	moveq	r3, #16
 801e3bc:	1c95      	addeq	r5, r2, #2
 801e3be:	9341      	streq	r3, [sp, #260]	; 0x104
 801e3c0:	220a      	movs	r2, #10
 801e3c2:	46aa      	mov	sl, r5
 801e3c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e3c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e3cc:	2b09      	cmp	r3, #9
 801e3ce:	d91d      	bls.n	801e40c <__ssvfiscanf_r+0xf8>
 801e3d0:	487e      	ldr	r0, [pc, #504]	; (801e5cc <__ssvfiscanf_r+0x2b8>)
 801e3d2:	2203      	movs	r2, #3
 801e3d4:	f7e1 ff9c 	bl	8000310 <memchr>
 801e3d8:	b140      	cbz	r0, 801e3ec <__ssvfiscanf_r+0xd8>
 801e3da:	2301      	movs	r3, #1
 801e3dc:	eba0 0009 	sub.w	r0, r0, r9
 801e3e0:	fa03 f000 	lsl.w	r0, r3, r0
 801e3e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e3e6:	4318      	orrs	r0, r3
 801e3e8:	9041      	str	r0, [sp, #260]	; 0x104
 801e3ea:	4655      	mov	r5, sl
 801e3ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e3f0:	2b78      	cmp	r3, #120	; 0x78
 801e3f2:	d806      	bhi.n	801e402 <__ssvfiscanf_r+0xee>
 801e3f4:	2b57      	cmp	r3, #87	; 0x57
 801e3f6:	d810      	bhi.n	801e41a <__ssvfiscanf_r+0x106>
 801e3f8:	2b25      	cmp	r3, #37	; 0x25
 801e3fa:	d0c6      	beq.n	801e38a <__ssvfiscanf_r+0x76>
 801e3fc:	d856      	bhi.n	801e4ac <__ssvfiscanf_r+0x198>
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d064      	beq.n	801e4cc <__ssvfiscanf_r+0x1b8>
 801e402:	2303      	movs	r3, #3
 801e404:	9347      	str	r3, [sp, #284]	; 0x11c
 801e406:	230a      	movs	r3, #10
 801e408:	9342      	str	r3, [sp, #264]	; 0x108
 801e40a:	e071      	b.n	801e4f0 <__ssvfiscanf_r+0x1dc>
 801e40c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e40e:	fb02 1103 	mla	r1, r2, r3, r1
 801e412:	3930      	subs	r1, #48	; 0x30
 801e414:	9143      	str	r1, [sp, #268]	; 0x10c
 801e416:	4655      	mov	r5, sl
 801e418:	e7d3      	b.n	801e3c2 <__ssvfiscanf_r+0xae>
 801e41a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e41e:	2a20      	cmp	r2, #32
 801e420:	d8ef      	bhi.n	801e402 <__ssvfiscanf_r+0xee>
 801e422:	a101      	add	r1, pc, #4	; (adr r1, 801e428 <__ssvfiscanf_r+0x114>)
 801e424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e428:	0801e4db 	.word	0x0801e4db
 801e42c:	0801e403 	.word	0x0801e403
 801e430:	0801e403 	.word	0x0801e403
 801e434:	0801e539 	.word	0x0801e539
 801e438:	0801e403 	.word	0x0801e403
 801e43c:	0801e403 	.word	0x0801e403
 801e440:	0801e403 	.word	0x0801e403
 801e444:	0801e403 	.word	0x0801e403
 801e448:	0801e403 	.word	0x0801e403
 801e44c:	0801e403 	.word	0x0801e403
 801e450:	0801e403 	.word	0x0801e403
 801e454:	0801e54f 	.word	0x0801e54f
 801e458:	0801e525 	.word	0x0801e525
 801e45c:	0801e4b3 	.word	0x0801e4b3
 801e460:	0801e4b3 	.word	0x0801e4b3
 801e464:	0801e4b3 	.word	0x0801e4b3
 801e468:	0801e403 	.word	0x0801e403
 801e46c:	0801e529 	.word	0x0801e529
 801e470:	0801e403 	.word	0x0801e403
 801e474:	0801e403 	.word	0x0801e403
 801e478:	0801e403 	.word	0x0801e403
 801e47c:	0801e403 	.word	0x0801e403
 801e480:	0801e55f 	.word	0x0801e55f
 801e484:	0801e531 	.word	0x0801e531
 801e488:	0801e4d3 	.word	0x0801e4d3
 801e48c:	0801e403 	.word	0x0801e403
 801e490:	0801e403 	.word	0x0801e403
 801e494:	0801e55b 	.word	0x0801e55b
 801e498:	0801e403 	.word	0x0801e403
 801e49c:	0801e525 	.word	0x0801e525
 801e4a0:	0801e403 	.word	0x0801e403
 801e4a4:	0801e403 	.word	0x0801e403
 801e4a8:	0801e4db 	.word	0x0801e4db
 801e4ac:	3b45      	subs	r3, #69	; 0x45
 801e4ae:	2b02      	cmp	r3, #2
 801e4b0:	d8a7      	bhi.n	801e402 <__ssvfiscanf_r+0xee>
 801e4b2:	2305      	movs	r3, #5
 801e4b4:	e01b      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e4b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e4b8:	4621      	mov	r1, r4
 801e4ba:	4630      	mov	r0, r6
 801e4bc:	4798      	blx	r3
 801e4be:	2800      	cmp	r0, #0
 801e4c0:	f43f af68 	beq.w	801e394 <__ssvfiscanf_r+0x80>
 801e4c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e4c6:	2800      	cmp	r0, #0
 801e4c8:	f040 808d 	bne.w	801e5e6 <__ssvfiscanf_r+0x2d2>
 801e4cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e4d0:	e08f      	b.n	801e5f2 <__ssvfiscanf_r+0x2de>
 801e4d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e4d4:	f042 0220 	orr.w	r2, r2, #32
 801e4d8:	9241      	str	r2, [sp, #260]	; 0x104
 801e4da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e4dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e4e0:	9241      	str	r2, [sp, #260]	; 0x104
 801e4e2:	2210      	movs	r2, #16
 801e4e4:	2b6f      	cmp	r3, #111	; 0x6f
 801e4e6:	9242      	str	r2, [sp, #264]	; 0x108
 801e4e8:	bf34      	ite	cc
 801e4ea:	2303      	movcc	r3, #3
 801e4ec:	2304      	movcs	r3, #4
 801e4ee:	9347      	str	r3, [sp, #284]	; 0x11c
 801e4f0:	6863      	ldr	r3, [r4, #4]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	dd42      	ble.n	801e57c <__ssvfiscanf_r+0x268>
 801e4f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e4f8:	0659      	lsls	r1, r3, #25
 801e4fa:	d404      	bmi.n	801e506 <__ssvfiscanf_r+0x1f2>
 801e4fc:	6823      	ldr	r3, [r4, #0]
 801e4fe:	781a      	ldrb	r2, [r3, #0]
 801e500:	5cba      	ldrb	r2, [r7, r2]
 801e502:	0712      	lsls	r2, r2, #28
 801e504:	d441      	bmi.n	801e58a <__ssvfiscanf_r+0x276>
 801e506:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e508:	2b02      	cmp	r3, #2
 801e50a:	dc50      	bgt.n	801e5ae <__ssvfiscanf_r+0x29a>
 801e50c:	466b      	mov	r3, sp
 801e50e:	4622      	mov	r2, r4
 801e510:	a941      	add	r1, sp, #260	; 0x104
 801e512:	4630      	mov	r0, r6
 801e514:	f000 f9d0 	bl	801e8b8 <_scanf_chars>
 801e518:	2801      	cmp	r0, #1
 801e51a:	d06e      	beq.n	801e5fa <__ssvfiscanf_r+0x2e6>
 801e51c:	2802      	cmp	r0, #2
 801e51e:	f47f af20 	bne.w	801e362 <__ssvfiscanf_r+0x4e>
 801e522:	e7cf      	b.n	801e4c4 <__ssvfiscanf_r+0x1b0>
 801e524:	220a      	movs	r2, #10
 801e526:	e7dd      	b.n	801e4e4 <__ssvfiscanf_r+0x1d0>
 801e528:	2300      	movs	r3, #0
 801e52a:	9342      	str	r3, [sp, #264]	; 0x108
 801e52c:	2303      	movs	r3, #3
 801e52e:	e7de      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e530:	2308      	movs	r3, #8
 801e532:	9342      	str	r3, [sp, #264]	; 0x108
 801e534:	2304      	movs	r3, #4
 801e536:	e7da      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e538:	4629      	mov	r1, r5
 801e53a:	4640      	mov	r0, r8
 801e53c:	f000 fb30 	bl	801eba0 <__sccl>
 801e540:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e546:	9341      	str	r3, [sp, #260]	; 0x104
 801e548:	4605      	mov	r5, r0
 801e54a:	2301      	movs	r3, #1
 801e54c:	e7cf      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e54e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e554:	9341      	str	r3, [sp, #260]	; 0x104
 801e556:	2300      	movs	r3, #0
 801e558:	e7c9      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e55a:	2302      	movs	r3, #2
 801e55c:	e7c7      	b.n	801e4ee <__ssvfiscanf_r+0x1da>
 801e55e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e560:	06c3      	lsls	r3, r0, #27
 801e562:	f53f aefe 	bmi.w	801e362 <__ssvfiscanf_r+0x4e>
 801e566:	9b00      	ldr	r3, [sp, #0]
 801e568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e56a:	1d19      	adds	r1, r3, #4
 801e56c:	9100      	str	r1, [sp, #0]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	f010 0f01 	tst.w	r0, #1
 801e574:	bf14      	ite	ne
 801e576:	801a      	strhne	r2, [r3, #0]
 801e578:	601a      	streq	r2, [r3, #0]
 801e57a:	e6f2      	b.n	801e362 <__ssvfiscanf_r+0x4e>
 801e57c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e57e:	4621      	mov	r1, r4
 801e580:	4630      	mov	r0, r6
 801e582:	4798      	blx	r3
 801e584:	2800      	cmp	r0, #0
 801e586:	d0b6      	beq.n	801e4f6 <__ssvfiscanf_r+0x1e2>
 801e588:	e79c      	b.n	801e4c4 <__ssvfiscanf_r+0x1b0>
 801e58a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e58c:	3201      	adds	r2, #1
 801e58e:	9245      	str	r2, [sp, #276]	; 0x114
 801e590:	6862      	ldr	r2, [r4, #4]
 801e592:	3a01      	subs	r2, #1
 801e594:	2a00      	cmp	r2, #0
 801e596:	6062      	str	r2, [r4, #4]
 801e598:	dd02      	ble.n	801e5a0 <__ssvfiscanf_r+0x28c>
 801e59a:	3301      	adds	r3, #1
 801e59c:	6023      	str	r3, [r4, #0]
 801e59e:	e7ad      	b.n	801e4fc <__ssvfiscanf_r+0x1e8>
 801e5a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e5a2:	4621      	mov	r1, r4
 801e5a4:	4630      	mov	r0, r6
 801e5a6:	4798      	blx	r3
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	d0a7      	beq.n	801e4fc <__ssvfiscanf_r+0x1e8>
 801e5ac:	e78a      	b.n	801e4c4 <__ssvfiscanf_r+0x1b0>
 801e5ae:	2b04      	cmp	r3, #4
 801e5b0:	dc0e      	bgt.n	801e5d0 <__ssvfiscanf_r+0x2bc>
 801e5b2:	466b      	mov	r3, sp
 801e5b4:	4622      	mov	r2, r4
 801e5b6:	a941      	add	r1, sp, #260	; 0x104
 801e5b8:	4630      	mov	r0, r6
 801e5ba:	f000 f9d7 	bl	801e96c <_scanf_i>
 801e5be:	e7ab      	b.n	801e518 <__ssvfiscanf_r+0x204>
 801e5c0:	0801e261 	.word	0x0801e261
 801e5c4:	0801e2db 	.word	0x0801e2db
 801e5c8:	08046631 	.word	0x08046631
 801e5cc:	08046a52 	.word	0x08046a52
 801e5d0:	4b0b      	ldr	r3, [pc, #44]	; (801e600 <__ssvfiscanf_r+0x2ec>)
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	f43f aec5 	beq.w	801e362 <__ssvfiscanf_r+0x4e>
 801e5d8:	466b      	mov	r3, sp
 801e5da:	4622      	mov	r2, r4
 801e5dc:	a941      	add	r1, sp, #260	; 0x104
 801e5de:	4630      	mov	r0, r6
 801e5e0:	f3af 8000 	nop.w
 801e5e4:	e798      	b.n	801e518 <__ssvfiscanf_r+0x204>
 801e5e6:	89a3      	ldrh	r3, [r4, #12]
 801e5e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e5ec:	bf18      	it	ne
 801e5ee:	f04f 30ff 	movne.w	r0, #4294967295
 801e5f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801e5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e5fc:	e7f9      	b.n	801e5f2 <__ssvfiscanf_r+0x2de>
 801e5fe:	bf00      	nop
 801e600:	00000000 	.word	0x00000000

0801e604 <__sfputc_r>:
 801e604:	6893      	ldr	r3, [r2, #8]
 801e606:	3b01      	subs	r3, #1
 801e608:	2b00      	cmp	r3, #0
 801e60a:	b410      	push	{r4}
 801e60c:	6093      	str	r3, [r2, #8]
 801e60e:	da08      	bge.n	801e622 <__sfputc_r+0x1e>
 801e610:	6994      	ldr	r4, [r2, #24]
 801e612:	42a3      	cmp	r3, r4
 801e614:	db01      	blt.n	801e61a <__sfputc_r+0x16>
 801e616:	290a      	cmp	r1, #10
 801e618:	d103      	bne.n	801e622 <__sfputc_r+0x1e>
 801e61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e61e:	f000 bba5 	b.w	801ed6c <__swbuf_r>
 801e622:	6813      	ldr	r3, [r2, #0]
 801e624:	1c58      	adds	r0, r3, #1
 801e626:	6010      	str	r0, [r2, #0]
 801e628:	7019      	strb	r1, [r3, #0]
 801e62a:	4608      	mov	r0, r1
 801e62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e630:	4770      	bx	lr

0801e632 <__sfputs_r>:
 801e632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e634:	4606      	mov	r6, r0
 801e636:	460f      	mov	r7, r1
 801e638:	4614      	mov	r4, r2
 801e63a:	18d5      	adds	r5, r2, r3
 801e63c:	42ac      	cmp	r4, r5
 801e63e:	d101      	bne.n	801e644 <__sfputs_r+0x12>
 801e640:	2000      	movs	r0, #0
 801e642:	e007      	b.n	801e654 <__sfputs_r+0x22>
 801e644:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e648:	463a      	mov	r2, r7
 801e64a:	4630      	mov	r0, r6
 801e64c:	f7ff ffda 	bl	801e604 <__sfputc_r>
 801e650:	1c43      	adds	r3, r0, #1
 801e652:	d1f3      	bne.n	801e63c <__sfputs_r+0xa>
 801e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e658 <_vfiprintf_r>:
 801e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65c:	460d      	mov	r5, r1
 801e65e:	b09d      	sub	sp, #116	; 0x74
 801e660:	4614      	mov	r4, r2
 801e662:	4698      	mov	r8, r3
 801e664:	4606      	mov	r6, r0
 801e666:	b118      	cbz	r0, 801e670 <_vfiprintf_r+0x18>
 801e668:	6983      	ldr	r3, [r0, #24]
 801e66a:	b90b      	cbnz	r3, 801e670 <_vfiprintf_r+0x18>
 801e66c:	f7fe ff50 	bl	801d510 <__sinit>
 801e670:	4b89      	ldr	r3, [pc, #548]	; (801e898 <_vfiprintf_r+0x240>)
 801e672:	429d      	cmp	r5, r3
 801e674:	d11b      	bne.n	801e6ae <_vfiprintf_r+0x56>
 801e676:	6875      	ldr	r5, [r6, #4]
 801e678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e67a:	07d9      	lsls	r1, r3, #31
 801e67c:	d405      	bmi.n	801e68a <_vfiprintf_r+0x32>
 801e67e:	89ab      	ldrh	r3, [r5, #12]
 801e680:	059a      	lsls	r2, r3, #22
 801e682:	d402      	bmi.n	801e68a <_vfiprintf_r+0x32>
 801e684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e686:	f7fe fff8 	bl	801d67a <__retarget_lock_acquire_recursive>
 801e68a:	89ab      	ldrh	r3, [r5, #12]
 801e68c:	071b      	lsls	r3, r3, #28
 801e68e:	d501      	bpl.n	801e694 <_vfiprintf_r+0x3c>
 801e690:	692b      	ldr	r3, [r5, #16]
 801e692:	b9eb      	cbnz	r3, 801e6d0 <_vfiprintf_r+0x78>
 801e694:	4629      	mov	r1, r5
 801e696:	4630      	mov	r0, r6
 801e698:	f000 fbba 	bl	801ee10 <__swsetup_r>
 801e69c:	b1c0      	cbz	r0, 801e6d0 <_vfiprintf_r+0x78>
 801e69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6a0:	07dc      	lsls	r4, r3, #31
 801e6a2:	d50e      	bpl.n	801e6c2 <_vfiprintf_r+0x6a>
 801e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e6a8:	b01d      	add	sp, #116	; 0x74
 801e6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ae:	4b7b      	ldr	r3, [pc, #492]	; (801e89c <_vfiprintf_r+0x244>)
 801e6b0:	429d      	cmp	r5, r3
 801e6b2:	d101      	bne.n	801e6b8 <_vfiprintf_r+0x60>
 801e6b4:	68b5      	ldr	r5, [r6, #8]
 801e6b6:	e7df      	b.n	801e678 <_vfiprintf_r+0x20>
 801e6b8:	4b79      	ldr	r3, [pc, #484]	; (801e8a0 <_vfiprintf_r+0x248>)
 801e6ba:	429d      	cmp	r5, r3
 801e6bc:	bf08      	it	eq
 801e6be:	68f5      	ldreq	r5, [r6, #12]
 801e6c0:	e7da      	b.n	801e678 <_vfiprintf_r+0x20>
 801e6c2:	89ab      	ldrh	r3, [r5, #12]
 801e6c4:	0598      	lsls	r0, r3, #22
 801e6c6:	d4ed      	bmi.n	801e6a4 <_vfiprintf_r+0x4c>
 801e6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6ca:	f7fe ffd7 	bl	801d67c <__retarget_lock_release_recursive>
 801e6ce:	e7e9      	b.n	801e6a4 <_vfiprintf_r+0x4c>
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	9309      	str	r3, [sp, #36]	; 0x24
 801e6d4:	2320      	movs	r3, #32
 801e6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e6da:	f8cd 800c 	str.w	r8, [sp, #12]
 801e6de:	2330      	movs	r3, #48	; 0x30
 801e6e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e8a4 <_vfiprintf_r+0x24c>
 801e6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6e8:	f04f 0901 	mov.w	r9, #1
 801e6ec:	4623      	mov	r3, r4
 801e6ee:	469a      	mov	sl, r3
 801e6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6f4:	b10a      	cbz	r2, 801e6fa <_vfiprintf_r+0xa2>
 801e6f6:	2a25      	cmp	r2, #37	; 0x25
 801e6f8:	d1f9      	bne.n	801e6ee <_vfiprintf_r+0x96>
 801e6fa:	ebba 0b04 	subs.w	fp, sl, r4
 801e6fe:	d00b      	beq.n	801e718 <_vfiprintf_r+0xc0>
 801e700:	465b      	mov	r3, fp
 801e702:	4622      	mov	r2, r4
 801e704:	4629      	mov	r1, r5
 801e706:	4630      	mov	r0, r6
 801e708:	f7ff ff93 	bl	801e632 <__sfputs_r>
 801e70c:	3001      	adds	r0, #1
 801e70e:	f000 80aa 	beq.w	801e866 <_vfiprintf_r+0x20e>
 801e712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e714:	445a      	add	r2, fp
 801e716:	9209      	str	r2, [sp, #36]	; 0x24
 801e718:	f89a 3000 	ldrb.w	r3, [sl]
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	f000 80a2 	beq.w	801e866 <_vfiprintf_r+0x20e>
 801e722:	2300      	movs	r3, #0
 801e724:	f04f 32ff 	mov.w	r2, #4294967295
 801e728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e72c:	f10a 0a01 	add.w	sl, sl, #1
 801e730:	9304      	str	r3, [sp, #16]
 801e732:	9307      	str	r3, [sp, #28]
 801e734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e738:	931a      	str	r3, [sp, #104]	; 0x68
 801e73a:	4654      	mov	r4, sl
 801e73c:	2205      	movs	r2, #5
 801e73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e742:	4858      	ldr	r0, [pc, #352]	; (801e8a4 <_vfiprintf_r+0x24c>)
 801e744:	f7e1 fde4 	bl	8000310 <memchr>
 801e748:	9a04      	ldr	r2, [sp, #16]
 801e74a:	b9d8      	cbnz	r0, 801e784 <_vfiprintf_r+0x12c>
 801e74c:	06d1      	lsls	r1, r2, #27
 801e74e:	bf44      	itt	mi
 801e750:	2320      	movmi	r3, #32
 801e752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e756:	0713      	lsls	r3, r2, #28
 801e758:	bf44      	itt	mi
 801e75a:	232b      	movmi	r3, #43	; 0x2b
 801e75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e760:	f89a 3000 	ldrb.w	r3, [sl]
 801e764:	2b2a      	cmp	r3, #42	; 0x2a
 801e766:	d015      	beq.n	801e794 <_vfiprintf_r+0x13c>
 801e768:	9a07      	ldr	r2, [sp, #28]
 801e76a:	4654      	mov	r4, sl
 801e76c:	2000      	movs	r0, #0
 801e76e:	f04f 0c0a 	mov.w	ip, #10
 801e772:	4621      	mov	r1, r4
 801e774:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e778:	3b30      	subs	r3, #48	; 0x30
 801e77a:	2b09      	cmp	r3, #9
 801e77c:	d94e      	bls.n	801e81c <_vfiprintf_r+0x1c4>
 801e77e:	b1b0      	cbz	r0, 801e7ae <_vfiprintf_r+0x156>
 801e780:	9207      	str	r2, [sp, #28]
 801e782:	e014      	b.n	801e7ae <_vfiprintf_r+0x156>
 801e784:	eba0 0308 	sub.w	r3, r0, r8
 801e788:	fa09 f303 	lsl.w	r3, r9, r3
 801e78c:	4313      	orrs	r3, r2
 801e78e:	9304      	str	r3, [sp, #16]
 801e790:	46a2      	mov	sl, r4
 801e792:	e7d2      	b.n	801e73a <_vfiprintf_r+0xe2>
 801e794:	9b03      	ldr	r3, [sp, #12]
 801e796:	1d19      	adds	r1, r3, #4
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	9103      	str	r1, [sp, #12]
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	bfbb      	ittet	lt
 801e7a0:	425b      	neglt	r3, r3
 801e7a2:	f042 0202 	orrlt.w	r2, r2, #2
 801e7a6:	9307      	strge	r3, [sp, #28]
 801e7a8:	9307      	strlt	r3, [sp, #28]
 801e7aa:	bfb8      	it	lt
 801e7ac:	9204      	strlt	r2, [sp, #16]
 801e7ae:	7823      	ldrb	r3, [r4, #0]
 801e7b0:	2b2e      	cmp	r3, #46	; 0x2e
 801e7b2:	d10c      	bne.n	801e7ce <_vfiprintf_r+0x176>
 801e7b4:	7863      	ldrb	r3, [r4, #1]
 801e7b6:	2b2a      	cmp	r3, #42	; 0x2a
 801e7b8:	d135      	bne.n	801e826 <_vfiprintf_r+0x1ce>
 801e7ba:	9b03      	ldr	r3, [sp, #12]
 801e7bc:	1d1a      	adds	r2, r3, #4
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	9203      	str	r2, [sp, #12]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	bfb8      	it	lt
 801e7c6:	f04f 33ff 	movlt.w	r3, #4294967295
 801e7ca:	3402      	adds	r4, #2
 801e7cc:	9305      	str	r3, [sp, #20]
 801e7ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e8b4 <_vfiprintf_r+0x25c>
 801e7d2:	7821      	ldrb	r1, [r4, #0]
 801e7d4:	2203      	movs	r2, #3
 801e7d6:	4650      	mov	r0, sl
 801e7d8:	f7e1 fd9a 	bl	8000310 <memchr>
 801e7dc:	b140      	cbz	r0, 801e7f0 <_vfiprintf_r+0x198>
 801e7de:	2340      	movs	r3, #64	; 0x40
 801e7e0:	eba0 000a 	sub.w	r0, r0, sl
 801e7e4:	fa03 f000 	lsl.w	r0, r3, r0
 801e7e8:	9b04      	ldr	r3, [sp, #16]
 801e7ea:	4303      	orrs	r3, r0
 801e7ec:	3401      	adds	r4, #1
 801e7ee:	9304      	str	r3, [sp, #16]
 801e7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7f4:	482c      	ldr	r0, [pc, #176]	; (801e8a8 <_vfiprintf_r+0x250>)
 801e7f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e7fa:	2206      	movs	r2, #6
 801e7fc:	f7e1 fd88 	bl	8000310 <memchr>
 801e800:	2800      	cmp	r0, #0
 801e802:	d03f      	beq.n	801e884 <_vfiprintf_r+0x22c>
 801e804:	4b29      	ldr	r3, [pc, #164]	; (801e8ac <_vfiprintf_r+0x254>)
 801e806:	bb1b      	cbnz	r3, 801e850 <_vfiprintf_r+0x1f8>
 801e808:	9b03      	ldr	r3, [sp, #12]
 801e80a:	3307      	adds	r3, #7
 801e80c:	f023 0307 	bic.w	r3, r3, #7
 801e810:	3308      	adds	r3, #8
 801e812:	9303      	str	r3, [sp, #12]
 801e814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e816:	443b      	add	r3, r7
 801e818:	9309      	str	r3, [sp, #36]	; 0x24
 801e81a:	e767      	b.n	801e6ec <_vfiprintf_r+0x94>
 801e81c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e820:	460c      	mov	r4, r1
 801e822:	2001      	movs	r0, #1
 801e824:	e7a5      	b.n	801e772 <_vfiprintf_r+0x11a>
 801e826:	2300      	movs	r3, #0
 801e828:	3401      	adds	r4, #1
 801e82a:	9305      	str	r3, [sp, #20]
 801e82c:	4619      	mov	r1, r3
 801e82e:	f04f 0c0a 	mov.w	ip, #10
 801e832:	4620      	mov	r0, r4
 801e834:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e838:	3a30      	subs	r2, #48	; 0x30
 801e83a:	2a09      	cmp	r2, #9
 801e83c:	d903      	bls.n	801e846 <_vfiprintf_r+0x1ee>
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d0c5      	beq.n	801e7ce <_vfiprintf_r+0x176>
 801e842:	9105      	str	r1, [sp, #20]
 801e844:	e7c3      	b.n	801e7ce <_vfiprintf_r+0x176>
 801e846:	fb0c 2101 	mla	r1, ip, r1, r2
 801e84a:	4604      	mov	r4, r0
 801e84c:	2301      	movs	r3, #1
 801e84e:	e7f0      	b.n	801e832 <_vfiprintf_r+0x1da>
 801e850:	ab03      	add	r3, sp, #12
 801e852:	9300      	str	r3, [sp, #0]
 801e854:	462a      	mov	r2, r5
 801e856:	4b16      	ldr	r3, [pc, #88]	; (801e8b0 <_vfiprintf_r+0x258>)
 801e858:	a904      	add	r1, sp, #16
 801e85a:	4630      	mov	r0, r6
 801e85c:	f7fd fa80 	bl	801bd60 <_printf_float>
 801e860:	4607      	mov	r7, r0
 801e862:	1c78      	adds	r0, r7, #1
 801e864:	d1d6      	bne.n	801e814 <_vfiprintf_r+0x1bc>
 801e866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e868:	07d9      	lsls	r1, r3, #31
 801e86a:	d405      	bmi.n	801e878 <_vfiprintf_r+0x220>
 801e86c:	89ab      	ldrh	r3, [r5, #12]
 801e86e:	059a      	lsls	r2, r3, #22
 801e870:	d402      	bmi.n	801e878 <_vfiprintf_r+0x220>
 801e872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e874:	f7fe ff02 	bl	801d67c <__retarget_lock_release_recursive>
 801e878:	89ab      	ldrh	r3, [r5, #12]
 801e87a:	065b      	lsls	r3, r3, #25
 801e87c:	f53f af12 	bmi.w	801e6a4 <_vfiprintf_r+0x4c>
 801e880:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e882:	e711      	b.n	801e6a8 <_vfiprintf_r+0x50>
 801e884:	ab03      	add	r3, sp, #12
 801e886:	9300      	str	r3, [sp, #0]
 801e888:	462a      	mov	r2, r5
 801e88a:	4b09      	ldr	r3, [pc, #36]	; (801e8b0 <_vfiprintf_r+0x258>)
 801e88c:	a904      	add	r1, sp, #16
 801e88e:	4630      	mov	r0, r6
 801e890:	f7fd fcf2 	bl	801c278 <_printf_i>
 801e894:	e7e4      	b.n	801e860 <_vfiprintf_r+0x208>
 801e896:	bf00      	nop
 801e898:	080468b4 	.word	0x080468b4
 801e89c:	080468d4 	.word	0x080468d4
 801e8a0:	08046894 	.word	0x08046894
 801e8a4:	08046a4c 	.word	0x08046a4c
 801e8a8:	08046a56 	.word	0x08046a56
 801e8ac:	0801bd61 	.word	0x0801bd61
 801e8b0:	0801e633 	.word	0x0801e633
 801e8b4:	08046a52 	.word	0x08046a52

0801e8b8 <_scanf_chars>:
 801e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e8bc:	4615      	mov	r5, r2
 801e8be:	688a      	ldr	r2, [r1, #8]
 801e8c0:	4680      	mov	r8, r0
 801e8c2:	460c      	mov	r4, r1
 801e8c4:	b932      	cbnz	r2, 801e8d4 <_scanf_chars+0x1c>
 801e8c6:	698a      	ldr	r2, [r1, #24]
 801e8c8:	2a00      	cmp	r2, #0
 801e8ca:	bf0c      	ite	eq
 801e8cc:	2201      	moveq	r2, #1
 801e8ce:	f04f 32ff 	movne.w	r2, #4294967295
 801e8d2:	608a      	str	r2, [r1, #8]
 801e8d4:	6822      	ldr	r2, [r4, #0]
 801e8d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801e968 <_scanf_chars+0xb0>
 801e8da:	06d1      	lsls	r1, r2, #27
 801e8dc:	bf5f      	itttt	pl
 801e8de:	681a      	ldrpl	r2, [r3, #0]
 801e8e0:	1d11      	addpl	r1, r2, #4
 801e8e2:	6019      	strpl	r1, [r3, #0]
 801e8e4:	6816      	ldrpl	r6, [r2, #0]
 801e8e6:	2700      	movs	r7, #0
 801e8e8:	69a0      	ldr	r0, [r4, #24]
 801e8ea:	b188      	cbz	r0, 801e910 <_scanf_chars+0x58>
 801e8ec:	2801      	cmp	r0, #1
 801e8ee:	d107      	bne.n	801e900 <_scanf_chars+0x48>
 801e8f0:	682a      	ldr	r2, [r5, #0]
 801e8f2:	7811      	ldrb	r1, [r2, #0]
 801e8f4:	6962      	ldr	r2, [r4, #20]
 801e8f6:	5c52      	ldrb	r2, [r2, r1]
 801e8f8:	b952      	cbnz	r2, 801e910 <_scanf_chars+0x58>
 801e8fa:	2f00      	cmp	r7, #0
 801e8fc:	d031      	beq.n	801e962 <_scanf_chars+0xaa>
 801e8fe:	e022      	b.n	801e946 <_scanf_chars+0x8e>
 801e900:	2802      	cmp	r0, #2
 801e902:	d120      	bne.n	801e946 <_scanf_chars+0x8e>
 801e904:	682b      	ldr	r3, [r5, #0]
 801e906:	781b      	ldrb	r3, [r3, #0]
 801e908:	f813 3009 	ldrb.w	r3, [r3, r9]
 801e90c:	071b      	lsls	r3, r3, #28
 801e90e:	d41a      	bmi.n	801e946 <_scanf_chars+0x8e>
 801e910:	6823      	ldr	r3, [r4, #0]
 801e912:	06da      	lsls	r2, r3, #27
 801e914:	bf5e      	ittt	pl
 801e916:	682b      	ldrpl	r3, [r5, #0]
 801e918:	781b      	ldrbpl	r3, [r3, #0]
 801e91a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e91e:	682a      	ldr	r2, [r5, #0]
 801e920:	686b      	ldr	r3, [r5, #4]
 801e922:	3201      	adds	r2, #1
 801e924:	602a      	str	r2, [r5, #0]
 801e926:	68a2      	ldr	r2, [r4, #8]
 801e928:	3b01      	subs	r3, #1
 801e92a:	3a01      	subs	r2, #1
 801e92c:	606b      	str	r3, [r5, #4]
 801e92e:	3701      	adds	r7, #1
 801e930:	60a2      	str	r2, [r4, #8]
 801e932:	b142      	cbz	r2, 801e946 <_scanf_chars+0x8e>
 801e934:	2b00      	cmp	r3, #0
 801e936:	dcd7      	bgt.n	801e8e8 <_scanf_chars+0x30>
 801e938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e93c:	4629      	mov	r1, r5
 801e93e:	4640      	mov	r0, r8
 801e940:	4798      	blx	r3
 801e942:	2800      	cmp	r0, #0
 801e944:	d0d0      	beq.n	801e8e8 <_scanf_chars+0x30>
 801e946:	6823      	ldr	r3, [r4, #0]
 801e948:	f013 0310 	ands.w	r3, r3, #16
 801e94c:	d105      	bne.n	801e95a <_scanf_chars+0xa2>
 801e94e:	68e2      	ldr	r2, [r4, #12]
 801e950:	3201      	adds	r2, #1
 801e952:	60e2      	str	r2, [r4, #12]
 801e954:	69a2      	ldr	r2, [r4, #24]
 801e956:	b102      	cbz	r2, 801e95a <_scanf_chars+0xa2>
 801e958:	7033      	strb	r3, [r6, #0]
 801e95a:	6923      	ldr	r3, [r4, #16]
 801e95c:	443b      	add	r3, r7
 801e95e:	6123      	str	r3, [r4, #16]
 801e960:	2000      	movs	r0, #0
 801e962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e966:	bf00      	nop
 801e968:	08046631 	.word	0x08046631

0801e96c <_scanf_i>:
 801e96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e970:	4698      	mov	r8, r3
 801e972:	4b76      	ldr	r3, [pc, #472]	; (801eb4c <_scanf_i+0x1e0>)
 801e974:	460c      	mov	r4, r1
 801e976:	4682      	mov	sl, r0
 801e978:	4616      	mov	r6, r2
 801e97a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e97e:	b087      	sub	sp, #28
 801e980:	ab03      	add	r3, sp, #12
 801e982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e986:	4b72      	ldr	r3, [pc, #456]	; (801eb50 <_scanf_i+0x1e4>)
 801e988:	69a1      	ldr	r1, [r4, #24]
 801e98a:	4a72      	ldr	r2, [pc, #456]	; (801eb54 <_scanf_i+0x1e8>)
 801e98c:	2903      	cmp	r1, #3
 801e98e:	bf18      	it	ne
 801e990:	461a      	movne	r2, r3
 801e992:	68a3      	ldr	r3, [r4, #8]
 801e994:	9201      	str	r2, [sp, #4]
 801e996:	1e5a      	subs	r2, r3, #1
 801e998:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e99c:	bf88      	it	hi
 801e99e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e9a2:	4627      	mov	r7, r4
 801e9a4:	bf82      	ittt	hi
 801e9a6:	eb03 0905 	addhi.w	r9, r3, r5
 801e9aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e9ae:	60a3      	strhi	r3, [r4, #8]
 801e9b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e9b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e9b8:	bf98      	it	ls
 801e9ba:	f04f 0900 	movls.w	r9, #0
 801e9be:	6023      	str	r3, [r4, #0]
 801e9c0:	463d      	mov	r5, r7
 801e9c2:	f04f 0b00 	mov.w	fp, #0
 801e9c6:	6831      	ldr	r1, [r6, #0]
 801e9c8:	ab03      	add	r3, sp, #12
 801e9ca:	7809      	ldrb	r1, [r1, #0]
 801e9cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e9d0:	2202      	movs	r2, #2
 801e9d2:	f7e1 fc9d 	bl	8000310 <memchr>
 801e9d6:	b328      	cbz	r0, 801ea24 <_scanf_i+0xb8>
 801e9d8:	f1bb 0f01 	cmp.w	fp, #1
 801e9dc:	d159      	bne.n	801ea92 <_scanf_i+0x126>
 801e9de:	6862      	ldr	r2, [r4, #4]
 801e9e0:	b92a      	cbnz	r2, 801e9ee <_scanf_i+0x82>
 801e9e2:	6822      	ldr	r2, [r4, #0]
 801e9e4:	2308      	movs	r3, #8
 801e9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e9ea:	6063      	str	r3, [r4, #4]
 801e9ec:	6022      	str	r2, [r4, #0]
 801e9ee:	6822      	ldr	r2, [r4, #0]
 801e9f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e9f4:	6022      	str	r2, [r4, #0]
 801e9f6:	68a2      	ldr	r2, [r4, #8]
 801e9f8:	1e51      	subs	r1, r2, #1
 801e9fa:	60a1      	str	r1, [r4, #8]
 801e9fc:	b192      	cbz	r2, 801ea24 <_scanf_i+0xb8>
 801e9fe:	6832      	ldr	r2, [r6, #0]
 801ea00:	1c51      	adds	r1, r2, #1
 801ea02:	6031      	str	r1, [r6, #0]
 801ea04:	7812      	ldrb	r2, [r2, #0]
 801ea06:	f805 2b01 	strb.w	r2, [r5], #1
 801ea0a:	6872      	ldr	r2, [r6, #4]
 801ea0c:	3a01      	subs	r2, #1
 801ea0e:	2a00      	cmp	r2, #0
 801ea10:	6072      	str	r2, [r6, #4]
 801ea12:	dc07      	bgt.n	801ea24 <_scanf_i+0xb8>
 801ea14:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ea18:	4631      	mov	r1, r6
 801ea1a:	4650      	mov	r0, sl
 801ea1c:	4790      	blx	r2
 801ea1e:	2800      	cmp	r0, #0
 801ea20:	f040 8085 	bne.w	801eb2e <_scanf_i+0x1c2>
 801ea24:	f10b 0b01 	add.w	fp, fp, #1
 801ea28:	f1bb 0f03 	cmp.w	fp, #3
 801ea2c:	d1cb      	bne.n	801e9c6 <_scanf_i+0x5a>
 801ea2e:	6863      	ldr	r3, [r4, #4]
 801ea30:	b90b      	cbnz	r3, 801ea36 <_scanf_i+0xca>
 801ea32:	230a      	movs	r3, #10
 801ea34:	6063      	str	r3, [r4, #4]
 801ea36:	6863      	ldr	r3, [r4, #4]
 801ea38:	4947      	ldr	r1, [pc, #284]	; (801eb58 <_scanf_i+0x1ec>)
 801ea3a:	6960      	ldr	r0, [r4, #20]
 801ea3c:	1ac9      	subs	r1, r1, r3
 801ea3e:	f000 f8af 	bl	801eba0 <__sccl>
 801ea42:	f04f 0b00 	mov.w	fp, #0
 801ea46:	68a3      	ldr	r3, [r4, #8]
 801ea48:	6822      	ldr	r2, [r4, #0]
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d03d      	beq.n	801eaca <_scanf_i+0x15e>
 801ea4e:	6831      	ldr	r1, [r6, #0]
 801ea50:	6960      	ldr	r0, [r4, #20]
 801ea52:	f891 c000 	ldrb.w	ip, [r1]
 801ea56:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	d035      	beq.n	801eaca <_scanf_i+0x15e>
 801ea5e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801ea62:	d124      	bne.n	801eaae <_scanf_i+0x142>
 801ea64:	0510      	lsls	r0, r2, #20
 801ea66:	d522      	bpl.n	801eaae <_scanf_i+0x142>
 801ea68:	f10b 0b01 	add.w	fp, fp, #1
 801ea6c:	f1b9 0f00 	cmp.w	r9, #0
 801ea70:	d003      	beq.n	801ea7a <_scanf_i+0x10e>
 801ea72:	3301      	adds	r3, #1
 801ea74:	f109 39ff 	add.w	r9, r9, #4294967295
 801ea78:	60a3      	str	r3, [r4, #8]
 801ea7a:	6873      	ldr	r3, [r6, #4]
 801ea7c:	3b01      	subs	r3, #1
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	6073      	str	r3, [r6, #4]
 801ea82:	dd1b      	ble.n	801eabc <_scanf_i+0x150>
 801ea84:	6833      	ldr	r3, [r6, #0]
 801ea86:	3301      	adds	r3, #1
 801ea88:	6033      	str	r3, [r6, #0]
 801ea8a:	68a3      	ldr	r3, [r4, #8]
 801ea8c:	3b01      	subs	r3, #1
 801ea8e:	60a3      	str	r3, [r4, #8]
 801ea90:	e7d9      	b.n	801ea46 <_scanf_i+0xda>
 801ea92:	f1bb 0f02 	cmp.w	fp, #2
 801ea96:	d1ae      	bne.n	801e9f6 <_scanf_i+0x8a>
 801ea98:	6822      	ldr	r2, [r4, #0]
 801ea9a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ea9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801eaa2:	d1bf      	bne.n	801ea24 <_scanf_i+0xb8>
 801eaa4:	2310      	movs	r3, #16
 801eaa6:	6063      	str	r3, [r4, #4]
 801eaa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eaac:	e7a2      	b.n	801e9f4 <_scanf_i+0x88>
 801eaae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801eab2:	6022      	str	r2, [r4, #0]
 801eab4:	780b      	ldrb	r3, [r1, #0]
 801eab6:	f805 3b01 	strb.w	r3, [r5], #1
 801eaba:	e7de      	b.n	801ea7a <_scanf_i+0x10e>
 801eabc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eac0:	4631      	mov	r1, r6
 801eac2:	4650      	mov	r0, sl
 801eac4:	4798      	blx	r3
 801eac6:	2800      	cmp	r0, #0
 801eac8:	d0df      	beq.n	801ea8a <_scanf_i+0x11e>
 801eaca:	6823      	ldr	r3, [r4, #0]
 801eacc:	05db      	lsls	r3, r3, #23
 801eace:	d50d      	bpl.n	801eaec <_scanf_i+0x180>
 801ead0:	42bd      	cmp	r5, r7
 801ead2:	d909      	bls.n	801eae8 <_scanf_i+0x17c>
 801ead4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ead8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eadc:	4632      	mov	r2, r6
 801eade:	4650      	mov	r0, sl
 801eae0:	4798      	blx	r3
 801eae2:	f105 39ff 	add.w	r9, r5, #4294967295
 801eae6:	464d      	mov	r5, r9
 801eae8:	42bd      	cmp	r5, r7
 801eaea:	d02d      	beq.n	801eb48 <_scanf_i+0x1dc>
 801eaec:	6822      	ldr	r2, [r4, #0]
 801eaee:	f012 0210 	ands.w	r2, r2, #16
 801eaf2:	d113      	bne.n	801eb1c <_scanf_i+0x1b0>
 801eaf4:	702a      	strb	r2, [r5, #0]
 801eaf6:	6863      	ldr	r3, [r4, #4]
 801eaf8:	9e01      	ldr	r6, [sp, #4]
 801eafa:	4639      	mov	r1, r7
 801eafc:	4650      	mov	r0, sl
 801eafe:	47b0      	blx	r6
 801eb00:	6821      	ldr	r1, [r4, #0]
 801eb02:	f8d8 3000 	ldr.w	r3, [r8]
 801eb06:	f011 0f20 	tst.w	r1, #32
 801eb0a:	d013      	beq.n	801eb34 <_scanf_i+0x1c8>
 801eb0c:	1d1a      	adds	r2, r3, #4
 801eb0e:	f8c8 2000 	str.w	r2, [r8]
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	6018      	str	r0, [r3, #0]
 801eb16:	68e3      	ldr	r3, [r4, #12]
 801eb18:	3301      	adds	r3, #1
 801eb1a:	60e3      	str	r3, [r4, #12]
 801eb1c:	1bed      	subs	r5, r5, r7
 801eb1e:	44ab      	add	fp, r5
 801eb20:	6925      	ldr	r5, [r4, #16]
 801eb22:	445d      	add	r5, fp
 801eb24:	6125      	str	r5, [r4, #16]
 801eb26:	2000      	movs	r0, #0
 801eb28:	b007      	add	sp, #28
 801eb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb2e:	f04f 0b00 	mov.w	fp, #0
 801eb32:	e7ca      	b.n	801eaca <_scanf_i+0x15e>
 801eb34:	1d1a      	adds	r2, r3, #4
 801eb36:	f8c8 2000 	str.w	r2, [r8]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f011 0f01 	tst.w	r1, #1
 801eb40:	bf14      	ite	ne
 801eb42:	8018      	strhne	r0, [r3, #0]
 801eb44:	6018      	streq	r0, [r3, #0]
 801eb46:	e7e6      	b.n	801eb16 <_scanf_i+0x1aa>
 801eb48:	2001      	movs	r0, #1
 801eb4a:	e7ed      	b.n	801eb28 <_scanf_i+0x1bc>
 801eb4c:	080231f4 	.word	0x080231f4
 801eb50:	0801ecf5 	.word	0x0801ecf5
 801eb54:	0801c7dd 	.word	0x0801c7dd
 801eb58:	08046a76 	.word	0x08046a76

0801eb5c <_read_r>:
 801eb5c:	b538      	push	{r3, r4, r5, lr}
 801eb5e:	4d07      	ldr	r5, [pc, #28]	; (801eb7c <_read_r+0x20>)
 801eb60:	4604      	mov	r4, r0
 801eb62:	4608      	mov	r0, r1
 801eb64:	4611      	mov	r1, r2
 801eb66:	2200      	movs	r2, #0
 801eb68:	602a      	str	r2, [r5, #0]
 801eb6a:	461a      	mov	r2, r3
 801eb6c:	f7e3 f986 	bl	8001e7c <_read>
 801eb70:	1c43      	adds	r3, r0, #1
 801eb72:	d102      	bne.n	801eb7a <_read_r+0x1e>
 801eb74:	682b      	ldr	r3, [r5, #0]
 801eb76:	b103      	cbz	r3, 801eb7a <_read_r+0x1e>
 801eb78:	6023      	str	r3, [r4, #0]
 801eb7a:	bd38      	pop	{r3, r4, r5, pc}
 801eb7c:	2400794c 	.word	0x2400794c

0801eb80 <_sbrk_r>:
 801eb80:	b538      	push	{r3, r4, r5, lr}
 801eb82:	4d06      	ldr	r5, [pc, #24]	; (801eb9c <_sbrk_r+0x1c>)
 801eb84:	2300      	movs	r3, #0
 801eb86:	4604      	mov	r4, r0
 801eb88:	4608      	mov	r0, r1
 801eb8a:	602b      	str	r3, [r5, #0]
 801eb8c:	f7e3 f9e4 	bl	8001f58 <_sbrk>
 801eb90:	1c43      	adds	r3, r0, #1
 801eb92:	d102      	bne.n	801eb9a <_sbrk_r+0x1a>
 801eb94:	682b      	ldr	r3, [r5, #0]
 801eb96:	b103      	cbz	r3, 801eb9a <_sbrk_r+0x1a>
 801eb98:	6023      	str	r3, [r4, #0]
 801eb9a:	bd38      	pop	{r3, r4, r5, pc}
 801eb9c:	2400794c 	.word	0x2400794c

0801eba0 <__sccl>:
 801eba0:	b570      	push	{r4, r5, r6, lr}
 801eba2:	780b      	ldrb	r3, [r1, #0]
 801eba4:	4604      	mov	r4, r0
 801eba6:	2b5e      	cmp	r3, #94	; 0x5e
 801eba8:	bf0b      	itete	eq
 801ebaa:	784b      	ldrbeq	r3, [r1, #1]
 801ebac:	1c48      	addne	r0, r1, #1
 801ebae:	1c88      	addeq	r0, r1, #2
 801ebb0:	2200      	movne	r2, #0
 801ebb2:	bf08      	it	eq
 801ebb4:	2201      	moveq	r2, #1
 801ebb6:	1e61      	subs	r1, r4, #1
 801ebb8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ebbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 801ebc0:	42a9      	cmp	r1, r5
 801ebc2:	d1fb      	bne.n	801ebbc <__sccl+0x1c>
 801ebc4:	b90b      	cbnz	r3, 801ebca <__sccl+0x2a>
 801ebc6:	3801      	subs	r0, #1
 801ebc8:	bd70      	pop	{r4, r5, r6, pc}
 801ebca:	f082 0201 	eor.w	r2, r2, #1
 801ebce:	54e2      	strb	r2, [r4, r3]
 801ebd0:	4605      	mov	r5, r0
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	f810 1b01 	ldrb.w	r1, [r0], #1
 801ebd8:	292d      	cmp	r1, #45	; 0x2d
 801ebda:	d006      	beq.n	801ebea <__sccl+0x4a>
 801ebdc:	295d      	cmp	r1, #93	; 0x5d
 801ebde:	d0f3      	beq.n	801ebc8 <__sccl+0x28>
 801ebe0:	b909      	cbnz	r1, 801ebe6 <__sccl+0x46>
 801ebe2:	4628      	mov	r0, r5
 801ebe4:	e7f0      	b.n	801ebc8 <__sccl+0x28>
 801ebe6:	460b      	mov	r3, r1
 801ebe8:	e7f1      	b.n	801ebce <__sccl+0x2e>
 801ebea:	786e      	ldrb	r6, [r5, #1]
 801ebec:	2e5d      	cmp	r6, #93	; 0x5d
 801ebee:	d0fa      	beq.n	801ebe6 <__sccl+0x46>
 801ebf0:	42b3      	cmp	r3, r6
 801ebf2:	dcf8      	bgt.n	801ebe6 <__sccl+0x46>
 801ebf4:	3502      	adds	r5, #2
 801ebf6:	4619      	mov	r1, r3
 801ebf8:	3101      	adds	r1, #1
 801ebfa:	428e      	cmp	r6, r1
 801ebfc:	5462      	strb	r2, [r4, r1]
 801ebfe:	dcfb      	bgt.n	801ebf8 <__sccl+0x58>
 801ec00:	1af1      	subs	r1, r6, r3
 801ec02:	3901      	subs	r1, #1
 801ec04:	1c58      	adds	r0, r3, #1
 801ec06:	42b3      	cmp	r3, r6
 801ec08:	bfa8      	it	ge
 801ec0a:	2100      	movge	r1, #0
 801ec0c:	1843      	adds	r3, r0, r1
 801ec0e:	e7e0      	b.n	801ebd2 <__sccl+0x32>

0801ec10 <_strtoul_l.constprop.0>:
 801ec10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ec14:	4f36      	ldr	r7, [pc, #216]	; (801ecf0 <_strtoul_l.constprop.0+0xe0>)
 801ec16:	4686      	mov	lr, r0
 801ec18:	460d      	mov	r5, r1
 801ec1a:	4628      	mov	r0, r5
 801ec1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec20:	5de6      	ldrb	r6, [r4, r7]
 801ec22:	f016 0608 	ands.w	r6, r6, #8
 801ec26:	d1f8      	bne.n	801ec1a <_strtoul_l.constprop.0+0xa>
 801ec28:	2c2d      	cmp	r4, #45	; 0x2d
 801ec2a:	d12f      	bne.n	801ec8c <_strtoul_l.constprop.0+0x7c>
 801ec2c:	782c      	ldrb	r4, [r5, #0]
 801ec2e:	2601      	movs	r6, #1
 801ec30:	1c85      	adds	r5, r0, #2
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d057      	beq.n	801ece6 <_strtoul_l.constprop.0+0xd6>
 801ec36:	2b10      	cmp	r3, #16
 801ec38:	d109      	bne.n	801ec4e <_strtoul_l.constprop.0+0x3e>
 801ec3a:	2c30      	cmp	r4, #48	; 0x30
 801ec3c:	d107      	bne.n	801ec4e <_strtoul_l.constprop.0+0x3e>
 801ec3e:	7828      	ldrb	r0, [r5, #0]
 801ec40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ec44:	2858      	cmp	r0, #88	; 0x58
 801ec46:	d149      	bne.n	801ecdc <_strtoul_l.constprop.0+0xcc>
 801ec48:	786c      	ldrb	r4, [r5, #1]
 801ec4a:	2310      	movs	r3, #16
 801ec4c:	3502      	adds	r5, #2
 801ec4e:	f04f 38ff 	mov.w	r8, #4294967295
 801ec52:	2700      	movs	r7, #0
 801ec54:	fbb8 f8f3 	udiv	r8, r8, r3
 801ec58:	fb03 f908 	mul.w	r9, r3, r8
 801ec5c:	ea6f 0909 	mvn.w	r9, r9
 801ec60:	4638      	mov	r0, r7
 801ec62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ec66:	f1bc 0f09 	cmp.w	ip, #9
 801ec6a:	d814      	bhi.n	801ec96 <_strtoul_l.constprop.0+0x86>
 801ec6c:	4664      	mov	r4, ip
 801ec6e:	42a3      	cmp	r3, r4
 801ec70:	dd22      	ble.n	801ecb8 <_strtoul_l.constprop.0+0xa8>
 801ec72:	2f00      	cmp	r7, #0
 801ec74:	db1d      	blt.n	801ecb2 <_strtoul_l.constprop.0+0xa2>
 801ec76:	4580      	cmp	r8, r0
 801ec78:	d31b      	bcc.n	801ecb2 <_strtoul_l.constprop.0+0xa2>
 801ec7a:	d101      	bne.n	801ec80 <_strtoul_l.constprop.0+0x70>
 801ec7c:	45a1      	cmp	r9, r4
 801ec7e:	db18      	blt.n	801ecb2 <_strtoul_l.constprop.0+0xa2>
 801ec80:	fb00 4003 	mla	r0, r0, r3, r4
 801ec84:	2701      	movs	r7, #1
 801ec86:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec8a:	e7ea      	b.n	801ec62 <_strtoul_l.constprop.0+0x52>
 801ec8c:	2c2b      	cmp	r4, #43	; 0x2b
 801ec8e:	bf04      	itt	eq
 801ec90:	782c      	ldrbeq	r4, [r5, #0]
 801ec92:	1c85      	addeq	r5, r0, #2
 801ec94:	e7cd      	b.n	801ec32 <_strtoul_l.constprop.0+0x22>
 801ec96:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ec9a:	f1bc 0f19 	cmp.w	ip, #25
 801ec9e:	d801      	bhi.n	801eca4 <_strtoul_l.constprop.0+0x94>
 801eca0:	3c37      	subs	r4, #55	; 0x37
 801eca2:	e7e4      	b.n	801ec6e <_strtoul_l.constprop.0+0x5e>
 801eca4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801eca8:	f1bc 0f19 	cmp.w	ip, #25
 801ecac:	d804      	bhi.n	801ecb8 <_strtoul_l.constprop.0+0xa8>
 801ecae:	3c57      	subs	r4, #87	; 0x57
 801ecb0:	e7dd      	b.n	801ec6e <_strtoul_l.constprop.0+0x5e>
 801ecb2:	f04f 37ff 	mov.w	r7, #4294967295
 801ecb6:	e7e6      	b.n	801ec86 <_strtoul_l.constprop.0+0x76>
 801ecb8:	2f00      	cmp	r7, #0
 801ecba:	da07      	bge.n	801eccc <_strtoul_l.constprop.0+0xbc>
 801ecbc:	2322      	movs	r3, #34	; 0x22
 801ecbe:	f8ce 3000 	str.w	r3, [lr]
 801ecc2:	f04f 30ff 	mov.w	r0, #4294967295
 801ecc6:	b932      	cbnz	r2, 801ecd6 <_strtoul_l.constprop.0+0xc6>
 801ecc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eccc:	b106      	cbz	r6, 801ecd0 <_strtoul_l.constprop.0+0xc0>
 801ecce:	4240      	negs	r0, r0
 801ecd0:	2a00      	cmp	r2, #0
 801ecd2:	d0f9      	beq.n	801ecc8 <_strtoul_l.constprop.0+0xb8>
 801ecd4:	b107      	cbz	r7, 801ecd8 <_strtoul_l.constprop.0+0xc8>
 801ecd6:	1e69      	subs	r1, r5, #1
 801ecd8:	6011      	str	r1, [r2, #0]
 801ecda:	e7f5      	b.n	801ecc8 <_strtoul_l.constprop.0+0xb8>
 801ecdc:	2430      	movs	r4, #48	; 0x30
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d1b5      	bne.n	801ec4e <_strtoul_l.constprop.0+0x3e>
 801ece2:	2308      	movs	r3, #8
 801ece4:	e7b3      	b.n	801ec4e <_strtoul_l.constprop.0+0x3e>
 801ece6:	2c30      	cmp	r4, #48	; 0x30
 801ece8:	d0a9      	beq.n	801ec3e <_strtoul_l.constprop.0+0x2e>
 801ecea:	230a      	movs	r3, #10
 801ecec:	e7af      	b.n	801ec4e <_strtoul_l.constprop.0+0x3e>
 801ecee:	bf00      	nop
 801ecf0:	08046631 	.word	0x08046631

0801ecf4 <_strtoul_r>:
 801ecf4:	f7ff bf8c 	b.w	801ec10 <_strtoul_l.constprop.0>

0801ecf8 <__submore>:
 801ecf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecfc:	460c      	mov	r4, r1
 801ecfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ed00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed04:	4299      	cmp	r1, r3
 801ed06:	d11d      	bne.n	801ed44 <__submore+0x4c>
 801ed08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ed0c:	f7ff f8d8 	bl	801dec0 <_malloc_r>
 801ed10:	b918      	cbnz	r0, 801ed1a <__submore+0x22>
 801ed12:	f04f 30ff 	mov.w	r0, #4294967295
 801ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ed1e:	63a3      	str	r3, [r4, #56]	; 0x38
 801ed20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ed24:	6360      	str	r0, [r4, #52]	; 0x34
 801ed26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ed2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ed2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ed32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ed36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ed3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ed3e:	6020      	str	r0, [r4, #0]
 801ed40:	2000      	movs	r0, #0
 801ed42:	e7e8      	b.n	801ed16 <__submore+0x1e>
 801ed44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ed46:	0077      	lsls	r7, r6, #1
 801ed48:	463a      	mov	r2, r7
 801ed4a:	f000 fa1d 	bl	801f188 <_realloc_r>
 801ed4e:	4605      	mov	r5, r0
 801ed50:	2800      	cmp	r0, #0
 801ed52:	d0de      	beq.n	801ed12 <__submore+0x1a>
 801ed54:	eb00 0806 	add.w	r8, r0, r6
 801ed58:	4601      	mov	r1, r0
 801ed5a:	4632      	mov	r2, r6
 801ed5c:	4640      	mov	r0, r8
 801ed5e:	f7fc ff3f 	bl	801bbe0 <memcpy>
 801ed62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ed66:	f8c4 8000 	str.w	r8, [r4]
 801ed6a:	e7e9      	b.n	801ed40 <__submore+0x48>

0801ed6c <__swbuf_r>:
 801ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed6e:	460e      	mov	r6, r1
 801ed70:	4614      	mov	r4, r2
 801ed72:	4605      	mov	r5, r0
 801ed74:	b118      	cbz	r0, 801ed7e <__swbuf_r+0x12>
 801ed76:	6983      	ldr	r3, [r0, #24]
 801ed78:	b90b      	cbnz	r3, 801ed7e <__swbuf_r+0x12>
 801ed7a:	f7fe fbc9 	bl	801d510 <__sinit>
 801ed7e:	4b21      	ldr	r3, [pc, #132]	; (801ee04 <__swbuf_r+0x98>)
 801ed80:	429c      	cmp	r4, r3
 801ed82:	d12b      	bne.n	801eddc <__swbuf_r+0x70>
 801ed84:	686c      	ldr	r4, [r5, #4]
 801ed86:	69a3      	ldr	r3, [r4, #24]
 801ed88:	60a3      	str	r3, [r4, #8]
 801ed8a:	89a3      	ldrh	r3, [r4, #12]
 801ed8c:	071a      	lsls	r2, r3, #28
 801ed8e:	d52f      	bpl.n	801edf0 <__swbuf_r+0x84>
 801ed90:	6923      	ldr	r3, [r4, #16]
 801ed92:	b36b      	cbz	r3, 801edf0 <__swbuf_r+0x84>
 801ed94:	6923      	ldr	r3, [r4, #16]
 801ed96:	6820      	ldr	r0, [r4, #0]
 801ed98:	1ac0      	subs	r0, r0, r3
 801ed9a:	6963      	ldr	r3, [r4, #20]
 801ed9c:	b2f6      	uxtb	r6, r6
 801ed9e:	4283      	cmp	r3, r0
 801eda0:	4637      	mov	r7, r6
 801eda2:	dc04      	bgt.n	801edae <__swbuf_r+0x42>
 801eda4:	4621      	mov	r1, r4
 801eda6:	4628      	mov	r0, r5
 801eda8:	f000 f92e 	bl	801f008 <_fflush_r>
 801edac:	bb30      	cbnz	r0, 801edfc <__swbuf_r+0x90>
 801edae:	68a3      	ldr	r3, [r4, #8]
 801edb0:	3b01      	subs	r3, #1
 801edb2:	60a3      	str	r3, [r4, #8]
 801edb4:	6823      	ldr	r3, [r4, #0]
 801edb6:	1c5a      	adds	r2, r3, #1
 801edb8:	6022      	str	r2, [r4, #0]
 801edba:	701e      	strb	r6, [r3, #0]
 801edbc:	6963      	ldr	r3, [r4, #20]
 801edbe:	3001      	adds	r0, #1
 801edc0:	4283      	cmp	r3, r0
 801edc2:	d004      	beq.n	801edce <__swbuf_r+0x62>
 801edc4:	89a3      	ldrh	r3, [r4, #12]
 801edc6:	07db      	lsls	r3, r3, #31
 801edc8:	d506      	bpl.n	801edd8 <__swbuf_r+0x6c>
 801edca:	2e0a      	cmp	r6, #10
 801edcc:	d104      	bne.n	801edd8 <__swbuf_r+0x6c>
 801edce:	4621      	mov	r1, r4
 801edd0:	4628      	mov	r0, r5
 801edd2:	f000 f919 	bl	801f008 <_fflush_r>
 801edd6:	b988      	cbnz	r0, 801edfc <__swbuf_r+0x90>
 801edd8:	4638      	mov	r0, r7
 801edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eddc:	4b0a      	ldr	r3, [pc, #40]	; (801ee08 <__swbuf_r+0x9c>)
 801edde:	429c      	cmp	r4, r3
 801ede0:	d101      	bne.n	801ede6 <__swbuf_r+0x7a>
 801ede2:	68ac      	ldr	r4, [r5, #8]
 801ede4:	e7cf      	b.n	801ed86 <__swbuf_r+0x1a>
 801ede6:	4b09      	ldr	r3, [pc, #36]	; (801ee0c <__swbuf_r+0xa0>)
 801ede8:	429c      	cmp	r4, r3
 801edea:	bf08      	it	eq
 801edec:	68ec      	ldreq	r4, [r5, #12]
 801edee:	e7ca      	b.n	801ed86 <__swbuf_r+0x1a>
 801edf0:	4621      	mov	r1, r4
 801edf2:	4628      	mov	r0, r5
 801edf4:	f000 f80c 	bl	801ee10 <__swsetup_r>
 801edf8:	2800      	cmp	r0, #0
 801edfa:	d0cb      	beq.n	801ed94 <__swbuf_r+0x28>
 801edfc:	f04f 37ff 	mov.w	r7, #4294967295
 801ee00:	e7ea      	b.n	801edd8 <__swbuf_r+0x6c>
 801ee02:	bf00      	nop
 801ee04:	080468b4 	.word	0x080468b4
 801ee08:	080468d4 	.word	0x080468d4
 801ee0c:	08046894 	.word	0x08046894

0801ee10 <__swsetup_r>:
 801ee10:	4b32      	ldr	r3, [pc, #200]	; (801eedc <__swsetup_r+0xcc>)
 801ee12:	b570      	push	{r4, r5, r6, lr}
 801ee14:	681d      	ldr	r5, [r3, #0]
 801ee16:	4606      	mov	r6, r0
 801ee18:	460c      	mov	r4, r1
 801ee1a:	b125      	cbz	r5, 801ee26 <__swsetup_r+0x16>
 801ee1c:	69ab      	ldr	r3, [r5, #24]
 801ee1e:	b913      	cbnz	r3, 801ee26 <__swsetup_r+0x16>
 801ee20:	4628      	mov	r0, r5
 801ee22:	f7fe fb75 	bl	801d510 <__sinit>
 801ee26:	4b2e      	ldr	r3, [pc, #184]	; (801eee0 <__swsetup_r+0xd0>)
 801ee28:	429c      	cmp	r4, r3
 801ee2a:	d10f      	bne.n	801ee4c <__swsetup_r+0x3c>
 801ee2c:	686c      	ldr	r4, [r5, #4]
 801ee2e:	89a3      	ldrh	r3, [r4, #12]
 801ee30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ee34:	0719      	lsls	r1, r3, #28
 801ee36:	d42c      	bmi.n	801ee92 <__swsetup_r+0x82>
 801ee38:	06dd      	lsls	r5, r3, #27
 801ee3a:	d411      	bmi.n	801ee60 <__swsetup_r+0x50>
 801ee3c:	2309      	movs	r3, #9
 801ee3e:	6033      	str	r3, [r6, #0]
 801ee40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ee44:	81a3      	strh	r3, [r4, #12]
 801ee46:	f04f 30ff 	mov.w	r0, #4294967295
 801ee4a:	e03e      	b.n	801eeca <__swsetup_r+0xba>
 801ee4c:	4b25      	ldr	r3, [pc, #148]	; (801eee4 <__swsetup_r+0xd4>)
 801ee4e:	429c      	cmp	r4, r3
 801ee50:	d101      	bne.n	801ee56 <__swsetup_r+0x46>
 801ee52:	68ac      	ldr	r4, [r5, #8]
 801ee54:	e7eb      	b.n	801ee2e <__swsetup_r+0x1e>
 801ee56:	4b24      	ldr	r3, [pc, #144]	; (801eee8 <__swsetup_r+0xd8>)
 801ee58:	429c      	cmp	r4, r3
 801ee5a:	bf08      	it	eq
 801ee5c:	68ec      	ldreq	r4, [r5, #12]
 801ee5e:	e7e6      	b.n	801ee2e <__swsetup_r+0x1e>
 801ee60:	0758      	lsls	r0, r3, #29
 801ee62:	d512      	bpl.n	801ee8a <__swsetup_r+0x7a>
 801ee64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ee66:	b141      	cbz	r1, 801ee7a <__swsetup_r+0x6a>
 801ee68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee6c:	4299      	cmp	r1, r3
 801ee6e:	d002      	beq.n	801ee76 <__swsetup_r+0x66>
 801ee70:	4630      	mov	r0, r6
 801ee72:	f7fe ffb9 	bl	801dde8 <_free_r>
 801ee76:	2300      	movs	r3, #0
 801ee78:	6363      	str	r3, [r4, #52]	; 0x34
 801ee7a:	89a3      	ldrh	r3, [r4, #12]
 801ee7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ee80:	81a3      	strh	r3, [r4, #12]
 801ee82:	2300      	movs	r3, #0
 801ee84:	6063      	str	r3, [r4, #4]
 801ee86:	6923      	ldr	r3, [r4, #16]
 801ee88:	6023      	str	r3, [r4, #0]
 801ee8a:	89a3      	ldrh	r3, [r4, #12]
 801ee8c:	f043 0308 	orr.w	r3, r3, #8
 801ee90:	81a3      	strh	r3, [r4, #12]
 801ee92:	6923      	ldr	r3, [r4, #16]
 801ee94:	b94b      	cbnz	r3, 801eeaa <__swsetup_r+0x9a>
 801ee96:	89a3      	ldrh	r3, [r4, #12]
 801ee98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ee9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eea0:	d003      	beq.n	801eeaa <__swsetup_r+0x9a>
 801eea2:	4621      	mov	r1, r4
 801eea4:	4630      	mov	r0, r6
 801eea6:	f000 f911 	bl	801f0cc <__smakebuf_r>
 801eeaa:	89a0      	ldrh	r0, [r4, #12]
 801eeac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eeb0:	f010 0301 	ands.w	r3, r0, #1
 801eeb4:	d00a      	beq.n	801eecc <__swsetup_r+0xbc>
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	60a3      	str	r3, [r4, #8]
 801eeba:	6963      	ldr	r3, [r4, #20]
 801eebc:	425b      	negs	r3, r3
 801eebe:	61a3      	str	r3, [r4, #24]
 801eec0:	6923      	ldr	r3, [r4, #16]
 801eec2:	b943      	cbnz	r3, 801eed6 <__swsetup_r+0xc6>
 801eec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801eec8:	d1ba      	bne.n	801ee40 <__swsetup_r+0x30>
 801eeca:	bd70      	pop	{r4, r5, r6, pc}
 801eecc:	0781      	lsls	r1, r0, #30
 801eece:	bf58      	it	pl
 801eed0:	6963      	ldrpl	r3, [r4, #20]
 801eed2:	60a3      	str	r3, [r4, #8]
 801eed4:	e7f4      	b.n	801eec0 <__swsetup_r+0xb0>
 801eed6:	2000      	movs	r0, #0
 801eed8:	e7f7      	b.n	801eeca <__swsetup_r+0xba>
 801eeda:	bf00      	nop
 801eedc:	24000038 	.word	0x24000038
 801eee0:	080468b4 	.word	0x080468b4
 801eee4:	080468d4 	.word	0x080468d4
 801eee8:	08046894 	.word	0x08046894

0801eeec <abort>:
 801eeec:	b508      	push	{r3, lr}
 801eeee:	2006      	movs	r0, #6
 801eef0:	f000 f9a2 	bl	801f238 <raise>
 801eef4:	2001      	movs	r0, #1
 801eef6:	f7e2 ffb7 	bl	8001e68 <_exit>
	...

0801eefc <__sflush_r>:
 801eefc:	898a      	ldrh	r2, [r1, #12]
 801eefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef02:	4605      	mov	r5, r0
 801ef04:	0710      	lsls	r0, r2, #28
 801ef06:	460c      	mov	r4, r1
 801ef08:	d458      	bmi.n	801efbc <__sflush_r+0xc0>
 801ef0a:	684b      	ldr	r3, [r1, #4]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	dc05      	bgt.n	801ef1c <__sflush_r+0x20>
 801ef10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	dc02      	bgt.n	801ef1c <__sflush_r+0x20>
 801ef16:	2000      	movs	r0, #0
 801ef18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ef1e:	2e00      	cmp	r6, #0
 801ef20:	d0f9      	beq.n	801ef16 <__sflush_r+0x1a>
 801ef22:	2300      	movs	r3, #0
 801ef24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ef28:	682f      	ldr	r7, [r5, #0]
 801ef2a:	602b      	str	r3, [r5, #0]
 801ef2c:	d032      	beq.n	801ef94 <__sflush_r+0x98>
 801ef2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ef30:	89a3      	ldrh	r3, [r4, #12]
 801ef32:	075a      	lsls	r2, r3, #29
 801ef34:	d505      	bpl.n	801ef42 <__sflush_r+0x46>
 801ef36:	6863      	ldr	r3, [r4, #4]
 801ef38:	1ac0      	subs	r0, r0, r3
 801ef3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ef3c:	b10b      	cbz	r3, 801ef42 <__sflush_r+0x46>
 801ef3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef40:	1ac0      	subs	r0, r0, r3
 801ef42:	2300      	movs	r3, #0
 801ef44:	4602      	mov	r2, r0
 801ef46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ef48:	6a21      	ldr	r1, [r4, #32]
 801ef4a:	4628      	mov	r0, r5
 801ef4c:	47b0      	blx	r6
 801ef4e:	1c43      	adds	r3, r0, #1
 801ef50:	89a3      	ldrh	r3, [r4, #12]
 801ef52:	d106      	bne.n	801ef62 <__sflush_r+0x66>
 801ef54:	6829      	ldr	r1, [r5, #0]
 801ef56:	291d      	cmp	r1, #29
 801ef58:	d82c      	bhi.n	801efb4 <__sflush_r+0xb8>
 801ef5a:	4a2a      	ldr	r2, [pc, #168]	; (801f004 <__sflush_r+0x108>)
 801ef5c:	40ca      	lsrs	r2, r1
 801ef5e:	07d6      	lsls	r6, r2, #31
 801ef60:	d528      	bpl.n	801efb4 <__sflush_r+0xb8>
 801ef62:	2200      	movs	r2, #0
 801ef64:	6062      	str	r2, [r4, #4]
 801ef66:	04d9      	lsls	r1, r3, #19
 801ef68:	6922      	ldr	r2, [r4, #16]
 801ef6a:	6022      	str	r2, [r4, #0]
 801ef6c:	d504      	bpl.n	801ef78 <__sflush_r+0x7c>
 801ef6e:	1c42      	adds	r2, r0, #1
 801ef70:	d101      	bne.n	801ef76 <__sflush_r+0x7a>
 801ef72:	682b      	ldr	r3, [r5, #0]
 801ef74:	b903      	cbnz	r3, 801ef78 <__sflush_r+0x7c>
 801ef76:	6560      	str	r0, [r4, #84]	; 0x54
 801ef78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef7a:	602f      	str	r7, [r5, #0]
 801ef7c:	2900      	cmp	r1, #0
 801ef7e:	d0ca      	beq.n	801ef16 <__sflush_r+0x1a>
 801ef80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef84:	4299      	cmp	r1, r3
 801ef86:	d002      	beq.n	801ef8e <__sflush_r+0x92>
 801ef88:	4628      	mov	r0, r5
 801ef8a:	f7fe ff2d 	bl	801dde8 <_free_r>
 801ef8e:	2000      	movs	r0, #0
 801ef90:	6360      	str	r0, [r4, #52]	; 0x34
 801ef92:	e7c1      	b.n	801ef18 <__sflush_r+0x1c>
 801ef94:	6a21      	ldr	r1, [r4, #32]
 801ef96:	2301      	movs	r3, #1
 801ef98:	4628      	mov	r0, r5
 801ef9a:	47b0      	blx	r6
 801ef9c:	1c41      	adds	r1, r0, #1
 801ef9e:	d1c7      	bne.n	801ef30 <__sflush_r+0x34>
 801efa0:	682b      	ldr	r3, [r5, #0]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d0c4      	beq.n	801ef30 <__sflush_r+0x34>
 801efa6:	2b1d      	cmp	r3, #29
 801efa8:	d001      	beq.n	801efae <__sflush_r+0xb2>
 801efaa:	2b16      	cmp	r3, #22
 801efac:	d101      	bne.n	801efb2 <__sflush_r+0xb6>
 801efae:	602f      	str	r7, [r5, #0]
 801efb0:	e7b1      	b.n	801ef16 <__sflush_r+0x1a>
 801efb2:	89a3      	ldrh	r3, [r4, #12]
 801efb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efb8:	81a3      	strh	r3, [r4, #12]
 801efba:	e7ad      	b.n	801ef18 <__sflush_r+0x1c>
 801efbc:	690f      	ldr	r7, [r1, #16]
 801efbe:	2f00      	cmp	r7, #0
 801efc0:	d0a9      	beq.n	801ef16 <__sflush_r+0x1a>
 801efc2:	0793      	lsls	r3, r2, #30
 801efc4:	680e      	ldr	r6, [r1, #0]
 801efc6:	bf08      	it	eq
 801efc8:	694b      	ldreq	r3, [r1, #20]
 801efca:	600f      	str	r7, [r1, #0]
 801efcc:	bf18      	it	ne
 801efce:	2300      	movne	r3, #0
 801efd0:	eba6 0807 	sub.w	r8, r6, r7
 801efd4:	608b      	str	r3, [r1, #8]
 801efd6:	f1b8 0f00 	cmp.w	r8, #0
 801efda:	dd9c      	ble.n	801ef16 <__sflush_r+0x1a>
 801efdc:	6a21      	ldr	r1, [r4, #32]
 801efde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801efe0:	4643      	mov	r3, r8
 801efe2:	463a      	mov	r2, r7
 801efe4:	4628      	mov	r0, r5
 801efe6:	47b0      	blx	r6
 801efe8:	2800      	cmp	r0, #0
 801efea:	dc06      	bgt.n	801effa <__sflush_r+0xfe>
 801efec:	89a3      	ldrh	r3, [r4, #12]
 801efee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eff2:	81a3      	strh	r3, [r4, #12]
 801eff4:	f04f 30ff 	mov.w	r0, #4294967295
 801eff8:	e78e      	b.n	801ef18 <__sflush_r+0x1c>
 801effa:	4407      	add	r7, r0
 801effc:	eba8 0800 	sub.w	r8, r8, r0
 801f000:	e7e9      	b.n	801efd6 <__sflush_r+0xda>
 801f002:	bf00      	nop
 801f004:	20400001 	.word	0x20400001

0801f008 <_fflush_r>:
 801f008:	b538      	push	{r3, r4, r5, lr}
 801f00a:	690b      	ldr	r3, [r1, #16]
 801f00c:	4605      	mov	r5, r0
 801f00e:	460c      	mov	r4, r1
 801f010:	b913      	cbnz	r3, 801f018 <_fflush_r+0x10>
 801f012:	2500      	movs	r5, #0
 801f014:	4628      	mov	r0, r5
 801f016:	bd38      	pop	{r3, r4, r5, pc}
 801f018:	b118      	cbz	r0, 801f022 <_fflush_r+0x1a>
 801f01a:	6983      	ldr	r3, [r0, #24]
 801f01c:	b90b      	cbnz	r3, 801f022 <_fflush_r+0x1a>
 801f01e:	f7fe fa77 	bl	801d510 <__sinit>
 801f022:	4b14      	ldr	r3, [pc, #80]	; (801f074 <_fflush_r+0x6c>)
 801f024:	429c      	cmp	r4, r3
 801f026:	d11b      	bne.n	801f060 <_fflush_r+0x58>
 801f028:	686c      	ldr	r4, [r5, #4]
 801f02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d0ef      	beq.n	801f012 <_fflush_r+0xa>
 801f032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f034:	07d0      	lsls	r0, r2, #31
 801f036:	d404      	bmi.n	801f042 <_fflush_r+0x3a>
 801f038:	0599      	lsls	r1, r3, #22
 801f03a:	d402      	bmi.n	801f042 <_fflush_r+0x3a>
 801f03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f03e:	f7fe fb1c 	bl	801d67a <__retarget_lock_acquire_recursive>
 801f042:	4628      	mov	r0, r5
 801f044:	4621      	mov	r1, r4
 801f046:	f7ff ff59 	bl	801eefc <__sflush_r>
 801f04a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f04c:	07da      	lsls	r2, r3, #31
 801f04e:	4605      	mov	r5, r0
 801f050:	d4e0      	bmi.n	801f014 <_fflush_r+0xc>
 801f052:	89a3      	ldrh	r3, [r4, #12]
 801f054:	059b      	lsls	r3, r3, #22
 801f056:	d4dd      	bmi.n	801f014 <_fflush_r+0xc>
 801f058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f05a:	f7fe fb0f 	bl	801d67c <__retarget_lock_release_recursive>
 801f05e:	e7d9      	b.n	801f014 <_fflush_r+0xc>
 801f060:	4b05      	ldr	r3, [pc, #20]	; (801f078 <_fflush_r+0x70>)
 801f062:	429c      	cmp	r4, r3
 801f064:	d101      	bne.n	801f06a <_fflush_r+0x62>
 801f066:	68ac      	ldr	r4, [r5, #8]
 801f068:	e7df      	b.n	801f02a <_fflush_r+0x22>
 801f06a:	4b04      	ldr	r3, [pc, #16]	; (801f07c <_fflush_r+0x74>)
 801f06c:	429c      	cmp	r4, r3
 801f06e:	bf08      	it	eq
 801f070:	68ec      	ldreq	r4, [r5, #12]
 801f072:	e7da      	b.n	801f02a <_fflush_r+0x22>
 801f074:	080468b4 	.word	0x080468b4
 801f078:	080468d4 	.word	0x080468d4
 801f07c:	08046894 	.word	0x08046894

0801f080 <__swhatbuf_r>:
 801f080:	b570      	push	{r4, r5, r6, lr}
 801f082:	460e      	mov	r6, r1
 801f084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f088:	2900      	cmp	r1, #0
 801f08a:	b096      	sub	sp, #88	; 0x58
 801f08c:	4614      	mov	r4, r2
 801f08e:	461d      	mov	r5, r3
 801f090:	da08      	bge.n	801f0a4 <__swhatbuf_r+0x24>
 801f092:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f096:	2200      	movs	r2, #0
 801f098:	602a      	str	r2, [r5, #0]
 801f09a:	061a      	lsls	r2, r3, #24
 801f09c:	d410      	bmi.n	801f0c0 <__swhatbuf_r+0x40>
 801f09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f0a2:	e00e      	b.n	801f0c2 <__swhatbuf_r+0x42>
 801f0a4:	466a      	mov	r2, sp
 801f0a6:	f000 f8f1 	bl	801f28c <_fstat_r>
 801f0aa:	2800      	cmp	r0, #0
 801f0ac:	dbf1      	blt.n	801f092 <__swhatbuf_r+0x12>
 801f0ae:	9a01      	ldr	r2, [sp, #4]
 801f0b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f0b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f0b8:	425a      	negs	r2, r3
 801f0ba:	415a      	adcs	r2, r3
 801f0bc:	602a      	str	r2, [r5, #0]
 801f0be:	e7ee      	b.n	801f09e <__swhatbuf_r+0x1e>
 801f0c0:	2340      	movs	r3, #64	; 0x40
 801f0c2:	2000      	movs	r0, #0
 801f0c4:	6023      	str	r3, [r4, #0]
 801f0c6:	b016      	add	sp, #88	; 0x58
 801f0c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f0cc <__smakebuf_r>:
 801f0cc:	898b      	ldrh	r3, [r1, #12]
 801f0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f0d0:	079d      	lsls	r5, r3, #30
 801f0d2:	4606      	mov	r6, r0
 801f0d4:	460c      	mov	r4, r1
 801f0d6:	d507      	bpl.n	801f0e8 <__smakebuf_r+0x1c>
 801f0d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f0dc:	6023      	str	r3, [r4, #0]
 801f0de:	6123      	str	r3, [r4, #16]
 801f0e0:	2301      	movs	r3, #1
 801f0e2:	6163      	str	r3, [r4, #20]
 801f0e4:	b002      	add	sp, #8
 801f0e6:	bd70      	pop	{r4, r5, r6, pc}
 801f0e8:	ab01      	add	r3, sp, #4
 801f0ea:	466a      	mov	r2, sp
 801f0ec:	f7ff ffc8 	bl	801f080 <__swhatbuf_r>
 801f0f0:	9900      	ldr	r1, [sp, #0]
 801f0f2:	4605      	mov	r5, r0
 801f0f4:	4630      	mov	r0, r6
 801f0f6:	f7fe fee3 	bl	801dec0 <_malloc_r>
 801f0fa:	b948      	cbnz	r0, 801f110 <__smakebuf_r+0x44>
 801f0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f100:	059a      	lsls	r2, r3, #22
 801f102:	d4ef      	bmi.n	801f0e4 <__smakebuf_r+0x18>
 801f104:	f023 0303 	bic.w	r3, r3, #3
 801f108:	f043 0302 	orr.w	r3, r3, #2
 801f10c:	81a3      	strh	r3, [r4, #12]
 801f10e:	e7e3      	b.n	801f0d8 <__smakebuf_r+0xc>
 801f110:	4b0d      	ldr	r3, [pc, #52]	; (801f148 <__smakebuf_r+0x7c>)
 801f112:	62b3      	str	r3, [r6, #40]	; 0x28
 801f114:	89a3      	ldrh	r3, [r4, #12]
 801f116:	6020      	str	r0, [r4, #0]
 801f118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f11c:	81a3      	strh	r3, [r4, #12]
 801f11e:	9b00      	ldr	r3, [sp, #0]
 801f120:	6163      	str	r3, [r4, #20]
 801f122:	9b01      	ldr	r3, [sp, #4]
 801f124:	6120      	str	r0, [r4, #16]
 801f126:	b15b      	cbz	r3, 801f140 <__smakebuf_r+0x74>
 801f128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f12c:	4630      	mov	r0, r6
 801f12e:	f000 f8bf 	bl	801f2b0 <_isatty_r>
 801f132:	b128      	cbz	r0, 801f140 <__smakebuf_r+0x74>
 801f134:	89a3      	ldrh	r3, [r4, #12]
 801f136:	f023 0303 	bic.w	r3, r3, #3
 801f13a:	f043 0301 	orr.w	r3, r3, #1
 801f13e:	81a3      	strh	r3, [r4, #12]
 801f140:	89a0      	ldrh	r0, [r4, #12]
 801f142:	4305      	orrs	r5, r0
 801f144:	81a5      	strh	r5, [r4, #12]
 801f146:	e7cd      	b.n	801f0e4 <__smakebuf_r+0x18>
 801f148:	0801d4a9 	.word	0x0801d4a9

0801f14c <__ascii_mbtowc>:
 801f14c:	b082      	sub	sp, #8
 801f14e:	b901      	cbnz	r1, 801f152 <__ascii_mbtowc+0x6>
 801f150:	a901      	add	r1, sp, #4
 801f152:	b142      	cbz	r2, 801f166 <__ascii_mbtowc+0x1a>
 801f154:	b14b      	cbz	r3, 801f16a <__ascii_mbtowc+0x1e>
 801f156:	7813      	ldrb	r3, [r2, #0]
 801f158:	600b      	str	r3, [r1, #0]
 801f15a:	7812      	ldrb	r2, [r2, #0]
 801f15c:	1e10      	subs	r0, r2, #0
 801f15e:	bf18      	it	ne
 801f160:	2001      	movne	r0, #1
 801f162:	b002      	add	sp, #8
 801f164:	4770      	bx	lr
 801f166:	4610      	mov	r0, r2
 801f168:	e7fb      	b.n	801f162 <__ascii_mbtowc+0x16>
 801f16a:	f06f 0001 	mvn.w	r0, #1
 801f16e:	e7f8      	b.n	801f162 <__ascii_mbtowc+0x16>

0801f170 <__malloc_lock>:
 801f170:	4801      	ldr	r0, [pc, #4]	; (801f178 <__malloc_lock+0x8>)
 801f172:	f7fe ba82 	b.w	801d67a <__retarget_lock_acquire_recursive>
 801f176:	bf00      	nop
 801f178:	240079c4 	.word	0x240079c4

0801f17c <__malloc_unlock>:
 801f17c:	4801      	ldr	r0, [pc, #4]	; (801f184 <__malloc_unlock+0x8>)
 801f17e:	f7fe ba7d 	b.w	801d67c <__retarget_lock_release_recursive>
 801f182:	bf00      	nop
 801f184:	240079c4 	.word	0x240079c4

0801f188 <_realloc_r>:
 801f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f18c:	4680      	mov	r8, r0
 801f18e:	4614      	mov	r4, r2
 801f190:	460e      	mov	r6, r1
 801f192:	b921      	cbnz	r1, 801f19e <_realloc_r+0x16>
 801f194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f198:	4611      	mov	r1, r2
 801f19a:	f7fe be91 	b.w	801dec0 <_malloc_r>
 801f19e:	b92a      	cbnz	r2, 801f1ac <_realloc_r+0x24>
 801f1a0:	f7fe fe22 	bl	801dde8 <_free_r>
 801f1a4:	4625      	mov	r5, r4
 801f1a6:	4628      	mov	r0, r5
 801f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1ac:	f000 f890 	bl	801f2d0 <_malloc_usable_size_r>
 801f1b0:	4284      	cmp	r4, r0
 801f1b2:	4607      	mov	r7, r0
 801f1b4:	d802      	bhi.n	801f1bc <_realloc_r+0x34>
 801f1b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f1ba:	d812      	bhi.n	801f1e2 <_realloc_r+0x5a>
 801f1bc:	4621      	mov	r1, r4
 801f1be:	4640      	mov	r0, r8
 801f1c0:	f7fe fe7e 	bl	801dec0 <_malloc_r>
 801f1c4:	4605      	mov	r5, r0
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	d0ed      	beq.n	801f1a6 <_realloc_r+0x1e>
 801f1ca:	42bc      	cmp	r4, r7
 801f1cc:	4622      	mov	r2, r4
 801f1ce:	4631      	mov	r1, r6
 801f1d0:	bf28      	it	cs
 801f1d2:	463a      	movcs	r2, r7
 801f1d4:	f7fc fd04 	bl	801bbe0 <memcpy>
 801f1d8:	4631      	mov	r1, r6
 801f1da:	4640      	mov	r0, r8
 801f1dc:	f7fe fe04 	bl	801dde8 <_free_r>
 801f1e0:	e7e1      	b.n	801f1a6 <_realloc_r+0x1e>
 801f1e2:	4635      	mov	r5, r6
 801f1e4:	e7df      	b.n	801f1a6 <_realloc_r+0x1e>

0801f1e6 <_raise_r>:
 801f1e6:	291f      	cmp	r1, #31
 801f1e8:	b538      	push	{r3, r4, r5, lr}
 801f1ea:	4604      	mov	r4, r0
 801f1ec:	460d      	mov	r5, r1
 801f1ee:	d904      	bls.n	801f1fa <_raise_r+0x14>
 801f1f0:	2316      	movs	r3, #22
 801f1f2:	6003      	str	r3, [r0, #0]
 801f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1f8:	bd38      	pop	{r3, r4, r5, pc}
 801f1fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f1fc:	b112      	cbz	r2, 801f204 <_raise_r+0x1e>
 801f1fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f202:	b94b      	cbnz	r3, 801f218 <_raise_r+0x32>
 801f204:	4620      	mov	r0, r4
 801f206:	f000 f831 	bl	801f26c <_getpid_r>
 801f20a:	462a      	mov	r2, r5
 801f20c:	4601      	mov	r1, r0
 801f20e:	4620      	mov	r0, r4
 801f210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f214:	f000 b818 	b.w	801f248 <_kill_r>
 801f218:	2b01      	cmp	r3, #1
 801f21a:	d00a      	beq.n	801f232 <_raise_r+0x4c>
 801f21c:	1c59      	adds	r1, r3, #1
 801f21e:	d103      	bne.n	801f228 <_raise_r+0x42>
 801f220:	2316      	movs	r3, #22
 801f222:	6003      	str	r3, [r0, #0]
 801f224:	2001      	movs	r0, #1
 801f226:	e7e7      	b.n	801f1f8 <_raise_r+0x12>
 801f228:	2400      	movs	r4, #0
 801f22a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f22e:	4628      	mov	r0, r5
 801f230:	4798      	blx	r3
 801f232:	2000      	movs	r0, #0
 801f234:	e7e0      	b.n	801f1f8 <_raise_r+0x12>
	...

0801f238 <raise>:
 801f238:	4b02      	ldr	r3, [pc, #8]	; (801f244 <raise+0xc>)
 801f23a:	4601      	mov	r1, r0
 801f23c:	6818      	ldr	r0, [r3, #0]
 801f23e:	f7ff bfd2 	b.w	801f1e6 <_raise_r>
 801f242:	bf00      	nop
 801f244:	24000038 	.word	0x24000038

0801f248 <_kill_r>:
 801f248:	b538      	push	{r3, r4, r5, lr}
 801f24a:	4d07      	ldr	r5, [pc, #28]	; (801f268 <_kill_r+0x20>)
 801f24c:	2300      	movs	r3, #0
 801f24e:	4604      	mov	r4, r0
 801f250:	4608      	mov	r0, r1
 801f252:	4611      	mov	r1, r2
 801f254:	602b      	str	r3, [r5, #0]
 801f256:	f7e2 fdf5 	bl	8001e44 <_kill>
 801f25a:	1c43      	adds	r3, r0, #1
 801f25c:	d102      	bne.n	801f264 <_kill_r+0x1c>
 801f25e:	682b      	ldr	r3, [r5, #0]
 801f260:	b103      	cbz	r3, 801f264 <_kill_r+0x1c>
 801f262:	6023      	str	r3, [r4, #0]
 801f264:	bd38      	pop	{r3, r4, r5, pc}
 801f266:	bf00      	nop
 801f268:	2400794c 	.word	0x2400794c

0801f26c <_getpid_r>:
 801f26c:	f7e2 bde2 	b.w	8001e34 <_getpid>

0801f270 <__ascii_wctomb>:
 801f270:	b149      	cbz	r1, 801f286 <__ascii_wctomb+0x16>
 801f272:	2aff      	cmp	r2, #255	; 0xff
 801f274:	bf85      	ittet	hi
 801f276:	238a      	movhi	r3, #138	; 0x8a
 801f278:	6003      	strhi	r3, [r0, #0]
 801f27a:	700a      	strbls	r2, [r1, #0]
 801f27c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f280:	bf98      	it	ls
 801f282:	2001      	movls	r0, #1
 801f284:	4770      	bx	lr
 801f286:	4608      	mov	r0, r1
 801f288:	4770      	bx	lr
	...

0801f28c <_fstat_r>:
 801f28c:	b538      	push	{r3, r4, r5, lr}
 801f28e:	4d07      	ldr	r5, [pc, #28]	; (801f2ac <_fstat_r+0x20>)
 801f290:	2300      	movs	r3, #0
 801f292:	4604      	mov	r4, r0
 801f294:	4608      	mov	r0, r1
 801f296:	4611      	mov	r1, r2
 801f298:	602b      	str	r3, [r5, #0]
 801f29a:	f7e2 fe34 	bl	8001f06 <_fstat>
 801f29e:	1c43      	adds	r3, r0, #1
 801f2a0:	d102      	bne.n	801f2a8 <_fstat_r+0x1c>
 801f2a2:	682b      	ldr	r3, [r5, #0]
 801f2a4:	b103      	cbz	r3, 801f2a8 <_fstat_r+0x1c>
 801f2a6:	6023      	str	r3, [r4, #0]
 801f2a8:	bd38      	pop	{r3, r4, r5, pc}
 801f2aa:	bf00      	nop
 801f2ac:	2400794c 	.word	0x2400794c

0801f2b0 <_isatty_r>:
 801f2b0:	b538      	push	{r3, r4, r5, lr}
 801f2b2:	4d06      	ldr	r5, [pc, #24]	; (801f2cc <_isatty_r+0x1c>)
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	4604      	mov	r4, r0
 801f2b8:	4608      	mov	r0, r1
 801f2ba:	602b      	str	r3, [r5, #0]
 801f2bc:	f7e2 fe33 	bl	8001f26 <_isatty>
 801f2c0:	1c43      	adds	r3, r0, #1
 801f2c2:	d102      	bne.n	801f2ca <_isatty_r+0x1a>
 801f2c4:	682b      	ldr	r3, [r5, #0]
 801f2c6:	b103      	cbz	r3, 801f2ca <_isatty_r+0x1a>
 801f2c8:	6023      	str	r3, [r4, #0]
 801f2ca:	bd38      	pop	{r3, r4, r5, pc}
 801f2cc:	2400794c 	.word	0x2400794c

0801f2d0 <_malloc_usable_size_r>:
 801f2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f2d4:	1f18      	subs	r0, r3, #4
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	bfbc      	itt	lt
 801f2da:	580b      	ldrlt	r3, [r1, r0]
 801f2dc:	18c0      	addlt	r0, r0, r3
 801f2de:	4770      	bx	lr

0801f2e0 <_init>:
 801f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2e2:	bf00      	nop
 801f2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2e6:	bc08      	pop	{r3}
 801f2e8:	469e      	mov	lr, r3
 801f2ea:	4770      	bx	lr

0801f2ec <_fini>:
 801f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ee:	bf00      	nop
 801f2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2f2:	bc08      	pop	{r3}
 801f2f4:	469e      	mov	lr, r3
 801f2f6:	4770      	bx	lr
