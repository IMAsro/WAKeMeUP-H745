
H755_ETH_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a504  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0810a7a8  0810a7a8  0001a7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810ab94  0810ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810ab98  0810ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  10000000  0810ab9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  100001e0  0810ad7c  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  10000310  0810ad7c  00020310  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019271  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002bbb  00000000  00000000  00039481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015a8  00000000  00000000  0003c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001460  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d037  00000000  00000000  0003ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019a2d  00000000  00000000  0007ba7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0019aa9f  00000000  00000000  000954ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0022ff4b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d70  00000000  00000000  0022ff9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a78c 	.word	0x0810a78c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810a78c 	.word	0x0810a78c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100d5c:	4b0b      	ldr	r3, [pc, #44]	; (8100d8c <SystemInit+0x34>)
 8100d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100d62:	4a0a      	ldr	r2, [pc, #40]	; (8100d8c <SystemInit+0x34>)
 8100d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100d6c:	4b07      	ldr	r3, [pc, #28]	; (8100d8c <SystemInit+0x34>)
 8100d6e:	691b      	ldr	r3, [r3, #16]
 8100d70:	4a06      	ldr	r2, [pc, #24]	; (8100d8c <SystemInit+0x34>)
 8100d72:	f043 0310 	orr.w	r3, r3, #16
 8100d76:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100d78:	4b04      	ldr	r3, [pc, #16]	; (8100d8c <SystemInit+0x34>)
 8100d7a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100d7e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100d80:	bf00      	nop
 8100d82:	46bd      	mov	sp, r7
 8100d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d88:	4770      	bx	lr
 8100d8a:	bf00      	nop
 8100d8c:	e000ed00 	.word	0xe000ed00

08100d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100d90:	b590      	push	{r4, r7, lr}
 8100d92:	b083      	sub	sp, #12
 8100d94:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100d96:	4b7e      	ldr	r3, [pc, #504]	; (8100f90 <main+0x200>)
 8100d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d9c:	4a7c      	ldr	r2, [pc, #496]	; (8100f90 <main+0x200>)
 8100d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100da6:	4b7a      	ldr	r3, [pc, #488]	; (8100f90 <main+0x200>)
 8100da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100db0:	607b      	str	r3, [r7, #4]
 8100db2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100db4:	2001      	movs	r0, #1
 8100db6:	f002 fe6f 	bl	8103a98 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100dba:	f003 fd53 	bl	8104864 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100dbe:	2201      	movs	r2, #1
 8100dc0:	2102      	movs	r1, #2
 8100dc2:	2000      	movs	r0, #0
 8100dc4:	f003 fcd4 	bl	8104770 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100dc8:	4b72      	ldr	r3, [pc, #456]	; (8100f94 <main+0x204>)
 8100dca:	681b      	ldr	r3, [r3, #0]
 8100dcc:	091b      	lsrs	r3, r3, #4
 8100dce:	f003 030f 	and.w	r3, r3, #15
 8100dd2:	2b07      	cmp	r3, #7
 8100dd4:	d108      	bne.n	8100de8 <main+0x58>
 8100dd6:	4b70      	ldr	r3, [pc, #448]	; (8100f98 <main+0x208>)
 8100dd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100ddc:	4a6e      	ldr	r2, [pc, #440]	; (8100f98 <main+0x208>)
 8100dde:	f043 0301 	orr.w	r3, r3, #1
 8100de2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100de6:	e007      	b.n	8100df8 <main+0x68>
 8100de8:	4b6b      	ldr	r3, [pc, #428]	; (8100f98 <main+0x208>)
 8100dea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100dee:	4a6a      	ldr	r2, [pc, #424]	; (8100f98 <main+0x208>)
 8100df0:	f043 0301 	orr.w	r3, r3, #1
 8100df4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100df8:	f001 f88e 	bl	8101f18 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100dfc:	f000 fa3e 	bl	810127c <MX_GPIO_Init>
  MX_I2C4_Init();
 8100e00:	f000 f956 	bl	81010b0 <MX_I2C4_Init>
  MX_ADC1_Init();
 8100e04:	f000 f8da 	bl	8100fbc <MX_ADC1_Init>
  MX_TIM1_Init();
 8100e08:	f000 f992 	bl	8101130 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /*Start ADC - ovr data overwrite, continous mode, IN15*/
  HAL_ADC_Start(&hadc1);
 8100e0c:	4863      	ldr	r0, [pc, #396]	; (8100f9c <main+0x20c>)
 8100e0e:	f001 fccb 	bl	81027a8 <HAL_ADC_Start>
  /*Start TIM1 channels 1-3, PWM mode, ARR value 255*/
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8100e12:	2100      	movs	r1, #0
 8100e14:	4862      	ldr	r0, [pc, #392]	; (8100fa0 <main+0x210>)
 8100e16:	f006 f8c3 	bl	8106fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8100e1a:	2104      	movs	r1, #4
 8100e1c:	4860      	ldr	r0, [pc, #384]	; (8100fa0 <main+0x210>)
 8100e1e:	f006 f8bf 	bl	8106fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8100e22:	2108      	movs	r1, #8
 8100e24:	485e      	ldr	r0, [pc, #376]	; (8100fa0 <main+0x210>)
 8100e26:	f006 f8bb 	bl	8106fa0 <HAL_TIM_PWM_Start>
  /*Fill data share struct between M4 and M7 with zeros*/
  memset(m4_to_m7_ptr,0,sizeof(m7_to_m4_ptr));
 8100e2a:	4b5e      	ldr	r3, [pc, #376]	; (8100fa4 <main+0x214>)
 8100e2c:	2204      	movs	r2, #4
 8100e2e:	2100      	movs	r1, #0
 8100e30:	4618      	mov	r0, r3
 8100e32:	f006 ff99 	bl	8107d68 <memset>
  memset(m7_to_m4_ptr,0,sizeof(m4_to_m7_ptr));
 8100e36:	4b5c      	ldr	r3, [pc, #368]	; (8100fa8 <main+0x218>)
 8100e38:	2204      	movs	r2, #4
 8100e3a:	2100      	movs	r1, #0
 8100e3c:	4618      	mov	r0, r3
 8100e3e:	f006 ff93 	bl	8107d68 <memset>

  /*Start ADC1 in continous conversion mode*/
  ADC1->CFGR |= ADC_CFGR_CONT;
 8100e42:	4b5a      	ldr	r3, [pc, #360]	; (8100fac <main+0x21c>)
 8100e44:	68db      	ldr	r3, [r3, #12]
 8100e46:	4a59      	ldr	r2, [pc, #356]	; (8100fac <main+0x21c>)
 8100e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8100e4c:	60d3      	str	r3, [r2, #12]
  ADC1->CR |= ADC_CR_ADSTART;
 8100e4e:	4b57      	ldr	r3, [pc, #348]	; (8100fac <main+0x21c>)
 8100e50:	689b      	ldr	r3, [r3, #8]
 8100e52:	4a56      	ldr	r2, [pc, #344]	; (8100fac <main+0x21c>)
 8100e54:	f043 0304 	orr.w	r3, r3, #4
 8100e58:	6093      	str	r3, [r2, #8]
  /*Init LSM9DS1 sensor(gyro,mag,acceleration) connected to I2C4 bus*/
  LSM9DS1_Init(&hi2c4);
 8100e5a:	4855      	ldr	r0, [pc, #340]	; (8100fb0 <main+0x220>)
 8100e5c:	f000 fb2e 	bl	81014bc <LSM9DS1_Init>
  /*Init HDC1080 temperature and humidity sensor connected to I2C4 bus*/
  hdc1080_init(&hi2c4, 0, 0);
 8100e60:	2200      	movs	r2, #0
 8100e62:	2100      	movs	r1, #0
 8100e64:	4852      	ldr	r0, [pc, #328]	; (8100fb0 <main+0x220>)
 8100e66:	f000 fa61 	bl	810132c <hdc1080_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Read data from LSM9DS1 sensor and fill them to share struct between M4 and M7*/
	  LSM9DS1_ReadGyr(&hi2c4,&m4_to_m7_ptr->gyro_x,&m4_to_m7_ptr->gyro_y,&m4_to_m7_ptr->gyro_z);
 8100e6a:	4b4e      	ldr	r3, [pc, #312]	; (8100fa4 <main+0x214>)
 8100e6c:	f503 71f8 	add.w	r1, r3, #496	; 0x1f0
 8100e70:	4b4c      	ldr	r3, [pc, #304]	; (8100fa4 <main+0x214>)
 8100e72:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8100e76:	4b4b      	ldr	r3, [pc, #300]	; (8100fa4 <main+0x214>)
 8100e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8100e7c:	484c      	ldr	r0, [pc, #304]	; (8100fb0 <main+0x220>)
 8100e7e:	f000 fbff 	bl	8101680 <LSM9DS1_ReadGyr>
	  LSM9DS1_ReadMag(&hi2c4, &m4_to_m7_ptr->mag_x, &m4_to_m7_ptr->mag_y, &m4_to_m7_ptr->mag_z);
 8100e82:	4b48      	ldr	r3, [pc, #288]	; (8100fa4 <main+0x214>)
 8100e84:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8100e88:	4b46      	ldr	r3, [pc, #280]	; (8100fa4 <main+0x214>)
 8100e8a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8100e8e:	4b45      	ldr	r3, [pc, #276]	; (8100fa4 <main+0x214>)
 8100e90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8100e94:	4846      	ldr	r0, [pc, #280]	; (8100fb0 <main+0x220>)
 8100e96:	f000 fd1f 	bl	81018d8 <LSM9DS1_ReadMag>
	  LSM9DS1_ReadAcc(&hi2c4, &m4_to_m7_ptr->accel_x,&m4_to_m7_ptr->accel_y, &m4_to_m7_ptr->accel_z);
 8100e9a:	4b42      	ldr	r3, [pc, #264]	; (8100fa4 <main+0x214>)
 8100e9c:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 8100ea0:	4b40      	ldr	r3, [pc, #256]	; (8100fa4 <main+0x214>)
 8100ea2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8100ea6:	4b3f      	ldr	r3, [pc, #252]	; (8100fa4 <main+0x214>)
 8100ea8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8100eac:	4840      	ldr	r0, [pc, #256]	; (8100fb0 <main+0x220>)
 8100eae:	f000 fc7f 	bl	81017b0 <LSM9DS1_ReadAcc>

	  /*Read data from ADC1 (potentiometer value)*/
	  m4_to_m7_ptr->potlevel = (((float)ADC1->DR/65535.0)*3.3);
 8100eb2:	4b3e      	ldr	r3, [pc, #248]	; (8100fac <main+0x21c>)
 8100eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8100eb6:	ee07 3a90 	vmov	s15, r3
 8100eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ebe:	ee17 0a90 	vmov	r0, s15
 8100ec2:	f7ff fbc9 	bl	8100658 <__aeabi_f2d>
 8100ec6:	a32e      	add	r3, pc, #184	; (adr r3, 8100f80 <main+0x1f0>)
 8100ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100ecc:	f7ff fd46 	bl	810095c <__aeabi_ddiv>
 8100ed0:	4602      	mov	r2, r0
 8100ed2:	460b      	mov	r3, r1
 8100ed4:	4610      	mov	r0, r2
 8100ed6:	4619      	mov	r1, r3
 8100ed8:	a32b      	add	r3, pc, #172	; (adr r3, 8100f88 <main+0x1f8>)
 8100eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100ede:	f7ff fc13 	bl	8100708 <__aeabi_dmul>
 8100ee2:	4602      	mov	r2, r0
 8100ee4:	460b      	mov	r3, r1
 8100ee6:	4c2f      	ldr	r4, [pc, #188]	; (8100fa4 <main+0x214>)
 8100ee8:	4610      	mov	r0, r2
 8100eea:	4619      	mov	r1, r3
 8100eec:	f7ff fee4 	bl	8100cb8 <__aeabi_d2f>
 8100ef0:	4603      	mov	r3, r0
 8100ef2:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
	  /*Read teamperature and preassure data and fill them to shared struct*/
	  hdc1080_start_measurement(&hi2c4, &m4_to_m7_ptr->temperature[59], &m4_to_m7_ptr->pressure[59]);
 8100ef6:	4b2b      	ldr	r3, [pc, #172]	; (8100fa4 <main+0x214>)
 8100ef8:	33ec      	adds	r3, #236	; 0xec
 8100efa:	4a2a      	ldr	r2, [pc, #168]	; (8100fa4 <main+0x214>)
 8100efc:	f502 72ee 	add.w	r2, r2, #476	; 0x1dc
 8100f00:	4619      	mov	r1, r3
 8100f02:	482b      	ldr	r0, [pc, #172]	; (8100fb0 <main+0x220>)
 8100f04:	f000 fa50 	bl	81013a8 <hdc1080_start_measurement>

	  /*Set values of CCR registers (dutycycle) according to value from shared struct*/
	  TIM1->CCR1 = m7_to_m4_ptr->rgb_r;
 8100f08:	4b27      	ldr	r3, [pc, #156]	; (8100fa8 <main+0x218>)
 8100f0a:	4a2a      	ldr	r2, [pc, #168]	; (8100fb4 <main+0x224>)
 8100f0c:	681b      	ldr	r3, [r3, #0]
 8100f0e:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = m7_to_m4_ptr->rgb_g;
 8100f10:	4b25      	ldr	r3, [pc, #148]	; (8100fa8 <main+0x218>)
 8100f12:	4a28      	ldr	r2, [pc, #160]	; (8100fb4 <main+0x224>)
 8100f14:	685b      	ldr	r3, [r3, #4]
 8100f16:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3 = m7_to_m4_ptr->rgb_b;
 8100f18:	4b23      	ldr	r3, [pc, #140]	; (8100fa8 <main+0x218>)
 8100f1a:	4a26      	ldr	r2, [pc, #152]	; (8100fb4 <main+0x224>)
 8100f1c:	689b      	ldr	r3, [r3, #8]
 8100f1e:	63d3      	str	r3, [r2, #60]	; 0x3c

	  /*Toggle logic state of white led*/
	  if(m7_to_m4_ptr->w_led_status != 0)
 8100f20:	4b21      	ldr	r3, [pc, #132]	; (8100fa8 <main+0x218>)
 8100f22:	7b1b      	ldrb	r3, [r3, #12]
 8100f24:	b2db      	uxtb	r3, r3
 8100f26:	2b00      	cmp	r3, #0
 8100f28:	d006      	beq.n	8100f38 <main+0x1a8>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8100f2a:	2201      	movs	r2, #1
 8100f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100f30:	4821      	ldr	r0, [pc, #132]	; (8100fb8 <main+0x228>)
 8100f32:	f002 fd97 	bl	8103a64 <HAL_GPIO_WritePin>
 8100f36:	e005      	b.n	8100f44 <main+0x1b4>
	  else
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8100f38:	2200      	movs	r2, #0
 8100f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100f3e:	481e      	ldr	r0, [pc, #120]	; (8100fb8 <main+0x228>)
 8100f40:	f002 fd90 	bl	8103a64 <HAL_GPIO_WritePin>
	  /*Confirmation of CCR values and led state value filled in shared struct (to check on websever wheater right value was set)*/
	  m4_to_m7_ptr->led_r = TIM1->CCR1;
 8100f44:	4b1b      	ldr	r3, [pc, #108]	; (8100fb4 <main+0x224>)
 8100f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8100f48:	4b16      	ldr	r3, [pc, #88]	; (8100fa4 <main+0x214>)
 8100f4a:	b2d2      	uxtb	r2, r2
 8100f4c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	  m4_to_m7_ptr->led_g = TIM1->CCR2;
 8100f50:	4b18      	ldr	r3, [pc, #96]	; (8100fb4 <main+0x224>)
 8100f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8100f54:	4b13      	ldr	r3, [pc, #76]	; (8100fa4 <main+0x214>)
 8100f56:	b2d2      	uxtb	r2, r2
 8100f58:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	  m4_to_m7_ptr->led_b = TIM1->CCR3;
 8100f5c:	4b15      	ldr	r3, [pc, #84]	; (8100fb4 <main+0x224>)
 8100f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8100f60:	4b10      	ldr	r3, [pc, #64]	; (8100fa4 <main+0x214>)
 8100f62:	b2d2      	uxtb	r2, r2
 8100f64:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	  m4_to_m7_ptr->led_w = m7_to_m4_ptr->w_led_status;
 8100f68:	4a0f      	ldr	r2, [pc, #60]	; (8100fa8 <main+0x218>)
 8100f6a:	4b0e      	ldr	r3, [pc, #56]	; (8100fa4 <main+0x214>)
 8100f6c:	7b12      	ldrb	r2, [r2, #12]
 8100f6e:	b2d2      	uxtb	r2, r2
 8100f70:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b

	  /*Delay 100ms*/
	  HAL_Delay(100);
 8100f74:	2064      	movs	r0, #100	; 0x64
 8100f76:	f001 f883 	bl	8102080 <HAL_Delay>
  {
 8100f7a:	e776      	b.n	8100e6a <main+0xda>
 8100f7c:	f3af 8000 	nop.w
 8100f80:	00000000 	.word	0x00000000
 8100f84:	40efffe0 	.word	0x40efffe0
 8100f88:	66666666 	.word	0x66666666
 8100f8c:	400a6666 	.word	0x400a6666
 8100f90:	58024400 	.word	0x58024400
 8100f94:	e000ed00 	.word	0xe000ed00
 8100f98:	58026400 	.word	0x58026400
 8100f9c:	100001fc 	.word	0x100001fc
 8100fa0:	100002ac 	.word	0x100002ac
 8100fa4:	30040a00 	.word	0x30040a00
 8100fa8:	30040d00 	.word	0x30040d00
 8100fac:	40022000 	.word	0x40022000
 8100fb0:	10000260 	.word	0x10000260
 8100fb4:	40010000 	.word	0x40010000
 8100fb8:	58020c00 	.word	0x58020c00

08100fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100fbc:	b580      	push	{r7, lr}
 8100fbe:	b08a      	sub	sp, #40	; 0x28
 8100fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fc2:	f107 031c 	add.w	r3, r7, #28
 8100fc6:	2200      	movs	r2, #0
 8100fc8:	601a      	str	r2, [r3, #0]
 8100fca:	605a      	str	r2, [r3, #4]
 8100fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100fce:	463b      	mov	r3, r7
 8100fd0:	2200      	movs	r2, #0
 8100fd2:	601a      	str	r2, [r3, #0]
 8100fd4:	605a      	str	r2, [r3, #4]
 8100fd6:	609a      	str	r2, [r3, #8]
 8100fd8:	60da      	str	r2, [r3, #12]
 8100fda:	611a      	str	r2, [r3, #16]
 8100fdc:	615a      	str	r2, [r3, #20]
 8100fde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8100fe0:	4b30      	ldr	r3, [pc, #192]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100fe2:	4a31      	ldr	r2, [pc, #196]	; (81010a8 <MX_ADC1_Init+0xec>)
 8100fe4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100fe6:	4b2f      	ldr	r3, [pc, #188]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100fe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8100fec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100fee:	4b2d      	ldr	r3, [pc, #180]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ff0:	2200      	movs	r2, #0
 8100ff2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100ff4:	4b2b      	ldr	r3, [pc, #172]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ff6:	2200      	movs	r2, #0
 8100ff8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100ffa:	4b2a      	ldr	r3, [pc, #168]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ffc:	2204      	movs	r2, #4
 8100ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101000:	4b28      	ldr	r3, [pc, #160]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101002:	2200      	movs	r2, #0
 8101004:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101006:	4b27      	ldr	r3, [pc, #156]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101008:	2200      	movs	r2, #0
 810100a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810100c:	4b25      	ldr	r3, [pc, #148]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810100e:	2201      	movs	r2, #1
 8101010:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101012:	4b24      	ldr	r3, [pc, #144]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101014:	2200      	movs	r2, #0
 8101016:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101018:	4b22      	ldr	r3, [pc, #136]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810101a:	2200      	movs	r2, #0
 810101c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810101e:	4b21      	ldr	r3, [pc, #132]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101020:	2200      	movs	r2, #0
 8101022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101024:	4b1f      	ldr	r3, [pc, #124]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101026:	2200      	movs	r2, #0
 8101028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810102a:	4b1e      	ldr	r3, [pc, #120]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810102c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8101030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101032:	4b1c      	ldr	r3, [pc, #112]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101034:	2200      	movs	r2, #0
 8101036:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101038:	4b1a      	ldr	r3, [pc, #104]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810103a:	2200      	movs	r2, #0
 810103c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101040:	4818      	ldr	r0, [pc, #96]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101042:	f001 fa0f 	bl	8102464 <HAL_ADC_Init>
 8101046:	4603      	mov	r3, r0
 8101048:	2b00      	cmp	r3, #0
 810104a:	d001      	beq.n	8101050 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 810104c:	f000 f94e 	bl	81012ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101050:	2300      	movs	r3, #0
 8101052:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101054:	f107 031c 	add.w	r3, r7, #28
 8101058:	4619      	mov	r1, r3
 810105a:	4812      	ldr	r0, [pc, #72]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810105c:	f002 f978 	bl	8103350 <HAL_ADCEx_MultiModeConfigChannel>
 8101060:	4603      	mov	r3, r0
 8101062:	2b00      	cmp	r3, #0
 8101064:	d001      	beq.n	810106a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8101066:	f000 f941 	bl	81012ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 810106a:	4b10      	ldr	r3, [pc, #64]	; (81010ac <MX_ADC1_Init+0xf0>)
 810106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810106e:	2306      	movs	r3, #6
 8101070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101072:	2300      	movs	r3, #0
 8101074:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101076:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810107a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810107c:	2304      	movs	r3, #4
 810107e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101080:	2300      	movs	r3, #0
 8101082:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101084:	2300      	movs	r3, #0
 8101086:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101088:	463b      	mov	r3, r7
 810108a:	4619      	mov	r1, r3
 810108c:	4805      	ldr	r0, [pc, #20]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810108e:	f001 fc55 	bl	810293c <HAL_ADC_ConfigChannel>
 8101092:	4603      	mov	r3, r0
 8101094:	2b00      	cmp	r3, #0
 8101096:	d001      	beq.n	810109c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8101098:	f000 f928 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810109c:	bf00      	nop
 810109e:	3728      	adds	r7, #40	; 0x28
 81010a0:	46bd      	mov	sp, r7
 81010a2:	bd80      	pop	{r7, pc}
 81010a4:	100001fc 	.word	0x100001fc
 81010a8:	40022000 	.word	0x40022000
 81010ac:	3ef08000 	.word	0x3ef08000

081010b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81010b0:	b580      	push	{r7, lr}
 81010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81010b4:	4b1b      	ldr	r3, [pc, #108]	; (8101124 <MX_I2C4_Init+0x74>)
 81010b6:	4a1c      	ldr	r2, [pc, #112]	; (8101128 <MX_I2C4_Init+0x78>)
 81010b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81010ba:	4b1a      	ldr	r3, [pc, #104]	; (8101124 <MX_I2C4_Init+0x74>)
 81010bc:	4a1b      	ldr	r2, [pc, #108]	; (810112c <MX_I2C4_Init+0x7c>)
 81010be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81010c0:	4b18      	ldr	r3, [pc, #96]	; (8101124 <MX_I2C4_Init+0x74>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81010c6:	4b17      	ldr	r3, [pc, #92]	; (8101124 <MX_I2C4_Init+0x74>)
 81010c8:	2201      	movs	r2, #1
 81010ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81010cc:	4b15      	ldr	r3, [pc, #84]	; (8101124 <MX_I2C4_Init+0x74>)
 81010ce:	2200      	movs	r2, #0
 81010d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81010d2:	4b14      	ldr	r3, [pc, #80]	; (8101124 <MX_I2C4_Init+0x74>)
 81010d4:	2200      	movs	r2, #0
 81010d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81010d8:	4b12      	ldr	r3, [pc, #72]	; (8101124 <MX_I2C4_Init+0x74>)
 81010da:	2200      	movs	r2, #0
 81010dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81010de:	4b11      	ldr	r3, [pc, #68]	; (8101124 <MX_I2C4_Init+0x74>)
 81010e0:	2200      	movs	r2, #0
 81010e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81010e4:	4b0f      	ldr	r3, [pc, #60]	; (8101124 <MX_I2C4_Init+0x74>)
 81010e6:	2200      	movs	r2, #0
 81010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81010ea:	480e      	ldr	r0, [pc, #56]	; (8101124 <MX_I2C4_Init+0x74>)
 81010ec:	f002 fce6 	bl	8103abc <HAL_I2C_Init>
 81010f0:	4603      	mov	r3, r0
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	d001      	beq.n	81010fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 81010f6:	f000 f8f9 	bl	81012ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81010fa:	2100      	movs	r1, #0
 81010fc:	4809      	ldr	r0, [pc, #36]	; (8101124 <MX_I2C4_Init+0x74>)
 81010fe:	f003 fa9f 	bl	8104640 <HAL_I2CEx_ConfigAnalogFilter>
 8101102:	4603      	mov	r3, r0
 8101104:	2b00      	cmp	r3, #0
 8101106:	d001      	beq.n	810110c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8101108:	f000 f8f0 	bl	81012ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 810110c:	2100      	movs	r1, #0
 810110e:	4805      	ldr	r0, [pc, #20]	; (8101124 <MX_I2C4_Init+0x74>)
 8101110:	f003 fae1 	bl	81046d6 <HAL_I2CEx_ConfigDigitalFilter>
 8101114:	4603      	mov	r3, r0
 8101116:	2b00      	cmp	r3, #0
 8101118:	d001      	beq.n	810111e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 810111a:	f000 f8e7 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 810111e:	bf00      	nop
 8101120:	bd80      	pop	{r7, pc}
 8101122:	bf00      	nop
 8101124:	10000260 	.word	0x10000260
 8101128:	58001c00 	.word	0x58001c00
 810112c:	10c0ecff 	.word	0x10c0ecff

08101130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b096      	sub	sp, #88	; 0x58
 8101134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101136:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810113a:	2200      	movs	r2, #0
 810113c:	601a      	str	r2, [r3, #0]
 810113e:	605a      	str	r2, [r3, #4]
 8101140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101146:	2200      	movs	r2, #0
 8101148:	601a      	str	r2, [r3, #0]
 810114a:	605a      	str	r2, [r3, #4]
 810114c:	609a      	str	r2, [r3, #8]
 810114e:	60da      	str	r2, [r3, #12]
 8101150:	611a      	str	r2, [r3, #16]
 8101152:	615a      	str	r2, [r3, #20]
 8101154:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101156:	1d3b      	adds	r3, r7, #4
 8101158:	222c      	movs	r2, #44	; 0x2c
 810115a:	2100      	movs	r1, #0
 810115c:	4618      	mov	r0, r3
 810115e:	f006 fe03 	bl	8107d68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101162:	4b44      	ldr	r3, [pc, #272]	; (8101274 <MX_TIM1_Init+0x144>)
 8101164:	4a44      	ldr	r2, [pc, #272]	; (8101278 <MX_TIM1_Init+0x148>)
 8101166:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8101168:	4b42      	ldr	r3, [pc, #264]	; (8101274 <MX_TIM1_Init+0x144>)
 810116a:	2200      	movs	r2, #0
 810116c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810116e:	4b41      	ldr	r3, [pc, #260]	; (8101274 <MX_TIM1_Init+0x144>)
 8101170:	2200      	movs	r2, #0
 8101172:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8101174:	4b3f      	ldr	r3, [pc, #252]	; (8101274 <MX_TIM1_Init+0x144>)
 8101176:	22ff      	movs	r2, #255	; 0xff
 8101178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810117a:	4b3e      	ldr	r3, [pc, #248]	; (8101274 <MX_TIM1_Init+0x144>)
 810117c:	2200      	movs	r2, #0
 810117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101180:	4b3c      	ldr	r3, [pc, #240]	; (8101274 <MX_TIM1_Init+0x144>)
 8101182:	2200      	movs	r2, #0
 8101184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101186:	4b3b      	ldr	r3, [pc, #236]	; (8101274 <MX_TIM1_Init+0x144>)
 8101188:	2200      	movs	r2, #0
 810118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810118c:	4839      	ldr	r0, [pc, #228]	; (8101274 <MX_TIM1_Init+0x144>)
 810118e:	f005 feaf 	bl	8106ef0 <HAL_TIM_PWM_Init>
 8101192:	4603      	mov	r3, r0
 8101194:	2b00      	cmp	r3, #0
 8101196:	d001      	beq.n	810119c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8101198:	f000 f8a8 	bl	81012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810119c:	2300      	movs	r3, #0
 810119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81011a0:	2300      	movs	r3, #0
 81011a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81011a4:	2300      	movs	r3, #0
 81011a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81011ac:	4619      	mov	r1, r3
 81011ae:	4831      	ldr	r0, [pc, #196]	; (8101274 <MX_TIM1_Init+0x144>)
 81011b0:	f006 fc9c 	bl	8107aec <HAL_TIMEx_MasterConfigSynchronization>
 81011b4:	4603      	mov	r3, r0
 81011b6:	2b00      	cmp	r3, #0
 81011b8:	d001      	beq.n	81011be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 81011ba:	f000 f897 	bl	81012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81011be:	2360      	movs	r3, #96	; 0x60
 81011c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 81011c2:	2300      	movs	r3, #0
 81011c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81011c6:	2300      	movs	r3, #0
 81011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81011ca:	2300      	movs	r3, #0
 81011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81011ce:	2300      	movs	r3, #0
 81011d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81011d2:	2300      	movs	r3, #0
 81011d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81011d6:	2300      	movs	r3, #0
 81011d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81011da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81011de:	2200      	movs	r2, #0
 81011e0:	4619      	mov	r1, r3
 81011e2:	4824      	ldr	r0, [pc, #144]	; (8101274 <MX_TIM1_Init+0x144>)
 81011e4:	f005 ffe4 	bl	81071b0 <HAL_TIM_PWM_ConfigChannel>
 81011e8:	4603      	mov	r3, r0
 81011ea:	2b00      	cmp	r3, #0
 81011ec:	d001      	beq.n	81011f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 81011ee:	f000 f87d 	bl	81012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81011f6:	2204      	movs	r2, #4
 81011f8:	4619      	mov	r1, r3
 81011fa:	481e      	ldr	r0, [pc, #120]	; (8101274 <MX_TIM1_Init+0x144>)
 81011fc:	f005 ffd8 	bl	81071b0 <HAL_TIM_PWM_ConfigChannel>
 8101200:	4603      	mov	r3, r0
 8101202:	2b00      	cmp	r3, #0
 8101204:	d001      	beq.n	810120a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8101206:	f000 f871 	bl	81012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810120a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810120e:	2208      	movs	r2, #8
 8101210:	4619      	mov	r1, r3
 8101212:	4818      	ldr	r0, [pc, #96]	; (8101274 <MX_TIM1_Init+0x144>)
 8101214:	f005 ffcc 	bl	81071b0 <HAL_TIM_PWM_ConfigChannel>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 810121e:	f000 f865 	bl	81012ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101222:	2300      	movs	r3, #0
 8101224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101226:	2300      	movs	r3, #0
 8101228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810122a:	2300      	movs	r3, #0
 810122c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810122e:	2300      	movs	r3, #0
 8101230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101232:	2300      	movs	r3, #0
 8101234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810123a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810123c:	2300      	movs	r3, #0
 810123e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101240:	2300      	movs	r3, #0
 8101242:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101248:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810124a:	2300      	movs	r3, #0
 810124c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810124e:	2300      	movs	r3, #0
 8101250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101252:	1d3b      	adds	r3, r7, #4
 8101254:	4619      	mov	r1, r3
 8101256:	4807      	ldr	r0, [pc, #28]	; (8101274 <MX_TIM1_Init+0x144>)
 8101258:	f006 fcd0 	bl	8107bfc <HAL_TIMEx_ConfigBreakDeadTime>
 810125c:	4603      	mov	r3, r0
 810125e:	2b00      	cmp	r3, #0
 8101260:	d001      	beq.n	8101266 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8101262:	f000 f843 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101266:	4803      	ldr	r0, [pc, #12]	; (8101274 <MX_TIM1_Init+0x144>)
 8101268:	f000 fcde 	bl	8101c28 <HAL_TIM_MspPostInit>

}
 810126c:	bf00      	nop
 810126e:	3758      	adds	r7, #88	; 0x58
 8101270:	46bd      	mov	sp, r7
 8101272:	bd80      	pop	{r7, pc}
 8101274:	100002ac 	.word	0x100002ac
 8101278:	40010000 	.word	0x40010000

0810127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810127c:	b480      	push	{r7}
 810127e:	b085      	sub	sp, #20
 8101280:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101282:	4b19      	ldr	r3, [pc, #100]	; (81012e8 <MX_GPIO_Init+0x6c>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	4a17      	ldr	r2, [pc, #92]	; (81012e8 <MX_GPIO_Init+0x6c>)
 810128a:	f043 0301 	orr.w	r3, r3, #1
 810128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101292:	4b15      	ldr	r3, [pc, #84]	; (81012e8 <MX_GPIO_Init+0x6c>)
 8101294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101298:	f003 0301 	and.w	r3, r3, #1
 810129c:	60fb      	str	r3, [r7, #12]
 810129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81012a0:	4b11      	ldr	r3, [pc, #68]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	4a10      	ldr	r2, [pc, #64]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012a8:	f043 0310 	orr.w	r3, r3, #16
 81012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b0:	4b0d      	ldr	r3, [pc, #52]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b6:	f003 0310 	and.w	r3, r3, #16
 81012ba:	60bb      	str	r3, [r7, #8]
 81012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012be:	4b0a      	ldr	r3, [pc, #40]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c4:	4a08      	ldr	r2, [pc, #32]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012c6:	f043 0302 	orr.w	r3, r3, #2
 81012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ce:	4b06      	ldr	r3, [pc, #24]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d4:	f003 0302 	and.w	r3, r3, #2
 81012d8:	607b      	str	r3, [r7, #4]
 81012da:	687b      	ldr	r3, [r7, #4]

}
 81012dc:	bf00      	nop
 81012de:	3714      	adds	r7, #20
 81012e0:	46bd      	mov	sp, r7
 81012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e6:	4770      	bx	lr
 81012e8:	58024400 	.word	0x58024400

081012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81012ec:	b480      	push	{r7}
 81012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81012f0:	b672      	cpsid	i
}
 81012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81012f4:	e7fe      	b.n	81012f4 <Error_Handler+0x8>

081012f6 <getSignedVal>:
#include "sensor.h"
#include "math.h"

#include "hdc1080.h"

int16_t getSignedVal(uint8_t val_l, uint8_t val_h){
 81012f6:	b480      	push	{r7}
 81012f8:	b085      	sub	sp, #20
 81012fa:	af00      	add	r7, sp, #0
 81012fc:	4603      	mov	r3, r0
 81012fe:	460a      	mov	r2, r1
 8101300:	71fb      	strb	r3, [r7, #7]
 8101302:	4613      	mov	r3, r2
 8101304:	71bb      	strb	r3, [r7, #6]
	uint16_t value = (((val_h << 8) & 0xff00) | (val_l & 0xff) );
 8101306:	79bb      	ldrb	r3, [r7, #6]
 8101308:	021b      	lsls	r3, r3, #8
 810130a:	b21a      	sxth	r2, r3
 810130c:	79fb      	ldrb	r3, [r7, #7]
 810130e:	b21b      	sxth	r3, r3
 8101310:	4313      	orrs	r3, r2
 8101312:	b21b      	sxth	r3, r3
 8101314:	b29b      	uxth	r3, r3
 8101316:	81fb      	strh	r3, [r7, #14]
	return *(int16_t*) &value;
 8101318:	f107 030e 	add.w	r3, r7, #14
 810131c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8101320:	4618      	mov	r0, r3
 8101322:	3714      	adds	r7, #20
 8101324:	46bd      	mov	sp, r7
 8101326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810132a:	4770      	bx	lr

0810132c <hdc1080_init>:

void hdc1080_init(I2C_HandleTypeDef* hi2c_x,Temp_Reso Temperature_Resolution_x_bit,Humi_Reso Humidity_Resolution_x_bit)
{
 810132c:	b580      	push	{r7, lr}
 810132e:	b088      	sub	sp, #32
 8101330:	af04      	add	r7, sp, #16
 8101332:	6078      	str	r0, [r7, #4]
 8101334:	460b      	mov	r3, r1
 8101336:	70fb      	strb	r3, [r7, #3]
 8101338:	4613      	mov	r3, r2
 810133a:	70bb      	strb	r3, [r7, #2]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 810133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101340:	81fb      	strh	r3, [r7, #14]
	uint8_t data_send[2];

	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit)
 8101342:	78fb      	ldrb	r3, [r7, #3]
 8101344:	2b01      	cmp	r3, #1
 8101346:	d103      	bne.n	8101350 <hdc1080_init+0x24>
	{
		config_reg_value |= (1<<10); //11 bit
 8101348:	89fb      	ldrh	r3, [r7, #14]
 810134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810134e:	81fb      	strh	r3, [r7, #14]
	}

	switch(Humidity_Resolution_x_bit)
 8101350:	78bb      	ldrb	r3, [r7, #2]
 8101352:	2b01      	cmp	r3, #1
 8101354:	d002      	beq.n	810135c <hdc1080_init+0x30>
 8101356:	2b02      	cmp	r3, #2
 8101358:	d005      	beq.n	8101366 <hdc1080_init+0x3a>
 810135a:	e009      	b.n	8101370 <hdc1080_init+0x44>
	{
	case Humidity_Resolution_11_bit:
		config_reg_value|= (1<<8);
 810135c:	89fb      	ldrh	r3, [r7, #14]
 810135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101362:	81fb      	strh	r3, [r7, #14]
		break;
 8101364:	e004      	b.n	8101370 <hdc1080_init+0x44>
	case Humidity_Resolution_8_bit:
		config_reg_value|= (1<<9);
 8101366:	89fb      	ldrh	r3, [r7, #14]
 8101368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810136c:	81fb      	strh	r3, [r7, #14]
		break;
 810136e:	bf00      	nop
	}

	data_send[0]= (config_reg_value>>8);
 8101370:	89fb      	ldrh	r3, [r7, #14]
 8101372:	0a1b      	lsrs	r3, r3, #8
 8101374:	b29b      	uxth	r3, r3
 8101376:	b2db      	uxtb	r3, r3
 8101378:	733b      	strb	r3, [r7, #12]
	data_send[1]= (config_reg_value&0x00ff);
 810137a:	89fb      	ldrh	r3, [r7, #14]
 810137c:	b2db      	uxtb	r3, r3
 810137e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c_x,HDC_1080_ADD<<1,Configuration_register_add,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 8101380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101384:	9302      	str	r3, [sp, #8]
 8101386:	2302      	movs	r3, #2
 8101388:	9301      	str	r3, [sp, #4]
 810138a:	f107 030c 	add.w	r3, r7, #12
 810138e:	9300      	str	r3, [sp, #0]
 8101390:	2301      	movs	r3, #1
 8101392:	2202      	movs	r2, #2
 8101394:	2180      	movs	r1, #128	; 0x80
 8101396:	6878      	ldr	r0, [r7, #4]
 8101398:	f002 fe0a 	bl	8103fb0 <HAL_I2C_Mem_Write>
}
 810139c:	bf00      	nop
 810139e:	3710      	adds	r7, #16
 81013a0:	46bd      	mov	sp, r7
 81013a2:	bd80      	pop	{r7, pc}
 81013a4:	0000      	movs	r0, r0
	...

081013a8 <hdc1080_start_measurement>:


uint8_t hdc1080_start_measurement(I2C_HandleTypeDef* hi2c_x,float* temperature, float* humidity)
{
 81013a8:	b580      	push	{r7, lr}
 81013aa:	b08a      	sub	sp, #40	; 0x28
 81013ac:	af02      	add	r7, sp, #8
 81013ae:	60f8      	str	r0, [r7, #12]
 81013b0:	60b9      	str	r1, [r7, #8]
 81013b2:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = Temperature_register_add;
 81013b4:	2300      	movs	r3, #0
 81013b6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c_x,HDC_1080_ADD<<1,&send_data,1,1000);
 81013b8:	f107 0217 	add.w	r2, r7, #23
 81013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013c0:	9300      	str	r3, [sp, #0]
 81013c2:	2301      	movs	r3, #1
 81013c4:	2180      	movs	r1, #128	; 0x80
 81013c6:	68f8      	ldr	r0, [r7, #12]
 81013c8:	f002 fc08 	bl	8103bdc <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 81013cc:	200f      	movs	r0, #15
 81013ce:	f000 fe57 	bl	8102080 <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(hi2c_x,HDC_1080_ADD<<1,receive_data,4,1000);
 81013d2:	f107 0218 	add.w	r2, r7, #24
 81013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013da:	9300      	str	r3, [sp, #0]
 81013dc:	2304      	movs	r3, #4
 81013de:	2180      	movs	r1, #128	; 0x80
 81013e0:	68f8      	ldr	r0, [r7, #12]
 81013e2:	f002 fcef 	bl	8103dc4 <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0]<<8)|receive_data[1]);
 81013e6:	7e3b      	ldrb	r3, [r7, #24]
 81013e8:	021b      	lsls	r3, r3, #8
 81013ea:	b21a      	sxth	r2, r3
 81013ec:	7e7b      	ldrb	r3, [r7, #25]
 81013ee:	b21b      	sxth	r3, r3
 81013f0:	4313      	orrs	r3, r2
 81013f2:	b21b      	sxth	r3, r3
 81013f4:	83fb      	strh	r3, [r7, #30]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 81013f6:	7ebb      	ldrb	r3, [r7, #26]
 81013f8:	021b      	lsls	r3, r3, #8
 81013fa:	b21a      	sxth	r2, r3
 81013fc:	7efb      	ldrb	r3, [r7, #27]
 81013fe:	b21b      	sxth	r3, r3
 8101400:	4313      	orrs	r3, r2
 8101402:	b21b      	sxth	r3, r3
 8101404:	83bb      	strh	r3, [r7, #28]

	*temperature=(((temp_x/65535.0)*165.0)-40.0)-6;
 8101406:	8bfb      	ldrh	r3, [r7, #30]
 8101408:	4618      	mov	r0, r3
 810140a:	f7ff f913 	bl	8100634 <__aeabi_i2d>
 810140e:	a324      	add	r3, pc, #144	; (adr r3, 81014a0 <hdc1080_start_measurement+0xf8>)
 8101410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101414:	f7ff faa2 	bl	810095c <__aeabi_ddiv>
 8101418:	4602      	mov	r2, r0
 810141a:	460b      	mov	r3, r1
 810141c:	4610      	mov	r0, r2
 810141e:	4619      	mov	r1, r3
 8101420:	a324      	add	r3, pc, #144	; (adr r3, 81014b4 <hdc1080_start_measurement+0x10c>)
 8101422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101426:	f7ff f96f 	bl	8100708 <__aeabi_dmul>
 810142a:	4602      	mov	r2, r0
 810142c:	460b      	mov	r3, r1
 810142e:	4610      	mov	r0, r2
 8101430:	4619      	mov	r1, r3
 8101432:	f04f 0200 	mov.w	r2, #0
 8101436:	4b1c      	ldr	r3, [pc, #112]	; (81014a8 <hdc1080_start_measurement+0x100>)
 8101438:	f7fe ffae 	bl	8100398 <__aeabi_dsub>
 810143c:	4602      	mov	r2, r0
 810143e:	460b      	mov	r3, r1
 8101440:	4610      	mov	r0, r2
 8101442:	4619      	mov	r1, r3
 8101444:	f04f 0200 	mov.w	r2, #0
 8101448:	4b18      	ldr	r3, [pc, #96]	; (81014ac <hdc1080_start_measurement+0x104>)
 810144a:	f7fe ffa5 	bl	8100398 <__aeabi_dsub>
 810144e:	4602      	mov	r2, r0
 8101450:	460b      	mov	r3, r1
 8101452:	4610      	mov	r0, r2
 8101454:	4619      	mov	r1, r3
 8101456:	f7ff fc2f 	bl	8100cb8 <__aeabi_d2f>
 810145a:	4602      	mov	r2, r0
 810145c:	68bb      	ldr	r3, [r7, #8]
 810145e:	601a      	str	r2, [r3, #0]
	*humidity=(float)((humi_x/65535.0)*100.0);
 8101460:	8bbb      	ldrh	r3, [r7, #28]
 8101462:	4618      	mov	r0, r3
 8101464:	f7ff f8e6 	bl	8100634 <__aeabi_i2d>
 8101468:	a30d      	add	r3, pc, #52	; (adr r3, 81014a0 <hdc1080_start_measurement+0xf8>)
 810146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810146e:	f7ff fa75 	bl	810095c <__aeabi_ddiv>
 8101472:	4602      	mov	r2, r0
 8101474:	460b      	mov	r3, r1
 8101476:	4610      	mov	r0, r2
 8101478:	4619      	mov	r1, r3
 810147a:	f04f 0200 	mov.w	r2, #0
 810147e:	4b0c      	ldr	r3, [pc, #48]	; (81014b0 <hdc1080_start_measurement+0x108>)
 8101480:	f7ff f942 	bl	8100708 <__aeabi_dmul>
 8101484:	4602      	mov	r2, r0
 8101486:	460b      	mov	r3, r1
 8101488:	4610      	mov	r0, r2
 810148a:	4619      	mov	r1, r3
 810148c:	f7ff fc14 	bl	8100cb8 <__aeabi_d2f>
 8101490:	4602      	mov	r2, r0
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	601a      	str	r2, [r3, #0]

	return 0;
 8101496:	2300      	movs	r3, #0

}
 8101498:	4618      	mov	r0, r3
 810149a:	3720      	adds	r7, #32
 810149c:	46bd      	mov	sp, r7
 810149e:	bd80      	pop	{r7, pc}
 81014a0:	00000000 	.word	0x00000000
 81014a4:	40efffe0 	.word	0x40efffe0
 81014a8:	40440000 	.word	0x40440000
 81014ac:	40180000 	.word	0x40180000
 81014b0:	40590000 	.word	0x40590000
 81014b4:	00000000 	.word	0x00000000
 81014b8:	4064a000 	.word	0x4064a000

081014bc <LSM9DS1_Init>:

void LSM9DS1_Init( I2C_HandleTypeDef * phi2c ) {
 81014bc:	b580      	push	{r7, lr}
 81014be:	b086      	sub	sp, #24
 81014c0:	af02      	add	r7, sp, #8
 81014c2:	6078      	str	r0, [r7, #4]

		uint8_t		i2c_buf[2];

	  //reset
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG8;
 81014c4:	2322      	movs	r3, #34	; 0x22
 81014c6:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x05;
 81014c8:	2305      	movs	r3, #5
 81014ca:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81014cc:	23d6      	movs	r3, #214	; 0xd6
 81014ce:	b299      	uxth	r1, r3
 81014d0:	f107 020c 	add.w	r2, r7, #12
 81014d4:	f04f 33ff 	mov.w	r3, #4294967295
 81014d8:	9300      	str	r3, [sp, #0]
 81014da:	2302      	movs	r3, #2
 81014dc:	6878      	ldr	r0, [r7, #4]
 81014de:	f002 fb7d 	bl	8103bdc <HAL_I2C_Master_Transmit>
 81014e2:	4603      	mov	r3, r0
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d001      	beq.n	81014ec <LSM9DS1_Init+0x30>
	  	Error_Handler();
 81014e8:	f7ff ff00 	bl	81012ec <Error_Handler>

	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG2_M;
 81014ec:	2321      	movs	r3, #33	; 0x21
 81014ee:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x0C;
 81014f0:	230c      	movs	r3, #12
 81014f2:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81014f4:	233c      	movs	r3, #60	; 0x3c
 81014f6:	b299      	uxth	r1, r3
 81014f8:	f107 020c 	add.w	r2, r7, #12
 81014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8101500:	9300      	str	r3, [sp, #0]
 8101502:	2302      	movs	r3, #2
 8101504:	6878      	ldr	r0, [r7, #4]
 8101506:	f002 fb69 	bl	8103bdc <HAL_I2C_Master_Transmit>
 810150a:	4603      	mov	r3, r0
 810150c:	2b00      	cmp	r3, #0
 810150e:	d001      	beq.n	8101514 <LSM9DS1_Init+0x58>
	  	Error_Handler();
 8101510:	f7ff feec 	bl	81012ec <Error_Handler>
	  HAL_Delay(10);
 8101514:	200a      	movs	r0, #10
 8101516:	f000 fdb3 	bl	8102080 <HAL_Delay>

	  //detection
	  i2c_buf[0] = LSM9DS1_AG_RG_WHO_AM_I;
 810151a:	230f      	movs	r3, #15
 810151c:	733b      	strb	r3, [r7, #12]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 810151e:	23d6      	movs	r3, #214	; 0xd6
 8101520:	b299      	uxth	r1, r3
 8101522:	f107 020c 	add.w	r2, r7, #12
 8101526:	f04f 33ff 	mov.w	r3, #4294967295
 810152a:	9300      	str	r3, [sp, #0]
 810152c:	2301      	movs	r3, #1
 810152e:	6878      	ldr	r0, [r7, #4]
 8101530:	f002 fb54 	bl	8103bdc <HAL_I2C_Master_Transmit>
 8101534:	4603      	mov	r3, r0
 8101536:	2b00      	cmp	r3, #0
 8101538:	d001      	beq.n	810153e <LSM9DS1_Init+0x82>
	  	Error_Handler();
 810153a:	f7ff fed7 	bl	81012ec <Error_Handler>
	  if( ( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY ) != HAL_OK ) || ( i2c_buf[0] != 0x68 ) )
 810153e:	23d6      	movs	r3, #214	; 0xd6
 8101540:	b299      	uxth	r1, r3
 8101542:	f107 020c 	add.w	r2, r7, #12
 8101546:	f04f 33ff 	mov.w	r3, #4294967295
 810154a:	9300      	str	r3, [sp, #0]
 810154c:	2301      	movs	r3, #1
 810154e:	6878      	ldr	r0, [r7, #4]
 8101550:	f002 fc38 	bl	8103dc4 <HAL_I2C_Master_Receive>
 8101554:	4603      	mov	r3, r0
 8101556:	2b00      	cmp	r3, #0
 8101558:	d102      	bne.n	8101560 <LSM9DS1_Init+0xa4>
 810155a:	7b3b      	ldrb	r3, [r7, #12]
 810155c:	2b68      	cmp	r3, #104	; 0x68
 810155e:	d001      	beq.n	8101564 <LSM9DS1_Init+0xa8>
	  	Error_Handler();
 8101560:	f7ff fec4 	bl	81012ec <Error_Handler>

	  i2c_buf[0] = LSM9DS1_MA_RG_WHO_AM_I_M;
 8101564:	230f      	movs	r3, #15
 8101566:	733b      	strb	r3, [r7, #12]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 8101568:	233c      	movs	r3, #60	; 0x3c
 810156a:	b299      	uxth	r1, r3
 810156c:	f107 020c 	add.w	r2, r7, #12
 8101570:	f04f 33ff 	mov.w	r3, #4294967295
 8101574:	9300      	str	r3, [sp, #0]
 8101576:	2301      	movs	r3, #1
 8101578:	6878      	ldr	r0, [r7, #4]
 810157a:	f002 fb2f 	bl	8103bdc <HAL_I2C_Master_Transmit>
 810157e:	4603      	mov	r3, r0
 8101580:	2b00      	cmp	r3, #0
 8101582:	d001      	beq.n	8101588 <LSM9DS1_Init+0xcc>
	  	Error_Handler();
 8101584:	f7ff feb2 	bl	81012ec <Error_Handler>
	  if( ( HAL_I2C_Master_Receive(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY ) != HAL_OK ) || ( i2c_buf[0] != 0x3D ) )
 8101588:	233c      	movs	r3, #60	; 0x3c
 810158a:	b299      	uxth	r1, r3
 810158c:	f107 020c 	add.w	r2, r7, #12
 8101590:	f04f 33ff 	mov.w	r3, #4294967295
 8101594:	9300      	str	r3, [sp, #0]
 8101596:	2301      	movs	r3, #1
 8101598:	6878      	ldr	r0, [r7, #4]
 810159a:	f002 fc13 	bl	8103dc4 <HAL_I2C_Master_Receive>
 810159e:	4603      	mov	r3, r0
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	d102      	bne.n	81015aa <LSM9DS1_Init+0xee>
 81015a4:	7b3b      	ldrb	r3, [r7, #12]
 81015a6:	2b3d      	cmp	r3, #61	; 0x3d
 81015a8:	d001      	beq.n	81015ae <LSM9DS1_Init+0xf2>
	  	Error_Handler();
 81015aa:	f7ff fe9f 	bl	81012ec <Error_Handler>

	  // 119 Hz, 2000 dps, 16 Hz BW
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG1_G;
 81015ae:	2310      	movs	r3, #16
 81015b0:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x78;
 81015b2:	2378      	movs	r3, #120	; 0x78
 81015b4:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81015b6:	23d6      	movs	r3, #214	; 0xd6
 81015b8:	b299      	uxth	r1, r3
 81015ba:	f107 020c 	add.w	r2, r7, #12
 81015be:	f04f 33ff 	mov.w	r3, #4294967295
 81015c2:	9300      	str	r3, [sp, #0]
 81015c4:	2302      	movs	r3, #2
 81015c6:	6878      	ldr	r0, [r7, #4]
 81015c8:	f002 fb08 	bl	8103bdc <HAL_I2C_Master_Transmit>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2b00      	cmp	r3, #0
 81015d0:	d001      	beq.n	81015d6 <LSM9DS1_Init+0x11a>
	  	Error_Handler();
 81015d2:	f7ff fe8b 	bl	81012ec <Error_Handler>

	  // 119 Hz, 4g
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG6_XL;
 81015d6:	2320      	movs	r3, #32
 81015d8:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x70;
 81015da:	2370      	movs	r3, #112	; 0x70
 81015dc:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81015de:	23d6      	movs	r3, #214	; 0xd6
 81015e0:	b299      	uxth	r1, r3
 81015e2:	f107 020c 	add.w	r2, r7, #12
 81015e6:	f04f 33ff 	mov.w	r3, #4294967295
 81015ea:	9300      	str	r3, [sp, #0]
 81015ec:	2302      	movs	r3, #2
 81015ee:	6878      	ldr	r0, [r7, #4]
 81015f0:	f002 faf4 	bl	8103bdc <HAL_I2C_Master_Transmit>
 81015f4:	4603      	mov	r3, r0
 81015f6:	2b00      	cmp	r3, #0
 81015f8:	d001      	beq.n	81015fe <LSM9DS1_Init+0x142>
	  	Error_Handler();
 81015fa:	f7ff fe77 	bl	81012ec <Error_Handler>

	  //Temperature compensation enable, medium performance, 20 Hz
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG1_M;
 81015fe:	2320      	movs	r3, #32
 8101600:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0xB4;
 8101602:	23b4      	movs	r3, #180	; 0xb4
 8101604:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 8101606:	233c      	movs	r3, #60	; 0x3c
 8101608:	b299      	uxth	r1, r3
 810160a:	f107 020c 	add.w	r2, r7, #12
 810160e:	f04f 33ff 	mov.w	r3, #4294967295
 8101612:	9300      	str	r3, [sp, #0]
 8101614:	2302      	movs	r3, #2
 8101616:	6878      	ldr	r0, [r7, #4]
 8101618:	f002 fae0 	bl	8103bdc <HAL_I2C_Master_Transmit>
 810161c:	4603      	mov	r3, r0
 810161e:	2b00      	cmp	r3, #0
 8101620:	d001      	beq.n	8101626 <LSM9DS1_Init+0x16a>
	  	Error_Handler();
 8101622:	f7ff fe63 	bl	81012ec <Error_Handler>

	  //4 gauss
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG2_M;
 8101626:	2321      	movs	r3, #33	; 0x21
 8101628:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x00;
 810162a:	2300      	movs	r3, #0
 810162c:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 810162e:	233c      	movs	r3, #60	; 0x3c
 8101630:	b299      	uxth	r1, r3
 8101632:	f107 020c 	add.w	r2, r7, #12
 8101636:	f04f 33ff 	mov.w	r3, #4294967295
 810163a:	9300      	str	r3, [sp, #0]
 810163c:	2302      	movs	r3, #2
 810163e:	6878      	ldr	r0, [r7, #4]
 8101640:	f002 facc 	bl	8103bdc <HAL_I2C_Master_Transmit>
 8101644:	4603      	mov	r3, r0
 8101646:	2b00      	cmp	r3, #0
 8101648:	d001      	beq.n	810164e <LSM9DS1_Init+0x192>
	  	Error_Handler();
 810164a:	f7ff fe4f 	bl	81012ec <Error_Handler>

	  // Continuous conversion mode
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG3_M;
 810164e:	2322      	movs	r3, #34	; 0x22
 8101650:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x00;
 8101652:	2300      	movs	r3, #0
 8101654:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 8101656:	233c      	movs	r3, #60	; 0x3c
 8101658:	b299      	uxth	r1, r3
 810165a:	f107 020c 	add.w	r2, r7, #12
 810165e:	f04f 33ff 	mov.w	r3, #4294967295
 8101662:	9300      	str	r3, [sp, #0]
 8101664:	2302      	movs	r3, #2
 8101666:	6878      	ldr	r0, [r7, #4]
 8101668:	f002 fab8 	bl	8103bdc <HAL_I2C_Master_Transmit>
 810166c:	4603      	mov	r3, r0
 810166e:	2b00      	cmp	r3, #0
 8101670:	d001      	beq.n	8101676 <LSM9DS1_Init+0x1ba>
	  	Error_Handler();
 8101672:	f7ff fe3b 	bl	81012ec <Error_Handler>

}
 8101676:	bf00      	nop
 8101678:	3710      	adds	r7, #16
 810167a:	46bd      	mov	sp, r7
 810167c:	bd80      	pop	{r7, pc}
	...

08101680 <LSM9DS1_ReadGyr>:



void LSM9DS1_ReadGyr( I2C_HandleTypeDef * phi2c, float *pgx, float *pgy, float *pgz ){
 8101680:	b580      	push	{r7, lr}
 8101682:	b088      	sub	sp, #32
 8101684:	af02      	add	r7, sp, #8
 8101686:	60f8      	str	r0, [r7, #12]
 8101688:	60b9      	str	r1, [r7, #8]
 810168a:	607a      	str	r2, [r7, #4]
 810168c:	603b      	str	r3, [r7, #0]

		uint8_t		i2c_buf[6];

		i2c_buf[0] = LSM9DS1_AG_RG_OUT_X_L_G;
 810168e:	2318      	movs	r3, #24
 8101690:	743b      	strb	r3, [r7, #16]
		if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 8101692:	23d6      	movs	r3, #214	; 0xd6
 8101694:	b299      	uxth	r1, r3
 8101696:	f107 0210 	add.w	r2, r7, #16
 810169a:	f04f 33ff 	mov.w	r3, #4294967295
 810169e:	9300      	str	r3, [sp, #0]
 81016a0:	2301      	movs	r3, #1
 81016a2:	68f8      	ldr	r0, [r7, #12]
 81016a4:	f002 fa9a 	bl	8103bdc <HAL_I2C_Master_Transmit>
 81016a8:	4603      	mov	r3, r0
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d001      	beq.n	81016b2 <LSM9DS1_ReadGyr+0x32>
			Error_Handler();
 81016ae:	f7ff fe1d 	bl	81012ec <Error_Handler>

		if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 81016b2:	23d6      	movs	r3, #214	; 0xd6
 81016b4:	b299      	uxth	r1, r3
 81016b6:	f107 0210 	add.w	r2, r7, #16
 81016ba:	f04f 33ff 	mov.w	r3, #4294967295
 81016be:	9300      	str	r3, [sp, #0]
 81016c0:	2306      	movs	r3, #6
 81016c2:	68f8      	ldr	r0, [r7, #12]
 81016c4:	f002 fb7e 	bl	8103dc4 <HAL_I2C_Master_Receive>
 81016c8:	4603      	mov	r3, r0
 81016ca:	2b00      	cmp	r3, #0
 81016cc:	d001      	beq.n	81016d2 <LSM9DS1_ReadGyr+0x52>
			Error_Handler();
 81016ce:	f7ff fe0d 	bl	81012ec <Error_Handler>

	*pgx = getSignedVal(i2c_buf[0], i2c_buf[1]) *  0.07000 * 0.017453293;
 81016d2:	7c3b      	ldrb	r3, [r7, #16]
 81016d4:	7c7a      	ldrb	r2, [r7, #17]
 81016d6:	4611      	mov	r1, r2
 81016d8:	4618      	mov	r0, r3
 81016da:	f7ff fe0c 	bl	81012f6 <getSignedVal>
 81016de:	4603      	mov	r3, r0
 81016e0:	4618      	mov	r0, r3
 81016e2:	f7fe ffa7 	bl	8100634 <__aeabi_i2d>
 81016e6:	a32e      	add	r3, pc, #184	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 81016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016ec:	f7ff f80c 	bl	8100708 <__aeabi_dmul>
 81016f0:	4602      	mov	r2, r0
 81016f2:	460b      	mov	r3, r1
 81016f4:	4610      	mov	r0, r2
 81016f6:	4619      	mov	r1, r3
 81016f8:	a32b      	add	r3, pc, #172	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 81016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016fe:	f7ff f803 	bl	8100708 <__aeabi_dmul>
 8101702:	4602      	mov	r2, r0
 8101704:	460b      	mov	r3, r1
 8101706:	4610      	mov	r0, r2
 8101708:	4619      	mov	r1, r3
 810170a:	f7ff fad5 	bl	8100cb8 <__aeabi_d2f>
 810170e:	4602      	mov	r2, r0
 8101710:	68bb      	ldr	r3, [r7, #8]
 8101712:	601a      	str	r2, [r3, #0]
    *pgy = getSignedVal(i2c_buf[2], i2c_buf[3]) *  0.07000 * 0.017453293;
 8101714:	7cbb      	ldrb	r3, [r7, #18]
 8101716:	7cfa      	ldrb	r2, [r7, #19]
 8101718:	4611      	mov	r1, r2
 810171a:	4618      	mov	r0, r3
 810171c:	f7ff fdeb 	bl	81012f6 <getSignedVal>
 8101720:	4603      	mov	r3, r0
 8101722:	4618      	mov	r0, r3
 8101724:	f7fe ff86 	bl	8100634 <__aeabi_i2d>
 8101728:	a31d      	add	r3, pc, #116	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 810172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810172e:	f7fe ffeb 	bl	8100708 <__aeabi_dmul>
 8101732:	4602      	mov	r2, r0
 8101734:	460b      	mov	r3, r1
 8101736:	4610      	mov	r0, r2
 8101738:	4619      	mov	r1, r3
 810173a:	a31b      	add	r3, pc, #108	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 810173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101740:	f7fe ffe2 	bl	8100708 <__aeabi_dmul>
 8101744:	4602      	mov	r2, r0
 8101746:	460b      	mov	r3, r1
 8101748:	4610      	mov	r0, r2
 810174a:	4619      	mov	r1, r3
 810174c:	f7ff fab4 	bl	8100cb8 <__aeabi_d2f>
 8101750:	4602      	mov	r2, r0
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	601a      	str	r2, [r3, #0]
    *pgz = getSignedVal(i2c_buf[1], i2c_buf[5]) *  0.07000 * 0.017453293;
 8101756:	7c7b      	ldrb	r3, [r7, #17]
 8101758:	7d7a      	ldrb	r2, [r7, #21]
 810175a:	4611      	mov	r1, r2
 810175c:	4618      	mov	r0, r3
 810175e:	f7ff fdca 	bl	81012f6 <getSignedVal>
 8101762:	4603      	mov	r3, r0
 8101764:	4618      	mov	r0, r3
 8101766:	f7fe ff65 	bl	8100634 <__aeabi_i2d>
 810176a:	a30d      	add	r3, pc, #52	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 810176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101770:	f7fe ffca 	bl	8100708 <__aeabi_dmul>
 8101774:	4602      	mov	r2, r0
 8101776:	460b      	mov	r3, r1
 8101778:	4610      	mov	r0, r2
 810177a:	4619      	mov	r1, r3
 810177c:	a30a      	add	r3, pc, #40	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 810177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101782:	f7fe ffc1 	bl	8100708 <__aeabi_dmul>
 8101786:	4602      	mov	r2, r0
 8101788:	460b      	mov	r3, r1
 810178a:	4610      	mov	r0, r2
 810178c:	4619      	mov	r1, r3
 810178e:	f7ff fa93 	bl	8100cb8 <__aeabi_d2f>
 8101792:	4602      	mov	r2, r0
 8101794:	683b      	ldr	r3, [r7, #0]
 8101796:	601a      	str	r2, [r3, #0]

   // *pgz = ( (i2c_buf[5] << 8) | i2c_buf[4] ) * 2000./ 32768.;

}
 8101798:	bf00      	nop
 810179a:	3718      	adds	r7, #24
 810179c:	46bd      	mov	sp, r7
 810179e:	bd80      	pop	{r7, pc}
 81017a0:	1eb851ec 	.word	0x1eb851ec
 81017a4:	3fb1eb85 	.word	0x3fb1eb85
 81017a8:	aa91ed06 	.word	0xaa91ed06
 81017ac:	3f91df46 	.word	0x3f91df46

081017b0 <LSM9DS1_ReadAcc>:
  *proll  *= 180.0 / M_PI;

}

//[g]
void LSM9DS1_ReadAcc( I2C_HandleTypeDef * phi2c, float *pax, float *pay, float *paz ){
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b088      	sub	sp, #32
 81017b4:	af02      	add	r7, sp, #8
 81017b6:	60f8      	str	r0, [r7, #12]
 81017b8:	60b9      	str	r1, [r7, #8]
 81017ba:	607a      	str	r2, [r7, #4]
 81017bc:	603b      	str	r3, [r7, #0]

	uint8_t		i2c_buf[6];

	i2c_buf[0] = LSM9DS1_AG_RG_OUT_X_L_XL;
 81017be:	2328      	movs	r3, #40	; 0x28
 81017c0:	743b      	strb	r3, [r7, #16]
	if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 81017c2:	23d6      	movs	r3, #214	; 0xd6
 81017c4:	b299      	uxth	r1, r3
 81017c6:	f107 0210 	add.w	r2, r7, #16
 81017ca:	f04f 33ff 	mov.w	r3, #4294967295
 81017ce:	9300      	str	r3, [sp, #0]
 81017d0:	2301      	movs	r3, #1
 81017d2:	68f8      	ldr	r0, [r7, #12]
 81017d4:	f002 fa02 	bl	8103bdc <HAL_I2C_Master_Transmit>
 81017d8:	4603      	mov	r3, r0
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d001      	beq.n	81017e2 <LSM9DS1_ReadAcc+0x32>
		Error_Handler();
 81017de:	f7ff fd85 	bl	81012ec <Error_Handler>

	if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 81017e2:	23d6      	movs	r3, #214	; 0xd6
 81017e4:	b299      	uxth	r1, r3
 81017e6:	f107 0210 	add.w	r2, r7, #16
 81017ea:	f04f 33ff 	mov.w	r3, #4294967295
 81017ee:	9300      	str	r3, [sp, #0]
 81017f0:	2306      	movs	r3, #6
 81017f2:	68f8      	ldr	r0, [r7, #12]
 81017f4:	f002 fae6 	bl	8103dc4 <HAL_I2C_Master_Receive>
 81017f8:	4603      	mov	r3, r0
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d001      	beq.n	8101802 <LSM9DS1_ReadAcc+0x52>
		Error_Handler();
 81017fe:	f7ff fd75 	bl	81012ec <Error_Handler>

	*pax = (float)getSignedVal(i2c_buf[0], i2c_buf[1]);
 8101802:	7c3b      	ldrb	r3, [r7, #16]
 8101804:	7c7a      	ldrb	r2, [r7, #17]
 8101806:	4611      	mov	r1, r2
 8101808:	4618      	mov	r0, r3
 810180a:	f7ff fd74 	bl	81012f6 <getSignedVal>
 810180e:	4603      	mov	r3, r0
 8101810:	ee07 3a90 	vmov	s15, r3
 8101814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101818:	68bb      	ldr	r3, [r7, #8]
 810181a:	edc3 7a00 	vstr	s15, [r3]
	*pax = *pax * 4.0f / 32767.0f * 9.80665f;
 810181e:	68bb      	ldr	r3, [r7, #8]
 8101820:	edd3 7a00 	vldr	s15, [r3]
 8101824:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101828:	ee27 7a87 	vmul.f32	s14, s15, s14
 810182c:	eddf 6a27 	vldr	s13, [pc, #156]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 8101830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101834:	ed9f 7a26 	vldr	s14, [pc, #152]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 8101838:	ee67 7a87 	vmul.f32	s15, s15, s14
 810183c:	68bb      	ldr	r3, [r7, #8]
 810183e:	edc3 7a00 	vstr	s15, [r3]
	*pay = (float)getSignedVal(i2c_buf[2], i2c_buf[3]);
 8101842:	7cbb      	ldrb	r3, [r7, #18]
 8101844:	7cfa      	ldrb	r2, [r7, #19]
 8101846:	4611      	mov	r1, r2
 8101848:	4618      	mov	r0, r3
 810184a:	f7ff fd54 	bl	81012f6 <getSignedVal>
 810184e:	4603      	mov	r3, r0
 8101850:	ee07 3a90 	vmov	s15, r3
 8101854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	edc3 7a00 	vstr	s15, [r3]
	*pay = *pay * 4.0f / 32767.0f * 9.80665f;
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	edd3 7a00 	vldr	s15, [r3]
 8101864:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101868:	ee27 7a87 	vmul.f32	s14, s15, s14
 810186c:	eddf 6a17 	vldr	s13, [pc, #92]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 8101870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101874:	ed9f 7a16 	vldr	s14, [pc, #88]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 8101878:	ee67 7a87 	vmul.f32	s15, s15, s14
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	edc3 7a00 	vstr	s15, [r3]
	*paz = (float)getSignedVal(i2c_buf[4], i2c_buf[5]);
 8101882:	7d3b      	ldrb	r3, [r7, #20]
 8101884:	7d7a      	ldrb	r2, [r7, #21]
 8101886:	4611      	mov	r1, r2
 8101888:	4618      	mov	r0, r3
 810188a:	f7ff fd34 	bl	81012f6 <getSignedVal>
 810188e:	4603      	mov	r3, r0
 8101890:	ee07 3a90 	vmov	s15, r3
 8101894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101898:	683b      	ldr	r3, [r7, #0]
 810189a:	edc3 7a00 	vstr	s15, [r3]
	*paz = *paz * 4.0f / 32767.0f * 9.80665f;
 810189e:	683b      	ldr	r3, [r7, #0]
 81018a0:	edd3 7a00 	vldr	s15, [r3]
 81018a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81018a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 81018ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 81018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81018b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 81018b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81018bc:	683b      	ldr	r3, [r7, #0]
 81018be:	edc3 7a00 	vstr	s15, [r3]
}
 81018c2:	bf00      	nop
 81018c4:	3718      	adds	r7, #24
 81018c6:	46bd      	mov	sp, r7
 81018c8:	bd80      	pop	{r7, pc}
 81018ca:	bf00      	nop
 81018cc:	46fffe00 	.word	0x46fffe00
 81018d0:	411ce80a 	.word	0x411ce80a
 81018d4:	00000000 	.word	0x00000000

081018d8 <LSM9DS1_ReadMag>:

//[uT]
void LSM9DS1_ReadMag( I2C_HandleTypeDef * phi2c, float *pmx, float *pmy, float *pmz	){
 81018d8:	b580      	push	{r7, lr}
 81018da:	b088      	sub	sp, #32
 81018dc:	af02      	add	r7, sp, #8
 81018de:	60f8      	str	r0, [r7, #12]
 81018e0:	60b9      	str	r1, [r7, #8]
 81018e2:	607a      	str	r2, [r7, #4]
 81018e4:	603b      	str	r3, [r7, #0]

	uint8_t i2c_buf[6];

	i2c_buf[0] = LSM9DS1_MA_RG_OUT_X_L_M;
 81018e6:	2328      	movs	r3, #40	; 0x28
 81018e8:	743b      	strb	r3, [r7, #16]
	if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 81018ea:	233c      	movs	r3, #60	; 0x3c
 81018ec:	b299      	uxth	r1, r3
 81018ee:	f107 0210 	add.w	r2, r7, #16
 81018f2:	f04f 33ff 	mov.w	r3, #4294967295
 81018f6:	9300      	str	r3, [sp, #0]
 81018f8:	2301      	movs	r3, #1
 81018fa:	68f8      	ldr	r0, [r7, #12]
 81018fc:	f002 f96e 	bl	8103bdc <HAL_I2C_Master_Transmit>
 8101900:	4603      	mov	r3, r0
 8101902:	2b00      	cmp	r3, #0
 8101904:	d001      	beq.n	810190a <LSM9DS1_ReadMag+0x32>
		Error_Handler();
 8101906:	f7ff fcf1 	bl	81012ec <Error_Handler>

	if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_MA_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 810190a:	233c      	movs	r3, #60	; 0x3c
 810190c:	b299      	uxth	r1, r3
 810190e:	f107 0210 	add.w	r2, r7, #16
 8101912:	f04f 33ff 	mov.w	r3, #4294967295
 8101916:	9300      	str	r3, [sp, #0]
 8101918:	2306      	movs	r3, #6
 810191a:	68f8      	ldr	r0, [r7, #12]
 810191c:	f002 fa52 	bl	8103dc4 <HAL_I2C_Master_Receive>
 8101920:	4603      	mov	r3, r0
 8101922:	2b00      	cmp	r3, #0
 8101924:	d001      	beq.n	810192a <LSM9DS1_ReadMag+0x52>
		Error_Handler();
 8101926:	f7ff fce1 	bl	81012ec <Error_Handler>
//	*pmx = ( (i2c_buf[1] << 8) | i2c_buf[0] ) * 4.0 * 100.0 / 32768.0;
//	*pmy = ( (i2c_buf[3] << 8) | i2c_buf[2] ) * 4.0 * 100.0 / 32768.0;
//	*pmz = ( (i2c_buf[5] << 8) | i2c_buf[4] ) * 4.0 * 100.0 / 32768.0;


	*pmx = getSignedVal(i2c_buf[0], i2c_buf[1]) * 100.0 / 6842.0;
 810192a:	7c3b      	ldrb	r3, [r7, #16]
 810192c:	7c7a      	ldrb	r2, [r7, #17]
 810192e:	4611      	mov	r1, r2
 8101930:	4618      	mov	r0, r3
 8101932:	f7ff fce0 	bl	81012f6 <getSignedVal>
 8101936:	4603      	mov	r3, r0
 8101938:	4618      	mov	r0, r3
 810193a:	f7fe fe7b 	bl	8100634 <__aeabi_i2d>
 810193e:	f04f 0200 	mov.w	r2, #0
 8101942:	4b2f      	ldr	r3, [pc, #188]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 8101944:	f7fe fee0 	bl	8100708 <__aeabi_dmul>
 8101948:	4602      	mov	r2, r0
 810194a:	460b      	mov	r3, r1
 810194c:	4610      	mov	r0, r2
 810194e:	4619      	mov	r1, r3
 8101950:	a329      	add	r3, pc, #164	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 8101952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101956:	f7ff f801 	bl	810095c <__aeabi_ddiv>
 810195a:	4602      	mov	r2, r0
 810195c:	460b      	mov	r3, r1
 810195e:	4610      	mov	r0, r2
 8101960:	4619      	mov	r1, r3
 8101962:	f7ff f9a9 	bl	8100cb8 <__aeabi_d2f>
 8101966:	4602      	mov	r2, r0
 8101968:	68bb      	ldr	r3, [r7, #8]
 810196a:	601a      	str	r2, [r3, #0]
	*pmy = getSignedVal(i2c_buf[2], i2c_buf[3]) * 100.0 / 6842.0;
 810196c:	7cbb      	ldrb	r3, [r7, #18]
 810196e:	7cfa      	ldrb	r2, [r7, #19]
 8101970:	4611      	mov	r1, r2
 8101972:	4618      	mov	r0, r3
 8101974:	f7ff fcbf 	bl	81012f6 <getSignedVal>
 8101978:	4603      	mov	r3, r0
 810197a:	4618      	mov	r0, r3
 810197c:	f7fe fe5a 	bl	8100634 <__aeabi_i2d>
 8101980:	f04f 0200 	mov.w	r2, #0
 8101984:	4b1e      	ldr	r3, [pc, #120]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 8101986:	f7fe febf 	bl	8100708 <__aeabi_dmul>
 810198a:	4602      	mov	r2, r0
 810198c:	460b      	mov	r3, r1
 810198e:	4610      	mov	r0, r2
 8101990:	4619      	mov	r1, r3
 8101992:	a319      	add	r3, pc, #100	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 8101994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101998:	f7fe ffe0 	bl	810095c <__aeabi_ddiv>
 810199c:	4602      	mov	r2, r0
 810199e:	460b      	mov	r3, r1
 81019a0:	4610      	mov	r0, r2
 81019a2:	4619      	mov	r1, r3
 81019a4:	f7ff f988 	bl	8100cb8 <__aeabi_d2f>
 81019a8:	4602      	mov	r2, r0
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	601a      	str	r2, [r3, #0]
	*pmz = getSignedVal(i2c_buf[4], i2c_buf[5]) * 100.0 / 6842.0;
 81019ae:	7d3b      	ldrb	r3, [r7, #20]
 81019b0:	7d7a      	ldrb	r2, [r7, #21]
 81019b2:	4611      	mov	r1, r2
 81019b4:	4618      	mov	r0, r3
 81019b6:	f7ff fc9e 	bl	81012f6 <getSignedVal>
 81019ba:	4603      	mov	r3, r0
 81019bc:	4618      	mov	r0, r3
 81019be:	f7fe fe39 	bl	8100634 <__aeabi_i2d>
 81019c2:	f04f 0200 	mov.w	r2, #0
 81019c6:	4b0e      	ldr	r3, [pc, #56]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 81019c8:	f7fe fe9e 	bl	8100708 <__aeabi_dmul>
 81019cc:	4602      	mov	r2, r0
 81019ce:	460b      	mov	r3, r1
 81019d0:	4610      	mov	r0, r2
 81019d2:	4619      	mov	r1, r3
 81019d4:	a308      	add	r3, pc, #32	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 81019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019da:	f7fe ffbf 	bl	810095c <__aeabi_ddiv>
 81019de:	4602      	mov	r2, r0
 81019e0:	460b      	mov	r3, r1
 81019e2:	4610      	mov	r0, r2
 81019e4:	4619      	mov	r1, r3
 81019e6:	f7ff f967 	bl	8100cb8 <__aeabi_d2f>
 81019ea:	4602      	mov	r2, r0
 81019ec:	683b      	ldr	r3, [r7, #0]
 81019ee:	601a      	str	r2, [r3, #0]


}
 81019f0:	bf00      	nop
 81019f2:	3718      	adds	r7, #24
 81019f4:	46bd      	mov	sp, r7
 81019f6:	bd80      	pop	{r7, pc}
 81019f8:	00000000 	.word	0x00000000
 81019fc:	40baba00 	.word	0x40baba00
 8101a00:	40590000 	.word	0x40590000

08101a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101a04:	b480      	push	{r7}
 8101a06:	b083      	sub	sp, #12
 8101a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a0a:	4b0a      	ldr	r3, [pc, #40]	; (8101a34 <HAL_MspInit+0x30>)
 8101a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a10:	4a08      	ldr	r2, [pc, #32]	; (8101a34 <HAL_MspInit+0x30>)
 8101a12:	f043 0302 	orr.w	r3, r3, #2
 8101a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a1a:	4b06      	ldr	r3, [pc, #24]	; (8101a34 <HAL_MspInit+0x30>)
 8101a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a20:	f003 0302 	and.w	r3, r3, #2
 8101a24:	607b      	str	r3, [r7, #4]
 8101a26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101a28:	bf00      	nop
 8101a2a:	370c      	adds	r7, #12
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a32:	4770      	bx	lr
 8101a34:	58024400 	.word	0x58024400

08101a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	b0b8      	sub	sp, #224	; 0xe0
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a44:	2200      	movs	r2, #0
 8101a46:	601a      	str	r2, [r3, #0]
 8101a48:	605a      	str	r2, [r3, #4]
 8101a4a:	609a      	str	r2, [r3, #8]
 8101a4c:	60da      	str	r2, [r3, #12]
 8101a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a50:	f107 0310 	add.w	r3, r7, #16
 8101a54:	22bc      	movs	r2, #188	; 0xbc
 8101a56:	2100      	movs	r1, #0
 8101a58:	4618      	mov	r0, r3
 8101a5a:	f006 f985 	bl	8107d68 <memset>
  if(hadc->Instance==ADC1)
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4a2a      	ldr	r2, [pc, #168]	; (8101b0c <HAL_ADC_MspInit+0xd4>)
 8101a64:	4293      	cmp	r3, r2
 8101a66:	d14c      	bne.n	8101b02 <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101a68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101a6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8101a6e:	2305      	movs	r3, #5
 8101a70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8101a72:	2328      	movs	r3, #40	; 0x28
 8101a74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8101a76:	2304      	movs	r3, #4
 8101a78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101a7a:	2302      	movs	r3, #2
 8101a7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101a7e:	2302      	movs	r3, #2
 8101a80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8101a82:	2380      	movs	r3, #128	; 0x80
 8101a84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8101a86:	2300      	movs	r3, #0
 8101a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101a8a:	2300      	movs	r3, #0
 8101a8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101a8e:	2300      	movs	r3, #0
 8101a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a94:	f107 0310 	add.w	r3, r7, #16
 8101a98:	4618      	mov	r0, r3
 8101a9a:	f003 f89d 	bl	8104bd8 <HAL_RCCEx_PeriphCLKConfig>
 8101a9e:	4603      	mov	r3, r0
 8101aa0:	2b00      	cmp	r3, #0
 8101aa2:	d001      	beq.n	8101aa8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101aa4:	f7ff fc22 	bl	81012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101aa8:	4b19      	ldr	r3, [pc, #100]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101aae:	4a18      	ldr	r2, [pc, #96]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ab0:	f043 0320 	orr.w	r3, r3, #32
 8101ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ab8:	4b15      	ldr	r3, [pc, #84]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101abe:	f003 0320 	and.w	r3, r3, #32
 8101ac2:	60fb      	str	r3, [r7, #12]
 8101ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ac6:	4b12      	ldr	r3, [pc, #72]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101acc:	4a10      	ldr	r2, [pc, #64]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ace:	f043 0301 	orr.w	r3, r3, #1
 8101ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ad6:	4b0e      	ldr	r3, [pc, #56]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101adc:	f003 0301 	and.w	r3, r3, #1
 8101ae0:	60bb      	str	r3, [r7, #8]
 8101ae2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101ae4:	2308      	movs	r3, #8
 8101ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101aea:	2303      	movs	r3, #3
 8101aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101af0:	2300      	movs	r3, #0
 8101af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101af6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101afa:	4619      	mov	r1, r3
 8101afc:	4805      	ldr	r0, [pc, #20]	; (8101b14 <HAL_ADC_MspInit+0xdc>)
 8101afe:	f001 fe01 	bl	8103704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8101b02:	bf00      	nop
 8101b04:	37e0      	adds	r7, #224	; 0xe0
 8101b06:	46bd      	mov	sp, r7
 8101b08:	bd80      	pop	{r7, pc}
 8101b0a:	bf00      	nop
 8101b0c:	40022000 	.word	0x40022000
 8101b10:	58024400 	.word	0x58024400
 8101b14:	58020000 	.word	0x58020000

08101b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b0b8      	sub	sp, #224	; 0xe0
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101b24:	2200      	movs	r2, #0
 8101b26:	601a      	str	r2, [r3, #0]
 8101b28:	605a      	str	r2, [r3, #4]
 8101b2a:	609a      	str	r2, [r3, #8]
 8101b2c:	60da      	str	r2, [r3, #12]
 8101b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b30:	f107 0310 	add.w	r3, r7, #16
 8101b34:	22bc      	movs	r2, #188	; 0xbc
 8101b36:	2100      	movs	r1, #0
 8101b38:	4618      	mov	r0, r3
 8101b3a:	f006 f915 	bl	8107d68 <memset>
  if(hi2c->Instance==I2C4)
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	4a25      	ldr	r2, [pc, #148]	; (8101bd8 <HAL_I2C_MspInit+0xc0>)
 8101b44:	4293      	cmp	r3, r2
 8101b46:	d142      	bne.n	8101bce <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8101b48:	2310      	movs	r3, #16
 8101b4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8101b4c:	2300      	movs	r3, #0
 8101b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b52:	f107 0310 	add.w	r3, r7, #16
 8101b56:	4618      	mov	r0, r3
 8101b58:	f003 f83e 	bl	8104bd8 <HAL_RCCEx_PeriphCLKConfig>
 8101b5c:	4603      	mov	r3, r0
 8101b5e:	2b00      	cmp	r3, #0
 8101b60:	d001      	beq.n	8101b66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101b62:	f7ff fbc3 	bl	81012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b66:	4b1d      	ldr	r3, [pc, #116]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b6c:	4a1b      	ldr	r2, [pc, #108]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b6e:	f043 0302 	orr.w	r3, r3, #2
 8101b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b76:	4b19      	ldr	r3, [pc, #100]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b7c:	f003 0302 	and.w	r3, r3, #2
 8101b80:	60fb      	str	r3, [r7, #12]
 8101b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101b8c:	2312      	movs	r3, #18
 8101b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b92:	2300      	movs	r3, #0
 8101b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b98:	2300      	movs	r3, #0
 8101b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8101b9e:	2306      	movs	r3, #6
 8101ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101ba8:	4619      	mov	r1, r3
 8101baa:	480d      	ldr	r0, [pc, #52]	; (8101be0 <HAL_I2C_MspInit+0xc8>)
 8101bac:	f001 fdaa 	bl	8103704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8101bb0:	4b0a      	ldr	r3, [pc, #40]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bb6:	4a09      	ldr	r2, [pc, #36]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101bbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101bc0:	4b06      	ldr	r3, [pc, #24]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101bca:	60bb      	str	r3, [r7, #8]
 8101bcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8101bce:	bf00      	nop
 8101bd0:	37e0      	adds	r7, #224	; 0xe0
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}
 8101bd6:	bf00      	nop
 8101bd8:	58001c00 	.word	0x58001c00
 8101bdc:	58024400 	.word	0x58024400
 8101be0:	58020400 	.word	0x58020400

08101be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101be4:	b480      	push	{r7}
 8101be6:	b085      	sub	sp, #20
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	4a0b      	ldr	r2, [pc, #44]	; (8101c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d10e      	bne.n	8101c14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101bf6:	4b0b      	ldr	r3, [pc, #44]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bfc:	4a09      	ldr	r2, [pc, #36]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101bfe:	f043 0301 	orr.w	r3, r3, #1
 8101c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c06:	4b07      	ldr	r3, [pc, #28]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c0c:	f003 0301 	and.w	r3, r3, #1
 8101c10:	60fb      	str	r3, [r7, #12]
 8101c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101c14:	bf00      	nop
 8101c16:	3714      	adds	r7, #20
 8101c18:	46bd      	mov	sp, r7
 8101c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1e:	4770      	bx	lr
 8101c20:	40010000 	.word	0x40010000
 8101c24:	58024400 	.word	0x58024400

08101c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b08a      	sub	sp, #40	; 0x28
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 0314 	add.w	r3, r7, #20
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a23      	ldr	r2, [pc, #140]	; (8101cd4 <HAL_TIM_MspPostInit+0xac>)
 8101c46:	4293      	cmp	r3, r2
 8101c48:	d13f      	bne.n	8101cca <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101c4a:	4b23      	ldr	r3, [pc, #140]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c50:	4a21      	ldr	r2, [pc, #132]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c52:	f043 0310 	orr.w	r3, r3, #16
 8101c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c5a:	4b1f      	ldr	r3, [pc, #124]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c60:	f003 0310 	and.w	r3, r3, #16
 8101c64:	613b      	str	r3, [r7, #16]
 8101c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c68:	4b1b      	ldr	r3, [pc, #108]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6e:	4a1a      	ldr	r2, [pc, #104]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c70:	f043 0301 	orr.w	r3, r3, #1
 8101c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c78:	4b17      	ldr	r3, [pc, #92]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7e:	f003 0301 	and.w	r3, r3, #1
 8101c82:	60fb      	str	r3, [r7, #12]
 8101c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8101c86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8101c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c8c:	2302      	movs	r3, #2
 8101c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c90:	2300      	movs	r3, #0
 8101c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c94:	2300      	movs	r3, #0
 8101c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101c98:	2301      	movs	r3, #1
 8101c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101c9c:	f107 0314 	add.w	r3, r7, #20
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	480e      	ldr	r0, [pc, #56]	; (8101cdc <HAL_TIM_MspPostInit+0xb4>)
 8101ca4:	f001 fd2e 	bl	8103704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cae:	2302      	movs	r3, #2
 8101cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cb2:	2300      	movs	r3, #0
 8101cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cb6:	2300      	movs	r3, #0
 8101cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101cba:	2301      	movs	r3, #1
 8101cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cbe:	f107 0314 	add.w	r3, r7, #20
 8101cc2:	4619      	mov	r1, r3
 8101cc4:	4806      	ldr	r0, [pc, #24]	; (8101ce0 <HAL_TIM_MspPostInit+0xb8>)
 8101cc6:	f001 fd1d 	bl	8103704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101cca:	bf00      	nop
 8101ccc:	3728      	adds	r7, #40	; 0x28
 8101cce:	46bd      	mov	sp, r7
 8101cd0:	bd80      	pop	{r7, pc}
 8101cd2:	bf00      	nop
 8101cd4:	40010000 	.word	0x40010000
 8101cd8:	58024400 	.word	0x58024400
 8101cdc:	58021000 	.word	0x58021000
 8101ce0:	58020000 	.word	0x58020000

08101ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ce4:	b480      	push	{r7}
 8101ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ce8:	e7fe      	b.n	8101ce8 <NMI_Handler+0x4>

08101cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101cea:	b480      	push	{r7}
 8101cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101cee:	e7fe      	b.n	8101cee <HardFault_Handler+0x4>

08101cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101cf0:	b480      	push	{r7}
 8101cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101cf4:	e7fe      	b.n	8101cf4 <MemManage_Handler+0x4>

08101cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101cf6:	b480      	push	{r7}
 8101cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101cfa:	e7fe      	b.n	8101cfa <BusFault_Handler+0x4>

08101cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101cfc:	b480      	push	{r7}
 8101cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d00:	e7fe      	b.n	8101d00 <UsageFault_Handler+0x4>

08101d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101d02:	b480      	push	{r7}
 8101d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101d06:	bf00      	nop
 8101d08:	46bd      	mov	sp, r7
 8101d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0e:	4770      	bx	lr

08101d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d10:	b480      	push	{r7}
 8101d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d14:	bf00      	nop
 8101d16:	46bd      	mov	sp, r7
 8101d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d1c:	4770      	bx	lr

08101d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101d1e:	b480      	push	{r7}
 8101d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101d22:	bf00      	nop
 8101d24:	46bd      	mov	sp, r7
 8101d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2a:	4770      	bx	lr

08101d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101d30:	f000 f986 	bl	8102040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101d34:	bf00      	nop
 8101d36:	bd80      	pop	{r7, pc}

08101d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
	return 1;
 8101d3c:	2301      	movs	r3, #1
}
 8101d3e:	4618      	mov	r0, r3
 8101d40:	46bd      	mov	sp, r7
 8101d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d46:	4770      	bx	lr

08101d48 <_kill>:

int _kill(int pid, int sig)
{
 8101d48:	b580      	push	{r7, lr}
 8101d4a:	b082      	sub	sp, #8
 8101d4c:	af00      	add	r7, sp, #0
 8101d4e:	6078      	str	r0, [r7, #4]
 8101d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101d52:	f005 ffd1 	bl	8107cf8 <__errno>
 8101d56:	4603      	mov	r3, r0
 8101d58:	2216      	movs	r2, #22
 8101d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8101d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101d60:	4618      	mov	r0, r3
 8101d62:	3708      	adds	r7, #8
 8101d64:	46bd      	mov	sp, r7
 8101d66:	bd80      	pop	{r7, pc}

08101d68 <_exit>:

void _exit (int status)
{
 8101d68:	b580      	push	{r7, lr}
 8101d6a:	b082      	sub	sp, #8
 8101d6c:	af00      	add	r7, sp, #0
 8101d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101d70:	f04f 31ff 	mov.w	r1, #4294967295
 8101d74:	6878      	ldr	r0, [r7, #4]
 8101d76:	f7ff ffe7 	bl	8101d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101d7a:	e7fe      	b.n	8101d7a <_exit+0x12>

08101d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101d7c:	b580      	push	{r7, lr}
 8101d7e:	b086      	sub	sp, #24
 8101d80:	af00      	add	r7, sp, #0
 8101d82:	60f8      	str	r0, [r7, #12]
 8101d84:	60b9      	str	r1, [r7, #8]
 8101d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d88:	2300      	movs	r3, #0
 8101d8a:	617b      	str	r3, [r7, #20]
 8101d8c:	e00a      	b.n	8101da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101d8e:	f3af 8000 	nop.w
 8101d92:	4601      	mov	r1, r0
 8101d94:	68bb      	ldr	r3, [r7, #8]
 8101d96:	1c5a      	adds	r2, r3, #1
 8101d98:	60ba      	str	r2, [r7, #8]
 8101d9a:	b2ca      	uxtb	r2, r1
 8101d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	3301      	adds	r3, #1
 8101da2:	617b      	str	r3, [r7, #20]
 8101da4:	697a      	ldr	r2, [r7, #20]
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	429a      	cmp	r2, r3
 8101daa:	dbf0      	blt.n	8101d8e <_read+0x12>
	}

return len;
 8101dac:	687b      	ldr	r3, [r7, #4]
}
 8101dae:	4618      	mov	r0, r3
 8101db0:	3718      	adds	r7, #24
 8101db2:	46bd      	mov	sp, r7
 8101db4:	bd80      	pop	{r7, pc}

08101db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101db6:	b580      	push	{r7, lr}
 8101db8:	b086      	sub	sp, #24
 8101dba:	af00      	add	r7, sp, #0
 8101dbc:	60f8      	str	r0, [r7, #12]
 8101dbe:	60b9      	str	r1, [r7, #8]
 8101dc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101dc2:	2300      	movs	r3, #0
 8101dc4:	617b      	str	r3, [r7, #20]
 8101dc6:	e009      	b.n	8101ddc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101dc8:	68bb      	ldr	r3, [r7, #8]
 8101dca:	1c5a      	adds	r2, r3, #1
 8101dcc:	60ba      	str	r2, [r7, #8]
 8101dce:	781b      	ldrb	r3, [r3, #0]
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101dd6:	697b      	ldr	r3, [r7, #20]
 8101dd8:	3301      	adds	r3, #1
 8101dda:	617b      	str	r3, [r7, #20]
 8101ddc:	697a      	ldr	r2, [r7, #20]
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	429a      	cmp	r2, r3
 8101de2:	dbf1      	blt.n	8101dc8 <_write+0x12>
	}
	return len;
 8101de4:	687b      	ldr	r3, [r7, #4]
}
 8101de6:	4618      	mov	r0, r3
 8101de8:	3718      	adds	r7, #24
 8101dea:	46bd      	mov	sp, r7
 8101dec:	bd80      	pop	{r7, pc}

08101dee <_close>:

int _close(int file)
{
 8101dee:	b480      	push	{r7}
 8101df0:	b083      	sub	sp, #12
 8101df2:	af00      	add	r7, sp, #0
 8101df4:	6078      	str	r0, [r7, #4]
	return -1;
 8101df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	370c      	adds	r7, #12
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e04:	4770      	bx	lr

08101e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101e06:	b480      	push	{r7}
 8101e08:	b083      	sub	sp, #12
 8101e0a:	af00      	add	r7, sp, #0
 8101e0c:	6078      	str	r0, [r7, #4]
 8101e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101e10:	683b      	ldr	r3, [r7, #0]
 8101e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101e16:	605a      	str	r2, [r3, #4]
	return 0;
 8101e18:	2300      	movs	r3, #0
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	370c      	adds	r7, #12
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr

08101e26 <_isatty>:

int _isatty(int file)
{
 8101e26:	b480      	push	{r7}
 8101e28:	b083      	sub	sp, #12
 8101e2a:	af00      	add	r7, sp, #0
 8101e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8101e2e:	2301      	movs	r3, #1
}
 8101e30:	4618      	mov	r0, r3
 8101e32:	370c      	adds	r7, #12
 8101e34:	46bd      	mov	sp, r7
 8101e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3a:	4770      	bx	lr

08101e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101e3c:	b480      	push	{r7}
 8101e3e:	b085      	sub	sp, #20
 8101e40:	af00      	add	r7, sp, #0
 8101e42:	60f8      	str	r0, [r7, #12]
 8101e44:	60b9      	str	r1, [r7, #8]
 8101e46:	607a      	str	r2, [r7, #4]
	return 0;
 8101e48:	2300      	movs	r3, #0
}
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	3714      	adds	r7, #20
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e54:	4770      	bx	lr
	...

08101e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101e58:	b580      	push	{r7, lr}
 8101e5a:	b086      	sub	sp, #24
 8101e5c:	af00      	add	r7, sp, #0
 8101e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101e60:	4a14      	ldr	r2, [pc, #80]	; (8101eb4 <_sbrk+0x5c>)
 8101e62:	4b15      	ldr	r3, [pc, #84]	; (8101eb8 <_sbrk+0x60>)
 8101e64:	1ad3      	subs	r3, r2, r3
 8101e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101e68:	697b      	ldr	r3, [r7, #20]
 8101e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101e6c:	4b13      	ldr	r3, [pc, #76]	; (8101ebc <_sbrk+0x64>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	2b00      	cmp	r3, #0
 8101e72:	d102      	bne.n	8101e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101e74:	4b11      	ldr	r3, [pc, #68]	; (8101ebc <_sbrk+0x64>)
 8101e76:	4a12      	ldr	r2, [pc, #72]	; (8101ec0 <_sbrk+0x68>)
 8101e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101e7a:	4b10      	ldr	r3, [pc, #64]	; (8101ebc <_sbrk+0x64>)
 8101e7c:	681a      	ldr	r2, [r3, #0]
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	4413      	add	r3, r2
 8101e82:	693a      	ldr	r2, [r7, #16]
 8101e84:	429a      	cmp	r2, r3
 8101e86:	d207      	bcs.n	8101e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101e88:	f005 ff36 	bl	8107cf8 <__errno>
 8101e8c:	4603      	mov	r3, r0
 8101e8e:	220c      	movs	r2, #12
 8101e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101e92:	f04f 33ff 	mov.w	r3, #4294967295
 8101e96:	e009      	b.n	8101eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101e98:	4b08      	ldr	r3, [pc, #32]	; (8101ebc <_sbrk+0x64>)
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101e9e:	4b07      	ldr	r3, [pc, #28]	; (8101ebc <_sbrk+0x64>)
 8101ea0:	681a      	ldr	r2, [r3, #0]
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	4413      	add	r3, r2
 8101ea6:	4a05      	ldr	r2, [pc, #20]	; (8101ebc <_sbrk+0x64>)
 8101ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101eaa:	68fb      	ldr	r3, [r7, #12]
}
 8101eac:	4618      	mov	r0, r3
 8101eae:	3718      	adds	r7, #24
 8101eb0:	46bd      	mov	sp, r7
 8101eb2:	bd80      	pop	{r7, pc}
 8101eb4:	10048000 	.word	0x10048000
 8101eb8:	00000800 	.word	0x00000800
 8101ebc:	100002f8 	.word	0x100002f8
 8101ec0:	10000310 	.word	0x10000310

08101ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101efc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101ec8:	f7fe ff46 	bl	8100d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101ece:	e003      	b.n	8101ed8 <LoopCopyDataInit>

08101ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101ed0:	4b0b      	ldr	r3, [pc, #44]	; (8101f00 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101ed6:	3104      	adds	r1, #4

08101ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101ed8:	480a      	ldr	r0, [pc, #40]	; (8101f04 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8101eda:	4b0b      	ldr	r3, [pc, #44]	; (8101f08 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8101edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101ee0:	d3f6      	bcc.n	8101ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8101ee2:	4a0a      	ldr	r2, [pc, #40]	; (8101f0c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101ee4:	e002      	b.n	8101eec <LoopFillZerobss>

08101ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101ee8:	f842 3b04 	str.w	r3, [r2], #4

08101eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101eec:	4b08      	ldr	r3, [pc, #32]	; (8101f10 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8101eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101ef0:	d3f9      	bcc.n	8101ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ef2:	f005 ff07 	bl	8107d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ef6:	f7fe ff4b 	bl	8100d90 <main>
  bx  lr    
 8101efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101efc:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101f00:	0810ab9c 	.word	0x0810ab9c
  ldr  r0, =_sdata
 8101f04:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101f08:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 8101f0c:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 8101f10:	10000310 	.word	0x10000310

08101f14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101f14:	e7fe      	b.n	8101f14 <ADC3_IRQHandler>
	...

08101f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b082      	sub	sp, #8
 8101f1c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101f1e:	4b28      	ldr	r3, [pc, #160]	; (8101fc0 <HAL_Init+0xa8>)
 8101f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f24:	4a26      	ldr	r2, [pc, #152]	; (8101fc0 <HAL_Init+0xa8>)
 8101f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101f2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101f2e:	4b24      	ldr	r3, [pc, #144]	; (8101fc0 <HAL_Init+0xa8>)
 8101f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101f38:	603b      	str	r3, [r7, #0]
 8101f3a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101f3c:	4b21      	ldr	r3, [pc, #132]	; (8101fc4 <HAL_Init+0xac>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101f48:	4a1e      	ldr	r2, [pc, #120]	; (8101fc4 <HAL_Init+0xac>)
 8101f4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101f4e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101f50:	4b1c      	ldr	r3, [pc, #112]	; (8101fc4 <HAL_Init+0xac>)
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	4a1b      	ldr	r2, [pc, #108]	; (8101fc4 <HAL_Init+0xac>)
 8101f56:	f043 0301 	orr.w	r3, r3, #1
 8101f5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101f5c:	2003      	movs	r0, #3
 8101f5e:	f001 fb8b 	bl	8103678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101f62:	f002 fc8d 	bl	8104880 <HAL_RCC_GetSysClockFreq>
 8101f66:	4602      	mov	r2, r0
 8101f68:	4b15      	ldr	r3, [pc, #84]	; (8101fc0 <HAL_Init+0xa8>)
 8101f6a:	699b      	ldr	r3, [r3, #24]
 8101f6c:	0a1b      	lsrs	r3, r3, #8
 8101f6e:	f003 030f 	and.w	r3, r3, #15
 8101f72:	4915      	ldr	r1, [pc, #84]	; (8101fc8 <HAL_Init+0xb0>)
 8101f74:	5ccb      	ldrb	r3, [r1, r3]
 8101f76:	f003 031f 	and.w	r3, r3, #31
 8101f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8101f7e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101f80:	4b0f      	ldr	r3, [pc, #60]	; (8101fc0 <HAL_Init+0xa8>)
 8101f82:	699b      	ldr	r3, [r3, #24]
 8101f84:	f003 030f 	and.w	r3, r3, #15
 8101f88:	4a0f      	ldr	r2, [pc, #60]	; (8101fc8 <HAL_Init+0xb0>)
 8101f8a:	5cd3      	ldrb	r3, [r2, r3]
 8101f8c:	f003 031f 	and.w	r3, r3, #31
 8101f90:	687a      	ldr	r2, [r7, #4]
 8101f92:	fa22 f303 	lsr.w	r3, r2, r3
 8101f96:	4a0d      	ldr	r2, [pc, #52]	; (8101fcc <HAL_Init+0xb4>)
 8101f98:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101f9a:	4b0c      	ldr	r3, [pc, #48]	; (8101fcc <HAL_Init+0xb4>)
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a0c      	ldr	r2, [pc, #48]	; (8101fd0 <HAL_Init+0xb8>)
 8101fa0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101fa2:	2000      	movs	r0, #0
 8101fa4:	f000 f816 	bl	8101fd4 <HAL_InitTick>
 8101fa8:	4603      	mov	r3, r0
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d001      	beq.n	8101fb2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101fae:	2301      	movs	r3, #1
 8101fb0:	e002      	b.n	8101fb8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101fb2:	f7ff fd27 	bl	8101a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101fb6:	2300      	movs	r3, #0
}
 8101fb8:	4618      	mov	r0, r3
 8101fba:	3708      	adds	r7, #8
 8101fbc:	46bd      	mov	sp, r7
 8101fbe:	bd80      	pop	{r7, pc}
 8101fc0:	58024400 	.word	0x58024400
 8101fc4:	40024400 	.word	0x40024400
 8101fc8:	0810a7a8 	.word	0x0810a7a8
 8101fcc:	10000004 	.word	0x10000004
 8101fd0:	10000000 	.word	0x10000000

08101fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101fd4:	b580      	push	{r7, lr}
 8101fd6:	b082      	sub	sp, #8
 8101fd8:	af00      	add	r7, sp, #0
 8101fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101fdc:	4b15      	ldr	r3, [pc, #84]	; (8102034 <HAL_InitTick+0x60>)
 8101fde:	781b      	ldrb	r3, [r3, #0]
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d101      	bne.n	8101fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101fe4:	2301      	movs	r3, #1
 8101fe6:	e021      	b.n	810202c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101fe8:	4b13      	ldr	r3, [pc, #76]	; (8102038 <HAL_InitTick+0x64>)
 8101fea:	681a      	ldr	r2, [r3, #0]
 8101fec:	4b11      	ldr	r3, [pc, #68]	; (8102034 <HAL_InitTick+0x60>)
 8101fee:	781b      	ldrb	r3, [r3, #0]
 8101ff0:	4619      	mov	r1, r3
 8101ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8101ffe:	4618      	mov	r0, r3
 8102000:	f001 fb5f 	bl	81036c2 <HAL_SYSTICK_Config>
 8102004:	4603      	mov	r3, r0
 8102006:	2b00      	cmp	r3, #0
 8102008:	d001      	beq.n	810200e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810200a:	2301      	movs	r3, #1
 810200c:	e00e      	b.n	810202c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	2b0f      	cmp	r3, #15
 8102012:	d80a      	bhi.n	810202a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102014:	2200      	movs	r2, #0
 8102016:	6879      	ldr	r1, [r7, #4]
 8102018:	f04f 30ff 	mov.w	r0, #4294967295
 810201c:	f001 fb37 	bl	810368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102020:	4a06      	ldr	r2, [pc, #24]	; (810203c <HAL_InitTick+0x68>)
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102026:	2300      	movs	r3, #0
 8102028:	e000      	b.n	810202c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810202a:	2301      	movs	r3, #1
}
 810202c:	4618      	mov	r0, r3
 810202e:	3708      	adds	r7, #8
 8102030:	46bd      	mov	sp, r7
 8102032:	bd80      	pop	{r7, pc}
 8102034:	1000000c 	.word	0x1000000c
 8102038:	10000000 	.word	0x10000000
 810203c:	10000008 	.word	0x10000008

08102040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102040:	b480      	push	{r7}
 8102042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102044:	4b06      	ldr	r3, [pc, #24]	; (8102060 <HAL_IncTick+0x20>)
 8102046:	781b      	ldrb	r3, [r3, #0]
 8102048:	461a      	mov	r2, r3
 810204a:	4b06      	ldr	r3, [pc, #24]	; (8102064 <HAL_IncTick+0x24>)
 810204c:	681b      	ldr	r3, [r3, #0]
 810204e:	4413      	add	r3, r2
 8102050:	4a04      	ldr	r2, [pc, #16]	; (8102064 <HAL_IncTick+0x24>)
 8102052:	6013      	str	r3, [r2, #0]
}
 8102054:	bf00      	nop
 8102056:	46bd      	mov	sp, r7
 8102058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205c:	4770      	bx	lr
 810205e:	bf00      	nop
 8102060:	1000000c 	.word	0x1000000c
 8102064:	100002fc 	.word	0x100002fc

08102068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102068:	b480      	push	{r7}
 810206a:	af00      	add	r7, sp, #0
  return uwTick;
 810206c:	4b03      	ldr	r3, [pc, #12]	; (810207c <HAL_GetTick+0x14>)
 810206e:	681b      	ldr	r3, [r3, #0]
}
 8102070:	4618      	mov	r0, r3
 8102072:	46bd      	mov	sp, r7
 8102074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102078:	4770      	bx	lr
 810207a:	bf00      	nop
 810207c:	100002fc 	.word	0x100002fc

08102080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102080:	b580      	push	{r7, lr}
 8102082:	b084      	sub	sp, #16
 8102084:	af00      	add	r7, sp, #0
 8102086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102088:	f7ff ffee 	bl	8102068 <HAL_GetTick>
 810208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102092:	68fb      	ldr	r3, [r7, #12]
 8102094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102098:	d005      	beq.n	81020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810209a:	4b0a      	ldr	r3, [pc, #40]	; (81020c4 <HAL_Delay+0x44>)
 810209c:	781b      	ldrb	r3, [r3, #0]
 810209e:	461a      	mov	r2, r3
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	4413      	add	r3, r2
 81020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81020a6:	bf00      	nop
 81020a8:	f7ff ffde 	bl	8102068 <HAL_GetTick>
 81020ac:	4602      	mov	r2, r0
 81020ae:	68bb      	ldr	r3, [r7, #8]
 81020b0:	1ad3      	subs	r3, r2, r3
 81020b2:	68fa      	ldr	r2, [r7, #12]
 81020b4:	429a      	cmp	r2, r3
 81020b6:	d8f7      	bhi.n	81020a8 <HAL_Delay+0x28>
  {
  }
}
 81020b8:	bf00      	nop
 81020ba:	bf00      	nop
 81020bc:	3710      	adds	r7, #16
 81020be:	46bd      	mov	sp, r7
 81020c0:	bd80      	pop	{r7, pc}
 81020c2:	bf00      	nop
 81020c4:	1000000c 	.word	0x1000000c

081020c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81020c8:	b480      	push	{r7}
 81020ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81020cc:	4b03      	ldr	r3, [pc, #12]	; (81020dc <HAL_GetREVID+0x14>)
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	0c1b      	lsrs	r3, r3, #16
}
 81020d2:	4618      	mov	r0, r3
 81020d4:	46bd      	mov	sp, r7
 81020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020da:	4770      	bx	lr
 81020dc:	5c001000 	.word	0x5c001000

081020e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81020e0:	b480      	push	{r7}
 81020e2:	b083      	sub	sp, #12
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	6078      	str	r0, [r7, #4]
 81020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	689b      	ldr	r3, [r3, #8]
 81020ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81020f2:	683b      	ldr	r3, [r7, #0]
 81020f4:	431a      	orrs	r2, r3
 81020f6:	687b      	ldr	r3, [r7, #4]
 81020f8:	609a      	str	r2, [r3, #8]
}
 81020fa:	bf00      	nop
 81020fc:	370c      	adds	r7, #12
 81020fe:	46bd      	mov	sp, r7
 8102100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102104:	4770      	bx	lr

08102106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102106:	b480      	push	{r7}
 8102108:	b083      	sub	sp, #12
 810210a:	af00      	add	r7, sp, #0
 810210c:	6078      	str	r0, [r7, #4]
 810210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	689b      	ldr	r3, [r3, #8]
 8102114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102118:	683b      	ldr	r3, [r7, #0]
 810211a:	431a      	orrs	r2, r3
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	609a      	str	r2, [r3, #8]
}
 8102120:	bf00      	nop
 8102122:	370c      	adds	r7, #12
 8102124:	46bd      	mov	sp, r7
 8102126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212a:	4770      	bx	lr

0810212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810212c:	b480      	push	{r7}
 810212e:	b083      	sub	sp, #12
 8102130:	af00      	add	r7, sp, #0
 8102132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	689b      	ldr	r3, [r3, #8]
 8102138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 810213c:	4618      	mov	r0, r3
 810213e:	370c      	adds	r7, #12
 8102140:	46bd      	mov	sp, r7
 8102142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102146:	4770      	bx	lr

08102148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102148:	b480      	push	{r7}
 810214a:	b087      	sub	sp, #28
 810214c:	af00      	add	r7, sp, #0
 810214e:	60f8      	str	r0, [r7, #12]
 8102150:	60b9      	str	r1, [r7, #8]
 8102152:	607a      	str	r2, [r7, #4]
 8102154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102156:	68fb      	ldr	r3, [r7, #12]
 8102158:	3360      	adds	r3, #96	; 0x60
 810215a:	461a      	mov	r2, r3
 810215c:	68bb      	ldr	r3, [r7, #8]
 810215e:	009b      	lsls	r3, r3, #2
 8102160:	4413      	add	r3, r2
 8102162:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102164:	697b      	ldr	r3, [r7, #20]
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102172:	683b      	ldr	r3, [r7, #0]
 8102174:	430b      	orrs	r3, r1
 8102176:	431a      	orrs	r2, r3
 8102178:	697b      	ldr	r3, [r7, #20]
 810217a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 810217c:	bf00      	nop
 810217e:	371c      	adds	r7, #28
 8102180:	46bd      	mov	sp, r7
 8102182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102186:	4770      	bx	lr

08102188 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102188:	b480      	push	{r7}
 810218a:	b085      	sub	sp, #20
 810218c:	af00      	add	r7, sp, #0
 810218e:	60f8      	str	r0, [r7, #12]
 8102190:	60b9      	str	r1, [r7, #8]
 8102192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102194:	68fb      	ldr	r3, [r7, #12]
 8102196:	691b      	ldr	r3, [r3, #16]
 8102198:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 810219c:	68bb      	ldr	r3, [r7, #8]
 810219e:	f003 031f 	and.w	r3, r3, #31
 81021a2:	6879      	ldr	r1, [r7, #4]
 81021a4:	fa01 f303 	lsl.w	r3, r1, r3
 81021a8:	431a      	orrs	r2, r3
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	611a      	str	r2, [r3, #16]
}
 81021ae:	bf00      	nop
 81021b0:	3714      	adds	r7, #20
 81021b2:	46bd      	mov	sp, r7
 81021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b8:	4770      	bx	lr

081021ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81021ba:	b480      	push	{r7}
 81021bc:	b087      	sub	sp, #28
 81021be:	af00      	add	r7, sp, #0
 81021c0:	60f8      	str	r0, [r7, #12]
 81021c2:	60b9      	str	r1, [r7, #8]
 81021c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	3360      	adds	r3, #96	; 0x60
 81021ca:	461a      	mov	r2, r3
 81021cc:	68bb      	ldr	r3, [r7, #8]
 81021ce:	009b      	lsls	r3, r3, #2
 81021d0:	4413      	add	r3, r2
 81021d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81021d4:	697b      	ldr	r3, [r7, #20]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	431a      	orrs	r2, r3
 81021e0:	697b      	ldr	r3, [r7, #20]
 81021e2:	601a      	str	r2, [r3, #0]
  }
}
 81021e4:	bf00      	nop
 81021e6:	371c      	adds	r7, #28
 81021e8:	46bd      	mov	sp, r7
 81021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ee:	4770      	bx	lr

081021f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81021f0:	b480      	push	{r7}
 81021f2:	b087      	sub	sp, #28
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	60f8      	str	r0, [r7, #12]
 81021f8:	60b9      	str	r1, [r7, #8]
 81021fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	3330      	adds	r3, #48	; 0x30
 8102200:	461a      	mov	r2, r3
 8102202:	68bb      	ldr	r3, [r7, #8]
 8102204:	0a1b      	lsrs	r3, r3, #8
 8102206:	009b      	lsls	r3, r3, #2
 8102208:	f003 030c 	and.w	r3, r3, #12
 810220c:	4413      	add	r3, r2
 810220e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102210:	697b      	ldr	r3, [r7, #20]
 8102212:	681a      	ldr	r2, [r3, #0]
 8102214:	68bb      	ldr	r3, [r7, #8]
 8102216:	f003 031f 	and.w	r3, r3, #31
 810221a:	211f      	movs	r1, #31
 810221c:	fa01 f303 	lsl.w	r3, r1, r3
 8102220:	43db      	mvns	r3, r3
 8102222:	401a      	ands	r2, r3
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	0e9b      	lsrs	r3, r3, #26
 8102228:	f003 011f 	and.w	r1, r3, #31
 810222c:	68bb      	ldr	r3, [r7, #8]
 810222e:	f003 031f 	and.w	r3, r3, #31
 8102232:	fa01 f303 	lsl.w	r3, r1, r3
 8102236:	431a      	orrs	r2, r3
 8102238:	697b      	ldr	r3, [r7, #20]
 810223a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810223c:	bf00      	nop
 810223e:	371c      	adds	r7, #28
 8102240:	46bd      	mov	sp, r7
 8102242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102246:	4770      	bx	lr

08102248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102248:	b480      	push	{r7}
 810224a:	b087      	sub	sp, #28
 810224c:	af00      	add	r7, sp, #0
 810224e:	60f8      	str	r0, [r7, #12]
 8102250:	60b9      	str	r1, [r7, #8]
 8102252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102254:	68fb      	ldr	r3, [r7, #12]
 8102256:	3314      	adds	r3, #20
 8102258:	461a      	mov	r2, r3
 810225a:	68bb      	ldr	r3, [r7, #8]
 810225c:	0e5b      	lsrs	r3, r3, #25
 810225e:	009b      	lsls	r3, r3, #2
 8102260:	f003 0304 	and.w	r3, r3, #4
 8102264:	4413      	add	r3, r2
 8102266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102268:	697b      	ldr	r3, [r7, #20]
 810226a:	681a      	ldr	r2, [r3, #0]
 810226c:	68bb      	ldr	r3, [r7, #8]
 810226e:	0d1b      	lsrs	r3, r3, #20
 8102270:	f003 031f 	and.w	r3, r3, #31
 8102274:	2107      	movs	r1, #7
 8102276:	fa01 f303 	lsl.w	r3, r1, r3
 810227a:	43db      	mvns	r3, r3
 810227c:	401a      	ands	r2, r3
 810227e:	68bb      	ldr	r3, [r7, #8]
 8102280:	0d1b      	lsrs	r3, r3, #20
 8102282:	f003 031f 	and.w	r3, r3, #31
 8102286:	6879      	ldr	r1, [r7, #4]
 8102288:	fa01 f303 	lsl.w	r3, r1, r3
 810228c:	431a      	orrs	r2, r3
 810228e:	697b      	ldr	r3, [r7, #20]
 8102290:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102292:	bf00      	nop
 8102294:	371c      	adds	r7, #28
 8102296:	46bd      	mov	sp, r7
 8102298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229c:	4770      	bx	lr
	...

081022a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81022a0:	b480      	push	{r7}
 81022a2:	b085      	sub	sp, #20
 81022a4:	af00      	add	r7, sp, #0
 81022a6:	60f8      	str	r0, [r7, #12]
 81022a8:	60b9      	str	r1, [r7, #8]
 81022aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81022ac:	68fb      	ldr	r3, [r7, #12]
 81022ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81022b2:	68bb      	ldr	r3, [r7, #8]
 81022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81022b8:	43db      	mvns	r3, r3
 81022ba:	401a      	ands	r2, r3
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	f003 0318 	and.w	r3, r3, #24
 81022c2:	4908      	ldr	r1, [pc, #32]	; (81022e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 81022c4:	40d9      	lsrs	r1, r3
 81022c6:	68bb      	ldr	r3, [r7, #8]
 81022c8:	400b      	ands	r3, r1
 81022ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81022ce:	431a      	orrs	r2, r3
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 81022d6:	bf00      	nop
 81022d8:	3714      	adds	r7, #20
 81022da:	46bd      	mov	sp, r7
 81022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e0:	4770      	bx	lr
 81022e2:	bf00      	nop
 81022e4:	000fffff 	.word	0x000fffff

081022e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81022e8:	b480      	push	{r7}
 81022ea:	b083      	sub	sp, #12
 81022ec:	af00      	add	r7, sp, #0
 81022ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	689b      	ldr	r3, [r3, #8]
 81022f4:	f003 031f 	and.w	r3, r3, #31
}
 81022f8:	4618      	mov	r0, r3
 81022fa:	370c      	adds	r7, #12
 81022fc:	46bd      	mov	sp, r7
 81022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102302:	4770      	bx	lr

08102304 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102304:	b480      	push	{r7}
 8102306:	b083      	sub	sp, #12
 8102308:	af00      	add	r7, sp, #0
 810230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	689b      	ldr	r3, [r3, #8]
 8102310:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102318:	687a      	ldr	r2, [r7, #4]
 810231a:	6093      	str	r3, [r2, #8]
}
 810231c:	bf00      	nop
 810231e:	370c      	adds	r7, #12
 8102320:	46bd      	mov	sp, r7
 8102322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102326:	4770      	bx	lr

08102328 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102328:	b480      	push	{r7}
 810232a:	b083      	sub	sp, #12
 810232c:	af00      	add	r7, sp, #0
 810232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	689b      	ldr	r3, [r3, #8]
 8102334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810233c:	d101      	bne.n	8102342 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810233e:	2301      	movs	r3, #1
 8102340:	e000      	b.n	8102344 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102342:	2300      	movs	r3, #0
}
 8102344:	4618      	mov	r0, r3
 8102346:	370c      	adds	r7, #12
 8102348:	46bd      	mov	sp, r7
 810234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810234e:	4770      	bx	lr

08102350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102350:	b480      	push	{r7}
 8102352:	b083      	sub	sp, #12
 8102354:	af00      	add	r7, sp, #0
 8102356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	689b      	ldr	r3, [r3, #8]
 810235c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102364:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810236c:	bf00      	nop
 810236e:	370c      	adds	r7, #12
 8102370:	46bd      	mov	sp, r7
 8102372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102376:	4770      	bx	lr

08102378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102378:	b480      	push	{r7}
 810237a:	b083      	sub	sp, #12
 810237c:	af00      	add	r7, sp, #0
 810237e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	689b      	ldr	r3, [r3, #8]
 8102384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810238c:	d101      	bne.n	8102392 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810238e:	2301      	movs	r3, #1
 8102390:	e000      	b.n	8102394 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102392:	2300      	movs	r3, #0
}
 8102394:	4618      	mov	r0, r3
 8102396:	370c      	adds	r7, #12
 8102398:	46bd      	mov	sp, r7
 810239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239e:	4770      	bx	lr

081023a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81023a0:	b480      	push	{r7}
 81023a2:	b083      	sub	sp, #12
 81023a4:	af00      	add	r7, sp, #0
 81023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	689b      	ldr	r3, [r3, #8]
 81023ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81023b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81023b4:	f043 0201 	orr.w	r2, r3, #1
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81023bc:	bf00      	nop
 81023be:	370c      	adds	r7, #12
 81023c0:	46bd      	mov	sp, r7
 81023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c6:	4770      	bx	lr

081023c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81023c8:	b480      	push	{r7}
 81023ca:	b083      	sub	sp, #12
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	689b      	ldr	r3, [r3, #8]
 81023d4:	f003 0301 	and.w	r3, r3, #1
 81023d8:	2b01      	cmp	r3, #1
 81023da:	d101      	bne.n	81023e0 <LL_ADC_IsEnabled+0x18>
 81023dc:	2301      	movs	r3, #1
 81023de:	e000      	b.n	81023e2 <LL_ADC_IsEnabled+0x1a>
 81023e0:	2300      	movs	r3, #0
}
 81023e2:	4618      	mov	r0, r3
 81023e4:	370c      	adds	r7, #12
 81023e6:	46bd      	mov	sp, r7
 81023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ec:	4770      	bx	lr

081023ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 81023ee:	b480      	push	{r7}
 81023f0:	b083      	sub	sp, #12
 81023f2:	af00      	add	r7, sp, #0
 81023f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	689b      	ldr	r3, [r3, #8]
 81023fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81023fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102402:	f043 0204 	orr.w	r2, r3, #4
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 810240a:	bf00      	nop
 810240c:	370c      	adds	r7, #12
 810240e:	46bd      	mov	sp, r7
 8102410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102414:	4770      	bx	lr

08102416 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102416:	b480      	push	{r7}
 8102418:	b083      	sub	sp, #12
 810241a:	af00      	add	r7, sp, #0
 810241c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	689b      	ldr	r3, [r3, #8]
 8102422:	f003 0304 	and.w	r3, r3, #4
 8102426:	2b04      	cmp	r3, #4
 8102428:	d101      	bne.n	810242e <LL_ADC_REG_IsConversionOngoing+0x18>
 810242a:	2301      	movs	r3, #1
 810242c:	e000      	b.n	8102430 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810242e:	2300      	movs	r3, #0
}
 8102430:	4618      	mov	r0, r3
 8102432:	370c      	adds	r7, #12
 8102434:	46bd      	mov	sp, r7
 8102436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243a:	4770      	bx	lr

0810243c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810243c:	b480      	push	{r7}
 810243e:	b083      	sub	sp, #12
 8102440:	af00      	add	r7, sp, #0
 8102442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	689b      	ldr	r3, [r3, #8]
 8102448:	f003 0308 	and.w	r3, r3, #8
 810244c:	2b08      	cmp	r3, #8
 810244e:	d101      	bne.n	8102454 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102450:	2301      	movs	r3, #1
 8102452:	e000      	b.n	8102456 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102454:	2300      	movs	r3, #0
}
 8102456:	4618      	mov	r0, r3
 8102458:	370c      	adds	r7, #12
 810245a:	46bd      	mov	sp, r7
 810245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102460:	4770      	bx	lr
	...

08102464 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102464:	b590      	push	{r4, r7, lr}
 8102466:	b089      	sub	sp, #36	; 0x24
 8102468:	af00      	add	r7, sp, #0
 810246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810246c:	2300      	movs	r3, #0
 810246e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102470:	2300      	movs	r3, #0
 8102472:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	2b00      	cmp	r3, #0
 8102478:	d101      	bne.n	810247e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810247a:	2301      	movs	r3, #1
 810247c:	e18f      	b.n	810279e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	68db      	ldr	r3, [r3, #12]
 8102482:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102488:	2b00      	cmp	r3, #0
 810248a:	d109      	bne.n	81024a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810248c:	6878      	ldr	r0, [r7, #4]
 810248e:	f7ff fad3 	bl	8101a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	2200      	movs	r2, #0
 8102496:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	2200      	movs	r2, #0
 810249c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	4618      	mov	r0, r3
 81024a6:	f7ff ff3f 	bl	8102328 <LL_ADC_IsDeepPowerDownEnabled>
 81024aa:	4603      	mov	r3, r0
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d004      	beq.n	81024ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	4618      	mov	r0, r3
 81024b6:	f7ff ff25 	bl	8102304 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	4618      	mov	r0, r3
 81024c0:	f7ff ff5a 	bl	8102378 <LL_ADC_IsInternalRegulatorEnabled>
 81024c4:	4603      	mov	r3, r0
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d114      	bne.n	81024f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	4618      	mov	r0, r3
 81024d0:	f7ff ff3e 	bl	8102350 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81024d4:	4b88      	ldr	r3, [pc, #544]	; (81026f8 <HAL_ADC_Init+0x294>)
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	099b      	lsrs	r3, r3, #6
 81024da:	4a88      	ldr	r2, [pc, #544]	; (81026fc <HAL_ADC_Init+0x298>)
 81024dc:	fba2 2303 	umull	r2, r3, r2, r3
 81024e0:	099b      	lsrs	r3, r3, #6
 81024e2:	3301      	adds	r3, #1
 81024e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81024e6:	e002      	b.n	81024ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81024e8:	68bb      	ldr	r3, [r7, #8]
 81024ea:	3b01      	subs	r3, #1
 81024ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81024ee:	68bb      	ldr	r3, [r7, #8]
 81024f0:	2b00      	cmp	r3, #0
 81024f2:	d1f9      	bne.n	81024e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	681b      	ldr	r3, [r3, #0]
 81024f8:	4618      	mov	r0, r3
 81024fa:	f7ff ff3d 	bl	8102378 <LL_ADC_IsInternalRegulatorEnabled>
 81024fe:	4603      	mov	r3, r0
 8102500:	2b00      	cmp	r3, #0
 8102502:	d10d      	bne.n	8102520 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102508:	f043 0210 	orr.w	r2, r3, #16
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102514:	f043 0201 	orr.w	r2, r3, #1
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 810251c:	2301      	movs	r3, #1
 810251e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4618      	mov	r0, r3
 8102526:	f7ff ff76 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 810252a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102530:	f003 0310 	and.w	r3, r3, #16
 8102534:	2b00      	cmp	r3, #0
 8102536:	f040 8129 	bne.w	810278c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810253a:	697b      	ldr	r3, [r7, #20]
 810253c:	2b00      	cmp	r3, #0
 810253e:	f040 8125 	bne.w	810278c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102546:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810254a:	f043 0202 	orr.w	r2, r3, #2
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4618      	mov	r0, r3
 8102558:	f7ff ff36 	bl	81023c8 <LL_ADC_IsEnabled>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d136      	bne.n	81025d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a66      	ldr	r2, [pc, #408]	; (8102700 <HAL_ADC_Init+0x29c>)
 8102568:	4293      	cmp	r3, r2
 810256a:	d004      	beq.n	8102576 <HAL_ADC_Init+0x112>
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	4a64      	ldr	r2, [pc, #400]	; (8102704 <HAL_ADC_Init+0x2a0>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d10e      	bne.n	8102594 <HAL_ADC_Init+0x130>
 8102576:	4862      	ldr	r0, [pc, #392]	; (8102700 <HAL_ADC_Init+0x29c>)
 8102578:	f7ff ff26 	bl	81023c8 <LL_ADC_IsEnabled>
 810257c:	4604      	mov	r4, r0
 810257e:	4861      	ldr	r0, [pc, #388]	; (8102704 <HAL_ADC_Init+0x2a0>)
 8102580:	f7ff ff22 	bl	81023c8 <LL_ADC_IsEnabled>
 8102584:	4603      	mov	r3, r0
 8102586:	4323      	orrs	r3, r4
 8102588:	2b00      	cmp	r3, #0
 810258a:	bf0c      	ite	eq
 810258c:	2301      	moveq	r3, #1
 810258e:	2300      	movne	r3, #0
 8102590:	b2db      	uxtb	r3, r3
 8102592:	e008      	b.n	81025a6 <HAL_ADC_Init+0x142>
 8102594:	485c      	ldr	r0, [pc, #368]	; (8102708 <HAL_ADC_Init+0x2a4>)
 8102596:	f7ff ff17 	bl	81023c8 <LL_ADC_IsEnabled>
 810259a:	4603      	mov	r3, r0
 810259c:	2b00      	cmp	r3, #0
 810259e:	bf0c      	ite	eq
 81025a0:	2301      	moveq	r3, #1
 81025a2:	2300      	movne	r3, #0
 81025a4:	b2db      	uxtb	r3, r3
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d012      	beq.n	81025d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a54      	ldr	r2, [pc, #336]	; (8102700 <HAL_ADC_Init+0x29c>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d004      	beq.n	81025be <HAL_ADC_Init+0x15a>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a52      	ldr	r2, [pc, #328]	; (8102704 <HAL_ADC_Init+0x2a0>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d101      	bne.n	81025c2 <HAL_ADC_Init+0x15e>
 81025be:	4a53      	ldr	r2, [pc, #332]	; (810270c <HAL_ADC_Init+0x2a8>)
 81025c0:	e000      	b.n	81025c4 <HAL_ADC_Init+0x160>
 81025c2:	4a53      	ldr	r2, [pc, #332]	; (8102710 <HAL_ADC_Init+0x2ac>)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	685b      	ldr	r3, [r3, #4]
 81025c8:	4619      	mov	r1, r3
 81025ca:	4610      	mov	r0, r2
 81025cc:	f7ff fd88 	bl	81020e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81025d0:	f7ff fd7a 	bl	81020c8 <HAL_GetREVID>
 81025d4:	4603      	mov	r3, r0
 81025d6:	f241 0203 	movw	r2, #4099	; 0x1003
 81025da:	4293      	cmp	r3, r2
 81025dc:	d914      	bls.n	8102608 <HAL_ADC_Init+0x1a4>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	689b      	ldr	r3, [r3, #8]
 81025e2:	2b10      	cmp	r3, #16
 81025e4:	d110      	bne.n	8102608 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	7d5b      	ldrb	r3, [r3, #21]
 81025ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81025f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81025f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	7f1b      	ldrb	r3, [r3, #28]
 81025fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81025fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102600:	f043 030c 	orr.w	r3, r3, #12
 8102604:	61bb      	str	r3, [r7, #24]
 8102606:	e00d      	b.n	8102624 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	7d5b      	ldrb	r3, [r3, #21]
 810260c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102612:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102618:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	7f1b      	ldrb	r3, [r3, #28]
 810261e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102620:	4313      	orrs	r3, r2
 8102622:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	7f1b      	ldrb	r3, [r3, #28]
 8102628:	2b01      	cmp	r3, #1
 810262a:	d106      	bne.n	810263a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	6a1b      	ldr	r3, [r3, #32]
 8102630:	3b01      	subs	r3, #1
 8102632:	045b      	lsls	r3, r3, #17
 8102634:	69ba      	ldr	r2, [r7, #24]
 8102636:	4313      	orrs	r3, r2
 8102638:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810263e:	2b00      	cmp	r3, #0
 8102640:	d009      	beq.n	8102656 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102646:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810264e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102650:	69ba      	ldr	r2, [r7, #24]
 8102652:	4313      	orrs	r3, r2
 8102654:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	68da      	ldr	r2, [r3, #12]
 810265c:	4b2d      	ldr	r3, [pc, #180]	; (8102714 <HAL_ADC_Init+0x2b0>)
 810265e:	4013      	ands	r3, r2
 8102660:	687a      	ldr	r2, [r7, #4]
 8102662:	6812      	ldr	r2, [r2, #0]
 8102664:	69b9      	ldr	r1, [r7, #24]
 8102666:	430b      	orrs	r3, r1
 8102668:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	4618      	mov	r0, r3
 8102670:	f7ff fed1 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 8102674:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	4618      	mov	r0, r3
 810267c:	f7ff fede 	bl	810243c <LL_ADC_INJ_IsConversionOngoing>
 8102680:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102682:	693b      	ldr	r3, [r7, #16]
 8102684:	2b00      	cmp	r3, #0
 8102686:	d15f      	bne.n	8102748 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	2b00      	cmp	r3, #0
 810268c:	d15c      	bne.n	8102748 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	7d1b      	ldrb	r3, [r3, #20]
 8102692:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8102698:	4313      	orrs	r3, r2
 810269a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	68db      	ldr	r3, [r3, #12]
 81026a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81026a6:	f023 0303 	bic.w	r3, r3, #3
 81026aa:	687a      	ldr	r2, [r7, #4]
 81026ac:	6812      	ldr	r2, [r2, #0]
 81026ae:	69b9      	ldr	r1, [r7, #24]
 81026b0:	430b      	orrs	r3, r1
 81026b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81026ba:	2b01      	cmp	r3, #1
 81026bc:	d12e      	bne.n	810271c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	691a      	ldr	r2, [r3, #16]
 81026ca:	4b13      	ldr	r3, [pc, #76]	; (8102718 <HAL_ADC_Init+0x2b4>)
 81026cc:	4013      	ands	r3, r2
 81026ce:	687a      	ldr	r2, [r7, #4]
 81026d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81026d2:	3a01      	subs	r2, #1
 81026d4:	0411      	lsls	r1, r2, #16
 81026d6:	687a      	ldr	r2, [r7, #4]
 81026d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81026da:	4311      	orrs	r1, r2
 81026dc:	687a      	ldr	r2, [r7, #4]
 81026de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81026e0:	4311      	orrs	r1, r2
 81026e2:	687a      	ldr	r2, [r7, #4]
 81026e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81026e6:	430a      	orrs	r2, r1
 81026e8:	431a      	orrs	r2, r3
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	f042 0201 	orr.w	r2, r2, #1
 81026f2:	611a      	str	r2, [r3, #16]
 81026f4:	e01a      	b.n	810272c <HAL_ADC_Init+0x2c8>
 81026f6:	bf00      	nop
 81026f8:	10000000 	.word	0x10000000
 81026fc:	053e2d63 	.word	0x053e2d63
 8102700:	40022000 	.word	0x40022000
 8102704:	40022100 	.word	0x40022100
 8102708:	58026000 	.word	0x58026000
 810270c:	40022300 	.word	0x40022300
 8102710:	58026300 	.word	0x58026300
 8102714:	fff0c003 	.word	0xfff0c003
 8102718:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	691a      	ldr	r2, [r3, #16]
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	f022 0201 	bic.w	r2, r2, #1
 810272a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	691b      	ldr	r3, [r3, #16]
 8102732:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	430a      	orrs	r2, r1
 8102740:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102742:	6878      	ldr	r0, [r7, #4]
 8102744:	f000 fcd4 	bl	81030f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	68db      	ldr	r3, [r3, #12]
 810274c:	2b01      	cmp	r3, #1
 810274e:	d10c      	bne.n	810276a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102756:	f023 010f 	bic.w	r1, r3, #15
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	699b      	ldr	r3, [r3, #24]
 810275e:	1e5a      	subs	r2, r3, #1
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	430a      	orrs	r2, r1
 8102766:	631a      	str	r2, [r3, #48]	; 0x30
 8102768:	e007      	b.n	810277a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	681b      	ldr	r3, [r3, #0]
 8102774:	f022 020f 	bic.w	r2, r2, #15
 8102778:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810277e:	f023 0303 	bic.w	r3, r3, #3
 8102782:	f043 0201 	orr.w	r2, r3, #1
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	655a      	str	r2, [r3, #84]	; 0x54
 810278a:	e007      	b.n	810279c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102790:	f043 0210 	orr.w	r2, r3, #16
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102798:	2301      	movs	r3, #1
 810279a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810279c:	7ffb      	ldrb	r3, [r7, #31]
}
 810279e:	4618      	mov	r0, r3
 81027a0:	3724      	adds	r7, #36	; 0x24
 81027a2:	46bd      	mov	sp, r7
 81027a4:	bd90      	pop	{r4, r7, pc}
 81027a6:	bf00      	nop

081027a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81027a8:	b580      	push	{r7, lr}
 81027aa:	b086      	sub	sp, #24
 81027ac:	af00      	add	r7, sp, #0
 81027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	4a5d      	ldr	r2, [pc, #372]	; (810292c <HAL_ADC_Start+0x184>)
 81027b6:	4293      	cmp	r3, r2
 81027b8:	d004      	beq.n	81027c4 <HAL_ADC_Start+0x1c>
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	4a5c      	ldr	r2, [pc, #368]	; (8102930 <HAL_ADC_Start+0x188>)
 81027c0:	4293      	cmp	r3, r2
 81027c2:	d101      	bne.n	81027c8 <HAL_ADC_Start+0x20>
 81027c4:	4b5b      	ldr	r3, [pc, #364]	; (8102934 <HAL_ADC_Start+0x18c>)
 81027c6:	e000      	b.n	81027ca <HAL_ADC_Start+0x22>
 81027c8:	4b5b      	ldr	r3, [pc, #364]	; (8102938 <HAL_ADC_Start+0x190>)
 81027ca:	4618      	mov	r0, r3
 81027cc:	f7ff fd8c 	bl	81022e8 <LL_ADC_GetMultimode>
 81027d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	4618      	mov	r0, r3
 81027d8:	f7ff fe1d 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 81027dc:	4603      	mov	r3, r0
 81027de:	2b00      	cmp	r3, #0
 81027e0:	f040 809c 	bne.w	810291c <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81027ea:	2b01      	cmp	r3, #1
 81027ec:	d101      	bne.n	81027f2 <HAL_ADC_Start+0x4a>
 81027ee:	2302      	movs	r3, #2
 81027f0:	e097      	b.n	8102922 <HAL_ADC_Start+0x17a>
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	2201      	movs	r2, #1
 81027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 81027fa:	6878      	ldr	r0, [r7, #4]
 81027fc:	f000 fbee 	bl	8102fdc <ADC_Enable>
 8102800:	4603      	mov	r3, r0
 8102802:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8102804:	7dfb      	ldrb	r3, [r7, #23]
 8102806:	2b00      	cmp	r3, #0
 8102808:	f040 8083 	bne.w	8102912 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102814:	f023 0301 	bic.w	r3, r3, #1
 8102818:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	4a42      	ldr	r2, [pc, #264]	; (8102930 <HAL_ADC_Start+0x188>)
 8102826:	4293      	cmp	r3, r2
 8102828:	d002      	beq.n	8102830 <HAL_ADC_Start+0x88>
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	e000      	b.n	8102832 <HAL_ADC_Start+0x8a>
 8102830:	4b3e      	ldr	r3, [pc, #248]	; (810292c <HAL_ADC_Start+0x184>)
 8102832:	687a      	ldr	r2, [r7, #4]
 8102834:	6812      	ldr	r2, [r2, #0]
 8102836:	4293      	cmp	r3, r2
 8102838:	d002      	beq.n	8102840 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810283a:	693b      	ldr	r3, [r7, #16]
 810283c:	2b00      	cmp	r3, #0
 810283e:	d105      	bne.n	810284c <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102844:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102858:	d106      	bne.n	8102868 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810285e:	f023 0206 	bic.w	r2, r3, #6
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	659a      	str	r2, [r3, #88]	; 0x58
 8102866:	e002      	b.n	810286e <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	2200      	movs	r2, #0
 810286c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	221c      	movs	r2, #28
 8102874:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	2200      	movs	r2, #0
 810287a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4a2b      	ldr	r2, [pc, #172]	; (8102930 <HAL_ADC_Start+0x188>)
 8102884:	4293      	cmp	r3, r2
 8102886:	d002      	beq.n	810288e <HAL_ADC_Start+0xe6>
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	e000      	b.n	8102890 <HAL_ADC_Start+0xe8>
 810288e:	4b27      	ldr	r3, [pc, #156]	; (810292c <HAL_ADC_Start+0x184>)
 8102890:	687a      	ldr	r2, [r7, #4]
 8102892:	6812      	ldr	r2, [r2, #0]
 8102894:	4293      	cmp	r3, r2
 8102896:	d008      	beq.n	81028aa <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102898:	693b      	ldr	r3, [r7, #16]
 810289a:	2b00      	cmp	r3, #0
 810289c:	d005      	beq.n	81028aa <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810289e:	693b      	ldr	r3, [r7, #16]
 81028a0:	2b05      	cmp	r3, #5
 81028a2:	d002      	beq.n	81028aa <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81028a4:	693b      	ldr	r3, [r7, #16]
 81028a6:	2b09      	cmp	r3, #9
 81028a8:	d114      	bne.n	81028d4 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	68db      	ldr	r3, [r3, #12]
 81028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81028b4:	2b00      	cmp	r3, #0
 81028b6:	d007      	beq.n	81028c8 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 81028c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	4618      	mov	r0, r3
 81028ce:	f7ff fd8e 	bl	81023ee <LL_ADC_REG_StartConversion>
 81028d2:	e025      	b.n	8102920 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4a12      	ldr	r2, [pc, #72]	; (8102930 <HAL_ADC_Start+0x188>)
 81028e6:	4293      	cmp	r3, r2
 81028e8:	d002      	beq.n	81028f0 <HAL_ADC_Start+0x148>
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	e000      	b.n	81028f2 <HAL_ADC_Start+0x14a>
 81028f0:	4b0e      	ldr	r3, [pc, #56]	; (810292c <HAL_ADC_Start+0x184>)
 81028f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	68db      	ldr	r3, [r3, #12]
 81028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d00f      	beq.n	8102920 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102908:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	655a      	str	r2, [r3, #84]	; 0x54
 8102910:	e006      	b.n	8102920 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	2200      	movs	r2, #0
 8102916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 810291a:	e001      	b.n	8102920 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 810291c:	2302      	movs	r3, #2
 810291e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102920:	7dfb      	ldrb	r3, [r7, #23]
}
 8102922:	4618      	mov	r0, r3
 8102924:	3718      	adds	r7, #24
 8102926:	46bd      	mov	sp, r7
 8102928:	bd80      	pop	{r7, pc}
 810292a:	bf00      	nop
 810292c:	40022000 	.word	0x40022000
 8102930:	40022100 	.word	0x40022100
 8102934:	40022300 	.word	0x40022300
 8102938:	58026300 	.word	0x58026300

0810293c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810293c:	b590      	push	{r4, r7, lr}
 810293e:	b0a1      	sub	sp, #132	; 0x84
 8102940:	af00      	add	r7, sp, #0
 8102942:	6078      	str	r0, [r7, #4]
 8102944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102946:	2300      	movs	r3, #0
 8102948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810294c:	2300      	movs	r3, #0
 810294e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102950:	683b      	ldr	r3, [r7, #0]
 8102952:	68db      	ldr	r3, [r3, #12]
 8102954:	4a9d      	ldr	r2, [pc, #628]	; (8102bcc <HAL_ADC_ConfigChannel+0x290>)
 8102956:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810295e:	2b01      	cmp	r3, #1
 8102960:	d101      	bne.n	8102966 <HAL_ADC_ConfigChannel+0x2a>
 8102962:	2302      	movs	r3, #2
 8102964:	e321      	b.n	8102faa <HAL_ADC_ConfigChannel+0x66e>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	2201      	movs	r2, #1
 810296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4618      	mov	r0, r3
 8102974:	f7ff fd4f 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 8102978:	4603      	mov	r3, r0
 810297a:	2b00      	cmp	r3, #0
 810297c:	f040 8306 	bne.w	8102f8c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102980:	683b      	ldr	r3, [r7, #0]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102988:	2b00      	cmp	r3, #0
 810298a:	d108      	bne.n	810299e <HAL_ADC_ConfigChannel+0x62>
 810298c:	683b      	ldr	r3, [r7, #0]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	0e9b      	lsrs	r3, r3, #26
 8102992:	f003 031f 	and.w	r3, r3, #31
 8102996:	2201      	movs	r2, #1
 8102998:	fa02 f303 	lsl.w	r3, r2, r3
 810299c:	e016      	b.n	81029cc <HAL_ADC_ConfigChannel+0x90>
 810299e:	683b      	ldr	r3, [r7, #0]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81029a6:	fa93 f3a3 	rbit	r3, r3
 81029aa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81029ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81029ae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81029b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81029b2:	2b00      	cmp	r3, #0
 81029b4:	d101      	bne.n	81029ba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81029b6:	2320      	movs	r3, #32
 81029b8:	e003      	b.n	81029c2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81029ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81029bc:	fab3 f383 	clz	r3, r3
 81029c0:	b2db      	uxtb	r3, r3
 81029c2:	f003 031f 	and.w	r3, r3, #31
 81029c6:	2201      	movs	r2, #1
 81029c8:	fa02 f303 	lsl.w	r3, r2, r3
 81029cc:	687a      	ldr	r2, [r7, #4]
 81029ce:	6812      	ldr	r2, [r2, #0]
 81029d0:	69d1      	ldr	r1, [r2, #28]
 81029d2:	687a      	ldr	r2, [r7, #4]
 81029d4:	6812      	ldr	r2, [r2, #0]
 81029d6:	430b      	orrs	r3, r1
 81029d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	6818      	ldr	r0, [r3, #0]
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	6859      	ldr	r1, [r3, #4]
 81029e2:	683b      	ldr	r3, [r7, #0]
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	461a      	mov	r2, r3
 81029e8:	f7ff fc02 	bl	81021f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	4618      	mov	r0, r3
 81029f2:	f7ff fd10 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 81029f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	4618      	mov	r0, r3
 81029fe:	f7ff fd1d 	bl	810243c <LL_ADC_INJ_IsConversionOngoing>
 8102a02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102a06:	2b00      	cmp	r3, #0
 8102a08:	f040 80b3 	bne.w	8102b72 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102a0e:	2b00      	cmp	r3, #0
 8102a10:	f040 80af 	bne.w	8102b72 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	6818      	ldr	r0, [r3, #0]
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	6819      	ldr	r1, [r3, #0]
 8102a1c:	683b      	ldr	r3, [r7, #0]
 8102a1e:	689b      	ldr	r3, [r3, #8]
 8102a20:	461a      	mov	r2, r3
 8102a22:	f7ff fc11 	bl	8102248 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102a26:	4b6a      	ldr	r3, [pc, #424]	; (8102bd0 <HAL_ADC_ConfigChannel+0x294>)
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a32:	d10b      	bne.n	8102a4c <HAL_ADC_ConfigChannel+0x110>
 8102a34:	683b      	ldr	r3, [r7, #0]
 8102a36:	695a      	ldr	r2, [r3, #20]
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	68db      	ldr	r3, [r3, #12]
 8102a3e:	089b      	lsrs	r3, r3, #2
 8102a40:	f003 0307 	and.w	r3, r3, #7
 8102a44:	005b      	lsls	r3, r3, #1
 8102a46:	fa02 f303 	lsl.w	r3, r2, r3
 8102a4a:	e01d      	b.n	8102a88 <HAL_ADC_ConfigChannel+0x14c>
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	68db      	ldr	r3, [r3, #12]
 8102a52:	f003 0310 	and.w	r3, r3, #16
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	d10b      	bne.n	8102a72 <HAL_ADC_ConfigChannel+0x136>
 8102a5a:	683b      	ldr	r3, [r7, #0]
 8102a5c:	695a      	ldr	r2, [r3, #20]
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	68db      	ldr	r3, [r3, #12]
 8102a64:	089b      	lsrs	r3, r3, #2
 8102a66:	f003 0307 	and.w	r3, r3, #7
 8102a6a:	005b      	lsls	r3, r3, #1
 8102a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8102a70:	e00a      	b.n	8102a88 <HAL_ADC_ConfigChannel+0x14c>
 8102a72:	683b      	ldr	r3, [r7, #0]
 8102a74:	695a      	ldr	r2, [r3, #20]
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	68db      	ldr	r3, [r3, #12]
 8102a7c:	089b      	lsrs	r3, r3, #2
 8102a7e:	f003 0304 	and.w	r3, r3, #4
 8102a82:	005b      	lsls	r3, r3, #1
 8102a84:	fa02 f303 	lsl.w	r3, r2, r3
 8102a88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102a8a:	683b      	ldr	r3, [r7, #0]
 8102a8c:	691b      	ldr	r3, [r3, #16]
 8102a8e:	2b04      	cmp	r3, #4
 8102a90:	d027      	beq.n	8102ae2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	6818      	ldr	r0, [r3, #0]
 8102a96:	683b      	ldr	r3, [r7, #0]
 8102a98:	6919      	ldr	r1, [r3, #16]
 8102a9a:	683b      	ldr	r3, [r7, #0]
 8102a9c:	681a      	ldr	r2, [r3, #0]
 8102a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102aa0:	f7ff fb52 	bl	8102148 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6818      	ldr	r0, [r3, #0]
 8102aa8:	683b      	ldr	r3, [r7, #0]
 8102aaa:	6919      	ldr	r1, [r3, #16]
 8102aac:	683b      	ldr	r3, [r7, #0]
 8102aae:	7e5b      	ldrb	r3, [r3, #25]
 8102ab0:	2b01      	cmp	r3, #1
 8102ab2:	d102      	bne.n	8102aba <HAL_ADC_ConfigChannel+0x17e>
 8102ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102ab8:	e000      	b.n	8102abc <HAL_ADC_ConfigChannel+0x180>
 8102aba:	2300      	movs	r3, #0
 8102abc:	461a      	mov	r2, r3
 8102abe:	f7ff fb7c 	bl	81021ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	6818      	ldr	r0, [r3, #0]
 8102ac6:	683b      	ldr	r3, [r7, #0]
 8102ac8:	6919      	ldr	r1, [r3, #16]
 8102aca:	683b      	ldr	r3, [r7, #0]
 8102acc:	7e1b      	ldrb	r3, [r3, #24]
 8102ace:	2b01      	cmp	r3, #1
 8102ad0:	d102      	bne.n	8102ad8 <HAL_ADC_ConfigChannel+0x19c>
 8102ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102ad6:	e000      	b.n	8102ada <HAL_ADC_ConfigChannel+0x19e>
 8102ad8:	2300      	movs	r3, #0
 8102ada:	461a      	mov	r2, r3
 8102adc:	f7ff fb54 	bl	8102188 <LL_ADC_SetDataRightShift>
 8102ae0:	e047      	b.n	8102b72 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102aec:	683b      	ldr	r3, [r7, #0]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	069b      	lsls	r3, r3, #26
 8102af2:	429a      	cmp	r2, r3
 8102af4:	d107      	bne.n	8102b06 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b04:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b10:	683b      	ldr	r3, [r7, #0]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	069b      	lsls	r3, r3, #26
 8102b16:	429a      	cmp	r2, r3
 8102b18:	d107      	bne.n	8102b2a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	681b      	ldr	r3, [r3, #0]
 8102b24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b28:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b34:	683b      	ldr	r3, [r7, #0]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	069b      	lsls	r3, r3, #26
 8102b3a:	429a      	cmp	r2, r3
 8102b3c:	d107      	bne.n	8102b4e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102b3e:	687b      	ldr	r3, [r7, #4]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b4c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b58:	683b      	ldr	r3, [r7, #0]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	069b      	lsls	r3, r3, #26
 8102b5e:	429a      	cmp	r2, r3
 8102b60:	d107      	bne.n	8102b72 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4618      	mov	r0, r3
 8102b78:	f7ff fc26 	bl	81023c8 <LL_ADC_IsEnabled>
 8102b7c:	4603      	mov	r3, r0
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	f040 820d 	bne.w	8102f9e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	6818      	ldr	r0, [r3, #0]
 8102b88:	683b      	ldr	r3, [r7, #0]
 8102b8a:	6819      	ldr	r1, [r3, #0]
 8102b8c:	683b      	ldr	r3, [r7, #0]
 8102b8e:	68db      	ldr	r3, [r3, #12]
 8102b90:	461a      	mov	r2, r3
 8102b92:	f7ff fb85 	bl	81022a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102b96:	683b      	ldr	r3, [r7, #0]
 8102b98:	68db      	ldr	r3, [r3, #12]
 8102b9a:	4a0c      	ldr	r2, [pc, #48]	; (8102bcc <HAL_ADC_ConfigChannel+0x290>)
 8102b9c:	4293      	cmp	r3, r2
 8102b9e:	f040 8133 	bne.w	8102e08 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ba6:	683b      	ldr	r3, [r7, #0]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102bae:	2b00      	cmp	r3, #0
 8102bb0:	d110      	bne.n	8102bd4 <HAL_ADC_ConfigChannel+0x298>
 8102bb2:	683b      	ldr	r3, [r7, #0]
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	0e9b      	lsrs	r3, r3, #26
 8102bb8:	3301      	adds	r3, #1
 8102bba:	f003 031f 	and.w	r3, r3, #31
 8102bbe:	2b09      	cmp	r3, #9
 8102bc0:	bf94      	ite	ls
 8102bc2:	2301      	movls	r3, #1
 8102bc4:	2300      	movhi	r3, #0
 8102bc6:	b2db      	uxtb	r3, r3
 8102bc8:	e01e      	b.n	8102c08 <HAL_ADC_ConfigChannel+0x2cc>
 8102bca:	bf00      	nop
 8102bcc:	47ff0000 	.word	0x47ff0000
 8102bd0:	5c001000 	.word	0x5c001000
 8102bd4:	683b      	ldr	r3, [r7, #0]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102bdc:	fa93 f3a3 	rbit	r3, r3
 8102be0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d101      	bne.n	8102bf0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102bec:	2320      	movs	r3, #32
 8102bee:	e003      	b.n	8102bf8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102bf2:	fab3 f383 	clz	r3, r3
 8102bf6:	b2db      	uxtb	r3, r3
 8102bf8:	3301      	adds	r3, #1
 8102bfa:	f003 031f 	and.w	r3, r3, #31
 8102bfe:	2b09      	cmp	r3, #9
 8102c00:	bf94      	ite	ls
 8102c02:	2301      	movls	r3, #1
 8102c04:	2300      	movhi	r3, #0
 8102c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d079      	beq.n	8102d00 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c0c:	683b      	ldr	r3, [r7, #0]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c14:	2b00      	cmp	r3, #0
 8102c16:	d107      	bne.n	8102c28 <HAL_ADC_ConfigChannel+0x2ec>
 8102c18:	683b      	ldr	r3, [r7, #0]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	0e9b      	lsrs	r3, r3, #26
 8102c1e:	3301      	adds	r3, #1
 8102c20:	069b      	lsls	r3, r3, #26
 8102c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c26:	e015      	b.n	8102c54 <HAL_ADC_ConfigChannel+0x318>
 8102c28:	683b      	ldr	r3, [r7, #0]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102c30:	fa93 f3a3 	rbit	r3, r3
 8102c34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102c38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c3c:	2b00      	cmp	r3, #0
 8102c3e:	d101      	bne.n	8102c44 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102c40:	2320      	movs	r3, #32
 8102c42:	e003      	b.n	8102c4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c46:	fab3 f383 	clz	r3, r3
 8102c4a:	b2db      	uxtb	r3, r3
 8102c4c:	3301      	adds	r3, #1
 8102c4e:	069b      	lsls	r3, r3, #26
 8102c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c54:	683b      	ldr	r3, [r7, #0]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d109      	bne.n	8102c74 <HAL_ADC_ConfigChannel+0x338>
 8102c60:	683b      	ldr	r3, [r7, #0]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	0e9b      	lsrs	r3, r3, #26
 8102c66:	3301      	adds	r3, #1
 8102c68:	f003 031f 	and.w	r3, r3, #31
 8102c6c:	2101      	movs	r1, #1
 8102c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8102c72:	e017      	b.n	8102ca4 <HAL_ADC_ConfigChannel+0x368>
 8102c74:	683b      	ldr	r3, [r7, #0]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102c7c:	fa93 f3a3 	rbit	r3, r3
 8102c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102c84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c88:	2b00      	cmp	r3, #0
 8102c8a:	d101      	bne.n	8102c90 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102c8c:	2320      	movs	r3, #32
 8102c8e:	e003      	b.n	8102c98 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c92:	fab3 f383 	clz	r3, r3
 8102c96:	b2db      	uxtb	r3, r3
 8102c98:	3301      	adds	r3, #1
 8102c9a:	f003 031f 	and.w	r3, r3, #31
 8102c9e:	2101      	movs	r1, #1
 8102ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8102ca4:	ea42 0103 	orr.w	r1, r2, r3
 8102ca8:	683b      	ldr	r3, [r7, #0]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d10a      	bne.n	8102cca <HAL_ADC_ConfigChannel+0x38e>
 8102cb4:	683b      	ldr	r3, [r7, #0]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	0e9b      	lsrs	r3, r3, #26
 8102cba:	3301      	adds	r3, #1
 8102cbc:	f003 021f 	and.w	r2, r3, #31
 8102cc0:	4613      	mov	r3, r2
 8102cc2:	005b      	lsls	r3, r3, #1
 8102cc4:	4413      	add	r3, r2
 8102cc6:	051b      	lsls	r3, r3, #20
 8102cc8:	e018      	b.n	8102cfc <HAL_ADC_ConfigChannel+0x3c0>
 8102cca:	683b      	ldr	r3, [r7, #0]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102cd2:	fa93 f3a3 	rbit	r3, r3
 8102cd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102cda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d101      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102ce2:	2320      	movs	r3, #32
 8102ce4:	e003      	b.n	8102cee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102ce8:	fab3 f383 	clz	r3, r3
 8102cec:	b2db      	uxtb	r3, r3
 8102cee:	3301      	adds	r3, #1
 8102cf0:	f003 021f 	and.w	r2, r3, #31
 8102cf4:	4613      	mov	r3, r2
 8102cf6:	005b      	lsls	r3, r3, #1
 8102cf8:	4413      	add	r3, r2
 8102cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102cfc:	430b      	orrs	r3, r1
 8102cfe:	e07e      	b.n	8102dfe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102d00:	683b      	ldr	r3, [r7, #0]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d08:	2b00      	cmp	r3, #0
 8102d0a:	d107      	bne.n	8102d1c <HAL_ADC_ConfigChannel+0x3e0>
 8102d0c:	683b      	ldr	r3, [r7, #0]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	0e9b      	lsrs	r3, r3, #26
 8102d12:	3301      	adds	r3, #1
 8102d14:	069b      	lsls	r3, r3, #26
 8102d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d1a:	e015      	b.n	8102d48 <HAL_ADC_ConfigChannel+0x40c>
 8102d1c:	683b      	ldr	r3, [r7, #0]
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d24:	fa93 f3a3 	rbit	r3, r3
 8102d28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d30:	2b00      	cmp	r3, #0
 8102d32:	d101      	bne.n	8102d38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102d34:	2320      	movs	r3, #32
 8102d36:	e003      	b.n	8102d40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d3a:	fab3 f383 	clz	r3, r3
 8102d3e:	b2db      	uxtb	r3, r3
 8102d40:	3301      	adds	r3, #1
 8102d42:	069b      	lsls	r3, r3, #26
 8102d44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d48:	683b      	ldr	r3, [r7, #0]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d109      	bne.n	8102d68 <HAL_ADC_ConfigChannel+0x42c>
 8102d54:	683b      	ldr	r3, [r7, #0]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	0e9b      	lsrs	r3, r3, #26
 8102d5a:	3301      	adds	r3, #1
 8102d5c:	f003 031f 	and.w	r3, r3, #31
 8102d60:	2101      	movs	r1, #1
 8102d62:	fa01 f303 	lsl.w	r3, r1, r3
 8102d66:	e017      	b.n	8102d98 <HAL_ADC_ConfigChannel+0x45c>
 8102d68:	683b      	ldr	r3, [r7, #0]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d6e:	69fb      	ldr	r3, [r7, #28]
 8102d70:	fa93 f3a3 	rbit	r3, r3
 8102d74:	61bb      	str	r3, [r7, #24]
  return result;
 8102d76:	69bb      	ldr	r3, [r7, #24]
 8102d78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102d7a:	6a3b      	ldr	r3, [r7, #32]
 8102d7c:	2b00      	cmp	r3, #0
 8102d7e:	d101      	bne.n	8102d84 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102d80:	2320      	movs	r3, #32
 8102d82:	e003      	b.n	8102d8c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102d84:	6a3b      	ldr	r3, [r7, #32]
 8102d86:	fab3 f383 	clz	r3, r3
 8102d8a:	b2db      	uxtb	r3, r3
 8102d8c:	3301      	adds	r3, #1
 8102d8e:	f003 031f 	and.w	r3, r3, #31
 8102d92:	2101      	movs	r1, #1
 8102d94:	fa01 f303 	lsl.w	r3, r1, r3
 8102d98:	ea42 0103 	orr.w	r1, r2, r3
 8102d9c:	683b      	ldr	r3, [r7, #0]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d10d      	bne.n	8102dc4 <HAL_ADC_ConfigChannel+0x488>
 8102da8:	683b      	ldr	r3, [r7, #0]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	0e9b      	lsrs	r3, r3, #26
 8102dae:	3301      	adds	r3, #1
 8102db0:	f003 021f 	and.w	r2, r3, #31
 8102db4:	4613      	mov	r3, r2
 8102db6:	005b      	lsls	r3, r3, #1
 8102db8:	4413      	add	r3, r2
 8102dba:	3b1e      	subs	r3, #30
 8102dbc:	051b      	lsls	r3, r3, #20
 8102dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102dc2:	e01b      	b.n	8102dfc <HAL_ADC_ConfigChannel+0x4c0>
 8102dc4:	683b      	ldr	r3, [r7, #0]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dca:	693b      	ldr	r3, [r7, #16]
 8102dcc:	fa93 f3a3 	rbit	r3, r3
 8102dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102dd6:	697b      	ldr	r3, [r7, #20]
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	d101      	bne.n	8102de0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102ddc:	2320      	movs	r3, #32
 8102dde:	e003      	b.n	8102de8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102de0:	697b      	ldr	r3, [r7, #20]
 8102de2:	fab3 f383 	clz	r3, r3
 8102de6:	b2db      	uxtb	r3, r3
 8102de8:	3301      	adds	r3, #1
 8102dea:	f003 021f 	and.w	r2, r3, #31
 8102dee:	4613      	mov	r3, r2
 8102df0:	005b      	lsls	r3, r3, #1
 8102df2:	4413      	add	r3, r2
 8102df4:	3b1e      	subs	r3, #30
 8102df6:	051b      	lsls	r3, r3, #20
 8102df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102dfc:	430b      	orrs	r3, r1
 8102dfe:	683a      	ldr	r2, [r7, #0]
 8102e00:	6892      	ldr	r2, [r2, #8]
 8102e02:	4619      	mov	r1, r3
 8102e04:	f7ff fa20 	bl	8102248 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102e08:	683b      	ldr	r3, [r7, #0]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	2b00      	cmp	r3, #0
 8102e0e:	f280 80c6 	bge.w	8102f9e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a67      	ldr	r2, [pc, #412]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d004      	beq.n	8102e26 <HAL_ADC_ConfigChannel+0x4ea>
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a65      	ldr	r2, [pc, #404]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d101      	bne.n	8102e2a <HAL_ADC_ConfigChannel+0x4ee>
 8102e26:	4b65      	ldr	r3, [pc, #404]	; (8102fbc <HAL_ADC_ConfigChannel+0x680>)
 8102e28:	e000      	b.n	8102e2c <HAL_ADC_ConfigChannel+0x4f0>
 8102e2a:	4b65      	ldr	r3, [pc, #404]	; (8102fc0 <HAL_ADC_ConfigChannel+0x684>)
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f7ff f97d 	bl	810212c <LL_ADC_GetCommonPathInternalCh>
 8102e32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a5e      	ldr	r2, [pc, #376]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d004      	beq.n	8102e48 <HAL_ADC_ConfigChannel+0x50c>
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a5d      	ldr	r2, [pc, #372]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d10e      	bne.n	8102e66 <HAL_ADC_ConfigChannel+0x52a>
 8102e48:	485a      	ldr	r0, [pc, #360]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102e4a:	f7ff fabd 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e4e:	4604      	mov	r4, r0
 8102e50:	4859      	ldr	r0, [pc, #356]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102e52:	f7ff fab9 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e56:	4603      	mov	r3, r0
 8102e58:	4323      	orrs	r3, r4
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	bf0c      	ite	eq
 8102e5e:	2301      	moveq	r3, #1
 8102e60:	2300      	movne	r3, #0
 8102e62:	b2db      	uxtb	r3, r3
 8102e64:	e008      	b.n	8102e78 <HAL_ADC_ConfigChannel+0x53c>
 8102e66:	4857      	ldr	r0, [pc, #348]	; (8102fc4 <HAL_ADC_ConfigChannel+0x688>)
 8102e68:	f7ff faae 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	bf0c      	ite	eq
 8102e72:	2301      	moveq	r3, #1
 8102e74:	2300      	movne	r3, #0
 8102e76:	b2db      	uxtb	r3, r3
 8102e78:	2b00      	cmp	r3, #0
 8102e7a:	d07d      	beq.n	8102f78 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102e7c:	683b      	ldr	r3, [r7, #0]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	4a51      	ldr	r2, [pc, #324]	; (8102fc8 <HAL_ADC_ConfigChannel+0x68c>)
 8102e82:	4293      	cmp	r3, r2
 8102e84:	d130      	bne.n	8102ee8 <HAL_ADC_ConfigChannel+0x5ac>
 8102e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102e8c:	2b00      	cmp	r3, #0
 8102e8e:	d12b      	bne.n	8102ee8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	4a4b      	ldr	r2, [pc, #300]	; (8102fc4 <HAL_ADC_ConfigChannel+0x688>)
 8102e96:	4293      	cmp	r3, r2
 8102e98:	f040 8081 	bne.w	8102f9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4a44      	ldr	r2, [pc, #272]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102ea2:	4293      	cmp	r3, r2
 8102ea4:	d004      	beq.n	8102eb0 <HAL_ADC_ConfigChannel+0x574>
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	4a43      	ldr	r2, [pc, #268]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102eac:	4293      	cmp	r3, r2
 8102eae:	d101      	bne.n	8102eb4 <HAL_ADC_ConfigChannel+0x578>
 8102eb0:	4a42      	ldr	r2, [pc, #264]	; (8102fbc <HAL_ADC_ConfigChannel+0x680>)
 8102eb2:	e000      	b.n	8102eb6 <HAL_ADC_ConfigChannel+0x57a>
 8102eb4:	4a42      	ldr	r2, [pc, #264]	; (8102fc0 <HAL_ADC_ConfigChannel+0x684>)
 8102eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102ebc:	4619      	mov	r1, r3
 8102ebe:	4610      	mov	r0, r2
 8102ec0:	f7ff f921 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102ec4:	4b41      	ldr	r3, [pc, #260]	; (8102fcc <HAL_ADC_ConfigChannel+0x690>)
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	099b      	lsrs	r3, r3, #6
 8102eca:	4a41      	ldr	r2, [pc, #260]	; (8102fd0 <HAL_ADC_ConfigChannel+0x694>)
 8102ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8102ed0:	099b      	lsrs	r3, r3, #6
 8102ed2:	3301      	adds	r3, #1
 8102ed4:	005b      	lsls	r3, r3, #1
 8102ed6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102ed8:	e002      	b.n	8102ee0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102eda:	68bb      	ldr	r3, [r7, #8]
 8102edc:	3b01      	subs	r3, #1
 8102ede:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102ee0:	68bb      	ldr	r3, [r7, #8]
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d1f9      	bne.n	8102eda <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102ee6:	e05a      	b.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102ee8:	683b      	ldr	r3, [r7, #0]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a39      	ldr	r2, [pc, #228]	; (8102fd4 <HAL_ADC_ConfigChannel+0x698>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d11e      	bne.n	8102f30 <HAL_ADC_ConfigChannel+0x5f4>
 8102ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102ef8:	2b00      	cmp	r3, #0
 8102efa:	d119      	bne.n	8102f30 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a30      	ldr	r2, [pc, #192]	; (8102fc4 <HAL_ADC_ConfigChannel+0x688>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d14b      	bne.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a2a      	ldr	r2, [pc, #168]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d004      	beq.n	8102f1a <HAL_ADC_ConfigChannel+0x5de>
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a28      	ldr	r2, [pc, #160]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d101      	bne.n	8102f1e <HAL_ADC_ConfigChannel+0x5e2>
 8102f1a:	4a28      	ldr	r2, [pc, #160]	; (8102fbc <HAL_ADC_ConfigChannel+0x680>)
 8102f1c:	e000      	b.n	8102f20 <HAL_ADC_ConfigChannel+0x5e4>
 8102f1e:	4a28      	ldr	r2, [pc, #160]	; (8102fc0 <HAL_ADC_ConfigChannel+0x684>)
 8102f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102f26:	4619      	mov	r1, r3
 8102f28:	4610      	mov	r0, r2
 8102f2a:	f7ff f8ec 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f2e:	e036      	b.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102f30:	683b      	ldr	r3, [r7, #0]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a28      	ldr	r2, [pc, #160]	; (8102fd8 <HAL_ADC_ConfigChannel+0x69c>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d131      	bne.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
 8102f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d12c      	bne.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a1e      	ldr	r2, [pc, #120]	; (8102fc4 <HAL_ADC_ConfigChannel+0x688>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d127      	bne.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a18      	ldr	r2, [pc, #96]	; (8102fb4 <HAL_ADC_ConfigChannel+0x678>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d004      	beq.n	8102f62 <HAL_ADC_ConfigChannel+0x626>
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a16      	ldr	r2, [pc, #88]	; (8102fb8 <HAL_ADC_ConfigChannel+0x67c>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d101      	bne.n	8102f66 <HAL_ADC_ConfigChannel+0x62a>
 8102f62:	4a16      	ldr	r2, [pc, #88]	; (8102fbc <HAL_ADC_ConfigChannel+0x680>)
 8102f64:	e000      	b.n	8102f68 <HAL_ADC_ConfigChannel+0x62c>
 8102f66:	4a16      	ldr	r2, [pc, #88]	; (8102fc0 <HAL_ADC_ConfigChannel+0x684>)
 8102f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102f6e:	4619      	mov	r1, r3
 8102f70:	4610      	mov	r0, r2
 8102f72:	f7ff f8c8 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
 8102f76:	e012      	b.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f7c:	f043 0220 	orr.w	r2, r3, #32
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102f84:	2301      	movs	r3, #1
 8102f86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102f8a:	e008      	b.n	8102f9e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f90:	f043 0220 	orr.w	r2, r3, #32
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102f98:	2301      	movs	r3, #1
 8102f9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	2200      	movs	r2, #0
 8102fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102fa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102faa:	4618      	mov	r0, r3
 8102fac:	3784      	adds	r7, #132	; 0x84
 8102fae:	46bd      	mov	sp, r7
 8102fb0:	bd90      	pop	{r4, r7, pc}
 8102fb2:	bf00      	nop
 8102fb4:	40022000 	.word	0x40022000
 8102fb8:	40022100 	.word	0x40022100
 8102fbc:	40022300 	.word	0x40022300
 8102fc0:	58026300 	.word	0x58026300
 8102fc4:	58026000 	.word	0x58026000
 8102fc8:	cb840000 	.word	0xcb840000
 8102fcc:	10000000 	.word	0x10000000
 8102fd0:	053e2d63 	.word	0x053e2d63
 8102fd4:	c7520000 	.word	0xc7520000
 8102fd8:	cfb80000 	.word	0xcfb80000

08102fdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102fdc:	b580      	push	{r7, lr}
 8102fde:	b084      	sub	sp, #16
 8102fe0:	af00      	add	r7, sp, #0
 8102fe2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4618      	mov	r0, r3
 8102fea:	f7ff f9ed 	bl	81023c8 <LL_ADC_IsEnabled>
 8102fee:	4603      	mov	r3, r0
 8102ff0:	2b00      	cmp	r3, #0
 8102ff2:	d16e      	bne.n	81030d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	689a      	ldr	r2, [r3, #8]
 8102ffa:	4b38      	ldr	r3, [pc, #224]	; (81030dc <ADC_Enable+0x100>)
 8102ffc:	4013      	ands	r3, r2
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d00d      	beq.n	810301e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103006:	f043 0210 	orr.w	r2, r3, #16
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103012:	f043 0201 	orr.w	r2, r3, #1
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 810301a:	2301      	movs	r3, #1
 810301c:	e05a      	b.n	81030d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4618      	mov	r0, r3
 8103024:	f7ff f9bc 	bl	81023a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103028:	f7ff f81e 	bl	8102068 <HAL_GetTick>
 810302c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	4a2b      	ldr	r2, [pc, #172]	; (81030e0 <ADC_Enable+0x104>)
 8103034:	4293      	cmp	r3, r2
 8103036:	d004      	beq.n	8103042 <ADC_Enable+0x66>
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	4a29      	ldr	r2, [pc, #164]	; (81030e4 <ADC_Enable+0x108>)
 810303e:	4293      	cmp	r3, r2
 8103040:	d101      	bne.n	8103046 <ADC_Enable+0x6a>
 8103042:	4b29      	ldr	r3, [pc, #164]	; (81030e8 <ADC_Enable+0x10c>)
 8103044:	e000      	b.n	8103048 <ADC_Enable+0x6c>
 8103046:	4b29      	ldr	r3, [pc, #164]	; (81030ec <ADC_Enable+0x110>)
 8103048:	4618      	mov	r0, r3
 810304a:	f7ff f94d 	bl	81022e8 <LL_ADC_GetMultimode>
 810304e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4a23      	ldr	r2, [pc, #140]	; (81030e4 <ADC_Enable+0x108>)
 8103056:	4293      	cmp	r3, r2
 8103058:	d002      	beq.n	8103060 <ADC_Enable+0x84>
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	e000      	b.n	8103062 <ADC_Enable+0x86>
 8103060:	4b1f      	ldr	r3, [pc, #124]	; (81030e0 <ADC_Enable+0x104>)
 8103062:	687a      	ldr	r2, [r7, #4]
 8103064:	6812      	ldr	r2, [r2, #0]
 8103066:	4293      	cmp	r3, r2
 8103068:	d02c      	beq.n	81030c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810306a:	68bb      	ldr	r3, [r7, #8]
 810306c:	2b00      	cmp	r3, #0
 810306e:	d130      	bne.n	81030d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103070:	e028      	b.n	81030c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	4618      	mov	r0, r3
 8103078:	f7ff f9a6 	bl	81023c8 <LL_ADC_IsEnabled>
 810307c:	4603      	mov	r3, r0
 810307e:	2b00      	cmp	r3, #0
 8103080:	d104      	bne.n	810308c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4618      	mov	r0, r3
 8103088:	f7ff f98a 	bl	81023a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 810308c:	f7fe ffec 	bl	8102068 <HAL_GetTick>
 8103090:	4602      	mov	r2, r0
 8103092:	68fb      	ldr	r3, [r7, #12]
 8103094:	1ad3      	subs	r3, r2, r3
 8103096:	2b02      	cmp	r3, #2
 8103098:	d914      	bls.n	81030c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	f003 0301 	and.w	r3, r3, #1
 81030a4:	2b01      	cmp	r3, #1
 81030a6:	d00d      	beq.n	81030c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030ac:	f043 0210 	orr.w	r2, r3, #16
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030b8:	f043 0201 	orr.w	r2, r3, #1
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 81030c0:	2301      	movs	r3, #1
 81030c2:	e007      	b.n	81030d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	f003 0301 	and.w	r3, r3, #1
 81030ce:	2b01      	cmp	r3, #1
 81030d0:	d1cf      	bne.n	8103072 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81030d2:	2300      	movs	r3, #0
}
 81030d4:	4618      	mov	r0, r3
 81030d6:	3710      	adds	r7, #16
 81030d8:	46bd      	mov	sp, r7
 81030da:	bd80      	pop	{r7, pc}
 81030dc:	8000003f 	.word	0x8000003f
 81030e0:	40022000 	.word	0x40022000
 81030e4:	40022100 	.word	0x40022100
 81030e8:	40022300 	.word	0x40022300
 81030ec:	58026300 	.word	0x58026300

081030f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81030f0:	b580      	push	{r7, lr}
 81030f2:	b084      	sub	sp, #16
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	4a79      	ldr	r2, [pc, #484]	; (81032e4 <ADC_ConfigureBoostMode+0x1f4>)
 81030fe:	4293      	cmp	r3, r2
 8103100:	d004      	beq.n	810310c <ADC_ConfigureBoostMode+0x1c>
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4a78      	ldr	r2, [pc, #480]	; (81032e8 <ADC_ConfigureBoostMode+0x1f8>)
 8103108:	4293      	cmp	r3, r2
 810310a:	d109      	bne.n	8103120 <ADC_ConfigureBoostMode+0x30>
 810310c:	4b77      	ldr	r3, [pc, #476]	; (81032ec <ADC_ConfigureBoostMode+0x1fc>)
 810310e:	689b      	ldr	r3, [r3, #8]
 8103110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103114:	2b00      	cmp	r3, #0
 8103116:	bf14      	ite	ne
 8103118:	2301      	movne	r3, #1
 810311a:	2300      	moveq	r3, #0
 810311c:	b2db      	uxtb	r3, r3
 810311e:	e008      	b.n	8103132 <ADC_ConfigureBoostMode+0x42>
 8103120:	4b73      	ldr	r3, [pc, #460]	; (81032f0 <ADC_ConfigureBoostMode+0x200>)
 8103122:	689b      	ldr	r3, [r3, #8]
 8103124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103128:	2b00      	cmp	r3, #0
 810312a:	bf14      	ite	ne
 810312c:	2301      	movne	r3, #1
 810312e:	2300      	moveq	r3, #0
 8103130:	b2db      	uxtb	r3, r3
 8103132:	2b00      	cmp	r3, #0
 8103134:	d01c      	beq.n	8103170 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103136:	f001 fd1d 	bl	8104b74 <HAL_RCC_GetHCLKFreq>
 810313a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	685b      	ldr	r3, [r3, #4]
 8103140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103144:	d010      	beq.n	8103168 <ADC_ConfigureBoostMode+0x78>
 8103146:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810314a:	d871      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x140>
 810314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103150:	d002      	beq.n	8103158 <ADC_ConfigureBoostMode+0x68>
 8103152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103156:	d16b      	bne.n	8103230 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	685b      	ldr	r3, [r3, #4]
 810315c:	0c1b      	lsrs	r3, r3, #16
 810315e:	68fa      	ldr	r2, [r7, #12]
 8103160:	fbb2 f3f3 	udiv	r3, r2, r3
 8103164:	60fb      	str	r3, [r7, #12]
        break;
 8103166:	e066      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103168:	68fb      	ldr	r3, [r7, #12]
 810316a:	089b      	lsrs	r3, r3, #2
 810316c:	60fb      	str	r3, [r7, #12]
        break;
 810316e:	e062      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103170:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103174:	f002 fc76 	bl	8105a64 <HAL_RCCEx_GetPeriphCLKFreq>
 8103178:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	685b      	ldr	r3, [r3, #4]
 810317e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103182:	d051      	beq.n	8103228 <ADC_ConfigureBoostMode+0x138>
 8103184:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103188:	d854      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 810318a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810318e:	d047      	beq.n	8103220 <ADC_ConfigureBoostMode+0x130>
 8103190:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103194:	d84e      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 8103196:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810319a:	d03d      	beq.n	8103218 <ADC_ConfigureBoostMode+0x128>
 810319c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81031a0:	d848      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031a6:	d033      	beq.n	8103210 <ADC_ConfigureBoostMode+0x120>
 81031a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031ac:	d842      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81031b2:	d029      	beq.n	8103208 <ADC_ConfigureBoostMode+0x118>
 81031b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81031b8:	d83c      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031be:	d01a      	beq.n	81031f6 <ADC_ConfigureBoostMode+0x106>
 81031c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031c4:	d836      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031ca:	d014      	beq.n	81031f6 <ADC_ConfigureBoostMode+0x106>
 81031cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031d0:	d830      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031d6:	d00e      	beq.n	81031f6 <ADC_ConfigureBoostMode+0x106>
 81031d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031dc:	d82a      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81031e2:	d008      	beq.n	81031f6 <ADC_ConfigureBoostMode+0x106>
 81031e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81031e8:	d824      	bhi.n	8103234 <ADC_ConfigureBoostMode+0x144>
 81031ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81031ee:	d002      	beq.n	81031f6 <ADC_ConfigureBoostMode+0x106>
 81031f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81031f4:	d11e      	bne.n	8103234 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	685b      	ldr	r3, [r3, #4]
 81031fa:	0c9b      	lsrs	r3, r3, #18
 81031fc:	005b      	lsls	r3, r3, #1
 81031fe:	68fa      	ldr	r2, [r7, #12]
 8103200:	fbb2 f3f3 	udiv	r3, r2, r3
 8103204:	60fb      	str	r3, [r7, #12]
        break;
 8103206:	e016      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103208:	68fb      	ldr	r3, [r7, #12]
 810320a:	091b      	lsrs	r3, r3, #4
 810320c:	60fb      	str	r3, [r7, #12]
        break;
 810320e:	e012      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103210:	68fb      	ldr	r3, [r7, #12]
 8103212:	095b      	lsrs	r3, r3, #5
 8103214:	60fb      	str	r3, [r7, #12]
        break;
 8103216:	e00e      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103218:	68fb      	ldr	r3, [r7, #12]
 810321a:	099b      	lsrs	r3, r3, #6
 810321c:	60fb      	str	r3, [r7, #12]
        break;
 810321e:	e00a      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103220:	68fb      	ldr	r3, [r7, #12]
 8103222:	09db      	lsrs	r3, r3, #7
 8103224:	60fb      	str	r3, [r7, #12]
        break;
 8103226:	e006      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103228:	68fb      	ldr	r3, [r7, #12]
 810322a:	0a1b      	lsrs	r3, r3, #8
 810322c:	60fb      	str	r3, [r7, #12]
        break;
 810322e:	e002      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
        break;
 8103230:	bf00      	nop
 8103232:	e000      	b.n	8103236 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103234:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103236:	f7fe ff47 	bl	81020c8 <HAL_GetREVID>
 810323a:	4603      	mov	r3, r0
 810323c:	f241 0203 	movw	r2, #4099	; 0x1003
 8103240:	4293      	cmp	r3, r2
 8103242:	d815      	bhi.n	8103270 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103244:	68fb      	ldr	r3, [r7, #12]
 8103246:	4a2b      	ldr	r2, [pc, #172]	; (81032f4 <ADC_ConfigureBoostMode+0x204>)
 8103248:	4293      	cmp	r3, r2
 810324a:	d908      	bls.n	810325e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	689a      	ldr	r2, [r3, #8]
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810325a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810325c:	e03e      	b.n	81032dc <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	689a      	ldr	r2, [r3, #8]
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810326c:	609a      	str	r2, [r3, #8]
}
 810326e:	e035      	b.n	81032dc <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	085b      	lsrs	r3, r3, #1
 8103274:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103276:	68fb      	ldr	r3, [r7, #12]
 8103278:	4a1f      	ldr	r2, [pc, #124]	; (81032f8 <ADC_ConfigureBoostMode+0x208>)
 810327a:	4293      	cmp	r3, r2
 810327c:	d808      	bhi.n	8103290 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	689a      	ldr	r2, [r3, #8]
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810328c:	609a      	str	r2, [r3, #8]
}
 810328e:	e025      	b.n	81032dc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103290:	68fb      	ldr	r3, [r7, #12]
 8103292:	4a1a      	ldr	r2, [pc, #104]	; (81032fc <ADC_ConfigureBoostMode+0x20c>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d80a      	bhi.n	81032ae <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	689b      	ldr	r3, [r3, #8]
 810329e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81032aa:	609a      	str	r2, [r3, #8]
}
 81032ac:	e016      	b.n	81032dc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 81032ae:	68fb      	ldr	r3, [r7, #12]
 81032b0:	4a13      	ldr	r2, [pc, #76]	; (8103300 <ADC_ConfigureBoostMode+0x210>)
 81032b2:	4293      	cmp	r3, r2
 81032b4:	d80a      	bhi.n	81032cc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	689b      	ldr	r3, [r3, #8]
 81032bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81032c8:	609a      	str	r2, [r3, #8]
}
 81032ca:	e007      	b.n	81032dc <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	689a      	ldr	r2, [r3, #8]
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81032da:	609a      	str	r2, [r3, #8]
}
 81032dc:	bf00      	nop
 81032de:	3710      	adds	r7, #16
 81032e0:	46bd      	mov	sp, r7
 81032e2:	bd80      	pop	{r7, pc}
 81032e4:	40022000 	.word	0x40022000
 81032e8:	40022100 	.word	0x40022100
 81032ec:	40022300 	.word	0x40022300
 81032f0:	58026300 	.word	0x58026300
 81032f4:	01312d00 	.word	0x01312d00
 81032f8:	005f5e10 	.word	0x005f5e10
 81032fc:	00bebc20 	.word	0x00bebc20
 8103300:	017d7840 	.word	0x017d7840

08103304 <LL_ADC_IsEnabled>:
{
 8103304:	b480      	push	{r7}
 8103306:	b083      	sub	sp, #12
 8103308:	af00      	add	r7, sp, #0
 810330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	689b      	ldr	r3, [r3, #8]
 8103310:	f003 0301 	and.w	r3, r3, #1
 8103314:	2b01      	cmp	r3, #1
 8103316:	d101      	bne.n	810331c <LL_ADC_IsEnabled+0x18>
 8103318:	2301      	movs	r3, #1
 810331a:	e000      	b.n	810331e <LL_ADC_IsEnabled+0x1a>
 810331c:	2300      	movs	r3, #0
}
 810331e:	4618      	mov	r0, r3
 8103320:	370c      	adds	r7, #12
 8103322:	46bd      	mov	sp, r7
 8103324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103328:	4770      	bx	lr

0810332a <LL_ADC_REG_IsConversionOngoing>:
{
 810332a:	b480      	push	{r7}
 810332c:	b083      	sub	sp, #12
 810332e:	af00      	add	r7, sp, #0
 8103330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	689b      	ldr	r3, [r3, #8]
 8103336:	f003 0304 	and.w	r3, r3, #4
 810333a:	2b04      	cmp	r3, #4
 810333c:	d101      	bne.n	8103342 <LL_ADC_REG_IsConversionOngoing+0x18>
 810333e:	2301      	movs	r3, #1
 8103340:	e000      	b.n	8103344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103342:	2300      	movs	r3, #0
}
 8103344:	4618      	mov	r0, r3
 8103346:	370c      	adds	r7, #12
 8103348:	46bd      	mov	sp, r7
 810334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334e:	4770      	bx	lr

08103350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103350:	b590      	push	{r4, r7, lr}
 8103352:	b09f      	sub	sp, #124	; 0x7c
 8103354:	af00      	add	r7, sp, #0
 8103356:	6078      	str	r0, [r7, #4]
 8103358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810335a:	2300      	movs	r3, #0
 810335c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103366:	2b01      	cmp	r3, #1
 8103368:	d101      	bne.n	810336e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810336a:	2302      	movs	r3, #2
 810336c:	e0c4      	b.n	81034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	2201      	movs	r2, #1
 8103372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103376:	2300      	movs	r3, #0
 8103378:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810337a:	2300      	movs	r3, #0
 810337c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	4a5f      	ldr	r2, [pc, #380]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103384:	4293      	cmp	r3, r2
 8103386:	d102      	bne.n	810338e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103388:	4b5e      	ldr	r3, [pc, #376]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810338a:	60bb      	str	r3, [r7, #8]
 810338c:	e001      	b.n	8103392 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810338e:	2300      	movs	r3, #0
 8103390:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103392:	68bb      	ldr	r3, [r7, #8]
 8103394:	2b00      	cmp	r3, #0
 8103396:	d10b      	bne.n	81033b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810339c:	f043 0220 	orr.w	r2, r3, #32
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	2200      	movs	r2, #0
 81033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81033ac:	2301      	movs	r3, #1
 81033ae:	e0a3      	b.n	81034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81033b0:	68bb      	ldr	r3, [r7, #8]
 81033b2:	4618      	mov	r0, r3
 81033b4:	f7ff ffb9 	bl	810332a <LL_ADC_REG_IsConversionOngoing>
 81033b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4618      	mov	r0, r3
 81033c0:	f7ff ffb3 	bl	810332a <LL_ADC_REG_IsConversionOngoing>
 81033c4:	4603      	mov	r3, r0
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	f040 8085 	bne.w	81034d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81033cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81033ce:	2b00      	cmp	r3, #0
 81033d0:	f040 8081 	bne.w	81034d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a49      	ldr	r2, [pc, #292]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d004      	beq.n	81033e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a48      	ldr	r2, [pc, #288]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d101      	bne.n	81033ec <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81033e8:	4b47      	ldr	r3, [pc, #284]	; (8103508 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81033ea:	e000      	b.n	81033ee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81033ec:	4b47      	ldr	r3, [pc, #284]	; (810350c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81033ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81033f0:	683b      	ldr	r3, [r7, #0]
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	2b00      	cmp	r3, #0
 81033f6:	d03b      	beq.n	8103470 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81033fa:	689b      	ldr	r3, [r3, #8]
 81033fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103400:	683b      	ldr	r3, [r7, #0]
 8103402:	685b      	ldr	r3, [r3, #4]
 8103404:	431a      	orrs	r2, r3
 8103406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103408:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a3c      	ldr	r2, [pc, #240]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d004      	beq.n	810341e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a3a      	ldr	r2, [pc, #232]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d10e      	bne.n	810343c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810341e:	4838      	ldr	r0, [pc, #224]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103420:	f7ff ff70 	bl	8103304 <LL_ADC_IsEnabled>
 8103424:	4604      	mov	r4, r0
 8103426:	4837      	ldr	r0, [pc, #220]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103428:	f7ff ff6c 	bl	8103304 <LL_ADC_IsEnabled>
 810342c:	4603      	mov	r3, r0
 810342e:	4323      	orrs	r3, r4
 8103430:	2b00      	cmp	r3, #0
 8103432:	bf0c      	ite	eq
 8103434:	2301      	moveq	r3, #1
 8103436:	2300      	movne	r3, #0
 8103438:	b2db      	uxtb	r3, r3
 810343a:	e008      	b.n	810344e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810343c:	4834      	ldr	r0, [pc, #208]	; (8103510 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810343e:	f7ff ff61 	bl	8103304 <LL_ADC_IsEnabled>
 8103442:	4603      	mov	r3, r0
 8103444:	2b00      	cmp	r3, #0
 8103446:	bf0c      	ite	eq
 8103448:	2301      	moveq	r3, #1
 810344a:	2300      	movne	r3, #0
 810344c:	b2db      	uxtb	r3, r3
 810344e:	2b00      	cmp	r3, #0
 8103450:	d04b      	beq.n	81034ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103454:	689b      	ldr	r3, [r3, #8]
 8103456:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810345a:	f023 030f 	bic.w	r3, r3, #15
 810345e:	683a      	ldr	r2, [r7, #0]
 8103460:	6811      	ldr	r1, [r2, #0]
 8103462:	683a      	ldr	r2, [r7, #0]
 8103464:	6892      	ldr	r2, [r2, #8]
 8103466:	430a      	orrs	r2, r1
 8103468:	431a      	orrs	r2, r3
 810346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810346c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810346e:	e03c      	b.n	81034ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103472:	689b      	ldr	r3, [r3, #8]
 8103474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810347a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	4a1f      	ldr	r2, [pc, #124]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103482:	4293      	cmp	r3, r2
 8103484:	d004      	beq.n	8103490 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a1e      	ldr	r2, [pc, #120]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d10e      	bne.n	81034ae <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103490:	481b      	ldr	r0, [pc, #108]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103492:	f7ff ff37 	bl	8103304 <LL_ADC_IsEnabled>
 8103496:	4604      	mov	r4, r0
 8103498:	481a      	ldr	r0, [pc, #104]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810349a:	f7ff ff33 	bl	8103304 <LL_ADC_IsEnabled>
 810349e:	4603      	mov	r3, r0
 81034a0:	4323      	orrs	r3, r4
 81034a2:	2b00      	cmp	r3, #0
 81034a4:	bf0c      	ite	eq
 81034a6:	2301      	moveq	r3, #1
 81034a8:	2300      	movne	r3, #0
 81034aa:	b2db      	uxtb	r3, r3
 81034ac:	e008      	b.n	81034c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81034ae:	4818      	ldr	r0, [pc, #96]	; (8103510 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81034b0:	f7ff ff28 	bl	8103304 <LL_ADC_IsEnabled>
 81034b4:	4603      	mov	r3, r0
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	bf0c      	ite	eq
 81034ba:	2301      	moveq	r3, #1
 81034bc:	2300      	movne	r3, #0
 81034be:	b2db      	uxtb	r3, r3
 81034c0:	2b00      	cmp	r3, #0
 81034c2:	d012      	beq.n	81034ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034c6:	689b      	ldr	r3, [r3, #8]
 81034c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81034cc:	f023 030f 	bic.w	r3, r3, #15
 81034d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81034d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034d4:	e009      	b.n	81034ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034da:	f043 0220 	orr.w	r2, r3, #32
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81034e2:	2301      	movs	r3, #1
 81034e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81034e8:	e000      	b.n	81034ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	2200      	movs	r2, #0
 81034f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81034f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81034f8:	4618      	mov	r0, r3
 81034fa:	377c      	adds	r7, #124	; 0x7c
 81034fc:	46bd      	mov	sp, r7
 81034fe:	bd90      	pop	{r4, r7, pc}
 8103500:	40022000 	.word	0x40022000
 8103504:	40022100 	.word	0x40022100
 8103508:	40022300 	.word	0x40022300
 810350c:	58026300 	.word	0x58026300
 8103510:	58026000 	.word	0x58026000

08103514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103514:	b480      	push	{r7}
 8103516:	b085      	sub	sp, #20
 8103518:	af00      	add	r7, sp, #0
 810351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	f003 0307 	and.w	r3, r3, #7
 8103522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103524:	4b0c      	ldr	r3, [pc, #48]	; (8103558 <__NVIC_SetPriorityGrouping+0x44>)
 8103526:	68db      	ldr	r3, [r3, #12]
 8103528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810352a:	68ba      	ldr	r2, [r7, #8]
 810352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103530:	4013      	ands	r3, r2
 8103532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103534:	68fb      	ldr	r3, [r7, #12]
 8103536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103538:	68bb      	ldr	r3, [r7, #8]
 810353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103546:	4a04      	ldr	r2, [pc, #16]	; (8103558 <__NVIC_SetPriorityGrouping+0x44>)
 8103548:	68bb      	ldr	r3, [r7, #8]
 810354a:	60d3      	str	r3, [r2, #12]
}
 810354c:	bf00      	nop
 810354e:	3714      	adds	r7, #20
 8103550:	46bd      	mov	sp, r7
 8103552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103556:	4770      	bx	lr
 8103558:	e000ed00 	.word	0xe000ed00

0810355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810355c:	b480      	push	{r7}
 810355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103560:	4b04      	ldr	r3, [pc, #16]	; (8103574 <__NVIC_GetPriorityGrouping+0x18>)
 8103562:	68db      	ldr	r3, [r3, #12]
 8103564:	0a1b      	lsrs	r3, r3, #8
 8103566:	f003 0307 	and.w	r3, r3, #7
}
 810356a:	4618      	mov	r0, r3
 810356c:	46bd      	mov	sp, r7
 810356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103572:	4770      	bx	lr
 8103574:	e000ed00 	.word	0xe000ed00

08103578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103578:	b480      	push	{r7}
 810357a:	b083      	sub	sp, #12
 810357c:	af00      	add	r7, sp, #0
 810357e:	4603      	mov	r3, r0
 8103580:	6039      	str	r1, [r7, #0]
 8103582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103588:	2b00      	cmp	r3, #0
 810358a:	db0a      	blt.n	81035a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810358c:	683b      	ldr	r3, [r7, #0]
 810358e:	b2da      	uxtb	r2, r3
 8103590:	490c      	ldr	r1, [pc, #48]	; (81035c4 <__NVIC_SetPriority+0x4c>)
 8103592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103596:	0112      	lsls	r2, r2, #4
 8103598:	b2d2      	uxtb	r2, r2
 810359a:	440b      	add	r3, r1
 810359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81035a0:	e00a      	b.n	81035b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035a2:	683b      	ldr	r3, [r7, #0]
 81035a4:	b2da      	uxtb	r2, r3
 81035a6:	4908      	ldr	r1, [pc, #32]	; (81035c8 <__NVIC_SetPriority+0x50>)
 81035a8:	88fb      	ldrh	r3, [r7, #6]
 81035aa:	f003 030f 	and.w	r3, r3, #15
 81035ae:	3b04      	subs	r3, #4
 81035b0:	0112      	lsls	r2, r2, #4
 81035b2:	b2d2      	uxtb	r2, r2
 81035b4:	440b      	add	r3, r1
 81035b6:	761a      	strb	r2, [r3, #24]
}
 81035b8:	bf00      	nop
 81035ba:	370c      	adds	r7, #12
 81035bc:	46bd      	mov	sp, r7
 81035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c2:	4770      	bx	lr
 81035c4:	e000e100 	.word	0xe000e100
 81035c8:	e000ed00 	.word	0xe000ed00

081035cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81035cc:	b480      	push	{r7}
 81035ce:	b089      	sub	sp, #36	; 0x24
 81035d0:	af00      	add	r7, sp, #0
 81035d2:	60f8      	str	r0, [r7, #12]
 81035d4:	60b9      	str	r1, [r7, #8]
 81035d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81035d8:	68fb      	ldr	r3, [r7, #12]
 81035da:	f003 0307 	and.w	r3, r3, #7
 81035de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81035e0:	69fb      	ldr	r3, [r7, #28]
 81035e2:	f1c3 0307 	rsb	r3, r3, #7
 81035e6:	2b04      	cmp	r3, #4
 81035e8:	bf28      	it	cs
 81035ea:	2304      	movcs	r3, #4
 81035ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81035ee:	69fb      	ldr	r3, [r7, #28]
 81035f0:	3304      	adds	r3, #4
 81035f2:	2b06      	cmp	r3, #6
 81035f4:	d902      	bls.n	81035fc <NVIC_EncodePriority+0x30>
 81035f6:	69fb      	ldr	r3, [r7, #28]
 81035f8:	3b03      	subs	r3, #3
 81035fa:	e000      	b.n	81035fe <NVIC_EncodePriority+0x32>
 81035fc:	2300      	movs	r3, #0
 81035fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103600:	f04f 32ff 	mov.w	r2, #4294967295
 8103604:	69bb      	ldr	r3, [r7, #24]
 8103606:	fa02 f303 	lsl.w	r3, r2, r3
 810360a:	43da      	mvns	r2, r3
 810360c:	68bb      	ldr	r3, [r7, #8]
 810360e:	401a      	ands	r2, r3
 8103610:	697b      	ldr	r3, [r7, #20]
 8103612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103614:	f04f 31ff 	mov.w	r1, #4294967295
 8103618:	697b      	ldr	r3, [r7, #20]
 810361a:	fa01 f303 	lsl.w	r3, r1, r3
 810361e:	43d9      	mvns	r1, r3
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103624:	4313      	orrs	r3, r2
         );
}
 8103626:	4618      	mov	r0, r3
 8103628:	3724      	adds	r7, #36	; 0x24
 810362a:	46bd      	mov	sp, r7
 810362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103630:	4770      	bx	lr
	...

08103634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103634:	b580      	push	{r7, lr}
 8103636:	b082      	sub	sp, #8
 8103638:	af00      	add	r7, sp, #0
 810363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	3b01      	subs	r3, #1
 8103640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103644:	d301      	bcc.n	810364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103646:	2301      	movs	r3, #1
 8103648:	e00f      	b.n	810366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810364a:	4a0a      	ldr	r2, [pc, #40]	; (8103674 <SysTick_Config+0x40>)
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	3b01      	subs	r3, #1
 8103650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103652:	210f      	movs	r1, #15
 8103654:	f04f 30ff 	mov.w	r0, #4294967295
 8103658:	f7ff ff8e 	bl	8103578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810365c:	4b05      	ldr	r3, [pc, #20]	; (8103674 <SysTick_Config+0x40>)
 810365e:	2200      	movs	r2, #0
 8103660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103662:	4b04      	ldr	r3, [pc, #16]	; (8103674 <SysTick_Config+0x40>)
 8103664:	2207      	movs	r2, #7
 8103666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103668:	2300      	movs	r3, #0
}
 810366a:	4618      	mov	r0, r3
 810366c:	3708      	adds	r7, #8
 810366e:	46bd      	mov	sp, r7
 8103670:	bd80      	pop	{r7, pc}
 8103672:	bf00      	nop
 8103674:	e000e010 	.word	0xe000e010

08103678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103678:	b580      	push	{r7, lr}
 810367a:	b082      	sub	sp, #8
 810367c:	af00      	add	r7, sp, #0
 810367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103680:	6878      	ldr	r0, [r7, #4]
 8103682:	f7ff ff47 	bl	8103514 <__NVIC_SetPriorityGrouping>
}
 8103686:	bf00      	nop
 8103688:	3708      	adds	r7, #8
 810368a:	46bd      	mov	sp, r7
 810368c:	bd80      	pop	{r7, pc}

0810368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810368e:	b580      	push	{r7, lr}
 8103690:	b086      	sub	sp, #24
 8103692:	af00      	add	r7, sp, #0
 8103694:	4603      	mov	r3, r0
 8103696:	60b9      	str	r1, [r7, #8]
 8103698:	607a      	str	r2, [r7, #4]
 810369a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810369c:	f7ff ff5e 	bl	810355c <__NVIC_GetPriorityGrouping>
 81036a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81036a2:	687a      	ldr	r2, [r7, #4]
 81036a4:	68b9      	ldr	r1, [r7, #8]
 81036a6:	6978      	ldr	r0, [r7, #20]
 81036a8:	f7ff ff90 	bl	81035cc <NVIC_EncodePriority>
 81036ac:	4602      	mov	r2, r0
 81036ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81036b2:	4611      	mov	r1, r2
 81036b4:	4618      	mov	r0, r3
 81036b6:	f7ff ff5f 	bl	8103578 <__NVIC_SetPriority>
}
 81036ba:	bf00      	nop
 81036bc:	3718      	adds	r7, #24
 81036be:	46bd      	mov	sp, r7
 81036c0:	bd80      	pop	{r7, pc}

081036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81036c2:	b580      	push	{r7, lr}
 81036c4:	b082      	sub	sp, #8
 81036c6:	af00      	add	r7, sp, #0
 81036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81036ca:	6878      	ldr	r0, [r7, #4]
 81036cc:	f7ff ffb2 	bl	8103634 <SysTick_Config>
 81036d0:	4603      	mov	r3, r0
}
 81036d2:	4618      	mov	r0, r3
 81036d4:	3708      	adds	r7, #8
 81036d6:	46bd      	mov	sp, r7
 81036d8:	bd80      	pop	{r7, pc}
	...

081036dc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81036dc:	b480      	push	{r7}
 81036de:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81036e0:	4b07      	ldr	r3, [pc, #28]	; (8103700 <HAL_GetCurrentCPUID+0x24>)
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	091b      	lsrs	r3, r3, #4
 81036e6:	f003 030f 	and.w	r3, r3, #15
 81036ea:	2b07      	cmp	r3, #7
 81036ec:	d101      	bne.n	81036f2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81036ee:	2303      	movs	r3, #3
 81036f0:	e000      	b.n	81036f4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81036f2:	2301      	movs	r3, #1
  }
}
 81036f4:	4618      	mov	r0, r3
 81036f6:	46bd      	mov	sp, r7
 81036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036fc:	4770      	bx	lr
 81036fe:	bf00      	nop
 8103700:	e000ed00 	.word	0xe000ed00

08103704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103704:	b480      	push	{r7}
 8103706:	b089      	sub	sp, #36	; 0x24
 8103708:	af00      	add	r7, sp, #0
 810370a:	6078      	str	r0, [r7, #4]
 810370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810370e:	2300      	movs	r3, #0
 8103710:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103712:	4b89      	ldr	r3, [pc, #548]	; (8103938 <HAL_GPIO_Init+0x234>)
 8103714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103716:	e194      	b.n	8103a42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103718:	683b      	ldr	r3, [r7, #0]
 810371a:	681a      	ldr	r2, [r3, #0]
 810371c:	2101      	movs	r1, #1
 810371e:	69fb      	ldr	r3, [r7, #28]
 8103720:	fa01 f303 	lsl.w	r3, r1, r3
 8103724:	4013      	ands	r3, r2
 8103726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103728:	693b      	ldr	r3, [r7, #16]
 810372a:	2b00      	cmp	r3, #0
 810372c:	f000 8186 	beq.w	8103a3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103730:	683b      	ldr	r3, [r7, #0]
 8103732:	685b      	ldr	r3, [r3, #4]
 8103734:	2b01      	cmp	r3, #1
 8103736:	d00b      	beq.n	8103750 <HAL_GPIO_Init+0x4c>
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	685b      	ldr	r3, [r3, #4]
 810373c:	2b02      	cmp	r3, #2
 810373e:	d007      	beq.n	8103750 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103740:	683b      	ldr	r3, [r7, #0]
 8103742:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103744:	2b11      	cmp	r3, #17
 8103746:	d003      	beq.n	8103750 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103748:	683b      	ldr	r3, [r7, #0]
 810374a:	685b      	ldr	r3, [r3, #4]
 810374c:	2b12      	cmp	r3, #18
 810374e:	d130      	bne.n	81037b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	689b      	ldr	r3, [r3, #8]
 8103754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103756:	69fb      	ldr	r3, [r7, #28]
 8103758:	005b      	lsls	r3, r3, #1
 810375a:	2203      	movs	r2, #3
 810375c:	fa02 f303 	lsl.w	r3, r2, r3
 8103760:	43db      	mvns	r3, r3
 8103762:	69ba      	ldr	r2, [r7, #24]
 8103764:	4013      	ands	r3, r2
 8103766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103768:	683b      	ldr	r3, [r7, #0]
 810376a:	68da      	ldr	r2, [r3, #12]
 810376c:	69fb      	ldr	r3, [r7, #28]
 810376e:	005b      	lsls	r3, r3, #1
 8103770:	fa02 f303 	lsl.w	r3, r2, r3
 8103774:	69ba      	ldr	r2, [r7, #24]
 8103776:	4313      	orrs	r3, r2
 8103778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	69ba      	ldr	r2, [r7, #24]
 810377e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	685b      	ldr	r3, [r3, #4]
 8103784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103786:	2201      	movs	r2, #1
 8103788:	69fb      	ldr	r3, [r7, #28]
 810378a:	fa02 f303 	lsl.w	r3, r2, r3
 810378e:	43db      	mvns	r3, r3
 8103790:	69ba      	ldr	r2, [r7, #24]
 8103792:	4013      	ands	r3, r2
 8103794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8103796:	683b      	ldr	r3, [r7, #0]
 8103798:	685b      	ldr	r3, [r3, #4]
 810379a:	091b      	lsrs	r3, r3, #4
 810379c:	f003 0201 	and.w	r2, r3, #1
 81037a0:	69fb      	ldr	r3, [r7, #28]
 81037a2:	fa02 f303 	lsl.w	r3, r2, r3
 81037a6:	69ba      	ldr	r2, [r7, #24]
 81037a8:	4313      	orrs	r3, r2
 81037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	69ba      	ldr	r2, [r7, #24]
 81037b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	68db      	ldr	r3, [r3, #12]
 81037b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81037b8:	69fb      	ldr	r3, [r7, #28]
 81037ba:	005b      	lsls	r3, r3, #1
 81037bc:	2203      	movs	r2, #3
 81037be:	fa02 f303 	lsl.w	r3, r2, r3
 81037c2:	43db      	mvns	r3, r3
 81037c4:	69ba      	ldr	r2, [r7, #24]
 81037c6:	4013      	ands	r3, r2
 81037c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81037ca:	683b      	ldr	r3, [r7, #0]
 81037cc:	689a      	ldr	r2, [r3, #8]
 81037ce:	69fb      	ldr	r3, [r7, #28]
 81037d0:	005b      	lsls	r3, r3, #1
 81037d2:	fa02 f303 	lsl.w	r3, r2, r3
 81037d6:	69ba      	ldr	r2, [r7, #24]
 81037d8:	4313      	orrs	r3, r2
 81037da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	69ba      	ldr	r2, [r7, #24]
 81037e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81037e2:	683b      	ldr	r3, [r7, #0]
 81037e4:	685b      	ldr	r3, [r3, #4]
 81037e6:	2b02      	cmp	r3, #2
 81037e8:	d003      	beq.n	81037f2 <HAL_GPIO_Init+0xee>
 81037ea:	683b      	ldr	r3, [r7, #0]
 81037ec:	685b      	ldr	r3, [r3, #4]
 81037ee:	2b12      	cmp	r3, #18
 81037f0:	d123      	bne.n	810383a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81037f2:	69fb      	ldr	r3, [r7, #28]
 81037f4:	08da      	lsrs	r2, r3, #3
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	3208      	adds	r2, #8
 81037fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103800:	69fb      	ldr	r3, [r7, #28]
 8103802:	f003 0307 	and.w	r3, r3, #7
 8103806:	009b      	lsls	r3, r3, #2
 8103808:	220f      	movs	r2, #15
 810380a:	fa02 f303 	lsl.w	r3, r2, r3
 810380e:	43db      	mvns	r3, r3
 8103810:	69ba      	ldr	r2, [r7, #24]
 8103812:	4013      	ands	r3, r2
 8103814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103816:	683b      	ldr	r3, [r7, #0]
 8103818:	691a      	ldr	r2, [r3, #16]
 810381a:	69fb      	ldr	r3, [r7, #28]
 810381c:	f003 0307 	and.w	r3, r3, #7
 8103820:	009b      	lsls	r3, r3, #2
 8103822:	fa02 f303 	lsl.w	r3, r2, r3
 8103826:	69ba      	ldr	r2, [r7, #24]
 8103828:	4313      	orrs	r3, r2
 810382a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810382c:	69fb      	ldr	r3, [r7, #28]
 810382e:	08da      	lsrs	r2, r3, #3
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	3208      	adds	r2, #8
 8103834:	69b9      	ldr	r1, [r7, #24]
 8103836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103840:	69fb      	ldr	r3, [r7, #28]
 8103842:	005b      	lsls	r3, r3, #1
 8103844:	2203      	movs	r2, #3
 8103846:	fa02 f303 	lsl.w	r3, r2, r3
 810384a:	43db      	mvns	r3, r3
 810384c:	69ba      	ldr	r2, [r7, #24]
 810384e:	4013      	ands	r3, r2
 8103850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103852:	683b      	ldr	r3, [r7, #0]
 8103854:	685b      	ldr	r3, [r3, #4]
 8103856:	f003 0203 	and.w	r2, r3, #3
 810385a:	69fb      	ldr	r3, [r7, #28]
 810385c:	005b      	lsls	r3, r3, #1
 810385e:	fa02 f303 	lsl.w	r3, r2, r3
 8103862:	69ba      	ldr	r2, [r7, #24]
 8103864:	4313      	orrs	r3, r2
 8103866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	69ba      	ldr	r2, [r7, #24]
 810386c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810386e:	683b      	ldr	r3, [r7, #0]
 8103870:	685b      	ldr	r3, [r3, #4]
 8103872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103876:	2b00      	cmp	r3, #0
 8103878:	f000 80e0 	beq.w	8103a3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810387c:	4b2f      	ldr	r3, [pc, #188]	; (810393c <HAL_GPIO_Init+0x238>)
 810387e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103882:	4a2e      	ldr	r2, [pc, #184]	; (810393c <HAL_GPIO_Init+0x238>)
 8103884:	f043 0302 	orr.w	r3, r3, #2
 8103888:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810388c:	4b2b      	ldr	r3, [pc, #172]	; (810393c <HAL_GPIO_Init+0x238>)
 810388e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103892:	f003 0302 	and.w	r3, r3, #2
 8103896:	60fb      	str	r3, [r7, #12]
 8103898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810389a:	4a29      	ldr	r2, [pc, #164]	; (8103940 <HAL_GPIO_Init+0x23c>)
 810389c:	69fb      	ldr	r3, [r7, #28]
 810389e:	089b      	lsrs	r3, r3, #2
 81038a0:	3302      	adds	r3, #2
 81038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81038a8:	69fb      	ldr	r3, [r7, #28]
 81038aa:	f003 0303 	and.w	r3, r3, #3
 81038ae:	009b      	lsls	r3, r3, #2
 81038b0:	220f      	movs	r2, #15
 81038b2:	fa02 f303 	lsl.w	r3, r2, r3
 81038b6:	43db      	mvns	r3, r3
 81038b8:	69ba      	ldr	r2, [r7, #24]
 81038ba:	4013      	ands	r3, r2
 81038bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	4a20      	ldr	r2, [pc, #128]	; (8103944 <HAL_GPIO_Init+0x240>)
 81038c2:	4293      	cmp	r3, r2
 81038c4:	d052      	beq.n	810396c <HAL_GPIO_Init+0x268>
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	4a1f      	ldr	r2, [pc, #124]	; (8103948 <HAL_GPIO_Init+0x244>)
 81038ca:	4293      	cmp	r3, r2
 81038cc:	d031      	beq.n	8103932 <HAL_GPIO_Init+0x22e>
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	4a1e      	ldr	r2, [pc, #120]	; (810394c <HAL_GPIO_Init+0x248>)
 81038d2:	4293      	cmp	r3, r2
 81038d4:	d02b      	beq.n	810392e <HAL_GPIO_Init+0x22a>
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	4a1d      	ldr	r2, [pc, #116]	; (8103950 <HAL_GPIO_Init+0x24c>)
 81038da:	4293      	cmp	r3, r2
 81038dc:	d025      	beq.n	810392a <HAL_GPIO_Init+0x226>
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	4a1c      	ldr	r2, [pc, #112]	; (8103954 <HAL_GPIO_Init+0x250>)
 81038e2:	4293      	cmp	r3, r2
 81038e4:	d01f      	beq.n	8103926 <HAL_GPIO_Init+0x222>
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	4a1b      	ldr	r2, [pc, #108]	; (8103958 <HAL_GPIO_Init+0x254>)
 81038ea:	4293      	cmp	r3, r2
 81038ec:	d019      	beq.n	8103922 <HAL_GPIO_Init+0x21e>
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	4a1a      	ldr	r2, [pc, #104]	; (810395c <HAL_GPIO_Init+0x258>)
 81038f2:	4293      	cmp	r3, r2
 81038f4:	d013      	beq.n	810391e <HAL_GPIO_Init+0x21a>
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	4a19      	ldr	r2, [pc, #100]	; (8103960 <HAL_GPIO_Init+0x25c>)
 81038fa:	4293      	cmp	r3, r2
 81038fc:	d00d      	beq.n	810391a <HAL_GPIO_Init+0x216>
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	4a18      	ldr	r2, [pc, #96]	; (8103964 <HAL_GPIO_Init+0x260>)
 8103902:	4293      	cmp	r3, r2
 8103904:	d007      	beq.n	8103916 <HAL_GPIO_Init+0x212>
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	4a17      	ldr	r2, [pc, #92]	; (8103968 <HAL_GPIO_Init+0x264>)
 810390a:	4293      	cmp	r3, r2
 810390c:	d101      	bne.n	8103912 <HAL_GPIO_Init+0x20e>
 810390e:	2309      	movs	r3, #9
 8103910:	e02d      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103912:	230a      	movs	r3, #10
 8103914:	e02b      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103916:	2308      	movs	r3, #8
 8103918:	e029      	b.n	810396e <HAL_GPIO_Init+0x26a>
 810391a:	2307      	movs	r3, #7
 810391c:	e027      	b.n	810396e <HAL_GPIO_Init+0x26a>
 810391e:	2306      	movs	r3, #6
 8103920:	e025      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103922:	2305      	movs	r3, #5
 8103924:	e023      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103926:	2304      	movs	r3, #4
 8103928:	e021      	b.n	810396e <HAL_GPIO_Init+0x26a>
 810392a:	2303      	movs	r3, #3
 810392c:	e01f      	b.n	810396e <HAL_GPIO_Init+0x26a>
 810392e:	2302      	movs	r3, #2
 8103930:	e01d      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103932:	2301      	movs	r3, #1
 8103934:	e01b      	b.n	810396e <HAL_GPIO_Init+0x26a>
 8103936:	bf00      	nop
 8103938:	580000c0 	.word	0x580000c0
 810393c:	58024400 	.word	0x58024400
 8103940:	58000400 	.word	0x58000400
 8103944:	58020000 	.word	0x58020000
 8103948:	58020400 	.word	0x58020400
 810394c:	58020800 	.word	0x58020800
 8103950:	58020c00 	.word	0x58020c00
 8103954:	58021000 	.word	0x58021000
 8103958:	58021400 	.word	0x58021400
 810395c:	58021800 	.word	0x58021800
 8103960:	58021c00 	.word	0x58021c00
 8103964:	58022000 	.word	0x58022000
 8103968:	58022400 	.word	0x58022400
 810396c:	2300      	movs	r3, #0
 810396e:	69fa      	ldr	r2, [r7, #28]
 8103970:	f002 0203 	and.w	r2, r2, #3
 8103974:	0092      	lsls	r2, r2, #2
 8103976:	4093      	lsls	r3, r2
 8103978:	69ba      	ldr	r2, [r7, #24]
 810397a:	4313      	orrs	r3, r2
 810397c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810397e:	4938      	ldr	r1, [pc, #224]	; (8103a60 <HAL_GPIO_Init+0x35c>)
 8103980:	69fb      	ldr	r3, [r7, #28]
 8103982:	089b      	lsrs	r3, r3, #2
 8103984:	3302      	adds	r3, #2
 8103986:	69ba      	ldr	r2, [r7, #24]
 8103988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810398c:	697b      	ldr	r3, [r7, #20]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103992:	693b      	ldr	r3, [r7, #16]
 8103994:	43db      	mvns	r3, r3
 8103996:	69ba      	ldr	r2, [r7, #24]
 8103998:	4013      	ands	r3, r2
 810399a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810399c:	683b      	ldr	r3, [r7, #0]
 810399e:	685b      	ldr	r3, [r3, #4]
 81039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	d003      	beq.n	81039b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81039a8:	69ba      	ldr	r2, [r7, #24]
 81039aa:	693b      	ldr	r3, [r7, #16]
 81039ac:	4313      	orrs	r3, r2
 81039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81039b0:	697b      	ldr	r3, [r7, #20]
 81039b2:	69ba      	ldr	r2, [r7, #24]
 81039b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81039b6:	697b      	ldr	r3, [r7, #20]
 81039b8:	685b      	ldr	r3, [r3, #4]
 81039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81039bc:	693b      	ldr	r3, [r7, #16]
 81039be:	43db      	mvns	r3, r3
 81039c0:	69ba      	ldr	r2, [r7, #24]
 81039c2:	4013      	ands	r3, r2
 81039c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81039c6:	683b      	ldr	r3, [r7, #0]
 81039c8:	685b      	ldr	r3, [r3, #4]
 81039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81039ce:	2b00      	cmp	r3, #0
 81039d0:	d003      	beq.n	81039da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81039d2:	69ba      	ldr	r2, [r7, #24]
 81039d4:	693b      	ldr	r3, [r7, #16]
 81039d6:	4313      	orrs	r3, r2
 81039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81039da:	697b      	ldr	r3, [r7, #20]
 81039dc:	69ba      	ldr	r2, [r7, #24]
 81039de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81039e8:	693b      	ldr	r3, [r7, #16]
 81039ea:	43db      	mvns	r3, r3
 81039ec:	69ba      	ldr	r2, [r7, #24]
 81039ee:	4013      	ands	r3, r2
 81039f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81039f2:	683b      	ldr	r3, [r7, #0]
 81039f4:	685b      	ldr	r3, [r3, #4]
 81039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d003      	beq.n	8103a06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81039fe:	69ba      	ldr	r2, [r7, #24]
 8103a00:	693b      	ldr	r3, [r7, #16]
 8103a02:	4313      	orrs	r3, r2
 8103a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a0a:	69bb      	ldr	r3, [r7, #24]
 8103a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a12:	685b      	ldr	r3, [r3, #4]
 8103a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a16:	693b      	ldr	r3, [r7, #16]
 8103a18:	43db      	mvns	r3, r3
 8103a1a:	69ba      	ldr	r2, [r7, #24]
 8103a1c:	4013      	ands	r3, r2
 8103a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8103a20:	683b      	ldr	r3, [r7, #0]
 8103a22:	685b      	ldr	r3, [r3, #4]
 8103a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d003      	beq.n	8103a34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8103a2c:	69ba      	ldr	r2, [r7, #24]
 8103a2e:	693b      	ldr	r3, [r7, #16]
 8103a30:	4313      	orrs	r3, r2
 8103a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a38:	69bb      	ldr	r3, [r7, #24]
 8103a3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8103a3c:	69fb      	ldr	r3, [r7, #28]
 8103a3e:	3301      	adds	r3, #1
 8103a40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103a42:	683b      	ldr	r3, [r7, #0]
 8103a44:	681a      	ldr	r2, [r3, #0]
 8103a46:	69fb      	ldr	r3, [r7, #28]
 8103a48:	fa22 f303 	lsr.w	r3, r2, r3
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	f47f ae63 	bne.w	8103718 <HAL_GPIO_Init+0x14>
  }
}
 8103a52:	bf00      	nop
 8103a54:	bf00      	nop
 8103a56:	3724      	adds	r7, #36	; 0x24
 8103a58:	46bd      	mov	sp, r7
 8103a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a5e:	4770      	bx	lr
 8103a60:	58000400 	.word	0x58000400

08103a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103a64:	b480      	push	{r7}
 8103a66:	b083      	sub	sp, #12
 8103a68:	af00      	add	r7, sp, #0
 8103a6a:	6078      	str	r0, [r7, #4]
 8103a6c:	460b      	mov	r3, r1
 8103a6e:	807b      	strh	r3, [r7, #2]
 8103a70:	4613      	mov	r3, r2
 8103a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103a74:	787b      	ldrb	r3, [r7, #1]
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d003      	beq.n	8103a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103a7a:	887a      	ldrh	r2, [r7, #2]
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103a80:	e003      	b.n	8103a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103a82:	887b      	ldrh	r3, [r7, #2]
 8103a84:	041a      	lsls	r2, r3, #16
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	619a      	str	r2, [r3, #24]
}
 8103a8a:	bf00      	nop
 8103a8c:	370c      	adds	r7, #12
 8103a8e:	46bd      	mov	sp, r7
 8103a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a94:	4770      	bx	lr
	...

08103a98 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103a98:	b480      	push	{r7}
 8103a9a:	b083      	sub	sp, #12
 8103a9c:	af00      	add	r7, sp, #0
 8103a9e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103aa0:	4b05      	ldr	r3, [pc, #20]	; (8103ab8 <HAL_HSEM_ActivateNotification+0x20>)
 8103aa2:	681a      	ldr	r2, [r3, #0]
 8103aa4:	4904      	ldr	r1, [pc, #16]	; (8103ab8 <HAL_HSEM_ActivateNotification+0x20>)
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	4313      	orrs	r3, r2
 8103aaa:	600b      	str	r3, [r1, #0]
#endif
}
 8103aac:	bf00      	nop
 8103aae:	370c      	adds	r7, #12
 8103ab0:	46bd      	mov	sp, r7
 8103ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab6:	4770      	bx	lr
 8103ab8:	58026510 	.word	0x58026510

08103abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103abc:	b580      	push	{r7, lr}
 8103abe:	b082      	sub	sp, #8
 8103ac0:	af00      	add	r7, sp, #0
 8103ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	2b00      	cmp	r3, #0
 8103ac8:	d101      	bne.n	8103ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103aca:	2301      	movs	r3, #1
 8103acc:	e081      	b.n	8103bd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103ad4:	b2db      	uxtb	r3, r3
 8103ad6:	2b00      	cmp	r3, #0
 8103ad8:	d106      	bne.n	8103ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	2200      	movs	r2, #0
 8103ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103ae2:	6878      	ldr	r0, [r7, #4]
 8103ae4:	f7fe f818 	bl	8101b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	2224      	movs	r2, #36	; 0x24
 8103aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	681a      	ldr	r2, [r3, #0]
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	f022 0201 	bic.w	r2, r2, #1
 8103afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	685a      	ldr	r2, [r3, #4]
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	689a      	ldr	r2, [r3, #8]
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	68db      	ldr	r3, [r3, #12]
 8103b22:	2b01      	cmp	r3, #1
 8103b24:	d107      	bne.n	8103b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	689a      	ldr	r2, [r3, #8]
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103b32:	609a      	str	r2, [r3, #8]
 8103b34:	e006      	b.n	8103b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	689a      	ldr	r2, [r3, #8]
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	68db      	ldr	r3, [r3, #12]
 8103b48:	2b02      	cmp	r3, #2
 8103b4a:	d104      	bne.n	8103b56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	685b      	ldr	r3, [r3, #4]
 8103b5c:	687a      	ldr	r2, [r7, #4]
 8103b5e:	6812      	ldr	r2, [r2, #0]
 8103b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	68da      	ldr	r2, [r3, #12]
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	691a      	ldr	r2, [r3, #16]
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	695b      	ldr	r3, [r3, #20]
 8103b82:	ea42 0103 	orr.w	r1, r2, r3
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	699b      	ldr	r3, [r3, #24]
 8103b8a:	021a      	lsls	r2, r3, #8
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	681b      	ldr	r3, [r3, #0]
 8103b90:	430a      	orrs	r2, r1
 8103b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	69d9      	ldr	r1, [r3, #28]
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	6a1a      	ldr	r2, [r3, #32]
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	430a      	orrs	r2, r1
 8103ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	681b      	ldr	r3, [r3, #0]
 8103ba8:	681a      	ldr	r2, [r3, #0]
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	681b      	ldr	r3, [r3, #0]
 8103bae:	f042 0201 	orr.w	r2, r2, #1
 8103bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	2200      	movs	r2, #0
 8103bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	2220      	movs	r2, #32
 8103bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	2200      	movs	r2, #0
 8103bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	2200      	movs	r2, #0
 8103bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103bd0:	2300      	movs	r3, #0
}
 8103bd2:	4618      	mov	r0, r3
 8103bd4:	3708      	adds	r7, #8
 8103bd6:	46bd      	mov	sp, r7
 8103bd8:	bd80      	pop	{r7, pc}
	...

08103bdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8103bdc:	b580      	push	{r7, lr}
 8103bde:	b088      	sub	sp, #32
 8103be0:	af02      	add	r7, sp, #8
 8103be2:	60f8      	str	r0, [r7, #12]
 8103be4:	607a      	str	r2, [r7, #4]
 8103be6:	461a      	mov	r2, r3
 8103be8:	460b      	mov	r3, r1
 8103bea:	817b      	strh	r3, [r7, #10]
 8103bec:	4613      	mov	r3, r2
 8103bee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103bf0:	68fb      	ldr	r3, [r7, #12]
 8103bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103bf6:	b2db      	uxtb	r3, r3
 8103bf8:	2b20      	cmp	r3, #32
 8103bfa:	f040 80da 	bne.w	8103db2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103bfe:	68fb      	ldr	r3, [r7, #12]
 8103c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103c04:	2b01      	cmp	r3, #1
 8103c06:	d101      	bne.n	8103c0c <HAL_I2C_Master_Transmit+0x30>
 8103c08:	2302      	movs	r3, #2
 8103c0a:	e0d3      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	2201      	movs	r2, #1
 8103c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103c14:	f7fe fa28 	bl	8102068 <HAL_GetTick>
 8103c18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103c1a:	697b      	ldr	r3, [r7, #20]
 8103c1c:	9300      	str	r3, [sp, #0]
 8103c1e:	2319      	movs	r3, #25
 8103c20:	2201      	movs	r2, #1
 8103c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103c26:	68f8      	ldr	r0, [r7, #12]
 8103c28:	f000 fb4e 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8103c2c:	4603      	mov	r3, r0
 8103c2e:	2b00      	cmp	r3, #0
 8103c30:	d001      	beq.n	8103c36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8103c32:	2301      	movs	r3, #1
 8103c34:	e0be      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103c36:	68fb      	ldr	r3, [r7, #12]
 8103c38:	2221      	movs	r2, #33	; 0x21
 8103c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103c3e:	68fb      	ldr	r3, [r7, #12]
 8103c40:	2210      	movs	r2, #16
 8103c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103c46:	68fb      	ldr	r3, [r7, #12]
 8103c48:	2200      	movs	r2, #0
 8103c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103c4c:	68fb      	ldr	r3, [r7, #12]
 8103c4e:	687a      	ldr	r2, [r7, #4]
 8103c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	893a      	ldrh	r2, [r7, #8]
 8103c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103c58:	68fb      	ldr	r3, [r7, #12]
 8103c5a:	2200      	movs	r2, #0
 8103c5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103c5e:	68fb      	ldr	r3, [r7, #12]
 8103c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103c62:	b29b      	uxth	r3, r3
 8103c64:	2bff      	cmp	r3, #255	; 0xff
 8103c66:	d90e      	bls.n	8103c86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	22ff      	movs	r2, #255	; 0xff
 8103c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103c72:	b2da      	uxtb	r2, r3
 8103c74:	8979      	ldrh	r1, [r7, #10]
 8103c76:	4b51      	ldr	r3, [pc, #324]	; (8103dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8103c78:	9300      	str	r3, [sp, #0]
 8103c7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103c7e:	68f8      	ldr	r0, [r7, #12]
 8103c80:	f000 fcb0 	bl	81045e4 <I2C_TransferConfig>
 8103c84:	e06c      	b.n	8103d60 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103c86:	68fb      	ldr	r3, [r7, #12]
 8103c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103c8a:	b29a      	uxth	r2, r3
 8103c8c:	68fb      	ldr	r3, [r7, #12]
 8103c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8103c90:	68fb      	ldr	r3, [r7, #12]
 8103c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103c94:	b2da      	uxtb	r2, r3
 8103c96:	8979      	ldrh	r1, [r7, #10]
 8103c98:	4b48      	ldr	r3, [pc, #288]	; (8103dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8103c9a:	9300      	str	r3, [sp, #0]
 8103c9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103ca0:	68f8      	ldr	r0, [r7, #12]
 8103ca2:	f000 fc9f 	bl	81045e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8103ca6:	e05b      	b.n	8103d60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ca8:	697a      	ldr	r2, [r7, #20]
 8103caa:	6a39      	ldr	r1, [r7, #32]
 8103cac:	68f8      	ldr	r0, [r7, #12]
 8103cae:	f000 fb4b 	bl	8104348 <I2C_WaitOnTXISFlagUntilTimeout>
 8103cb2:	4603      	mov	r3, r0
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d001      	beq.n	8103cbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8103cb8:	2301      	movs	r3, #1
 8103cba:	e07b      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103cbc:	68fb      	ldr	r3, [r7, #12]
 8103cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cc0:	781a      	ldrb	r2, [r3, #0]
 8103cc2:	68fb      	ldr	r3, [r7, #12]
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103cc8:	68fb      	ldr	r3, [r7, #12]
 8103cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ccc:	1c5a      	adds	r2, r3, #1
 8103cce:	68fb      	ldr	r3, [r7, #12]
 8103cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103cd2:	68fb      	ldr	r3, [r7, #12]
 8103cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103cd6:	b29b      	uxth	r3, r3
 8103cd8:	3b01      	subs	r3, #1
 8103cda:	b29a      	uxth	r2, r3
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103ce0:	68fb      	ldr	r3, [r7, #12]
 8103ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ce4:	3b01      	subs	r3, #1
 8103ce6:	b29a      	uxth	r2, r3
 8103ce8:	68fb      	ldr	r3, [r7, #12]
 8103cea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103cf0:	b29b      	uxth	r3, r3
 8103cf2:	2b00      	cmp	r3, #0
 8103cf4:	d034      	beq.n	8103d60 <HAL_I2C_Master_Transmit+0x184>
 8103cf6:	68fb      	ldr	r3, [r7, #12]
 8103cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d130      	bne.n	8103d60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103cfe:	697b      	ldr	r3, [r7, #20]
 8103d00:	9300      	str	r3, [sp, #0]
 8103d02:	6a3b      	ldr	r3, [r7, #32]
 8103d04:	2200      	movs	r2, #0
 8103d06:	2180      	movs	r1, #128	; 0x80
 8103d08:	68f8      	ldr	r0, [r7, #12]
 8103d0a:	f000 fadd 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8103d0e:	4603      	mov	r3, r0
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d001      	beq.n	8103d18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8103d14:	2301      	movs	r3, #1
 8103d16:	e04d      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d18:	68fb      	ldr	r3, [r7, #12]
 8103d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d1c:	b29b      	uxth	r3, r3
 8103d1e:	2bff      	cmp	r3, #255	; 0xff
 8103d20:	d90e      	bls.n	8103d40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	22ff      	movs	r2, #255	; 0xff
 8103d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103d28:	68fb      	ldr	r3, [r7, #12]
 8103d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d2c:	b2da      	uxtb	r2, r3
 8103d2e:	8979      	ldrh	r1, [r7, #10]
 8103d30:	2300      	movs	r3, #0
 8103d32:	9300      	str	r3, [sp, #0]
 8103d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103d38:	68f8      	ldr	r0, [r7, #12]
 8103d3a:	f000 fc53 	bl	81045e4 <I2C_TransferConfig>
 8103d3e:	e00f      	b.n	8103d60 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d44:	b29a      	uxth	r2, r3
 8103d46:	68fb      	ldr	r3, [r7, #12]
 8103d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d4e:	b2da      	uxtb	r2, r3
 8103d50:	8979      	ldrh	r1, [r7, #10]
 8103d52:	2300      	movs	r3, #0
 8103d54:	9300      	str	r3, [sp, #0]
 8103d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103d5a:	68f8      	ldr	r0, [r7, #12]
 8103d5c:	f000 fc42 	bl	81045e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d64:	b29b      	uxth	r3, r3
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d19e      	bne.n	8103ca8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103d6a:	697a      	ldr	r2, [r7, #20]
 8103d6c:	6a39      	ldr	r1, [r7, #32]
 8103d6e:	68f8      	ldr	r0, [r7, #12]
 8103d70:	f000 fb2a 	bl	81043c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103d74:	4603      	mov	r3, r0
 8103d76:	2b00      	cmp	r3, #0
 8103d78:	d001      	beq.n	8103d7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8103d7a:	2301      	movs	r3, #1
 8103d7c:	e01a      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103d7e:	68fb      	ldr	r3, [r7, #12]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	2220      	movs	r2, #32
 8103d84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	6859      	ldr	r1, [r3, #4]
 8103d8c:	68fb      	ldr	r3, [r7, #12]
 8103d8e:	681a      	ldr	r2, [r3, #0]
 8103d90:	4b0b      	ldr	r3, [pc, #44]	; (8103dc0 <HAL_I2C_Master_Transmit+0x1e4>)
 8103d92:	400b      	ands	r3, r1
 8103d94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103d96:	68fb      	ldr	r3, [r7, #12]
 8103d98:	2220      	movs	r2, #32
 8103d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103d9e:	68fb      	ldr	r3, [r7, #12]
 8103da0:	2200      	movs	r2, #0
 8103da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103da6:	68fb      	ldr	r3, [r7, #12]
 8103da8:	2200      	movs	r2, #0
 8103daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103dae:	2300      	movs	r3, #0
 8103db0:	e000      	b.n	8103db4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8103db2:	2302      	movs	r3, #2
  }
}
 8103db4:	4618      	mov	r0, r3
 8103db6:	3718      	adds	r7, #24
 8103db8:	46bd      	mov	sp, r7
 8103dba:	bd80      	pop	{r7, pc}
 8103dbc:	80002000 	.word	0x80002000
 8103dc0:	fe00e800 	.word	0xfe00e800

08103dc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8103dc4:	b580      	push	{r7, lr}
 8103dc6:	b088      	sub	sp, #32
 8103dc8:	af02      	add	r7, sp, #8
 8103dca:	60f8      	str	r0, [r7, #12]
 8103dcc:	607a      	str	r2, [r7, #4]
 8103dce:	461a      	mov	r2, r3
 8103dd0:	460b      	mov	r3, r1
 8103dd2:	817b      	strh	r3, [r7, #10]
 8103dd4:	4613      	mov	r3, r2
 8103dd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103dd8:	68fb      	ldr	r3, [r7, #12]
 8103dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103dde:	b2db      	uxtb	r3, r3
 8103de0:	2b20      	cmp	r3, #32
 8103de2:	f040 80db 	bne.w	8103f9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103dec:	2b01      	cmp	r3, #1
 8103dee:	d101      	bne.n	8103df4 <HAL_I2C_Master_Receive+0x30>
 8103df0:	2302      	movs	r3, #2
 8103df2:	e0d4      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	2201      	movs	r2, #1
 8103df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103dfc:	f7fe f934 	bl	8102068 <HAL_GetTick>
 8103e00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103e02:	697b      	ldr	r3, [r7, #20]
 8103e04:	9300      	str	r3, [sp, #0]
 8103e06:	2319      	movs	r3, #25
 8103e08:	2201      	movs	r2, #1
 8103e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103e0e:	68f8      	ldr	r0, [r7, #12]
 8103e10:	f000 fa5a 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8103e14:	4603      	mov	r3, r0
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d001      	beq.n	8103e1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103e1a:	2301      	movs	r3, #1
 8103e1c:	e0bf      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103e1e:	68fb      	ldr	r3, [r7, #12]
 8103e20:	2222      	movs	r2, #34	; 0x22
 8103e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	2210      	movs	r2, #16
 8103e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103e2e:	68fb      	ldr	r3, [r7, #12]
 8103e30:	2200      	movs	r2, #0
 8103e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103e34:	68fb      	ldr	r3, [r7, #12]
 8103e36:	687a      	ldr	r2, [r7, #4]
 8103e38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	893a      	ldrh	r2, [r7, #8]
 8103e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	2200      	movs	r2, #0
 8103e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e4a:	b29b      	uxth	r3, r3
 8103e4c:	2bff      	cmp	r3, #255	; 0xff
 8103e4e:	d90e      	bls.n	8103e6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e50:	68fb      	ldr	r3, [r7, #12]
 8103e52:	22ff      	movs	r2, #255	; 0xff
 8103e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8103e56:	68fb      	ldr	r3, [r7, #12]
 8103e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e5a:	b2da      	uxtb	r2, r3
 8103e5c:	8979      	ldrh	r1, [r7, #10]
 8103e5e:	4b52      	ldr	r3, [pc, #328]	; (8103fa8 <HAL_I2C_Master_Receive+0x1e4>)
 8103e60:	9300      	str	r3, [sp, #0]
 8103e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103e66:	68f8      	ldr	r0, [r7, #12]
 8103e68:	f000 fbbc 	bl	81045e4 <I2C_TransferConfig>
 8103e6c:	e06d      	b.n	8103f4a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e72:	b29a      	uxth	r2, r3
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e7c:	b2da      	uxtb	r2, r3
 8103e7e:	8979      	ldrh	r1, [r7, #10]
 8103e80:	4b49      	ldr	r3, [pc, #292]	; (8103fa8 <HAL_I2C_Master_Receive+0x1e4>)
 8103e82:	9300      	str	r3, [sp, #0]
 8103e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103e88:	68f8      	ldr	r0, [r7, #12]
 8103e8a:	f000 fbab 	bl	81045e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8103e8e:	e05c      	b.n	8103f4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103e90:	697a      	ldr	r2, [r7, #20]
 8103e92:	6a39      	ldr	r1, [r7, #32]
 8103e94:	68f8      	ldr	r0, [r7, #12]
 8103e96:	f000 fad3 	bl	8104440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8103e9a:	4603      	mov	r3, r0
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d001      	beq.n	8103ea4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103ea0:	2301      	movs	r3, #1
 8103ea2:	e07c      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103eaa:	68fb      	ldr	r3, [r7, #12]
 8103eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eae:	b2d2      	uxtb	r2, r2
 8103eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eb6:	1c5a      	adds	r2, r3, #1
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ec0:	3b01      	subs	r3, #1
 8103ec2:	b29a      	uxth	r2, r3
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103ec8:	68fb      	ldr	r3, [r7, #12]
 8103eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ecc:	b29b      	uxth	r3, r3
 8103ece:	3b01      	subs	r3, #1
 8103ed0:	b29a      	uxth	r2, r3
 8103ed2:	68fb      	ldr	r3, [r7, #12]
 8103ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103eda:	b29b      	uxth	r3, r3
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d034      	beq.n	8103f4a <HAL_I2C_Master_Receive+0x186>
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d130      	bne.n	8103f4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103ee8:	697b      	ldr	r3, [r7, #20]
 8103eea:	9300      	str	r3, [sp, #0]
 8103eec:	6a3b      	ldr	r3, [r7, #32]
 8103eee:	2200      	movs	r2, #0
 8103ef0:	2180      	movs	r1, #128	; 0x80
 8103ef2:	68f8      	ldr	r0, [r7, #12]
 8103ef4:	f000 f9e8 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8103ef8:	4603      	mov	r3, r0
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d001      	beq.n	8103f02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103efe:	2301      	movs	r3, #1
 8103f00:	e04d      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103f02:	68fb      	ldr	r3, [r7, #12]
 8103f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f06:	b29b      	uxth	r3, r3
 8103f08:	2bff      	cmp	r3, #255	; 0xff
 8103f0a:	d90e      	bls.n	8103f2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103f0c:	68fb      	ldr	r3, [r7, #12]
 8103f0e:	22ff      	movs	r2, #255	; 0xff
 8103f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f16:	b2da      	uxtb	r2, r3
 8103f18:	8979      	ldrh	r1, [r7, #10]
 8103f1a:	2300      	movs	r3, #0
 8103f1c:	9300      	str	r3, [sp, #0]
 8103f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103f22:	68f8      	ldr	r0, [r7, #12]
 8103f24:	f000 fb5e 	bl	81045e4 <I2C_TransferConfig>
 8103f28:	e00f      	b.n	8103f4a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103f2a:	68fb      	ldr	r3, [r7, #12]
 8103f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f2e:	b29a      	uxth	r2, r3
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103f34:	68fb      	ldr	r3, [r7, #12]
 8103f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f38:	b2da      	uxtb	r2, r3
 8103f3a:	8979      	ldrh	r1, [r7, #10]
 8103f3c:	2300      	movs	r3, #0
 8103f3e:	9300      	str	r3, [sp, #0]
 8103f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103f44:	68f8      	ldr	r0, [r7, #12]
 8103f46:	f000 fb4d 	bl	81045e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f4e:	b29b      	uxth	r3, r3
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	d19d      	bne.n	8103e90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103f54:	697a      	ldr	r2, [r7, #20]
 8103f56:	6a39      	ldr	r1, [r7, #32]
 8103f58:	68f8      	ldr	r0, [r7, #12]
 8103f5a:	f000 fa35 	bl	81043c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103f5e:	4603      	mov	r3, r0
 8103f60:	2b00      	cmp	r3, #0
 8103f62:	d001      	beq.n	8103f68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103f64:	2301      	movs	r3, #1
 8103f66:	e01a      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	2220      	movs	r2, #32
 8103f6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	6859      	ldr	r1, [r3, #4]
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	681a      	ldr	r2, [r3, #0]
 8103f7a:	4b0c      	ldr	r3, [pc, #48]	; (8103fac <HAL_I2C_Master_Receive+0x1e8>)
 8103f7c:	400b      	ands	r3, r1
 8103f7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	2220      	movs	r2, #32
 8103f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103f88:	68fb      	ldr	r3, [r7, #12]
 8103f8a:	2200      	movs	r2, #0
 8103f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	2200      	movs	r2, #0
 8103f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103f98:	2300      	movs	r3, #0
 8103f9a:	e000      	b.n	8103f9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103f9c:	2302      	movs	r3, #2
  }
}
 8103f9e:	4618      	mov	r0, r3
 8103fa0:	3718      	adds	r7, #24
 8103fa2:	46bd      	mov	sp, r7
 8103fa4:	bd80      	pop	{r7, pc}
 8103fa6:	bf00      	nop
 8103fa8:	80002400 	.word	0x80002400
 8103fac:	fe00e800 	.word	0xfe00e800

08103fb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103fb0:	b580      	push	{r7, lr}
 8103fb2:	b088      	sub	sp, #32
 8103fb4:	af02      	add	r7, sp, #8
 8103fb6:	60f8      	str	r0, [r7, #12]
 8103fb8:	4608      	mov	r0, r1
 8103fba:	4611      	mov	r1, r2
 8103fbc:	461a      	mov	r2, r3
 8103fbe:	4603      	mov	r3, r0
 8103fc0:	817b      	strh	r3, [r7, #10]
 8103fc2:	460b      	mov	r3, r1
 8103fc4:	813b      	strh	r3, [r7, #8]
 8103fc6:	4613      	mov	r3, r2
 8103fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103fca:	68fb      	ldr	r3, [r7, #12]
 8103fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103fd0:	b2db      	uxtb	r3, r3
 8103fd2:	2b20      	cmp	r3, #32
 8103fd4:	f040 80f9 	bne.w	81041ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103fd8:	6a3b      	ldr	r3, [r7, #32]
 8103fda:	2b00      	cmp	r3, #0
 8103fdc:	d002      	beq.n	8103fe4 <HAL_I2C_Mem_Write+0x34>
 8103fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d105      	bne.n	8103ff0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103fec:	2301      	movs	r3, #1
 8103fee:	e0ed      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103ff6:	2b01      	cmp	r3, #1
 8103ff8:	d101      	bne.n	8103ffe <HAL_I2C_Mem_Write+0x4e>
 8103ffa:	2302      	movs	r3, #2
 8103ffc:	e0e6      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	2201      	movs	r2, #1
 8104002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104006:	f7fe f82f 	bl	8102068 <HAL_GetTick>
 810400a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810400c:	697b      	ldr	r3, [r7, #20]
 810400e:	9300      	str	r3, [sp, #0]
 8104010:	2319      	movs	r3, #25
 8104012:	2201      	movs	r2, #1
 8104014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104018:	68f8      	ldr	r0, [r7, #12]
 810401a:	f000 f955 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 810401e:	4603      	mov	r3, r0
 8104020:	2b00      	cmp	r3, #0
 8104022:	d001      	beq.n	8104028 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104024:	2301      	movs	r3, #1
 8104026:	e0d1      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104028:	68fb      	ldr	r3, [r7, #12]
 810402a:	2221      	movs	r2, #33	; 0x21
 810402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	2240      	movs	r2, #64	; 0x40
 8104034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	2200      	movs	r2, #0
 810403c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	6a3a      	ldr	r2, [r7, #32]
 8104042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	2200      	movs	r2, #0
 810404e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104050:	88f8      	ldrh	r0, [r7, #6]
 8104052:	893a      	ldrh	r2, [r7, #8]
 8104054:	8979      	ldrh	r1, [r7, #10]
 8104056:	697b      	ldr	r3, [r7, #20]
 8104058:	9301      	str	r3, [sp, #4]
 810405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810405c:	9300      	str	r3, [sp, #0]
 810405e:	4603      	mov	r3, r0
 8104060:	68f8      	ldr	r0, [r7, #12]
 8104062:	f000 f8b9 	bl	81041d8 <I2C_RequestMemoryWrite>
 8104066:	4603      	mov	r3, r0
 8104068:	2b00      	cmp	r3, #0
 810406a:	d005      	beq.n	8104078 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	2200      	movs	r2, #0
 8104070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104074:	2301      	movs	r3, #1
 8104076:	e0a9      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104078:	68fb      	ldr	r3, [r7, #12]
 810407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810407c:	b29b      	uxth	r3, r3
 810407e:	2bff      	cmp	r3, #255	; 0xff
 8104080:	d90e      	bls.n	81040a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	22ff      	movs	r2, #255	; 0xff
 8104086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810408c:	b2da      	uxtb	r2, r3
 810408e:	8979      	ldrh	r1, [r7, #10]
 8104090:	2300      	movs	r3, #0
 8104092:	9300      	str	r3, [sp, #0]
 8104094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104098:	68f8      	ldr	r0, [r7, #12]
 810409a:	f000 faa3 	bl	81045e4 <I2C_TransferConfig>
 810409e:	e00f      	b.n	81040c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81040a0:	68fb      	ldr	r3, [r7, #12]
 81040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040a4:	b29a      	uxth	r2, r3
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81040aa:	68fb      	ldr	r3, [r7, #12]
 81040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040ae:	b2da      	uxtb	r2, r3
 81040b0:	8979      	ldrh	r1, [r7, #10]
 81040b2:	2300      	movs	r3, #0
 81040b4:	9300      	str	r3, [sp, #0]
 81040b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81040ba:	68f8      	ldr	r0, [r7, #12]
 81040bc:	f000 fa92 	bl	81045e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81040c0:	697a      	ldr	r2, [r7, #20]
 81040c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81040c4:	68f8      	ldr	r0, [r7, #12]
 81040c6:	f000 f93f 	bl	8104348 <I2C_WaitOnTXISFlagUntilTimeout>
 81040ca:	4603      	mov	r3, r0
 81040cc:	2b00      	cmp	r3, #0
 81040ce:	d001      	beq.n	81040d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81040d0:	2301      	movs	r3, #1
 81040d2:	e07b      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040d8:	781a      	ldrb	r2, [r3, #0]
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	681b      	ldr	r3, [r3, #0]
 81040de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040e4:	1c5a      	adds	r2, r3, #1
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81040ea:	68fb      	ldr	r3, [r7, #12]
 81040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040ee:	b29b      	uxth	r3, r3
 81040f0:	3b01      	subs	r3, #1
 81040f2:	b29a      	uxth	r2, r3
 81040f4:	68fb      	ldr	r3, [r7, #12]
 81040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81040f8:	68fb      	ldr	r3, [r7, #12]
 81040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040fc:	3b01      	subs	r3, #1
 81040fe:	b29a      	uxth	r2, r3
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104108:	b29b      	uxth	r3, r3
 810410a:	2b00      	cmp	r3, #0
 810410c:	d034      	beq.n	8104178 <HAL_I2C_Mem_Write+0x1c8>
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104112:	2b00      	cmp	r3, #0
 8104114:	d130      	bne.n	8104178 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104116:	697b      	ldr	r3, [r7, #20]
 8104118:	9300      	str	r3, [sp, #0]
 810411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810411c:	2200      	movs	r2, #0
 810411e:	2180      	movs	r1, #128	; 0x80
 8104120:	68f8      	ldr	r0, [r7, #12]
 8104122:	f000 f8d1 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8104126:	4603      	mov	r3, r0
 8104128:	2b00      	cmp	r3, #0
 810412a:	d001      	beq.n	8104130 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 810412c:	2301      	movs	r3, #1
 810412e:	e04d      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104134:	b29b      	uxth	r3, r3
 8104136:	2bff      	cmp	r3, #255	; 0xff
 8104138:	d90e      	bls.n	8104158 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	22ff      	movs	r2, #255	; 0xff
 810413e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104144:	b2da      	uxtb	r2, r3
 8104146:	8979      	ldrh	r1, [r7, #10]
 8104148:	2300      	movs	r3, #0
 810414a:	9300      	str	r3, [sp, #0]
 810414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104150:	68f8      	ldr	r0, [r7, #12]
 8104152:	f000 fa47 	bl	81045e4 <I2C_TransferConfig>
 8104156:	e00f      	b.n	8104178 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810415c:	b29a      	uxth	r2, r3
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104162:	68fb      	ldr	r3, [r7, #12]
 8104164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104166:	b2da      	uxtb	r2, r3
 8104168:	8979      	ldrh	r1, [r7, #10]
 810416a:	2300      	movs	r3, #0
 810416c:	9300      	str	r3, [sp, #0]
 810416e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104172:	68f8      	ldr	r0, [r7, #12]
 8104174:	f000 fa36 	bl	81045e4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810417c:	b29b      	uxth	r3, r3
 810417e:	2b00      	cmp	r3, #0
 8104180:	d19e      	bne.n	81040c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104182:	697a      	ldr	r2, [r7, #20]
 8104184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104186:	68f8      	ldr	r0, [r7, #12]
 8104188:	f000 f91e 	bl	81043c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 810418c:	4603      	mov	r3, r0
 810418e:	2b00      	cmp	r3, #0
 8104190:	d001      	beq.n	8104196 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104192:	2301      	movs	r3, #1
 8104194:	e01a      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	2220      	movs	r2, #32
 810419c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	6859      	ldr	r1, [r3, #4]
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	681a      	ldr	r2, [r3, #0]
 81041a8:	4b0a      	ldr	r3, [pc, #40]	; (81041d4 <HAL_I2C_Mem_Write+0x224>)
 81041aa:	400b      	ands	r3, r1
 81041ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	2220      	movs	r2, #32
 81041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	2200      	movs	r2, #0
 81041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	2200      	movs	r2, #0
 81041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81041c6:	2300      	movs	r3, #0
 81041c8:	e000      	b.n	81041cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81041ca:	2302      	movs	r3, #2
  }
}
 81041cc:	4618      	mov	r0, r3
 81041ce:	3718      	adds	r7, #24
 81041d0:	46bd      	mov	sp, r7
 81041d2:	bd80      	pop	{r7, pc}
 81041d4:	fe00e800 	.word	0xfe00e800

081041d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81041d8:	b580      	push	{r7, lr}
 81041da:	b086      	sub	sp, #24
 81041dc:	af02      	add	r7, sp, #8
 81041de:	60f8      	str	r0, [r7, #12]
 81041e0:	4608      	mov	r0, r1
 81041e2:	4611      	mov	r1, r2
 81041e4:	461a      	mov	r2, r3
 81041e6:	4603      	mov	r3, r0
 81041e8:	817b      	strh	r3, [r7, #10]
 81041ea:	460b      	mov	r3, r1
 81041ec:	813b      	strh	r3, [r7, #8]
 81041ee:	4613      	mov	r3, r2
 81041f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81041f2:	88fb      	ldrh	r3, [r7, #6]
 81041f4:	b2da      	uxtb	r2, r3
 81041f6:	8979      	ldrh	r1, [r7, #10]
 81041f8:	4b20      	ldr	r3, [pc, #128]	; (810427c <I2C_RequestMemoryWrite+0xa4>)
 81041fa:	9300      	str	r3, [sp, #0]
 81041fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104200:	68f8      	ldr	r0, [r7, #12]
 8104202:	f000 f9ef 	bl	81045e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104206:	69fa      	ldr	r2, [r7, #28]
 8104208:	69b9      	ldr	r1, [r7, #24]
 810420a:	68f8      	ldr	r0, [r7, #12]
 810420c:	f000 f89c 	bl	8104348 <I2C_WaitOnTXISFlagUntilTimeout>
 8104210:	4603      	mov	r3, r0
 8104212:	2b00      	cmp	r3, #0
 8104214:	d001      	beq.n	810421a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104216:	2301      	movs	r3, #1
 8104218:	e02c      	b.n	8104274 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810421a:	88fb      	ldrh	r3, [r7, #6]
 810421c:	2b01      	cmp	r3, #1
 810421e:	d105      	bne.n	810422c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104220:	893b      	ldrh	r3, [r7, #8]
 8104222:	b2da      	uxtb	r2, r3
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	629a      	str	r2, [r3, #40]	; 0x28
 810422a:	e015      	b.n	8104258 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810422c:	893b      	ldrh	r3, [r7, #8]
 810422e:	0a1b      	lsrs	r3, r3, #8
 8104230:	b29b      	uxth	r3, r3
 8104232:	b2da      	uxtb	r2, r3
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810423a:	69fa      	ldr	r2, [r7, #28]
 810423c:	69b9      	ldr	r1, [r7, #24]
 810423e:	68f8      	ldr	r0, [r7, #12]
 8104240:	f000 f882 	bl	8104348 <I2C_WaitOnTXISFlagUntilTimeout>
 8104244:	4603      	mov	r3, r0
 8104246:	2b00      	cmp	r3, #0
 8104248:	d001      	beq.n	810424e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810424a:	2301      	movs	r3, #1
 810424c:	e012      	b.n	8104274 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810424e:	893b      	ldrh	r3, [r7, #8]
 8104250:	b2da      	uxtb	r2, r3
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104258:	69fb      	ldr	r3, [r7, #28]
 810425a:	9300      	str	r3, [sp, #0]
 810425c:	69bb      	ldr	r3, [r7, #24]
 810425e:	2200      	movs	r2, #0
 8104260:	2180      	movs	r1, #128	; 0x80
 8104262:	68f8      	ldr	r0, [r7, #12]
 8104264:	f000 f830 	bl	81042c8 <I2C_WaitOnFlagUntilTimeout>
 8104268:	4603      	mov	r3, r0
 810426a:	2b00      	cmp	r3, #0
 810426c:	d001      	beq.n	8104272 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810426e:	2301      	movs	r3, #1
 8104270:	e000      	b.n	8104274 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104272:	2300      	movs	r3, #0
}
 8104274:	4618      	mov	r0, r3
 8104276:	3710      	adds	r7, #16
 8104278:	46bd      	mov	sp, r7
 810427a:	bd80      	pop	{r7, pc}
 810427c:	80002000 	.word	0x80002000

08104280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104280:	b480      	push	{r7}
 8104282:	b083      	sub	sp, #12
 8104284:	af00      	add	r7, sp, #0
 8104286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	699b      	ldr	r3, [r3, #24]
 810428e:	f003 0302 	and.w	r3, r3, #2
 8104292:	2b02      	cmp	r3, #2
 8104294:	d103      	bne.n	810429e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	2200      	movs	r2, #0
 810429c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	699b      	ldr	r3, [r3, #24]
 81042a4:	f003 0301 	and.w	r3, r3, #1
 81042a8:	2b01      	cmp	r3, #1
 81042aa:	d007      	beq.n	81042bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	699a      	ldr	r2, [r3, #24]
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	f042 0201 	orr.w	r2, r2, #1
 81042ba:	619a      	str	r2, [r3, #24]
  }
}
 81042bc:	bf00      	nop
 81042be:	370c      	adds	r7, #12
 81042c0:	46bd      	mov	sp, r7
 81042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c6:	4770      	bx	lr

081042c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81042c8:	b580      	push	{r7, lr}
 81042ca:	b084      	sub	sp, #16
 81042cc:	af00      	add	r7, sp, #0
 81042ce:	60f8      	str	r0, [r7, #12]
 81042d0:	60b9      	str	r1, [r7, #8]
 81042d2:	603b      	str	r3, [r7, #0]
 81042d4:	4613      	mov	r3, r2
 81042d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81042d8:	e022      	b.n	8104320 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81042da:	683b      	ldr	r3, [r7, #0]
 81042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81042e0:	d01e      	beq.n	8104320 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81042e2:	f7fd fec1 	bl	8102068 <HAL_GetTick>
 81042e6:	4602      	mov	r2, r0
 81042e8:	69bb      	ldr	r3, [r7, #24]
 81042ea:	1ad3      	subs	r3, r2, r3
 81042ec:	683a      	ldr	r2, [r7, #0]
 81042ee:	429a      	cmp	r2, r3
 81042f0:	d302      	bcc.n	81042f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 81042f2:	683b      	ldr	r3, [r7, #0]
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	d113      	bne.n	8104320 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042fc:	f043 0220 	orr.w	r2, r3, #32
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	2220      	movs	r2, #32
 8104308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810430c:	68fb      	ldr	r3, [r7, #12]
 810430e:	2200      	movs	r2, #0
 8104310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	2200      	movs	r2, #0
 8104318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 810431c:	2301      	movs	r3, #1
 810431e:	e00f      	b.n	8104340 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104320:	68fb      	ldr	r3, [r7, #12]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	699a      	ldr	r2, [r3, #24]
 8104326:	68bb      	ldr	r3, [r7, #8]
 8104328:	4013      	ands	r3, r2
 810432a:	68ba      	ldr	r2, [r7, #8]
 810432c:	429a      	cmp	r2, r3
 810432e:	bf0c      	ite	eq
 8104330:	2301      	moveq	r3, #1
 8104332:	2300      	movne	r3, #0
 8104334:	b2db      	uxtb	r3, r3
 8104336:	461a      	mov	r2, r3
 8104338:	79fb      	ldrb	r3, [r7, #7]
 810433a:	429a      	cmp	r2, r3
 810433c:	d0cd      	beq.n	81042da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810433e:	2300      	movs	r3, #0
}
 8104340:	4618      	mov	r0, r3
 8104342:	3710      	adds	r7, #16
 8104344:	46bd      	mov	sp, r7
 8104346:	bd80      	pop	{r7, pc}

08104348 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104348:	b580      	push	{r7, lr}
 810434a:	b084      	sub	sp, #16
 810434c:	af00      	add	r7, sp, #0
 810434e:	60f8      	str	r0, [r7, #12]
 8104350:	60b9      	str	r1, [r7, #8]
 8104352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104354:	e02c      	b.n	81043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8104356:	687a      	ldr	r2, [r7, #4]
 8104358:	68b9      	ldr	r1, [r7, #8]
 810435a:	68f8      	ldr	r0, [r7, #12]
 810435c:	f000 f8dc 	bl	8104518 <I2C_IsAcknowledgeFailed>
 8104360:	4603      	mov	r3, r0
 8104362:	2b00      	cmp	r3, #0
 8104364:	d001      	beq.n	810436a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104366:	2301      	movs	r3, #1
 8104368:	e02a      	b.n	81043c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810436a:	68bb      	ldr	r3, [r7, #8]
 810436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104370:	d01e      	beq.n	81043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104372:	f7fd fe79 	bl	8102068 <HAL_GetTick>
 8104376:	4602      	mov	r2, r0
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	1ad3      	subs	r3, r2, r3
 810437c:	68ba      	ldr	r2, [r7, #8]
 810437e:	429a      	cmp	r2, r3
 8104380:	d302      	bcc.n	8104388 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8104382:	68bb      	ldr	r3, [r7, #8]
 8104384:	2b00      	cmp	r3, #0
 8104386:	d113      	bne.n	81043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104388:	68fb      	ldr	r3, [r7, #12]
 810438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810438c:	f043 0220 	orr.w	r2, r3, #32
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104394:	68fb      	ldr	r3, [r7, #12]
 8104396:	2220      	movs	r2, #32
 8104398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	2200      	movs	r2, #0
 81043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	2200      	movs	r2, #0
 81043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81043ac:	2301      	movs	r3, #1
 81043ae:	e007      	b.n	81043c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81043b0:	68fb      	ldr	r3, [r7, #12]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	699b      	ldr	r3, [r3, #24]
 81043b6:	f003 0302 	and.w	r3, r3, #2
 81043ba:	2b02      	cmp	r3, #2
 81043bc:	d1cb      	bne.n	8104356 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81043be:	2300      	movs	r3, #0
}
 81043c0:	4618      	mov	r0, r3
 81043c2:	3710      	adds	r7, #16
 81043c4:	46bd      	mov	sp, r7
 81043c6:	bd80      	pop	{r7, pc}

081043c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81043c8:	b580      	push	{r7, lr}
 81043ca:	b084      	sub	sp, #16
 81043cc:	af00      	add	r7, sp, #0
 81043ce:	60f8      	str	r0, [r7, #12]
 81043d0:	60b9      	str	r1, [r7, #8]
 81043d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81043d4:	e028      	b.n	8104428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81043d6:	687a      	ldr	r2, [r7, #4]
 81043d8:	68b9      	ldr	r1, [r7, #8]
 81043da:	68f8      	ldr	r0, [r7, #12]
 81043dc:	f000 f89c 	bl	8104518 <I2C_IsAcknowledgeFailed>
 81043e0:	4603      	mov	r3, r0
 81043e2:	2b00      	cmp	r3, #0
 81043e4:	d001      	beq.n	81043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81043e6:	2301      	movs	r3, #1
 81043e8:	e026      	b.n	8104438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81043ea:	f7fd fe3d 	bl	8102068 <HAL_GetTick>
 81043ee:	4602      	mov	r2, r0
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	1ad3      	subs	r3, r2, r3
 81043f4:	68ba      	ldr	r2, [r7, #8]
 81043f6:	429a      	cmp	r2, r3
 81043f8:	d302      	bcc.n	8104400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81043fa:	68bb      	ldr	r3, [r7, #8]
 81043fc:	2b00      	cmp	r3, #0
 81043fe:	d113      	bne.n	8104428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104400:	68fb      	ldr	r3, [r7, #12]
 8104402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104404:	f043 0220 	orr.w	r2, r3, #32
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	2220      	movs	r2, #32
 8104410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	2200      	movs	r2, #0
 8104418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	2200      	movs	r2, #0
 8104420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8104424:	2301      	movs	r3, #1
 8104426:	e007      	b.n	8104438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104428:	68fb      	ldr	r3, [r7, #12]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	699b      	ldr	r3, [r3, #24]
 810442e:	f003 0320 	and.w	r3, r3, #32
 8104432:	2b20      	cmp	r3, #32
 8104434:	d1cf      	bne.n	81043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104436:	2300      	movs	r3, #0
}
 8104438:	4618      	mov	r0, r3
 810443a:	3710      	adds	r7, #16
 810443c:	46bd      	mov	sp, r7
 810443e:	bd80      	pop	{r7, pc}

08104440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104440:	b580      	push	{r7, lr}
 8104442:	b084      	sub	sp, #16
 8104444:	af00      	add	r7, sp, #0
 8104446:	60f8      	str	r0, [r7, #12]
 8104448:	60b9      	str	r1, [r7, #8]
 810444a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810444c:	e055      	b.n	81044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810444e:	687a      	ldr	r2, [r7, #4]
 8104450:	68b9      	ldr	r1, [r7, #8]
 8104452:	68f8      	ldr	r0, [r7, #12]
 8104454:	f000 f860 	bl	8104518 <I2C_IsAcknowledgeFailed>
 8104458:	4603      	mov	r3, r0
 810445a:	2b00      	cmp	r3, #0
 810445c:	d001      	beq.n	8104462 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810445e:	2301      	movs	r3, #1
 8104460:	e053      	b.n	810450a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8104462:	68fb      	ldr	r3, [r7, #12]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	699b      	ldr	r3, [r3, #24]
 8104468:	f003 0320 	and.w	r3, r3, #32
 810446c:	2b20      	cmp	r3, #32
 810446e:	d129      	bne.n	81044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8104470:	68fb      	ldr	r3, [r7, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	699b      	ldr	r3, [r3, #24]
 8104476:	f003 0304 	and.w	r3, r3, #4
 810447a:	2b04      	cmp	r3, #4
 810447c:	d105      	bne.n	810448a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104482:	2b00      	cmp	r3, #0
 8104484:	d001      	beq.n	810448a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8104486:	2300      	movs	r3, #0
 8104488:	e03f      	b.n	810450a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810448a:	68fb      	ldr	r3, [r7, #12]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	2220      	movs	r2, #32
 8104490:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	6859      	ldr	r1, [r3, #4]
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	681a      	ldr	r2, [r3, #0]
 810449c:	4b1d      	ldr	r3, [pc, #116]	; (8104514 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 810449e:	400b      	ands	r3, r1
 81044a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	2200      	movs	r2, #0
 81044a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	2220      	movs	r2, #32
 81044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81044b0:	68fb      	ldr	r3, [r7, #12]
 81044b2:	2200      	movs	r2, #0
 81044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81044b8:	68fb      	ldr	r3, [r7, #12]
 81044ba:	2200      	movs	r2, #0
 81044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81044c0:	2301      	movs	r3, #1
 81044c2:	e022      	b.n	810450a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81044c4:	f7fd fdd0 	bl	8102068 <HAL_GetTick>
 81044c8:	4602      	mov	r2, r0
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	1ad3      	subs	r3, r2, r3
 81044ce:	68ba      	ldr	r2, [r7, #8]
 81044d0:	429a      	cmp	r2, r3
 81044d2:	d302      	bcc.n	81044da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 81044d4:	68bb      	ldr	r3, [r7, #8]
 81044d6:	2b00      	cmp	r3, #0
 81044d8:	d10f      	bne.n	81044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044de:	f043 0220 	orr.w	r2, r3, #32
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81044e6:	68fb      	ldr	r3, [r7, #12]
 81044e8:	2220      	movs	r2, #32
 81044ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	2200      	movs	r2, #0
 81044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81044f6:	2301      	movs	r3, #1
 81044f8:	e007      	b.n	810450a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81044fa:	68fb      	ldr	r3, [r7, #12]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	699b      	ldr	r3, [r3, #24]
 8104500:	f003 0304 	and.w	r3, r3, #4
 8104504:	2b04      	cmp	r3, #4
 8104506:	d1a2      	bne.n	810444e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104508:	2300      	movs	r3, #0
}
 810450a:	4618      	mov	r0, r3
 810450c:	3710      	adds	r7, #16
 810450e:	46bd      	mov	sp, r7
 8104510:	bd80      	pop	{r7, pc}
 8104512:	bf00      	nop
 8104514:	fe00e800 	.word	0xfe00e800

08104518 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104518:	b580      	push	{r7, lr}
 810451a:	b084      	sub	sp, #16
 810451c:	af00      	add	r7, sp, #0
 810451e:	60f8      	str	r0, [r7, #12]
 8104520:	60b9      	str	r1, [r7, #8]
 8104522:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	699b      	ldr	r3, [r3, #24]
 810452a:	f003 0310 	and.w	r3, r3, #16
 810452e:	2b10      	cmp	r3, #16
 8104530:	d151      	bne.n	81045d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104532:	e022      	b.n	810457a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104534:	68bb      	ldr	r3, [r7, #8]
 8104536:	f1b3 3fff 	cmp.w	r3, #4294967295
 810453a:	d01e      	beq.n	810457a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810453c:	f7fd fd94 	bl	8102068 <HAL_GetTick>
 8104540:	4602      	mov	r2, r0
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	1ad3      	subs	r3, r2, r3
 8104546:	68ba      	ldr	r2, [r7, #8]
 8104548:	429a      	cmp	r2, r3
 810454a:	d302      	bcc.n	8104552 <I2C_IsAcknowledgeFailed+0x3a>
 810454c:	68bb      	ldr	r3, [r7, #8]
 810454e:	2b00      	cmp	r3, #0
 8104550:	d113      	bne.n	810457a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104556:	f043 0220 	orr.w	r2, r3, #32
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	2220      	movs	r2, #32
 8104562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	2200      	movs	r2, #0
 810456a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810456e:	68fb      	ldr	r3, [r7, #12]
 8104570:	2200      	movs	r2, #0
 8104572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8104576:	2301      	movs	r3, #1
 8104578:	e02e      	b.n	81045d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810457a:	68fb      	ldr	r3, [r7, #12]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	699b      	ldr	r3, [r3, #24]
 8104580:	f003 0320 	and.w	r3, r3, #32
 8104584:	2b20      	cmp	r3, #32
 8104586:	d1d5      	bne.n	8104534 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	2210      	movs	r2, #16
 810458e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	2220      	movs	r2, #32
 8104596:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104598:	68f8      	ldr	r0, [r7, #12]
 810459a:	f7ff fe71 	bl	8104280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810459e:	68fb      	ldr	r3, [r7, #12]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	6859      	ldr	r1, [r3, #4]
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	681a      	ldr	r2, [r3, #0]
 81045a8:	4b0d      	ldr	r3, [pc, #52]	; (81045e0 <I2C_IsAcknowledgeFailed+0xc8>)
 81045aa:	400b      	ands	r3, r1
 81045ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81045ae:	68fb      	ldr	r3, [r7, #12]
 81045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045b2:	f043 0204 	orr.w	r2, r3, #4
 81045b6:	68fb      	ldr	r3, [r7, #12]
 81045b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81045ba:	68fb      	ldr	r3, [r7, #12]
 81045bc:	2220      	movs	r2, #32
 81045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81045c2:	68fb      	ldr	r3, [r7, #12]
 81045c4:	2200      	movs	r2, #0
 81045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	2200      	movs	r2, #0
 81045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81045d2:	2301      	movs	r3, #1
 81045d4:	e000      	b.n	81045d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81045d6:	2300      	movs	r3, #0
}
 81045d8:	4618      	mov	r0, r3
 81045da:	3710      	adds	r7, #16
 81045dc:	46bd      	mov	sp, r7
 81045de:	bd80      	pop	{r7, pc}
 81045e0:	fe00e800 	.word	0xfe00e800

081045e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81045e4:	b480      	push	{r7}
 81045e6:	b085      	sub	sp, #20
 81045e8:	af00      	add	r7, sp, #0
 81045ea:	60f8      	str	r0, [r7, #12]
 81045ec:	607b      	str	r3, [r7, #4]
 81045ee:	460b      	mov	r3, r1
 81045f0:	817b      	strh	r3, [r7, #10]
 81045f2:	4613      	mov	r3, r2
 81045f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	685a      	ldr	r2, [r3, #4]
 81045fc:	69bb      	ldr	r3, [r7, #24]
 81045fe:	0d5b      	lsrs	r3, r3, #21
 8104600:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8104604:	4b0d      	ldr	r3, [pc, #52]	; (810463c <I2C_TransferConfig+0x58>)
 8104606:	430b      	orrs	r3, r1
 8104608:	43db      	mvns	r3, r3
 810460a:	ea02 0103 	and.w	r1, r2, r3
 810460e:	897b      	ldrh	r3, [r7, #10]
 8104610:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8104614:	7a7b      	ldrb	r3, [r7, #9]
 8104616:	041b      	lsls	r3, r3, #16
 8104618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810461c:	431a      	orrs	r2, r3
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	431a      	orrs	r2, r3
 8104622:	69bb      	ldr	r3, [r7, #24]
 8104624:	431a      	orrs	r2, r3
 8104626:	68fb      	ldr	r3, [r7, #12]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	430a      	orrs	r2, r1
 810462c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 810462e:	bf00      	nop
 8104630:	3714      	adds	r7, #20
 8104632:	46bd      	mov	sp, r7
 8104634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104638:	4770      	bx	lr
 810463a:	bf00      	nop
 810463c:	03ff63ff 	.word	0x03ff63ff

08104640 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104640:	b480      	push	{r7}
 8104642:	b083      	sub	sp, #12
 8104644:	af00      	add	r7, sp, #0
 8104646:	6078      	str	r0, [r7, #4]
 8104648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104650:	b2db      	uxtb	r3, r3
 8104652:	2b20      	cmp	r3, #32
 8104654:	d138      	bne.n	81046c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810465c:	2b01      	cmp	r3, #1
 810465e:	d101      	bne.n	8104664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104660:	2302      	movs	r3, #2
 8104662:	e032      	b.n	81046ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	2201      	movs	r2, #1
 8104668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	2224      	movs	r2, #36	; 0x24
 8104670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	681a      	ldr	r2, [r3, #0]
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	f022 0201 	bic.w	r2, r2, #1
 8104682:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	681a      	ldr	r2, [r3, #0]
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104692:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	6819      	ldr	r1, [r3, #0]
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	683a      	ldr	r2, [r7, #0]
 81046a0:	430a      	orrs	r2, r1
 81046a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	681a      	ldr	r2, [r3, #0]
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	f042 0201 	orr.w	r2, r2, #1
 81046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	2220      	movs	r2, #32
 81046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	2200      	movs	r2, #0
 81046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81046c4:	2300      	movs	r3, #0
 81046c6:	e000      	b.n	81046ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81046c8:	2302      	movs	r3, #2
  }
}
 81046ca:	4618      	mov	r0, r3
 81046cc:	370c      	adds	r7, #12
 81046ce:	46bd      	mov	sp, r7
 81046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d4:	4770      	bx	lr

081046d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81046d6:	b480      	push	{r7}
 81046d8:	b085      	sub	sp, #20
 81046da:	af00      	add	r7, sp, #0
 81046dc:	6078      	str	r0, [r7, #4]
 81046de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81046e6:	b2db      	uxtb	r3, r3
 81046e8:	2b20      	cmp	r3, #32
 81046ea:	d139      	bne.n	8104760 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81046f2:	2b01      	cmp	r3, #1
 81046f4:	d101      	bne.n	81046fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81046f6:	2302      	movs	r3, #2
 81046f8:	e033      	b.n	8104762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	2201      	movs	r2, #1
 81046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	2224      	movs	r2, #36	; 0x24
 8104706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	681a      	ldr	r2, [r3, #0]
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	f022 0201 	bic.w	r2, r2, #1
 8104718:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104728:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810472a:	683b      	ldr	r3, [r7, #0]
 810472c:	021b      	lsls	r3, r3, #8
 810472e:	68fa      	ldr	r2, [r7, #12]
 8104730:	4313      	orrs	r3, r2
 8104732:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	681b      	ldr	r3, [r3, #0]
 8104738:	68fa      	ldr	r2, [r7, #12]
 810473a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	681a      	ldr	r2, [r3, #0]
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f042 0201 	orr.w	r2, r2, #1
 810474a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	2220      	movs	r2, #32
 8104750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	2200      	movs	r2, #0
 8104758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810475c:	2300      	movs	r3, #0
 810475e:	e000      	b.n	8104762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104760:	2302      	movs	r3, #2
  }
}
 8104762:	4618      	mov	r0, r3
 8104764:	3714      	adds	r7, #20
 8104766:	46bd      	mov	sp, r7
 8104768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810476c:	4770      	bx	lr
	...

08104770 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104770:	b580      	push	{r7, lr}
 8104772:	b084      	sub	sp, #16
 8104774:	af00      	add	r7, sp, #0
 8104776:	60f8      	str	r0, [r7, #12]
 8104778:	460b      	mov	r3, r1
 810477a:	607a      	str	r2, [r7, #4]
 810477c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810477e:	4b37      	ldr	r3, [pc, #220]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	f023 0201 	bic.w	r2, r3, #1
 8104786:	4935      	ldr	r1, [pc, #212]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104788:	68fb      	ldr	r3, [r7, #12]
 810478a:	4313      	orrs	r3, r2
 810478c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	2b00      	cmp	r3, #0
 8104792:	d123      	bne.n	81047dc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104794:	f7fe ffa2 	bl	81036dc <HAL_GetCurrentCPUID>
 8104798:	4603      	mov	r3, r0
 810479a:	2b03      	cmp	r3, #3
 810479c:	d158      	bne.n	8104850 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810479e:	4b2f      	ldr	r3, [pc, #188]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 81047a0:	691b      	ldr	r3, [r3, #16]
 81047a2:	4a2e      	ldr	r2, [pc, #184]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 81047a4:	f023 0301 	bic.w	r3, r3, #1
 81047a8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047aa:	4b2d      	ldr	r3, [pc, #180]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047ac:	691b      	ldr	r3, [r3, #16]
 81047ae:	4a2c      	ldr	r2, [pc, #176]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047b0:	f043 0304 	orr.w	r3, r3, #4
 81047b4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81047b6:	f3bf 8f4f 	dsb	sy
}
 81047ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81047bc:	f3bf 8f6f 	isb	sy
}
 81047c0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81047c2:	7afb      	ldrb	r3, [r7, #11]
 81047c4:	2b01      	cmp	r3, #1
 81047c6:	d101      	bne.n	81047cc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81047c8:	bf30      	wfi
 81047ca:	e000      	b.n	81047ce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81047cc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047ce:	4b24      	ldr	r3, [pc, #144]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047d0:	691b      	ldr	r3, [r3, #16]
 81047d2:	4a23      	ldr	r2, [pc, #140]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047d4:	f023 0304 	bic.w	r3, r3, #4
 81047d8:	6113      	str	r3, [r2, #16]
 81047da:	e03c      	b.n	8104856 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	2b01      	cmp	r3, #1
 81047e0:	d123      	bne.n	810482a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81047e2:	f7fe ff7b 	bl	81036dc <HAL_GetCurrentCPUID>
 81047e6:	4603      	mov	r3, r0
 81047e8:	2b01      	cmp	r3, #1
 81047ea:	d133      	bne.n	8104854 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81047ec:	4b1b      	ldr	r3, [pc, #108]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 81047ee:	695b      	ldr	r3, [r3, #20]
 81047f0:	4a1a      	ldr	r2, [pc, #104]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 81047f2:	f023 0302 	bic.w	r3, r3, #2
 81047f6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047f8:	4b19      	ldr	r3, [pc, #100]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047fa:	691b      	ldr	r3, [r3, #16]
 81047fc:	4a18      	ldr	r2, [pc, #96]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047fe:	f043 0304 	orr.w	r3, r3, #4
 8104802:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104804:	f3bf 8f4f 	dsb	sy
}
 8104808:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810480a:	f3bf 8f6f 	isb	sy
}
 810480e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104810:	7afb      	ldrb	r3, [r7, #11]
 8104812:	2b01      	cmp	r3, #1
 8104814:	d101      	bne.n	810481a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104816:	bf30      	wfi
 8104818:	e000      	b.n	810481c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810481a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810481c:	4b10      	ldr	r3, [pc, #64]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810481e:	691b      	ldr	r3, [r3, #16]
 8104820:	4a0f      	ldr	r2, [pc, #60]	; (8104860 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104822:	f023 0304 	bic.w	r3, r3, #4
 8104826:	6113      	str	r3, [r2, #16]
 8104828:	e015      	b.n	8104856 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810482a:	f7fe ff57 	bl	81036dc <HAL_GetCurrentCPUID>
 810482e:	4603      	mov	r3, r0
 8104830:	2b03      	cmp	r3, #3
 8104832:	d106      	bne.n	8104842 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104834:	4b09      	ldr	r3, [pc, #36]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104836:	691b      	ldr	r3, [r3, #16]
 8104838:	4a08      	ldr	r2, [pc, #32]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 810483a:	f023 0304 	bic.w	r3, r3, #4
 810483e:	6113      	str	r3, [r2, #16]
 8104840:	e009      	b.n	8104856 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104842:	4b06      	ldr	r3, [pc, #24]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104844:	695b      	ldr	r3, [r3, #20]
 8104846:	4a05      	ldr	r2, [pc, #20]	; (810485c <HAL_PWREx_EnterSTOPMode+0xec>)
 8104848:	f023 0304 	bic.w	r3, r3, #4
 810484c:	6153      	str	r3, [r2, #20]
 810484e:	e002      	b.n	8104856 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104850:	bf00      	nop
 8104852:	e000      	b.n	8104856 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104854:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104856:	3710      	adds	r7, #16
 8104858:	46bd      	mov	sp, r7
 810485a:	bd80      	pop	{r7, pc}
 810485c:	58024800 	.word	0x58024800
 8104860:	e000ed00 	.word	0xe000ed00

08104864 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104864:	b580      	push	{r7, lr}
 8104866:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104868:	f7fe ff38 	bl	81036dc <HAL_GetCurrentCPUID>
 810486c:	4603      	mov	r3, r0
 810486e:	2b03      	cmp	r3, #3
 8104870:	d101      	bne.n	8104876 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104872:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104874:	e001      	b.n	810487a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104876:	bf40      	sev
    __WFE ();
 8104878:	bf20      	wfe
}
 810487a:	bf00      	nop
 810487c:	bd80      	pop	{r7, pc}
	...

08104880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104880:	b480      	push	{r7}
 8104882:	b089      	sub	sp, #36	; 0x24
 8104884:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104886:	4bb3      	ldr	r3, [pc, #716]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104888:	691b      	ldr	r3, [r3, #16]
 810488a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810488e:	2b18      	cmp	r3, #24
 8104890:	f200 8155 	bhi.w	8104b3e <HAL_RCC_GetSysClockFreq+0x2be>
 8104894:	a201      	add	r2, pc, #4	; (adr r2, 810489c <HAL_RCC_GetSysClockFreq+0x1c>)
 8104896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810489a:	bf00      	nop
 810489c:	08104901 	.word	0x08104901
 81048a0:	08104b3f 	.word	0x08104b3f
 81048a4:	08104b3f 	.word	0x08104b3f
 81048a8:	08104b3f 	.word	0x08104b3f
 81048ac:	08104b3f 	.word	0x08104b3f
 81048b0:	08104b3f 	.word	0x08104b3f
 81048b4:	08104b3f 	.word	0x08104b3f
 81048b8:	08104b3f 	.word	0x08104b3f
 81048bc:	08104927 	.word	0x08104927
 81048c0:	08104b3f 	.word	0x08104b3f
 81048c4:	08104b3f 	.word	0x08104b3f
 81048c8:	08104b3f 	.word	0x08104b3f
 81048cc:	08104b3f 	.word	0x08104b3f
 81048d0:	08104b3f 	.word	0x08104b3f
 81048d4:	08104b3f 	.word	0x08104b3f
 81048d8:	08104b3f 	.word	0x08104b3f
 81048dc:	0810492d 	.word	0x0810492d
 81048e0:	08104b3f 	.word	0x08104b3f
 81048e4:	08104b3f 	.word	0x08104b3f
 81048e8:	08104b3f 	.word	0x08104b3f
 81048ec:	08104b3f 	.word	0x08104b3f
 81048f0:	08104b3f 	.word	0x08104b3f
 81048f4:	08104b3f 	.word	0x08104b3f
 81048f8:	08104b3f 	.word	0x08104b3f
 81048fc:	08104933 	.word	0x08104933
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104900:	4b94      	ldr	r3, [pc, #592]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	f003 0320 	and.w	r3, r3, #32
 8104908:	2b00      	cmp	r3, #0
 810490a:	d009      	beq.n	8104920 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810490c:	4b91      	ldr	r3, [pc, #580]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	08db      	lsrs	r3, r3, #3
 8104912:	f003 0303 	and.w	r3, r3, #3
 8104916:	4a90      	ldr	r2, [pc, #576]	; (8104b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104918:	fa22 f303 	lsr.w	r3, r2, r3
 810491c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810491e:	e111      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104920:	4b8d      	ldr	r3, [pc, #564]	; (8104b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104922:	61bb      	str	r3, [r7, #24]
    break;
 8104924:	e10e      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104926:	4b8d      	ldr	r3, [pc, #564]	; (8104b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104928:	61bb      	str	r3, [r7, #24]
    break;
 810492a:	e10b      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810492c:	4b8c      	ldr	r3, [pc, #560]	; (8104b60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810492e:	61bb      	str	r3, [r7, #24]
    break;
 8104930:	e108      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104932:	4b88      	ldr	r3, [pc, #544]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104936:	f003 0303 	and.w	r3, r3, #3
 810493a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810493c:	4b85      	ldr	r3, [pc, #532]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104940:	091b      	lsrs	r3, r3, #4
 8104942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104946:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104948:	4b82      	ldr	r3, [pc, #520]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810494c:	f003 0301 	and.w	r3, r3, #1
 8104950:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104952:	4b80      	ldr	r3, [pc, #512]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104956:	08db      	lsrs	r3, r3, #3
 8104958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810495c:	68fa      	ldr	r2, [r7, #12]
 810495e:	fb02 f303 	mul.w	r3, r2, r3
 8104962:	ee07 3a90 	vmov	s15, r3
 8104966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810496a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810496e:	693b      	ldr	r3, [r7, #16]
 8104970:	2b00      	cmp	r3, #0
 8104972:	f000 80e1 	beq.w	8104b38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104976:	697b      	ldr	r3, [r7, #20]
 8104978:	2b02      	cmp	r3, #2
 810497a:	f000 8083 	beq.w	8104a84 <HAL_RCC_GetSysClockFreq+0x204>
 810497e:	697b      	ldr	r3, [r7, #20]
 8104980:	2b02      	cmp	r3, #2
 8104982:	f200 80a1 	bhi.w	8104ac8 <HAL_RCC_GetSysClockFreq+0x248>
 8104986:	697b      	ldr	r3, [r7, #20]
 8104988:	2b00      	cmp	r3, #0
 810498a:	d003      	beq.n	8104994 <HAL_RCC_GetSysClockFreq+0x114>
 810498c:	697b      	ldr	r3, [r7, #20]
 810498e:	2b01      	cmp	r3, #1
 8104990:	d056      	beq.n	8104a40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104992:	e099      	b.n	8104ac8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104994:	4b6f      	ldr	r3, [pc, #444]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	f003 0320 	and.w	r3, r3, #32
 810499c:	2b00      	cmp	r3, #0
 810499e:	d02d      	beq.n	81049fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81049a0:	4b6c      	ldr	r3, [pc, #432]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	08db      	lsrs	r3, r3, #3
 81049a6:	f003 0303 	and.w	r3, r3, #3
 81049aa:	4a6b      	ldr	r2, [pc, #428]	; (8104b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049ac:	fa22 f303 	lsr.w	r3, r2, r3
 81049b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	ee07 3a90 	vmov	s15, r3
 81049b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049bc:	693b      	ldr	r3, [r7, #16]
 81049be:	ee07 3a90 	vmov	s15, r3
 81049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049ca:	4b62      	ldr	r3, [pc, #392]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049d2:	ee07 3a90 	vmov	s15, r3
 81049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049da:	ed97 6a02 	vldr	s12, [r7, #8]
 81049de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 81049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81049fa:	e087      	b.n	8104b0c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81049fc:	693b      	ldr	r3, [r7, #16]
 81049fe:	ee07 3a90 	vmov	s15, r3
 8104a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104b68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a0e:	4b51      	ldr	r3, [pc, #324]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a16:	ee07 3a90 	vmov	s15, r3
 8104a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a3e:	e065      	b.n	8104b0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a40:	693b      	ldr	r3, [r7, #16]
 8104a42:	ee07 3a90 	vmov	s15, r3
 8104a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8104a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a52:	4b40      	ldr	r3, [pc, #256]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a5a:	ee07 3a90 	vmov	s15, r3
 8104a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a82:	e043      	b.n	8104b0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a84:	693b      	ldr	r3, [r7, #16]
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104b70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a96:	4b2f      	ldr	r3, [pc, #188]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a9e:	ee07 3a90 	vmov	s15, r3
 8104aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8104aaa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ac6:	e021      	b.n	8104b0c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104ac8:	693b      	ldr	r3, [r7, #16]
 8104aca:	ee07 3a90 	vmov	s15, r3
 8104ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ad2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8104ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ada:	4b1e      	ldr	r3, [pc, #120]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ae2:	ee07 3a90 	vmov	s15, r3
 8104ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8104aee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b0a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104b0c:	4b11      	ldr	r3, [pc, #68]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b10:	0a5b      	lsrs	r3, r3, #9
 8104b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b16:	3301      	adds	r3, #1
 8104b18:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104b1a:	683b      	ldr	r3, [r7, #0]
 8104b1c:	ee07 3a90 	vmov	s15, r3
 8104b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b30:	ee17 3a90 	vmov	r3, s15
 8104b34:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104b36:	e005      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104b38:	2300      	movs	r3, #0
 8104b3a:	61bb      	str	r3, [r7, #24]
    break;
 8104b3c:	e002      	b.n	8104b44 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104b3e:	4b07      	ldr	r3, [pc, #28]	; (8104b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104b40:	61bb      	str	r3, [r7, #24]
    break;
 8104b42:	bf00      	nop
  }

  return sysclockfreq;
 8104b44:	69bb      	ldr	r3, [r7, #24]
}
 8104b46:	4618      	mov	r0, r3
 8104b48:	3724      	adds	r7, #36	; 0x24
 8104b4a:	46bd      	mov	sp, r7
 8104b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b50:	4770      	bx	lr
 8104b52:	bf00      	nop
 8104b54:	58024400 	.word	0x58024400
 8104b58:	03d09000 	.word	0x03d09000
 8104b5c:	003d0900 	.word	0x003d0900
 8104b60:	017d7840 	.word	0x017d7840
 8104b64:	46000000 	.word	0x46000000
 8104b68:	4c742400 	.word	0x4c742400
 8104b6c:	4a742400 	.word	0x4a742400
 8104b70:	4bbebc20 	.word	0x4bbebc20

08104b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104b74:	b580      	push	{r7, lr}
 8104b76:	b082      	sub	sp, #8
 8104b78:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104b7a:	f7ff fe81 	bl	8104880 <HAL_RCC_GetSysClockFreq>
 8104b7e:	4602      	mov	r2, r0
 8104b80:	4b11      	ldr	r3, [pc, #68]	; (8104bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8104b82:	699b      	ldr	r3, [r3, #24]
 8104b84:	0a1b      	lsrs	r3, r3, #8
 8104b86:	f003 030f 	and.w	r3, r3, #15
 8104b8a:	4910      	ldr	r1, [pc, #64]	; (8104bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8104b8c:	5ccb      	ldrb	r3, [r1, r3]
 8104b8e:	f003 031f 	and.w	r3, r3, #31
 8104b92:	fa22 f303 	lsr.w	r3, r2, r3
 8104b96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b98:	4b0b      	ldr	r3, [pc, #44]	; (8104bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8104b9a:	699b      	ldr	r3, [r3, #24]
 8104b9c:	f003 030f 	and.w	r3, r3, #15
 8104ba0:	4a0a      	ldr	r2, [pc, #40]	; (8104bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8104ba2:	5cd3      	ldrb	r3, [r2, r3]
 8104ba4:	f003 031f 	and.w	r3, r3, #31
 8104ba8:	687a      	ldr	r2, [r7, #4]
 8104baa:	fa22 f303 	lsr.w	r3, r2, r3
 8104bae:	4a08      	ldr	r2, [pc, #32]	; (8104bd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bb0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104bb2:	4b07      	ldr	r3, [pc, #28]	; (8104bd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	4a07      	ldr	r2, [pc, #28]	; (8104bd4 <HAL_RCC_GetHCLKFreq+0x60>)
 8104bb8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104bba:	4b05      	ldr	r3, [pc, #20]	; (8104bd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bbc:	681b      	ldr	r3, [r3, #0]
}
 8104bbe:	4618      	mov	r0, r3
 8104bc0:	3708      	adds	r7, #8
 8104bc2:	46bd      	mov	sp, r7
 8104bc4:	bd80      	pop	{r7, pc}
 8104bc6:	bf00      	nop
 8104bc8:	58024400 	.word	0x58024400
 8104bcc:	0810a7a8 	.word	0x0810a7a8
 8104bd0:	10000004 	.word	0x10000004
 8104bd4:	10000000 	.word	0x10000000

08104bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104bd8:	b580      	push	{r7, lr}
 8104bda:	b086      	sub	sp, #24
 8104bdc:	af00      	add	r7, sp, #0
 8104bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104be0:	2300      	movs	r3, #0
 8104be2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104be4:	2300      	movs	r3, #0
 8104be6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104bf0:	2b00      	cmp	r3, #0
 8104bf2:	d03f      	beq.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104bfc:	d02a      	beq.n	8104c54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104bfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104c02:	d824      	bhi.n	8104c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c08:	d018      	beq.n	8104c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c0e:	d81e      	bhi.n	8104c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104c10:	2b00      	cmp	r3, #0
 8104c12:	d003      	beq.n	8104c1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104c18:	d007      	beq.n	8104c2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104c1a:	e018      	b.n	8104c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c1c:	4ba3      	ldr	r3, [pc, #652]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c20:	4aa2      	ldr	r2, [pc, #648]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c28:	e015      	b.n	8104c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	3304      	adds	r3, #4
 8104c2e:	2102      	movs	r1, #2
 8104c30:	4618      	mov	r0, r3
 8104c32:	f001 fff9 	bl	8106c28 <RCCEx_PLL2_Config>
 8104c36:	4603      	mov	r3, r0
 8104c38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c3a:	e00c      	b.n	8104c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	3324      	adds	r3, #36	; 0x24
 8104c40:	2102      	movs	r1, #2
 8104c42:	4618      	mov	r0, r3
 8104c44:	f002 f8a2 	bl	8106d8c <RCCEx_PLL3_Config>
 8104c48:	4603      	mov	r3, r0
 8104c4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c4c:	e003      	b.n	8104c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c4e:	2301      	movs	r3, #1
 8104c50:	75fb      	strb	r3, [r7, #23]
      break;
 8104c52:	e000      	b.n	8104c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c56:	7dfb      	ldrb	r3, [r7, #23]
 8104c58:	2b00      	cmp	r3, #0
 8104c5a:	d109      	bne.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104c5c:	4b93      	ldr	r3, [pc, #588]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c68:	4990      	ldr	r1, [pc, #576]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c6a:	4313      	orrs	r3, r2
 8104c6c:	650b      	str	r3, [r1, #80]	; 0x50
 8104c6e:	e001      	b.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c70:	7dfb      	ldrb	r3, [r7, #23]
 8104c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d03d      	beq.n	8104cfc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c84:	2b04      	cmp	r3, #4
 8104c86:	d826      	bhi.n	8104cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104c88:	a201      	add	r2, pc, #4	; (adr r2, 8104c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c8e:	bf00      	nop
 8104c90:	08104ca5 	.word	0x08104ca5
 8104c94:	08104cb3 	.word	0x08104cb3
 8104c98:	08104cc5 	.word	0x08104cc5
 8104c9c:	08104cdd 	.word	0x08104cdd
 8104ca0:	08104cdd 	.word	0x08104cdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ca4:	4b81      	ldr	r3, [pc, #516]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ca8:	4a80      	ldr	r2, [pc, #512]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cb0:	e015      	b.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	3304      	adds	r3, #4
 8104cb6:	2100      	movs	r1, #0
 8104cb8:	4618      	mov	r0, r3
 8104cba:	f001 ffb5 	bl	8106c28 <RCCEx_PLL2_Config>
 8104cbe:	4603      	mov	r3, r0
 8104cc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cc2:	e00c      	b.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	3324      	adds	r3, #36	; 0x24
 8104cc8:	2100      	movs	r1, #0
 8104cca:	4618      	mov	r0, r3
 8104ccc:	f002 f85e 	bl	8106d8c <RCCEx_PLL3_Config>
 8104cd0:	4603      	mov	r3, r0
 8104cd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cd4:	e003      	b.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104cd6:	2301      	movs	r3, #1
 8104cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8104cda:	e000      	b.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104cde:	7dfb      	ldrb	r3, [r7, #23]
 8104ce0:	2b00      	cmp	r3, #0
 8104ce2:	d109      	bne.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104ce4:	4b71      	ldr	r3, [pc, #452]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ce8:	f023 0207 	bic.w	r2, r3, #7
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cf0:	496e      	ldr	r1, [pc, #440]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104cf2:	4313      	orrs	r3, r2
 8104cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8104cf6:	e001      	b.n	8104cfc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cf8:	7dfb      	ldrb	r3, [r7, #23]
 8104cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104d04:	2b00      	cmp	r3, #0
 8104d06:	d042      	beq.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d10:	d02b      	beq.n	8104d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d16:	d825      	bhi.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d18:	2bc0      	cmp	r3, #192	; 0xc0
 8104d1a:	d028      	beq.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104d1c:	2bc0      	cmp	r3, #192	; 0xc0
 8104d1e:	d821      	bhi.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d20:	2b80      	cmp	r3, #128	; 0x80
 8104d22:	d016      	beq.n	8104d52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104d24:	2b80      	cmp	r3, #128	; 0x80
 8104d26:	d81d      	bhi.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d28:	2b00      	cmp	r3, #0
 8104d2a:	d002      	beq.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104d2c:	2b40      	cmp	r3, #64	; 0x40
 8104d2e:	d007      	beq.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104d30:	e018      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d32:	4b5e      	ldr	r3, [pc, #376]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d36:	4a5d      	ldr	r2, [pc, #372]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d3e:	e017      	b.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	3304      	adds	r3, #4
 8104d44:	2100      	movs	r1, #0
 8104d46:	4618      	mov	r0, r3
 8104d48:	f001 ff6e 	bl	8106c28 <RCCEx_PLL2_Config>
 8104d4c:	4603      	mov	r3, r0
 8104d4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d50:	e00e      	b.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	3324      	adds	r3, #36	; 0x24
 8104d56:	2100      	movs	r1, #0
 8104d58:	4618      	mov	r0, r3
 8104d5a:	f002 f817 	bl	8106d8c <RCCEx_PLL3_Config>
 8104d5e:	4603      	mov	r3, r0
 8104d60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d62:	e005      	b.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d64:	2301      	movs	r3, #1
 8104d66:	75fb      	strb	r3, [r7, #23]
      break;
 8104d68:	e002      	b.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104d6a:	bf00      	nop
 8104d6c:	e000      	b.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d70:	7dfb      	ldrb	r3, [r7, #23]
 8104d72:	2b00      	cmp	r3, #0
 8104d74:	d109      	bne.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104d76:	4b4d      	ldr	r3, [pc, #308]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d82:	494a      	ldr	r1, [pc, #296]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d84:	4313      	orrs	r3, r2
 8104d86:	650b      	str	r3, [r1, #80]	; 0x50
 8104d88:	e001      	b.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d8a:	7dfb      	ldrb	r3, [r7, #23]
 8104d8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	d049      	beq.n	8104e2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104da4:	d030      	beq.n	8104e08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104daa:	d82a      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104dac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104db0:	d02c      	beq.n	8104e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104db2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104db6:	d824      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104dbc:	d018      	beq.n	8104df0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104dc2:	d81e      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104dc4:	2b00      	cmp	r3, #0
 8104dc6:	d003      	beq.n	8104dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104dcc:	d007      	beq.n	8104dde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104dce:	e018      	b.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104dd0:	4b36      	ldr	r3, [pc, #216]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dd4:	4a35      	ldr	r2, [pc, #212]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ddc:	e017      	b.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	3304      	adds	r3, #4
 8104de2:	2100      	movs	r1, #0
 8104de4:	4618      	mov	r0, r3
 8104de6:	f001 ff1f 	bl	8106c28 <RCCEx_PLL2_Config>
 8104dea:	4603      	mov	r3, r0
 8104dec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104dee:	e00e      	b.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	3324      	adds	r3, #36	; 0x24
 8104df4:	2100      	movs	r1, #0
 8104df6:	4618      	mov	r0, r3
 8104df8:	f001 ffc8 	bl	8106d8c <RCCEx_PLL3_Config>
 8104dfc:	4603      	mov	r3, r0
 8104dfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104e00:	e005      	b.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104e02:	2301      	movs	r3, #1
 8104e04:	75fb      	strb	r3, [r7, #23]
      break;
 8104e06:	e002      	b.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104e08:	bf00      	nop
 8104e0a:	e000      	b.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e0e:	7dfb      	ldrb	r3, [r7, #23]
 8104e10:	2b00      	cmp	r3, #0
 8104e12:	d10a      	bne.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104e14:	4b25      	ldr	r3, [pc, #148]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104e22:	4922      	ldr	r1, [pc, #136]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e24:	4313      	orrs	r3, r2
 8104e26:	658b      	str	r3, [r1, #88]	; 0x58
 8104e28:	e001      	b.n	8104e2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e2a:	7dfb      	ldrb	r3, [r7, #23]
 8104e2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104e36:	2b00      	cmp	r3, #0
 8104e38:	d04b      	beq.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104e44:	d030      	beq.n	8104ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104e4a:	d82a      	bhi.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104e50:	d02e      	beq.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8104e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104e56:	d824      	bhi.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e5c:	d018      	beq.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e62:	d81e      	bhi.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e64:	2b00      	cmp	r3, #0
 8104e66:	d003      	beq.n	8104e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104e6c:	d007      	beq.n	8104e7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104e6e:	e018      	b.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e70:	4b0e      	ldr	r3, [pc, #56]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e74:	4a0d      	ldr	r2, [pc, #52]	; (8104eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104e7c:	e019      	b.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	3304      	adds	r3, #4
 8104e82:	2100      	movs	r1, #0
 8104e84:	4618      	mov	r0, r3
 8104e86:	f001 fecf 	bl	8106c28 <RCCEx_PLL2_Config>
 8104e8a:	4603      	mov	r3, r0
 8104e8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104e8e:	e010      	b.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	3324      	adds	r3, #36	; 0x24
 8104e94:	2100      	movs	r1, #0
 8104e96:	4618      	mov	r0, r3
 8104e98:	f001 ff78 	bl	8106d8c <RCCEx_PLL3_Config>
 8104e9c:	4603      	mov	r3, r0
 8104e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ea0:	e007      	b.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104ea2:	2301      	movs	r3, #1
 8104ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8104ea6:	e004      	b.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8104ea8:	bf00      	nop
 8104eaa:	e002      	b.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104eac:	58024400 	.word	0x58024400
      break;
 8104eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104eb2:	7dfb      	ldrb	r3, [r7, #23]
 8104eb4:	2b00      	cmp	r3, #0
 8104eb6:	d10a      	bne.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104eb8:	4b99      	ldr	r3, [pc, #612]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ebc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104ec6:	4996      	ldr	r1, [pc, #600]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104ec8:	4313      	orrs	r3, r2
 8104eca:	658b      	str	r3, [r1, #88]	; 0x58
 8104ecc:	e001      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ece:	7dfb      	ldrb	r3, [r7, #23]
 8104ed0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104eda:	2b00      	cmp	r3, #0
 8104edc:	d032      	beq.n	8104f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104ee2:	2b30      	cmp	r3, #48	; 0x30
 8104ee4:	d01c      	beq.n	8104f20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8104ee6:	2b30      	cmp	r3, #48	; 0x30
 8104ee8:	d817      	bhi.n	8104f1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104eea:	2b20      	cmp	r3, #32
 8104eec:	d00c      	beq.n	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8104eee:	2b20      	cmp	r3, #32
 8104ef0:	d813      	bhi.n	8104f1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104ef2:	2b00      	cmp	r3, #0
 8104ef4:	d016      	beq.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8104ef6:	2b10      	cmp	r3, #16
 8104ef8:	d10f      	bne.n	8104f1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104efa:	4b89      	ldr	r3, [pc, #548]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104efe:	4a88      	ldr	r2, [pc, #544]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104f06:	e00e      	b.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	3304      	adds	r3, #4
 8104f0c:	2102      	movs	r1, #2
 8104f0e:	4618      	mov	r0, r3
 8104f10:	f001 fe8a 	bl	8106c28 <RCCEx_PLL2_Config>
 8104f14:	4603      	mov	r3, r0
 8104f16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104f18:	e005      	b.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104f1a:	2301      	movs	r3, #1
 8104f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8104f1e:	e002      	b.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104f20:	bf00      	nop
 8104f22:	e000      	b.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f26:	7dfb      	ldrb	r3, [r7, #23]
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d109      	bne.n	8104f40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104f2c:	4b7c      	ldr	r3, [pc, #496]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104f38:	4979      	ldr	r1, [pc, #484]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f3a:	4313      	orrs	r3, r2
 8104f3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104f3e:	e001      	b.n	8104f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f40:	7dfb      	ldrb	r3, [r7, #23]
 8104f42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	681b      	ldr	r3, [r3, #0]
 8104f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	d047      	beq.n	8104fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104f58:	d030      	beq.n	8104fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104f5e:	d82a      	bhi.n	8104fb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104f64:	d02c      	beq.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104f66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104f6a:	d824      	bhi.n	8104fb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104f70:	d018      	beq.n	8104fa4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8104f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104f76:	d81e      	bhi.n	8104fb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d003      	beq.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f80:	d007      	beq.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8104f82:	e018      	b.n	8104fb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f84:	4b66      	ldr	r3, [pc, #408]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f88:	4a65      	ldr	r2, [pc, #404]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104f90:	e017      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104f92:	687b      	ldr	r3, [r7, #4]
 8104f94:	3304      	adds	r3, #4
 8104f96:	2100      	movs	r1, #0
 8104f98:	4618      	mov	r0, r3
 8104f9a:	f001 fe45 	bl	8106c28 <RCCEx_PLL2_Config>
 8104f9e:	4603      	mov	r3, r0
 8104fa0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104fa2:	e00e      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	3324      	adds	r3, #36	; 0x24
 8104fa8:	2100      	movs	r1, #0
 8104faa:	4618      	mov	r0, r3
 8104fac:	f001 feee 	bl	8106d8c <RCCEx_PLL3_Config>
 8104fb0:	4603      	mov	r3, r0
 8104fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104fb4:	e005      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104fb6:	2301      	movs	r3, #1
 8104fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8104fba:	e002      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104fbc:	bf00      	nop
 8104fbe:	e000      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104fc2:	7dfb      	ldrb	r3, [r7, #23]
 8104fc4:	2b00      	cmp	r3, #0
 8104fc6:	d109      	bne.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104fc8:	4b55      	ldr	r3, [pc, #340]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104fcc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fd4:	4952      	ldr	r1, [pc, #328]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104fd6:	4313      	orrs	r3, r2
 8104fd8:	650b      	str	r3, [r1, #80]	; 0x50
 8104fda:	e001      	b.n	8104fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fdc:	7dfb      	ldrb	r3, [r7, #23]
 8104fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	681b      	ldr	r3, [r3, #0]
 8104fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104fe8:	2b00      	cmp	r3, #0
 8104fea:	d049      	beq.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104ff4:	d02e      	beq.n	8105054 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8104ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104ffa:	d828      	bhi.n	810504e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105000:	d02a      	beq.n	8105058 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105006:	d822      	bhi.n	810504e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810500c:	d026      	beq.n	810505c <HAL_RCCEx_PeriphCLKConfig+0x484>
 810500e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105012:	d81c      	bhi.n	810504e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105018:	d010      	beq.n	810503c <HAL_RCCEx_PeriphCLKConfig+0x464>
 810501a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810501e:	d816      	bhi.n	810504e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105020:	2b00      	cmp	r3, #0
 8105022:	d01d      	beq.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105028:	d111      	bne.n	810504e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	3304      	adds	r3, #4
 810502e:	2101      	movs	r1, #1
 8105030:	4618      	mov	r0, r3
 8105032:	f001 fdf9 	bl	8106c28 <RCCEx_PLL2_Config>
 8105036:	4603      	mov	r3, r0
 8105038:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810503a:	e012      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	3324      	adds	r3, #36	; 0x24
 8105040:	2101      	movs	r1, #1
 8105042:	4618      	mov	r0, r3
 8105044:	f001 fea2 	bl	8106d8c <RCCEx_PLL3_Config>
 8105048:	4603      	mov	r3, r0
 810504a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810504c:	e009      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810504e:	2301      	movs	r3, #1
 8105050:	75fb      	strb	r3, [r7, #23]
      break;
 8105052:	e006      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105054:	bf00      	nop
 8105056:	e004      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105058:	bf00      	nop
 810505a:	e002      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810505c:	bf00      	nop
 810505e:	e000      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105062:	7dfb      	ldrb	r3, [r7, #23]
 8105064:	2b00      	cmp	r3, #0
 8105066:	d109      	bne.n	810507c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105068:	4b2d      	ldr	r3, [pc, #180]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810506c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105074:	492a      	ldr	r1, [pc, #168]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105076:	4313      	orrs	r3, r2
 8105078:	650b      	str	r3, [r1, #80]	; 0x50
 810507a:	e001      	b.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810507c:	7dfb      	ldrb	r3, [r7, #23]
 810507e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105088:	2b00      	cmp	r3, #0
 810508a:	d04d      	beq.n	8105128 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105096:	d02e      	beq.n	81050f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8105098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810509c:	d828      	bhi.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050a2:	d02a      	beq.n	81050fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 81050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050a8:	d822      	bhi.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81050aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81050ae:	d026      	beq.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 81050b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81050b4:	d81c      	bhi.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050ba:	d010      	beq.n	81050de <HAL_RCCEx_PeriphCLKConfig+0x506>
 81050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050c0:	d816      	bhi.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d01d      	beq.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81050c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050ca:	d111      	bne.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81050cc:	687b      	ldr	r3, [r7, #4]
 81050ce:	3304      	adds	r3, #4
 81050d0:	2101      	movs	r1, #1
 81050d2:	4618      	mov	r0, r3
 81050d4:	f001 fda8 	bl	8106c28 <RCCEx_PLL2_Config>
 81050d8:	4603      	mov	r3, r0
 81050da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81050dc:	e012      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	3324      	adds	r3, #36	; 0x24
 81050e2:	2101      	movs	r1, #1
 81050e4:	4618      	mov	r0, r3
 81050e6:	f001 fe51 	bl	8106d8c <RCCEx_PLL3_Config>
 81050ea:	4603      	mov	r3, r0
 81050ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81050ee:	e009      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81050f0:	2301      	movs	r3, #1
 81050f2:	75fb      	strb	r3, [r7, #23]
      break;
 81050f4:	e006      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81050f6:	bf00      	nop
 81050f8:	e004      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81050fa:	bf00      	nop
 81050fc:	e002      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81050fe:	bf00      	nop
 8105100:	e000      	b.n	8105104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105104:	7dfb      	ldrb	r3, [r7, #23]
 8105106:	2b00      	cmp	r3, #0
 8105108:	d10c      	bne.n	8105124 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810510a:	4b05      	ldr	r3, [pc, #20]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810510e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105118:	4901      	ldr	r1, [pc, #4]	; (8105120 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810511a:	4313      	orrs	r3, r2
 810511c:	658b      	str	r3, [r1, #88]	; 0x58
 810511e:	e003      	b.n	8105128 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105124:	7dfb      	ldrb	r3, [r7, #23]
 8105126:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105130:	2b00      	cmp	r3, #0
 8105132:	d02f      	beq.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810513c:	d00e      	beq.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x584>
 810513e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105142:	d814      	bhi.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105144:	2b00      	cmp	r3, #0
 8105146:	d015      	beq.n	8105174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810514c:	d10f      	bne.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810514e:	4bb0      	ldr	r3, [pc, #704]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105152:	4aaf      	ldr	r2, [pc, #700]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810515a:	e00c      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	3304      	adds	r3, #4
 8105160:	2101      	movs	r1, #1
 8105162:	4618      	mov	r0, r3
 8105164:	f001 fd60 	bl	8106c28 <RCCEx_PLL2_Config>
 8105168:	4603      	mov	r3, r0
 810516a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810516c:	e003      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810516e:	2301      	movs	r3, #1
 8105170:	75fb      	strb	r3, [r7, #23]
      break;
 8105172:	e000      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105176:	7dfb      	ldrb	r3, [r7, #23]
 8105178:	2b00      	cmp	r3, #0
 810517a:	d109      	bne.n	8105190 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810517c:	4ba4      	ldr	r3, [pc, #656]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105180:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105188:	49a1      	ldr	r1, [pc, #644]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810518a:	4313      	orrs	r3, r2
 810518c:	650b      	str	r3, [r1, #80]	; 0x50
 810518e:	e001      	b.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105190:	7dfb      	ldrb	r3, [r7, #23]
 8105192:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810519c:	2b00      	cmp	r3, #0
 810519e:	d032      	beq.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81051a4:	2b03      	cmp	r3, #3
 81051a6:	d81b      	bhi.n	81051e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81051a8:	a201      	add	r2, pc, #4	; (adr r2, 81051b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051ae:	bf00      	nop
 81051b0:	081051e7 	.word	0x081051e7
 81051b4:	081051c1 	.word	0x081051c1
 81051b8:	081051cf 	.word	0x081051cf
 81051bc:	081051e7 	.word	0x081051e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051c0:	4b93      	ldr	r3, [pc, #588]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051c4:	4a92      	ldr	r2, [pc, #584]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81051ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81051cc:	e00c      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	3304      	adds	r3, #4
 81051d2:	2102      	movs	r1, #2
 81051d4:	4618      	mov	r0, r3
 81051d6:	f001 fd27 	bl	8106c28 <RCCEx_PLL2_Config>
 81051da:	4603      	mov	r3, r0
 81051dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81051de:	e003      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81051e0:	2301      	movs	r3, #1
 81051e2:	75fb      	strb	r3, [r7, #23]
      break;
 81051e4:	e000      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81051e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051e8:	7dfb      	ldrb	r3, [r7, #23]
 81051ea:	2b00      	cmp	r3, #0
 81051ec:	d109      	bne.n	8105202 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81051ee:	4b88      	ldr	r3, [pc, #544]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051f2:	f023 0203 	bic.w	r2, r3, #3
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81051fa:	4985      	ldr	r1, [pc, #532]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051fc:	4313      	orrs	r3, r2
 81051fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105200:	e001      	b.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105202:	7dfb      	ldrb	r3, [r7, #23]
 8105204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810520e:	2b00      	cmp	r3, #0
 8105210:	f000 8088 	beq.w	8105324 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105214:	4b7f      	ldr	r3, [pc, #508]	; (8105414 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	4a7e      	ldr	r2, [pc, #504]	; (8105414 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810521e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105220:	f7fc ff22 	bl	8102068 <HAL_GetTick>
 8105224:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105226:	e009      	b.n	810523c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105228:	f7fc ff1e 	bl	8102068 <HAL_GetTick>
 810522c:	4602      	mov	r2, r0
 810522e:	693b      	ldr	r3, [r7, #16]
 8105230:	1ad3      	subs	r3, r2, r3
 8105232:	2b64      	cmp	r3, #100	; 0x64
 8105234:	d902      	bls.n	810523c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105236:	2303      	movs	r3, #3
 8105238:	75fb      	strb	r3, [r7, #23]
        break;
 810523a:	e005      	b.n	8105248 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810523c:	4b75      	ldr	r3, [pc, #468]	; (8105414 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105244:	2b00      	cmp	r3, #0
 8105246:	d0ef      	beq.n	8105228 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8105248:	7dfb      	ldrb	r3, [r7, #23]
 810524a:	2b00      	cmp	r3, #0
 810524c:	d168      	bne.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810524e:	4b70      	ldr	r3, [pc, #448]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105258:	4053      	eors	r3, r2
 810525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810525e:	2b00      	cmp	r3, #0
 8105260:	d013      	beq.n	810528a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105262:	4b6b      	ldr	r3, [pc, #428]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810526a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810526c:	4b68      	ldr	r3, [pc, #416]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105270:	4a67      	ldr	r2, [pc, #412]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105276:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105278:	4b65      	ldr	r3, [pc, #404]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810527c:	4a64      	ldr	r2, [pc, #400]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105282:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105284:	4a62      	ldr	r2, [pc, #392]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105286:	68fb      	ldr	r3, [r7, #12]
 8105288:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105294:	d115      	bne.n	81052c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105296:	f7fc fee7 	bl	8102068 <HAL_GetTick>
 810529a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810529c:	e00b      	b.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810529e:	f7fc fee3 	bl	8102068 <HAL_GetTick>
 81052a2:	4602      	mov	r2, r0
 81052a4:	693b      	ldr	r3, [r7, #16]
 81052a6:	1ad3      	subs	r3, r2, r3
 81052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 81052ac:	4293      	cmp	r3, r2
 81052ae:	d902      	bls.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81052b0:	2303      	movs	r3, #3
 81052b2:	75fb      	strb	r3, [r7, #23]
            break;
 81052b4:	e005      	b.n	81052c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81052b6:	4b56      	ldr	r3, [pc, #344]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81052ba:	f003 0302 	and.w	r3, r3, #2
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d0ed      	beq.n	810529e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81052c2:	7dfb      	ldrb	r3, [r7, #23]
 81052c4:	2b00      	cmp	r3, #0
 81052c6:	d128      	bne.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81052d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81052d6:	d10f      	bne.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81052d8:	4b4d      	ldr	r3, [pc, #308]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81052da:	691b      	ldr	r3, [r3, #16]
 81052dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052e6:	091b      	lsrs	r3, r3, #4
 81052e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81052ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81052f0:	4947      	ldr	r1, [pc, #284]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81052f2:	4313      	orrs	r3, r2
 81052f4:	610b      	str	r3, [r1, #16]
 81052f6:	e005      	b.n	8105304 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81052f8:	4b45      	ldr	r3, [pc, #276]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81052fa:	691b      	ldr	r3, [r3, #16]
 81052fc:	4a44      	ldr	r2, [pc, #272]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81052fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105302:	6113      	str	r3, [r2, #16]
 8105304:	4b42      	ldr	r3, [pc, #264]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810530e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105312:	493f      	ldr	r1, [pc, #252]	; (8105410 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105314:	4313      	orrs	r3, r2
 8105316:	670b      	str	r3, [r1, #112]	; 0x70
 8105318:	e004      	b.n	8105324 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810531a:	7dfb      	ldrb	r3, [r7, #23]
 810531c:	75bb      	strb	r3, [r7, #22]
 810531e:	e001      	b.n	8105324 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105320:	7dfb      	ldrb	r3, [r7, #23]
 8105322:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	f003 0301 	and.w	r3, r3, #1
 810532c:	2b00      	cmp	r3, #0
 810532e:	f000 8083 	beq.w	8105438 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105336:	2b28      	cmp	r3, #40	; 0x28
 8105338:	d866      	bhi.n	8105408 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810533a:	a201      	add	r2, pc, #4	; (adr r2, 8105340 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105340:	08105419 	.word	0x08105419
 8105344:	08105409 	.word	0x08105409
 8105348:	08105409 	.word	0x08105409
 810534c:	08105409 	.word	0x08105409
 8105350:	08105409 	.word	0x08105409
 8105354:	08105409 	.word	0x08105409
 8105358:	08105409 	.word	0x08105409
 810535c:	08105409 	.word	0x08105409
 8105360:	081053e5 	.word	0x081053e5
 8105364:	08105409 	.word	0x08105409
 8105368:	08105409 	.word	0x08105409
 810536c:	08105409 	.word	0x08105409
 8105370:	08105409 	.word	0x08105409
 8105374:	08105409 	.word	0x08105409
 8105378:	08105409 	.word	0x08105409
 810537c:	08105409 	.word	0x08105409
 8105380:	081053f7 	.word	0x081053f7
 8105384:	08105409 	.word	0x08105409
 8105388:	08105409 	.word	0x08105409
 810538c:	08105409 	.word	0x08105409
 8105390:	08105409 	.word	0x08105409
 8105394:	08105409 	.word	0x08105409
 8105398:	08105409 	.word	0x08105409
 810539c:	08105409 	.word	0x08105409
 81053a0:	08105419 	.word	0x08105419
 81053a4:	08105409 	.word	0x08105409
 81053a8:	08105409 	.word	0x08105409
 81053ac:	08105409 	.word	0x08105409
 81053b0:	08105409 	.word	0x08105409
 81053b4:	08105409 	.word	0x08105409
 81053b8:	08105409 	.word	0x08105409
 81053bc:	08105409 	.word	0x08105409
 81053c0:	08105419 	.word	0x08105419
 81053c4:	08105409 	.word	0x08105409
 81053c8:	08105409 	.word	0x08105409
 81053cc:	08105409 	.word	0x08105409
 81053d0:	08105409 	.word	0x08105409
 81053d4:	08105409 	.word	0x08105409
 81053d8:	08105409 	.word	0x08105409
 81053dc:	08105409 	.word	0x08105409
 81053e0:	08105419 	.word	0x08105419
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	3304      	adds	r3, #4
 81053e8:	2101      	movs	r1, #1
 81053ea:	4618      	mov	r0, r3
 81053ec:	f001 fc1c 	bl	8106c28 <RCCEx_PLL2_Config>
 81053f0:	4603      	mov	r3, r0
 81053f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81053f4:	e011      	b.n	810541a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	3324      	adds	r3, #36	; 0x24
 81053fa:	2101      	movs	r1, #1
 81053fc:	4618      	mov	r0, r3
 81053fe:	f001 fcc5 	bl	8106d8c <RCCEx_PLL3_Config>
 8105402:	4603      	mov	r3, r0
 8105404:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105406:	e008      	b.n	810541a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105408:	2301      	movs	r3, #1
 810540a:	75fb      	strb	r3, [r7, #23]
      break;
 810540c:	e005      	b.n	810541a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810540e:	bf00      	nop
 8105410:	58024400 	.word	0x58024400
 8105414:	58024800 	.word	0x58024800
      break;
 8105418:	bf00      	nop
    }

    if(ret == HAL_OK)
 810541a:	7dfb      	ldrb	r3, [r7, #23]
 810541c:	2b00      	cmp	r3, #0
 810541e:	d109      	bne.n	8105434 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105420:	4b96      	ldr	r3, [pc, #600]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105424:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810542c:	4993      	ldr	r1, [pc, #588]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810542e:	4313      	orrs	r3, r2
 8105430:	654b      	str	r3, [r1, #84]	; 0x54
 8105432:	e001      	b.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105434:	7dfb      	ldrb	r3, [r7, #23]
 8105436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	f003 0302 	and.w	r3, r3, #2
 8105440:	2b00      	cmp	r3, #0
 8105442:	d038      	beq.n	81054b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105448:	2b05      	cmp	r3, #5
 810544a:	d821      	bhi.n	8105490 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810544c:	a201      	add	r2, pc, #4	; (adr r2, 8105454 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105452:	bf00      	nop
 8105454:	08105497 	.word	0x08105497
 8105458:	0810546d 	.word	0x0810546d
 810545c:	0810547f 	.word	0x0810547f
 8105460:	08105497 	.word	0x08105497
 8105464:	08105497 	.word	0x08105497
 8105468:	08105497 	.word	0x08105497
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	3304      	adds	r3, #4
 8105470:	2101      	movs	r1, #1
 8105472:	4618      	mov	r0, r3
 8105474:	f001 fbd8 	bl	8106c28 <RCCEx_PLL2_Config>
 8105478:	4603      	mov	r3, r0
 810547a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810547c:	e00c      	b.n	8105498 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	3324      	adds	r3, #36	; 0x24
 8105482:	2101      	movs	r1, #1
 8105484:	4618      	mov	r0, r3
 8105486:	f001 fc81 	bl	8106d8c <RCCEx_PLL3_Config>
 810548a:	4603      	mov	r3, r0
 810548c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810548e:	e003      	b.n	8105498 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105490:	2301      	movs	r3, #1
 8105492:	75fb      	strb	r3, [r7, #23]
      break;
 8105494:	e000      	b.n	8105498 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8105496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105498:	7dfb      	ldrb	r3, [r7, #23]
 810549a:	2b00      	cmp	r3, #0
 810549c:	d109      	bne.n	81054b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810549e:	4b77      	ldr	r3, [pc, #476]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81054a2:	f023 0207 	bic.w	r2, r3, #7
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81054aa:	4974      	ldr	r1, [pc, #464]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81054ac:	4313      	orrs	r3, r2
 81054ae:	654b      	str	r3, [r1, #84]	; 0x54
 81054b0:	e001      	b.n	81054b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054b2:	7dfb      	ldrb	r3, [r7, #23]
 81054b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	f003 0304 	and.w	r3, r3, #4
 81054be:	2b00      	cmp	r3, #0
 81054c0:	d03a      	beq.n	8105538 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81054c8:	2b05      	cmp	r3, #5
 81054ca:	d821      	bhi.n	8105510 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81054cc:	a201      	add	r2, pc, #4	; (adr r2, 81054d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054d2:	bf00      	nop
 81054d4:	08105517 	.word	0x08105517
 81054d8:	081054ed 	.word	0x081054ed
 81054dc:	081054ff 	.word	0x081054ff
 81054e0:	08105517 	.word	0x08105517
 81054e4:	08105517 	.word	0x08105517
 81054e8:	08105517 	.word	0x08105517
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	3304      	adds	r3, #4
 81054f0:	2101      	movs	r1, #1
 81054f2:	4618      	mov	r0, r3
 81054f4:	f001 fb98 	bl	8106c28 <RCCEx_PLL2_Config>
 81054f8:	4603      	mov	r3, r0
 81054fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81054fc:	e00c      	b.n	8105518 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	3324      	adds	r3, #36	; 0x24
 8105502:	2101      	movs	r1, #1
 8105504:	4618      	mov	r0, r3
 8105506:	f001 fc41 	bl	8106d8c <RCCEx_PLL3_Config>
 810550a:	4603      	mov	r3, r0
 810550c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810550e:	e003      	b.n	8105518 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105510:	2301      	movs	r3, #1
 8105512:	75fb      	strb	r3, [r7, #23]
      break;
 8105514:	e000      	b.n	8105518 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8105516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105518:	7dfb      	ldrb	r3, [r7, #23]
 810551a:	2b00      	cmp	r3, #0
 810551c:	d10a      	bne.n	8105534 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810551e:	4b57      	ldr	r3, [pc, #348]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105522:	f023 0207 	bic.w	r2, r3, #7
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810552c:	4953      	ldr	r1, [pc, #332]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810552e:	4313      	orrs	r3, r2
 8105530:	658b      	str	r3, [r1, #88]	; 0x58
 8105532:	e001      	b.n	8105538 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105534:	7dfb      	ldrb	r3, [r7, #23]
 8105536:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	f003 0320 	and.w	r3, r3, #32
 8105540:	2b00      	cmp	r3, #0
 8105542:	d04b      	beq.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810554a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810554e:	d02e      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8105550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105554:	d828      	bhi.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810555a:	d02a      	beq.n	81055b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105560:	d822      	bhi.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105562:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105566:	d026      	beq.n	81055b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105568:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810556c:	d81c      	bhi.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810556e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105572:	d010      	beq.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105578:	d816      	bhi.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810557a:	2b00      	cmp	r3, #0
 810557c:	d01d      	beq.n	81055ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810557e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105582:	d111      	bne.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	3304      	adds	r3, #4
 8105588:	2100      	movs	r1, #0
 810558a:	4618      	mov	r0, r3
 810558c:	f001 fb4c 	bl	8106c28 <RCCEx_PLL2_Config>
 8105590:	4603      	mov	r3, r0
 8105592:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105594:	e012      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	3324      	adds	r3, #36	; 0x24
 810559a:	2102      	movs	r1, #2
 810559c:	4618      	mov	r0, r3
 810559e:	f001 fbf5 	bl	8106d8c <RCCEx_PLL3_Config>
 81055a2:	4603      	mov	r3, r0
 81055a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81055a6:	e009      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81055a8:	2301      	movs	r3, #1
 81055aa:	75fb      	strb	r3, [r7, #23]
      break;
 81055ac:	e006      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81055ae:	bf00      	nop
 81055b0:	e004      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81055b2:	bf00      	nop
 81055b4:	e002      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81055b6:	bf00      	nop
 81055b8:	e000      	b.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81055ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81055bc:	7dfb      	ldrb	r3, [r7, #23]
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d10a      	bne.n	81055d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81055c2:	4b2e      	ldr	r3, [pc, #184]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81055d0:	492a      	ldr	r1, [pc, #168]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81055d2:	4313      	orrs	r3, r2
 81055d4:	654b      	str	r3, [r1, #84]	; 0x54
 81055d6:	e001      	b.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055d8:	7dfb      	ldrb	r3, [r7, #23]
 81055da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81055e4:	2b00      	cmp	r3, #0
 81055e6:	d04d      	beq.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81055ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81055f2:	d02e      	beq.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81055f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81055f8:	d828      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81055fe:	d02a      	beq.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105604:	d822      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810560a:	d026      	beq.n	810565a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810560c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105610:	d81c      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105616:	d010      	beq.n	810563a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8105618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810561c:	d816      	bhi.n	810564c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810561e:	2b00      	cmp	r3, #0
 8105620:	d01d      	beq.n	810565e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8105622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105626:	d111      	bne.n	810564c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	3304      	adds	r3, #4
 810562c:	2100      	movs	r1, #0
 810562e:	4618      	mov	r0, r3
 8105630:	f001 fafa 	bl	8106c28 <RCCEx_PLL2_Config>
 8105634:	4603      	mov	r3, r0
 8105636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105638:	e012      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	3324      	adds	r3, #36	; 0x24
 810563e:	2102      	movs	r1, #2
 8105640:	4618      	mov	r0, r3
 8105642:	f001 fba3 	bl	8106d8c <RCCEx_PLL3_Config>
 8105646:	4603      	mov	r3, r0
 8105648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810564a:	e009      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810564c:	2301      	movs	r3, #1
 810564e:	75fb      	strb	r3, [r7, #23]
      break;
 8105650:	e006      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105652:	bf00      	nop
 8105654:	e004      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105656:	bf00      	nop
 8105658:	e002      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810565a:	bf00      	nop
 810565c:	e000      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810565e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105660:	7dfb      	ldrb	r3, [r7, #23]
 8105662:	2b00      	cmp	r3, #0
 8105664:	d10c      	bne.n	8105680 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105666:	4b05      	ldr	r3, [pc, #20]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810566a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105674:	4901      	ldr	r1, [pc, #4]	; (810567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105676:	4313      	orrs	r3, r2
 8105678:	658b      	str	r3, [r1, #88]	; 0x58
 810567a:	e003      	b.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810567c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105680:	7dfb      	ldrb	r3, [r7, #23]
 8105682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810568c:	2b00      	cmp	r3, #0
 810568e:	d04b      	beq.n	8105728 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105696:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810569a:	d02e      	beq.n	81056fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810569c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81056a0:	d828      	bhi.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81056a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81056a6:	d02a      	beq.n	81056fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81056ac:	d822      	bhi.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81056ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056b2:	d026      	beq.n	8105702 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81056b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056b8:	d81c      	bhi.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81056be:	d010      	beq.n	81056e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81056c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81056c4:	d816      	bhi.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81056c6:	2b00      	cmp	r3, #0
 81056c8:	d01d      	beq.n	8105706 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81056ce:	d111      	bne.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	3304      	adds	r3, #4
 81056d4:	2100      	movs	r1, #0
 81056d6:	4618      	mov	r0, r3
 81056d8:	f001 faa6 	bl	8106c28 <RCCEx_PLL2_Config>
 81056dc:	4603      	mov	r3, r0
 81056de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81056e0:	e012      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	3324      	adds	r3, #36	; 0x24
 81056e6:	2102      	movs	r1, #2
 81056e8:	4618      	mov	r0, r3
 81056ea:	f001 fb4f 	bl	8106d8c <RCCEx_PLL3_Config>
 81056ee:	4603      	mov	r3, r0
 81056f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81056f2:	e009      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056f4:	2301      	movs	r3, #1
 81056f6:	75fb      	strb	r3, [r7, #23]
      break;
 81056f8:	e006      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81056fa:	bf00      	nop
 81056fc:	e004      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81056fe:	bf00      	nop
 8105700:	e002      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105702:	bf00      	nop
 8105704:	e000      	b.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105708:	7dfb      	ldrb	r3, [r7, #23]
 810570a:	2b00      	cmp	r3, #0
 810570c:	d10a      	bne.n	8105724 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810570e:	4b9d      	ldr	r3, [pc, #628]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810571c:	4999      	ldr	r1, [pc, #612]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810571e:	4313      	orrs	r3, r2
 8105720:	658b      	str	r3, [r1, #88]	; 0x58
 8105722:	e001      	b.n	8105728 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105724:	7dfb      	ldrb	r3, [r7, #23]
 8105726:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	f003 0308 	and.w	r3, r3, #8
 8105730:	2b00      	cmp	r3, #0
 8105732:	d01a      	beq.n	810576a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810573e:	d10a      	bne.n	8105756 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	3324      	adds	r3, #36	; 0x24
 8105744:	2102      	movs	r1, #2
 8105746:	4618      	mov	r0, r3
 8105748:	f001 fb20 	bl	8106d8c <RCCEx_PLL3_Config>
 810574c:	4603      	mov	r3, r0
 810574e:	2b00      	cmp	r3, #0
 8105750:	d001      	beq.n	8105756 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8105752:	2301      	movs	r3, #1
 8105754:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105756:	4b8b      	ldr	r3, [pc, #556]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810575a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105764:	4987      	ldr	r1, [pc, #540]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105766:	4313      	orrs	r3, r2
 8105768:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	f003 0310 	and.w	r3, r3, #16
 8105772:	2b00      	cmp	r3, #0
 8105774:	d01a      	beq.n	81057ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105780:	d10a      	bne.n	8105798 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	3324      	adds	r3, #36	; 0x24
 8105786:	2102      	movs	r1, #2
 8105788:	4618      	mov	r0, r3
 810578a:	f001 faff 	bl	8106d8c <RCCEx_PLL3_Config>
 810578e:	4603      	mov	r3, r0
 8105790:	2b00      	cmp	r3, #0
 8105792:	d001      	beq.n	8105798 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8105794:	2301      	movs	r3, #1
 8105796:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105798:	4b7a      	ldr	r3, [pc, #488]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810579c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81057a6:	4977      	ldr	r1, [pc, #476]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057a8:	4313      	orrs	r3, r2
 81057aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81057b4:	2b00      	cmp	r3, #0
 81057b6:	d034      	beq.n	8105822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81057be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81057c2:	d01d      	beq.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81057c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81057c8:	d817      	bhi.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81057ca:	2b00      	cmp	r3, #0
 81057cc:	d003      	beq.n	81057d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81057d2:	d009      	beq.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81057d4:	e011      	b.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	3304      	adds	r3, #4
 81057da:	2100      	movs	r1, #0
 81057dc:	4618      	mov	r0, r3
 81057de:	f001 fa23 	bl	8106c28 <RCCEx_PLL2_Config>
 81057e2:	4603      	mov	r3, r0
 81057e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81057e6:	e00c      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	3324      	adds	r3, #36	; 0x24
 81057ec:	2102      	movs	r1, #2
 81057ee:	4618      	mov	r0, r3
 81057f0:	f001 facc 	bl	8106d8c <RCCEx_PLL3_Config>
 81057f4:	4603      	mov	r3, r0
 81057f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81057f8:	e003      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81057fa:	2301      	movs	r3, #1
 81057fc:	75fb      	strb	r3, [r7, #23]
      break;
 81057fe:	e000      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105802:	7dfb      	ldrb	r3, [r7, #23]
 8105804:	2b00      	cmp	r3, #0
 8105806:	d10a      	bne.n	810581e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105808:	4b5e      	ldr	r3, [pc, #376]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810580c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105816:	495b      	ldr	r1, [pc, #364]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105818:	4313      	orrs	r3, r2
 810581a:	658b      	str	r3, [r1, #88]	; 0x58
 810581c:	e001      	b.n	8105822 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810581e:	7dfb      	ldrb	r3, [r7, #23]
 8105820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810582a:	2b00      	cmp	r3, #0
 810582c:	d033      	beq.n	8105896 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105834:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105838:	d01c      	beq.n	8105874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810583a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810583e:	d816      	bhi.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105844:	d003      	beq.n	810584e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8105846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810584a:	d007      	beq.n	810585c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810584c:	e00f      	b.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810584e:	4b4d      	ldr	r3, [pc, #308]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105852:	4a4c      	ldr	r2, [pc, #304]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810585a:	e00c      	b.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	3324      	adds	r3, #36	; 0x24
 8105860:	2101      	movs	r1, #1
 8105862:	4618      	mov	r0, r3
 8105864:	f001 fa92 	bl	8106d8c <RCCEx_PLL3_Config>
 8105868:	4603      	mov	r3, r0
 810586a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810586c:	e003      	b.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810586e:	2301      	movs	r3, #1
 8105870:	75fb      	strb	r3, [r7, #23]
      break;
 8105872:	e000      	b.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105876:	7dfb      	ldrb	r3, [r7, #23]
 8105878:	2b00      	cmp	r3, #0
 810587a:	d10a      	bne.n	8105892 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810587c:	4b41      	ldr	r3, [pc, #260]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810588a:	493e      	ldr	r1, [pc, #248]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810588c:	4313      	orrs	r3, r2
 810588e:	654b      	str	r3, [r1, #84]	; 0x54
 8105890:	e001      	b.n	8105896 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105892:	7dfb      	ldrb	r3, [r7, #23]
 8105894:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d029      	beq.n	81058f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d003      	beq.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81058aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81058ae:	d007      	beq.n	81058c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81058b0:	e00f      	b.n	81058d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058b2:	4b34      	ldr	r3, [pc, #208]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058b6:	4a33      	ldr	r2, [pc, #204]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81058b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81058bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81058be:	e00b      	b.n	81058d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	3304      	adds	r3, #4
 81058c4:	2102      	movs	r1, #2
 81058c6:	4618      	mov	r0, r3
 81058c8:	f001 f9ae 	bl	8106c28 <RCCEx_PLL2_Config>
 81058cc:	4603      	mov	r3, r0
 81058ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81058d0:	e002      	b.n	81058d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81058d2:	2301      	movs	r3, #1
 81058d4:	75fb      	strb	r3, [r7, #23]
      break;
 81058d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81058d8:	7dfb      	ldrb	r3, [r7, #23]
 81058da:	2b00      	cmp	r3, #0
 81058dc:	d109      	bne.n	81058f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81058de:	4b29      	ldr	r3, [pc, #164]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058ea:	4926      	ldr	r1, [pc, #152]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81058ec:	4313      	orrs	r3, r2
 81058ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81058f0:	e001      	b.n	81058f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058f2:	7dfb      	ldrb	r3, [r7, #23]
 81058f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81058fe:	2b00      	cmp	r3, #0
 8105900:	d00a      	beq.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	3324      	adds	r3, #36	; 0x24
 8105906:	2102      	movs	r1, #2
 8105908:	4618      	mov	r0, r3
 810590a:	f001 fa3f 	bl	8106d8c <RCCEx_PLL3_Config>
 810590e:	4603      	mov	r3, r0
 8105910:	2b00      	cmp	r3, #0
 8105912:	d001      	beq.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105914:	2301      	movs	r3, #1
 8105916:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105920:	2b00      	cmp	r3, #0
 8105922:	d033      	beq.n	810598c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810592c:	d017      	beq.n	810595e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810592e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105932:	d811      	bhi.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105938:	d013      	beq.n	8105962 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810593a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810593e:	d80b      	bhi.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105940:	2b00      	cmp	r3, #0
 8105942:	d010      	beq.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105948:	d106      	bne.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810594a:	4b0e      	ldr	r3, [pc, #56]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810594e:	4a0d      	ldr	r2, [pc, #52]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105956:	e007      	b.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105958:	2301      	movs	r3, #1
 810595a:	75fb      	strb	r3, [r7, #23]
      break;
 810595c:	e004      	b.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810595e:	bf00      	nop
 8105960:	e002      	b.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105962:	bf00      	nop
 8105964:	e000      	b.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105968:	7dfb      	ldrb	r3, [r7, #23]
 810596a:	2b00      	cmp	r3, #0
 810596c:	d10c      	bne.n	8105988 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810596e:	4b05      	ldr	r3, [pc, #20]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810597a:	4902      	ldr	r1, [pc, #8]	; (8105984 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810597c:	4313      	orrs	r3, r2
 810597e:	654b      	str	r3, [r1, #84]	; 0x54
 8105980:	e004      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8105982:	bf00      	nop
 8105984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105988:	7dfb      	ldrb	r3, [r7, #23]
 810598a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105994:	2b00      	cmp	r3, #0
 8105996:	d008      	beq.n	81059aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105998:	4b31      	ldr	r3, [pc, #196]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810599c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81059a4:	492e      	ldr	r1, [pc, #184]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059a6:	4313      	orrs	r3, r2
 81059a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81059b2:	2b00      	cmp	r3, #0
 81059b4:	d009      	beq.n	81059ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81059b6:	4b2a      	ldr	r3, [pc, #168]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059b8:	691b      	ldr	r3, [r3, #16]
 81059ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81059c4:	4926      	ldr	r1, [pc, #152]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059c6:	4313      	orrs	r3, r2
 81059c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	681b      	ldr	r3, [r3, #0]
 81059ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81059d2:	2b00      	cmp	r3, #0
 81059d4:	d008      	beq.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81059d6:	4b22      	ldr	r3, [pc, #136]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81059da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81059e2:	491f      	ldr	r1, [pc, #124]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059e4:	4313      	orrs	r3, r2
 81059e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81059f0:	2b00      	cmp	r3, #0
 81059f2:	d00d      	beq.n	8105a10 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81059f4:	4b1a      	ldr	r3, [pc, #104]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059f6:	691b      	ldr	r3, [r3, #16]
 81059f8:	4a19      	ldr	r2, [pc, #100]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81059fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81059fe:	6113      	str	r3, [r2, #16]
 8105a00:	4b17      	ldr	r3, [pc, #92]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a02:	691a      	ldr	r2, [r3, #16]
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105a0a:	4915      	ldr	r1, [pc, #84]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a0c:	4313      	orrs	r3, r2
 8105a0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	2b00      	cmp	r3, #0
 8105a16:	da08      	bge.n	8105a2a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105a18:	4b11      	ldr	r3, [pc, #68]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a24:	490e      	ldr	r1, [pc, #56]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a26:	4313      	orrs	r3, r2
 8105a28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105a32:	2b00      	cmp	r3, #0
 8105a34:	d009      	beq.n	8105a4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105a36:	4b0a      	ldr	r3, [pc, #40]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105a44:	4906      	ldr	r1, [pc, #24]	; (8105a60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105a46:	4313      	orrs	r3, r2
 8105a48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8105a4a:	7dbb      	ldrb	r3, [r7, #22]
 8105a4c:	2b00      	cmp	r3, #0
 8105a4e:	d101      	bne.n	8105a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8105a50:	2300      	movs	r3, #0
 8105a52:	e000      	b.n	8105a56 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8105a54:	2301      	movs	r3, #1
}
 8105a56:	4618      	mov	r0, r3
 8105a58:	3718      	adds	r7, #24
 8105a5a:	46bd      	mov	sp, r7
 8105a5c:	bd80      	pop	{r7, pc}
 8105a5e:	bf00      	nop
 8105a60:	58024400 	.word	0x58024400

08105a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8105a64:	b580      	push	{r7, lr}
 8105a66:	b090      	sub	sp, #64	; 0x40
 8105a68:	af00      	add	r7, sp, #0
 8105a6a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105a72:	f040 8095 	bne.w	8105ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8105a76:	4b97      	ldr	r3, [pc, #604]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a7a:	f003 0307 	and.w	r3, r3, #7
 8105a7e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105a82:	2b04      	cmp	r3, #4
 8105a84:	f200 8088 	bhi.w	8105b98 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8105a88:	a201      	add	r2, pc, #4	; (adr r2, 8105a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8105a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a8e:	bf00      	nop
 8105a90:	08105aa5 	.word	0x08105aa5
 8105a94:	08105acd 	.word	0x08105acd
 8105a98:	08105af5 	.word	0x08105af5
 8105a9c:	08105b91 	.word	0x08105b91
 8105aa0:	08105b1d 	.word	0x08105b1d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105aa4:	4b8b      	ldr	r3, [pc, #556]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105aa6:	681b      	ldr	r3, [r3, #0]
 8105aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105ab0:	d108      	bne.n	8105ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105ab6:	4618      	mov	r0, r3
 8105ab8:	f000 ff64 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8105abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ac0:	f000 bc94 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105ac4:	2300      	movs	r3, #0
 8105ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ac8:	f000 bc90 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105acc:	4b81      	ldr	r3, [pc, #516]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105ad8:	d108      	bne.n	8105aec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ada:	f107 0318 	add.w	r3, r7, #24
 8105ade:	4618      	mov	r0, r3
 8105ae0:	f000 fca8 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105ae4:	69bb      	ldr	r3, [r7, #24]
 8105ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ae8:	f000 bc80 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105aec:	2300      	movs	r3, #0
 8105aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105af0:	f000 bc7c 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105af4:	4b77      	ldr	r3, [pc, #476]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105af6:	681b      	ldr	r3, [r3, #0]
 8105af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105b00:	d108      	bne.n	8105b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105b02:	f107 030c 	add.w	r3, r7, #12
 8105b06:	4618      	mov	r0, r3
 8105b08:	f000 fde8 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105b0c:	68fb      	ldr	r3, [r7, #12]
 8105b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105b10:	f000 bc6c 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105b14:	2300      	movs	r3, #0
 8105b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b18:	f000 bc68 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105b1c:	4b6d      	ldr	r3, [pc, #436]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105b24:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105b26:	4b6b      	ldr	r3, [pc, #428]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	f003 0304 	and.w	r3, r3, #4
 8105b2e:	2b04      	cmp	r3, #4
 8105b30:	d10c      	bne.n	8105b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8105b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d109      	bne.n	8105b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105b38:	4b66      	ldr	r3, [pc, #408]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	08db      	lsrs	r3, r3, #3
 8105b3e:	f003 0303 	and.w	r3, r3, #3
 8105b42:	4a65      	ldr	r2, [pc, #404]	; (8105cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8105b44:	fa22 f303 	lsr.w	r3, r2, r3
 8105b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b4a:	e01f      	b.n	8105b8c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105b4c:	4b61      	ldr	r3, [pc, #388]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b58:	d106      	bne.n	8105b68 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8105b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105b60:	d102      	bne.n	8105b68 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105b62:	4b5e      	ldr	r3, [pc, #376]	; (8105cdc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8105b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b66:	e011      	b.n	8105b8c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105b68:	4b5a      	ldr	r3, [pc, #360]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105b74:	d106      	bne.n	8105b84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8105b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105b7c:	d102      	bne.n	8105b84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105b7e:	4b58      	ldr	r3, [pc, #352]	; (8105ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8105b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b82:	e003      	b.n	8105b8c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105b84:	2300      	movs	r3, #0
 8105b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105b88:	f000 bc30 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105b8c:	f000 bc2e 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105b90:	4b54      	ldr	r3, [pc, #336]	; (8105ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8105b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b94:	f000 bc2a 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8105b98:	2300      	movs	r3, #0
 8105b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b9c:	f000 bc26 	b.w	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105ba6:	f040 809f 	bne.w	8105ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8105baa:	4b4a      	ldr	r3, [pc, #296]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8105bb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bba:	d04d      	beq.n	8105c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8105bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bc2:	f200 8084 	bhi.w	8105cce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bc8:	2bc0      	cmp	r3, #192	; 0xc0
 8105bca:	d07d      	beq.n	8105cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8105bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bce:	2bc0      	cmp	r3, #192	; 0xc0
 8105bd0:	d87d      	bhi.n	8105cce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bd4:	2b80      	cmp	r3, #128	; 0x80
 8105bd6:	d02d      	beq.n	8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bda:	2b80      	cmp	r3, #128	; 0x80
 8105bdc:	d877      	bhi.n	8105cce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d003      	beq.n	8105bec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8105be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105be6:	2b40      	cmp	r3, #64	; 0x40
 8105be8:	d012      	beq.n	8105c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8105bea:	e070      	b.n	8105cce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105bec:	4b39      	ldr	r3, [pc, #228]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105bf8:	d107      	bne.n	8105c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105bfe:	4618      	mov	r0, r3
 8105c00:	f000 fec0 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105c06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105c08:	e3f0      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105c0a:	2300      	movs	r3, #0
 8105c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105c0e:	e3ed      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105c10:	4b30      	ldr	r3, [pc, #192]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c12:	681b      	ldr	r3, [r3, #0]
 8105c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105c1c:	d107      	bne.n	8105c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105c1e:	f107 0318 	add.w	r3, r7, #24
 8105c22:	4618      	mov	r0, r3
 8105c24:	f000 fc06 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105c28:	69bb      	ldr	r3, [r7, #24]
 8105c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105c2c:	e3de      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105c2e:	2300      	movs	r3, #0
 8105c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105c32:	e3db      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105c34:	4b27      	ldr	r3, [pc, #156]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105c40:	d107      	bne.n	8105c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105c42:	f107 030c 	add.w	r3, r7, #12
 8105c46:	4618      	mov	r0, r3
 8105c48:	f000 fd48 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105c4c:	68fb      	ldr	r3, [r7, #12]
 8105c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105c50:	e3cc      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105c52:	2300      	movs	r3, #0
 8105c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105c56:	e3c9      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105c58:	4b1e      	ldr	r3, [pc, #120]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105c60:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c62:	4b1c      	ldr	r3, [pc, #112]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	f003 0304 	and.w	r3, r3, #4
 8105c6a:	2b04      	cmp	r3, #4
 8105c6c:	d10c      	bne.n	8105c88 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8105c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105c70:	2b00      	cmp	r3, #0
 8105c72:	d109      	bne.n	8105c88 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105c74:	4b17      	ldr	r3, [pc, #92]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	08db      	lsrs	r3, r3, #3
 8105c7a:	f003 0303 	and.w	r3, r3, #3
 8105c7e:	4a16      	ldr	r2, [pc, #88]	; (8105cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8105c80:	fa22 f303 	lsr.w	r3, r2, r3
 8105c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105c86:	e01e      	b.n	8105cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105c88:	4b12      	ldr	r3, [pc, #72]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c94:	d106      	bne.n	8105ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8105c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105c9c:	d102      	bne.n	8105ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105c9e:	4b0f      	ldr	r3, [pc, #60]	; (8105cdc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8105ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ca2:	e010      	b.n	8105cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105ca4:	4b0b      	ldr	r3, [pc, #44]	; (8105cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105cb0:	d106      	bne.n	8105cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8105cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105cb8:	d102      	bne.n	8105cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105cba:	4b09      	ldr	r3, [pc, #36]	; (8105ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8105cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105cbe:	e002      	b.n	8105cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105cc0:	2300      	movs	r3, #0
 8105cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105cc4:	e392      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105cc6:	e391      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105cc8:	4b06      	ldr	r3, [pc, #24]	; (8105ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8105cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ccc:	e38e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8105cce:	2300      	movs	r3, #0
 8105cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105cd2:	e38b      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105cd4:	58024400 	.word	0x58024400
 8105cd8:	03d09000 	.word	0x03d09000
 8105cdc:	003d0900 	.word	0x003d0900
 8105ce0:	017d7840 	.word	0x017d7840
 8105ce4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105cee:	f040 809c 	bne.w	8105e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8105cf2:	4b9d      	ldr	r3, [pc, #628]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105cf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8105cfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d02:	d054      	beq.n	8105dae <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8105d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d0a:	f200 808b 	bhi.w	8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d14:	f000 8083 	beq.w	8105e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8105d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d1e:	f200 8081 	bhi.w	8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d28:	d02f      	beq.n	8105d8a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8105d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d30:	d878      	bhi.n	8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	d004      	beq.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8105d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105d3e:	d012      	beq.n	8105d66 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8105d40:	e070      	b.n	8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105d42:	4b89      	ldr	r3, [pc, #548]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d4e:	d107      	bne.n	8105d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105d54:	4618      	mov	r0, r3
 8105d56:	f000 fe15 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d5e:	e345      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105d60:	2300      	movs	r3, #0
 8105d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d64:	e342      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d66:	4b80      	ldr	r3, [pc, #512]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105d72:	d107      	bne.n	8105d84 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d74:	f107 0318 	add.w	r3, r7, #24
 8105d78:	4618      	mov	r0, r3
 8105d7a:	f000 fb5b 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105d7e:	69bb      	ldr	r3, [r7, #24]
 8105d80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d82:	e333      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105d84:	2300      	movs	r3, #0
 8105d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d88:	e330      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d8a:	4b77      	ldr	r3, [pc, #476]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105d8c:	681b      	ldr	r3, [r3, #0]
 8105d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d96:	d107      	bne.n	8105da8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d98:	f107 030c 	add.w	r3, r7, #12
 8105d9c:	4618      	mov	r0, r3
 8105d9e:	f000 fc9d 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105da2:	68fb      	ldr	r3, [r7, #12]
 8105da4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105da6:	e321      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105da8:	2300      	movs	r3, #0
 8105daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105dac:	e31e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105dae:	4b6e      	ldr	r3, [pc, #440]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105db6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105db8:	4b6b      	ldr	r3, [pc, #428]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	f003 0304 	and.w	r3, r3, #4
 8105dc0:	2b04      	cmp	r3, #4
 8105dc2:	d10c      	bne.n	8105dde <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8105dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	d109      	bne.n	8105dde <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105dca:	4b67      	ldr	r3, [pc, #412]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	08db      	lsrs	r3, r3, #3
 8105dd0:	f003 0303 	and.w	r3, r3, #3
 8105dd4:	4a65      	ldr	r2, [pc, #404]	; (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8105dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8105dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ddc:	e01e      	b.n	8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105dde:	4b62      	ldr	r3, [pc, #392]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dea:	d106      	bne.n	8105dfa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8105dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105df2:	d102      	bne.n	8105dfa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105df4:	4b5e      	ldr	r3, [pc, #376]	; (8105f70 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8105df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105df8:	e010      	b.n	8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105dfa:	4b5b      	ldr	r3, [pc, #364]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105e06:	d106      	bne.n	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8105e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e0e:	d102      	bne.n	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105e10:	4b58      	ldr	r3, [pc, #352]	; (8105f74 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8105e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105e14:	e002      	b.n	8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105e16:	2300      	movs	r3, #0
 8105e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105e1a:	e2e7      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105e1c:	e2e6      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105e1e:	4b56      	ldr	r3, [pc, #344]	; (8105f78 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8105e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e22:	e2e3      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8105e24:	2300      	movs	r3, #0
 8105e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e28:	e2e0      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105e30:	f040 80a7 	bne.w	8105f82 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8105e34:	4b4c      	ldr	r3, [pc, #304]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e38:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8105e3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105e44:	d055      	beq.n	8105ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8105e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105e4c:	f200 8096 	bhi.w	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105e56:	f000 8084 	beq.w	8105f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8105e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105e60:	f200 808c 	bhi.w	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e6a:	d030      	beq.n	8105ece <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8105e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e72:	f200 8083 	bhi.w	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8105e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	d004      	beq.n	8105e86 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8105e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105e82:	d012      	beq.n	8105eaa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8105e84:	e07a      	b.n	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e86:	4b38      	ldr	r3, [pc, #224]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e92:	d107      	bne.n	8105ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105e98:	4618      	mov	r0, r3
 8105e9a:	f000 fd73 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ea2:	e2a3      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105ea4:	2300      	movs	r3, #0
 8105ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ea8:	e2a0      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105eaa:	4b2f      	ldr	r3, [pc, #188]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105eac:	681b      	ldr	r3, [r3, #0]
 8105eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105eb6:	d107      	bne.n	8105ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105eb8:	f107 0318 	add.w	r3, r7, #24
 8105ebc:	4618      	mov	r0, r3
 8105ebe:	f000 fab9 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105ec2:	69bb      	ldr	r3, [r7, #24]
 8105ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8105ec6:	e291      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105ec8:	2300      	movs	r3, #0
 8105eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ecc:	e28e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105ece:	4b26      	ldr	r3, [pc, #152]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105eda:	d107      	bne.n	8105eec <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105edc:	f107 030c 	add.w	r3, r7, #12
 8105ee0:	4618      	mov	r0, r3
 8105ee2:	f000 fbfb 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105ee6:	68fb      	ldr	r3, [r7, #12]
 8105ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105eea:	e27f      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105eec:	2300      	movs	r3, #0
 8105eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ef0:	e27c      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105ef2:	4b1d      	ldr	r3, [pc, #116]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105efa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105efc:	4b1a      	ldr	r3, [pc, #104]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	f003 0304 	and.w	r3, r3, #4
 8105f04:	2b04      	cmp	r3, #4
 8105f06:	d10c      	bne.n	8105f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8105f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f0a:	2b00      	cmp	r3, #0
 8105f0c:	d109      	bne.n	8105f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105f0e:	4b16      	ldr	r3, [pc, #88]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f10:	681b      	ldr	r3, [r3, #0]
 8105f12:	08db      	lsrs	r3, r3, #3
 8105f14:	f003 0303 	and.w	r3, r3, #3
 8105f18:	4a14      	ldr	r2, [pc, #80]	; (8105f6c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8105f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8105f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f20:	e01e      	b.n	8105f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105f22:	4b11      	ldr	r3, [pc, #68]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105f2e:	d106      	bne.n	8105f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8105f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f36:	d102      	bne.n	8105f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105f38:	4b0d      	ldr	r3, [pc, #52]	; (8105f70 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8105f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f3c:	e010      	b.n	8105f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105f3e:	4b0a      	ldr	r3, [pc, #40]	; (8105f68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105f4a:	d106      	bne.n	8105f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8105f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f52:	d102      	bne.n	8105f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105f54:	4b07      	ldr	r3, [pc, #28]	; (8105f74 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8105f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f58:	e002      	b.n	8105f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105f5a:	2300      	movs	r3, #0
 8105f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105f5e:	e245      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105f60:	e244      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105f62:	4b05      	ldr	r3, [pc, #20]	; (8105f78 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8105f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105f66:	e241      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105f68:	58024400 	.word	0x58024400
 8105f6c:	03d09000 	.word	0x03d09000
 8105f70:	003d0900 	.word	0x003d0900
 8105f74:	017d7840 	.word	0x017d7840
 8105f78:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8105f7c:	2300      	movs	r3, #0
 8105f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105f80:	e234      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105f88:	f040 809c 	bne.w	81060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8105f8c:	4b9b      	ldr	r3, [pc, #620]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105f94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105f9c:	d054      	beq.n	8106048 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8105f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105fa4:	f200 808b 	bhi.w	81060be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8105fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105fae:	f000 8083 	beq.w	81060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8105fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105fb8:	f200 8081 	bhi.w	81060be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8105fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105fc2:	d02f      	beq.n	8106024 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8105fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105fca:	d878      	bhi.n	81060be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8105fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fce:	2b00      	cmp	r3, #0
 8105fd0:	d004      	beq.n	8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8105fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fd8:	d012      	beq.n	8106000 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8105fda:	e070      	b.n	81060be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105fdc:	4b87      	ldr	r3, [pc, #540]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105fe8:	d107      	bne.n	8105ffa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105fee:	4618      	mov	r0, r3
 8105ff0:	f000 fcc8 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ff8:	e1f8      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105ffa:	2300      	movs	r3, #0
 8105ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ffe:	e1f5      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106000:	4b7e      	ldr	r3, [pc, #504]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810600c:	d107      	bne.n	810601e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810600e:	f107 0318 	add.w	r3, r7, #24
 8106012:	4618      	mov	r0, r3
 8106014:	f000 fa0e 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106018:	69bb      	ldr	r3, [r7, #24]
 810601a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810601c:	e1e6      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810601e:	2300      	movs	r3, #0
 8106020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106022:	e1e3      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106024:	4b75      	ldr	r3, [pc, #468]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810602c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106030:	d107      	bne.n	8106042 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106032:	f107 030c 	add.w	r3, r7, #12
 8106036:	4618      	mov	r0, r3
 8106038:	f000 fb50 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106040:	e1d4      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106042:	2300      	movs	r3, #0
 8106044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106046:	e1d1      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106048:	4b6c      	ldr	r3, [pc, #432]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810604c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106050:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106052:	4b6a      	ldr	r3, [pc, #424]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	f003 0304 	and.w	r3, r3, #4
 810605a:	2b04      	cmp	r3, #4
 810605c:	d10c      	bne.n	8106078 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106060:	2b00      	cmp	r3, #0
 8106062:	d109      	bne.n	8106078 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106064:	4b65      	ldr	r3, [pc, #404]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	08db      	lsrs	r3, r3, #3
 810606a:	f003 0303 	and.w	r3, r3, #3
 810606e:	4a64      	ldr	r2, [pc, #400]	; (8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106070:	fa22 f303 	lsr.w	r3, r2, r3
 8106074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106076:	e01e      	b.n	81060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106078:	4b60      	ldr	r3, [pc, #384]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106084:	d106      	bne.n	8106094 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8106086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810608c:	d102      	bne.n	8106094 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810608e:	4b5d      	ldr	r3, [pc, #372]	; (8106204 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106092:	e010      	b.n	81060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106094:	4b59      	ldr	r3, [pc, #356]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810609c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060a0:	d106      	bne.n	81060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 81060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81060a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060a8:	d102      	bne.n	81060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81060aa:	4b57      	ldr	r3, [pc, #348]	; (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060ae:	e002      	b.n	81060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81060b0:	2300      	movs	r3, #0
 81060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81060b4:	e19a      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81060b6:	e199      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81060b8:	4b54      	ldr	r3, [pc, #336]	; (810620c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060bc:	e196      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81060be:	2300      	movs	r3, #0
 81060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060c2:	e193      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81060ca:	d173      	bne.n	81061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81060cc:	4b4b      	ldr	r3, [pc, #300]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81060d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060dc:	d02f      	beq.n	810613e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 81060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060e4:	d863      	bhi.n	81061ae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 81060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060e8:	2b00      	cmp	r3, #0
 81060ea:	d004      	beq.n	81060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 81060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81060f2:	d012      	beq.n	810611a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 81060f4:	e05b      	b.n	81061ae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81060f6:	4b41      	ldr	r3, [pc, #260]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81060fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106102:	d107      	bne.n	8106114 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106104:	f107 0318 	add.w	r3, r7, #24
 8106108:	4618      	mov	r0, r3
 810610a:	f000 f993 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810610e:	69bb      	ldr	r3, [r7, #24]
 8106110:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106112:	e16b      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106114:	2300      	movs	r3, #0
 8106116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106118:	e168      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810611a:	4b38      	ldr	r3, [pc, #224]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106126:	d107      	bne.n	8106138 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106128:	f107 030c 	add.w	r3, r7, #12
 810612c:	4618      	mov	r0, r3
 810612e:	f000 fad5 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106132:	697b      	ldr	r3, [r7, #20]
 8106134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106136:	e159      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106138:	2300      	movs	r3, #0
 810613a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810613c:	e156      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810613e:	4b2f      	ldr	r3, [pc, #188]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106146:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106148:	4b2c      	ldr	r3, [pc, #176]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810614a:	681b      	ldr	r3, [r3, #0]
 810614c:	f003 0304 	and.w	r3, r3, #4
 8106150:	2b04      	cmp	r3, #4
 8106152:	d10c      	bne.n	810616e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8106154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106156:	2b00      	cmp	r3, #0
 8106158:	d109      	bne.n	810616e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810615a:	4b28      	ldr	r3, [pc, #160]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	08db      	lsrs	r3, r3, #3
 8106160:	f003 0303 	and.w	r3, r3, #3
 8106164:	4a26      	ldr	r2, [pc, #152]	; (8106200 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106166:	fa22 f303 	lsr.w	r3, r2, r3
 810616a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810616c:	e01e      	b.n	81061ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810616e:	4b23      	ldr	r3, [pc, #140]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810617a:	d106      	bne.n	810618a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 810617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106182:	d102      	bne.n	810618a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106184:	4b1f      	ldr	r3, [pc, #124]	; (8106204 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106188:	e010      	b.n	81061ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810618a:	4b1c      	ldr	r3, [pc, #112]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106196:	d106      	bne.n	81061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8106198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810619a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810619e:	d102      	bne.n	81061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81061a0:	4b19      	ldr	r3, [pc, #100]	; (8106208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81061a4:	e002      	b.n	81061ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81061a6:	2300      	movs	r3, #0
 81061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81061aa:	e11f      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81061ac:	e11e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81061ae:	2300      	movs	r3, #0
 81061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81061b2:	e11b      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81061ba:	d13e      	bne.n	810623a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81061bc:	4b0f      	ldr	r3, [pc, #60]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81061be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81061c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061c8:	2b00      	cmp	r3, #0
 81061ca:	d004      	beq.n	81061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 81061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81061d2:	d01d      	beq.n	8106210 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 81061d4:	e02e      	b.n	8106234 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81061d6:	4b09      	ldr	r3, [pc, #36]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81061d8:	681b      	ldr	r3, [r3, #0]
 81061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81061de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81061e2:	d107      	bne.n	81061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81061e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81061e8:	4618      	mov	r0, r3
 81061ea:	f000 fbcb 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81061f2:	e0fb      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81061f4:	2300      	movs	r3, #0
 81061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81061f8:	e0f8      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81061fa:	bf00      	nop
 81061fc:	58024400 	.word	0x58024400
 8106200:	03d09000 	.word	0x03d09000
 8106204:	003d0900 	.word	0x003d0900
 8106208:	017d7840 	.word	0x017d7840
 810620c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106210:	4b79      	ldr	r3, [pc, #484]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810621c:	d107      	bne.n	810622e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810621e:	f107 0318 	add.w	r3, r7, #24
 8106222:	4618      	mov	r0, r3
 8106224:	f000 f906 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106228:	6a3b      	ldr	r3, [r7, #32]
 810622a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810622c:	e0de      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810622e:	2300      	movs	r3, #0
 8106230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106232:	e0db      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106234:	2300      	movs	r3, #0
 8106236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106238:	e0d8      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106240:	f040 8085 	bne.w	810634e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106244:	4b6c      	ldr	r3, [pc, #432]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106248:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810624c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106254:	d06b      	beq.n	810632e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8106256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810625c:	d874      	bhi.n	8106348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106264:	d056      	beq.n	8106314 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8106266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810626c:	d86c      	bhi.n	8106348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106274:	d03b      	beq.n	81062ee <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8106276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810627c:	d864      	bhi.n	8106348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106284:	d021      	beq.n	81062ca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8106286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810628c:	d85c      	bhi.n	8106348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106290:	2b00      	cmp	r3, #0
 8106292:	d004      	beq.n	810629e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8106294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810629a:	d004      	beq.n	81062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 810629c:	e054      	b.n	8106348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810629e:	f000 f8b3 	bl	8106408 <HAL_RCCEx_GetD3PCLK1Freq>
 81062a2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 81062a4:	e0a2      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81062a6:	4b54      	ldr	r3, [pc, #336]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062a8:	681b      	ldr	r3, [r3, #0]
 81062aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81062ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81062b2:	d107      	bne.n	81062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81062b4:	f107 0318 	add.w	r3, r7, #24
 81062b8:	4618      	mov	r0, r3
 81062ba:	f000 f8bb 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81062be:	69fb      	ldr	r3, [r7, #28]
 81062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81062c2:	e093      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81062c4:	2300      	movs	r3, #0
 81062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062c8:	e090      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81062ca:	4b4b      	ldr	r3, [pc, #300]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062d6:	d107      	bne.n	81062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81062d8:	f107 030c 	add.w	r3, r7, #12
 81062dc:	4618      	mov	r0, r3
 81062de:	f000 f9fd 	bl	81066dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81062e2:	693b      	ldr	r3, [r7, #16]
 81062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81062e6:	e081      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81062e8:	2300      	movs	r3, #0
 81062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062ec:	e07e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81062ee:	4b42      	ldr	r3, [pc, #264]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062f0:	681b      	ldr	r3, [r3, #0]
 81062f2:	f003 0304 	and.w	r3, r3, #4
 81062f6:	2b04      	cmp	r3, #4
 81062f8:	d109      	bne.n	810630e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81062fa:	4b3f      	ldr	r3, [pc, #252]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062fc:	681b      	ldr	r3, [r3, #0]
 81062fe:	08db      	lsrs	r3, r3, #3
 8106300:	f003 0303 	and.w	r3, r3, #3
 8106304:	4a3d      	ldr	r2, [pc, #244]	; (81063fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8106306:	fa22 f303 	lsr.w	r3, r2, r3
 810630a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810630c:	e06e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810630e:	2300      	movs	r3, #0
 8106310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106312:	e06b      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106314:	4b38      	ldr	r3, [pc, #224]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810631c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106320:	d102      	bne.n	8106328 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8106322:	4b37      	ldr	r3, [pc, #220]	; (8106400 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8106324:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106326:	e061      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106328:	2300      	movs	r3, #0
 810632a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810632c:	e05e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810632e:	4b32      	ldr	r3, [pc, #200]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106330:	681b      	ldr	r3, [r3, #0]
 8106332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810633a:	d102      	bne.n	8106342 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 810633c:	4b31      	ldr	r3, [pc, #196]	; (8106404 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810633e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106340:	e054      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106342:	2300      	movs	r3, #0
 8106344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106346:	e051      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8106348:	2300      	movs	r3, #0
 810634a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810634c:	e04e      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106354:	d148      	bne.n	81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8106356:	4b28      	ldr	r3, [pc, #160]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810635a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810635e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106366:	d02a      	beq.n	81063be <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8106368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810636e:	d838      	bhi.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8106370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106372:	2b00      	cmp	r3, #0
 8106374:	d004      	beq.n	8106380 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8106376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810637c:	d00d      	beq.n	810639a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810637e:	e030      	b.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106380:	4b1d      	ldr	r3, [pc, #116]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810638c:	d102      	bne.n	8106394 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 810638e:	4b1d      	ldr	r3, [pc, #116]	; (8106404 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8106390:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106392:	e02b      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106394:	2300      	movs	r3, #0
 8106396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106398:	e028      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810639a:	4b17      	ldr	r3, [pc, #92]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810639c:	681b      	ldr	r3, [r3, #0]
 810639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81063a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063a6:	d107      	bne.n	81063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81063a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81063ac:	4618      	mov	r0, r3
 81063ae:	f000 fae9 	bl	8106984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81063b6:	e019      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81063b8:	2300      	movs	r3, #0
 81063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063bc:	e016      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81063be:	4b0e      	ldr	r3, [pc, #56]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81063c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81063ca:	d107      	bne.n	81063dc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81063cc:	f107 0318 	add.w	r3, r7, #24
 81063d0:	4618      	mov	r0, r3
 81063d2:	f000 f82f 	bl	8106434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81063d6:	69fb      	ldr	r3, [r7, #28]
 81063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81063da:	e007      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81063dc:	2300      	movs	r3, #0
 81063de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063e0:	e004      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81063e2:	2300      	movs	r3, #0
 81063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063e6:	e001      	b.n	81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 81063e8:	2300      	movs	r3, #0
 81063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81063ee:	4618      	mov	r0, r3
 81063f0:	3740      	adds	r7, #64	; 0x40
 81063f2:	46bd      	mov	sp, r7
 81063f4:	bd80      	pop	{r7, pc}
 81063f6:	bf00      	nop
 81063f8:	58024400 	.word	0x58024400
 81063fc:	03d09000 	.word	0x03d09000
 8106400:	003d0900 	.word	0x003d0900
 8106404:	017d7840 	.word	0x017d7840

08106408 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106408:	b580      	push	{r7, lr}
 810640a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810640c:	f7fe fbb2 	bl	8104b74 <HAL_RCC_GetHCLKFreq>
 8106410:	4602      	mov	r2, r0
 8106412:	4b06      	ldr	r3, [pc, #24]	; (810642c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106414:	6a1b      	ldr	r3, [r3, #32]
 8106416:	091b      	lsrs	r3, r3, #4
 8106418:	f003 0307 	and.w	r3, r3, #7
 810641c:	4904      	ldr	r1, [pc, #16]	; (8106430 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810641e:	5ccb      	ldrb	r3, [r1, r3]
 8106420:	f003 031f 	and.w	r3, r3, #31
 8106424:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106428:	4618      	mov	r0, r3
 810642a:	bd80      	pop	{r7, pc}
 810642c:	58024400 	.word	0x58024400
 8106430:	0810a7a8 	.word	0x0810a7a8

08106434 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106434:	b480      	push	{r7}
 8106436:	b089      	sub	sp, #36	; 0x24
 8106438:	af00      	add	r7, sp, #0
 810643a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810643c:	4ba1      	ldr	r3, [pc, #644]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106440:	f003 0303 	and.w	r3, r3, #3
 8106444:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106446:	4b9f      	ldr	r3, [pc, #636]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810644a:	0b1b      	lsrs	r3, r3, #12
 810644c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106450:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106452:	4b9c      	ldr	r3, [pc, #624]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106456:	091b      	lsrs	r3, r3, #4
 8106458:	f003 0301 	and.w	r3, r3, #1
 810645c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810645e:	4b99      	ldr	r3, [pc, #612]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106462:	08db      	lsrs	r3, r3, #3
 8106464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106468:	693a      	ldr	r2, [r7, #16]
 810646a:	fb02 f303 	mul.w	r3, r2, r3
 810646e:	ee07 3a90 	vmov	s15, r3
 8106472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810647a:	697b      	ldr	r3, [r7, #20]
 810647c:	2b00      	cmp	r3, #0
 810647e:	f000 8111 	beq.w	81066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106482:	69bb      	ldr	r3, [r7, #24]
 8106484:	2b02      	cmp	r3, #2
 8106486:	f000 8083 	beq.w	8106590 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810648a:	69bb      	ldr	r3, [r7, #24]
 810648c:	2b02      	cmp	r3, #2
 810648e:	f200 80a1 	bhi.w	81065d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106492:	69bb      	ldr	r3, [r7, #24]
 8106494:	2b00      	cmp	r3, #0
 8106496:	d003      	beq.n	81064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106498:	69bb      	ldr	r3, [r7, #24]
 810649a:	2b01      	cmp	r3, #1
 810649c:	d056      	beq.n	810654c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810649e:	e099      	b.n	81065d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81064a0:	4b88      	ldr	r3, [pc, #544]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	f003 0320 	and.w	r3, r3, #32
 81064a8:	2b00      	cmp	r3, #0
 81064aa:	d02d      	beq.n	8106508 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81064ac:	4b85      	ldr	r3, [pc, #532]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	08db      	lsrs	r3, r3, #3
 81064b2:	f003 0303 	and.w	r3, r3, #3
 81064b6:	4a84      	ldr	r2, [pc, #528]	; (81066c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81064b8:	fa22 f303 	lsr.w	r3, r2, r3
 81064bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81064be:	68bb      	ldr	r3, [r7, #8]
 81064c0:	ee07 3a90 	vmov	s15, r3
 81064c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064c8:	697b      	ldr	r3, [r7, #20]
 81064ca:	ee07 3a90 	vmov	s15, r3
 81064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064d6:	4b7b      	ldr	r3, [pc, #492]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064de:	ee07 3a90 	vmov	s15, r3
 81064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81064ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 81066cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106502:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106506:	e087      	b.n	8106618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106508:	697b      	ldr	r3, [r7, #20]
 810650a:	ee07 3a90 	vmov	s15, r3
 810650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106512:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81066d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810651a:	4b6a      	ldr	r3, [pc, #424]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106522:	ee07 3a90 	vmov	s15, r3
 8106526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810652a:	ed97 6a03 	vldr	s12, [r7, #12]
 810652e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81066cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810653a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810654a:	e065      	b.n	8106618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810654c:	697b      	ldr	r3, [r7, #20]
 810654e:	ee07 3a90 	vmov	s15, r3
 8106552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106556:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810655e:	4b59      	ldr	r3, [pc, #356]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106566:	ee07 3a90 	vmov	s15, r3
 810656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810656e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106572:	eddf 5a56 	vldr	s11, [pc, #344]	; 81066cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810657a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810657e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106586:	ee67 7a27 	vmul.f32	s15, s14, s15
 810658a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810658e:	e043      	b.n	8106618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106590:	697b      	ldr	r3, [r7, #20]
 8106592:	ee07 3a90 	vmov	s15, r3
 8106596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810659a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065a2:	4b48      	ldr	r3, [pc, #288]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065aa:	ee07 3a90 	vmov	s15, r3
 81065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81065b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81066cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81065d2:	e021      	b.n	8106618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81065d4:	697b      	ldr	r3, [r7, #20]
 81065d6:	ee07 3a90 	vmov	s15, r3
 81065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81065e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065e6:	4b37      	ldr	r3, [pc, #220]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81065ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065ee:	ee07 3a90 	vmov	s15, r3
 81065f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81065fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 81066cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81065fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810660a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810660e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106616:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106618:	4b2a      	ldr	r3, [pc, #168]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810661c:	0a5b      	lsrs	r3, r3, #9
 810661e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106622:	ee07 3a90 	vmov	s15, r3
 8106626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810662a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810662e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106632:	edd7 6a07 	vldr	s13, [r7, #28]
 8106636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810663a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810663e:	ee17 2a90 	vmov	r2, s15
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106646:	4b1f      	ldr	r3, [pc, #124]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810664a:	0c1b      	lsrs	r3, r3, #16
 810664c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106650:	ee07 3a90 	vmov	s15, r3
 8106654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810665c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106660:	edd7 6a07 	vldr	s13, [r7, #28]
 8106664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810666c:	ee17 2a90 	vmov	r2, s15
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106674:	4b13      	ldr	r3, [pc, #76]	; (81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106678:	0e1b      	lsrs	r3, r3, #24
 810667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810667e:	ee07 3a90 	vmov	s15, r3
 8106682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810668a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810668e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810669a:	ee17 2a90 	vmov	r2, s15
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81066a2:	e008      	b.n	81066b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	2200      	movs	r2, #0
 81066a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	2200      	movs	r2, #0
 81066ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	2200      	movs	r2, #0
 81066b4:	609a      	str	r2, [r3, #8]
}
 81066b6:	bf00      	nop
 81066b8:	3724      	adds	r7, #36	; 0x24
 81066ba:	46bd      	mov	sp, r7
 81066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066c0:	4770      	bx	lr
 81066c2:	bf00      	nop
 81066c4:	58024400 	.word	0x58024400
 81066c8:	03d09000 	.word	0x03d09000
 81066cc:	46000000 	.word	0x46000000
 81066d0:	4c742400 	.word	0x4c742400
 81066d4:	4a742400 	.word	0x4a742400
 81066d8:	4bbebc20 	.word	0x4bbebc20

081066dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81066dc:	b480      	push	{r7}
 81066de:	b089      	sub	sp, #36	; 0x24
 81066e0:	af00      	add	r7, sp, #0
 81066e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81066e4:	4ba1      	ldr	r3, [pc, #644]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066e8:	f003 0303 	and.w	r3, r3, #3
 81066ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81066ee:	4b9f      	ldr	r3, [pc, #636]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066f2:	0d1b      	lsrs	r3, r3, #20
 81066f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81066f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81066fa:	4b9c      	ldr	r3, [pc, #624]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066fe:	0a1b      	lsrs	r3, r3, #8
 8106700:	f003 0301 	and.w	r3, r3, #1
 8106704:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106706:	4b99      	ldr	r3, [pc, #612]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810670a:	08db      	lsrs	r3, r3, #3
 810670c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106710:	693a      	ldr	r2, [r7, #16]
 8106712:	fb02 f303 	mul.w	r3, r2, r3
 8106716:	ee07 3a90 	vmov	s15, r3
 810671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810671e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106722:	697b      	ldr	r3, [r7, #20]
 8106724:	2b00      	cmp	r3, #0
 8106726:	f000 8111 	beq.w	810694c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810672a:	69bb      	ldr	r3, [r7, #24]
 810672c:	2b02      	cmp	r3, #2
 810672e:	f000 8083 	beq.w	8106838 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106732:	69bb      	ldr	r3, [r7, #24]
 8106734:	2b02      	cmp	r3, #2
 8106736:	f200 80a1 	bhi.w	810687c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810673a:	69bb      	ldr	r3, [r7, #24]
 810673c:	2b00      	cmp	r3, #0
 810673e:	d003      	beq.n	8106748 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106740:	69bb      	ldr	r3, [r7, #24]
 8106742:	2b01      	cmp	r3, #1
 8106744:	d056      	beq.n	81067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106746:	e099      	b.n	810687c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106748:	4b88      	ldr	r3, [pc, #544]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	f003 0320 	and.w	r3, r3, #32
 8106750:	2b00      	cmp	r3, #0
 8106752:	d02d      	beq.n	81067b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106754:	4b85      	ldr	r3, [pc, #532]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	08db      	lsrs	r3, r3, #3
 810675a:	f003 0303 	and.w	r3, r3, #3
 810675e:	4a84      	ldr	r2, [pc, #528]	; (8106970 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106760:	fa22 f303 	lsr.w	r3, r2, r3
 8106764:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106766:	68bb      	ldr	r3, [r7, #8]
 8106768:	ee07 3a90 	vmov	s15, r3
 810676c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106770:	697b      	ldr	r3, [r7, #20]
 8106772:	ee07 3a90 	vmov	s15, r3
 8106776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810677a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810677e:	4b7b      	ldr	r3, [pc, #492]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106786:	ee07 3a90 	vmov	s15, r3
 810678a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810678e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106792:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810679a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810679e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81067ae:	e087      	b.n	81068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81067b0:	697b      	ldr	r3, [r7, #20]
 81067b2:	ee07 3a90 	vmov	s15, r3
 81067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106978 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81067be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067c2:	4b6a      	ldr	r3, [pc, #424]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067ca:	ee07 3a90 	vmov	s15, r3
 81067ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81067d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81067da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067f2:	e065      	b.n	81068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81067f4:	697b      	ldr	r3, [r7, #20]
 81067f6:	ee07 3a90 	vmov	s15, r3
 81067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810697c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106806:	4b59      	ldr	r3, [pc, #356]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810680a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810680e:	ee07 3a90 	vmov	s15, r3
 8106812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106816:	ed97 6a03 	vldr	s12, [r7, #12]
 810681a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810681e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810682a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810682e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106836:	e043      	b.n	81068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106838:	697b      	ldr	r3, [r7, #20]
 810683a:	ee07 3a90 	vmov	s15, r3
 810683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106842:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810684a:	4b48      	ldr	r3, [pc, #288]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810684e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106852:	ee07 3a90 	vmov	s15, r3
 8106856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810685a:	ed97 6a03 	vldr	s12, [r7, #12]
 810685e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810686a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810686e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810687a:	e021      	b.n	81068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810687c:	697b      	ldr	r3, [r7, #20]
 810687e:	ee07 3a90 	vmov	s15, r3
 8106882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106886:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810697c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810688a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810688e:	4b37      	ldr	r3, [pc, #220]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106896:	ee07 3a90 	vmov	s15, r3
 810689a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810689e:	ed97 6a03 	vldr	s12, [r7, #12]
 81068a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81068a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81068be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81068c0:	4b2a      	ldr	r3, [pc, #168]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068c4:	0a5b      	lsrs	r3, r3, #9
 81068c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068ca:	ee07 3a90 	vmov	s15, r3
 81068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81068d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81068da:	edd7 6a07 	vldr	s13, [r7, #28]
 81068de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068e6:	ee17 2a90 	vmov	r2, s15
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81068ee:	4b1f      	ldr	r3, [pc, #124]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068f2:	0c1b      	lsrs	r3, r3, #16
 81068f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068f8:	ee07 3a90 	vmov	s15, r3
 81068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106908:	edd7 6a07 	vldr	s13, [r7, #28]
 810690c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106914:	ee17 2a90 	vmov	r2, s15
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810691c:	4b13      	ldr	r3, [pc, #76]	; (810696c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106920:	0e1b      	lsrs	r3, r3, #24
 8106922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106926:	ee07 3a90 	vmov	s15, r3
 810692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810692e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106936:	edd7 6a07 	vldr	s13, [r7, #28]
 810693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106942:	ee17 2a90 	vmov	r2, s15
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810694a:	e008      	b.n	810695e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	2200      	movs	r2, #0
 8106950:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	2200      	movs	r2, #0
 8106956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106958:	687b      	ldr	r3, [r7, #4]
 810695a:	2200      	movs	r2, #0
 810695c:	609a      	str	r2, [r3, #8]
}
 810695e:	bf00      	nop
 8106960:	3724      	adds	r7, #36	; 0x24
 8106962:	46bd      	mov	sp, r7
 8106964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106968:	4770      	bx	lr
 810696a:	bf00      	nop
 810696c:	58024400 	.word	0x58024400
 8106970:	03d09000 	.word	0x03d09000
 8106974:	46000000 	.word	0x46000000
 8106978:	4c742400 	.word	0x4c742400
 810697c:	4a742400 	.word	0x4a742400
 8106980:	4bbebc20 	.word	0x4bbebc20

08106984 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8106984:	b480      	push	{r7}
 8106986:	b089      	sub	sp, #36	; 0x24
 8106988:	af00      	add	r7, sp, #0
 810698a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810698c:	4ba0      	ldr	r3, [pc, #640]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106990:	f003 0303 	and.w	r3, r3, #3
 8106994:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8106996:	4b9e      	ldr	r3, [pc, #632]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810699a:	091b      	lsrs	r3, r3, #4
 810699c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81069a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81069a2:	4b9b      	ldr	r3, [pc, #620]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069a6:	f003 0301 	and.w	r3, r3, #1
 81069aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81069ac:	4b98      	ldr	r3, [pc, #608]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81069b0:	08db      	lsrs	r3, r3, #3
 81069b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81069b6:	693a      	ldr	r2, [r7, #16]
 81069b8:	fb02 f303 	mul.w	r3, r2, r3
 81069bc:	ee07 3a90 	vmov	s15, r3
 81069c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81069c8:	697b      	ldr	r3, [r7, #20]
 81069ca:	2b00      	cmp	r3, #0
 81069cc:	f000 8111 	beq.w	8106bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81069d0:	69bb      	ldr	r3, [r7, #24]
 81069d2:	2b02      	cmp	r3, #2
 81069d4:	f000 8083 	beq.w	8106ade <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81069d8:	69bb      	ldr	r3, [r7, #24]
 81069da:	2b02      	cmp	r3, #2
 81069dc:	f200 80a1 	bhi.w	8106b22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81069e0:	69bb      	ldr	r3, [r7, #24]
 81069e2:	2b00      	cmp	r3, #0
 81069e4:	d003      	beq.n	81069ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81069e6:	69bb      	ldr	r3, [r7, #24]
 81069e8:	2b01      	cmp	r3, #1
 81069ea:	d056      	beq.n	8106a9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81069ec:	e099      	b.n	8106b22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069ee:	4b88      	ldr	r3, [pc, #544]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	f003 0320 	and.w	r3, r3, #32
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	d02d      	beq.n	8106a56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81069fa:	4b85      	ldr	r3, [pc, #532]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	08db      	lsrs	r3, r3, #3
 8106a00:	f003 0303 	and.w	r3, r3, #3
 8106a04:	4a83      	ldr	r2, [pc, #524]	; (8106c14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106a06:	fa22 f303 	lsr.w	r3, r2, r3
 8106a0a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a0c:	68bb      	ldr	r3, [r7, #8]
 8106a0e:	ee07 3a90 	vmov	s15, r3
 8106a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a16:	697b      	ldr	r3, [r7, #20]
 8106a18:	ee07 3a90 	vmov	s15, r3
 8106a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a24:	4b7a      	ldr	r3, [pc, #488]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a2c:	ee07 3a90 	vmov	s15, r3
 8106a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106c18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106a54:	e087      	b.n	8106b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a56:	697b      	ldr	r3, [r7, #20]
 8106a58:	ee07 3a90 	vmov	s15, r3
 8106a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106c1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a68:	4b69      	ldr	r3, [pc, #420]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a70:	ee07 3a90 	vmov	s15, r3
 8106a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106c18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a98:	e065      	b.n	8106b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a9a:	697b      	ldr	r3, [r7, #20]
 8106a9c:	ee07 3a90 	vmov	s15, r3
 8106aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106c20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106aac:	4b58      	ldr	r3, [pc, #352]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ab4:	ee07 3a90 	vmov	s15, r3
 8106ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ac0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106c18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106adc:	e043      	b.n	8106b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106ade:	697b      	ldr	r3, [r7, #20]
 8106ae0:	ee07 3a90 	vmov	s15, r3
 8106ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ae8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106af0:	4b47      	ldr	r3, [pc, #284]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106af8:	ee07 3a90 	vmov	s15, r3
 8106afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106c18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b20:	e021      	b.n	8106b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106b22:	697b      	ldr	r3, [r7, #20]
 8106b24:	ee07 3a90 	vmov	s15, r3
 8106b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106c1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b34:	4b36      	ldr	r3, [pc, #216]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b3c:	ee07 3a90 	vmov	s15, r3
 8106b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106c18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8106b66:	4b2a      	ldr	r3, [pc, #168]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b6a:	0a5b      	lsrs	r3, r3, #9
 8106b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b70:	ee07 3a90 	vmov	s15, r3
 8106b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b8c:	ee17 2a90 	vmov	r2, s15
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8106b94:	4b1e      	ldr	r3, [pc, #120]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b98:	0c1b      	lsrs	r3, r3, #16
 8106b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b9e:	ee07 3a90 	vmov	s15, r3
 8106ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8106bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bba:	ee17 2a90 	vmov	r2, s15
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8106bc2:	4b13      	ldr	r3, [pc, #76]	; (8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106bc6:	0e1b      	lsrs	r3, r3, #24
 8106bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bcc:	ee07 3a90 	vmov	s15, r3
 8106bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8106be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106be8:	ee17 2a90 	vmov	r2, s15
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106bf0:	e008      	b.n	8106c04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	2200      	movs	r2, #0
 8106bf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	2200      	movs	r2, #0
 8106bfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	2200      	movs	r2, #0
 8106c02:	609a      	str	r2, [r3, #8]
}
 8106c04:	bf00      	nop
 8106c06:	3724      	adds	r7, #36	; 0x24
 8106c08:	46bd      	mov	sp, r7
 8106c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c0e:	4770      	bx	lr
 8106c10:	58024400 	.word	0x58024400
 8106c14:	03d09000 	.word	0x03d09000
 8106c18:	46000000 	.word	0x46000000
 8106c1c:	4c742400 	.word	0x4c742400
 8106c20:	4a742400 	.word	0x4a742400
 8106c24:	4bbebc20 	.word	0x4bbebc20

08106c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106c28:	b580      	push	{r7, lr}
 8106c2a:	b084      	sub	sp, #16
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
 8106c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106c32:	2300      	movs	r3, #0
 8106c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106c36:	4b54      	ldr	r3, [pc, #336]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c3a:	f003 0303 	and.w	r3, r3, #3
 8106c3e:	2b03      	cmp	r3, #3
 8106c40:	d101      	bne.n	8106c46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106c42:	2301      	movs	r3, #1
 8106c44:	e09b      	b.n	8106d7e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106c46:	4b50      	ldr	r3, [pc, #320]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c48:	681b      	ldr	r3, [r3, #0]
 8106c4a:	4a4f      	ldr	r2, [pc, #316]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106c52:	f7fb fa09 	bl	8102068 <HAL_GetTick>
 8106c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106c58:	e008      	b.n	8106c6c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106c5a:	f7fb fa05 	bl	8102068 <HAL_GetTick>
 8106c5e:	4602      	mov	r2, r0
 8106c60:	68bb      	ldr	r3, [r7, #8]
 8106c62:	1ad3      	subs	r3, r2, r3
 8106c64:	2b02      	cmp	r3, #2
 8106c66:	d901      	bls.n	8106c6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106c68:	2303      	movs	r3, #3
 8106c6a:	e088      	b.n	8106d7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106c6c:	4b46      	ldr	r3, [pc, #280]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c6e:	681b      	ldr	r3, [r3, #0]
 8106c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c74:	2b00      	cmp	r3, #0
 8106c76:	d1f0      	bne.n	8106c5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106c78:	4b43      	ldr	r3, [pc, #268]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	681b      	ldr	r3, [r3, #0]
 8106c84:	031b      	lsls	r3, r3, #12
 8106c86:	4940      	ldr	r1, [pc, #256]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106c88:	4313      	orrs	r3, r2
 8106c8a:	628b      	str	r3, [r1, #40]	; 0x28
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	685b      	ldr	r3, [r3, #4]
 8106c90:	3b01      	subs	r3, #1
 8106c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	689b      	ldr	r3, [r3, #8]
 8106c9a:	3b01      	subs	r3, #1
 8106c9c:	025b      	lsls	r3, r3, #9
 8106c9e:	b29b      	uxth	r3, r3
 8106ca0:	431a      	orrs	r2, r3
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	68db      	ldr	r3, [r3, #12]
 8106ca6:	3b01      	subs	r3, #1
 8106ca8:	041b      	lsls	r3, r3, #16
 8106caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106cae:	431a      	orrs	r2, r3
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	691b      	ldr	r3, [r3, #16]
 8106cb4:	3b01      	subs	r3, #1
 8106cb6:	061b      	lsls	r3, r3, #24
 8106cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106cbc:	4932      	ldr	r1, [pc, #200]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cbe:	4313      	orrs	r3, r2
 8106cc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106cc2:	4b31      	ldr	r3, [pc, #196]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	695b      	ldr	r3, [r3, #20]
 8106cce:	492e      	ldr	r1, [pc, #184]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cd0:	4313      	orrs	r3, r2
 8106cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106cd4:	4b2c      	ldr	r3, [pc, #176]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cd8:	f023 0220 	bic.w	r2, r3, #32
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	699b      	ldr	r3, [r3, #24]
 8106ce0:	4929      	ldr	r1, [pc, #164]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106ce2:	4313      	orrs	r3, r2
 8106ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106ce6:	4b28      	ldr	r3, [pc, #160]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cea:	4a27      	ldr	r2, [pc, #156]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cec:	f023 0310 	bic.w	r3, r3, #16
 8106cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106cf2:	4b25      	ldr	r3, [pc, #148]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106cfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106cfe:	687a      	ldr	r2, [r7, #4]
 8106d00:	69d2      	ldr	r2, [r2, #28]
 8106d02:	00d2      	lsls	r2, r2, #3
 8106d04:	4920      	ldr	r1, [pc, #128]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d06:	4313      	orrs	r3, r2
 8106d08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106d0a:	4b1f      	ldr	r3, [pc, #124]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d0e:	4a1e      	ldr	r2, [pc, #120]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d10:	f043 0310 	orr.w	r3, r3, #16
 8106d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106d16:	683b      	ldr	r3, [r7, #0]
 8106d18:	2b00      	cmp	r3, #0
 8106d1a:	d106      	bne.n	8106d2a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106d1c:	4b1a      	ldr	r3, [pc, #104]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d20:	4a19      	ldr	r2, [pc, #100]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d28:	e00f      	b.n	8106d4a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106d2a:	683b      	ldr	r3, [r7, #0]
 8106d2c:	2b01      	cmp	r3, #1
 8106d2e:	d106      	bne.n	8106d3e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106d30:	4b15      	ldr	r3, [pc, #84]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d34:	4a14      	ldr	r2, [pc, #80]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d3c:	e005      	b.n	8106d4a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106d3e:	4b12      	ldr	r3, [pc, #72]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d42:	4a11      	ldr	r2, [pc, #68]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106d4a:	4b0f      	ldr	r3, [pc, #60]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	4a0e      	ldr	r2, [pc, #56]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106d56:	f7fb f987 	bl	8102068 <HAL_GetTick>
 8106d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106d5c:	e008      	b.n	8106d70 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106d5e:	f7fb f983 	bl	8102068 <HAL_GetTick>
 8106d62:	4602      	mov	r2, r0
 8106d64:	68bb      	ldr	r3, [r7, #8]
 8106d66:	1ad3      	subs	r3, r2, r3
 8106d68:	2b02      	cmp	r3, #2
 8106d6a:	d901      	bls.n	8106d70 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106d6c:	2303      	movs	r3, #3
 8106d6e:	e006      	b.n	8106d7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106d70:	4b05      	ldr	r3, [pc, #20]	; (8106d88 <RCCEx_PLL2_Config+0x160>)
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d0f0      	beq.n	8106d5e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d7e:	4618      	mov	r0, r3
 8106d80:	3710      	adds	r7, #16
 8106d82:	46bd      	mov	sp, r7
 8106d84:	bd80      	pop	{r7, pc}
 8106d86:	bf00      	nop
 8106d88:	58024400 	.word	0x58024400

08106d8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106d8c:	b580      	push	{r7, lr}
 8106d8e:	b084      	sub	sp, #16
 8106d90:	af00      	add	r7, sp, #0
 8106d92:	6078      	str	r0, [r7, #4]
 8106d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106d96:	2300      	movs	r3, #0
 8106d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106d9a:	4b54      	ldr	r3, [pc, #336]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d9e:	f003 0303 	and.w	r3, r3, #3
 8106da2:	2b03      	cmp	r3, #3
 8106da4:	d101      	bne.n	8106daa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106da6:	2301      	movs	r3, #1
 8106da8:	e09b      	b.n	8106ee2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106daa:	4b50      	ldr	r3, [pc, #320]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106dac:	681b      	ldr	r3, [r3, #0]
 8106dae:	4a4f      	ldr	r2, [pc, #316]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106db6:	f7fb f957 	bl	8102068 <HAL_GetTick>
 8106dba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106dbc:	e008      	b.n	8106dd0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106dbe:	f7fb f953 	bl	8102068 <HAL_GetTick>
 8106dc2:	4602      	mov	r2, r0
 8106dc4:	68bb      	ldr	r3, [r7, #8]
 8106dc6:	1ad3      	subs	r3, r2, r3
 8106dc8:	2b02      	cmp	r3, #2
 8106dca:	d901      	bls.n	8106dd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106dcc:	2303      	movs	r3, #3
 8106dce:	e088      	b.n	8106ee2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106dd0:	4b46      	ldr	r3, [pc, #280]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106dd2:	681b      	ldr	r3, [r3, #0]
 8106dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106dd8:	2b00      	cmp	r3, #0
 8106dda:	d1f0      	bne.n	8106dbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106ddc:	4b43      	ldr	r3, [pc, #268]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106de0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	681b      	ldr	r3, [r3, #0]
 8106de8:	051b      	lsls	r3, r3, #20
 8106dea:	4940      	ldr	r1, [pc, #256]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106dec:	4313      	orrs	r3, r2
 8106dee:	628b      	str	r3, [r1, #40]	; 0x28
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	685b      	ldr	r3, [r3, #4]
 8106df4:	3b01      	subs	r3, #1
 8106df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	689b      	ldr	r3, [r3, #8]
 8106dfe:	3b01      	subs	r3, #1
 8106e00:	025b      	lsls	r3, r3, #9
 8106e02:	b29b      	uxth	r3, r3
 8106e04:	431a      	orrs	r2, r3
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	68db      	ldr	r3, [r3, #12]
 8106e0a:	3b01      	subs	r3, #1
 8106e0c:	041b      	lsls	r3, r3, #16
 8106e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106e12:	431a      	orrs	r2, r3
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	691b      	ldr	r3, [r3, #16]
 8106e18:	3b01      	subs	r3, #1
 8106e1a:	061b      	lsls	r3, r3, #24
 8106e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106e20:	4932      	ldr	r1, [pc, #200]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e22:	4313      	orrs	r3, r2
 8106e24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106e26:	4b31      	ldr	r3, [pc, #196]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	695b      	ldr	r3, [r3, #20]
 8106e32:	492e      	ldr	r1, [pc, #184]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e34:	4313      	orrs	r3, r2
 8106e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106e38:	4b2c      	ldr	r3, [pc, #176]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	699b      	ldr	r3, [r3, #24]
 8106e44:	4929      	ldr	r1, [pc, #164]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e46:	4313      	orrs	r3, r2
 8106e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106e4a:	4b28      	ldr	r3, [pc, #160]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e4e:	4a27      	ldr	r2, [pc, #156]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106e56:	4b25      	ldr	r3, [pc, #148]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106e5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106e62:	687a      	ldr	r2, [r7, #4]
 8106e64:	69d2      	ldr	r2, [r2, #28]
 8106e66:	00d2      	lsls	r2, r2, #3
 8106e68:	4920      	ldr	r1, [pc, #128]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e6a:	4313      	orrs	r3, r2
 8106e6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106e6e:	4b1f      	ldr	r3, [pc, #124]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e72:	4a1e      	ldr	r2, [pc, #120]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106e7a:	683b      	ldr	r3, [r7, #0]
 8106e7c:	2b00      	cmp	r3, #0
 8106e7e:	d106      	bne.n	8106e8e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106e80:	4b1a      	ldr	r3, [pc, #104]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e84:	4a19      	ldr	r2, [pc, #100]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106e8c:	e00f      	b.n	8106eae <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106e8e:	683b      	ldr	r3, [r7, #0]
 8106e90:	2b01      	cmp	r3, #1
 8106e92:	d106      	bne.n	8106ea2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106e94:	4b15      	ldr	r3, [pc, #84]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e98:	4a14      	ldr	r2, [pc, #80]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106e9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106ea0:	e005      	b.n	8106eae <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106ea2:	4b12      	ldr	r3, [pc, #72]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ea6:	4a11      	ldr	r2, [pc, #68]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106eac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106eae:	4b0f      	ldr	r3, [pc, #60]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	4a0e      	ldr	r2, [pc, #56]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106eba:	f7fb f8d5 	bl	8102068 <HAL_GetTick>
 8106ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106ec0:	e008      	b.n	8106ed4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106ec2:	f7fb f8d1 	bl	8102068 <HAL_GetTick>
 8106ec6:	4602      	mov	r2, r0
 8106ec8:	68bb      	ldr	r3, [r7, #8]
 8106eca:	1ad3      	subs	r3, r2, r3
 8106ecc:	2b02      	cmp	r3, #2
 8106ece:	d901      	bls.n	8106ed4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106ed0:	2303      	movs	r3, #3
 8106ed2:	e006      	b.n	8106ee2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106ed4:	4b05      	ldr	r3, [pc, #20]	; (8106eec <RCCEx_PLL3_Config+0x160>)
 8106ed6:	681b      	ldr	r3, [r3, #0]
 8106ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106edc:	2b00      	cmp	r3, #0
 8106ede:	d0f0      	beq.n	8106ec2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ee2:	4618      	mov	r0, r3
 8106ee4:	3710      	adds	r7, #16
 8106ee6:	46bd      	mov	sp, r7
 8106ee8:	bd80      	pop	{r7, pc}
 8106eea:	bf00      	nop
 8106eec:	58024400 	.word	0x58024400

08106ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106ef0:	b580      	push	{r7, lr}
 8106ef2:	b082      	sub	sp, #8
 8106ef4:	af00      	add	r7, sp, #0
 8106ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	2b00      	cmp	r3, #0
 8106efc:	d101      	bne.n	8106f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106efe:	2301      	movs	r3, #1
 8106f00:	e049      	b.n	8106f96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106f08:	b2db      	uxtb	r3, r3
 8106f0a:	2b00      	cmp	r3, #0
 8106f0c:	d106      	bne.n	8106f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106f0e:	687b      	ldr	r3, [r7, #4]
 8106f10:	2200      	movs	r2, #0
 8106f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106f16:	6878      	ldr	r0, [r7, #4]
 8106f18:	f7fa fe64 	bl	8101be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	2202      	movs	r2, #2
 8106f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	681a      	ldr	r2, [r3, #0]
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	3304      	adds	r3, #4
 8106f2c:	4619      	mov	r1, r3
 8106f2e:	4610      	mov	r0, r2
 8106f30:	f000 fa4e 	bl	81073d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	2201      	movs	r2, #1
 8106f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	2201      	movs	r2, #1
 8106f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	2201      	movs	r2, #1
 8106f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	2201      	movs	r2, #1
 8106f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	2201      	movs	r2, #1
 8106f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	2201      	movs	r2, #1
 8106f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	2201      	movs	r2, #1
 8106f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	2201      	movs	r2, #1
 8106f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	2201      	movs	r2, #1
 8106f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	2201      	movs	r2, #1
 8106f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	2201      	movs	r2, #1
 8106f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	2201      	movs	r2, #1
 8106f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106f94:	2300      	movs	r3, #0
}
 8106f96:	4618      	mov	r0, r3
 8106f98:	3708      	adds	r7, #8
 8106f9a:	46bd      	mov	sp, r7
 8106f9c:	bd80      	pop	{r7, pc}
	...

08106fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106fa0:	b580      	push	{r7, lr}
 8106fa2:	b084      	sub	sp, #16
 8106fa4:	af00      	add	r7, sp, #0
 8106fa6:	6078      	str	r0, [r7, #4]
 8106fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106faa:	683b      	ldr	r3, [r7, #0]
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d109      	bne.n	8106fc4 <HAL_TIM_PWM_Start+0x24>
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106fb6:	b2db      	uxtb	r3, r3
 8106fb8:	2b01      	cmp	r3, #1
 8106fba:	bf14      	ite	ne
 8106fbc:	2301      	movne	r3, #1
 8106fbe:	2300      	moveq	r3, #0
 8106fc0:	b2db      	uxtb	r3, r3
 8106fc2:	e03c      	b.n	810703e <HAL_TIM_PWM_Start+0x9e>
 8106fc4:	683b      	ldr	r3, [r7, #0]
 8106fc6:	2b04      	cmp	r3, #4
 8106fc8:	d109      	bne.n	8106fde <HAL_TIM_PWM_Start+0x3e>
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106fd0:	b2db      	uxtb	r3, r3
 8106fd2:	2b01      	cmp	r3, #1
 8106fd4:	bf14      	ite	ne
 8106fd6:	2301      	movne	r3, #1
 8106fd8:	2300      	moveq	r3, #0
 8106fda:	b2db      	uxtb	r3, r3
 8106fdc:	e02f      	b.n	810703e <HAL_TIM_PWM_Start+0x9e>
 8106fde:	683b      	ldr	r3, [r7, #0]
 8106fe0:	2b08      	cmp	r3, #8
 8106fe2:	d109      	bne.n	8106ff8 <HAL_TIM_PWM_Start+0x58>
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106fea:	b2db      	uxtb	r3, r3
 8106fec:	2b01      	cmp	r3, #1
 8106fee:	bf14      	ite	ne
 8106ff0:	2301      	movne	r3, #1
 8106ff2:	2300      	moveq	r3, #0
 8106ff4:	b2db      	uxtb	r3, r3
 8106ff6:	e022      	b.n	810703e <HAL_TIM_PWM_Start+0x9e>
 8106ff8:	683b      	ldr	r3, [r7, #0]
 8106ffa:	2b0c      	cmp	r3, #12
 8106ffc:	d109      	bne.n	8107012 <HAL_TIM_PWM_Start+0x72>
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107004:	b2db      	uxtb	r3, r3
 8107006:	2b01      	cmp	r3, #1
 8107008:	bf14      	ite	ne
 810700a:	2301      	movne	r3, #1
 810700c:	2300      	moveq	r3, #0
 810700e:	b2db      	uxtb	r3, r3
 8107010:	e015      	b.n	810703e <HAL_TIM_PWM_Start+0x9e>
 8107012:	683b      	ldr	r3, [r7, #0]
 8107014:	2b10      	cmp	r3, #16
 8107016:	d109      	bne.n	810702c <HAL_TIM_PWM_Start+0x8c>
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810701e:	b2db      	uxtb	r3, r3
 8107020:	2b01      	cmp	r3, #1
 8107022:	bf14      	ite	ne
 8107024:	2301      	movne	r3, #1
 8107026:	2300      	moveq	r3, #0
 8107028:	b2db      	uxtb	r3, r3
 810702a:	e008      	b.n	810703e <HAL_TIM_PWM_Start+0x9e>
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8107032:	b2db      	uxtb	r3, r3
 8107034:	2b01      	cmp	r3, #1
 8107036:	bf14      	ite	ne
 8107038:	2301      	movne	r3, #1
 810703a:	2300      	moveq	r3, #0
 810703c:	b2db      	uxtb	r3, r3
 810703e:	2b00      	cmp	r3, #0
 8107040:	d001      	beq.n	8107046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8107042:	2301      	movs	r3, #1
 8107044:	e09c      	b.n	8107180 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107046:	683b      	ldr	r3, [r7, #0]
 8107048:	2b00      	cmp	r3, #0
 810704a:	d104      	bne.n	8107056 <HAL_TIM_PWM_Start+0xb6>
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2202      	movs	r2, #2
 8107050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107054:	e023      	b.n	810709e <HAL_TIM_PWM_Start+0xfe>
 8107056:	683b      	ldr	r3, [r7, #0]
 8107058:	2b04      	cmp	r3, #4
 810705a:	d104      	bne.n	8107066 <HAL_TIM_PWM_Start+0xc6>
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	2202      	movs	r2, #2
 8107060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107064:	e01b      	b.n	810709e <HAL_TIM_PWM_Start+0xfe>
 8107066:	683b      	ldr	r3, [r7, #0]
 8107068:	2b08      	cmp	r3, #8
 810706a:	d104      	bne.n	8107076 <HAL_TIM_PWM_Start+0xd6>
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	2202      	movs	r2, #2
 8107070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107074:	e013      	b.n	810709e <HAL_TIM_PWM_Start+0xfe>
 8107076:	683b      	ldr	r3, [r7, #0]
 8107078:	2b0c      	cmp	r3, #12
 810707a:	d104      	bne.n	8107086 <HAL_TIM_PWM_Start+0xe6>
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	2202      	movs	r2, #2
 8107080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107084:	e00b      	b.n	810709e <HAL_TIM_PWM_Start+0xfe>
 8107086:	683b      	ldr	r3, [r7, #0]
 8107088:	2b10      	cmp	r3, #16
 810708a:	d104      	bne.n	8107096 <HAL_TIM_PWM_Start+0xf6>
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	2202      	movs	r2, #2
 8107090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107094:	e003      	b.n	810709e <HAL_TIM_PWM_Start+0xfe>
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	2202      	movs	r2, #2
 810709a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810709e:	687b      	ldr	r3, [r7, #4]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	2201      	movs	r2, #1
 81070a4:	6839      	ldr	r1, [r7, #0]
 81070a6:	4618      	mov	r0, r3
 81070a8:	f000 fcfa 	bl	8107aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	681b      	ldr	r3, [r3, #0]
 81070b0:	4a35      	ldr	r2, [pc, #212]	; (8107188 <HAL_TIM_PWM_Start+0x1e8>)
 81070b2:	4293      	cmp	r3, r2
 81070b4:	d013      	beq.n	81070de <HAL_TIM_PWM_Start+0x13e>
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	681b      	ldr	r3, [r3, #0]
 81070ba:	4a34      	ldr	r2, [pc, #208]	; (810718c <HAL_TIM_PWM_Start+0x1ec>)
 81070bc:	4293      	cmp	r3, r2
 81070be:	d00e      	beq.n	81070de <HAL_TIM_PWM_Start+0x13e>
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	4a32      	ldr	r2, [pc, #200]	; (8107190 <HAL_TIM_PWM_Start+0x1f0>)
 81070c6:	4293      	cmp	r3, r2
 81070c8:	d009      	beq.n	81070de <HAL_TIM_PWM_Start+0x13e>
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	4a31      	ldr	r2, [pc, #196]	; (8107194 <HAL_TIM_PWM_Start+0x1f4>)
 81070d0:	4293      	cmp	r3, r2
 81070d2:	d004      	beq.n	81070de <HAL_TIM_PWM_Start+0x13e>
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	4a2f      	ldr	r2, [pc, #188]	; (8107198 <HAL_TIM_PWM_Start+0x1f8>)
 81070da:	4293      	cmp	r3, r2
 81070dc:	d101      	bne.n	81070e2 <HAL_TIM_PWM_Start+0x142>
 81070de:	2301      	movs	r3, #1
 81070e0:	e000      	b.n	81070e4 <HAL_TIM_PWM_Start+0x144>
 81070e2:	2300      	movs	r3, #0
 81070e4:	2b00      	cmp	r3, #0
 81070e6:	d007      	beq.n	81070f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	681b      	ldr	r3, [r3, #0]
 81070ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81070f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	4a22      	ldr	r2, [pc, #136]	; (8107188 <HAL_TIM_PWM_Start+0x1e8>)
 81070fe:	4293      	cmp	r3, r2
 8107100:	d01d      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810710a:	d018      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	4a22      	ldr	r2, [pc, #136]	; (810719c <HAL_TIM_PWM_Start+0x1fc>)
 8107112:	4293      	cmp	r3, r2
 8107114:	d013      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	4a21      	ldr	r2, [pc, #132]	; (81071a0 <HAL_TIM_PWM_Start+0x200>)
 810711c:	4293      	cmp	r3, r2
 810711e:	d00e      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	4a1f      	ldr	r2, [pc, #124]	; (81071a4 <HAL_TIM_PWM_Start+0x204>)
 8107126:	4293      	cmp	r3, r2
 8107128:	d009      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	4a17      	ldr	r2, [pc, #92]	; (810718c <HAL_TIM_PWM_Start+0x1ec>)
 8107130:	4293      	cmp	r3, r2
 8107132:	d004      	beq.n	810713e <HAL_TIM_PWM_Start+0x19e>
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	4a1b      	ldr	r2, [pc, #108]	; (81071a8 <HAL_TIM_PWM_Start+0x208>)
 810713a:	4293      	cmp	r3, r2
 810713c:	d115      	bne.n	810716a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	681b      	ldr	r3, [r3, #0]
 8107142:	689a      	ldr	r2, [r3, #8]
 8107144:	4b19      	ldr	r3, [pc, #100]	; (81071ac <HAL_TIM_PWM_Start+0x20c>)
 8107146:	4013      	ands	r3, r2
 8107148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810714a:	68fb      	ldr	r3, [r7, #12]
 810714c:	2b06      	cmp	r3, #6
 810714e:	d015      	beq.n	810717c <HAL_TIM_PWM_Start+0x1dc>
 8107150:	68fb      	ldr	r3, [r7, #12]
 8107152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107156:	d011      	beq.n	810717c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	681b      	ldr	r3, [r3, #0]
 810715c:	681a      	ldr	r2, [r3, #0]
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	f042 0201 	orr.w	r2, r2, #1
 8107166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107168:	e008      	b.n	810717c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	681a      	ldr	r2, [r3, #0]
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	f042 0201 	orr.w	r2, r2, #1
 8107178:	601a      	str	r2, [r3, #0]
 810717a:	e000      	b.n	810717e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810717c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810717e:	2300      	movs	r3, #0
}
 8107180:	4618      	mov	r0, r3
 8107182:	3710      	adds	r7, #16
 8107184:	46bd      	mov	sp, r7
 8107186:	bd80      	pop	{r7, pc}
 8107188:	40010000 	.word	0x40010000
 810718c:	40010400 	.word	0x40010400
 8107190:	40014000 	.word	0x40014000
 8107194:	40014400 	.word	0x40014400
 8107198:	40014800 	.word	0x40014800
 810719c:	40000400 	.word	0x40000400
 81071a0:	40000800 	.word	0x40000800
 81071a4:	40000c00 	.word	0x40000c00
 81071a8:	40001800 	.word	0x40001800
 81071ac:	00010007 	.word	0x00010007

081071b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81071b0:	b580      	push	{r7, lr}
 81071b2:	b084      	sub	sp, #16
 81071b4:	af00      	add	r7, sp, #0
 81071b6:	60f8      	str	r0, [r7, #12]
 81071b8:	60b9      	str	r1, [r7, #8]
 81071ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81071bc:	68fb      	ldr	r3, [r7, #12]
 81071be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81071c2:	2b01      	cmp	r3, #1
 81071c4:	d101      	bne.n	81071ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 81071c6:	2302      	movs	r3, #2
 81071c8:	e0fd      	b.n	81073c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	2201      	movs	r2, #1
 81071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81071d2:	687b      	ldr	r3, [r7, #4]
 81071d4:	2b14      	cmp	r3, #20
 81071d6:	f200 80f0 	bhi.w	81073ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 81071da:	a201      	add	r2, pc, #4	; (adr r2, 81071e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 81071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071e0:	08107235 	.word	0x08107235
 81071e4:	081073bb 	.word	0x081073bb
 81071e8:	081073bb 	.word	0x081073bb
 81071ec:	081073bb 	.word	0x081073bb
 81071f0:	08107275 	.word	0x08107275
 81071f4:	081073bb 	.word	0x081073bb
 81071f8:	081073bb 	.word	0x081073bb
 81071fc:	081073bb 	.word	0x081073bb
 8107200:	081072b7 	.word	0x081072b7
 8107204:	081073bb 	.word	0x081073bb
 8107208:	081073bb 	.word	0x081073bb
 810720c:	081073bb 	.word	0x081073bb
 8107210:	081072f7 	.word	0x081072f7
 8107214:	081073bb 	.word	0x081073bb
 8107218:	081073bb 	.word	0x081073bb
 810721c:	081073bb 	.word	0x081073bb
 8107220:	08107339 	.word	0x08107339
 8107224:	081073bb 	.word	0x081073bb
 8107228:	081073bb 	.word	0x081073bb
 810722c:	081073bb 	.word	0x081073bb
 8107230:	08107379 	.word	0x08107379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107234:	68fb      	ldr	r3, [r7, #12]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	68b9      	ldr	r1, [r7, #8]
 810723a:	4618      	mov	r0, r3
 810723c:	f000 f962 	bl	8107504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	699a      	ldr	r2, [r3, #24]
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	f042 0208 	orr.w	r2, r2, #8
 810724e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	681b      	ldr	r3, [r3, #0]
 8107254:	699a      	ldr	r2, [r3, #24]
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	f022 0204 	bic.w	r2, r2, #4
 810725e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107260:	68fb      	ldr	r3, [r7, #12]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	6999      	ldr	r1, [r3, #24]
 8107266:	68bb      	ldr	r3, [r7, #8]
 8107268:	691a      	ldr	r2, [r3, #16]
 810726a:	68fb      	ldr	r3, [r7, #12]
 810726c:	681b      	ldr	r3, [r3, #0]
 810726e:	430a      	orrs	r2, r1
 8107270:	619a      	str	r2, [r3, #24]
      break;
 8107272:	e0a3      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107274:	68fb      	ldr	r3, [r7, #12]
 8107276:	681b      	ldr	r3, [r3, #0]
 8107278:	68b9      	ldr	r1, [r7, #8]
 810727a:	4618      	mov	r0, r3
 810727c:	f000 f9d2 	bl	8107624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107280:	68fb      	ldr	r3, [r7, #12]
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	699a      	ldr	r2, [r3, #24]
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810728e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107290:	68fb      	ldr	r3, [r7, #12]
 8107292:	681b      	ldr	r3, [r3, #0]
 8107294:	699a      	ldr	r2, [r3, #24]
 8107296:	68fb      	ldr	r3, [r7, #12]
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810729e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81072a0:	68fb      	ldr	r3, [r7, #12]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	6999      	ldr	r1, [r3, #24]
 81072a6:	68bb      	ldr	r3, [r7, #8]
 81072a8:	691b      	ldr	r3, [r3, #16]
 81072aa:	021a      	lsls	r2, r3, #8
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	430a      	orrs	r2, r1
 81072b2:	619a      	str	r2, [r3, #24]
      break;
 81072b4:	e082      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81072b6:	68fb      	ldr	r3, [r7, #12]
 81072b8:	681b      	ldr	r3, [r3, #0]
 81072ba:	68b9      	ldr	r1, [r7, #8]
 81072bc:	4618      	mov	r0, r3
 81072be:	f000 fa3b 	bl	8107738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81072c2:	68fb      	ldr	r3, [r7, #12]
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	69da      	ldr	r2, [r3, #28]
 81072c8:	68fb      	ldr	r3, [r7, #12]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	f042 0208 	orr.w	r2, r2, #8
 81072d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	69da      	ldr	r2, [r3, #28]
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	f022 0204 	bic.w	r2, r2, #4
 81072e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	69d9      	ldr	r1, [r3, #28]
 81072e8:	68bb      	ldr	r3, [r7, #8]
 81072ea:	691a      	ldr	r2, [r3, #16]
 81072ec:	68fb      	ldr	r3, [r7, #12]
 81072ee:	681b      	ldr	r3, [r3, #0]
 81072f0:	430a      	orrs	r2, r1
 81072f2:	61da      	str	r2, [r3, #28]
      break;
 81072f4:	e062      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81072f6:	68fb      	ldr	r3, [r7, #12]
 81072f8:	681b      	ldr	r3, [r3, #0]
 81072fa:	68b9      	ldr	r1, [r7, #8]
 81072fc:	4618      	mov	r0, r3
 81072fe:	f000 faa1 	bl	8107844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107302:	68fb      	ldr	r3, [r7, #12]
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	69da      	ldr	r2, [r3, #28]
 8107308:	68fb      	ldr	r3, [r7, #12]
 810730a:	681b      	ldr	r3, [r3, #0]
 810730c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	69da      	ldr	r2, [r3, #28]
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107322:	68fb      	ldr	r3, [r7, #12]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	69d9      	ldr	r1, [r3, #28]
 8107328:	68bb      	ldr	r3, [r7, #8]
 810732a:	691b      	ldr	r3, [r3, #16]
 810732c:	021a      	lsls	r2, r3, #8
 810732e:	68fb      	ldr	r3, [r7, #12]
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	430a      	orrs	r2, r1
 8107334:	61da      	str	r2, [r3, #28]
      break;
 8107336:	e041      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107338:	68fb      	ldr	r3, [r7, #12]
 810733a:	681b      	ldr	r3, [r3, #0]
 810733c:	68b9      	ldr	r1, [r7, #8]
 810733e:	4618      	mov	r0, r3
 8107340:	f000 fae8 	bl	8107914 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107344:	68fb      	ldr	r3, [r7, #12]
 8107346:	681b      	ldr	r3, [r3, #0]
 8107348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	681b      	ldr	r3, [r3, #0]
 810734e:	f042 0208 	orr.w	r2, r2, #8
 8107352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	f022 0204 	bic.w	r2, r2, #4
 8107362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107364:	68fb      	ldr	r3, [r7, #12]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810736a:	68bb      	ldr	r3, [r7, #8]
 810736c:	691a      	ldr	r2, [r3, #16]
 810736e:	68fb      	ldr	r3, [r7, #12]
 8107370:	681b      	ldr	r3, [r3, #0]
 8107372:	430a      	orrs	r2, r1
 8107374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107376:	e021      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107378:	68fb      	ldr	r3, [r7, #12]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	68b9      	ldr	r1, [r7, #8]
 810737e:	4618      	mov	r0, r3
 8107380:	f000 fb2a 	bl	81079d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81073a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	681b      	ldr	r3, [r3, #0]
 81073a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81073aa:	68bb      	ldr	r3, [r7, #8]
 81073ac:	691b      	ldr	r3, [r3, #16]
 81073ae:	021a      	lsls	r2, r3, #8
 81073b0:	68fb      	ldr	r3, [r7, #12]
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	430a      	orrs	r2, r1
 81073b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81073b8:	e000      	b.n	81073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 81073ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	2200      	movs	r2, #0
 81073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81073c4:	2300      	movs	r3, #0
}
 81073c6:	4618      	mov	r0, r3
 81073c8:	3710      	adds	r7, #16
 81073ca:	46bd      	mov	sp, r7
 81073cc:	bd80      	pop	{r7, pc}
 81073ce:	bf00      	nop

081073d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81073d0:	b480      	push	{r7}
 81073d2:	b085      	sub	sp, #20
 81073d4:	af00      	add	r7, sp, #0
 81073d6:	6078      	str	r0, [r7, #4]
 81073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81073da:	687b      	ldr	r3, [r7, #4]
 81073dc:	681b      	ldr	r3, [r3, #0]
 81073de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	4a40      	ldr	r2, [pc, #256]	; (81074e4 <TIM_Base_SetConfig+0x114>)
 81073e4:	4293      	cmp	r3, r2
 81073e6:	d013      	beq.n	8107410 <TIM_Base_SetConfig+0x40>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073ee:	d00f      	beq.n	8107410 <TIM_Base_SetConfig+0x40>
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	4a3d      	ldr	r2, [pc, #244]	; (81074e8 <TIM_Base_SetConfig+0x118>)
 81073f4:	4293      	cmp	r3, r2
 81073f6:	d00b      	beq.n	8107410 <TIM_Base_SetConfig+0x40>
 81073f8:	687b      	ldr	r3, [r7, #4]
 81073fa:	4a3c      	ldr	r2, [pc, #240]	; (81074ec <TIM_Base_SetConfig+0x11c>)
 81073fc:	4293      	cmp	r3, r2
 81073fe:	d007      	beq.n	8107410 <TIM_Base_SetConfig+0x40>
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	4a3b      	ldr	r2, [pc, #236]	; (81074f0 <TIM_Base_SetConfig+0x120>)
 8107404:	4293      	cmp	r3, r2
 8107406:	d003      	beq.n	8107410 <TIM_Base_SetConfig+0x40>
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	4a3a      	ldr	r2, [pc, #232]	; (81074f4 <TIM_Base_SetConfig+0x124>)
 810740c:	4293      	cmp	r3, r2
 810740e:	d108      	bne.n	8107422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107410:	68fb      	ldr	r3, [r7, #12]
 8107412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107418:	683b      	ldr	r3, [r7, #0]
 810741a:	685b      	ldr	r3, [r3, #4]
 810741c:	68fa      	ldr	r2, [r7, #12]
 810741e:	4313      	orrs	r3, r2
 8107420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	4a2f      	ldr	r2, [pc, #188]	; (81074e4 <TIM_Base_SetConfig+0x114>)
 8107426:	4293      	cmp	r3, r2
 8107428:	d01f      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107430:	d01b      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	4a2c      	ldr	r2, [pc, #176]	; (81074e8 <TIM_Base_SetConfig+0x118>)
 8107436:	4293      	cmp	r3, r2
 8107438:	d017      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 810743a:	687b      	ldr	r3, [r7, #4]
 810743c:	4a2b      	ldr	r2, [pc, #172]	; (81074ec <TIM_Base_SetConfig+0x11c>)
 810743e:	4293      	cmp	r3, r2
 8107440:	d013      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	4a2a      	ldr	r2, [pc, #168]	; (81074f0 <TIM_Base_SetConfig+0x120>)
 8107446:	4293      	cmp	r3, r2
 8107448:	d00f      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	4a29      	ldr	r2, [pc, #164]	; (81074f4 <TIM_Base_SetConfig+0x124>)
 810744e:	4293      	cmp	r3, r2
 8107450:	d00b      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	4a28      	ldr	r2, [pc, #160]	; (81074f8 <TIM_Base_SetConfig+0x128>)
 8107456:	4293      	cmp	r3, r2
 8107458:	d007      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	4a27      	ldr	r2, [pc, #156]	; (81074fc <TIM_Base_SetConfig+0x12c>)
 810745e:	4293      	cmp	r3, r2
 8107460:	d003      	beq.n	810746a <TIM_Base_SetConfig+0x9a>
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	4a26      	ldr	r2, [pc, #152]	; (8107500 <TIM_Base_SetConfig+0x130>)
 8107466:	4293      	cmp	r3, r2
 8107468:	d108      	bne.n	810747c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810746a:	68fb      	ldr	r3, [r7, #12]
 810746c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107472:	683b      	ldr	r3, [r7, #0]
 8107474:	68db      	ldr	r3, [r3, #12]
 8107476:	68fa      	ldr	r2, [r7, #12]
 8107478:	4313      	orrs	r3, r2
 810747a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107482:	683b      	ldr	r3, [r7, #0]
 8107484:	695b      	ldr	r3, [r3, #20]
 8107486:	4313      	orrs	r3, r2
 8107488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	68fa      	ldr	r2, [r7, #12]
 810748e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107490:	683b      	ldr	r3, [r7, #0]
 8107492:	689a      	ldr	r2, [r3, #8]
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107498:	683b      	ldr	r3, [r7, #0]
 810749a:	681a      	ldr	r2, [r3, #0]
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	4a10      	ldr	r2, [pc, #64]	; (81074e4 <TIM_Base_SetConfig+0x114>)
 81074a4:	4293      	cmp	r3, r2
 81074a6:	d00f      	beq.n	81074c8 <TIM_Base_SetConfig+0xf8>
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	4a12      	ldr	r2, [pc, #72]	; (81074f4 <TIM_Base_SetConfig+0x124>)
 81074ac:	4293      	cmp	r3, r2
 81074ae:	d00b      	beq.n	81074c8 <TIM_Base_SetConfig+0xf8>
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	4a11      	ldr	r2, [pc, #68]	; (81074f8 <TIM_Base_SetConfig+0x128>)
 81074b4:	4293      	cmp	r3, r2
 81074b6:	d007      	beq.n	81074c8 <TIM_Base_SetConfig+0xf8>
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	4a10      	ldr	r2, [pc, #64]	; (81074fc <TIM_Base_SetConfig+0x12c>)
 81074bc:	4293      	cmp	r3, r2
 81074be:	d003      	beq.n	81074c8 <TIM_Base_SetConfig+0xf8>
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	4a0f      	ldr	r2, [pc, #60]	; (8107500 <TIM_Base_SetConfig+0x130>)
 81074c4:	4293      	cmp	r3, r2
 81074c6:	d103      	bne.n	81074d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81074c8:	683b      	ldr	r3, [r7, #0]
 81074ca:	691a      	ldr	r2, [r3, #16]
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81074d0:	687b      	ldr	r3, [r7, #4]
 81074d2:	2201      	movs	r2, #1
 81074d4:	615a      	str	r2, [r3, #20]
}
 81074d6:	bf00      	nop
 81074d8:	3714      	adds	r7, #20
 81074da:	46bd      	mov	sp, r7
 81074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074e0:	4770      	bx	lr
 81074e2:	bf00      	nop
 81074e4:	40010000 	.word	0x40010000
 81074e8:	40000400 	.word	0x40000400
 81074ec:	40000800 	.word	0x40000800
 81074f0:	40000c00 	.word	0x40000c00
 81074f4:	40010400 	.word	0x40010400
 81074f8:	40014000 	.word	0x40014000
 81074fc:	40014400 	.word	0x40014400
 8107500:	40014800 	.word	0x40014800

08107504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107504:	b480      	push	{r7}
 8107506:	b087      	sub	sp, #28
 8107508:	af00      	add	r7, sp, #0
 810750a:	6078      	str	r0, [r7, #4]
 810750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	6a1b      	ldr	r3, [r3, #32]
 8107512:	f023 0201 	bic.w	r2, r3, #1
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	6a1b      	ldr	r3, [r3, #32]
 810751e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	685b      	ldr	r3, [r3, #4]
 8107524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107526:	687b      	ldr	r3, [r7, #4]
 8107528:	699b      	ldr	r3, [r3, #24]
 810752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810752c:	68fb      	ldr	r3, [r7, #12]
 810752e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107538:	68fb      	ldr	r3, [r7, #12]
 810753a:	f023 0303 	bic.w	r3, r3, #3
 810753e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107540:	683b      	ldr	r3, [r7, #0]
 8107542:	681b      	ldr	r3, [r3, #0]
 8107544:	68fa      	ldr	r2, [r7, #12]
 8107546:	4313      	orrs	r3, r2
 8107548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810754a:	697b      	ldr	r3, [r7, #20]
 810754c:	f023 0302 	bic.w	r3, r3, #2
 8107550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107552:	683b      	ldr	r3, [r7, #0]
 8107554:	689b      	ldr	r3, [r3, #8]
 8107556:	697a      	ldr	r2, [r7, #20]
 8107558:	4313      	orrs	r3, r2
 810755a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	4a2c      	ldr	r2, [pc, #176]	; (8107610 <TIM_OC1_SetConfig+0x10c>)
 8107560:	4293      	cmp	r3, r2
 8107562:	d00f      	beq.n	8107584 <TIM_OC1_SetConfig+0x80>
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	4a2b      	ldr	r2, [pc, #172]	; (8107614 <TIM_OC1_SetConfig+0x110>)
 8107568:	4293      	cmp	r3, r2
 810756a:	d00b      	beq.n	8107584 <TIM_OC1_SetConfig+0x80>
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	4a2a      	ldr	r2, [pc, #168]	; (8107618 <TIM_OC1_SetConfig+0x114>)
 8107570:	4293      	cmp	r3, r2
 8107572:	d007      	beq.n	8107584 <TIM_OC1_SetConfig+0x80>
 8107574:	687b      	ldr	r3, [r7, #4]
 8107576:	4a29      	ldr	r2, [pc, #164]	; (810761c <TIM_OC1_SetConfig+0x118>)
 8107578:	4293      	cmp	r3, r2
 810757a:	d003      	beq.n	8107584 <TIM_OC1_SetConfig+0x80>
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	4a28      	ldr	r2, [pc, #160]	; (8107620 <TIM_OC1_SetConfig+0x11c>)
 8107580:	4293      	cmp	r3, r2
 8107582:	d10c      	bne.n	810759e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107584:	697b      	ldr	r3, [r7, #20]
 8107586:	f023 0308 	bic.w	r3, r3, #8
 810758a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810758c:	683b      	ldr	r3, [r7, #0]
 810758e:	68db      	ldr	r3, [r3, #12]
 8107590:	697a      	ldr	r2, [r7, #20]
 8107592:	4313      	orrs	r3, r2
 8107594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107596:	697b      	ldr	r3, [r7, #20]
 8107598:	f023 0304 	bic.w	r3, r3, #4
 810759c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	4a1b      	ldr	r2, [pc, #108]	; (8107610 <TIM_OC1_SetConfig+0x10c>)
 81075a2:	4293      	cmp	r3, r2
 81075a4:	d00f      	beq.n	81075c6 <TIM_OC1_SetConfig+0xc2>
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	4a1a      	ldr	r2, [pc, #104]	; (8107614 <TIM_OC1_SetConfig+0x110>)
 81075aa:	4293      	cmp	r3, r2
 81075ac:	d00b      	beq.n	81075c6 <TIM_OC1_SetConfig+0xc2>
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	4a19      	ldr	r2, [pc, #100]	; (8107618 <TIM_OC1_SetConfig+0x114>)
 81075b2:	4293      	cmp	r3, r2
 81075b4:	d007      	beq.n	81075c6 <TIM_OC1_SetConfig+0xc2>
 81075b6:	687b      	ldr	r3, [r7, #4]
 81075b8:	4a18      	ldr	r2, [pc, #96]	; (810761c <TIM_OC1_SetConfig+0x118>)
 81075ba:	4293      	cmp	r3, r2
 81075bc:	d003      	beq.n	81075c6 <TIM_OC1_SetConfig+0xc2>
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	4a17      	ldr	r2, [pc, #92]	; (8107620 <TIM_OC1_SetConfig+0x11c>)
 81075c2:	4293      	cmp	r3, r2
 81075c4:	d111      	bne.n	81075ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81075c6:	693b      	ldr	r3, [r7, #16]
 81075c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81075cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81075ce:	693b      	ldr	r3, [r7, #16]
 81075d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81075d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81075d6:	683b      	ldr	r3, [r7, #0]
 81075d8:	695b      	ldr	r3, [r3, #20]
 81075da:	693a      	ldr	r2, [r7, #16]
 81075dc:	4313      	orrs	r3, r2
 81075de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81075e0:	683b      	ldr	r3, [r7, #0]
 81075e2:	699b      	ldr	r3, [r3, #24]
 81075e4:	693a      	ldr	r2, [r7, #16]
 81075e6:	4313      	orrs	r3, r2
 81075e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	693a      	ldr	r2, [r7, #16]
 81075ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	68fa      	ldr	r2, [r7, #12]
 81075f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81075f6:	683b      	ldr	r3, [r7, #0]
 81075f8:	685a      	ldr	r2, [r3, #4]
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81075fe:	687b      	ldr	r3, [r7, #4]
 8107600:	697a      	ldr	r2, [r7, #20]
 8107602:	621a      	str	r2, [r3, #32]
}
 8107604:	bf00      	nop
 8107606:	371c      	adds	r7, #28
 8107608:	46bd      	mov	sp, r7
 810760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810760e:	4770      	bx	lr
 8107610:	40010000 	.word	0x40010000
 8107614:	40010400 	.word	0x40010400
 8107618:	40014000 	.word	0x40014000
 810761c:	40014400 	.word	0x40014400
 8107620:	40014800 	.word	0x40014800

08107624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107624:	b480      	push	{r7}
 8107626:	b087      	sub	sp, #28
 8107628:	af00      	add	r7, sp, #0
 810762a:	6078      	str	r0, [r7, #4]
 810762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	6a1b      	ldr	r3, [r3, #32]
 8107632:	f023 0210 	bic.w	r2, r3, #16
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	6a1b      	ldr	r3, [r3, #32]
 810763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	685b      	ldr	r3, [r3, #4]
 8107644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	699b      	ldr	r3, [r3, #24]
 810764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810764c:	68fb      	ldr	r3, [r7, #12]
 810764e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810765e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107660:	683b      	ldr	r3, [r7, #0]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	021b      	lsls	r3, r3, #8
 8107666:	68fa      	ldr	r2, [r7, #12]
 8107668:	4313      	orrs	r3, r2
 810766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810766c:	697b      	ldr	r3, [r7, #20]
 810766e:	f023 0320 	bic.w	r3, r3, #32
 8107672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107674:	683b      	ldr	r3, [r7, #0]
 8107676:	689b      	ldr	r3, [r3, #8]
 8107678:	011b      	lsls	r3, r3, #4
 810767a:	697a      	ldr	r2, [r7, #20]
 810767c:	4313      	orrs	r3, r2
 810767e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107680:	687b      	ldr	r3, [r7, #4]
 8107682:	4a28      	ldr	r2, [pc, #160]	; (8107724 <TIM_OC2_SetConfig+0x100>)
 8107684:	4293      	cmp	r3, r2
 8107686:	d003      	beq.n	8107690 <TIM_OC2_SetConfig+0x6c>
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	4a27      	ldr	r2, [pc, #156]	; (8107728 <TIM_OC2_SetConfig+0x104>)
 810768c:	4293      	cmp	r3, r2
 810768e:	d10d      	bne.n	81076ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107690:	697b      	ldr	r3, [r7, #20]
 8107692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107698:	683b      	ldr	r3, [r7, #0]
 810769a:	68db      	ldr	r3, [r3, #12]
 810769c:	011b      	lsls	r3, r3, #4
 810769e:	697a      	ldr	r2, [r7, #20]
 81076a0:	4313      	orrs	r3, r2
 81076a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81076a4:	697b      	ldr	r3, [r7, #20]
 81076a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81076aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	4a1d      	ldr	r2, [pc, #116]	; (8107724 <TIM_OC2_SetConfig+0x100>)
 81076b0:	4293      	cmp	r3, r2
 81076b2:	d00f      	beq.n	81076d4 <TIM_OC2_SetConfig+0xb0>
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	4a1c      	ldr	r2, [pc, #112]	; (8107728 <TIM_OC2_SetConfig+0x104>)
 81076b8:	4293      	cmp	r3, r2
 81076ba:	d00b      	beq.n	81076d4 <TIM_OC2_SetConfig+0xb0>
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	4a1b      	ldr	r2, [pc, #108]	; (810772c <TIM_OC2_SetConfig+0x108>)
 81076c0:	4293      	cmp	r3, r2
 81076c2:	d007      	beq.n	81076d4 <TIM_OC2_SetConfig+0xb0>
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	4a1a      	ldr	r2, [pc, #104]	; (8107730 <TIM_OC2_SetConfig+0x10c>)
 81076c8:	4293      	cmp	r3, r2
 81076ca:	d003      	beq.n	81076d4 <TIM_OC2_SetConfig+0xb0>
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	4a19      	ldr	r2, [pc, #100]	; (8107734 <TIM_OC2_SetConfig+0x110>)
 81076d0:	4293      	cmp	r3, r2
 81076d2:	d113      	bne.n	81076fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81076d4:	693b      	ldr	r3, [r7, #16]
 81076d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81076da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81076dc:	693b      	ldr	r3, [r7, #16]
 81076de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81076e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81076e4:	683b      	ldr	r3, [r7, #0]
 81076e6:	695b      	ldr	r3, [r3, #20]
 81076e8:	009b      	lsls	r3, r3, #2
 81076ea:	693a      	ldr	r2, [r7, #16]
 81076ec:	4313      	orrs	r3, r2
 81076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81076f0:	683b      	ldr	r3, [r7, #0]
 81076f2:	699b      	ldr	r3, [r3, #24]
 81076f4:	009b      	lsls	r3, r3, #2
 81076f6:	693a      	ldr	r2, [r7, #16]
 81076f8:	4313      	orrs	r3, r2
 81076fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	693a      	ldr	r2, [r7, #16]
 8107700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107702:	687b      	ldr	r3, [r7, #4]
 8107704:	68fa      	ldr	r2, [r7, #12]
 8107706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107708:	683b      	ldr	r3, [r7, #0]
 810770a:	685a      	ldr	r2, [r3, #4]
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	697a      	ldr	r2, [r7, #20]
 8107714:	621a      	str	r2, [r3, #32]
}
 8107716:	bf00      	nop
 8107718:	371c      	adds	r7, #28
 810771a:	46bd      	mov	sp, r7
 810771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107720:	4770      	bx	lr
 8107722:	bf00      	nop
 8107724:	40010000 	.word	0x40010000
 8107728:	40010400 	.word	0x40010400
 810772c:	40014000 	.word	0x40014000
 8107730:	40014400 	.word	0x40014400
 8107734:	40014800 	.word	0x40014800

08107738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107738:	b480      	push	{r7}
 810773a:	b087      	sub	sp, #28
 810773c:	af00      	add	r7, sp, #0
 810773e:	6078      	str	r0, [r7, #4]
 8107740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	6a1b      	ldr	r3, [r3, #32]
 8107746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	6a1b      	ldr	r3, [r3, #32]
 8107752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107754:	687b      	ldr	r3, [r7, #4]
 8107756:	685b      	ldr	r3, [r3, #4]
 8107758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	69db      	ldr	r3, [r3, #28]
 810775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107760:	68fb      	ldr	r3, [r7, #12]
 8107762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107768:	68fb      	ldr	r3, [r7, #12]
 810776a:	f023 0303 	bic.w	r3, r3, #3
 810776e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107770:	683b      	ldr	r3, [r7, #0]
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	68fa      	ldr	r2, [r7, #12]
 8107776:	4313      	orrs	r3, r2
 8107778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810777a:	697b      	ldr	r3, [r7, #20]
 810777c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107782:	683b      	ldr	r3, [r7, #0]
 8107784:	689b      	ldr	r3, [r3, #8]
 8107786:	021b      	lsls	r3, r3, #8
 8107788:	697a      	ldr	r2, [r7, #20]
 810778a:	4313      	orrs	r3, r2
 810778c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810778e:	687b      	ldr	r3, [r7, #4]
 8107790:	4a27      	ldr	r2, [pc, #156]	; (8107830 <TIM_OC3_SetConfig+0xf8>)
 8107792:	4293      	cmp	r3, r2
 8107794:	d003      	beq.n	810779e <TIM_OC3_SetConfig+0x66>
 8107796:	687b      	ldr	r3, [r7, #4]
 8107798:	4a26      	ldr	r2, [pc, #152]	; (8107834 <TIM_OC3_SetConfig+0xfc>)
 810779a:	4293      	cmp	r3, r2
 810779c:	d10d      	bne.n	81077ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810779e:	697b      	ldr	r3, [r7, #20]
 81077a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81077a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81077a6:	683b      	ldr	r3, [r7, #0]
 81077a8:	68db      	ldr	r3, [r3, #12]
 81077aa:	021b      	lsls	r3, r3, #8
 81077ac:	697a      	ldr	r2, [r7, #20]
 81077ae:	4313      	orrs	r3, r2
 81077b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81077b2:	697b      	ldr	r3, [r7, #20]
 81077b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81077b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81077ba:	687b      	ldr	r3, [r7, #4]
 81077bc:	4a1c      	ldr	r2, [pc, #112]	; (8107830 <TIM_OC3_SetConfig+0xf8>)
 81077be:	4293      	cmp	r3, r2
 81077c0:	d00f      	beq.n	81077e2 <TIM_OC3_SetConfig+0xaa>
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	4a1b      	ldr	r2, [pc, #108]	; (8107834 <TIM_OC3_SetConfig+0xfc>)
 81077c6:	4293      	cmp	r3, r2
 81077c8:	d00b      	beq.n	81077e2 <TIM_OC3_SetConfig+0xaa>
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	4a1a      	ldr	r2, [pc, #104]	; (8107838 <TIM_OC3_SetConfig+0x100>)
 81077ce:	4293      	cmp	r3, r2
 81077d0:	d007      	beq.n	81077e2 <TIM_OC3_SetConfig+0xaa>
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	4a19      	ldr	r2, [pc, #100]	; (810783c <TIM_OC3_SetConfig+0x104>)
 81077d6:	4293      	cmp	r3, r2
 81077d8:	d003      	beq.n	81077e2 <TIM_OC3_SetConfig+0xaa>
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	4a18      	ldr	r2, [pc, #96]	; (8107840 <TIM_OC3_SetConfig+0x108>)
 81077de:	4293      	cmp	r3, r2
 81077e0:	d113      	bne.n	810780a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81077e2:	693b      	ldr	r3, [r7, #16]
 81077e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81077e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81077ea:	693b      	ldr	r3, [r7, #16]
 81077ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81077f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81077f2:	683b      	ldr	r3, [r7, #0]
 81077f4:	695b      	ldr	r3, [r3, #20]
 81077f6:	011b      	lsls	r3, r3, #4
 81077f8:	693a      	ldr	r2, [r7, #16]
 81077fa:	4313      	orrs	r3, r2
 81077fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81077fe:	683b      	ldr	r3, [r7, #0]
 8107800:	699b      	ldr	r3, [r3, #24]
 8107802:	011b      	lsls	r3, r3, #4
 8107804:	693a      	ldr	r2, [r7, #16]
 8107806:	4313      	orrs	r3, r2
 8107808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	693a      	ldr	r2, [r7, #16]
 810780e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	68fa      	ldr	r2, [r7, #12]
 8107814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107816:	683b      	ldr	r3, [r7, #0]
 8107818:	685a      	ldr	r2, [r3, #4]
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	697a      	ldr	r2, [r7, #20]
 8107822:	621a      	str	r2, [r3, #32]
}
 8107824:	bf00      	nop
 8107826:	371c      	adds	r7, #28
 8107828:	46bd      	mov	sp, r7
 810782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810782e:	4770      	bx	lr
 8107830:	40010000 	.word	0x40010000
 8107834:	40010400 	.word	0x40010400
 8107838:	40014000 	.word	0x40014000
 810783c:	40014400 	.word	0x40014400
 8107840:	40014800 	.word	0x40014800

08107844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107844:	b480      	push	{r7}
 8107846:	b087      	sub	sp, #28
 8107848:	af00      	add	r7, sp, #0
 810784a:	6078      	str	r0, [r7, #4]
 810784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	6a1b      	ldr	r3, [r3, #32]
 8107852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107856:	687b      	ldr	r3, [r7, #4]
 8107858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810785a:	687b      	ldr	r3, [r7, #4]
 810785c:	6a1b      	ldr	r3, [r3, #32]
 810785e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	685b      	ldr	r3, [r3, #4]
 8107864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107866:	687b      	ldr	r3, [r7, #4]
 8107868:	69db      	ldr	r3, [r3, #28]
 810786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107874:	68fb      	ldr	r3, [r7, #12]
 8107876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810787a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810787c:	683b      	ldr	r3, [r7, #0]
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	021b      	lsls	r3, r3, #8
 8107882:	68fa      	ldr	r2, [r7, #12]
 8107884:	4313      	orrs	r3, r2
 8107886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107888:	693b      	ldr	r3, [r7, #16]
 810788a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810788e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107890:	683b      	ldr	r3, [r7, #0]
 8107892:	689b      	ldr	r3, [r3, #8]
 8107894:	031b      	lsls	r3, r3, #12
 8107896:	693a      	ldr	r2, [r7, #16]
 8107898:	4313      	orrs	r3, r2
 810789a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810789c:	687b      	ldr	r3, [r7, #4]
 810789e:	4a18      	ldr	r2, [pc, #96]	; (8107900 <TIM_OC4_SetConfig+0xbc>)
 81078a0:	4293      	cmp	r3, r2
 81078a2:	d00f      	beq.n	81078c4 <TIM_OC4_SetConfig+0x80>
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	4a17      	ldr	r2, [pc, #92]	; (8107904 <TIM_OC4_SetConfig+0xc0>)
 81078a8:	4293      	cmp	r3, r2
 81078aa:	d00b      	beq.n	81078c4 <TIM_OC4_SetConfig+0x80>
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	4a16      	ldr	r2, [pc, #88]	; (8107908 <TIM_OC4_SetConfig+0xc4>)
 81078b0:	4293      	cmp	r3, r2
 81078b2:	d007      	beq.n	81078c4 <TIM_OC4_SetConfig+0x80>
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	4a15      	ldr	r2, [pc, #84]	; (810790c <TIM_OC4_SetConfig+0xc8>)
 81078b8:	4293      	cmp	r3, r2
 81078ba:	d003      	beq.n	81078c4 <TIM_OC4_SetConfig+0x80>
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	4a14      	ldr	r2, [pc, #80]	; (8107910 <TIM_OC4_SetConfig+0xcc>)
 81078c0:	4293      	cmp	r3, r2
 81078c2:	d109      	bne.n	81078d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81078c4:	697b      	ldr	r3, [r7, #20]
 81078c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81078ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81078cc:	683b      	ldr	r3, [r7, #0]
 81078ce:	695b      	ldr	r3, [r3, #20]
 81078d0:	019b      	lsls	r3, r3, #6
 81078d2:	697a      	ldr	r2, [r7, #20]
 81078d4:	4313      	orrs	r3, r2
 81078d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	697a      	ldr	r2, [r7, #20]
 81078dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	68fa      	ldr	r2, [r7, #12]
 81078e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81078e4:	683b      	ldr	r3, [r7, #0]
 81078e6:	685a      	ldr	r2, [r3, #4]
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	693a      	ldr	r2, [r7, #16]
 81078f0:	621a      	str	r2, [r3, #32]
}
 81078f2:	bf00      	nop
 81078f4:	371c      	adds	r7, #28
 81078f6:	46bd      	mov	sp, r7
 81078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078fc:	4770      	bx	lr
 81078fe:	bf00      	nop
 8107900:	40010000 	.word	0x40010000
 8107904:	40010400 	.word	0x40010400
 8107908:	40014000 	.word	0x40014000
 810790c:	40014400 	.word	0x40014400
 8107910:	40014800 	.word	0x40014800

08107914 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107914:	b480      	push	{r7}
 8107916:	b087      	sub	sp, #28
 8107918:	af00      	add	r7, sp, #0
 810791a:	6078      	str	r0, [r7, #4]
 810791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	6a1b      	ldr	r3, [r3, #32]
 8107922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	6a1b      	ldr	r3, [r3, #32]
 810792e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	685b      	ldr	r3, [r3, #4]
 8107934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810793c:	68fb      	ldr	r3, [r7, #12]
 810793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107944:	683b      	ldr	r3, [r7, #0]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	68fa      	ldr	r2, [r7, #12]
 810794a:	4313      	orrs	r3, r2
 810794c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810794e:	693b      	ldr	r3, [r7, #16]
 8107950:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107954:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107956:	683b      	ldr	r3, [r7, #0]
 8107958:	689b      	ldr	r3, [r3, #8]
 810795a:	041b      	lsls	r3, r3, #16
 810795c:	693a      	ldr	r2, [r7, #16]
 810795e:	4313      	orrs	r3, r2
 8107960:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	4a17      	ldr	r2, [pc, #92]	; (81079c4 <TIM_OC5_SetConfig+0xb0>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d00f      	beq.n	810798a <TIM_OC5_SetConfig+0x76>
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	4a16      	ldr	r2, [pc, #88]	; (81079c8 <TIM_OC5_SetConfig+0xb4>)
 810796e:	4293      	cmp	r3, r2
 8107970:	d00b      	beq.n	810798a <TIM_OC5_SetConfig+0x76>
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	4a15      	ldr	r2, [pc, #84]	; (81079cc <TIM_OC5_SetConfig+0xb8>)
 8107976:	4293      	cmp	r3, r2
 8107978:	d007      	beq.n	810798a <TIM_OC5_SetConfig+0x76>
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	4a14      	ldr	r2, [pc, #80]	; (81079d0 <TIM_OC5_SetConfig+0xbc>)
 810797e:	4293      	cmp	r3, r2
 8107980:	d003      	beq.n	810798a <TIM_OC5_SetConfig+0x76>
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	4a13      	ldr	r2, [pc, #76]	; (81079d4 <TIM_OC5_SetConfig+0xc0>)
 8107986:	4293      	cmp	r3, r2
 8107988:	d109      	bne.n	810799e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810798a:	697b      	ldr	r3, [r7, #20]
 810798c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107992:	683b      	ldr	r3, [r7, #0]
 8107994:	695b      	ldr	r3, [r3, #20]
 8107996:	021b      	lsls	r3, r3, #8
 8107998:	697a      	ldr	r2, [r7, #20]
 810799a:	4313      	orrs	r3, r2
 810799c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	697a      	ldr	r2, [r7, #20]
 81079a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	68fa      	ldr	r2, [r7, #12]
 81079a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81079aa:	683b      	ldr	r3, [r7, #0]
 81079ac:	685a      	ldr	r2, [r3, #4]
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81079b2:	687b      	ldr	r3, [r7, #4]
 81079b4:	693a      	ldr	r2, [r7, #16]
 81079b6:	621a      	str	r2, [r3, #32]
}
 81079b8:	bf00      	nop
 81079ba:	371c      	adds	r7, #28
 81079bc:	46bd      	mov	sp, r7
 81079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079c2:	4770      	bx	lr
 81079c4:	40010000 	.word	0x40010000
 81079c8:	40010400 	.word	0x40010400
 81079cc:	40014000 	.word	0x40014000
 81079d0:	40014400 	.word	0x40014400
 81079d4:	40014800 	.word	0x40014800

081079d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81079d8:	b480      	push	{r7}
 81079da:	b087      	sub	sp, #28
 81079dc:	af00      	add	r7, sp, #0
 81079de:	6078      	str	r0, [r7, #4]
 81079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	6a1b      	ldr	r3, [r3, #32]
 81079e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	6a1b      	ldr	r3, [r3, #32]
 81079f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81079f4:	687b      	ldr	r3, [r7, #4]
 81079f6:	685b      	ldr	r3, [r3, #4]
 81079f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81079fa:	687b      	ldr	r3, [r7, #4]
 81079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107a00:	68fb      	ldr	r3, [r7, #12]
 8107a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107a08:	683b      	ldr	r3, [r7, #0]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	021b      	lsls	r3, r3, #8
 8107a0e:	68fa      	ldr	r2, [r7, #12]
 8107a10:	4313      	orrs	r3, r2
 8107a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107a14:	693b      	ldr	r3, [r7, #16]
 8107a16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107a1c:	683b      	ldr	r3, [r7, #0]
 8107a1e:	689b      	ldr	r3, [r3, #8]
 8107a20:	051b      	lsls	r3, r3, #20
 8107a22:	693a      	ldr	r2, [r7, #16]
 8107a24:	4313      	orrs	r3, r2
 8107a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	4a18      	ldr	r2, [pc, #96]	; (8107a8c <TIM_OC6_SetConfig+0xb4>)
 8107a2c:	4293      	cmp	r3, r2
 8107a2e:	d00f      	beq.n	8107a50 <TIM_OC6_SetConfig+0x78>
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	4a17      	ldr	r2, [pc, #92]	; (8107a90 <TIM_OC6_SetConfig+0xb8>)
 8107a34:	4293      	cmp	r3, r2
 8107a36:	d00b      	beq.n	8107a50 <TIM_OC6_SetConfig+0x78>
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	4a16      	ldr	r2, [pc, #88]	; (8107a94 <TIM_OC6_SetConfig+0xbc>)
 8107a3c:	4293      	cmp	r3, r2
 8107a3e:	d007      	beq.n	8107a50 <TIM_OC6_SetConfig+0x78>
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	4a15      	ldr	r2, [pc, #84]	; (8107a98 <TIM_OC6_SetConfig+0xc0>)
 8107a44:	4293      	cmp	r3, r2
 8107a46:	d003      	beq.n	8107a50 <TIM_OC6_SetConfig+0x78>
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	4a14      	ldr	r2, [pc, #80]	; (8107a9c <TIM_OC6_SetConfig+0xc4>)
 8107a4c:	4293      	cmp	r3, r2
 8107a4e:	d109      	bne.n	8107a64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107a50:	697b      	ldr	r3, [r7, #20]
 8107a52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107a58:	683b      	ldr	r3, [r7, #0]
 8107a5a:	695b      	ldr	r3, [r3, #20]
 8107a5c:	029b      	lsls	r3, r3, #10
 8107a5e:	697a      	ldr	r2, [r7, #20]
 8107a60:	4313      	orrs	r3, r2
 8107a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	697a      	ldr	r2, [r7, #20]
 8107a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	68fa      	ldr	r2, [r7, #12]
 8107a6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107a70:	683b      	ldr	r3, [r7, #0]
 8107a72:	685a      	ldr	r2, [r3, #4]
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	693a      	ldr	r2, [r7, #16]
 8107a7c:	621a      	str	r2, [r3, #32]
}
 8107a7e:	bf00      	nop
 8107a80:	371c      	adds	r7, #28
 8107a82:	46bd      	mov	sp, r7
 8107a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a88:	4770      	bx	lr
 8107a8a:	bf00      	nop
 8107a8c:	40010000 	.word	0x40010000
 8107a90:	40010400 	.word	0x40010400
 8107a94:	40014000 	.word	0x40014000
 8107a98:	40014400 	.word	0x40014400
 8107a9c:	40014800 	.word	0x40014800

08107aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107aa0:	b480      	push	{r7}
 8107aa2:	b087      	sub	sp, #28
 8107aa4:	af00      	add	r7, sp, #0
 8107aa6:	60f8      	str	r0, [r7, #12]
 8107aa8:	60b9      	str	r1, [r7, #8]
 8107aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107aac:	68bb      	ldr	r3, [r7, #8]
 8107aae:	f003 031f 	and.w	r3, r3, #31
 8107ab2:	2201      	movs	r2, #1
 8107ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8107ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107aba:	68fb      	ldr	r3, [r7, #12]
 8107abc:	6a1a      	ldr	r2, [r3, #32]
 8107abe:	697b      	ldr	r3, [r7, #20]
 8107ac0:	43db      	mvns	r3, r3
 8107ac2:	401a      	ands	r2, r3
 8107ac4:	68fb      	ldr	r3, [r7, #12]
 8107ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107ac8:	68fb      	ldr	r3, [r7, #12]
 8107aca:	6a1a      	ldr	r2, [r3, #32]
 8107acc:	68bb      	ldr	r3, [r7, #8]
 8107ace:	f003 031f 	and.w	r3, r3, #31
 8107ad2:	6879      	ldr	r1, [r7, #4]
 8107ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8107ad8:	431a      	orrs	r2, r3
 8107ada:	68fb      	ldr	r3, [r7, #12]
 8107adc:	621a      	str	r2, [r3, #32]
}
 8107ade:	bf00      	nop
 8107ae0:	371c      	adds	r7, #28
 8107ae2:	46bd      	mov	sp, r7
 8107ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ae8:	4770      	bx	lr
	...

08107aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107aec:	b480      	push	{r7}
 8107aee:	b085      	sub	sp, #20
 8107af0:	af00      	add	r7, sp, #0
 8107af2:	6078      	str	r0, [r7, #4]
 8107af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107afc:	2b01      	cmp	r3, #1
 8107afe:	d101      	bne.n	8107b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107b00:	2302      	movs	r3, #2
 8107b02:	e068      	b.n	8107bd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	2201      	movs	r2, #1
 8107b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	2202      	movs	r2, #2
 8107b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	681b      	ldr	r3, [r3, #0]
 8107b18:	685b      	ldr	r3, [r3, #4]
 8107b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	681b      	ldr	r3, [r3, #0]
 8107b20:	689b      	ldr	r3, [r3, #8]
 8107b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	681b      	ldr	r3, [r3, #0]
 8107b28:	4a2e      	ldr	r2, [pc, #184]	; (8107be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b2a:	4293      	cmp	r3, r2
 8107b2c:	d004      	beq.n	8107b38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	4a2d      	ldr	r2, [pc, #180]	; (8107be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b34:	4293      	cmp	r3, r2
 8107b36:	d108      	bne.n	8107b4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107b38:	68fb      	ldr	r3, [r7, #12]
 8107b3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107b3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107b40:	683b      	ldr	r3, [r7, #0]
 8107b42:	685b      	ldr	r3, [r3, #4]
 8107b44:	68fa      	ldr	r2, [r7, #12]
 8107b46:	4313      	orrs	r3, r2
 8107b48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107b4a:	68fb      	ldr	r3, [r7, #12]
 8107b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107b52:	683b      	ldr	r3, [r7, #0]
 8107b54:	681b      	ldr	r3, [r3, #0]
 8107b56:	68fa      	ldr	r2, [r7, #12]
 8107b58:	4313      	orrs	r3, r2
 8107b5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	68fa      	ldr	r2, [r7, #12]
 8107b62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107b64:	687b      	ldr	r3, [r7, #4]
 8107b66:	681b      	ldr	r3, [r3, #0]
 8107b68:	4a1e      	ldr	r2, [pc, #120]	; (8107be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b6a:	4293      	cmp	r3, r2
 8107b6c:	d01d      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b6e:	687b      	ldr	r3, [r7, #4]
 8107b70:	681b      	ldr	r3, [r3, #0]
 8107b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b76:	d018      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	681b      	ldr	r3, [r3, #0]
 8107b7c:	4a1b      	ldr	r2, [pc, #108]	; (8107bec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107b7e:	4293      	cmp	r3, r2
 8107b80:	d013      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	4a1a      	ldr	r2, [pc, #104]	; (8107bf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107b88:	4293      	cmp	r3, r2
 8107b8a:	d00e      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b8c:	687b      	ldr	r3, [r7, #4]
 8107b8e:	681b      	ldr	r3, [r3, #0]
 8107b90:	4a18      	ldr	r2, [pc, #96]	; (8107bf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107b92:	4293      	cmp	r3, r2
 8107b94:	d009      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	681b      	ldr	r3, [r3, #0]
 8107b9a:	4a13      	ldr	r2, [pc, #76]	; (8107be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b9c:	4293      	cmp	r3, r2
 8107b9e:	d004      	beq.n	8107baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	4a14      	ldr	r2, [pc, #80]	; (8107bf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107ba6:	4293      	cmp	r3, r2
 8107ba8:	d10c      	bne.n	8107bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107baa:	68bb      	ldr	r3, [r7, #8]
 8107bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107bb2:	683b      	ldr	r3, [r7, #0]
 8107bb4:	689b      	ldr	r3, [r3, #8]
 8107bb6:	68ba      	ldr	r2, [r7, #8]
 8107bb8:	4313      	orrs	r3, r2
 8107bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	68ba      	ldr	r2, [r7, #8]
 8107bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	2201      	movs	r2, #1
 8107bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	2200      	movs	r2, #0
 8107bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107bd4:	2300      	movs	r3, #0
}
 8107bd6:	4618      	mov	r0, r3
 8107bd8:	3714      	adds	r7, #20
 8107bda:	46bd      	mov	sp, r7
 8107bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107be0:	4770      	bx	lr
 8107be2:	bf00      	nop
 8107be4:	40010000 	.word	0x40010000
 8107be8:	40010400 	.word	0x40010400
 8107bec:	40000400 	.word	0x40000400
 8107bf0:	40000800 	.word	0x40000800
 8107bf4:	40000c00 	.word	0x40000c00
 8107bf8:	40001800 	.word	0x40001800

08107bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107bfc:	b480      	push	{r7}
 8107bfe:	b085      	sub	sp, #20
 8107c00:	af00      	add	r7, sp, #0
 8107c02:	6078      	str	r0, [r7, #4]
 8107c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107c06:	2300      	movs	r3, #0
 8107c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107c10:	2b01      	cmp	r3, #1
 8107c12:	d101      	bne.n	8107c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107c14:	2302      	movs	r3, #2
 8107c16:	e065      	b.n	8107ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	2201      	movs	r2, #1
 8107c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107c20:	68fb      	ldr	r3, [r7, #12]
 8107c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107c26:	683b      	ldr	r3, [r7, #0]
 8107c28:	68db      	ldr	r3, [r3, #12]
 8107c2a:	4313      	orrs	r3, r2
 8107c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107c2e:	68fb      	ldr	r3, [r7, #12]
 8107c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107c34:	683b      	ldr	r3, [r7, #0]
 8107c36:	689b      	ldr	r3, [r3, #8]
 8107c38:	4313      	orrs	r3, r2
 8107c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107c3c:	68fb      	ldr	r3, [r7, #12]
 8107c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107c42:	683b      	ldr	r3, [r7, #0]
 8107c44:	685b      	ldr	r3, [r3, #4]
 8107c46:	4313      	orrs	r3, r2
 8107c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107c4a:	68fb      	ldr	r3, [r7, #12]
 8107c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107c50:	683b      	ldr	r3, [r7, #0]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	4313      	orrs	r3, r2
 8107c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107c58:	68fb      	ldr	r3, [r7, #12]
 8107c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107c5e:	683b      	ldr	r3, [r7, #0]
 8107c60:	691b      	ldr	r3, [r3, #16]
 8107c62:	4313      	orrs	r3, r2
 8107c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107c66:	68fb      	ldr	r3, [r7, #12]
 8107c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107c6c:	683b      	ldr	r3, [r7, #0]
 8107c6e:	695b      	ldr	r3, [r3, #20]
 8107c70:	4313      	orrs	r3, r2
 8107c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107c7a:	683b      	ldr	r3, [r7, #0]
 8107c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c7e:	4313      	orrs	r3, r2
 8107c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107c82:	68fb      	ldr	r3, [r7, #12]
 8107c84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107c88:	683b      	ldr	r3, [r7, #0]
 8107c8a:	699b      	ldr	r3, [r3, #24]
 8107c8c:	041b      	lsls	r3, r3, #16
 8107c8e:	4313      	orrs	r3, r2
 8107c90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	4a16      	ldr	r2, [pc, #88]	; (8107cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107c98:	4293      	cmp	r3, r2
 8107c9a:	d004      	beq.n	8107ca6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	4a14      	ldr	r2, [pc, #80]	; (8107cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107ca2:	4293      	cmp	r3, r2
 8107ca4:	d115      	bne.n	8107cd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107cac:	683b      	ldr	r3, [r7, #0]
 8107cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107cb0:	051b      	lsls	r3, r3, #20
 8107cb2:	4313      	orrs	r3, r2
 8107cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107cb6:	68fb      	ldr	r3, [r7, #12]
 8107cb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107cbc:	683b      	ldr	r3, [r7, #0]
 8107cbe:	69db      	ldr	r3, [r3, #28]
 8107cc0:	4313      	orrs	r3, r2
 8107cc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107cc4:	68fb      	ldr	r3, [r7, #12]
 8107cc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107cca:	683b      	ldr	r3, [r7, #0]
 8107ccc:	6a1b      	ldr	r3, [r3, #32]
 8107cce:	4313      	orrs	r3, r2
 8107cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	681b      	ldr	r3, [r3, #0]
 8107cd6:	68fa      	ldr	r2, [r7, #12]
 8107cd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	2200      	movs	r2, #0
 8107cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107ce2:	2300      	movs	r3, #0
}
 8107ce4:	4618      	mov	r0, r3
 8107ce6:	3714      	adds	r7, #20
 8107ce8:	46bd      	mov	sp, r7
 8107cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cee:	4770      	bx	lr
 8107cf0:	40010000 	.word	0x40010000
 8107cf4:	40010400 	.word	0x40010400

08107cf8 <__errno>:
 8107cf8:	4b01      	ldr	r3, [pc, #4]	; (8107d00 <__errno+0x8>)
 8107cfa:	6818      	ldr	r0, [r3, #0]
 8107cfc:	4770      	bx	lr
 8107cfe:	bf00      	nop
 8107d00:	10000010 	.word	0x10000010

08107d04 <__libc_init_array>:
 8107d04:	b570      	push	{r4, r5, r6, lr}
 8107d06:	4d0d      	ldr	r5, [pc, #52]	; (8107d3c <__libc_init_array+0x38>)
 8107d08:	4c0d      	ldr	r4, [pc, #52]	; (8107d40 <__libc_init_array+0x3c>)
 8107d0a:	1b64      	subs	r4, r4, r5
 8107d0c:	10a4      	asrs	r4, r4, #2
 8107d0e:	2600      	movs	r6, #0
 8107d10:	42a6      	cmp	r6, r4
 8107d12:	d109      	bne.n	8107d28 <__libc_init_array+0x24>
 8107d14:	4d0b      	ldr	r5, [pc, #44]	; (8107d44 <__libc_init_array+0x40>)
 8107d16:	4c0c      	ldr	r4, [pc, #48]	; (8107d48 <__libc_init_array+0x44>)
 8107d18:	f002 fd38 	bl	810a78c <_init>
 8107d1c:	1b64      	subs	r4, r4, r5
 8107d1e:	10a4      	asrs	r4, r4, #2
 8107d20:	2600      	movs	r6, #0
 8107d22:	42a6      	cmp	r6, r4
 8107d24:	d105      	bne.n	8107d32 <__libc_init_array+0x2e>
 8107d26:	bd70      	pop	{r4, r5, r6, pc}
 8107d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d2c:	4798      	blx	r3
 8107d2e:	3601      	adds	r6, #1
 8107d30:	e7ee      	b.n	8107d10 <__libc_init_array+0xc>
 8107d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d36:	4798      	blx	r3
 8107d38:	3601      	adds	r6, #1
 8107d3a:	e7f2      	b.n	8107d22 <__libc_init_array+0x1e>
 8107d3c:	0810ab94 	.word	0x0810ab94
 8107d40:	0810ab94 	.word	0x0810ab94
 8107d44:	0810ab94 	.word	0x0810ab94
 8107d48:	0810ab98 	.word	0x0810ab98

08107d4c <memcpy>:
 8107d4c:	440a      	add	r2, r1
 8107d4e:	4291      	cmp	r1, r2
 8107d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8107d54:	d100      	bne.n	8107d58 <memcpy+0xc>
 8107d56:	4770      	bx	lr
 8107d58:	b510      	push	{r4, lr}
 8107d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107d62:	4291      	cmp	r1, r2
 8107d64:	d1f9      	bne.n	8107d5a <memcpy+0xe>
 8107d66:	bd10      	pop	{r4, pc}

08107d68 <memset>:
 8107d68:	4402      	add	r2, r0
 8107d6a:	4603      	mov	r3, r0
 8107d6c:	4293      	cmp	r3, r2
 8107d6e:	d100      	bne.n	8107d72 <memset+0xa>
 8107d70:	4770      	bx	lr
 8107d72:	f803 1b01 	strb.w	r1, [r3], #1
 8107d76:	e7f9      	b.n	8107d6c <memset+0x4>

08107d78 <__cvt>:
 8107d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107d7c:	ec55 4b10 	vmov	r4, r5, d0
 8107d80:	2d00      	cmp	r5, #0
 8107d82:	460e      	mov	r6, r1
 8107d84:	4619      	mov	r1, r3
 8107d86:	462b      	mov	r3, r5
 8107d88:	bfbb      	ittet	lt
 8107d8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107d8e:	461d      	movlt	r5, r3
 8107d90:	2300      	movge	r3, #0
 8107d92:	232d      	movlt	r3, #45	; 0x2d
 8107d94:	700b      	strb	r3, [r1, #0]
 8107d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107d98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107d9c:	4691      	mov	r9, r2
 8107d9e:	f023 0820 	bic.w	r8, r3, #32
 8107da2:	bfbc      	itt	lt
 8107da4:	4622      	movlt	r2, r4
 8107da6:	4614      	movlt	r4, r2
 8107da8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107dac:	d005      	beq.n	8107dba <__cvt+0x42>
 8107dae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107db2:	d100      	bne.n	8107db6 <__cvt+0x3e>
 8107db4:	3601      	adds	r6, #1
 8107db6:	2102      	movs	r1, #2
 8107db8:	e000      	b.n	8107dbc <__cvt+0x44>
 8107dba:	2103      	movs	r1, #3
 8107dbc:	ab03      	add	r3, sp, #12
 8107dbe:	9301      	str	r3, [sp, #4]
 8107dc0:	ab02      	add	r3, sp, #8
 8107dc2:	9300      	str	r3, [sp, #0]
 8107dc4:	ec45 4b10 	vmov	d0, r4, r5
 8107dc8:	4653      	mov	r3, sl
 8107dca:	4632      	mov	r2, r6
 8107dcc:	f000 fccc 	bl	8108768 <_dtoa_r>
 8107dd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107dd4:	4607      	mov	r7, r0
 8107dd6:	d102      	bne.n	8107dde <__cvt+0x66>
 8107dd8:	f019 0f01 	tst.w	r9, #1
 8107ddc:	d022      	beq.n	8107e24 <__cvt+0xac>
 8107dde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107de2:	eb07 0906 	add.w	r9, r7, r6
 8107de6:	d110      	bne.n	8107e0a <__cvt+0x92>
 8107de8:	783b      	ldrb	r3, [r7, #0]
 8107dea:	2b30      	cmp	r3, #48	; 0x30
 8107dec:	d10a      	bne.n	8107e04 <__cvt+0x8c>
 8107dee:	2200      	movs	r2, #0
 8107df0:	2300      	movs	r3, #0
 8107df2:	4620      	mov	r0, r4
 8107df4:	4629      	mov	r1, r5
 8107df6:	f7f8 feef 	bl	8100bd8 <__aeabi_dcmpeq>
 8107dfa:	b918      	cbnz	r0, 8107e04 <__cvt+0x8c>
 8107dfc:	f1c6 0601 	rsb	r6, r6, #1
 8107e00:	f8ca 6000 	str.w	r6, [sl]
 8107e04:	f8da 3000 	ldr.w	r3, [sl]
 8107e08:	4499      	add	r9, r3
 8107e0a:	2200      	movs	r2, #0
 8107e0c:	2300      	movs	r3, #0
 8107e0e:	4620      	mov	r0, r4
 8107e10:	4629      	mov	r1, r5
 8107e12:	f7f8 fee1 	bl	8100bd8 <__aeabi_dcmpeq>
 8107e16:	b108      	cbz	r0, 8107e1c <__cvt+0xa4>
 8107e18:	f8cd 900c 	str.w	r9, [sp, #12]
 8107e1c:	2230      	movs	r2, #48	; 0x30
 8107e1e:	9b03      	ldr	r3, [sp, #12]
 8107e20:	454b      	cmp	r3, r9
 8107e22:	d307      	bcc.n	8107e34 <__cvt+0xbc>
 8107e24:	9b03      	ldr	r3, [sp, #12]
 8107e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107e28:	1bdb      	subs	r3, r3, r7
 8107e2a:	4638      	mov	r0, r7
 8107e2c:	6013      	str	r3, [r2, #0]
 8107e2e:	b004      	add	sp, #16
 8107e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107e34:	1c59      	adds	r1, r3, #1
 8107e36:	9103      	str	r1, [sp, #12]
 8107e38:	701a      	strb	r2, [r3, #0]
 8107e3a:	e7f0      	b.n	8107e1e <__cvt+0xa6>

08107e3c <__exponent>:
 8107e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107e3e:	4603      	mov	r3, r0
 8107e40:	2900      	cmp	r1, #0
 8107e42:	bfb8      	it	lt
 8107e44:	4249      	neglt	r1, r1
 8107e46:	f803 2b02 	strb.w	r2, [r3], #2
 8107e4a:	bfb4      	ite	lt
 8107e4c:	222d      	movlt	r2, #45	; 0x2d
 8107e4e:	222b      	movge	r2, #43	; 0x2b
 8107e50:	2909      	cmp	r1, #9
 8107e52:	7042      	strb	r2, [r0, #1]
 8107e54:	dd2a      	ble.n	8107eac <__exponent+0x70>
 8107e56:	f10d 0407 	add.w	r4, sp, #7
 8107e5a:	46a4      	mov	ip, r4
 8107e5c:	270a      	movs	r7, #10
 8107e5e:	46a6      	mov	lr, r4
 8107e60:	460a      	mov	r2, r1
 8107e62:	fb91 f6f7 	sdiv	r6, r1, r7
 8107e66:	fb07 1516 	mls	r5, r7, r6, r1
 8107e6a:	3530      	adds	r5, #48	; 0x30
 8107e6c:	2a63      	cmp	r2, #99	; 0x63
 8107e6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8107e72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107e76:	4631      	mov	r1, r6
 8107e78:	dcf1      	bgt.n	8107e5e <__exponent+0x22>
 8107e7a:	3130      	adds	r1, #48	; 0x30
 8107e7c:	f1ae 0502 	sub.w	r5, lr, #2
 8107e80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107e84:	1c44      	adds	r4, r0, #1
 8107e86:	4629      	mov	r1, r5
 8107e88:	4561      	cmp	r1, ip
 8107e8a:	d30a      	bcc.n	8107ea2 <__exponent+0x66>
 8107e8c:	f10d 0209 	add.w	r2, sp, #9
 8107e90:	eba2 020e 	sub.w	r2, r2, lr
 8107e94:	4565      	cmp	r5, ip
 8107e96:	bf88      	it	hi
 8107e98:	2200      	movhi	r2, #0
 8107e9a:	4413      	add	r3, r2
 8107e9c:	1a18      	subs	r0, r3, r0
 8107e9e:	b003      	add	sp, #12
 8107ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107ea6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107eaa:	e7ed      	b.n	8107e88 <__exponent+0x4c>
 8107eac:	2330      	movs	r3, #48	; 0x30
 8107eae:	3130      	adds	r1, #48	; 0x30
 8107eb0:	7083      	strb	r3, [r0, #2]
 8107eb2:	70c1      	strb	r1, [r0, #3]
 8107eb4:	1d03      	adds	r3, r0, #4
 8107eb6:	e7f1      	b.n	8107e9c <__exponent+0x60>

08107eb8 <_printf_float>:
 8107eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107ebc:	ed2d 8b02 	vpush	{d8}
 8107ec0:	b08d      	sub	sp, #52	; 0x34
 8107ec2:	460c      	mov	r4, r1
 8107ec4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107ec8:	4616      	mov	r6, r2
 8107eca:	461f      	mov	r7, r3
 8107ecc:	4605      	mov	r5, r0
 8107ece:	f001 fa39 	bl	8109344 <_localeconv_r>
 8107ed2:	f8d0 a000 	ldr.w	sl, [r0]
 8107ed6:	4650      	mov	r0, sl
 8107ed8:	f7f8 fa02 	bl	81002e0 <strlen>
 8107edc:	2300      	movs	r3, #0
 8107ede:	930a      	str	r3, [sp, #40]	; 0x28
 8107ee0:	6823      	ldr	r3, [r4, #0]
 8107ee2:	9305      	str	r3, [sp, #20]
 8107ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8107ee8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107eec:	3307      	adds	r3, #7
 8107eee:	f023 0307 	bic.w	r3, r3, #7
 8107ef2:	f103 0208 	add.w	r2, r3, #8
 8107ef6:	f8c8 2000 	str.w	r2, [r8]
 8107efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107efe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107f02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107f06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107f0a:	9307      	str	r3, [sp, #28]
 8107f0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8107f10:	ee08 0a10 	vmov	s16, r0
 8107f14:	4b9f      	ldr	r3, [pc, #636]	; (8108194 <_printf_float+0x2dc>)
 8107f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8107f1e:	f7f8 fe8d 	bl	8100c3c <__aeabi_dcmpun>
 8107f22:	bb88      	cbnz	r0, 8107f88 <_printf_float+0xd0>
 8107f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107f28:	4b9a      	ldr	r3, [pc, #616]	; (8108194 <_printf_float+0x2dc>)
 8107f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8107f2e:	f7f8 fe67 	bl	8100c00 <__aeabi_dcmple>
 8107f32:	bb48      	cbnz	r0, 8107f88 <_printf_float+0xd0>
 8107f34:	2200      	movs	r2, #0
 8107f36:	2300      	movs	r3, #0
 8107f38:	4640      	mov	r0, r8
 8107f3a:	4649      	mov	r1, r9
 8107f3c:	f7f8 fe56 	bl	8100bec <__aeabi_dcmplt>
 8107f40:	b110      	cbz	r0, 8107f48 <_printf_float+0x90>
 8107f42:	232d      	movs	r3, #45	; 0x2d
 8107f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107f48:	4b93      	ldr	r3, [pc, #588]	; (8108198 <_printf_float+0x2e0>)
 8107f4a:	4894      	ldr	r0, [pc, #592]	; (810819c <_printf_float+0x2e4>)
 8107f4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107f50:	bf94      	ite	ls
 8107f52:	4698      	movls	r8, r3
 8107f54:	4680      	movhi	r8, r0
 8107f56:	2303      	movs	r3, #3
 8107f58:	6123      	str	r3, [r4, #16]
 8107f5a:	9b05      	ldr	r3, [sp, #20]
 8107f5c:	f023 0204 	bic.w	r2, r3, #4
 8107f60:	6022      	str	r2, [r4, #0]
 8107f62:	f04f 0900 	mov.w	r9, #0
 8107f66:	9700      	str	r7, [sp, #0]
 8107f68:	4633      	mov	r3, r6
 8107f6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8107f6c:	4621      	mov	r1, r4
 8107f6e:	4628      	mov	r0, r5
 8107f70:	f000 f9d8 	bl	8108324 <_printf_common>
 8107f74:	3001      	adds	r0, #1
 8107f76:	f040 8090 	bne.w	810809a <_printf_float+0x1e2>
 8107f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8107f7e:	b00d      	add	sp, #52	; 0x34
 8107f80:	ecbd 8b02 	vpop	{d8}
 8107f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f88:	4642      	mov	r2, r8
 8107f8a:	464b      	mov	r3, r9
 8107f8c:	4640      	mov	r0, r8
 8107f8e:	4649      	mov	r1, r9
 8107f90:	f7f8 fe54 	bl	8100c3c <__aeabi_dcmpun>
 8107f94:	b140      	cbz	r0, 8107fa8 <_printf_float+0xf0>
 8107f96:	464b      	mov	r3, r9
 8107f98:	2b00      	cmp	r3, #0
 8107f9a:	bfbc      	itt	lt
 8107f9c:	232d      	movlt	r3, #45	; 0x2d
 8107f9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107fa2:	487f      	ldr	r0, [pc, #508]	; (81081a0 <_printf_float+0x2e8>)
 8107fa4:	4b7f      	ldr	r3, [pc, #508]	; (81081a4 <_printf_float+0x2ec>)
 8107fa6:	e7d1      	b.n	8107f4c <_printf_float+0x94>
 8107fa8:	6863      	ldr	r3, [r4, #4]
 8107faa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107fae:	9206      	str	r2, [sp, #24]
 8107fb0:	1c5a      	adds	r2, r3, #1
 8107fb2:	d13f      	bne.n	8108034 <_printf_float+0x17c>
 8107fb4:	2306      	movs	r3, #6
 8107fb6:	6063      	str	r3, [r4, #4]
 8107fb8:	9b05      	ldr	r3, [sp, #20]
 8107fba:	6861      	ldr	r1, [r4, #4]
 8107fbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107fc0:	2300      	movs	r3, #0
 8107fc2:	9303      	str	r3, [sp, #12]
 8107fc4:	ab0a      	add	r3, sp, #40	; 0x28
 8107fc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107fca:	ab09      	add	r3, sp, #36	; 0x24
 8107fcc:	ec49 8b10 	vmov	d0, r8, r9
 8107fd0:	9300      	str	r3, [sp, #0]
 8107fd2:	6022      	str	r2, [r4, #0]
 8107fd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107fd8:	4628      	mov	r0, r5
 8107fda:	f7ff fecd 	bl	8107d78 <__cvt>
 8107fde:	9b06      	ldr	r3, [sp, #24]
 8107fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107fe2:	2b47      	cmp	r3, #71	; 0x47
 8107fe4:	4680      	mov	r8, r0
 8107fe6:	d108      	bne.n	8107ffa <_printf_float+0x142>
 8107fe8:	1cc8      	adds	r0, r1, #3
 8107fea:	db02      	blt.n	8107ff2 <_printf_float+0x13a>
 8107fec:	6863      	ldr	r3, [r4, #4]
 8107fee:	4299      	cmp	r1, r3
 8107ff0:	dd41      	ble.n	8108076 <_printf_float+0x1be>
 8107ff2:	f1ab 0b02 	sub.w	fp, fp, #2
 8107ff6:	fa5f fb8b 	uxtb.w	fp, fp
 8107ffa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107ffe:	d820      	bhi.n	8108042 <_printf_float+0x18a>
 8108000:	3901      	subs	r1, #1
 8108002:	465a      	mov	r2, fp
 8108004:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8108008:	9109      	str	r1, [sp, #36]	; 0x24
 810800a:	f7ff ff17 	bl	8107e3c <__exponent>
 810800e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108010:	1813      	adds	r3, r2, r0
 8108012:	2a01      	cmp	r2, #1
 8108014:	4681      	mov	r9, r0
 8108016:	6123      	str	r3, [r4, #16]
 8108018:	dc02      	bgt.n	8108020 <_printf_float+0x168>
 810801a:	6822      	ldr	r2, [r4, #0]
 810801c:	07d2      	lsls	r2, r2, #31
 810801e:	d501      	bpl.n	8108024 <_printf_float+0x16c>
 8108020:	3301      	adds	r3, #1
 8108022:	6123      	str	r3, [r4, #16]
 8108024:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8108028:	2b00      	cmp	r3, #0
 810802a:	d09c      	beq.n	8107f66 <_printf_float+0xae>
 810802c:	232d      	movs	r3, #45	; 0x2d
 810802e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108032:	e798      	b.n	8107f66 <_printf_float+0xae>
 8108034:	9a06      	ldr	r2, [sp, #24]
 8108036:	2a47      	cmp	r2, #71	; 0x47
 8108038:	d1be      	bne.n	8107fb8 <_printf_float+0x100>
 810803a:	2b00      	cmp	r3, #0
 810803c:	d1bc      	bne.n	8107fb8 <_printf_float+0x100>
 810803e:	2301      	movs	r3, #1
 8108040:	e7b9      	b.n	8107fb6 <_printf_float+0xfe>
 8108042:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8108046:	d118      	bne.n	810807a <_printf_float+0x1c2>
 8108048:	2900      	cmp	r1, #0
 810804a:	6863      	ldr	r3, [r4, #4]
 810804c:	dd0b      	ble.n	8108066 <_printf_float+0x1ae>
 810804e:	6121      	str	r1, [r4, #16]
 8108050:	b913      	cbnz	r3, 8108058 <_printf_float+0x1a0>
 8108052:	6822      	ldr	r2, [r4, #0]
 8108054:	07d0      	lsls	r0, r2, #31
 8108056:	d502      	bpl.n	810805e <_printf_float+0x1a6>
 8108058:	3301      	adds	r3, #1
 810805a:	440b      	add	r3, r1
 810805c:	6123      	str	r3, [r4, #16]
 810805e:	65a1      	str	r1, [r4, #88]	; 0x58
 8108060:	f04f 0900 	mov.w	r9, #0
 8108064:	e7de      	b.n	8108024 <_printf_float+0x16c>
 8108066:	b913      	cbnz	r3, 810806e <_printf_float+0x1b6>
 8108068:	6822      	ldr	r2, [r4, #0]
 810806a:	07d2      	lsls	r2, r2, #31
 810806c:	d501      	bpl.n	8108072 <_printf_float+0x1ba>
 810806e:	3302      	adds	r3, #2
 8108070:	e7f4      	b.n	810805c <_printf_float+0x1a4>
 8108072:	2301      	movs	r3, #1
 8108074:	e7f2      	b.n	810805c <_printf_float+0x1a4>
 8108076:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810807c:	4299      	cmp	r1, r3
 810807e:	db05      	blt.n	810808c <_printf_float+0x1d4>
 8108080:	6823      	ldr	r3, [r4, #0]
 8108082:	6121      	str	r1, [r4, #16]
 8108084:	07d8      	lsls	r0, r3, #31
 8108086:	d5ea      	bpl.n	810805e <_printf_float+0x1a6>
 8108088:	1c4b      	adds	r3, r1, #1
 810808a:	e7e7      	b.n	810805c <_printf_float+0x1a4>
 810808c:	2900      	cmp	r1, #0
 810808e:	bfd4      	ite	le
 8108090:	f1c1 0202 	rsble	r2, r1, #2
 8108094:	2201      	movgt	r2, #1
 8108096:	4413      	add	r3, r2
 8108098:	e7e0      	b.n	810805c <_printf_float+0x1a4>
 810809a:	6823      	ldr	r3, [r4, #0]
 810809c:	055a      	lsls	r2, r3, #21
 810809e:	d407      	bmi.n	81080b0 <_printf_float+0x1f8>
 81080a0:	6923      	ldr	r3, [r4, #16]
 81080a2:	4642      	mov	r2, r8
 81080a4:	4631      	mov	r1, r6
 81080a6:	4628      	mov	r0, r5
 81080a8:	47b8      	blx	r7
 81080aa:	3001      	adds	r0, #1
 81080ac:	d12c      	bne.n	8108108 <_printf_float+0x250>
 81080ae:	e764      	b.n	8107f7a <_printf_float+0xc2>
 81080b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81080b4:	f240 80e0 	bls.w	8108278 <_printf_float+0x3c0>
 81080b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81080bc:	2200      	movs	r2, #0
 81080be:	2300      	movs	r3, #0
 81080c0:	f7f8 fd8a 	bl	8100bd8 <__aeabi_dcmpeq>
 81080c4:	2800      	cmp	r0, #0
 81080c6:	d034      	beq.n	8108132 <_printf_float+0x27a>
 81080c8:	4a37      	ldr	r2, [pc, #220]	; (81081a8 <_printf_float+0x2f0>)
 81080ca:	2301      	movs	r3, #1
 81080cc:	4631      	mov	r1, r6
 81080ce:	4628      	mov	r0, r5
 81080d0:	47b8      	blx	r7
 81080d2:	3001      	adds	r0, #1
 81080d4:	f43f af51 	beq.w	8107f7a <_printf_float+0xc2>
 81080d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81080dc:	429a      	cmp	r2, r3
 81080de:	db02      	blt.n	81080e6 <_printf_float+0x22e>
 81080e0:	6823      	ldr	r3, [r4, #0]
 81080e2:	07d8      	lsls	r0, r3, #31
 81080e4:	d510      	bpl.n	8108108 <_printf_float+0x250>
 81080e6:	ee18 3a10 	vmov	r3, s16
 81080ea:	4652      	mov	r2, sl
 81080ec:	4631      	mov	r1, r6
 81080ee:	4628      	mov	r0, r5
 81080f0:	47b8      	blx	r7
 81080f2:	3001      	adds	r0, #1
 81080f4:	f43f af41 	beq.w	8107f7a <_printf_float+0xc2>
 81080f8:	f04f 0800 	mov.w	r8, #0
 81080fc:	f104 091a 	add.w	r9, r4, #26
 8108100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108102:	3b01      	subs	r3, #1
 8108104:	4543      	cmp	r3, r8
 8108106:	dc09      	bgt.n	810811c <_printf_float+0x264>
 8108108:	6823      	ldr	r3, [r4, #0]
 810810a:	079b      	lsls	r3, r3, #30
 810810c:	f100 8105 	bmi.w	810831a <_printf_float+0x462>
 8108110:	68e0      	ldr	r0, [r4, #12]
 8108112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108114:	4298      	cmp	r0, r3
 8108116:	bfb8      	it	lt
 8108118:	4618      	movlt	r0, r3
 810811a:	e730      	b.n	8107f7e <_printf_float+0xc6>
 810811c:	2301      	movs	r3, #1
 810811e:	464a      	mov	r2, r9
 8108120:	4631      	mov	r1, r6
 8108122:	4628      	mov	r0, r5
 8108124:	47b8      	blx	r7
 8108126:	3001      	adds	r0, #1
 8108128:	f43f af27 	beq.w	8107f7a <_printf_float+0xc2>
 810812c:	f108 0801 	add.w	r8, r8, #1
 8108130:	e7e6      	b.n	8108100 <_printf_float+0x248>
 8108132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108134:	2b00      	cmp	r3, #0
 8108136:	dc39      	bgt.n	81081ac <_printf_float+0x2f4>
 8108138:	4a1b      	ldr	r2, [pc, #108]	; (81081a8 <_printf_float+0x2f0>)
 810813a:	2301      	movs	r3, #1
 810813c:	4631      	mov	r1, r6
 810813e:	4628      	mov	r0, r5
 8108140:	47b8      	blx	r7
 8108142:	3001      	adds	r0, #1
 8108144:	f43f af19 	beq.w	8107f7a <_printf_float+0xc2>
 8108148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810814c:	4313      	orrs	r3, r2
 810814e:	d102      	bne.n	8108156 <_printf_float+0x29e>
 8108150:	6823      	ldr	r3, [r4, #0]
 8108152:	07d9      	lsls	r1, r3, #31
 8108154:	d5d8      	bpl.n	8108108 <_printf_float+0x250>
 8108156:	ee18 3a10 	vmov	r3, s16
 810815a:	4652      	mov	r2, sl
 810815c:	4631      	mov	r1, r6
 810815e:	4628      	mov	r0, r5
 8108160:	47b8      	blx	r7
 8108162:	3001      	adds	r0, #1
 8108164:	f43f af09 	beq.w	8107f7a <_printf_float+0xc2>
 8108168:	f04f 0900 	mov.w	r9, #0
 810816c:	f104 0a1a 	add.w	sl, r4, #26
 8108170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108172:	425b      	negs	r3, r3
 8108174:	454b      	cmp	r3, r9
 8108176:	dc01      	bgt.n	810817c <_printf_float+0x2c4>
 8108178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810817a:	e792      	b.n	81080a2 <_printf_float+0x1ea>
 810817c:	2301      	movs	r3, #1
 810817e:	4652      	mov	r2, sl
 8108180:	4631      	mov	r1, r6
 8108182:	4628      	mov	r0, r5
 8108184:	47b8      	blx	r7
 8108186:	3001      	adds	r0, #1
 8108188:	f43f aef7 	beq.w	8107f7a <_printf_float+0xc2>
 810818c:	f109 0901 	add.w	r9, r9, #1
 8108190:	e7ee      	b.n	8108170 <_printf_float+0x2b8>
 8108192:	bf00      	nop
 8108194:	7fefffff 	.word	0x7fefffff
 8108198:	0810a7bc 	.word	0x0810a7bc
 810819c:	0810a7c0 	.word	0x0810a7c0
 81081a0:	0810a7c8 	.word	0x0810a7c8
 81081a4:	0810a7c4 	.word	0x0810a7c4
 81081a8:	0810a7cc 	.word	0x0810a7cc
 81081ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81081ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81081b0:	429a      	cmp	r2, r3
 81081b2:	bfa8      	it	ge
 81081b4:	461a      	movge	r2, r3
 81081b6:	2a00      	cmp	r2, #0
 81081b8:	4691      	mov	r9, r2
 81081ba:	dc37      	bgt.n	810822c <_printf_float+0x374>
 81081bc:	f04f 0b00 	mov.w	fp, #0
 81081c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81081c4:	f104 021a 	add.w	r2, r4, #26
 81081c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81081ca:	9305      	str	r3, [sp, #20]
 81081cc:	eba3 0309 	sub.w	r3, r3, r9
 81081d0:	455b      	cmp	r3, fp
 81081d2:	dc33      	bgt.n	810823c <_printf_float+0x384>
 81081d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81081d8:	429a      	cmp	r2, r3
 81081da:	db3b      	blt.n	8108254 <_printf_float+0x39c>
 81081dc:	6823      	ldr	r3, [r4, #0]
 81081de:	07da      	lsls	r2, r3, #31
 81081e0:	d438      	bmi.n	8108254 <_printf_float+0x39c>
 81081e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81081e4:	9a05      	ldr	r2, [sp, #20]
 81081e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 81081e8:	1a9a      	subs	r2, r3, r2
 81081ea:	eba3 0901 	sub.w	r9, r3, r1
 81081ee:	4591      	cmp	r9, r2
 81081f0:	bfa8      	it	ge
 81081f2:	4691      	movge	r9, r2
 81081f4:	f1b9 0f00 	cmp.w	r9, #0
 81081f8:	dc35      	bgt.n	8108266 <_printf_float+0x3ae>
 81081fa:	f04f 0800 	mov.w	r8, #0
 81081fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108202:	f104 0a1a 	add.w	sl, r4, #26
 8108206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810820a:	1a9b      	subs	r3, r3, r2
 810820c:	eba3 0309 	sub.w	r3, r3, r9
 8108210:	4543      	cmp	r3, r8
 8108212:	f77f af79 	ble.w	8108108 <_printf_float+0x250>
 8108216:	2301      	movs	r3, #1
 8108218:	4652      	mov	r2, sl
 810821a:	4631      	mov	r1, r6
 810821c:	4628      	mov	r0, r5
 810821e:	47b8      	blx	r7
 8108220:	3001      	adds	r0, #1
 8108222:	f43f aeaa 	beq.w	8107f7a <_printf_float+0xc2>
 8108226:	f108 0801 	add.w	r8, r8, #1
 810822a:	e7ec      	b.n	8108206 <_printf_float+0x34e>
 810822c:	4613      	mov	r3, r2
 810822e:	4631      	mov	r1, r6
 8108230:	4642      	mov	r2, r8
 8108232:	4628      	mov	r0, r5
 8108234:	47b8      	blx	r7
 8108236:	3001      	adds	r0, #1
 8108238:	d1c0      	bne.n	81081bc <_printf_float+0x304>
 810823a:	e69e      	b.n	8107f7a <_printf_float+0xc2>
 810823c:	2301      	movs	r3, #1
 810823e:	4631      	mov	r1, r6
 8108240:	4628      	mov	r0, r5
 8108242:	9205      	str	r2, [sp, #20]
 8108244:	47b8      	blx	r7
 8108246:	3001      	adds	r0, #1
 8108248:	f43f ae97 	beq.w	8107f7a <_printf_float+0xc2>
 810824c:	9a05      	ldr	r2, [sp, #20]
 810824e:	f10b 0b01 	add.w	fp, fp, #1
 8108252:	e7b9      	b.n	81081c8 <_printf_float+0x310>
 8108254:	ee18 3a10 	vmov	r3, s16
 8108258:	4652      	mov	r2, sl
 810825a:	4631      	mov	r1, r6
 810825c:	4628      	mov	r0, r5
 810825e:	47b8      	blx	r7
 8108260:	3001      	adds	r0, #1
 8108262:	d1be      	bne.n	81081e2 <_printf_float+0x32a>
 8108264:	e689      	b.n	8107f7a <_printf_float+0xc2>
 8108266:	9a05      	ldr	r2, [sp, #20]
 8108268:	464b      	mov	r3, r9
 810826a:	4442      	add	r2, r8
 810826c:	4631      	mov	r1, r6
 810826e:	4628      	mov	r0, r5
 8108270:	47b8      	blx	r7
 8108272:	3001      	adds	r0, #1
 8108274:	d1c1      	bne.n	81081fa <_printf_float+0x342>
 8108276:	e680      	b.n	8107f7a <_printf_float+0xc2>
 8108278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810827a:	2a01      	cmp	r2, #1
 810827c:	dc01      	bgt.n	8108282 <_printf_float+0x3ca>
 810827e:	07db      	lsls	r3, r3, #31
 8108280:	d538      	bpl.n	81082f4 <_printf_float+0x43c>
 8108282:	2301      	movs	r3, #1
 8108284:	4642      	mov	r2, r8
 8108286:	4631      	mov	r1, r6
 8108288:	4628      	mov	r0, r5
 810828a:	47b8      	blx	r7
 810828c:	3001      	adds	r0, #1
 810828e:	f43f ae74 	beq.w	8107f7a <_printf_float+0xc2>
 8108292:	ee18 3a10 	vmov	r3, s16
 8108296:	4652      	mov	r2, sl
 8108298:	4631      	mov	r1, r6
 810829a:	4628      	mov	r0, r5
 810829c:	47b8      	blx	r7
 810829e:	3001      	adds	r0, #1
 81082a0:	f43f ae6b 	beq.w	8107f7a <_printf_float+0xc2>
 81082a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81082a8:	2200      	movs	r2, #0
 81082aa:	2300      	movs	r3, #0
 81082ac:	f7f8 fc94 	bl	8100bd8 <__aeabi_dcmpeq>
 81082b0:	b9d8      	cbnz	r0, 81082ea <_printf_float+0x432>
 81082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81082b4:	f108 0201 	add.w	r2, r8, #1
 81082b8:	3b01      	subs	r3, #1
 81082ba:	4631      	mov	r1, r6
 81082bc:	4628      	mov	r0, r5
 81082be:	47b8      	blx	r7
 81082c0:	3001      	adds	r0, #1
 81082c2:	d10e      	bne.n	81082e2 <_printf_float+0x42a>
 81082c4:	e659      	b.n	8107f7a <_printf_float+0xc2>
 81082c6:	2301      	movs	r3, #1
 81082c8:	4652      	mov	r2, sl
 81082ca:	4631      	mov	r1, r6
 81082cc:	4628      	mov	r0, r5
 81082ce:	47b8      	blx	r7
 81082d0:	3001      	adds	r0, #1
 81082d2:	f43f ae52 	beq.w	8107f7a <_printf_float+0xc2>
 81082d6:	f108 0801 	add.w	r8, r8, #1
 81082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81082dc:	3b01      	subs	r3, #1
 81082de:	4543      	cmp	r3, r8
 81082e0:	dcf1      	bgt.n	81082c6 <_printf_float+0x40e>
 81082e2:	464b      	mov	r3, r9
 81082e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81082e8:	e6dc      	b.n	81080a4 <_printf_float+0x1ec>
 81082ea:	f04f 0800 	mov.w	r8, #0
 81082ee:	f104 0a1a 	add.w	sl, r4, #26
 81082f2:	e7f2      	b.n	81082da <_printf_float+0x422>
 81082f4:	2301      	movs	r3, #1
 81082f6:	4642      	mov	r2, r8
 81082f8:	e7df      	b.n	81082ba <_printf_float+0x402>
 81082fa:	2301      	movs	r3, #1
 81082fc:	464a      	mov	r2, r9
 81082fe:	4631      	mov	r1, r6
 8108300:	4628      	mov	r0, r5
 8108302:	47b8      	blx	r7
 8108304:	3001      	adds	r0, #1
 8108306:	f43f ae38 	beq.w	8107f7a <_printf_float+0xc2>
 810830a:	f108 0801 	add.w	r8, r8, #1
 810830e:	68e3      	ldr	r3, [r4, #12]
 8108310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8108312:	1a5b      	subs	r3, r3, r1
 8108314:	4543      	cmp	r3, r8
 8108316:	dcf0      	bgt.n	81082fa <_printf_float+0x442>
 8108318:	e6fa      	b.n	8108110 <_printf_float+0x258>
 810831a:	f04f 0800 	mov.w	r8, #0
 810831e:	f104 0919 	add.w	r9, r4, #25
 8108322:	e7f4      	b.n	810830e <_printf_float+0x456>

08108324 <_printf_common>:
 8108324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108328:	4616      	mov	r6, r2
 810832a:	4699      	mov	r9, r3
 810832c:	688a      	ldr	r2, [r1, #8]
 810832e:	690b      	ldr	r3, [r1, #16]
 8108330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108334:	4293      	cmp	r3, r2
 8108336:	bfb8      	it	lt
 8108338:	4613      	movlt	r3, r2
 810833a:	6033      	str	r3, [r6, #0]
 810833c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108340:	4607      	mov	r7, r0
 8108342:	460c      	mov	r4, r1
 8108344:	b10a      	cbz	r2, 810834a <_printf_common+0x26>
 8108346:	3301      	adds	r3, #1
 8108348:	6033      	str	r3, [r6, #0]
 810834a:	6823      	ldr	r3, [r4, #0]
 810834c:	0699      	lsls	r1, r3, #26
 810834e:	bf42      	ittt	mi
 8108350:	6833      	ldrmi	r3, [r6, #0]
 8108352:	3302      	addmi	r3, #2
 8108354:	6033      	strmi	r3, [r6, #0]
 8108356:	6825      	ldr	r5, [r4, #0]
 8108358:	f015 0506 	ands.w	r5, r5, #6
 810835c:	d106      	bne.n	810836c <_printf_common+0x48>
 810835e:	f104 0a19 	add.w	sl, r4, #25
 8108362:	68e3      	ldr	r3, [r4, #12]
 8108364:	6832      	ldr	r2, [r6, #0]
 8108366:	1a9b      	subs	r3, r3, r2
 8108368:	42ab      	cmp	r3, r5
 810836a:	dc26      	bgt.n	81083ba <_printf_common+0x96>
 810836c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108370:	1e13      	subs	r3, r2, #0
 8108372:	6822      	ldr	r2, [r4, #0]
 8108374:	bf18      	it	ne
 8108376:	2301      	movne	r3, #1
 8108378:	0692      	lsls	r2, r2, #26
 810837a:	d42b      	bmi.n	81083d4 <_printf_common+0xb0>
 810837c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108380:	4649      	mov	r1, r9
 8108382:	4638      	mov	r0, r7
 8108384:	47c0      	blx	r8
 8108386:	3001      	adds	r0, #1
 8108388:	d01e      	beq.n	81083c8 <_printf_common+0xa4>
 810838a:	6823      	ldr	r3, [r4, #0]
 810838c:	68e5      	ldr	r5, [r4, #12]
 810838e:	6832      	ldr	r2, [r6, #0]
 8108390:	f003 0306 	and.w	r3, r3, #6
 8108394:	2b04      	cmp	r3, #4
 8108396:	bf08      	it	eq
 8108398:	1aad      	subeq	r5, r5, r2
 810839a:	68a3      	ldr	r3, [r4, #8]
 810839c:	6922      	ldr	r2, [r4, #16]
 810839e:	bf0c      	ite	eq
 81083a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81083a4:	2500      	movne	r5, #0
 81083a6:	4293      	cmp	r3, r2
 81083a8:	bfc4      	itt	gt
 81083aa:	1a9b      	subgt	r3, r3, r2
 81083ac:	18ed      	addgt	r5, r5, r3
 81083ae:	2600      	movs	r6, #0
 81083b0:	341a      	adds	r4, #26
 81083b2:	42b5      	cmp	r5, r6
 81083b4:	d11a      	bne.n	81083ec <_printf_common+0xc8>
 81083b6:	2000      	movs	r0, #0
 81083b8:	e008      	b.n	81083cc <_printf_common+0xa8>
 81083ba:	2301      	movs	r3, #1
 81083bc:	4652      	mov	r2, sl
 81083be:	4649      	mov	r1, r9
 81083c0:	4638      	mov	r0, r7
 81083c2:	47c0      	blx	r8
 81083c4:	3001      	adds	r0, #1
 81083c6:	d103      	bne.n	81083d0 <_printf_common+0xac>
 81083c8:	f04f 30ff 	mov.w	r0, #4294967295
 81083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81083d0:	3501      	adds	r5, #1
 81083d2:	e7c6      	b.n	8108362 <_printf_common+0x3e>
 81083d4:	18e1      	adds	r1, r4, r3
 81083d6:	1c5a      	adds	r2, r3, #1
 81083d8:	2030      	movs	r0, #48	; 0x30
 81083da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81083de:	4422      	add	r2, r4
 81083e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81083e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81083e8:	3302      	adds	r3, #2
 81083ea:	e7c7      	b.n	810837c <_printf_common+0x58>
 81083ec:	2301      	movs	r3, #1
 81083ee:	4622      	mov	r2, r4
 81083f0:	4649      	mov	r1, r9
 81083f2:	4638      	mov	r0, r7
 81083f4:	47c0      	blx	r8
 81083f6:	3001      	adds	r0, #1
 81083f8:	d0e6      	beq.n	81083c8 <_printf_common+0xa4>
 81083fa:	3601      	adds	r6, #1
 81083fc:	e7d9      	b.n	81083b2 <_printf_common+0x8e>
	...

08108400 <_printf_i>:
 8108400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108404:	7e0f      	ldrb	r7, [r1, #24]
 8108406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108408:	2f78      	cmp	r7, #120	; 0x78
 810840a:	4691      	mov	r9, r2
 810840c:	4680      	mov	r8, r0
 810840e:	460c      	mov	r4, r1
 8108410:	469a      	mov	sl, r3
 8108412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8108416:	d807      	bhi.n	8108428 <_printf_i+0x28>
 8108418:	2f62      	cmp	r7, #98	; 0x62
 810841a:	d80a      	bhi.n	8108432 <_printf_i+0x32>
 810841c:	2f00      	cmp	r7, #0
 810841e:	f000 80d8 	beq.w	81085d2 <_printf_i+0x1d2>
 8108422:	2f58      	cmp	r7, #88	; 0x58
 8108424:	f000 80a3 	beq.w	810856e <_printf_i+0x16e>
 8108428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810842c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108430:	e03a      	b.n	81084a8 <_printf_i+0xa8>
 8108432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108436:	2b15      	cmp	r3, #21
 8108438:	d8f6      	bhi.n	8108428 <_printf_i+0x28>
 810843a:	a101      	add	r1, pc, #4	; (adr r1, 8108440 <_printf_i+0x40>)
 810843c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108440:	08108499 	.word	0x08108499
 8108444:	081084ad 	.word	0x081084ad
 8108448:	08108429 	.word	0x08108429
 810844c:	08108429 	.word	0x08108429
 8108450:	08108429 	.word	0x08108429
 8108454:	08108429 	.word	0x08108429
 8108458:	081084ad 	.word	0x081084ad
 810845c:	08108429 	.word	0x08108429
 8108460:	08108429 	.word	0x08108429
 8108464:	08108429 	.word	0x08108429
 8108468:	08108429 	.word	0x08108429
 810846c:	081085b9 	.word	0x081085b9
 8108470:	081084dd 	.word	0x081084dd
 8108474:	0810859b 	.word	0x0810859b
 8108478:	08108429 	.word	0x08108429
 810847c:	08108429 	.word	0x08108429
 8108480:	081085db 	.word	0x081085db
 8108484:	08108429 	.word	0x08108429
 8108488:	081084dd 	.word	0x081084dd
 810848c:	08108429 	.word	0x08108429
 8108490:	08108429 	.word	0x08108429
 8108494:	081085a3 	.word	0x081085a3
 8108498:	682b      	ldr	r3, [r5, #0]
 810849a:	1d1a      	adds	r2, r3, #4
 810849c:	681b      	ldr	r3, [r3, #0]
 810849e:	602a      	str	r2, [r5, #0]
 81084a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81084a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81084a8:	2301      	movs	r3, #1
 81084aa:	e0a3      	b.n	81085f4 <_printf_i+0x1f4>
 81084ac:	6820      	ldr	r0, [r4, #0]
 81084ae:	6829      	ldr	r1, [r5, #0]
 81084b0:	0606      	lsls	r6, r0, #24
 81084b2:	f101 0304 	add.w	r3, r1, #4
 81084b6:	d50a      	bpl.n	81084ce <_printf_i+0xce>
 81084b8:	680e      	ldr	r6, [r1, #0]
 81084ba:	602b      	str	r3, [r5, #0]
 81084bc:	2e00      	cmp	r6, #0
 81084be:	da03      	bge.n	81084c8 <_printf_i+0xc8>
 81084c0:	232d      	movs	r3, #45	; 0x2d
 81084c2:	4276      	negs	r6, r6
 81084c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81084c8:	485e      	ldr	r0, [pc, #376]	; (8108644 <_printf_i+0x244>)
 81084ca:	230a      	movs	r3, #10
 81084cc:	e019      	b.n	8108502 <_printf_i+0x102>
 81084ce:	680e      	ldr	r6, [r1, #0]
 81084d0:	602b      	str	r3, [r5, #0]
 81084d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 81084d6:	bf18      	it	ne
 81084d8:	b236      	sxthne	r6, r6
 81084da:	e7ef      	b.n	81084bc <_printf_i+0xbc>
 81084dc:	682b      	ldr	r3, [r5, #0]
 81084de:	6820      	ldr	r0, [r4, #0]
 81084e0:	1d19      	adds	r1, r3, #4
 81084e2:	6029      	str	r1, [r5, #0]
 81084e4:	0601      	lsls	r1, r0, #24
 81084e6:	d501      	bpl.n	81084ec <_printf_i+0xec>
 81084e8:	681e      	ldr	r6, [r3, #0]
 81084ea:	e002      	b.n	81084f2 <_printf_i+0xf2>
 81084ec:	0646      	lsls	r6, r0, #25
 81084ee:	d5fb      	bpl.n	81084e8 <_printf_i+0xe8>
 81084f0:	881e      	ldrh	r6, [r3, #0]
 81084f2:	4854      	ldr	r0, [pc, #336]	; (8108644 <_printf_i+0x244>)
 81084f4:	2f6f      	cmp	r7, #111	; 0x6f
 81084f6:	bf0c      	ite	eq
 81084f8:	2308      	moveq	r3, #8
 81084fa:	230a      	movne	r3, #10
 81084fc:	2100      	movs	r1, #0
 81084fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8108502:	6865      	ldr	r5, [r4, #4]
 8108504:	60a5      	str	r5, [r4, #8]
 8108506:	2d00      	cmp	r5, #0
 8108508:	bfa2      	ittt	ge
 810850a:	6821      	ldrge	r1, [r4, #0]
 810850c:	f021 0104 	bicge.w	r1, r1, #4
 8108510:	6021      	strge	r1, [r4, #0]
 8108512:	b90e      	cbnz	r6, 8108518 <_printf_i+0x118>
 8108514:	2d00      	cmp	r5, #0
 8108516:	d04d      	beq.n	81085b4 <_printf_i+0x1b4>
 8108518:	4615      	mov	r5, r2
 810851a:	fbb6 f1f3 	udiv	r1, r6, r3
 810851e:	fb03 6711 	mls	r7, r3, r1, r6
 8108522:	5dc7      	ldrb	r7, [r0, r7]
 8108524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108528:	4637      	mov	r7, r6
 810852a:	42bb      	cmp	r3, r7
 810852c:	460e      	mov	r6, r1
 810852e:	d9f4      	bls.n	810851a <_printf_i+0x11a>
 8108530:	2b08      	cmp	r3, #8
 8108532:	d10b      	bne.n	810854c <_printf_i+0x14c>
 8108534:	6823      	ldr	r3, [r4, #0]
 8108536:	07de      	lsls	r6, r3, #31
 8108538:	d508      	bpl.n	810854c <_printf_i+0x14c>
 810853a:	6923      	ldr	r3, [r4, #16]
 810853c:	6861      	ldr	r1, [r4, #4]
 810853e:	4299      	cmp	r1, r3
 8108540:	bfde      	ittt	le
 8108542:	2330      	movle	r3, #48	; 0x30
 8108544:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108548:	f105 35ff 	addle.w	r5, r5, #4294967295
 810854c:	1b52      	subs	r2, r2, r5
 810854e:	6122      	str	r2, [r4, #16]
 8108550:	f8cd a000 	str.w	sl, [sp]
 8108554:	464b      	mov	r3, r9
 8108556:	aa03      	add	r2, sp, #12
 8108558:	4621      	mov	r1, r4
 810855a:	4640      	mov	r0, r8
 810855c:	f7ff fee2 	bl	8108324 <_printf_common>
 8108560:	3001      	adds	r0, #1
 8108562:	d14c      	bne.n	81085fe <_printf_i+0x1fe>
 8108564:	f04f 30ff 	mov.w	r0, #4294967295
 8108568:	b004      	add	sp, #16
 810856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810856e:	4835      	ldr	r0, [pc, #212]	; (8108644 <_printf_i+0x244>)
 8108570:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8108574:	6829      	ldr	r1, [r5, #0]
 8108576:	6823      	ldr	r3, [r4, #0]
 8108578:	f851 6b04 	ldr.w	r6, [r1], #4
 810857c:	6029      	str	r1, [r5, #0]
 810857e:	061d      	lsls	r5, r3, #24
 8108580:	d514      	bpl.n	81085ac <_printf_i+0x1ac>
 8108582:	07df      	lsls	r7, r3, #31
 8108584:	bf44      	itt	mi
 8108586:	f043 0320 	orrmi.w	r3, r3, #32
 810858a:	6023      	strmi	r3, [r4, #0]
 810858c:	b91e      	cbnz	r6, 8108596 <_printf_i+0x196>
 810858e:	6823      	ldr	r3, [r4, #0]
 8108590:	f023 0320 	bic.w	r3, r3, #32
 8108594:	6023      	str	r3, [r4, #0]
 8108596:	2310      	movs	r3, #16
 8108598:	e7b0      	b.n	81084fc <_printf_i+0xfc>
 810859a:	6823      	ldr	r3, [r4, #0]
 810859c:	f043 0320 	orr.w	r3, r3, #32
 81085a0:	6023      	str	r3, [r4, #0]
 81085a2:	2378      	movs	r3, #120	; 0x78
 81085a4:	4828      	ldr	r0, [pc, #160]	; (8108648 <_printf_i+0x248>)
 81085a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81085aa:	e7e3      	b.n	8108574 <_printf_i+0x174>
 81085ac:	0659      	lsls	r1, r3, #25
 81085ae:	bf48      	it	mi
 81085b0:	b2b6      	uxthmi	r6, r6
 81085b2:	e7e6      	b.n	8108582 <_printf_i+0x182>
 81085b4:	4615      	mov	r5, r2
 81085b6:	e7bb      	b.n	8108530 <_printf_i+0x130>
 81085b8:	682b      	ldr	r3, [r5, #0]
 81085ba:	6826      	ldr	r6, [r4, #0]
 81085bc:	6961      	ldr	r1, [r4, #20]
 81085be:	1d18      	adds	r0, r3, #4
 81085c0:	6028      	str	r0, [r5, #0]
 81085c2:	0635      	lsls	r5, r6, #24
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	d501      	bpl.n	81085cc <_printf_i+0x1cc>
 81085c8:	6019      	str	r1, [r3, #0]
 81085ca:	e002      	b.n	81085d2 <_printf_i+0x1d2>
 81085cc:	0670      	lsls	r0, r6, #25
 81085ce:	d5fb      	bpl.n	81085c8 <_printf_i+0x1c8>
 81085d0:	8019      	strh	r1, [r3, #0]
 81085d2:	2300      	movs	r3, #0
 81085d4:	6123      	str	r3, [r4, #16]
 81085d6:	4615      	mov	r5, r2
 81085d8:	e7ba      	b.n	8108550 <_printf_i+0x150>
 81085da:	682b      	ldr	r3, [r5, #0]
 81085dc:	1d1a      	adds	r2, r3, #4
 81085de:	602a      	str	r2, [r5, #0]
 81085e0:	681d      	ldr	r5, [r3, #0]
 81085e2:	6862      	ldr	r2, [r4, #4]
 81085e4:	2100      	movs	r1, #0
 81085e6:	4628      	mov	r0, r5
 81085e8:	f7f7 fe82 	bl	81002f0 <memchr>
 81085ec:	b108      	cbz	r0, 81085f2 <_printf_i+0x1f2>
 81085ee:	1b40      	subs	r0, r0, r5
 81085f0:	6060      	str	r0, [r4, #4]
 81085f2:	6863      	ldr	r3, [r4, #4]
 81085f4:	6123      	str	r3, [r4, #16]
 81085f6:	2300      	movs	r3, #0
 81085f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81085fc:	e7a8      	b.n	8108550 <_printf_i+0x150>
 81085fe:	6923      	ldr	r3, [r4, #16]
 8108600:	462a      	mov	r2, r5
 8108602:	4649      	mov	r1, r9
 8108604:	4640      	mov	r0, r8
 8108606:	47d0      	blx	sl
 8108608:	3001      	adds	r0, #1
 810860a:	d0ab      	beq.n	8108564 <_printf_i+0x164>
 810860c:	6823      	ldr	r3, [r4, #0]
 810860e:	079b      	lsls	r3, r3, #30
 8108610:	d413      	bmi.n	810863a <_printf_i+0x23a>
 8108612:	68e0      	ldr	r0, [r4, #12]
 8108614:	9b03      	ldr	r3, [sp, #12]
 8108616:	4298      	cmp	r0, r3
 8108618:	bfb8      	it	lt
 810861a:	4618      	movlt	r0, r3
 810861c:	e7a4      	b.n	8108568 <_printf_i+0x168>
 810861e:	2301      	movs	r3, #1
 8108620:	4632      	mov	r2, r6
 8108622:	4649      	mov	r1, r9
 8108624:	4640      	mov	r0, r8
 8108626:	47d0      	blx	sl
 8108628:	3001      	adds	r0, #1
 810862a:	d09b      	beq.n	8108564 <_printf_i+0x164>
 810862c:	3501      	adds	r5, #1
 810862e:	68e3      	ldr	r3, [r4, #12]
 8108630:	9903      	ldr	r1, [sp, #12]
 8108632:	1a5b      	subs	r3, r3, r1
 8108634:	42ab      	cmp	r3, r5
 8108636:	dcf2      	bgt.n	810861e <_printf_i+0x21e>
 8108638:	e7eb      	b.n	8108612 <_printf_i+0x212>
 810863a:	2500      	movs	r5, #0
 810863c:	f104 0619 	add.w	r6, r4, #25
 8108640:	e7f5      	b.n	810862e <_printf_i+0x22e>
 8108642:	bf00      	nop
 8108644:	0810a7ce 	.word	0x0810a7ce
 8108648:	0810a7df 	.word	0x0810a7df

0810864c <quorem>:
 810864c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108650:	6903      	ldr	r3, [r0, #16]
 8108652:	690c      	ldr	r4, [r1, #16]
 8108654:	42a3      	cmp	r3, r4
 8108656:	4607      	mov	r7, r0
 8108658:	f2c0 8081 	blt.w	810875e <quorem+0x112>
 810865c:	3c01      	subs	r4, #1
 810865e:	f101 0814 	add.w	r8, r1, #20
 8108662:	f100 0514 	add.w	r5, r0, #20
 8108666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810866a:	9301      	str	r3, [sp, #4]
 810866c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108674:	3301      	adds	r3, #1
 8108676:	429a      	cmp	r2, r3
 8108678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810867c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108680:	fbb2 f6f3 	udiv	r6, r2, r3
 8108684:	d331      	bcc.n	81086ea <quorem+0x9e>
 8108686:	f04f 0e00 	mov.w	lr, #0
 810868a:	4640      	mov	r0, r8
 810868c:	46ac      	mov	ip, r5
 810868e:	46f2      	mov	sl, lr
 8108690:	f850 2b04 	ldr.w	r2, [r0], #4
 8108694:	b293      	uxth	r3, r2
 8108696:	fb06 e303 	mla	r3, r6, r3, lr
 810869a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810869e:	b29b      	uxth	r3, r3
 81086a0:	ebaa 0303 	sub.w	r3, sl, r3
 81086a4:	f8dc a000 	ldr.w	sl, [ip]
 81086a8:	0c12      	lsrs	r2, r2, #16
 81086aa:	fa13 f38a 	uxtah	r3, r3, sl
 81086ae:	fb06 e202 	mla	r2, r6, r2, lr
 81086b2:	9300      	str	r3, [sp, #0]
 81086b4:	9b00      	ldr	r3, [sp, #0]
 81086b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81086ba:	b292      	uxth	r2, r2
 81086bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 81086c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81086c4:	f8bd 3000 	ldrh.w	r3, [sp]
 81086c8:	4581      	cmp	r9, r0
 81086ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81086ce:	f84c 3b04 	str.w	r3, [ip], #4
 81086d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81086d6:	d2db      	bcs.n	8108690 <quorem+0x44>
 81086d8:	f855 300b 	ldr.w	r3, [r5, fp]
 81086dc:	b92b      	cbnz	r3, 81086ea <quorem+0x9e>
 81086de:	9b01      	ldr	r3, [sp, #4]
 81086e0:	3b04      	subs	r3, #4
 81086e2:	429d      	cmp	r5, r3
 81086e4:	461a      	mov	r2, r3
 81086e6:	d32e      	bcc.n	8108746 <quorem+0xfa>
 81086e8:	613c      	str	r4, [r7, #16]
 81086ea:	4638      	mov	r0, r7
 81086ec:	f001 f8b8 	bl	8109860 <__mcmp>
 81086f0:	2800      	cmp	r0, #0
 81086f2:	db24      	blt.n	810873e <quorem+0xf2>
 81086f4:	3601      	adds	r6, #1
 81086f6:	4628      	mov	r0, r5
 81086f8:	f04f 0c00 	mov.w	ip, #0
 81086fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8108700:	f8d0 e000 	ldr.w	lr, [r0]
 8108704:	b293      	uxth	r3, r2
 8108706:	ebac 0303 	sub.w	r3, ip, r3
 810870a:	0c12      	lsrs	r2, r2, #16
 810870c:	fa13 f38e 	uxtah	r3, r3, lr
 8108710:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108718:	b29b      	uxth	r3, r3
 810871a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810871e:	45c1      	cmp	r9, r8
 8108720:	f840 3b04 	str.w	r3, [r0], #4
 8108724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8108728:	d2e8      	bcs.n	81086fc <quorem+0xb0>
 810872a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810872e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108732:	b922      	cbnz	r2, 810873e <quorem+0xf2>
 8108734:	3b04      	subs	r3, #4
 8108736:	429d      	cmp	r5, r3
 8108738:	461a      	mov	r2, r3
 810873a:	d30a      	bcc.n	8108752 <quorem+0x106>
 810873c:	613c      	str	r4, [r7, #16]
 810873e:	4630      	mov	r0, r6
 8108740:	b003      	add	sp, #12
 8108742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108746:	6812      	ldr	r2, [r2, #0]
 8108748:	3b04      	subs	r3, #4
 810874a:	2a00      	cmp	r2, #0
 810874c:	d1cc      	bne.n	81086e8 <quorem+0x9c>
 810874e:	3c01      	subs	r4, #1
 8108750:	e7c7      	b.n	81086e2 <quorem+0x96>
 8108752:	6812      	ldr	r2, [r2, #0]
 8108754:	3b04      	subs	r3, #4
 8108756:	2a00      	cmp	r2, #0
 8108758:	d1f0      	bne.n	810873c <quorem+0xf0>
 810875a:	3c01      	subs	r4, #1
 810875c:	e7eb      	b.n	8108736 <quorem+0xea>
 810875e:	2000      	movs	r0, #0
 8108760:	e7ee      	b.n	8108740 <quorem+0xf4>
 8108762:	0000      	movs	r0, r0
 8108764:	0000      	movs	r0, r0
	...

08108768 <_dtoa_r>:
 8108768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810876c:	ed2d 8b04 	vpush	{d8-d9}
 8108770:	ec57 6b10 	vmov	r6, r7, d0
 8108774:	b093      	sub	sp, #76	; 0x4c
 8108776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810877c:	9106      	str	r1, [sp, #24]
 810877e:	ee10 aa10 	vmov	sl, s0
 8108782:	4604      	mov	r4, r0
 8108784:	9209      	str	r2, [sp, #36]	; 0x24
 8108786:	930c      	str	r3, [sp, #48]	; 0x30
 8108788:	46bb      	mov	fp, r7
 810878a:	b975      	cbnz	r5, 81087aa <_dtoa_r+0x42>
 810878c:	2010      	movs	r0, #16
 810878e:	f000 fddd 	bl	810934c <malloc>
 8108792:	4602      	mov	r2, r0
 8108794:	6260      	str	r0, [r4, #36]	; 0x24
 8108796:	b920      	cbnz	r0, 81087a2 <_dtoa_r+0x3a>
 8108798:	4ba7      	ldr	r3, [pc, #668]	; (8108a38 <_dtoa_r+0x2d0>)
 810879a:	21ea      	movs	r1, #234	; 0xea
 810879c:	48a7      	ldr	r0, [pc, #668]	; (8108a3c <_dtoa_r+0x2d4>)
 810879e:	f001 fa67 	bl	8109c70 <__assert_func>
 81087a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81087a6:	6005      	str	r5, [r0, #0]
 81087a8:	60c5      	str	r5, [r0, #12]
 81087aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81087ac:	6819      	ldr	r1, [r3, #0]
 81087ae:	b151      	cbz	r1, 81087c6 <_dtoa_r+0x5e>
 81087b0:	685a      	ldr	r2, [r3, #4]
 81087b2:	604a      	str	r2, [r1, #4]
 81087b4:	2301      	movs	r3, #1
 81087b6:	4093      	lsls	r3, r2
 81087b8:	608b      	str	r3, [r1, #8]
 81087ba:	4620      	mov	r0, r4
 81087bc:	f000 fe0e 	bl	81093dc <_Bfree>
 81087c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81087c2:	2200      	movs	r2, #0
 81087c4:	601a      	str	r2, [r3, #0]
 81087c6:	1e3b      	subs	r3, r7, #0
 81087c8:	bfaa      	itet	ge
 81087ca:	2300      	movge	r3, #0
 81087cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 81087d0:	f8c8 3000 	strge.w	r3, [r8]
 81087d4:	4b9a      	ldr	r3, [pc, #616]	; (8108a40 <_dtoa_r+0x2d8>)
 81087d6:	bfbc      	itt	lt
 81087d8:	2201      	movlt	r2, #1
 81087da:	f8c8 2000 	strlt.w	r2, [r8]
 81087de:	ea33 030b 	bics.w	r3, r3, fp
 81087e2:	d11b      	bne.n	810881c <_dtoa_r+0xb4>
 81087e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81087e6:	f242 730f 	movw	r3, #9999	; 0x270f
 81087ea:	6013      	str	r3, [r2, #0]
 81087ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81087f0:	4333      	orrs	r3, r6
 81087f2:	f000 8592 	beq.w	810931a <_dtoa_r+0xbb2>
 81087f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81087f8:	b963      	cbnz	r3, 8108814 <_dtoa_r+0xac>
 81087fa:	4b92      	ldr	r3, [pc, #584]	; (8108a44 <_dtoa_r+0x2dc>)
 81087fc:	e022      	b.n	8108844 <_dtoa_r+0xdc>
 81087fe:	4b92      	ldr	r3, [pc, #584]	; (8108a48 <_dtoa_r+0x2e0>)
 8108800:	9301      	str	r3, [sp, #4]
 8108802:	3308      	adds	r3, #8
 8108804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8108806:	6013      	str	r3, [r2, #0]
 8108808:	9801      	ldr	r0, [sp, #4]
 810880a:	b013      	add	sp, #76	; 0x4c
 810880c:	ecbd 8b04 	vpop	{d8-d9}
 8108810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108814:	4b8b      	ldr	r3, [pc, #556]	; (8108a44 <_dtoa_r+0x2dc>)
 8108816:	9301      	str	r3, [sp, #4]
 8108818:	3303      	adds	r3, #3
 810881a:	e7f3      	b.n	8108804 <_dtoa_r+0x9c>
 810881c:	2200      	movs	r2, #0
 810881e:	2300      	movs	r3, #0
 8108820:	4650      	mov	r0, sl
 8108822:	4659      	mov	r1, fp
 8108824:	f7f8 f9d8 	bl	8100bd8 <__aeabi_dcmpeq>
 8108828:	ec4b ab19 	vmov	d9, sl, fp
 810882c:	4680      	mov	r8, r0
 810882e:	b158      	cbz	r0, 8108848 <_dtoa_r+0xe0>
 8108830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108832:	2301      	movs	r3, #1
 8108834:	6013      	str	r3, [r2, #0]
 8108836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108838:	2b00      	cmp	r3, #0
 810883a:	f000 856b 	beq.w	8109314 <_dtoa_r+0xbac>
 810883e:	4883      	ldr	r0, [pc, #524]	; (8108a4c <_dtoa_r+0x2e4>)
 8108840:	6018      	str	r0, [r3, #0]
 8108842:	1e43      	subs	r3, r0, #1
 8108844:	9301      	str	r3, [sp, #4]
 8108846:	e7df      	b.n	8108808 <_dtoa_r+0xa0>
 8108848:	ec4b ab10 	vmov	d0, sl, fp
 810884c:	aa10      	add	r2, sp, #64	; 0x40
 810884e:	a911      	add	r1, sp, #68	; 0x44
 8108850:	4620      	mov	r0, r4
 8108852:	f001 f8ab 	bl	81099ac <__d2b>
 8108856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810885a:	ee08 0a10 	vmov	s16, r0
 810885e:	2d00      	cmp	r5, #0
 8108860:	f000 8084 	beq.w	810896c <_dtoa_r+0x204>
 8108864:	ee19 3a90 	vmov	r3, s19
 8108868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810886c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8108870:	4656      	mov	r6, sl
 8108872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8108876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810887a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810887e:	4b74      	ldr	r3, [pc, #464]	; (8108a50 <_dtoa_r+0x2e8>)
 8108880:	2200      	movs	r2, #0
 8108882:	4630      	mov	r0, r6
 8108884:	4639      	mov	r1, r7
 8108886:	f7f7 fd87 	bl	8100398 <__aeabi_dsub>
 810888a:	a365      	add	r3, pc, #404	; (adr r3, 8108a20 <_dtoa_r+0x2b8>)
 810888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108890:	f7f7 ff3a 	bl	8100708 <__aeabi_dmul>
 8108894:	a364      	add	r3, pc, #400	; (adr r3, 8108a28 <_dtoa_r+0x2c0>)
 8108896:	e9d3 2300 	ldrd	r2, r3, [r3]
 810889a:	f7f7 fd7f 	bl	810039c <__adddf3>
 810889e:	4606      	mov	r6, r0
 81088a0:	4628      	mov	r0, r5
 81088a2:	460f      	mov	r7, r1
 81088a4:	f7f7 fec6 	bl	8100634 <__aeabi_i2d>
 81088a8:	a361      	add	r3, pc, #388	; (adr r3, 8108a30 <_dtoa_r+0x2c8>)
 81088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088ae:	f7f7 ff2b 	bl	8100708 <__aeabi_dmul>
 81088b2:	4602      	mov	r2, r0
 81088b4:	460b      	mov	r3, r1
 81088b6:	4630      	mov	r0, r6
 81088b8:	4639      	mov	r1, r7
 81088ba:	f7f7 fd6f 	bl	810039c <__adddf3>
 81088be:	4606      	mov	r6, r0
 81088c0:	460f      	mov	r7, r1
 81088c2:	f7f8 f9d1 	bl	8100c68 <__aeabi_d2iz>
 81088c6:	2200      	movs	r2, #0
 81088c8:	9000      	str	r0, [sp, #0]
 81088ca:	2300      	movs	r3, #0
 81088cc:	4630      	mov	r0, r6
 81088ce:	4639      	mov	r1, r7
 81088d0:	f7f8 f98c 	bl	8100bec <__aeabi_dcmplt>
 81088d4:	b150      	cbz	r0, 81088ec <_dtoa_r+0x184>
 81088d6:	9800      	ldr	r0, [sp, #0]
 81088d8:	f7f7 feac 	bl	8100634 <__aeabi_i2d>
 81088dc:	4632      	mov	r2, r6
 81088de:	463b      	mov	r3, r7
 81088e0:	f7f8 f97a 	bl	8100bd8 <__aeabi_dcmpeq>
 81088e4:	b910      	cbnz	r0, 81088ec <_dtoa_r+0x184>
 81088e6:	9b00      	ldr	r3, [sp, #0]
 81088e8:	3b01      	subs	r3, #1
 81088ea:	9300      	str	r3, [sp, #0]
 81088ec:	9b00      	ldr	r3, [sp, #0]
 81088ee:	2b16      	cmp	r3, #22
 81088f0:	d85a      	bhi.n	81089a8 <_dtoa_r+0x240>
 81088f2:	9a00      	ldr	r2, [sp, #0]
 81088f4:	4b57      	ldr	r3, [pc, #348]	; (8108a54 <_dtoa_r+0x2ec>)
 81088f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088fe:	ec51 0b19 	vmov	r0, r1, d9
 8108902:	f7f8 f973 	bl	8100bec <__aeabi_dcmplt>
 8108906:	2800      	cmp	r0, #0
 8108908:	d050      	beq.n	81089ac <_dtoa_r+0x244>
 810890a:	9b00      	ldr	r3, [sp, #0]
 810890c:	3b01      	subs	r3, #1
 810890e:	9300      	str	r3, [sp, #0]
 8108910:	2300      	movs	r3, #0
 8108912:	930b      	str	r3, [sp, #44]	; 0x2c
 8108914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108916:	1b5d      	subs	r5, r3, r5
 8108918:	1e6b      	subs	r3, r5, #1
 810891a:	9305      	str	r3, [sp, #20]
 810891c:	bf45      	ittet	mi
 810891e:	f1c5 0301 	rsbmi	r3, r5, #1
 8108922:	9304      	strmi	r3, [sp, #16]
 8108924:	2300      	movpl	r3, #0
 8108926:	2300      	movmi	r3, #0
 8108928:	bf4c      	ite	mi
 810892a:	9305      	strmi	r3, [sp, #20]
 810892c:	9304      	strpl	r3, [sp, #16]
 810892e:	9b00      	ldr	r3, [sp, #0]
 8108930:	2b00      	cmp	r3, #0
 8108932:	db3d      	blt.n	81089b0 <_dtoa_r+0x248>
 8108934:	9b05      	ldr	r3, [sp, #20]
 8108936:	9a00      	ldr	r2, [sp, #0]
 8108938:	920a      	str	r2, [sp, #40]	; 0x28
 810893a:	4413      	add	r3, r2
 810893c:	9305      	str	r3, [sp, #20]
 810893e:	2300      	movs	r3, #0
 8108940:	9307      	str	r3, [sp, #28]
 8108942:	9b06      	ldr	r3, [sp, #24]
 8108944:	2b09      	cmp	r3, #9
 8108946:	f200 8089 	bhi.w	8108a5c <_dtoa_r+0x2f4>
 810894a:	2b05      	cmp	r3, #5
 810894c:	bfc4      	itt	gt
 810894e:	3b04      	subgt	r3, #4
 8108950:	9306      	strgt	r3, [sp, #24]
 8108952:	9b06      	ldr	r3, [sp, #24]
 8108954:	f1a3 0302 	sub.w	r3, r3, #2
 8108958:	bfcc      	ite	gt
 810895a:	2500      	movgt	r5, #0
 810895c:	2501      	movle	r5, #1
 810895e:	2b03      	cmp	r3, #3
 8108960:	f200 8087 	bhi.w	8108a72 <_dtoa_r+0x30a>
 8108964:	e8df f003 	tbb	[pc, r3]
 8108968:	59383a2d 	.word	0x59383a2d
 810896c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8108970:	441d      	add	r5, r3
 8108972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8108976:	2b20      	cmp	r3, #32
 8108978:	bfc1      	itttt	gt
 810897a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810897e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8108982:	fa0b f303 	lslgt.w	r3, fp, r3
 8108986:	fa26 f000 	lsrgt.w	r0, r6, r0
 810898a:	bfda      	itte	le
 810898c:	f1c3 0320 	rsble	r3, r3, #32
 8108990:	fa06 f003 	lslle.w	r0, r6, r3
 8108994:	4318      	orrgt	r0, r3
 8108996:	f7f7 fe3d 	bl	8100614 <__aeabi_ui2d>
 810899a:	2301      	movs	r3, #1
 810899c:	4606      	mov	r6, r0
 810899e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81089a2:	3d01      	subs	r5, #1
 81089a4:	930e      	str	r3, [sp, #56]	; 0x38
 81089a6:	e76a      	b.n	810887e <_dtoa_r+0x116>
 81089a8:	2301      	movs	r3, #1
 81089aa:	e7b2      	b.n	8108912 <_dtoa_r+0x1aa>
 81089ac:	900b      	str	r0, [sp, #44]	; 0x2c
 81089ae:	e7b1      	b.n	8108914 <_dtoa_r+0x1ac>
 81089b0:	9b04      	ldr	r3, [sp, #16]
 81089b2:	9a00      	ldr	r2, [sp, #0]
 81089b4:	1a9b      	subs	r3, r3, r2
 81089b6:	9304      	str	r3, [sp, #16]
 81089b8:	4253      	negs	r3, r2
 81089ba:	9307      	str	r3, [sp, #28]
 81089bc:	2300      	movs	r3, #0
 81089be:	930a      	str	r3, [sp, #40]	; 0x28
 81089c0:	e7bf      	b.n	8108942 <_dtoa_r+0x1da>
 81089c2:	2300      	movs	r3, #0
 81089c4:	9308      	str	r3, [sp, #32]
 81089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81089c8:	2b00      	cmp	r3, #0
 81089ca:	dc55      	bgt.n	8108a78 <_dtoa_r+0x310>
 81089cc:	2301      	movs	r3, #1
 81089ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81089d2:	461a      	mov	r2, r3
 81089d4:	9209      	str	r2, [sp, #36]	; 0x24
 81089d6:	e00c      	b.n	81089f2 <_dtoa_r+0x28a>
 81089d8:	2301      	movs	r3, #1
 81089da:	e7f3      	b.n	81089c4 <_dtoa_r+0x25c>
 81089dc:	2300      	movs	r3, #0
 81089de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81089e0:	9308      	str	r3, [sp, #32]
 81089e2:	9b00      	ldr	r3, [sp, #0]
 81089e4:	4413      	add	r3, r2
 81089e6:	9302      	str	r3, [sp, #8]
 81089e8:	3301      	adds	r3, #1
 81089ea:	2b01      	cmp	r3, #1
 81089ec:	9303      	str	r3, [sp, #12]
 81089ee:	bfb8      	it	lt
 81089f0:	2301      	movlt	r3, #1
 81089f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81089f4:	2200      	movs	r2, #0
 81089f6:	6042      	str	r2, [r0, #4]
 81089f8:	2204      	movs	r2, #4
 81089fa:	f102 0614 	add.w	r6, r2, #20
 81089fe:	429e      	cmp	r6, r3
 8108a00:	6841      	ldr	r1, [r0, #4]
 8108a02:	d93d      	bls.n	8108a80 <_dtoa_r+0x318>
 8108a04:	4620      	mov	r0, r4
 8108a06:	f000 fca9 	bl	810935c <_Balloc>
 8108a0a:	9001      	str	r0, [sp, #4]
 8108a0c:	2800      	cmp	r0, #0
 8108a0e:	d13b      	bne.n	8108a88 <_dtoa_r+0x320>
 8108a10:	4b11      	ldr	r3, [pc, #68]	; (8108a58 <_dtoa_r+0x2f0>)
 8108a12:	4602      	mov	r2, r0
 8108a14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8108a18:	e6c0      	b.n	810879c <_dtoa_r+0x34>
 8108a1a:	2301      	movs	r3, #1
 8108a1c:	e7df      	b.n	81089de <_dtoa_r+0x276>
 8108a1e:	bf00      	nop
 8108a20:	636f4361 	.word	0x636f4361
 8108a24:	3fd287a7 	.word	0x3fd287a7
 8108a28:	8b60c8b3 	.word	0x8b60c8b3
 8108a2c:	3fc68a28 	.word	0x3fc68a28
 8108a30:	509f79fb 	.word	0x509f79fb
 8108a34:	3fd34413 	.word	0x3fd34413
 8108a38:	0810a7fd 	.word	0x0810a7fd
 8108a3c:	0810a814 	.word	0x0810a814
 8108a40:	7ff00000 	.word	0x7ff00000
 8108a44:	0810a7f9 	.word	0x0810a7f9
 8108a48:	0810a7f0 	.word	0x0810a7f0
 8108a4c:	0810a7cd 	.word	0x0810a7cd
 8108a50:	3ff80000 	.word	0x3ff80000
 8108a54:	0810a908 	.word	0x0810a908
 8108a58:	0810a86f 	.word	0x0810a86f
 8108a5c:	2501      	movs	r5, #1
 8108a5e:	2300      	movs	r3, #0
 8108a60:	9306      	str	r3, [sp, #24]
 8108a62:	9508      	str	r5, [sp, #32]
 8108a64:	f04f 33ff 	mov.w	r3, #4294967295
 8108a68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108a6c:	2200      	movs	r2, #0
 8108a6e:	2312      	movs	r3, #18
 8108a70:	e7b0      	b.n	81089d4 <_dtoa_r+0x26c>
 8108a72:	2301      	movs	r3, #1
 8108a74:	9308      	str	r3, [sp, #32]
 8108a76:	e7f5      	b.n	8108a64 <_dtoa_r+0x2fc>
 8108a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108a7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108a7e:	e7b8      	b.n	81089f2 <_dtoa_r+0x28a>
 8108a80:	3101      	adds	r1, #1
 8108a82:	6041      	str	r1, [r0, #4]
 8108a84:	0052      	lsls	r2, r2, #1
 8108a86:	e7b8      	b.n	81089fa <_dtoa_r+0x292>
 8108a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108a8a:	9a01      	ldr	r2, [sp, #4]
 8108a8c:	601a      	str	r2, [r3, #0]
 8108a8e:	9b03      	ldr	r3, [sp, #12]
 8108a90:	2b0e      	cmp	r3, #14
 8108a92:	f200 809d 	bhi.w	8108bd0 <_dtoa_r+0x468>
 8108a96:	2d00      	cmp	r5, #0
 8108a98:	f000 809a 	beq.w	8108bd0 <_dtoa_r+0x468>
 8108a9c:	9b00      	ldr	r3, [sp, #0]
 8108a9e:	2b00      	cmp	r3, #0
 8108aa0:	dd32      	ble.n	8108b08 <_dtoa_r+0x3a0>
 8108aa2:	4ab7      	ldr	r2, [pc, #732]	; (8108d80 <_dtoa_r+0x618>)
 8108aa4:	f003 030f 	and.w	r3, r3, #15
 8108aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108ab0:	9b00      	ldr	r3, [sp, #0]
 8108ab2:	05d8      	lsls	r0, r3, #23
 8108ab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8108ab8:	d516      	bpl.n	8108ae8 <_dtoa_r+0x380>
 8108aba:	4bb2      	ldr	r3, [pc, #712]	; (8108d84 <_dtoa_r+0x61c>)
 8108abc:	ec51 0b19 	vmov	r0, r1, d9
 8108ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8108ac4:	f7f7 ff4a 	bl	810095c <__aeabi_ddiv>
 8108ac8:	f007 070f 	and.w	r7, r7, #15
 8108acc:	4682      	mov	sl, r0
 8108ace:	468b      	mov	fp, r1
 8108ad0:	2503      	movs	r5, #3
 8108ad2:	4eac      	ldr	r6, [pc, #688]	; (8108d84 <_dtoa_r+0x61c>)
 8108ad4:	b957      	cbnz	r7, 8108aec <_dtoa_r+0x384>
 8108ad6:	4642      	mov	r2, r8
 8108ad8:	464b      	mov	r3, r9
 8108ada:	4650      	mov	r0, sl
 8108adc:	4659      	mov	r1, fp
 8108ade:	f7f7 ff3d 	bl	810095c <__aeabi_ddiv>
 8108ae2:	4682      	mov	sl, r0
 8108ae4:	468b      	mov	fp, r1
 8108ae6:	e028      	b.n	8108b3a <_dtoa_r+0x3d2>
 8108ae8:	2502      	movs	r5, #2
 8108aea:	e7f2      	b.n	8108ad2 <_dtoa_r+0x36a>
 8108aec:	07f9      	lsls	r1, r7, #31
 8108aee:	d508      	bpl.n	8108b02 <_dtoa_r+0x39a>
 8108af0:	4640      	mov	r0, r8
 8108af2:	4649      	mov	r1, r9
 8108af4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108af8:	f7f7 fe06 	bl	8100708 <__aeabi_dmul>
 8108afc:	3501      	adds	r5, #1
 8108afe:	4680      	mov	r8, r0
 8108b00:	4689      	mov	r9, r1
 8108b02:	107f      	asrs	r7, r7, #1
 8108b04:	3608      	adds	r6, #8
 8108b06:	e7e5      	b.n	8108ad4 <_dtoa_r+0x36c>
 8108b08:	f000 809b 	beq.w	8108c42 <_dtoa_r+0x4da>
 8108b0c:	9b00      	ldr	r3, [sp, #0]
 8108b0e:	4f9d      	ldr	r7, [pc, #628]	; (8108d84 <_dtoa_r+0x61c>)
 8108b10:	425e      	negs	r6, r3
 8108b12:	4b9b      	ldr	r3, [pc, #620]	; (8108d80 <_dtoa_r+0x618>)
 8108b14:	f006 020f 	and.w	r2, r6, #15
 8108b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b20:	ec51 0b19 	vmov	r0, r1, d9
 8108b24:	f7f7 fdf0 	bl	8100708 <__aeabi_dmul>
 8108b28:	1136      	asrs	r6, r6, #4
 8108b2a:	4682      	mov	sl, r0
 8108b2c:	468b      	mov	fp, r1
 8108b2e:	2300      	movs	r3, #0
 8108b30:	2502      	movs	r5, #2
 8108b32:	2e00      	cmp	r6, #0
 8108b34:	d17a      	bne.n	8108c2c <_dtoa_r+0x4c4>
 8108b36:	2b00      	cmp	r3, #0
 8108b38:	d1d3      	bne.n	8108ae2 <_dtoa_r+0x37a>
 8108b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	f000 8082 	beq.w	8108c46 <_dtoa_r+0x4de>
 8108b42:	4b91      	ldr	r3, [pc, #580]	; (8108d88 <_dtoa_r+0x620>)
 8108b44:	2200      	movs	r2, #0
 8108b46:	4650      	mov	r0, sl
 8108b48:	4659      	mov	r1, fp
 8108b4a:	f7f8 f84f 	bl	8100bec <__aeabi_dcmplt>
 8108b4e:	2800      	cmp	r0, #0
 8108b50:	d079      	beq.n	8108c46 <_dtoa_r+0x4de>
 8108b52:	9b03      	ldr	r3, [sp, #12]
 8108b54:	2b00      	cmp	r3, #0
 8108b56:	d076      	beq.n	8108c46 <_dtoa_r+0x4de>
 8108b58:	9b02      	ldr	r3, [sp, #8]
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	dd36      	ble.n	8108bcc <_dtoa_r+0x464>
 8108b5e:	9b00      	ldr	r3, [sp, #0]
 8108b60:	4650      	mov	r0, sl
 8108b62:	4659      	mov	r1, fp
 8108b64:	1e5f      	subs	r7, r3, #1
 8108b66:	2200      	movs	r2, #0
 8108b68:	4b88      	ldr	r3, [pc, #544]	; (8108d8c <_dtoa_r+0x624>)
 8108b6a:	f7f7 fdcd 	bl	8100708 <__aeabi_dmul>
 8108b6e:	9e02      	ldr	r6, [sp, #8]
 8108b70:	4682      	mov	sl, r0
 8108b72:	468b      	mov	fp, r1
 8108b74:	3501      	adds	r5, #1
 8108b76:	4628      	mov	r0, r5
 8108b78:	f7f7 fd5c 	bl	8100634 <__aeabi_i2d>
 8108b7c:	4652      	mov	r2, sl
 8108b7e:	465b      	mov	r3, fp
 8108b80:	f7f7 fdc2 	bl	8100708 <__aeabi_dmul>
 8108b84:	4b82      	ldr	r3, [pc, #520]	; (8108d90 <_dtoa_r+0x628>)
 8108b86:	2200      	movs	r2, #0
 8108b88:	f7f7 fc08 	bl	810039c <__adddf3>
 8108b8c:	46d0      	mov	r8, sl
 8108b8e:	46d9      	mov	r9, fp
 8108b90:	4682      	mov	sl, r0
 8108b92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8108b96:	2e00      	cmp	r6, #0
 8108b98:	d158      	bne.n	8108c4c <_dtoa_r+0x4e4>
 8108b9a:	4b7e      	ldr	r3, [pc, #504]	; (8108d94 <_dtoa_r+0x62c>)
 8108b9c:	2200      	movs	r2, #0
 8108b9e:	4640      	mov	r0, r8
 8108ba0:	4649      	mov	r1, r9
 8108ba2:	f7f7 fbf9 	bl	8100398 <__aeabi_dsub>
 8108ba6:	4652      	mov	r2, sl
 8108ba8:	465b      	mov	r3, fp
 8108baa:	4680      	mov	r8, r0
 8108bac:	4689      	mov	r9, r1
 8108bae:	f7f8 f83b 	bl	8100c28 <__aeabi_dcmpgt>
 8108bb2:	2800      	cmp	r0, #0
 8108bb4:	f040 8295 	bne.w	81090e2 <_dtoa_r+0x97a>
 8108bb8:	4652      	mov	r2, sl
 8108bba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108bbe:	4640      	mov	r0, r8
 8108bc0:	4649      	mov	r1, r9
 8108bc2:	f7f8 f813 	bl	8100bec <__aeabi_dcmplt>
 8108bc6:	2800      	cmp	r0, #0
 8108bc8:	f040 8289 	bne.w	81090de <_dtoa_r+0x976>
 8108bcc:	ec5b ab19 	vmov	sl, fp, d9
 8108bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	f2c0 8148 	blt.w	8108e68 <_dtoa_r+0x700>
 8108bd8:	9a00      	ldr	r2, [sp, #0]
 8108bda:	2a0e      	cmp	r2, #14
 8108bdc:	f300 8144 	bgt.w	8108e68 <_dtoa_r+0x700>
 8108be0:	4b67      	ldr	r3, [pc, #412]	; (8108d80 <_dtoa_r+0x618>)
 8108be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bec:	2b00      	cmp	r3, #0
 8108bee:	f280 80d5 	bge.w	8108d9c <_dtoa_r+0x634>
 8108bf2:	9b03      	ldr	r3, [sp, #12]
 8108bf4:	2b00      	cmp	r3, #0
 8108bf6:	f300 80d1 	bgt.w	8108d9c <_dtoa_r+0x634>
 8108bfa:	f040 826f 	bne.w	81090dc <_dtoa_r+0x974>
 8108bfe:	4b65      	ldr	r3, [pc, #404]	; (8108d94 <_dtoa_r+0x62c>)
 8108c00:	2200      	movs	r2, #0
 8108c02:	4640      	mov	r0, r8
 8108c04:	4649      	mov	r1, r9
 8108c06:	f7f7 fd7f 	bl	8100708 <__aeabi_dmul>
 8108c0a:	4652      	mov	r2, sl
 8108c0c:	465b      	mov	r3, fp
 8108c0e:	f7f8 f801 	bl	8100c14 <__aeabi_dcmpge>
 8108c12:	9e03      	ldr	r6, [sp, #12]
 8108c14:	4637      	mov	r7, r6
 8108c16:	2800      	cmp	r0, #0
 8108c18:	f040 8245 	bne.w	81090a6 <_dtoa_r+0x93e>
 8108c1c:	9d01      	ldr	r5, [sp, #4]
 8108c1e:	2331      	movs	r3, #49	; 0x31
 8108c20:	f805 3b01 	strb.w	r3, [r5], #1
 8108c24:	9b00      	ldr	r3, [sp, #0]
 8108c26:	3301      	adds	r3, #1
 8108c28:	9300      	str	r3, [sp, #0]
 8108c2a:	e240      	b.n	81090ae <_dtoa_r+0x946>
 8108c2c:	07f2      	lsls	r2, r6, #31
 8108c2e:	d505      	bpl.n	8108c3c <_dtoa_r+0x4d4>
 8108c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108c34:	f7f7 fd68 	bl	8100708 <__aeabi_dmul>
 8108c38:	3501      	adds	r5, #1
 8108c3a:	2301      	movs	r3, #1
 8108c3c:	1076      	asrs	r6, r6, #1
 8108c3e:	3708      	adds	r7, #8
 8108c40:	e777      	b.n	8108b32 <_dtoa_r+0x3ca>
 8108c42:	2502      	movs	r5, #2
 8108c44:	e779      	b.n	8108b3a <_dtoa_r+0x3d2>
 8108c46:	9f00      	ldr	r7, [sp, #0]
 8108c48:	9e03      	ldr	r6, [sp, #12]
 8108c4a:	e794      	b.n	8108b76 <_dtoa_r+0x40e>
 8108c4c:	9901      	ldr	r1, [sp, #4]
 8108c4e:	4b4c      	ldr	r3, [pc, #304]	; (8108d80 <_dtoa_r+0x618>)
 8108c50:	4431      	add	r1, r6
 8108c52:	910d      	str	r1, [sp, #52]	; 0x34
 8108c54:	9908      	ldr	r1, [sp, #32]
 8108c56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8108c5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8108c5e:	2900      	cmp	r1, #0
 8108c60:	d043      	beq.n	8108cea <_dtoa_r+0x582>
 8108c62:	494d      	ldr	r1, [pc, #308]	; (8108d98 <_dtoa_r+0x630>)
 8108c64:	2000      	movs	r0, #0
 8108c66:	f7f7 fe79 	bl	810095c <__aeabi_ddiv>
 8108c6a:	4652      	mov	r2, sl
 8108c6c:	465b      	mov	r3, fp
 8108c6e:	f7f7 fb93 	bl	8100398 <__aeabi_dsub>
 8108c72:	9d01      	ldr	r5, [sp, #4]
 8108c74:	4682      	mov	sl, r0
 8108c76:	468b      	mov	fp, r1
 8108c78:	4649      	mov	r1, r9
 8108c7a:	4640      	mov	r0, r8
 8108c7c:	f7f7 fff4 	bl	8100c68 <__aeabi_d2iz>
 8108c80:	4606      	mov	r6, r0
 8108c82:	f7f7 fcd7 	bl	8100634 <__aeabi_i2d>
 8108c86:	4602      	mov	r2, r0
 8108c88:	460b      	mov	r3, r1
 8108c8a:	4640      	mov	r0, r8
 8108c8c:	4649      	mov	r1, r9
 8108c8e:	f7f7 fb83 	bl	8100398 <__aeabi_dsub>
 8108c92:	3630      	adds	r6, #48	; 0x30
 8108c94:	f805 6b01 	strb.w	r6, [r5], #1
 8108c98:	4652      	mov	r2, sl
 8108c9a:	465b      	mov	r3, fp
 8108c9c:	4680      	mov	r8, r0
 8108c9e:	4689      	mov	r9, r1
 8108ca0:	f7f7 ffa4 	bl	8100bec <__aeabi_dcmplt>
 8108ca4:	2800      	cmp	r0, #0
 8108ca6:	d163      	bne.n	8108d70 <_dtoa_r+0x608>
 8108ca8:	4642      	mov	r2, r8
 8108caa:	464b      	mov	r3, r9
 8108cac:	4936      	ldr	r1, [pc, #216]	; (8108d88 <_dtoa_r+0x620>)
 8108cae:	2000      	movs	r0, #0
 8108cb0:	f7f7 fb72 	bl	8100398 <__aeabi_dsub>
 8108cb4:	4652      	mov	r2, sl
 8108cb6:	465b      	mov	r3, fp
 8108cb8:	f7f7 ff98 	bl	8100bec <__aeabi_dcmplt>
 8108cbc:	2800      	cmp	r0, #0
 8108cbe:	f040 80b5 	bne.w	8108e2c <_dtoa_r+0x6c4>
 8108cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108cc4:	429d      	cmp	r5, r3
 8108cc6:	d081      	beq.n	8108bcc <_dtoa_r+0x464>
 8108cc8:	4b30      	ldr	r3, [pc, #192]	; (8108d8c <_dtoa_r+0x624>)
 8108cca:	2200      	movs	r2, #0
 8108ccc:	4650      	mov	r0, sl
 8108cce:	4659      	mov	r1, fp
 8108cd0:	f7f7 fd1a 	bl	8100708 <__aeabi_dmul>
 8108cd4:	4b2d      	ldr	r3, [pc, #180]	; (8108d8c <_dtoa_r+0x624>)
 8108cd6:	4682      	mov	sl, r0
 8108cd8:	468b      	mov	fp, r1
 8108cda:	4640      	mov	r0, r8
 8108cdc:	4649      	mov	r1, r9
 8108cde:	2200      	movs	r2, #0
 8108ce0:	f7f7 fd12 	bl	8100708 <__aeabi_dmul>
 8108ce4:	4680      	mov	r8, r0
 8108ce6:	4689      	mov	r9, r1
 8108ce8:	e7c6      	b.n	8108c78 <_dtoa_r+0x510>
 8108cea:	4650      	mov	r0, sl
 8108cec:	4659      	mov	r1, fp
 8108cee:	f7f7 fd0b 	bl	8100708 <__aeabi_dmul>
 8108cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108cf4:	9d01      	ldr	r5, [sp, #4]
 8108cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8108cf8:	4682      	mov	sl, r0
 8108cfa:	468b      	mov	fp, r1
 8108cfc:	4649      	mov	r1, r9
 8108cfe:	4640      	mov	r0, r8
 8108d00:	f7f7 ffb2 	bl	8100c68 <__aeabi_d2iz>
 8108d04:	4606      	mov	r6, r0
 8108d06:	f7f7 fc95 	bl	8100634 <__aeabi_i2d>
 8108d0a:	3630      	adds	r6, #48	; 0x30
 8108d0c:	4602      	mov	r2, r0
 8108d0e:	460b      	mov	r3, r1
 8108d10:	4640      	mov	r0, r8
 8108d12:	4649      	mov	r1, r9
 8108d14:	f7f7 fb40 	bl	8100398 <__aeabi_dsub>
 8108d18:	f805 6b01 	strb.w	r6, [r5], #1
 8108d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108d1e:	429d      	cmp	r5, r3
 8108d20:	4680      	mov	r8, r0
 8108d22:	4689      	mov	r9, r1
 8108d24:	f04f 0200 	mov.w	r2, #0
 8108d28:	d124      	bne.n	8108d74 <_dtoa_r+0x60c>
 8108d2a:	4b1b      	ldr	r3, [pc, #108]	; (8108d98 <_dtoa_r+0x630>)
 8108d2c:	4650      	mov	r0, sl
 8108d2e:	4659      	mov	r1, fp
 8108d30:	f7f7 fb34 	bl	810039c <__adddf3>
 8108d34:	4602      	mov	r2, r0
 8108d36:	460b      	mov	r3, r1
 8108d38:	4640      	mov	r0, r8
 8108d3a:	4649      	mov	r1, r9
 8108d3c:	f7f7 ff74 	bl	8100c28 <__aeabi_dcmpgt>
 8108d40:	2800      	cmp	r0, #0
 8108d42:	d173      	bne.n	8108e2c <_dtoa_r+0x6c4>
 8108d44:	4652      	mov	r2, sl
 8108d46:	465b      	mov	r3, fp
 8108d48:	4913      	ldr	r1, [pc, #76]	; (8108d98 <_dtoa_r+0x630>)
 8108d4a:	2000      	movs	r0, #0
 8108d4c:	f7f7 fb24 	bl	8100398 <__aeabi_dsub>
 8108d50:	4602      	mov	r2, r0
 8108d52:	460b      	mov	r3, r1
 8108d54:	4640      	mov	r0, r8
 8108d56:	4649      	mov	r1, r9
 8108d58:	f7f7 ff48 	bl	8100bec <__aeabi_dcmplt>
 8108d5c:	2800      	cmp	r0, #0
 8108d5e:	f43f af35 	beq.w	8108bcc <_dtoa_r+0x464>
 8108d62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8108d64:	1e6b      	subs	r3, r5, #1
 8108d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8108d68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8108d6c:	2b30      	cmp	r3, #48	; 0x30
 8108d6e:	d0f8      	beq.n	8108d62 <_dtoa_r+0x5fa>
 8108d70:	9700      	str	r7, [sp, #0]
 8108d72:	e049      	b.n	8108e08 <_dtoa_r+0x6a0>
 8108d74:	4b05      	ldr	r3, [pc, #20]	; (8108d8c <_dtoa_r+0x624>)
 8108d76:	f7f7 fcc7 	bl	8100708 <__aeabi_dmul>
 8108d7a:	4680      	mov	r8, r0
 8108d7c:	4689      	mov	r9, r1
 8108d7e:	e7bd      	b.n	8108cfc <_dtoa_r+0x594>
 8108d80:	0810a908 	.word	0x0810a908
 8108d84:	0810a8e0 	.word	0x0810a8e0
 8108d88:	3ff00000 	.word	0x3ff00000
 8108d8c:	40240000 	.word	0x40240000
 8108d90:	401c0000 	.word	0x401c0000
 8108d94:	40140000 	.word	0x40140000
 8108d98:	3fe00000 	.word	0x3fe00000
 8108d9c:	9d01      	ldr	r5, [sp, #4]
 8108d9e:	4656      	mov	r6, sl
 8108da0:	465f      	mov	r7, fp
 8108da2:	4642      	mov	r2, r8
 8108da4:	464b      	mov	r3, r9
 8108da6:	4630      	mov	r0, r6
 8108da8:	4639      	mov	r1, r7
 8108daa:	f7f7 fdd7 	bl	810095c <__aeabi_ddiv>
 8108dae:	f7f7 ff5b 	bl	8100c68 <__aeabi_d2iz>
 8108db2:	4682      	mov	sl, r0
 8108db4:	f7f7 fc3e 	bl	8100634 <__aeabi_i2d>
 8108db8:	4642      	mov	r2, r8
 8108dba:	464b      	mov	r3, r9
 8108dbc:	f7f7 fca4 	bl	8100708 <__aeabi_dmul>
 8108dc0:	4602      	mov	r2, r0
 8108dc2:	460b      	mov	r3, r1
 8108dc4:	4630      	mov	r0, r6
 8108dc6:	4639      	mov	r1, r7
 8108dc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8108dcc:	f7f7 fae4 	bl	8100398 <__aeabi_dsub>
 8108dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8108dd4:	9e01      	ldr	r6, [sp, #4]
 8108dd6:	9f03      	ldr	r7, [sp, #12]
 8108dd8:	1bae      	subs	r6, r5, r6
 8108dda:	42b7      	cmp	r7, r6
 8108ddc:	4602      	mov	r2, r0
 8108dde:	460b      	mov	r3, r1
 8108de0:	d135      	bne.n	8108e4e <_dtoa_r+0x6e6>
 8108de2:	f7f7 fadb 	bl	810039c <__adddf3>
 8108de6:	4642      	mov	r2, r8
 8108de8:	464b      	mov	r3, r9
 8108dea:	4606      	mov	r6, r0
 8108dec:	460f      	mov	r7, r1
 8108dee:	f7f7 ff1b 	bl	8100c28 <__aeabi_dcmpgt>
 8108df2:	b9d0      	cbnz	r0, 8108e2a <_dtoa_r+0x6c2>
 8108df4:	4642      	mov	r2, r8
 8108df6:	464b      	mov	r3, r9
 8108df8:	4630      	mov	r0, r6
 8108dfa:	4639      	mov	r1, r7
 8108dfc:	f7f7 feec 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e00:	b110      	cbz	r0, 8108e08 <_dtoa_r+0x6a0>
 8108e02:	f01a 0f01 	tst.w	sl, #1
 8108e06:	d110      	bne.n	8108e2a <_dtoa_r+0x6c2>
 8108e08:	4620      	mov	r0, r4
 8108e0a:	ee18 1a10 	vmov	r1, s16
 8108e0e:	f000 fae5 	bl	81093dc <_Bfree>
 8108e12:	2300      	movs	r3, #0
 8108e14:	9800      	ldr	r0, [sp, #0]
 8108e16:	702b      	strb	r3, [r5, #0]
 8108e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108e1a:	3001      	adds	r0, #1
 8108e1c:	6018      	str	r0, [r3, #0]
 8108e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108e20:	2b00      	cmp	r3, #0
 8108e22:	f43f acf1 	beq.w	8108808 <_dtoa_r+0xa0>
 8108e26:	601d      	str	r5, [r3, #0]
 8108e28:	e4ee      	b.n	8108808 <_dtoa_r+0xa0>
 8108e2a:	9f00      	ldr	r7, [sp, #0]
 8108e2c:	462b      	mov	r3, r5
 8108e2e:	461d      	mov	r5, r3
 8108e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108e34:	2a39      	cmp	r2, #57	; 0x39
 8108e36:	d106      	bne.n	8108e46 <_dtoa_r+0x6de>
 8108e38:	9a01      	ldr	r2, [sp, #4]
 8108e3a:	429a      	cmp	r2, r3
 8108e3c:	d1f7      	bne.n	8108e2e <_dtoa_r+0x6c6>
 8108e3e:	9901      	ldr	r1, [sp, #4]
 8108e40:	2230      	movs	r2, #48	; 0x30
 8108e42:	3701      	adds	r7, #1
 8108e44:	700a      	strb	r2, [r1, #0]
 8108e46:	781a      	ldrb	r2, [r3, #0]
 8108e48:	3201      	adds	r2, #1
 8108e4a:	701a      	strb	r2, [r3, #0]
 8108e4c:	e790      	b.n	8108d70 <_dtoa_r+0x608>
 8108e4e:	4ba6      	ldr	r3, [pc, #664]	; (81090e8 <_dtoa_r+0x980>)
 8108e50:	2200      	movs	r2, #0
 8108e52:	f7f7 fc59 	bl	8100708 <__aeabi_dmul>
 8108e56:	2200      	movs	r2, #0
 8108e58:	2300      	movs	r3, #0
 8108e5a:	4606      	mov	r6, r0
 8108e5c:	460f      	mov	r7, r1
 8108e5e:	f7f7 febb 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e62:	2800      	cmp	r0, #0
 8108e64:	d09d      	beq.n	8108da2 <_dtoa_r+0x63a>
 8108e66:	e7cf      	b.n	8108e08 <_dtoa_r+0x6a0>
 8108e68:	9a08      	ldr	r2, [sp, #32]
 8108e6a:	2a00      	cmp	r2, #0
 8108e6c:	f000 80d7 	beq.w	810901e <_dtoa_r+0x8b6>
 8108e70:	9a06      	ldr	r2, [sp, #24]
 8108e72:	2a01      	cmp	r2, #1
 8108e74:	f300 80ba 	bgt.w	8108fec <_dtoa_r+0x884>
 8108e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108e7a:	2a00      	cmp	r2, #0
 8108e7c:	f000 80b2 	beq.w	8108fe4 <_dtoa_r+0x87c>
 8108e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8108e84:	9e07      	ldr	r6, [sp, #28]
 8108e86:	9d04      	ldr	r5, [sp, #16]
 8108e88:	9a04      	ldr	r2, [sp, #16]
 8108e8a:	441a      	add	r2, r3
 8108e8c:	9204      	str	r2, [sp, #16]
 8108e8e:	9a05      	ldr	r2, [sp, #20]
 8108e90:	2101      	movs	r1, #1
 8108e92:	441a      	add	r2, r3
 8108e94:	4620      	mov	r0, r4
 8108e96:	9205      	str	r2, [sp, #20]
 8108e98:	f000 fb58 	bl	810954c <__i2b>
 8108e9c:	4607      	mov	r7, r0
 8108e9e:	2d00      	cmp	r5, #0
 8108ea0:	dd0c      	ble.n	8108ebc <_dtoa_r+0x754>
 8108ea2:	9b05      	ldr	r3, [sp, #20]
 8108ea4:	2b00      	cmp	r3, #0
 8108ea6:	dd09      	ble.n	8108ebc <_dtoa_r+0x754>
 8108ea8:	42ab      	cmp	r3, r5
 8108eaa:	9a04      	ldr	r2, [sp, #16]
 8108eac:	bfa8      	it	ge
 8108eae:	462b      	movge	r3, r5
 8108eb0:	1ad2      	subs	r2, r2, r3
 8108eb2:	9204      	str	r2, [sp, #16]
 8108eb4:	9a05      	ldr	r2, [sp, #20]
 8108eb6:	1aed      	subs	r5, r5, r3
 8108eb8:	1ad3      	subs	r3, r2, r3
 8108eba:	9305      	str	r3, [sp, #20]
 8108ebc:	9b07      	ldr	r3, [sp, #28]
 8108ebe:	b31b      	cbz	r3, 8108f08 <_dtoa_r+0x7a0>
 8108ec0:	9b08      	ldr	r3, [sp, #32]
 8108ec2:	2b00      	cmp	r3, #0
 8108ec4:	f000 80af 	beq.w	8109026 <_dtoa_r+0x8be>
 8108ec8:	2e00      	cmp	r6, #0
 8108eca:	dd13      	ble.n	8108ef4 <_dtoa_r+0x78c>
 8108ecc:	4639      	mov	r1, r7
 8108ece:	4632      	mov	r2, r6
 8108ed0:	4620      	mov	r0, r4
 8108ed2:	f000 fbfb 	bl	81096cc <__pow5mult>
 8108ed6:	ee18 2a10 	vmov	r2, s16
 8108eda:	4601      	mov	r1, r0
 8108edc:	4607      	mov	r7, r0
 8108ede:	4620      	mov	r0, r4
 8108ee0:	f000 fb4a 	bl	8109578 <__multiply>
 8108ee4:	ee18 1a10 	vmov	r1, s16
 8108ee8:	4680      	mov	r8, r0
 8108eea:	4620      	mov	r0, r4
 8108eec:	f000 fa76 	bl	81093dc <_Bfree>
 8108ef0:	ee08 8a10 	vmov	s16, r8
 8108ef4:	9b07      	ldr	r3, [sp, #28]
 8108ef6:	1b9a      	subs	r2, r3, r6
 8108ef8:	d006      	beq.n	8108f08 <_dtoa_r+0x7a0>
 8108efa:	ee18 1a10 	vmov	r1, s16
 8108efe:	4620      	mov	r0, r4
 8108f00:	f000 fbe4 	bl	81096cc <__pow5mult>
 8108f04:	ee08 0a10 	vmov	s16, r0
 8108f08:	2101      	movs	r1, #1
 8108f0a:	4620      	mov	r0, r4
 8108f0c:	f000 fb1e 	bl	810954c <__i2b>
 8108f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f12:	2b00      	cmp	r3, #0
 8108f14:	4606      	mov	r6, r0
 8108f16:	f340 8088 	ble.w	810902a <_dtoa_r+0x8c2>
 8108f1a:	461a      	mov	r2, r3
 8108f1c:	4601      	mov	r1, r0
 8108f1e:	4620      	mov	r0, r4
 8108f20:	f000 fbd4 	bl	81096cc <__pow5mult>
 8108f24:	9b06      	ldr	r3, [sp, #24]
 8108f26:	2b01      	cmp	r3, #1
 8108f28:	4606      	mov	r6, r0
 8108f2a:	f340 8081 	ble.w	8109030 <_dtoa_r+0x8c8>
 8108f2e:	f04f 0800 	mov.w	r8, #0
 8108f32:	6933      	ldr	r3, [r6, #16]
 8108f34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8108f38:	6918      	ldr	r0, [r3, #16]
 8108f3a:	f000 fab7 	bl	81094ac <__hi0bits>
 8108f3e:	f1c0 0020 	rsb	r0, r0, #32
 8108f42:	9b05      	ldr	r3, [sp, #20]
 8108f44:	4418      	add	r0, r3
 8108f46:	f010 001f 	ands.w	r0, r0, #31
 8108f4a:	f000 8092 	beq.w	8109072 <_dtoa_r+0x90a>
 8108f4e:	f1c0 0320 	rsb	r3, r0, #32
 8108f52:	2b04      	cmp	r3, #4
 8108f54:	f340 808a 	ble.w	810906c <_dtoa_r+0x904>
 8108f58:	f1c0 001c 	rsb	r0, r0, #28
 8108f5c:	9b04      	ldr	r3, [sp, #16]
 8108f5e:	4403      	add	r3, r0
 8108f60:	9304      	str	r3, [sp, #16]
 8108f62:	9b05      	ldr	r3, [sp, #20]
 8108f64:	4403      	add	r3, r0
 8108f66:	4405      	add	r5, r0
 8108f68:	9305      	str	r3, [sp, #20]
 8108f6a:	9b04      	ldr	r3, [sp, #16]
 8108f6c:	2b00      	cmp	r3, #0
 8108f6e:	dd07      	ble.n	8108f80 <_dtoa_r+0x818>
 8108f70:	ee18 1a10 	vmov	r1, s16
 8108f74:	461a      	mov	r2, r3
 8108f76:	4620      	mov	r0, r4
 8108f78:	f000 fc02 	bl	8109780 <__lshift>
 8108f7c:	ee08 0a10 	vmov	s16, r0
 8108f80:	9b05      	ldr	r3, [sp, #20]
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	dd05      	ble.n	8108f92 <_dtoa_r+0x82a>
 8108f86:	4631      	mov	r1, r6
 8108f88:	461a      	mov	r2, r3
 8108f8a:	4620      	mov	r0, r4
 8108f8c:	f000 fbf8 	bl	8109780 <__lshift>
 8108f90:	4606      	mov	r6, r0
 8108f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108f94:	2b00      	cmp	r3, #0
 8108f96:	d06e      	beq.n	8109076 <_dtoa_r+0x90e>
 8108f98:	ee18 0a10 	vmov	r0, s16
 8108f9c:	4631      	mov	r1, r6
 8108f9e:	f000 fc5f 	bl	8109860 <__mcmp>
 8108fa2:	2800      	cmp	r0, #0
 8108fa4:	da67      	bge.n	8109076 <_dtoa_r+0x90e>
 8108fa6:	9b00      	ldr	r3, [sp, #0]
 8108fa8:	3b01      	subs	r3, #1
 8108faa:	ee18 1a10 	vmov	r1, s16
 8108fae:	9300      	str	r3, [sp, #0]
 8108fb0:	220a      	movs	r2, #10
 8108fb2:	2300      	movs	r3, #0
 8108fb4:	4620      	mov	r0, r4
 8108fb6:	f000 fa33 	bl	8109420 <__multadd>
 8108fba:	9b08      	ldr	r3, [sp, #32]
 8108fbc:	ee08 0a10 	vmov	s16, r0
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	f000 81b1 	beq.w	8109328 <_dtoa_r+0xbc0>
 8108fc6:	2300      	movs	r3, #0
 8108fc8:	4639      	mov	r1, r7
 8108fca:	220a      	movs	r2, #10
 8108fcc:	4620      	mov	r0, r4
 8108fce:	f000 fa27 	bl	8109420 <__multadd>
 8108fd2:	9b02      	ldr	r3, [sp, #8]
 8108fd4:	2b00      	cmp	r3, #0
 8108fd6:	4607      	mov	r7, r0
 8108fd8:	f300 808e 	bgt.w	81090f8 <_dtoa_r+0x990>
 8108fdc:	9b06      	ldr	r3, [sp, #24]
 8108fde:	2b02      	cmp	r3, #2
 8108fe0:	dc51      	bgt.n	8109086 <_dtoa_r+0x91e>
 8108fe2:	e089      	b.n	81090f8 <_dtoa_r+0x990>
 8108fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8108fea:	e74b      	b.n	8108e84 <_dtoa_r+0x71c>
 8108fec:	9b03      	ldr	r3, [sp, #12]
 8108fee:	1e5e      	subs	r6, r3, #1
 8108ff0:	9b07      	ldr	r3, [sp, #28]
 8108ff2:	42b3      	cmp	r3, r6
 8108ff4:	bfbf      	itttt	lt
 8108ff6:	9b07      	ldrlt	r3, [sp, #28]
 8108ff8:	9607      	strlt	r6, [sp, #28]
 8108ffa:	1af2      	sublt	r2, r6, r3
 8108ffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8108ffe:	bfb6      	itet	lt
 8109000:	189b      	addlt	r3, r3, r2
 8109002:	1b9e      	subge	r6, r3, r6
 8109004:	930a      	strlt	r3, [sp, #40]	; 0x28
 8109006:	9b03      	ldr	r3, [sp, #12]
 8109008:	bfb8      	it	lt
 810900a:	2600      	movlt	r6, #0
 810900c:	2b00      	cmp	r3, #0
 810900e:	bfb7      	itett	lt
 8109010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8109014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8109018:	1a9d      	sublt	r5, r3, r2
 810901a:	2300      	movlt	r3, #0
 810901c:	e734      	b.n	8108e88 <_dtoa_r+0x720>
 810901e:	9e07      	ldr	r6, [sp, #28]
 8109020:	9d04      	ldr	r5, [sp, #16]
 8109022:	9f08      	ldr	r7, [sp, #32]
 8109024:	e73b      	b.n	8108e9e <_dtoa_r+0x736>
 8109026:	9a07      	ldr	r2, [sp, #28]
 8109028:	e767      	b.n	8108efa <_dtoa_r+0x792>
 810902a:	9b06      	ldr	r3, [sp, #24]
 810902c:	2b01      	cmp	r3, #1
 810902e:	dc18      	bgt.n	8109062 <_dtoa_r+0x8fa>
 8109030:	f1ba 0f00 	cmp.w	sl, #0
 8109034:	d115      	bne.n	8109062 <_dtoa_r+0x8fa>
 8109036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810903a:	b993      	cbnz	r3, 8109062 <_dtoa_r+0x8fa>
 810903c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109040:	0d1b      	lsrs	r3, r3, #20
 8109042:	051b      	lsls	r3, r3, #20
 8109044:	b183      	cbz	r3, 8109068 <_dtoa_r+0x900>
 8109046:	9b04      	ldr	r3, [sp, #16]
 8109048:	3301      	adds	r3, #1
 810904a:	9304      	str	r3, [sp, #16]
 810904c:	9b05      	ldr	r3, [sp, #20]
 810904e:	3301      	adds	r3, #1
 8109050:	9305      	str	r3, [sp, #20]
 8109052:	f04f 0801 	mov.w	r8, #1
 8109056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109058:	2b00      	cmp	r3, #0
 810905a:	f47f af6a 	bne.w	8108f32 <_dtoa_r+0x7ca>
 810905e:	2001      	movs	r0, #1
 8109060:	e76f      	b.n	8108f42 <_dtoa_r+0x7da>
 8109062:	f04f 0800 	mov.w	r8, #0
 8109066:	e7f6      	b.n	8109056 <_dtoa_r+0x8ee>
 8109068:	4698      	mov	r8, r3
 810906a:	e7f4      	b.n	8109056 <_dtoa_r+0x8ee>
 810906c:	f43f af7d 	beq.w	8108f6a <_dtoa_r+0x802>
 8109070:	4618      	mov	r0, r3
 8109072:	301c      	adds	r0, #28
 8109074:	e772      	b.n	8108f5c <_dtoa_r+0x7f4>
 8109076:	9b03      	ldr	r3, [sp, #12]
 8109078:	2b00      	cmp	r3, #0
 810907a:	dc37      	bgt.n	81090ec <_dtoa_r+0x984>
 810907c:	9b06      	ldr	r3, [sp, #24]
 810907e:	2b02      	cmp	r3, #2
 8109080:	dd34      	ble.n	81090ec <_dtoa_r+0x984>
 8109082:	9b03      	ldr	r3, [sp, #12]
 8109084:	9302      	str	r3, [sp, #8]
 8109086:	9b02      	ldr	r3, [sp, #8]
 8109088:	b96b      	cbnz	r3, 81090a6 <_dtoa_r+0x93e>
 810908a:	4631      	mov	r1, r6
 810908c:	2205      	movs	r2, #5
 810908e:	4620      	mov	r0, r4
 8109090:	f000 f9c6 	bl	8109420 <__multadd>
 8109094:	4601      	mov	r1, r0
 8109096:	4606      	mov	r6, r0
 8109098:	ee18 0a10 	vmov	r0, s16
 810909c:	f000 fbe0 	bl	8109860 <__mcmp>
 81090a0:	2800      	cmp	r0, #0
 81090a2:	f73f adbb 	bgt.w	8108c1c <_dtoa_r+0x4b4>
 81090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81090a8:	9d01      	ldr	r5, [sp, #4]
 81090aa:	43db      	mvns	r3, r3
 81090ac:	9300      	str	r3, [sp, #0]
 81090ae:	f04f 0800 	mov.w	r8, #0
 81090b2:	4631      	mov	r1, r6
 81090b4:	4620      	mov	r0, r4
 81090b6:	f000 f991 	bl	81093dc <_Bfree>
 81090ba:	2f00      	cmp	r7, #0
 81090bc:	f43f aea4 	beq.w	8108e08 <_dtoa_r+0x6a0>
 81090c0:	f1b8 0f00 	cmp.w	r8, #0
 81090c4:	d005      	beq.n	81090d2 <_dtoa_r+0x96a>
 81090c6:	45b8      	cmp	r8, r7
 81090c8:	d003      	beq.n	81090d2 <_dtoa_r+0x96a>
 81090ca:	4641      	mov	r1, r8
 81090cc:	4620      	mov	r0, r4
 81090ce:	f000 f985 	bl	81093dc <_Bfree>
 81090d2:	4639      	mov	r1, r7
 81090d4:	4620      	mov	r0, r4
 81090d6:	f000 f981 	bl	81093dc <_Bfree>
 81090da:	e695      	b.n	8108e08 <_dtoa_r+0x6a0>
 81090dc:	2600      	movs	r6, #0
 81090de:	4637      	mov	r7, r6
 81090e0:	e7e1      	b.n	81090a6 <_dtoa_r+0x93e>
 81090e2:	9700      	str	r7, [sp, #0]
 81090e4:	4637      	mov	r7, r6
 81090e6:	e599      	b.n	8108c1c <_dtoa_r+0x4b4>
 81090e8:	40240000 	.word	0x40240000
 81090ec:	9b08      	ldr	r3, [sp, #32]
 81090ee:	2b00      	cmp	r3, #0
 81090f0:	f000 80ca 	beq.w	8109288 <_dtoa_r+0xb20>
 81090f4:	9b03      	ldr	r3, [sp, #12]
 81090f6:	9302      	str	r3, [sp, #8]
 81090f8:	2d00      	cmp	r5, #0
 81090fa:	dd05      	ble.n	8109108 <_dtoa_r+0x9a0>
 81090fc:	4639      	mov	r1, r7
 81090fe:	462a      	mov	r2, r5
 8109100:	4620      	mov	r0, r4
 8109102:	f000 fb3d 	bl	8109780 <__lshift>
 8109106:	4607      	mov	r7, r0
 8109108:	f1b8 0f00 	cmp.w	r8, #0
 810910c:	d05b      	beq.n	81091c6 <_dtoa_r+0xa5e>
 810910e:	6879      	ldr	r1, [r7, #4]
 8109110:	4620      	mov	r0, r4
 8109112:	f000 f923 	bl	810935c <_Balloc>
 8109116:	4605      	mov	r5, r0
 8109118:	b928      	cbnz	r0, 8109126 <_dtoa_r+0x9be>
 810911a:	4b87      	ldr	r3, [pc, #540]	; (8109338 <_dtoa_r+0xbd0>)
 810911c:	4602      	mov	r2, r0
 810911e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109122:	f7ff bb3b 	b.w	810879c <_dtoa_r+0x34>
 8109126:	693a      	ldr	r2, [r7, #16]
 8109128:	3202      	adds	r2, #2
 810912a:	0092      	lsls	r2, r2, #2
 810912c:	f107 010c 	add.w	r1, r7, #12
 8109130:	300c      	adds	r0, #12
 8109132:	f7fe fe0b 	bl	8107d4c <memcpy>
 8109136:	2201      	movs	r2, #1
 8109138:	4629      	mov	r1, r5
 810913a:	4620      	mov	r0, r4
 810913c:	f000 fb20 	bl	8109780 <__lshift>
 8109140:	9b01      	ldr	r3, [sp, #4]
 8109142:	f103 0901 	add.w	r9, r3, #1
 8109146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810914a:	4413      	add	r3, r2
 810914c:	9305      	str	r3, [sp, #20]
 810914e:	f00a 0301 	and.w	r3, sl, #1
 8109152:	46b8      	mov	r8, r7
 8109154:	9304      	str	r3, [sp, #16]
 8109156:	4607      	mov	r7, r0
 8109158:	4631      	mov	r1, r6
 810915a:	ee18 0a10 	vmov	r0, s16
 810915e:	f7ff fa75 	bl	810864c <quorem>
 8109162:	4641      	mov	r1, r8
 8109164:	9002      	str	r0, [sp, #8]
 8109166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810916a:	ee18 0a10 	vmov	r0, s16
 810916e:	f000 fb77 	bl	8109860 <__mcmp>
 8109172:	463a      	mov	r2, r7
 8109174:	9003      	str	r0, [sp, #12]
 8109176:	4631      	mov	r1, r6
 8109178:	4620      	mov	r0, r4
 810917a:	f000 fb8d 	bl	8109898 <__mdiff>
 810917e:	68c2      	ldr	r2, [r0, #12]
 8109180:	f109 3bff 	add.w	fp, r9, #4294967295
 8109184:	4605      	mov	r5, r0
 8109186:	bb02      	cbnz	r2, 81091ca <_dtoa_r+0xa62>
 8109188:	4601      	mov	r1, r0
 810918a:	ee18 0a10 	vmov	r0, s16
 810918e:	f000 fb67 	bl	8109860 <__mcmp>
 8109192:	4602      	mov	r2, r0
 8109194:	4629      	mov	r1, r5
 8109196:	4620      	mov	r0, r4
 8109198:	9207      	str	r2, [sp, #28]
 810919a:	f000 f91f 	bl	81093dc <_Bfree>
 810919e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 81091a2:	ea43 0102 	orr.w	r1, r3, r2
 81091a6:	9b04      	ldr	r3, [sp, #16]
 81091a8:	430b      	orrs	r3, r1
 81091aa:	464d      	mov	r5, r9
 81091ac:	d10f      	bne.n	81091ce <_dtoa_r+0xa66>
 81091ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 81091b2:	d02a      	beq.n	810920a <_dtoa_r+0xaa2>
 81091b4:	9b03      	ldr	r3, [sp, #12]
 81091b6:	2b00      	cmp	r3, #0
 81091b8:	dd02      	ble.n	81091c0 <_dtoa_r+0xa58>
 81091ba:	9b02      	ldr	r3, [sp, #8]
 81091bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 81091c0:	f88b a000 	strb.w	sl, [fp]
 81091c4:	e775      	b.n	81090b2 <_dtoa_r+0x94a>
 81091c6:	4638      	mov	r0, r7
 81091c8:	e7ba      	b.n	8109140 <_dtoa_r+0x9d8>
 81091ca:	2201      	movs	r2, #1
 81091cc:	e7e2      	b.n	8109194 <_dtoa_r+0xa2c>
 81091ce:	9b03      	ldr	r3, [sp, #12]
 81091d0:	2b00      	cmp	r3, #0
 81091d2:	db04      	blt.n	81091de <_dtoa_r+0xa76>
 81091d4:	9906      	ldr	r1, [sp, #24]
 81091d6:	430b      	orrs	r3, r1
 81091d8:	9904      	ldr	r1, [sp, #16]
 81091da:	430b      	orrs	r3, r1
 81091dc:	d122      	bne.n	8109224 <_dtoa_r+0xabc>
 81091de:	2a00      	cmp	r2, #0
 81091e0:	ddee      	ble.n	81091c0 <_dtoa_r+0xa58>
 81091e2:	ee18 1a10 	vmov	r1, s16
 81091e6:	2201      	movs	r2, #1
 81091e8:	4620      	mov	r0, r4
 81091ea:	f000 fac9 	bl	8109780 <__lshift>
 81091ee:	4631      	mov	r1, r6
 81091f0:	ee08 0a10 	vmov	s16, r0
 81091f4:	f000 fb34 	bl	8109860 <__mcmp>
 81091f8:	2800      	cmp	r0, #0
 81091fa:	dc03      	bgt.n	8109204 <_dtoa_r+0xa9c>
 81091fc:	d1e0      	bne.n	81091c0 <_dtoa_r+0xa58>
 81091fe:	f01a 0f01 	tst.w	sl, #1
 8109202:	d0dd      	beq.n	81091c0 <_dtoa_r+0xa58>
 8109204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8109208:	d1d7      	bne.n	81091ba <_dtoa_r+0xa52>
 810920a:	2339      	movs	r3, #57	; 0x39
 810920c:	f88b 3000 	strb.w	r3, [fp]
 8109210:	462b      	mov	r3, r5
 8109212:	461d      	mov	r5, r3
 8109214:	3b01      	subs	r3, #1
 8109216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810921a:	2a39      	cmp	r2, #57	; 0x39
 810921c:	d071      	beq.n	8109302 <_dtoa_r+0xb9a>
 810921e:	3201      	adds	r2, #1
 8109220:	701a      	strb	r2, [r3, #0]
 8109222:	e746      	b.n	81090b2 <_dtoa_r+0x94a>
 8109224:	2a00      	cmp	r2, #0
 8109226:	dd07      	ble.n	8109238 <_dtoa_r+0xad0>
 8109228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810922c:	d0ed      	beq.n	810920a <_dtoa_r+0xaa2>
 810922e:	f10a 0301 	add.w	r3, sl, #1
 8109232:	f88b 3000 	strb.w	r3, [fp]
 8109236:	e73c      	b.n	81090b2 <_dtoa_r+0x94a>
 8109238:	9b05      	ldr	r3, [sp, #20]
 810923a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810923e:	4599      	cmp	r9, r3
 8109240:	d047      	beq.n	81092d2 <_dtoa_r+0xb6a>
 8109242:	ee18 1a10 	vmov	r1, s16
 8109246:	2300      	movs	r3, #0
 8109248:	220a      	movs	r2, #10
 810924a:	4620      	mov	r0, r4
 810924c:	f000 f8e8 	bl	8109420 <__multadd>
 8109250:	45b8      	cmp	r8, r7
 8109252:	ee08 0a10 	vmov	s16, r0
 8109256:	f04f 0300 	mov.w	r3, #0
 810925a:	f04f 020a 	mov.w	r2, #10
 810925e:	4641      	mov	r1, r8
 8109260:	4620      	mov	r0, r4
 8109262:	d106      	bne.n	8109272 <_dtoa_r+0xb0a>
 8109264:	f000 f8dc 	bl	8109420 <__multadd>
 8109268:	4680      	mov	r8, r0
 810926a:	4607      	mov	r7, r0
 810926c:	f109 0901 	add.w	r9, r9, #1
 8109270:	e772      	b.n	8109158 <_dtoa_r+0x9f0>
 8109272:	f000 f8d5 	bl	8109420 <__multadd>
 8109276:	4639      	mov	r1, r7
 8109278:	4680      	mov	r8, r0
 810927a:	2300      	movs	r3, #0
 810927c:	220a      	movs	r2, #10
 810927e:	4620      	mov	r0, r4
 8109280:	f000 f8ce 	bl	8109420 <__multadd>
 8109284:	4607      	mov	r7, r0
 8109286:	e7f1      	b.n	810926c <_dtoa_r+0xb04>
 8109288:	9b03      	ldr	r3, [sp, #12]
 810928a:	9302      	str	r3, [sp, #8]
 810928c:	9d01      	ldr	r5, [sp, #4]
 810928e:	ee18 0a10 	vmov	r0, s16
 8109292:	4631      	mov	r1, r6
 8109294:	f7ff f9da 	bl	810864c <quorem>
 8109298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810929c:	9b01      	ldr	r3, [sp, #4]
 810929e:	f805 ab01 	strb.w	sl, [r5], #1
 81092a2:	1aea      	subs	r2, r5, r3
 81092a4:	9b02      	ldr	r3, [sp, #8]
 81092a6:	4293      	cmp	r3, r2
 81092a8:	dd09      	ble.n	81092be <_dtoa_r+0xb56>
 81092aa:	ee18 1a10 	vmov	r1, s16
 81092ae:	2300      	movs	r3, #0
 81092b0:	220a      	movs	r2, #10
 81092b2:	4620      	mov	r0, r4
 81092b4:	f000 f8b4 	bl	8109420 <__multadd>
 81092b8:	ee08 0a10 	vmov	s16, r0
 81092bc:	e7e7      	b.n	810928e <_dtoa_r+0xb26>
 81092be:	9b02      	ldr	r3, [sp, #8]
 81092c0:	2b00      	cmp	r3, #0
 81092c2:	bfc8      	it	gt
 81092c4:	461d      	movgt	r5, r3
 81092c6:	9b01      	ldr	r3, [sp, #4]
 81092c8:	bfd8      	it	le
 81092ca:	2501      	movle	r5, #1
 81092cc:	441d      	add	r5, r3
 81092ce:	f04f 0800 	mov.w	r8, #0
 81092d2:	ee18 1a10 	vmov	r1, s16
 81092d6:	2201      	movs	r2, #1
 81092d8:	4620      	mov	r0, r4
 81092da:	f000 fa51 	bl	8109780 <__lshift>
 81092de:	4631      	mov	r1, r6
 81092e0:	ee08 0a10 	vmov	s16, r0
 81092e4:	f000 fabc 	bl	8109860 <__mcmp>
 81092e8:	2800      	cmp	r0, #0
 81092ea:	dc91      	bgt.n	8109210 <_dtoa_r+0xaa8>
 81092ec:	d102      	bne.n	81092f4 <_dtoa_r+0xb8c>
 81092ee:	f01a 0f01 	tst.w	sl, #1
 81092f2:	d18d      	bne.n	8109210 <_dtoa_r+0xaa8>
 81092f4:	462b      	mov	r3, r5
 81092f6:	461d      	mov	r5, r3
 81092f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81092fc:	2a30      	cmp	r2, #48	; 0x30
 81092fe:	d0fa      	beq.n	81092f6 <_dtoa_r+0xb8e>
 8109300:	e6d7      	b.n	81090b2 <_dtoa_r+0x94a>
 8109302:	9a01      	ldr	r2, [sp, #4]
 8109304:	429a      	cmp	r2, r3
 8109306:	d184      	bne.n	8109212 <_dtoa_r+0xaaa>
 8109308:	9b00      	ldr	r3, [sp, #0]
 810930a:	3301      	adds	r3, #1
 810930c:	9300      	str	r3, [sp, #0]
 810930e:	2331      	movs	r3, #49	; 0x31
 8109310:	7013      	strb	r3, [r2, #0]
 8109312:	e6ce      	b.n	81090b2 <_dtoa_r+0x94a>
 8109314:	4b09      	ldr	r3, [pc, #36]	; (810933c <_dtoa_r+0xbd4>)
 8109316:	f7ff ba95 	b.w	8108844 <_dtoa_r+0xdc>
 810931a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810931c:	2b00      	cmp	r3, #0
 810931e:	f47f aa6e 	bne.w	81087fe <_dtoa_r+0x96>
 8109322:	4b07      	ldr	r3, [pc, #28]	; (8109340 <_dtoa_r+0xbd8>)
 8109324:	f7ff ba8e 	b.w	8108844 <_dtoa_r+0xdc>
 8109328:	9b02      	ldr	r3, [sp, #8]
 810932a:	2b00      	cmp	r3, #0
 810932c:	dcae      	bgt.n	810928c <_dtoa_r+0xb24>
 810932e:	9b06      	ldr	r3, [sp, #24]
 8109330:	2b02      	cmp	r3, #2
 8109332:	f73f aea8 	bgt.w	8109086 <_dtoa_r+0x91e>
 8109336:	e7a9      	b.n	810928c <_dtoa_r+0xb24>
 8109338:	0810a86f 	.word	0x0810a86f
 810933c:	0810a7cc 	.word	0x0810a7cc
 8109340:	0810a7f0 	.word	0x0810a7f0

08109344 <_localeconv_r>:
 8109344:	4800      	ldr	r0, [pc, #0]	; (8109348 <_localeconv_r+0x4>)
 8109346:	4770      	bx	lr
 8109348:	10000164 	.word	0x10000164

0810934c <malloc>:
 810934c:	4b02      	ldr	r3, [pc, #8]	; (8109358 <malloc+0xc>)
 810934e:	4601      	mov	r1, r0
 8109350:	6818      	ldr	r0, [r3, #0]
 8109352:	f000 bc09 	b.w	8109b68 <_malloc_r>
 8109356:	bf00      	nop
 8109358:	10000010 	.word	0x10000010

0810935c <_Balloc>:
 810935c:	b570      	push	{r4, r5, r6, lr}
 810935e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8109360:	4604      	mov	r4, r0
 8109362:	460d      	mov	r5, r1
 8109364:	b976      	cbnz	r6, 8109384 <_Balloc+0x28>
 8109366:	2010      	movs	r0, #16
 8109368:	f7ff fff0 	bl	810934c <malloc>
 810936c:	4602      	mov	r2, r0
 810936e:	6260      	str	r0, [r4, #36]	; 0x24
 8109370:	b920      	cbnz	r0, 810937c <_Balloc+0x20>
 8109372:	4b18      	ldr	r3, [pc, #96]	; (81093d4 <_Balloc+0x78>)
 8109374:	4818      	ldr	r0, [pc, #96]	; (81093d8 <_Balloc+0x7c>)
 8109376:	2166      	movs	r1, #102	; 0x66
 8109378:	f000 fc7a 	bl	8109c70 <__assert_func>
 810937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109380:	6006      	str	r6, [r0, #0]
 8109382:	60c6      	str	r6, [r0, #12]
 8109384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8109386:	68f3      	ldr	r3, [r6, #12]
 8109388:	b183      	cbz	r3, 81093ac <_Balloc+0x50>
 810938a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810938c:	68db      	ldr	r3, [r3, #12]
 810938e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8109392:	b9b8      	cbnz	r0, 81093c4 <_Balloc+0x68>
 8109394:	2101      	movs	r1, #1
 8109396:	fa01 f605 	lsl.w	r6, r1, r5
 810939a:	1d72      	adds	r2, r6, #5
 810939c:	0092      	lsls	r2, r2, #2
 810939e:	4620      	mov	r0, r4
 81093a0:	f000 fb60 	bl	8109a64 <_calloc_r>
 81093a4:	b160      	cbz	r0, 81093c0 <_Balloc+0x64>
 81093a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81093aa:	e00e      	b.n	81093ca <_Balloc+0x6e>
 81093ac:	2221      	movs	r2, #33	; 0x21
 81093ae:	2104      	movs	r1, #4
 81093b0:	4620      	mov	r0, r4
 81093b2:	f000 fb57 	bl	8109a64 <_calloc_r>
 81093b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81093b8:	60f0      	str	r0, [r6, #12]
 81093ba:	68db      	ldr	r3, [r3, #12]
 81093bc:	2b00      	cmp	r3, #0
 81093be:	d1e4      	bne.n	810938a <_Balloc+0x2e>
 81093c0:	2000      	movs	r0, #0
 81093c2:	bd70      	pop	{r4, r5, r6, pc}
 81093c4:	6802      	ldr	r2, [r0, #0]
 81093c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81093ca:	2300      	movs	r3, #0
 81093cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81093d0:	e7f7      	b.n	81093c2 <_Balloc+0x66>
 81093d2:	bf00      	nop
 81093d4:	0810a7fd 	.word	0x0810a7fd
 81093d8:	0810a880 	.word	0x0810a880

081093dc <_Bfree>:
 81093dc:	b570      	push	{r4, r5, r6, lr}
 81093de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81093e0:	4605      	mov	r5, r0
 81093e2:	460c      	mov	r4, r1
 81093e4:	b976      	cbnz	r6, 8109404 <_Bfree+0x28>
 81093e6:	2010      	movs	r0, #16
 81093e8:	f7ff ffb0 	bl	810934c <malloc>
 81093ec:	4602      	mov	r2, r0
 81093ee:	6268      	str	r0, [r5, #36]	; 0x24
 81093f0:	b920      	cbnz	r0, 81093fc <_Bfree+0x20>
 81093f2:	4b09      	ldr	r3, [pc, #36]	; (8109418 <_Bfree+0x3c>)
 81093f4:	4809      	ldr	r0, [pc, #36]	; (810941c <_Bfree+0x40>)
 81093f6:	218a      	movs	r1, #138	; 0x8a
 81093f8:	f000 fc3a 	bl	8109c70 <__assert_func>
 81093fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109400:	6006      	str	r6, [r0, #0]
 8109402:	60c6      	str	r6, [r0, #12]
 8109404:	b13c      	cbz	r4, 8109416 <_Bfree+0x3a>
 8109406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8109408:	6862      	ldr	r2, [r4, #4]
 810940a:	68db      	ldr	r3, [r3, #12]
 810940c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8109410:	6021      	str	r1, [r4, #0]
 8109412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8109416:	bd70      	pop	{r4, r5, r6, pc}
 8109418:	0810a7fd 	.word	0x0810a7fd
 810941c:	0810a880 	.word	0x0810a880

08109420 <__multadd>:
 8109420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109424:	690d      	ldr	r5, [r1, #16]
 8109426:	4607      	mov	r7, r0
 8109428:	460c      	mov	r4, r1
 810942a:	461e      	mov	r6, r3
 810942c:	f101 0c14 	add.w	ip, r1, #20
 8109430:	2000      	movs	r0, #0
 8109432:	f8dc 3000 	ldr.w	r3, [ip]
 8109436:	b299      	uxth	r1, r3
 8109438:	fb02 6101 	mla	r1, r2, r1, r6
 810943c:	0c1e      	lsrs	r6, r3, #16
 810943e:	0c0b      	lsrs	r3, r1, #16
 8109440:	fb02 3306 	mla	r3, r2, r6, r3
 8109444:	b289      	uxth	r1, r1
 8109446:	3001      	adds	r0, #1
 8109448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810944c:	4285      	cmp	r5, r0
 810944e:	f84c 1b04 	str.w	r1, [ip], #4
 8109452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8109456:	dcec      	bgt.n	8109432 <__multadd+0x12>
 8109458:	b30e      	cbz	r6, 810949e <__multadd+0x7e>
 810945a:	68a3      	ldr	r3, [r4, #8]
 810945c:	42ab      	cmp	r3, r5
 810945e:	dc19      	bgt.n	8109494 <__multadd+0x74>
 8109460:	6861      	ldr	r1, [r4, #4]
 8109462:	4638      	mov	r0, r7
 8109464:	3101      	adds	r1, #1
 8109466:	f7ff ff79 	bl	810935c <_Balloc>
 810946a:	4680      	mov	r8, r0
 810946c:	b928      	cbnz	r0, 810947a <__multadd+0x5a>
 810946e:	4602      	mov	r2, r0
 8109470:	4b0c      	ldr	r3, [pc, #48]	; (81094a4 <__multadd+0x84>)
 8109472:	480d      	ldr	r0, [pc, #52]	; (81094a8 <__multadd+0x88>)
 8109474:	21b5      	movs	r1, #181	; 0xb5
 8109476:	f000 fbfb 	bl	8109c70 <__assert_func>
 810947a:	6922      	ldr	r2, [r4, #16]
 810947c:	3202      	adds	r2, #2
 810947e:	f104 010c 	add.w	r1, r4, #12
 8109482:	0092      	lsls	r2, r2, #2
 8109484:	300c      	adds	r0, #12
 8109486:	f7fe fc61 	bl	8107d4c <memcpy>
 810948a:	4621      	mov	r1, r4
 810948c:	4638      	mov	r0, r7
 810948e:	f7ff ffa5 	bl	81093dc <_Bfree>
 8109492:	4644      	mov	r4, r8
 8109494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8109498:	3501      	adds	r5, #1
 810949a:	615e      	str	r6, [r3, #20]
 810949c:	6125      	str	r5, [r4, #16]
 810949e:	4620      	mov	r0, r4
 81094a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81094a4:	0810a86f 	.word	0x0810a86f
 81094a8:	0810a880 	.word	0x0810a880

081094ac <__hi0bits>:
 81094ac:	0c03      	lsrs	r3, r0, #16
 81094ae:	041b      	lsls	r3, r3, #16
 81094b0:	b9d3      	cbnz	r3, 81094e8 <__hi0bits+0x3c>
 81094b2:	0400      	lsls	r0, r0, #16
 81094b4:	2310      	movs	r3, #16
 81094b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 81094ba:	bf04      	itt	eq
 81094bc:	0200      	lsleq	r0, r0, #8
 81094be:	3308      	addeq	r3, #8
 81094c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 81094c4:	bf04      	itt	eq
 81094c6:	0100      	lsleq	r0, r0, #4
 81094c8:	3304      	addeq	r3, #4
 81094ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 81094ce:	bf04      	itt	eq
 81094d0:	0080      	lsleq	r0, r0, #2
 81094d2:	3302      	addeq	r3, #2
 81094d4:	2800      	cmp	r0, #0
 81094d6:	db05      	blt.n	81094e4 <__hi0bits+0x38>
 81094d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 81094dc:	f103 0301 	add.w	r3, r3, #1
 81094e0:	bf08      	it	eq
 81094e2:	2320      	moveq	r3, #32
 81094e4:	4618      	mov	r0, r3
 81094e6:	4770      	bx	lr
 81094e8:	2300      	movs	r3, #0
 81094ea:	e7e4      	b.n	81094b6 <__hi0bits+0xa>

081094ec <__lo0bits>:
 81094ec:	6803      	ldr	r3, [r0, #0]
 81094ee:	f013 0207 	ands.w	r2, r3, #7
 81094f2:	4601      	mov	r1, r0
 81094f4:	d00b      	beq.n	810950e <__lo0bits+0x22>
 81094f6:	07da      	lsls	r2, r3, #31
 81094f8:	d423      	bmi.n	8109542 <__lo0bits+0x56>
 81094fa:	0798      	lsls	r0, r3, #30
 81094fc:	bf49      	itett	mi
 81094fe:	085b      	lsrmi	r3, r3, #1
 8109500:	089b      	lsrpl	r3, r3, #2
 8109502:	2001      	movmi	r0, #1
 8109504:	600b      	strmi	r3, [r1, #0]
 8109506:	bf5c      	itt	pl
 8109508:	600b      	strpl	r3, [r1, #0]
 810950a:	2002      	movpl	r0, #2
 810950c:	4770      	bx	lr
 810950e:	b298      	uxth	r0, r3
 8109510:	b9a8      	cbnz	r0, 810953e <__lo0bits+0x52>
 8109512:	0c1b      	lsrs	r3, r3, #16
 8109514:	2010      	movs	r0, #16
 8109516:	b2da      	uxtb	r2, r3
 8109518:	b90a      	cbnz	r2, 810951e <__lo0bits+0x32>
 810951a:	3008      	adds	r0, #8
 810951c:	0a1b      	lsrs	r3, r3, #8
 810951e:	071a      	lsls	r2, r3, #28
 8109520:	bf04      	itt	eq
 8109522:	091b      	lsreq	r3, r3, #4
 8109524:	3004      	addeq	r0, #4
 8109526:	079a      	lsls	r2, r3, #30
 8109528:	bf04      	itt	eq
 810952a:	089b      	lsreq	r3, r3, #2
 810952c:	3002      	addeq	r0, #2
 810952e:	07da      	lsls	r2, r3, #31
 8109530:	d403      	bmi.n	810953a <__lo0bits+0x4e>
 8109532:	085b      	lsrs	r3, r3, #1
 8109534:	f100 0001 	add.w	r0, r0, #1
 8109538:	d005      	beq.n	8109546 <__lo0bits+0x5a>
 810953a:	600b      	str	r3, [r1, #0]
 810953c:	4770      	bx	lr
 810953e:	4610      	mov	r0, r2
 8109540:	e7e9      	b.n	8109516 <__lo0bits+0x2a>
 8109542:	2000      	movs	r0, #0
 8109544:	4770      	bx	lr
 8109546:	2020      	movs	r0, #32
 8109548:	4770      	bx	lr
	...

0810954c <__i2b>:
 810954c:	b510      	push	{r4, lr}
 810954e:	460c      	mov	r4, r1
 8109550:	2101      	movs	r1, #1
 8109552:	f7ff ff03 	bl	810935c <_Balloc>
 8109556:	4602      	mov	r2, r0
 8109558:	b928      	cbnz	r0, 8109566 <__i2b+0x1a>
 810955a:	4b05      	ldr	r3, [pc, #20]	; (8109570 <__i2b+0x24>)
 810955c:	4805      	ldr	r0, [pc, #20]	; (8109574 <__i2b+0x28>)
 810955e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8109562:	f000 fb85 	bl	8109c70 <__assert_func>
 8109566:	2301      	movs	r3, #1
 8109568:	6144      	str	r4, [r0, #20]
 810956a:	6103      	str	r3, [r0, #16]
 810956c:	bd10      	pop	{r4, pc}
 810956e:	bf00      	nop
 8109570:	0810a86f 	.word	0x0810a86f
 8109574:	0810a880 	.word	0x0810a880

08109578 <__multiply>:
 8109578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810957c:	4691      	mov	r9, r2
 810957e:	690a      	ldr	r2, [r1, #16]
 8109580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8109584:	429a      	cmp	r2, r3
 8109586:	bfb8      	it	lt
 8109588:	460b      	movlt	r3, r1
 810958a:	460c      	mov	r4, r1
 810958c:	bfbc      	itt	lt
 810958e:	464c      	movlt	r4, r9
 8109590:	4699      	movlt	r9, r3
 8109592:	6927      	ldr	r7, [r4, #16]
 8109594:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8109598:	68a3      	ldr	r3, [r4, #8]
 810959a:	6861      	ldr	r1, [r4, #4]
 810959c:	eb07 060a 	add.w	r6, r7, sl
 81095a0:	42b3      	cmp	r3, r6
 81095a2:	b085      	sub	sp, #20
 81095a4:	bfb8      	it	lt
 81095a6:	3101      	addlt	r1, #1
 81095a8:	f7ff fed8 	bl	810935c <_Balloc>
 81095ac:	b930      	cbnz	r0, 81095bc <__multiply+0x44>
 81095ae:	4602      	mov	r2, r0
 81095b0:	4b44      	ldr	r3, [pc, #272]	; (81096c4 <__multiply+0x14c>)
 81095b2:	4845      	ldr	r0, [pc, #276]	; (81096c8 <__multiply+0x150>)
 81095b4:	f240 115d 	movw	r1, #349	; 0x15d
 81095b8:	f000 fb5a 	bl	8109c70 <__assert_func>
 81095bc:	f100 0514 	add.w	r5, r0, #20
 81095c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 81095c4:	462b      	mov	r3, r5
 81095c6:	2200      	movs	r2, #0
 81095c8:	4543      	cmp	r3, r8
 81095ca:	d321      	bcc.n	8109610 <__multiply+0x98>
 81095cc:	f104 0314 	add.w	r3, r4, #20
 81095d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 81095d4:	f109 0314 	add.w	r3, r9, #20
 81095d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 81095dc:	9202      	str	r2, [sp, #8]
 81095de:	1b3a      	subs	r2, r7, r4
 81095e0:	3a15      	subs	r2, #21
 81095e2:	f022 0203 	bic.w	r2, r2, #3
 81095e6:	3204      	adds	r2, #4
 81095e8:	f104 0115 	add.w	r1, r4, #21
 81095ec:	428f      	cmp	r7, r1
 81095ee:	bf38      	it	cc
 81095f0:	2204      	movcc	r2, #4
 81095f2:	9201      	str	r2, [sp, #4]
 81095f4:	9a02      	ldr	r2, [sp, #8]
 81095f6:	9303      	str	r3, [sp, #12]
 81095f8:	429a      	cmp	r2, r3
 81095fa:	d80c      	bhi.n	8109616 <__multiply+0x9e>
 81095fc:	2e00      	cmp	r6, #0
 81095fe:	dd03      	ble.n	8109608 <__multiply+0x90>
 8109600:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8109604:	2b00      	cmp	r3, #0
 8109606:	d05a      	beq.n	81096be <__multiply+0x146>
 8109608:	6106      	str	r6, [r0, #16]
 810960a:	b005      	add	sp, #20
 810960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109610:	f843 2b04 	str.w	r2, [r3], #4
 8109614:	e7d8      	b.n	81095c8 <__multiply+0x50>
 8109616:	f8b3 a000 	ldrh.w	sl, [r3]
 810961a:	f1ba 0f00 	cmp.w	sl, #0
 810961e:	d024      	beq.n	810966a <__multiply+0xf2>
 8109620:	f104 0e14 	add.w	lr, r4, #20
 8109624:	46a9      	mov	r9, r5
 8109626:	f04f 0c00 	mov.w	ip, #0
 810962a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810962e:	f8d9 1000 	ldr.w	r1, [r9]
 8109632:	fa1f fb82 	uxth.w	fp, r2
 8109636:	b289      	uxth	r1, r1
 8109638:	fb0a 110b 	mla	r1, sl, fp, r1
 810963c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8109640:	f8d9 2000 	ldr.w	r2, [r9]
 8109644:	4461      	add	r1, ip
 8109646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810964a:	fb0a c20b 	mla	r2, sl, fp, ip
 810964e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8109652:	b289      	uxth	r1, r1
 8109654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8109658:	4577      	cmp	r7, lr
 810965a:	f849 1b04 	str.w	r1, [r9], #4
 810965e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8109662:	d8e2      	bhi.n	810962a <__multiply+0xb2>
 8109664:	9a01      	ldr	r2, [sp, #4]
 8109666:	f845 c002 	str.w	ip, [r5, r2]
 810966a:	9a03      	ldr	r2, [sp, #12]
 810966c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8109670:	3304      	adds	r3, #4
 8109672:	f1b9 0f00 	cmp.w	r9, #0
 8109676:	d020      	beq.n	81096ba <__multiply+0x142>
 8109678:	6829      	ldr	r1, [r5, #0]
 810967a:	f104 0c14 	add.w	ip, r4, #20
 810967e:	46ae      	mov	lr, r5
 8109680:	f04f 0a00 	mov.w	sl, #0
 8109684:	f8bc b000 	ldrh.w	fp, [ip]
 8109688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810968c:	fb09 220b 	mla	r2, r9, fp, r2
 8109690:	4492      	add	sl, r2
 8109692:	b289      	uxth	r1, r1
 8109694:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8109698:	f84e 1b04 	str.w	r1, [lr], #4
 810969c:	f85c 2b04 	ldr.w	r2, [ip], #4
 81096a0:	f8be 1000 	ldrh.w	r1, [lr]
 81096a4:	0c12      	lsrs	r2, r2, #16
 81096a6:	fb09 1102 	mla	r1, r9, r2, r1
 81096aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 81096ae:	4567      	cmp	r7, ip
 81096b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 81096b4:	d8e6      	bhi.n	8109684 <__multiply+0x10c>
 81096b6:	9a01      	ldr	r2, [sp, #4]
 81096b8:	50a9      	str	r1, [r5, r2]
 81096ba:	3504      	adds	r5, #4
 81096bc:	e79a      	b.n	81095f4 <__multiply+0x7c>
 81096be:	3e01      	subs	r6, #1
 81096c0:	e79c      	b.n	81095fc <__multiply+0x84>
 81096c2:	bf00      	nop
 81096c4:	0810a86f 	.word	0x0810a86f
 81096c8:	0810a880 	.word	0x0810a880

081096cc <__pow5mult>:
 81096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81096d0:	4615      	mov	r5, r2
 81096d2:	f012 0203 	ands.w	r2, r2, #3
 81096d6:	4606      	mov	r6, r0
 81096d8:	460f      	mov	r7, r1
 81096da:	d007      	beq.n	81096ec <__pow5mult+0x20>
 81096dc:	4c25      	ldr	r4, [pc, #148]	; (8109774 <__pow5mult+0xa8>)
 81096de:	3a01      	subs	r2, #1
 81096e0:	2300      	movs	r3, #0
 81096e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81096e6:	f7ff fe9b 	bl	8109420 <__multadd>
 81096ea:	4607      	mov	r7, r0
 81096ec:	10ad      	asrs	r5, r5, #2
 81096ee:	d03d      	beq.n	810976c <__pow5mult+0xa0>
 81096f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81096f2:	b97c      	cbnz	r4, 8109714 <__pow5mult+0x48>
 81096f4:	2010      	movs	r0, #16
 81096f6:	f7ff fe29 	bl	810934c <malloc>
 81096fa:	4602      	mov	r2, r0
 81096fc:	6270      	str	r0, [r6, #36]	; 0x24
 81096fe:	b928      	cbnz	r0, 810970c <__pow5mult+0x40>
 8109700:	4b1d      	ldr	r3, [pc, #116]	; (8109778 <__pow5mult+0xac>)
 8109702:	481e      	ldr	r0, [pc, #120]	; (810977c <__pow5mult+0xb0>)
 8109704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8109708:	f000 fab2 	bl	8109c70 <__assert_func>
 810970c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8109710:	6004      	str	r4, [r0, #0]
 8109712:	60c4      	str	r4, [r0, #12]
 8109714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8109718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810971c:	b94c      	cbnz	r4, 8109732 <__pow5mult+0x66>
 810971e:	f240 2171 	movw	r1, #625	; 0x271
 8109722:	4630      	mov	r0, r6
 8109724:	f7ff ff12 	bl	810954c <__i2b>
 8109728:	2300      	movs	r3, #0
 810972a:	f8c8 0008 	str.w	r0, [r8, #8]
 810972e:	4604      	mov	r4, r0
 8109730:	6003      	str	r3, [r0, #0]
 8109732:	f04f 0900 	mov.w	r9, #0
 8109736:	07eb      	lsls	r3, r5, #31
 8109738:	d50a      	bpl.n	8109750 <__pow5mult+0x84>
 810973a:	4639      	mov	r1, r7
 810973c:	4622      	mov	r2, r4
 810973e:	4630      	mov	r0, r6
 8109740:	f7ff ff1a 	bl	8109578 <__multiply>
 8109744:	4639      	mov	r1, r7
 8109746:	4680      	mov	r8, r0
 8109748:	4630      	mov	r0, r6
 810974a:	f7ff fe47 	bl	81093dc <_Bfree>
 810974e:	4647      	mov	r7, r8
 8109750:	106d      	asrs	r5, r5, #1
 8109752:	d00b      	beq.n	810976c <__pow5mult+0xa0>
 8109754:	6820      	ldr	r0, [r4, #0]
 8109756:	b938      	cbnz	r0, 8109768 <__pow5mult+0x9c>
 8109758:	4622      	mov	r2, r4
 810975a:	4621      	mov	r1, r4
 810975c:	4630      	mov	r0, r6
 810975e:	f7ff ff0b 	bl	8109578 <__multiply>
 8109762:	6020      	str	r0, [r4, #0]
 8109764:	f8c0 9000 	str.w	r9, [r0]
 8109768:	4604      	mov	r4, r0
 810976a:	e7e4      	b.n	8109736 <__pow5mult+0x6a>
 810976c:	4638      	mov	r0, r7
 810976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109772:	bf00      	nop
 8109774:	0810a9d0 	.word	0x0810a9d0
 8109778:	0810a7fd 	.word	0x0810a7fd
 810977c:	0810a880 	.word	0x0810a880

08109780 <__lshift>:
 8109780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109784:	460c      	mov	r4, r1
 8109786:	6849      	ldr	r1, [r1, #4]
 8109788:	6923      	ldr	r3, [r4, #16]
 810978a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810978e:	68a3      	ldr	r3, [r4, #8]
 8109790:	4607      	mov	r7, r0
 8109792:	4691      	mov	r9, r2
 8109794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8109798:	f108 0601 	add.w	r6, r8, #1
 810979c:	42b3      	cmp	r3, r6
 810979e:	db0b      	blt.n	81097b8 <__lshift+0x38>
 81097a0:	4638      	mov	r0, r7
 81097a2:	f7ff fddb 	bl	810935c <_Balloc>
 81097a6:	4605      	mov	r5, r0
 81097a8:	b948      	cbnz	r0, 81097be <__lshift+0x3e>
 81097aa:	4602      	mov	r2, r0
 81097ac:	4b2a      	ldr	r3, [pc, #168]	; (8109858 <__lshift+0xd8>)
 81097ae:	482b      	ldr	r0, [pc, #172]	; (810985c <__lshift+0xdc>)
 81097b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 81097b4:	f000 fa5c 	bl	8109c70 <__assert_func>
 81097b8:	3101      	adds	r1, #1
 81097ba:	005b      	lsls	r3, r3, #1
 81097bc:	e7ee      	b.n	810979c <__lshift+0x1c>
 81097be:	2300      	movs	r3, #0
 81097c0:	f100 0114 	add.w	r1, r0, #20
 81097c4:	f100 0210 	add.w	r2, r0, #16
 81097c8:	4618      	mov	r0, r3
 81097ca:	4553      	cmp	r3, sl
 81097cc:	db37      	blt.n	810983e <__lshift+0xbe>
 81097ce:	6920      	ldr	r0, [r4, #16]
 81097d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81097d4:	f104 0314 	add.w	r3, r4, #20
 81097d8:	f019 091f 	ands.w	r9, r9, #31
 81097dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81097e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 81097e4:	d02f      	beq.n	8109846 <__lshift+0xc6>
 81097e6:	f1c9 0e20 	rsb	lr, r9, #32
 81097ea:	468a      	mov	sl, r1
 81097ec:	f04f 0c00 	mov.w	ip, #0
 81097f0:	681a      	ldr	r2, [r3, #0]
 81097f2:	fa02 f209 	lsl.w	r2, r2, r9
 81097f6:	ea42 020c 	orr.w	r2, r2, ip
 81097fa:	f84a 2b04 	str.w	r2, [sl], #4
 81097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8109802:	4298      	cmp	r0, r3
 8109804:	fa22 fc0e 	lsr.w	ip, r2, lr
 8109808:	d8f2      	bhi.n	81097f0 <__lshift+0x70>
 810980a:	1b03      	subs	r3, r0, r4
 810980c:	3b15      	subs	r3, #21
 810980e:	f023 0303 	bic.w	r3, r3, #3
 8109812:	3304      	adds	r3, #4
 8109814:	f104 0215 	add.w	r2, r4, #21
 8109818:	4290      	cmp	r0, r2
 810981a:	bf38      	it	cc
 810981c:	2304      	movcc	r3, #4
 810981e:	f841 c003 	str.w	ip, [r1, r3]
 8109822:	f1bc 0f00 	cmp.w	ip, #0
 8109826:	d001      	beq.n	810982c <__lshift+0xac>
 8109828:	f108 0602 	add.w	r6, r8, #2
 810982c:	3e01      	subs	r6, #1
 810982e:	4638      	mov	r0, r7
 8109830:	612e      	str	r6, [r5, #16]
 8109832:	4621      	mov	r1, r4
 8109834:	f7ff fdd2 	bl	81093dc <_Bfree>
 8109838:	4628      	mov	r0, r5
 810983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810983e:	f842 0f04 	str.w	r0, [r2, #4]!
 8109842:	3301      	adds	r3, #1
 8109844:	e7c1      	b.n	81097ca <__lshift+0x4a>
 8109846:	3904      	subs	r1, #4
 8109848:	f853 2b04 	ldr.w	r2, [r3], #4
 810984c:	f841 2f04 	str.w	r2, [r1, #4]!
 8109850:	4298      	cmp	r0, r3
 8109852:	d8f9      	bhi.n	8109848 <__lshift+0xc8>
 8109854:	e7ea      	b.n	810982c <__lshift+0xac>
 8109856:	bf00      	nop
 8109858:	0810a86f 	.word	0x0810a86f
 810985c:	0810a880 	.word	0x0810a880

08109860 <__mcmp>:
 8109860:	b530      	push	{r4, r5, lr}
 8109862:	6902      	ldr	r2, [r0, #16]
 8109864:	690c      	ldr	r4, [r1, #16]
 8109866:	1b12      	subs	r2, r2, r4
 8109868:	d10e      	bne.n	8109888 <__mcmp+0x28>
 810986a:	f100 0314 	add.w	r3, r0, #20
 810986e:	3114      	adds	r1, #20
 8109870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8109874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8109878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810987c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8109880:	42a5      	cmp	r5, r4
 8109882:	d003      	beq.n	810988c <__mcmp+0x2c>
 8109884:	d305      	bcc.n	8109892 <__mcmp+0x32>
 8109886:	2201      	movs	r2, #1
 8109888:	4610      	mov	r0, r2
 810988a:	bd30      	pop	{r4, r5, pc}
 810988c:	4283      	cmp	r3, r0
 810988e:	d3f3      	bcc.n	8109878 <__mcmp+0x18>
 8109890:	e7fa      	b.n	8109888 <__mcmp+0x28>
 8109892:	f04f 32ff 	mov.w	r2, #4294967295
 8109896:	e7f7      	b.n	8109888 <__mcmp+0x28>

08109898 <__mdiff>:
 8109898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810989c:	460c      	mov	r4, r1
 810989e:	4606      	mov	r6, r0
 81098a0:	4611      	mov	r1, r2
 81098a2:	4620      	mov	r0, r4
 81098a4:	4690      	mov	r8, r2
 81098a6:	f7ff ffdb 	bl	8109860 <__mcmp>
 81098aa:	1e05      	subs	r5, r0, #0
 81098ac:	d110      	bne.n	81098d0 <__mdiff+0x38>
 81098ae:	4629      	mov	r1, r5
 81098b0:	4630      	mov	r0, r6
 81098b2:	f7ff fd53 	bl	810935c <_Balloc>
 81098b6:	b930      	cbnz	r0, 81098c6 <__mdiff+0x2e>
 81098b8:	4b3a      	ldr	r3, [pc, #232]	; (81099a4 <__mdiff+0x10c>)
 81098ba:	4602      	mov	r2, r0
 81098bc:	f240 2132 	movw	r1, #562	; 0x232
 81098c0:	4839      	ldr	r0, [pc, #228]	; (81099a8 <__mdiff+0x110>)
 81098c2:	f000 f9d5 	bl	8109c70 <__assert_func>
 81098c6:	2301      	movs	r3, #1
 81098c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81098cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098d0:	bfa4      	itt	ge
 81098d2:	4643      	movge	r3, r8
 81098d4:	46a0      	movge	r8, r4
 81098d6:	4630      	mov	r0, r6
 81098d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 81098dc:	bfa6      	itte	ge
 81098de:	461c      	movge	r4, r3
 81098e0:	2500      	movge	r5, #0
 81098e2:	2501      	movlt	r5, #1
 81098e4:	f7ff fd3a 	bl	810935c <_Balloc>
 81098e8:	b920      	cbnz	r0, 81098f4 <__mdiff+0x5c>
 81098ea:	4b2e      	ldr	r3, [pc, #184]	; (81099a4 <__mdiff+0x10c>)
 81098ec:	4602      	mov	r2, r0
 81098ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 81098f2:	e7e5      	b.n	81098c0 <__mdiff+0x28>
 81098f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 81098f8:	6926      	ldr	r6, [r4, #16]
 81098fa:	60c5      	str	r5, [r0, #12]
 81098fc:	f104 0914 	add.w	r9, r4, #20
 8109900:	f108 0514 	add.w	r5, r8, #20
 8109904:	f100 0e14 	add.w	lr, r0, #20
 8109908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810990c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8109910:	f108 0210 	add.w	r2, r8, #16
 8109914:	46f2      	mov	sl, lr
 8109916:	2100      	movs	r1, #0
 8109918:	f859 3b04 	ldr.w	r3, [r9], #4
 810991c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8109920:	fa1f f883 	uxth.w	r8, r3
 8109924:	fa11 f18b 	uxtah	r1, r1, fp
 8109928:	0c1b      	lsrs	r3, r3, #16
 810992a:	eba1 0808 	sub.w	r8, r1, r8
 810992e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8109932:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8109936:	fa1f f888 	uxth.w	r8, r8
 810993a:	1419      	asrs	r1, r3, #16
 810993c:	454e      	cmp	r6, r9
 810993e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8109942:	f84a 3b04 	str.w	r3, [sl], #4
 8109946:	d8e7      	bhi.n	8109918 <__mdiff+0x80>
 8109948:	1b33      	subs	r3, r6, r4
 810994a:	3b15      	subs	r3, #21
 810994c:	f023 0303 	bic.w	r3, r3, #3
 8109950:	3304      	adds	r3, #4
 8109952:	3415      	adds	r4, #21
 8109954:	42a6      	cmp	r6, r4
 8109956:	bf38      	it	cc
 8109958:	2304      	movcc	r3, #4
 810995a:	441d      	add	r5, r3
 810995c:	4473      	add	r3, lr
 810995e:	469e      	mov	lr, r3
 8109960:	462e      	mov	r6, r5
 8109962:	4566      	cmp	r6, ip
 8109964:	d30e      	bcc.n	8109984 <__mdiff+0xec>
 8109966:	f10c 0203 	add.w	r2, ip, #3
 810996a:	1b52      	subs	r2, r2, r5
 810996c:	f022 0203 	bic.w	r2, r2, #3
 8109970:	3d03      	subs	r5, #3
 8109972:	45ac      	cmp	ip, r5
 8109974:	bf38      	it	cc
 8109976:	2200      	movcc	r2, #0
 8109978:	441a      	add	r2, r3
 810997a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810997e:	b17b      	cbz	r3, 81099a0 <__mdiff+0x108>
 8109980:	6107      	str	r7, [r0, #16]
 8109982:	e7a3      	b.n	81098cc <__mdiff+0x34>
 8109984:	f856 8b04 	ldr.w	r8, [r6], #4
 8109988:	fa11 f288 	uxtah	r2, r1, r8
 810998c:	1414      	asrs	r4, r2, #16
 810998e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8109992:	b292      	uxth	r2, r2
 8109994:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8109998:	f84e 2b04 	str.w	r2, [lr], #4
 810999c:	1421      	asrs	r1, r4, #16
 810999e:	e7e0      	b.n	8109962 <__mdiff+0xca>
 81099a0:	3f01      	subs	r7, #1
 81099a2:	e7ea      	b.n	810997a <__mdiff+0xe2>
 81099a4:	0810a86f 	.word	0x0810a86f
 81099a8:	0810a880 	.word	0x0810a880

081099ac <__d2b>:
 81099ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81099b0:	4689      	mov	r9, r1
 81099b2:	2101      	movs	r1, #1
 81099b4:	ec57 6b10 	vmov	r6, r7, d0
 81099b8:	4690      	mov	r8, r2
 81099ba:	f7ff fccf 	bl	810935c <_Balloc>
 81099be:	4604      	mov	r4, r0
 81099c0:	b930      	cbnz	r0, 81099d0 <__d2b+0x24>
 81099c2:	4602      	mov	r2, r0
 81099c4:	4b25      	ldr	r3, [pc, #148]	; (8109a5c <__d2b+0xb0>)
 81099c6:	4826      	ldr	r0, [pc, #152]	; (8109a60 <__d2b+0xb4>)
 81099c8:	f240 310a 	movw	r1, #778	; 0x30a
 81099cc:	f000 f950 	bl	8109c70 <__assert_func>
 81099d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 81099d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81099d8:	bb35      	cbnz	r5, 8109a28 <__d2b+0x7c>
 81099da:	2e00      	cmp	r6, #0
 81099dc:	9301      	str	r3, [sp, #4]
 81099de:	d028      	beq.n	8109a32 <__d2b+0x86>
 81099e0:	4668      	mov	r0, sp
 81099e2:	9600      	str	r6, [sp, #0]
 81099e4:	f7ff fd82 	bl	81094ec <__lo0bits>
 81099e8:	9900      	ldr	r1, [sp, #0]
 81099ea:	b300      	cbz	r0, 8109a2e <__d2b+0x82>
 81099ec:	9a01      	ldr	r2, [sp, #4]
 81099ee:	f1c0 0320 	rsb	r3, r0, #32
 81099f2:	fa02 f303 	lsl.w	r3, r2, r3
 81099f6:	430b      	orrs	r3, r1
 81099f8:	40c2      	lsrs	r2, r0
 81099fa:	6163      	str	r3, [r4, #20]
 81099fc:	9201      	str	r2, [sp, #4]
 81099fe:	9b01      	ldr	r3, [sp, #4]
 8109a00:	61a3      	str	r3, [r4, #24]
 8109a02:	2b00      	cmp	r3, #0
 8109a04:	bf14      	ite	ne
 8109a06:	2202      	movne	r2, #2
 8109a08:	2201      	moveq	r2, #1
 8109a0a:	6122      	str	r2, [r4, #16]
 8109a0c:	b1d5      	cbz	r5, 8109a44 <__d2b+0x98>
 8109a0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8109a12:	4405      	add	r5, r0
 8109a14:	f8c9 5000 	str.w	r5, [r9]
 8109a18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8109a1c:	f8c8 0000 	str.w	r0, [r8]
 8109a20:	4620      	mov	r0, r4
 8109a22:	b003      	add	sp, #12
 8109a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109a2c:	e7d5      	b.n	81099da <__d2b+0x2e>
 8109a2e:	6161      	str	r1, [r4, #20]
 8109a30:	e7e5      	b.n	81099fe <__d2b+0x52>
 8109a32:	a801      	add	r0, sp, #4
 8109a34:	f7ff fd5a 	bl	81094ec <__lo0bits>
 8109a38:	9b01      	ldr	r3, [sp, #4]
 8109a3a:	6163      	str	r3, [r4, #20]
 8109a3c:	2201      	movs	r2, #1
 8109a3e:	6122      	str	r2, [r4, #16]
 8109a40:	3020      	adds	r0, #32
 8109a42:	e7e3      	b.n	8109a0c <__d2b+0x60>
 8109a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8109a4c:	f8c9 0000 	str.w	r0, [r9]
 8109a50:	6918      	ldr	r0, [r3, #16]
 8109a52:	f7ff fd2b 	bl	81094ac <__hi0bits>
 8109a56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8109a5a:	e7df      	b.n	8109a1c <__d2b+0x70>
 8109a5c:	0810a86f 	.word	0x0810a86f
 8109a60:	0810a880 	.word	0x0810a880

08109a64 <_calloc_r>:
 8109a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109a66:	fba1 2402 	umull	r2, r4, r1, r2
 8109a6a:	b94c      	cbnz	r4, 8109a80 <_calloc_r+0x1c>
 8109a6c:	4611      	mov	r1, r2
 8109a6e:	9201      	str	r2, [sp, #4]
 8109a70:	f000 f87a 	bl	8109b68 <_malloc_r>
 8109a74:	9a01      	ldr	r2, [sp, #4]
 8109a76:	4605      	mov	r5, r0
 8109a78:	b930      	cbnz	r0, 8109a88 <_calloc_r+0x24>
 8109a7a:	4628      	mov	r0, r5
 8109a7c:	b003      	add	sp, #12
 8109a7e:	bd30      	pop	{r4, r5, pc}
 8109a80:	220c      	movs	r2, #12
 8109a82:	6002      	str	r2, [r0, #0]
 8109a84:	2500      	movs	r5, #0
 8109a86:	e7f8      	b.n	8109a7a <_calloc_r+0x16>
 8109a88:	4621      	mov	r1, r4
 8109a8a:	f7fe f96d 	bl	8107d68 <memset>
 8109a8e:	e7f4      	b.n	8109a7a <_calloc_r+0x16>

08109a90 <_free_r>:
 8109a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109a92:	2900      	cmp	r1, #0
 8109a94:	d044      	beq.n	8109b20 <_free_r+0x90>
 8109a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109a9a:	9001      	str	r0, [sp, #4]
 8109a9c:	2b00      	cmp	r3, #0
 8109a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8109aa2:	bfb8      	it	lt
 8109aa4:	18e4      	addlt	r4, r4, r3
 8109aa6:	f000 f925 	bl	8109cf4 <__malloc_lock>
 8109aaa:	4a1e      	ldr	r2, [pc, #120]	; (8109b24 <_free_r+0x94>)
 8109aac:	9801      	ldr	r0, [sp, #4]
 8109aae:	6813      	ldr	r3, [r2, #0]
 8109ab0:	b933      	cbnz	r3, 8109ac0 <_free_r+0x30>
 8109ab2:	6063      	str	r3, [r4, #4]
 8109ab4:	6014      	str	r4, [r2, #0]
 8109ab6:	b003      	add	sp, #12
 8109ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109abc:	f000 b920 	b.w	8109d00 <__malloc_unlock>
 8109ac0:	42a3      	cmp	r3, r4
 8109ac2:	d908      	bls.n	8109ad6 <_free_r+0x46>
 8109ac4:	6825      	ldr	r5, [r4, #0]
 8109ac6:	1961      	adds	r1, r4, r5
 8109ac8:	428b      	cmp	r3, r1
 8109aca:	bf01      	itttt	eq
 8109acc:	6819      	ldreq	r1, [r3, #0]
 8109ace:	685b      	ldreq	r3, [r3, #4]
 8109ad0:	1949      	addeq	r1, r1, r5
 8109ad2:	6021      	streq	r1, [r4, #0]
 8109ad4:	e7ed      	b.n	8109ab2 <_free_r+0x22>
 8109ad6:	461a      	mov	r2, r3
 8109ad8:	685b      	ldr	r3, [r3, #4]
 8109ada:	b10b      	cbz	r3, 8109ae0 <_free_r+0x50>
 8109adc:	42a3      	cmp	r3, r4
 8109ade:	d9fa      	bls.n	8109ad6 <_free_r+0x46>
 8109ae0:	6811      	ldr	r1, [r2, #0]
 8109ae2:	1855      	adds	r5, r2, r1
 8109ae4:	42a5      	cmp	r5, r4
 8109ae6:	d10b      	bne.n	8109b00 <_free_r+0x70>
 8109ae8:	6824      	ldr	r4, [r4, #0]
 8109aea:	4421      	add	r1, r4
 8109aec:	1854      	adds	r4, r2, r1
 8109aee:	42a3      	cmp	r3, r4
 8109af0:	6011      	str	r1, [r2, #0]
 8109af2:	d1e0      	bne.n	8109ab6 <_free_r+0x26>
 8109af4:	681c      	ldr	r4, [r3, #0]
 8109af6:	685b      	ldr	r3, [r3, #4]
 8109af8:	6053      	str	r3, [r2, #4]
 8109afa:	4421      	add	r1, r4
 8109afc:	6011      	str	r1, [r2, #0]
 8109afe:	e7da      	b.n	8109ab6 <_free_r+0x26>
 8109b00:	d902      	bls.n	8109b08 <_free_r+0x78>
 8109b02:	230c      	movs	r3, #12
 8109b04:	6003      	str	r3, [r0, #0]
 8109b06:	e7d6      	b.n	8109ab6 <_free_r+0x26>
 8109b08:	6825      	ldr	r5, [r4, #0]
 8109b0a:	1961      	adds	r1, r4, r5
 8109b0c:	428b      	cmp	r3, r1
 8109b0e:	bf04      	itt	eq
 8109b10:	6819      	ldreq	r1, [r3, #0]
 8109b12:	685b      	ldreq	r3, [r3, #4]
 8109b14:	6063      	str	r3, [r4, #4]
 8109b16:	bf04      	itt	eq
 8109b18:	1949      	addeq	r1, r1, r5
 8109b1a:	6021      	streq	r1, [r4, #0]
 8109b1c:	6054      	str	r4, [r2, #4]
 8109b1e:	e7ca      	b.n	8109ab6 <_free_r+0x26>
 8109b20:	b003      	add	sp, #12
 8109b22:	bd30      	pop	{r4, r5, pc}
 8109b24:	10000300 	.word	0x10000300

08109b28 <sbrk_aligned>:
 8109b28:	b570      	push	{r4, r5, r6, lr}
 8109b2a:	4e0e      	ldr	r6, [pc, #56]	; (8109b64 <sbrk_aligned+0x3c>)
 8109b2c:	460c      	mov	r4, r1
 8109b2e:	6831      	ldr	r1, [r6, #0]
 8109b30:	4605      	mov	r5, r0
 8109b32:	b911      	cbnz	r1, 8109b3a <sbrk_aligned+0x12>
 8109b34:	f000 f88c 	bl	8109c50 <_sbrk_r>
 8109b38:	6030      	str	r0, [r6, #0]
 8109b3a:	4621      	mov	r1, r4
 8109b3c:	4628      	mov	r0, r5
 8109b3e:	f000 f887 	bl	8109c50 <_sbrk_r>
 8109b42:	1c43      	adds	r3, r0, #1
 8109b44:	d00a      	beq.n	8109b5c <sbrk_aligned+0x34>
 8109b46:	1cc4      	adds	r4, r0, #3
 8109b48:	f024 0403 	bic.w	r4, r4, #3
 8109b4c:	42a0      	cmp	r0, r4
 8109b4e:	d007      	beq.n	8109b60 <sbrk_aligned+0x38>
 8109b50:	1a21      	subs	r1, r4, r0
 8109b52:	4628      	mov	r0, r5
 8109b54:	f000 f87c 	bl	8109c50 <_sbrk_r>
 8109b58:	3001      	adds	r0, #1
 8109b5a:	d101      	bne.n	8109b60 <sbrk_aligned+0x38>
 8109b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8109b60:	4620      	mov	r0, r4
 8109b62:	bd70      	pop	{r4, r5, r6, pc}
 8109b64:	10000304 	.word	0x10000304

08109b68 <_malloc_r>:
 8109b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109b6c:	1ccd      	adds	r5, r1, #3
 8109b6e:	f025 0503 	bic.w	r5, r5, #3
 8109b72:	3508      	adds	r5, #8
 8109b74:	2d0c      	cmp	r5, #12
 8109b76:	bf38      	it	cc
 8109b78:	250c      	movcc	r5, #12
 8109b7a:	2d00      	cmp	r5, #0
 8109b7c:	4607      	mov	r7, r0
 8109b7e:	db01      	blt.n	8109b84 <_malloc_r+0x1c>
 8109b80:	42a9      	cmp	r1, r5
 8109b82:	d905      	bls.n	8109b90 <_malloc_r+0x28>
 8109b84:	230c      	movs	r3, #12
 8109b86:	603b      	str	r3, [r7, #0]
 8109b88:	2600      	movs	r6, #0
 8109b8a:	4630      	mov	r0, r6
 8109b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109b90:	4e2e      	ldr	r6, [pc, #184]	; (8109c4c <_malloc_r+0xe4>)
 8109b92:	f000 f8af 	bl	8109cf4 <__malloc_lock>
 8109b96:	6833      	ldr	r3, [r6, #0]
 8109b98:	461c      	mov	r4, r3
 8109b9a:	bb34      	cbnz	r4, 8109bea <_malloc_r+0x82>
 8109b9c:	4629      	mov	r1, r5
 8109b9e:	4638      	mov	r0, r7
 8109ba0:	f7ff ffc2 	bl	8109b28 <sbrk_aligned>
 8109ba4:	1c43      	adds	r3, r0, #1
 8109ba6:	4604      	mov	r4, r0
 8109ba8:	d14d      	bne.n	8109c46 <_malloc_r+0xde>
 8109baa:	6834      	ldr	r4, [r6, #0]
 8109bac:	4626      	mov	r6, r4
 8109bae:	2e00      	cmp	r6, #0
 8109bb0:	d140      	bne.n	8109c34 <_malloc_r+0xcc>
 8109bb2:	6823      	ldr	r3, [r4, #0]
 8109bb4:	4631      	mov	r1, r6
 8109bb6:	4638      	mov	r0, r7
 8109bb8:	eb04 0803 	add.w	r8, r4, r3
 8109bbc:	f000 f848 	bl	8109c50 <_sbrk_r>
 8109bc0:	4580      	cmp	r8, r0
 8109bc2:	d13a      	bne.n	8109c3a <_malloc_r+0xd2>
 8109bc4:	6821      	ldr	r1, [r4, #0]
 8109bc6:	3503      	adds	r5, #3
 8109bc8:	1a6d      	subs	r5, r5, r1
 8109bca:	f025 0503 	bic.w	r5, r5, #3
 8109bce:	3508      	adds	r5, #8
 8109bd0:	2d0c      	cmp	r5, #12
 8109bd2:	bf38      	it	cc
 8109bd4:	250c      	movcc	r5, #12
 8109bd6:	4629      	mov	r1, r5
 8109bd8:	4638      	mov	r0, r7
 8109bda:	f7ff ffa5 	bl	8109b28 <sbrk_aligned>
 8109bde:	3001      	adds	r0, #1
 8109be0:	d02b      	beq.n	8109c3a <_malloc_r+0xd2>
 8109be2:	6823      	ldr	r3, [r4, #0]
 8109be4:	442b      	add	r3, r5
 8109be6:	6023      	str	r3, [r4, #0]
 8109be8:	e00e      	b.n	8109c08 <_malloc_r+0xa0>
 8109bea:	6822      	ldr	r2, [r4, #0]
 8109bec:	1b52      	subs	r2, r2, r5
 8109bee:	d41e      	bmi.n	8109c2e <_malloc_r+0xc6>
 8109bf0:	2a0b      	cmp	r2, #11
 8109bf2:	d916      	bls.n	8109c22 <_malloc_r+0xba>
 8109bf4:	1961      	adds	r1, r4, r5
 8109bf6:	42a3      	cmp	r3, r4
 8109bf8:	6025      	str	r5, [r4, #0]
 8109bfa:	bf18      	it	ne
 8109bfc:	6059      	strne	r1, [r3, #4]
 8109bfe:	6863      	ldr	r3, [r4, #4]
 8109c00:	bf08      	it	eq
 8109c02:	6031      	streq	r1, [r6, #0]
 8109c04:	5162      	str	r2, [r4, r5]
 8109c06:	604b      	str	r3, [r1, #4]
 8109c08:	4638      	mov	r0, r7
 8109c0a:	f104 060b 	add.w	r6, r4, #11
 8109c0e:	f000 f877 	bl	8109d00 <__malloc_unlock>
 8109c12:	f026 0607 	bic.w	r6, r6, #7
 8109c16:	1d23      	adds	r3, r4, #4
 8109c18:	1af2      	subs	r2, r6, r3
 8109c1a:	d0b6      	beq.n	8109b8a <_malloc_r+0x22>
 8109c1c:	1b9b      	subs	r3, r3, r6
 8109c1e:	50a3      	str	r3, [r4, r2]
 8109c20:	e7b3      	b.n	8109b8a <_malloc_r+0x22>
 8109c22:	6862      	ldr	r2, [r4, #4]
 8109c24:	42a3      	cmp	r3, r4
 8109c26:	bf0c      	ite	eq
 8109c28:	6032      	streq	r2, [r6, #0]
 8109c2a:	605a      	strne	r2, [r3, #4]
 8109c2c:	e7ec      	b.n	8109c08 <_malloc_r+0xa0>
 8109c2e:	4623      	mov	r3, r4
 8109c30:	6864      	ldr	r4, [r4, #4]
 8109c32:	e7b2      	b.n	8109b9a <_malloc_r+0x32>
 8109c34:	4634      	mov	r4, r6
 8109c36:	6876      	ldr	r6, [r6, #4]
 8109c38:	e7b9      	b.n	8109bae <_malloc_r+0x46>
 8109c3a:	230c      	movs	r3, #12
 8109c3c:	603b      	str	r3, [r7, #0]
 8109c3e:	4638      	mov	r0, r7
 8109c40:	f000 f85e 	bl	8109d00 <__malloc_unlock>
 8109c44:	e7a1      	b.n	8109b8a <_malloc_r+0x22>
 8109c46:	6025      	str	r5, [r4, #0]
 8109c48:	e7de      	b.n	8109c08 <_malloc_r+0xa0>
 8109c4a:	bf00      	nop
 8109c4c:	10000300 	.word	0x10000300

08109c50 <_sbrk_r>:
 8109c50:	b538      	push	{r3, r4, r5, lr}
 8109c52:	4d06      	ldr	r5, [pc, #24]	; (8109c6c <_sbrk_r+0x1c>)
 8109c54:	2300      	movs	r3, #0
 8109c56:	4604      	mov	r4, r0
 8109c58:	4608      	mov	r0, r1
 8109c5a:	602b      	str	r3, [r5, #0]
 8109c5c:	f7f8 f8fc 	bl	8101e58 <_sbrk>
 8109c60:	1c43      	adds	r3, r0, #1
 8109c62:	d102      	bne.n	8109c6a <_sbrk_r+0x1a>
 8109c64:	682b      	ldr	r3, [r5, #0]
 8109c66:	b103      	cbz	r3, 8109c6a <_sbrk_r+0x1a>
 8109c68:	6023      	str	r3, [r4, #0]
 8109c6a:	bd38      	pop	{r3, r4, r5, pc}
 8109c6c:	10000308 	.word	0x10000308

08109c70 <__assert_func>:
 8109c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8109c72:	4614      	mov	r4, r2
 8109c74:	461a      	mov	r2, r3
 8109c76:	4b09      	ldr	r3, [pc, #36]	; (8109c9c <__assert_func+0x2c>)
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	4605      	mov	r5, r0
 8109c7c:	68d8      	ldr	r0, [r3, #12]
 8109c7e:	b14c      	cbz	r4, 8109c94 <__assert_func+0x24>
 8109c80:	4b07      	ldr	r3, [pc, #28]	; (8109ca0 <__assert_func+0x30>)
 8109c82:	9100      	str	r1, [sp, #0]
 8109c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8109c88:	4906      	ldr	r1, [pc, #24]	; (8109ca4 <__assert_func+0x34>)
 8109c8a:	462b      	mov	r3, r5
 8109c8c:	f000 f80e 	bl	8109cac <fiprintf>
 8109c90:	f000 fa64 	bl	810a15c <abort>
 8109c94:	4b04      	ldr	r3, [pc, #16]	; (8109ca8 <__assert_func+0x38>)
 8109c96:	461c      	mov	r4, r3
 8109c98:	e7f3      	b.n	8109c82 <__assert_func+0x12>
 8109c9a:	bf00      	nop
 8109c9c:	10000010 	.word	0x10000010
 8109ca0:	0810a9dc 	.word	0x0810a9dc
 8109ca4:	0810a9e9 	.word	0x0810a9e9
 8109ca8:	0810aa17 	.word	0x0810aa17

08109cac <fiprintf>:
 8109cac:	b40e      	push	{r1, r2, r3}
 8109cae:	b503      	push	{r0, r1, lr}
 8109cb0:	4601      	mov	r1, r0
 8109cb2:	ab03      	add	r3, sp, #12
 8109cb4:	4805      	ldr	r0, [pc, #20]	; (8109ccc <fiprintf+0x20>)
 8109cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8109cba:	6800      	ldr	r0, [r0, #0]
 8109cbc:	9301      	str	r3, [sp, #4]
 8109cbe:	f000 f84f 	bl	8109d60 <_vfiprintf_r>
 8109cc2:	b002      	add	sp, #8
 8109cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8109cc8:	b003      	add	sp, #12
 8109cca:	4770      	bx	lr
 8109ccc:	10000010 	.word	0x10000010

08109cd0 <__ascii_mbtowc>:
 8109cd0:	b082      	sub	sp, #8
 8109cd2:	b901      	cbnz	r1, 8109cd6 <__ascii_mbtowc+0x6>
 8109cd4:	a901      	add	r1, sp, #4
 8109cd6:	b142      	cbz	r2, 8109cea <__ascii_mbtowc+0x1a>
 8109cd8:	b14b      	cbz	r3, 8109cee <__ascii_mbtowc+0x1e>
 8109cda:	7813      	ldrb	r3, [r2, #0]
 8109cdc:	600b      	str	r3, [r1, #0]
 8109cde:	7812      	ldrb	r2, [r2, #0]
 8109ce0:	1e10      	subs	r0, r2, #0
 8109ce2:	bf18      	it	ne
 8109ce4:	2001      	movne	r0, #1
 8109ce6:	b002      	add	sp, #8
 8109ce8:	4770      	bx	lr
 8109cea:	4610      	mov	r0, r2
 8109cec:	e7fb      	b.n	8109ce6 <__ascii_mbtowc+0x16>
 8109cee:	f06f 0001 	mvn.w	r0, #1
 8109cf2:	e7f8      	b.n	8109ce6 <__ascii_mbtowc+0x16>

08109cf4 <__malloc_lock>:
 8109cf4:	4801      	ldr	r0, [pc, #4]	; (8109cfc <__malloc_lock+0x8>)
 8109cf6:	f000 bbf1 	b.w	810a4dc <__retarget_lock_acquire_recursive>
 8109cfa:	bf00      	nop
 8109cfc:	1000030c 	.word	0x1000030c

08109d00 <__malloc_unlock>:
 8109d00:	4801      	ldr	r0, [pc, #4]	; (8109d08 <__malloc_unlock+0x8>)
 8109d02:	f000 bbec 	b.w	810a4de <__retarget_lock_release_recursive>
 8109d06:	bf00      	nop
 8109d08:	1000030c 	.word	0x1000030c

08109d0c <__sfputc_r>:
 8109d0c:	6893      	ldr	r3, [r2, #8]
 8109d0e:	3b01      	subs	r3, #1
 8109d10:	2b00      	cmp	r3, #0
 8109d12:	b410      	push	{r4}
 8109d14:	6093      	str	r3, [r2, #8]
 8109d16:	da08      	bge.n	8109d2a <__sfputc_r+0x1e>
 8109d18:	6994      	ldr	r4, [r2, #24]
 8109d1a:	42a3      	cmp	r3, r4
 8109d1c:	db01      	blt.n	8109d22 <__sfputc_r+0x16>
 8109d1e:	290a      	cmp	r1, #10
 8109d20:	d103      	bne.n	8109d2a <__sfputc_r+0x1e>
 8109d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109d26:	f000 b94b 	b.w	8109fc0 <__swbuf_r>
 8109d2a:	6813      	ldr	r3, [r2, #0]
 8109d2c:	1c58      	adds	r0, r3, #1
 8109d2e:	6010      	str	r0, [r2, #0]
 8109d30:	7019      	strb	r1, [r3, #0]
 8109d32:	4608      	mov	r0, r1
 8109d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109d38:	4770      	bx	lr

08109d3a <__sfputs_r>:
 8109d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109d3c:	4606      	mov	r6, r0
 8109d3e:	460f      	mov	r7, r1
 8109d40:	4614      	mov	r4, r2
 8109d42:	18d5      	adds	r5, r2, r3
 8109d44:	42ac      	cmp	r4, r5
 8109d46:	d101      	bne.n	8109d4c <__sfputs_r+0x12>
 8109d48:	2000      	movs	r0, #0
 8109d4a:	e007      	b.n	8109d5c <__sfputs_r+0x22>
 8109d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109d50:	463a      	mov	r2, r7
 8109d52:	4630      	mov	r0, r6
 8109d54:	f7ff ffda 	bl	8109d0c <__sfputc_r>
 8109d58:	1c43      	adds	r3, r0, #1
 8109d5a:	d1f3      	bne.n	8109d44 <__sfputs_r+0xa>
 8109d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08109d60 <_vfiprintf_r>:
 8109d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109d64:	460d      	mov	r5, r1
 8109d66:	b09d      	sub	sp, #116	; 0x74
 8109d68:	4614      	mov	r4, r2
 8109d6a:	4698      	mov	r8, r3
 8109d6c:	4606      	mov	r6, r0
 8109d6e:	b118      	cbz	r0, 8109d78 <_vfiprintf_r+0x18>
 8109d70:	6983      	ldr	r3, [r0, #24]
 8109d72:	b90b      	cbnz	r3, 8109d78 <_vfiprintf_r+0x18>
 8109d74:	f000 fb14 	bl	810a3a0 <__sinit>
 8109d78:	4b89      	ldr	r3, [pc, #548]	; (8109fa0 <_vfiprintf_r+0x240>)
 8109d7a:	429d      	cmp	r5, r3
 8109d7c:	d11b      	bne.n	8109db6 <_vfiprintf_r+0x56>
 8109d7e:	6875      	ldr	r5, [r6, #4]
 8109d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109d82:	07d9      	lsls	r1, r3, #31
 8109d84:	d405      	bmi.n	8109d92 <_vfiprintf_r+0x32>
 8109d86:	89ab      	ldrh	r3, [r5, #12]
 8109d88:	059a      	lsls	r2, r3, #22
 8109d8a:	d402      	bmi.n	8109d92 <_vfiprintf_r+0x32>
 8109d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109d8e:	f000 fba5 	bl	810a4dc <__retarget_lock_acquire_recursive>
 8109d92:	89ab      	ldrh	r3, [r5, #12]
 8109d94:	071b      	lsls	r3, r3, #28
 8109d96:	d501      	bpl.n	8109d9c <_vfiprintf_r+0x3c>
 8109d98:	692b      	ldr	r3, [r5, #16]
 8109d9a:	b9eb      	cbnz	r3, 8109dd8 <_vfiprintf_r+0x78>
 8109d9c:	4629      	mov	r1, r5
 8109d9e:	4630      	mov	r0, r6
 8109da0:	f000 f96e 	bl	810a080 <__swsetup_r>
 8109da4:	b1c0      	cbz	r0, 8109dd8 <_vfiprintf_r+0x78>
 8109da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109da8:	07dc      	lsls	r4, r3, #31
 8109daa:	d50e      	bpl.n	8109dca <_vfiprintf_r+0x6a>
 8109dac:	f04f 30ff 	mov.w	r0, #4294967295
 8109db0:	b01d      	add	sp, #116	; 0x74
 8109db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109db6:	4b7b      	ldr	r3, [pc, #492]	; (8109fa4 <_vfiprintf_r+0x244>)
 8109db8:	429d      	cmp	r5, r3
 8109dba:	d101      	bne.n	8109dc0 <_vfiprintf_r+0x60>
 8109dbc:	68b5      	ldr	r5, [r6, #8]
 8109dbe:	e7df      	b.n	8109d80 <_vfiprintf_r+0x20>
 8109dc0:	4b79      	ldr	r3, [pc, #484]	; (8109fa8 <_vfiprintf_r+0x248>)
 8109dc2:	429d      	cmp	r5, r3
 8109dc4:	bf08      	it	eq
 8109dc6:	68f5      	ldreq	r5, [r6, #12]
 8109dc8:	e7da      	b.n	8109d80 <_vfiprintf_r+0x20>
 8109dca:	89ab      	ldrh	r3, [r5, #12]
 8109dcc:	0598      	lsls	r0, r3, #22
 8109dce:	d4ed      	bmi.n	8109dac <_vfiprintf_r+0x4c>
 8109dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109dd2:	f000 fb84 	bl	810a4de <__retarget_lock_release_recursive>
 8109dd6:	e7e9      	b.n	8109dac <_vfiprintf_r+0x4c>
 8109dd8:	2300      	movs	r3, #0
 8109dda:	9309      	str	r3, [sp, #36]	; 0x24
 8109ddc:	2320      	movs	r3, #32
 8109dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8109de6:	2330      	movs	r3, #48	; 0x30
 8109de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8109fac <_vfiprintf_r+0x24c>
 8109dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109df0:	f04f 0901 	mov.w	r9, #1
 8109df4:	4623      	mov	r3, r4
 8109df6:	469a      	mov	sl, r3
 8109df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109dfc:	b10a      	cbz	r2, 8109e02 <_vfiprintf_r+0xa2>
 8109dfe:	2a25      	cmp	r2, #37	; 0x25
 8109e00:	d1f9      	bne.n	8109df6 <_vfiprintf_r+0x96>
 8109e02:	ebba 0b04 	subs.w	fp, sl, r4
 8109e06:	d00b      	beq.n	8109e20 <_vfiprintf_r+0xc0>
 8109e08:	465b      	mov	r3, fp
 8109e0a:	4622      	mov	r2, r4
 8109e0c:	4629      	mov	r1, r5
 8109e0e:	4630      	mov	r0, r6
 8109e10:	f7ff ff93 	bl	8109d3a <__sfputs_r>
 8109e14:	3001      	adds	r0, #1
 8109e16:	f000 80aa 	beq.w	8109f6e <_vfiprintf_r+0x20e>
 8109e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109e1c:	445a      	add	r2, fp
 8109e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8109e20:	f89a 3000 	ldrb.w	r3, [sl]
 8109e24:	2b00      	cmp	r3, #0
 8109e26:	f000 80a2 	beq.w	8109f6e <_vfiprintf_r+0x20e>
 8109e2a:	2300      	movs	r3, #0
 8109e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8109e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109e34:	f10a 0a01 	add.w	sl, sl, #1
 8109e38:	9304      	str	r3, [sp, #16]
 8109e3a:	9307      	str	r3, [sp, #28]
 8109e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109e40:	931a      	str	r3, [sp, #104]	; 0x68
 8109e42:	4654      	mov	r4, sl
 8109e44:	2205      	movs	r2, #5
 8109e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109e4a:	4858      	ldr	r0, [pc, #352]	; (8109fac <_vfiprintf_r+0x24c>)
 8109e4c:	f7f6 fa50 	bl	81002f0 <memchr>
 8109e50:	9a04      	ldr	r2, [sp, #16]
 8109e52:	b9d8      	cbnz	r0, 8109e8c <_vfiprintf_r+0x12c>
 8109e54:	06d1      	lsls	r1, r2, #27
 8109e56:	bf44      	itt	mi
 8109e58:	2320      	movmi	r3, #32
 8109e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109e5e:	0713      	lsls	r3, r2, #28
 8109e60:	bf44      	itt	mi
 8109e62:	232b      	movmi	r3, #43	; 0x2b
 8109e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109e68:	f89a 3000 	ldrb.w	r3, [sl]
 8109e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8109e6e:	d015      	beq.n	8109e9c <_vfiprintf_r+0x13c>
 8109e70:	9a07      	ldr	r2, [sp, #28]
 8109e72:	4654      	mov	r4, sl
 8109e74:	2000      	movs	r0, #0
 8109e76:	f04f 0c0a 	mov.w	ip, #10
 8109e7a:	4621      	mov	r1, r4
 8109e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109e80:	3b30      	subs	r3, #48	; 0x30
 8109e82:	2b09      	cmp	r3, #9
 8109e84:	d94e      	bls.n	8109f24 <_vfiprintf_r+0x1c4>
 8109e86:	b1b0      	cbz	r0, 8109eb6 <_vfiprintf_r+0x156>
 8109e88:	9207      	str	r2, [sp, #28]
 8109e8a:	e014      	b.n	8109eb6 <_vfiprintf_r+0x156>
 8109e8c:	eba0 0308 	sub.w	r3, r0, r8
 8109e90:	fa09 f303 	lsl.w	r3, r9, r3
 8109e94:	4313      	orrs	r3, r2
 8109e96:	9304      	str	r3, [sp, #16]
 8109e98:	46a2      	mov	sl, r4
 8109e9a:	e7d2      	b.n	8109e42 <_vfiprintf_r+0xe2>
 8109e9c:	9b03      	ldr	r3, [sp, #12]
 8109e9e:	1d19      	adds	r1, r3, #4
 8109ea0:	681b      	ldr	r3, [r3, #0]
 8109ea2:	9103      	str	r1, [sp, #12]
 8109ea4:	2b00      	cmp	r3, #0
 8109ea6:	bfbb      	ittet	lt
 8109ea8:	425b      	neglt	r3, r3
 8109eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8109eae:	9307      	strge	r3, [sp, #28]
 8109eb0:	9307      	strlt	r3, [sp, #28]
 8109eb2:	bfb8      	it	lt
 8109eb4:	9204      	strlt	r2, [sp, #16]
 8109eb6:	7823      	ldrb	r3, [r4, #0]
 8109eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8109eba:	d10c      	bne.n	8109ed6 <_vfiprintf_r+0x176>
 8109ebc:	7863      	ldrb	r3, [r4, #1]
 8109ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8109ec0:	d135      	bne.n	8109f2e <_vfiprintf_r+0x1ce>
 8109ec2:	9b03      	ldr	r3, [sp, #12]
 8109ec4:	1d1a      	adds	r2, r3, #4
 8109ec6:	681b      	ldr	r3, [r3, #0]
 8109ec8:	9203      	str	r2, [sp, #12]
 8109eca:	2b00      	cmp	r3, #0
 8109ecc:	bfb8      	it	lt
 8109ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8109ed2:	3402      	adds	r4, #2
 8109ed4:	9305      	str	r3, [sp, #20]
 8109ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8109fbc <_vfiprintf_r+0x25c>
 8109eda:	7821      	ldrb	r1, [r4, #0]
 8109edc:	2203      	movs	r2, #3
 8109ede:	4650      	mov	r0, sl
 8109ee0:	f7f6 fa06 	bl	81002f0 <memchr>
 8109ee4:	b140      	cbz	r0, 8109ef8 <_vfiprintf_r+0x198>
 8109ee6:	2340      	movs	r3, #64	; 0x40
 8109ee8:	eba0 000a 	sub.w	r0, r0, sl
 8109eec:	fa03 f000 	lsl.w	r0, r3, r0
 8109ef0:	9b04      	ldr	r3, [sp, #16]
 8109ef2:	4303      	orrs	r3, r0
 8109ef4:	3401      	adds	r4, #1
 8109ef6:	9304      	str	r3, [sp, #16]
 8109ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109efc:	482c      	ldr	r0, [pc, #176]	; (8109fb0 <_vfiprintf_r+0x250>)
 8109efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109f02:	2206      	movs	r2, #6
 8109f04:	f7f6 f9f4 	bl	81002f0 <memchr>
 8109f08:	2800      	cmp	r0, #0
 8109f0a:	d03f      	beq.n	8109f8c <_vfiprintf_r+0x22c>
 8109f0c:	4b29      	ldr	r3, [pc, #164]	; (8109fb4 <_vfiprintf_r+0x254>)
 8109f0e:	bb1b      	cbnz	r3, 8109f58 <_vfiprintf_r+0x1f8>
 8109f10:	9b03      	ldr	r3, [sp, #12]
 8109f12:	3307      	adds	r3, #7
 8109f14:	f023 0307 	bic.w	r3, r3, #7
 8109f18:	3308      	adds	r3, #8
 8109f1a:	9303      	str	r3, [sp, #12]
 8109f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109f1e:	443b      	add	r3, r7
 8109f20:	9309      	str	r3, [sp, #36]	; 0x24
 8109f22:	e767      	b.n	8109df4 <_vfiprintf_r+0x94>
 8109f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8109f28:	460c      	mov	r4, r1
 8109f2a:	2001      	movs	r0, #1
 8109f2c:	e7a5      	b.n	8109e7a <_vfiprintf_r+0x11a>
 8109f2e:	2300      	movs	r3, #0
 8109f30:	3401      	adds	r4, #1
 8109f32:	9305      	str	r3, [sp, #20]
 8109f34:	4619      	mov	r1, r3
 8109f36:	f04f 0c0a 	mov.w	ip, #10
 8109f3a:	4620      	mov	r0, r4
 8109f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8109f40:	3a30      	subs	r2, #48	; 0x30
 8109f42:	2a09      	cmp	r2, #9
 8109f44:	d903      	bls.n	8109f4e <_vfiprintf_r+0x1ee>
 8109f46:	2b00      	cmp	r3, #0
 8109f48:	d0c5      	beq.n	8109ed6 <_vfiprintf_r+0x176>
 8109f4a:	9105      	str	r1, [sp, #20]
 8109f4c:	e7c3      	b.n	8109ed6 <_vfiprintf_r+0x176>
 8109f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8109f52:	4604      	mov	r4, r0
 8109f54:	2301      	movs	r3, #1
 8109f56:	e7f0      	b.n	8109f3a <_vfiprintf_r+0x1da>
 8109f58:	ab03      	add	r3, sp, #12
 8109f5a:	9300      	str	r3, [sp, #0]
 8109f5c:	462a      	mov	r2, r5
 8109f5e:	4b16      	ldr	r3, [pc, #88]	; (8109fb8 <_vfiprintf_r+0x258>)
 8109f60:	a904      	add	r1, sp, #16
 8109f62:	4630      	mov	r0, r6
 8109f64:	f7fd ffa8 	bl	8107eb8 <_printf_float>
 8109f68:	4607      	mov	r7, r0
 8109f6a:	1c78      	adds	r0, r7, #1
 8109f6c:	d1d6      	bne.n	8109f1c <_vfiprintf_r+0x1bc>
 8109f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109f70:	07d9      	lsls	r1, r3, #31
 8109f72:	d405      	bmi.n	8109f80 <_vfiprintf_r+0x220>
 8109f74:	89ab      	ldrh	r3, [r5, #12]
 8109f76:	059a      	lsls	r2, r3, #22
 8109f78:	d402      	bmi.n	8109f80 <_vfiprintf_r+0x220>
 8109f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109f7c:	f000 faaf 	bl	810a4de <__retarget_lock_release_recursive>
 8109f80:	89ab      	ldrh	r3, [r5, #12]
 8109f82:	065b      	lsls	r3, r3, #25
 8109f84:	f53f af12 	bmi.w	8109dac <_vfiprintf_r+0x4c>
 8109f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109f8a:	e711      	b.n	8109db0 <_vfiprintf_r+0x50>
 8109f8c:	ab03      	add	r3, sp, #12
 8109f8e:	9300      	str	r3, [sp, #0]
 8109f90:	462a      	mov	r2, r5
 8109f92:	4b09      	ldr	r3, [pc, #36]	; (8109fb8 <_vfiprintf_r+0x258>)
 8109f94:	a904      	add	r1, sp, #16
 8109f96:	4630      	mov	r0, r6
 8109f98:	f7fe fa32 	bl	8108400 <_printf_i>
 8109f9c:	e7e4      	b.n	8109f68 <_vfiprintf_r+0x208>
 8109f9e:	bf00      	nop
 8109fa0:	0810ab54 	.word	0x0810ab54
 8109fa4:	0810ab74 	.word	0x0810ab74
 8109fa8:	0810ab34 	.word	0x0810ab34
 8109fac:	0810aa22 	.word	0x0810aa22
 8109fb0:	0810aa2c 	.word	0x0810aa2c
 8109fb4:	08107eb9 	.word	0x08107eb9
 8109fb8:	08109d3b 	.word	0x08109d3b
 8109fbc:	0810aa28 	.word	0x0810aa28

08109fc0 <__swbuf_r>:
 8109fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109fc2:	460e      	mov	r6, r1
 8109fc4:	4614      	mov	r4, r2
 8109fc6:	4605      	mov	r5, r0
 8109fc8:	b118      	cbz	r0, 8109fd2 <__swbuf_r+0x12>
 8109fca:	6983      	ldr	r3, [r0, #24]
 8109fcc:	b90b      	cbnz	r3, 8109fd2 <__swbuf_r+0x12>
 8109fce:	f000 f9e7 	bl	810a3a0 <__sinit>
 8109fd2:	4b21      	ldr	r3, [pc, #132]	; (810a058 <__swbuf_r+0x98>)
 8109fd4:	429c      	cmp	r4, r3
 8109fd6:	d12b      	bne.n	810a030 <__swbuf_r+0x70>
 8109fd8:	686c      	ldr	r4, [r5, #4]
 8109fda:	69a3      	ldr	r3, [r4, #24]
 8109fdc:	60a3      	str	r3, [r4, #8]
 8109fde:	89a3      	ldrh	r3, [r4, #12]
 8109fe0:	071a      	lsls	r2, r3, #28
 8109fe2:	d52f      	bpl.n	810a044 <__swbuf_r+0x84>
 8109fe4:	6923      	ldr	r3, [r4, #16]
 8109fe6:	b36b      	cbz	r3, 810a044 <__swbuf_r+0x84>
 8109fe8:	6923      	ldr	r3, [r4, #16]
 8109fea:	6820      	ldr	r0, [r4, #0]
 8109fec:	1ac0      	subs	r0, r0, r3
 8109fee:	6963      	ldr	r3, [r4, #20]
 8109ff0:	b2f6      	uxtb	r6, r6
 8109ff2:	4283      	cmp	r3, r0
 8109ff4:	4637      	mov	r7, r6
 8109ff6:	dc04      	bgt.n	810a002 <__swbuf_r+0x42>
 8109ff8:	4621      	mov	r1, r4
 8109ffa:	4628      	mov	r0, r5
 8109ffc:	f000 f93c 	bl	810a278 <_fflush_r>
 810a000:	bb30      	cbnz	r0, 810a050 <__swbuf_r+0x90>
 810a002:	68a3      	ldr	r3, [r4, #8]
 810a004:	3b01      	subs	r3, #1
 810a006:	60a3      	str	r3, [r4, #8]
 810a008:	6823      	ldr	r3, [r4, #0]
 810a00a:	1c5a      	adds	r2, r3, #1
 810a00c:	6022      	str	r2, [r4, #0]
 810a00e:	701e      	strb	r6, [r3, #0]
 810a010:	6963      	ldr	r3, [r4, #20]
 810a012:	3001      	adds	r0, #1
 810a014:	4283      	cmp	r3, r0
 810a016:	d004      	beq.n	810a022 <__swbuf_r+0x62>
 810a018:	89a3      	ldrh	r3, [r4, #12]
 810a01a:	07db      	lsls	r3, r3, #31
 810a01c:	d506      	bpl.n	810a02c <__swbuf_r+0x6c>
 810a01e:	2e0a      	cmp	r6, #10
 810a020:	d104      	bne.n	810a02c <__swbuf_r+0x6c>
 810a022:	4621      	mov	r1, r4
 810a024:	4628      	mov	r0, r5
 810a026:	f000 f927 	bl	810a278 <_fflush_r>
 810a02a:	b988      	cbnz	r0, 810a050 <__swbuf_r+0x90>
 810a02c:	4638      	mov	r0, r7
 810a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a030:	4b0a      	ldr	r3, [pc, #40]	; (810a05c <__swbuf_r+0x9c>)
 810a032:	429c      	cmp	r4, r3
 810a034:	d101      	bne.n	810a03a <__swbuf_r+0x7a>
 810a036:	68ac      	ldr	r4, [r5, #8]
 810a038:	e7cf      	b.n	8109fda <__swbuf_r+0x1a>
 810a03a:	4b09      	ldr	r3, [pc, #36]	; (810a060 <__swbuf_r+0xa0>)
 810a03c:	429c      	cmp	r4, r3
 810a03e:	bf08      	it	eq
 810a040:	68ec      	ldreq	r4, [r5, #12]
 810a042:	e7ca      	b.n	8109fda <__swbuf_r+0x1a>
 810a044:	4621      	mov	r1, r4
 810a046:	4628      	mov	r0, r5
 810a048:	f000 f81a 	bl	810a080 <__swsetup_r>
 810a04c:	2800      	cmp	r0, #0
 810a04e:	d0cb      	beq.n	8109fe8 <__swbuf_r+0x28>
 810a050:	f04f 37ff 	mov.w	r7, #4294967295
 810a054:	e7ea      	b.n	810a02c <__swbuf_r+0x6c>
 810a056:	bf00      	nop
 810a058:	0810ab54 	.word	0x0810ab54
 810a05c:	0810ab74 	.word	0x0810ab74
 810a060:	0810ab34 	.word	0x0810ab34

0810a064 <__ascii_wctomb>:
 810a064:	b149      	cbz	r1, 810a07a <__ascii_wctomb+0x16>
 810a066:	2aff      	cmp	r2, #255	; 0xff
 810a068:	bf85      	ittet	hi
 810a06a:	238a      	movhi	r3, #138	; 0x8a
 810a06c:	6003      	strhi	r3, [r0, #0]
 810a06e:	700a      	strbls	r2, [r1, #0]
 810a070:	f04f 30ff 	movhi.w	r0, #4294967295
 810a074:	bf98      	it	ls
 810a076:	2001      	movls	r0, #1
 810a078:	4770      	bx	lr
 810a07a:	4608      	mov	r0, r1
 810a07c:	4770      	bx	lr
	...

0810a080 <__swsetup_r>:
 810a080:	4b32      	ldr	r3, [pc, #200]	; (810a14c <__swsetup_r+0xcc>)
 810a082:	b570      	push	{r4, r5, r6, lr}
 810a084:	681d      	ldr	r5, [r3, #0]
 810a086:	4606      	mov	r6, r0
 810a088:	460c      	mov	r4, r1
 810a08a:	b125      	cbz	r5, 810a096 <__swsetup_r+0x16>
 810a08c:	69ab      	ldr	r3, [r5, #24]
 810a08e:	b913      	cbnz	r3, 810a096 <__swsetup_r+0x16>
 810a090:	4628      	mov	r0, r5
 810a092:	f000 f985 	bl	810a3a0 <__sinit>
 810a096:	4b2e      	ldr	r3, [pc, #184]	; (810a150 <__swsetup_r+0xd0>)
 810a098:	429c      	cmp	r4, r3
 810a09a:	d10f      	bne.n	810a0bc <__swsetup_r+0x3c>
 810a09c:	686c      	ldr	r4, [r5, #4]
 810a09e:	89a3      	ldrh	r3, [r4, #12]
 810a0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a0a4:	0719      	lsls	r1, r3, #28
 810a0a6:	d42c      	bmi.n	810a102 <__swsetup_r+0x82>
 810a0a8:	06dd      	lsls	r5, r3, #27
 810a0aa:	d411      	bmi.n	810a0d0 <__swsetup_r+0x50>
 810a0ac:	2309      	movs	r3, #9
 810a0ae:	6033      	str	r3, [r6, #0]
 810a0b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810a0b4:	81a3      	strh	r3, [r4, #12]
 810a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 810a0ba:	e03e      	b.n	810a13a <__swsetup_r+0xba>
 810a0bc:	4b25      	ldr	r3, [pc, #148]	; (810a154 <__swsetup_r+0xd4>)
 810a0be:	429c      	cmp	r4, r3
 810a0c0:	d101      	bne.n	810a0c6 <__swsetup_r+0x46>
 810a0c2:	68ac      	ldr	r4, [r5, #8]
 810a0c4:	e7eb      	b.n	810a09e <__swsetup_r+0x1e>
 810a0c6:	4b24      	ldr	r3, [pc, #144]	; (810a158 <__swsetup_r+0xd8>)
 810a0c8:	429c      	cmp	r4, r3
 810a0ca:	bf08      	it	eq
 810a0cc:	68ec      	ldreq	r4, [r5, #12]
 810a0ce:	e7e6      	b.n	810a09e <__swsetup_r+0x1e>
 810a0d0:	0758      	lsls	r0, r3, #29
 810a0d2:	d512      	bpl.n	810a0fa <__swsetup_r+0x7a>
 810a0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a0d6:	b141      	cbz	r1, 810a0ea <__swsetup_r+0x6a>
 810a0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a0dc:	4299      	cmp	r1, r3
 810a0de:	d002      	beq.n	810a0e6 <__swsetup_r+0x66>
 810a0e0:	4630      	mov	r0, r6
 810a0e2:	f7ff fcd5 	bl	8109a90 <_free_r>
 810a0e6:	2300      	movs	r3, #0
 810a0e8:	6363      	str	r3, [r4, #52]	; 0x34
 810a0ea:	89a3      	ldrh	r3, [r4, #12]
 810a0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810a0f0:	81a3      	strh	r3, [r4, #12]
 810a0f2:	2300      	movs	r3, #0
 810a0f4:	6063      	str	r3, [r4, #4]
 810a0f6:	6923      	ldr	r3, [r4, #16]
 810a0f8:	6023      	str	r3, [r4, #0]
 810a0fa:	89a3      	ldrh	r3, [r4, #12]
 810a0fc:	f043 0308 	orr.w	r3, r3, #8
 810a100:	81a3      	strh	r3, [r4, #12]
 810a102:	6923      	ldr	r3, [r4, #16]
 810a104:	b94b      	cbnz	r3, 810a11a <__swsetup_r+0x9a>
 810a106:	89a3      	ldrh	r3, [r4, #12]
 810a108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810a10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a110:	d003      	beq.n	810a11a <__swsetup_r+0x9a>
 810a112:	4621      	mov	r1, r4
 810a114:	4630      	mov	r0, r6
 810a116:	f000 fa09 	bl	810a52c <__smakebuf_r>
 810a11a:	89a0      	ldrh	r0, [r4, #12]
 810a11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a120:	f010 0301 	ands.w	r3, r0, #1
 810a124:	d00a      	beq.n	810a13c <__swsetup_r+0xbc>
 810a126:	2300      	movs	r3, #0
 810a128:	60a3      	str	r3, [r4, #8]
 810a12a:	6963      	ldr	r3, [r4, #20]
 810a12c:	425b      	negs	r3, r3
 810a12e:	61a3      	str	r3, [r4, #24]
 810a130:	6923      	ldr	r3, [r4, #16]
 810a132:	b943      	cbnz	r3, 810a146 <__swsetup_r+0xc6>
 810a134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a138:	d1ba      	bne.n	810a0b0 <__swsetup_r+0x30>
 810a13a:	bd70      	pop	{r4, r5, r6, pc}
 810a13c:	0781      	lsls	r1, r0, #30
 810a13e:	bf58      	it	pl
 810a140:	6963      	ldrpl	r3, [r4, #20]
 810a142:	60a3      	str	r3, [r4, #8]
 810a144:	e7f4      	b.n	810a130 <__swsetup_r+0xb0>
 810a146:	2000      	movs	r0, #0
 810a148:	e7f7      	b.n	810a13a <__swsetup_r+0xba>
 810a14a:	bf00      	nop
 810a14c:	10000010 	.word	0x10000010
 810a150:	0810ab54 	.word	0x0810ab54
 810a154:	0810ab74 	.word	0x0810ab74
 810a158:	0810ab34 	.word	0x0810ab34

0810a15c <abort>:
 810a15c:	b508      	push	{r3, lr}
 810a15e:	2006      	movs	r0, #6
 810a160:	f000 fa4c 	bl	810a5fc <raise>
 810a164:	2001      	movs	r0, #1
 810a166:	f7f7 fdff 	bl	8101d68 <_exit>
	...

0810a16c <__sflush_r>:
 810a16c:	898a      	ldrh	r2, [r1, #12]
 810a16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a172:	4605      	mov	r5, r0
 810a174:	0710      	lsls	r0, r2, #28
 810a176:	460c      	mov	r4, r1
 810a178:	d458      	bmi.n	810a22c <__sflush_r+0xc0>
 810a17a:	684b      	ldr	r3, [r1, #4]
 810a17c:	2b00      	cmp	r3, #0
 810a17e:	dc05      	bgt.n	810a18c <__sflush_r+0x20>
 810a180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a182:	2b00      	cmp	r3, #0
 810a184:	dc02      	bgt.n	810a18c <__sflush_r+0x20>
 810a186:	2000      	movs	r0, #0
 810a188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a18e:	2e00      	cmp	r6, #0
 810a190:	d0f9      	beq.n	810a186 <__sflush_r+0x1a>
 810a192:	2300      	movs	r3, #0
 810a194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a198:	682f      	ldr	r7, [r5, #0]
 810a19a:	602b      	str	r3, [r5, #0]
 810a19c:	d032      	beq.n	810a204 <__sflush_r+0x98>
 810a19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a1a0:	89a3      	ldrh	r3, [r4, #12]
 810a1a2:	075a      	lsls	r2, r3, #29
 810a1a4:	d505      	bpl.n	810a1b2 <__sflush_r+0x46>
 810a1a6:	6863      	ldr	r3, [r4, #4]
 810a1a8:	1ac0      	subs	r0, r0, r3
 810a1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a1ac:	b10b      	cbz	r3, 810a1b2 <__sflush_r+0x46>
 810a1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a1b0:	1ac0      	subs	r0, r0, r3
 810a1b2:	2300      	movs	r3, #0
 810a1b4:	4602      	mov	r2, r0
 810a1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a1b8:	6a21      	ldr	r1, [r4, #32]
 810a1ba:	4628      	mov	r0, r5
 810a1bc:	47b0      	blx	r6
 810a1be:	1c43      	adds	r3, r0, #1
 810a1c0:	89a3      	ldrh	r3, [r4, #12]
 810a1c2:	d106      	bne.n	810a1d2 <__sflush_r+0x66>
 810a1c4:	6829      	ldr	r1, [r5, #0]
 810a1c6:	291d      	cmp	r1, #29
 810a1c8:	d82c      	bhi.n	810a224 <__sflush_r+0xb8>
 810a1ca:	4a2a      	ldr	r2, [pc, #168]	; (810a274 <__sflush_r+0x108>)
 810a1cc:	40ca      	lsrs	r2, r1
 810a1ce:	07d6      	lsls	r6, r2, #31
 810a1d0:	d528      	bpl.n	810a224 <__sflush_r+0xb8>
 810a1d2:	2200      	movs	r2, #0
 810a1d4:	6062      	str	r2, [r4, #4]
 810a1d6:	04d9      	lsls	r1, r3, #19
 810a1d8:	6922      	ldr	r2, [r4, #16]
 810a1da:	6022      	str	r2, [r4, #0]
 810a1dc:	d504      	bpl.n	810a1e8 <__sflush_r+0x7c>
 810a1de:	1c42      	adds	r2, r0, #1
 810a1e0:	d101      	bne.n	810a1e6 <__sflush_r+0x7a>
 810a1e2:	682b      	ldr	r3, [r5, #0]
 810a1e4:	b903      	cbnz	r3, 810a1e8 <__sflush_r+0x7c>
 810a1e6:	6560      	str	r0, [r4, #84]	; 0x54
 810a1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a1ea:	602f      	str	r7, [r5, #0]
 810a1ec:	2900      	cmp	r1, #0
 810a1ee:	d0ca      	beq.n	810a186 <__sflush_r+0x1a>
 810a1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a1f4:	4299      	cmp	r1, r3
 810a1f6:	d002      	beq.n	810a1fe <__sflush_r+0x92>
 810a1f8:	4628      	mov	r0, r5
 810a1fa:	f7ff fc49 	bl	8109a90 <_free_r>
 810a1fe:	2000      	movs	r0, #0
 810a200:	6360      	str	r0, [r4, #52]	; 0x34
 810a202:	e7c1      	b.n	810a188 <__sflush_r+0x1c>
 810a204:	6a21      	ldr	r1, [r4, #32]
 810a206:	2301      	movs	r3, #1
 810a208:	4628      	mov	r0, r5
 810a20a:	47b0      	blx	r6
 810a20c:	1c41      	adds	r1, r0, #1
 810a20e:	d1c7      	bne.n	810a1a0 <__sflush_r+0x34>
 810a210:	682b      	ldr	r3, [r5, #0]
 810a212:	2b00      	cmp	r3, #0
 810a214:	d0c4      	beq.n	810a1a0 <__sflush_r+0x34>
 810a216:	2b1d      	cmp	r3, #29
 810a218:	d001      	beq.n	810a21e <__sflush_r+0xb2>
 810a21a:	2b16      	cmp	r3, #22
 810a21c:	d101      	bne.n	810a222 <__sflush_r+0xb6>
 810a21e:	602f      	str	r7, [r5, #0]
 810a220:	e7b1      	b.n	810a186 <__sflush_r+0x1a>
 810a222:	89a3      	ldrh	r3, [r4, #12]
 810a224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a228:	81a3      	strh	r3, [r4, #12]
 810a22a:	e7ad      	b.n	810a188 <__sflush_r+0x1c>
 810a22c:	690f      	ldr	r7, [r1, #16]
 810a22e:	2f00      	cmp	r7, #0
 810a230:	d0a9      	beq.n	810a186 <__sflush_r+0x1a>
 810a232:	0793      	lsls	r3, r2, #30
 810a234:	680e      	ldr	r6, [r1, #0]
 810a236:	bf08      	it	eq
 810a238:	694b      	ldreq	r3, [r1, #20]
 810a23a:	600f      	str	r7, [r1, #0]
 810a23c:	bf18      	it	ne
 810a23e:	2300      	movne	r3, #0
 810a240:	eba6 0807 	sub.w	r8, r6, r7
 810a244:	608b      	str	r3, [r1, #8]
 810a246:	f1b8 0f00 	cmp.w	r8, #0
 810a24a:	dd9c      	ble.n	810a186 <__sflush_r+0x1a>
 810a24c:	6a21      	ldr	r1, [r4, #32]
 810a24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a250:	4643      	mov	r3, r8
 810a252:	463a      	mov	r2, r7
 810a254:	4628      	mov	r0, r5
 810a256:	47b0      	blx	r6
 810a258:	2800      	cmp	r0, #0
 810a25a:	dc06      	bgt.n	810a26a <__sflush_r+0xfe>
 810a25c:	89a3      	ldrh	r3, [r4, #12]
 810a25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a262:	81a3      	strh	r3, [r4, #12]
 810a264:	f04f 30ff 	mov.w	r0, #4294967295
 810a268:	e78e      	b.n	810a188 <__sflush_r+0x1c>
 810a26a:	4407      	add	r7, r0
 810a26c:	eba8 0800 	sub.w	r8, r8, r0
 810a270:	e7e9      	b.n	810a246 <__sflush_r+0xda>
 810a272:	bf00      	nop
 810a274:	20400001 	.word	0x20400001

0810a278 <_fflush_r>:
 810a278:	b538      	push	{r3, r4, r5, lr}
 810a27a:	690b      	ldr	r3, [r1, #16]
 810a27c:	4605      	mov	r5, r0
 810a27e:	460c      	mov	r4, r1
 810a280:	b913      	cbnz	r3, 810a288 <_fflush_r+0x10>
 810a282:	2500      	movs	r5, #0
 810a284:	4628      	mov	r0, r5
 810a286:	bd38      	pop	{r3, r4, r5, pc}
 810a288:	b118      	cbz	r0, 810a292 <_fflush_r+0x1a>
 810a28a:	6983      	ldr	r3, [r0, #24]
 810a28c:	b90b      	cbnz	r3, 810a292 <_fflush_r+0x1a>
 810a28e:	f000 f887 	bl	810a3a0 <__sinit>
 810a292:	4b14      	ldr	r3, [pc, #80]	; (810a2e4 <_fflush_r+0x6c>)
 810a294:	429c      	cmp	r4, r3
 810a296:	d11b      	bne.n	810a2d0 <_fflush_r+0x58>
 810a298:	686c      	ldr	r4, [r5, #4]
 810a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a29e:	2b00      	cmp	r3, #0
 810a2a0:	d0ef      	beq.n	810a282 <_fflush_r+0xa>
 810a2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a2a4:	07d0      	lsls	r0, r2, #31
 810a2a6:	d404      	bmi.n	810a2b2 <_fflush_r+0x3a>
 810a2a8:	0599      	lsls	r1, r3, #22
 810a2aa:	d402      	bmi.n	810a2b2 <_fflush_r+0x3a>
 810a2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a2ae:	f000 f915 	bl	810a4dc <__retarget_lock_acquire_recursive>
 810a2b2:	4628      	mov	r0, r5
 810a2b4:	4621      	mov	r1, r4
 810a2b6:	f7ff ff59 	bl	810a16c <__sflush_r>
 810a2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a2bc:	07da      	lsls	r2, r3, #31
 810a2be:	4605      	mov	r5, r0
 810a2c0:	d4e0      	bmi.n	810a284 <_fflush_r+0xc>
 810a2c2:	89a3      	ldrh	r3, [r4, #12]
 810a2c4:	059b      	lsls	r3, r3, #22
 810a2c6:	d4dd      	bmi.n	810a284 <_fflush_r+0xc>
 810a2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a2ca:	f000 f908 	bl	810a4de <__retarget_lock_release_recursive>
 810a2ce:	e7d9      	b.n	810a284 <_fflush_r+0xc>
 810a2d0:	4b05      	ldr	r3, [pc, #20]	; (810a2e8 <_fflush_r+0x70>)
 810a2d2:	429c      	cmp	r4, r3
 810a2d4:	d101      	bne.n	810a2da <_fflush_r+0x62>
 810a2d6:	68ac      	ldr	r4, [r5, #8]
 810a2d8:	e7df      	b.n	810a29a <_fflush_r+0x22>
 810a2da:	4b04      	ldr	r3, [pc, #16]	; (810a2ec <_fflush_r+0x74>)
 810a2dc:	429c      	cmp	r4, r3
 810a2de:	bf08      	it	eq
 810a2e0:	68ec      	ldreq	r4, [r5, #12]
 810a2e2:	e7da      	b.n	810a29a <_fflush_r+0x22>
 810a2e4:	0810ab54 	.word	0x0810ab54
 810a2e8:	0810ab74 	.word	0x0810ab74
 810a2ec:	0810ab34 	.word	0x0810ab34

0810a2f0 <std>:
 810a2f0:	2300      	movs	r3, #0
 810a2f2:	b510      	push	{r4, lr}
 810a2f4:	4604      	mov	r4, r0
 810a2f6:	e9c0 3300 	strd	r3, r3, [r0]
 810a2fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a2fe:	6083      	str	r3, [r0, #8]
 810a300:	8181      	strh	r1, [r0, #12]
 810a302:	6643      	str	r3, [r0, #100]	; 0x64
 810a304:	81c2      	strh	r2, [r0, #14]
 810a306:	6183      	str	r3, [r0, #24]
 810a308:	4619      	mov	r1, r3
 810a30a:	2208      	movs	r2, #8
 810a30c:	305c      	adds	r0, #92	; 0x5c
 810a30e:	f7fd fd2b 	bl	8107d68 <memset>
 810a312:	4b05      	ldr	r3, [pc, #20]	; (810a328 <std+0x38>)
 810a314:	6263      	str	r3, [r4, #36]	; 0x24
 810a316:	4b05      	ldr	r3, [pc, #20]	; (810a32c <std+0x3c>)
 810a318:	62a3      	str	r3, [r4, #40]	; 0x28
 810a31a:	4b05      	ldr	r3, [pc, #20]	; (810a330 <std+0x40>)
 810a31c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a31e:	4b05      	ldr	r3, [pc, #20]	; (810a334 <std+0x44>)
 810a320:	6224      	str	r4, [r4, #32]
 810a322:	6323      	str	r3, [r4, #48]	; 0x30
 810a324:	bd10      	pop	{r4, pc}
 810a326:	bf00      	nop
 810a328:	0810a635 	.word	0x0810a635
 810a32c:	0810a657 	.word	0x0810a657
 810a330:	0810a68f 	.word	0x0810a68f
 810a334:	0810a6b3 	.word	0x0810a6b3

0810a338 <_cleanup_r>:
 810a338:	4901      	ldr	r1, [pc, #4]	; (810a340 <_cleanup_r+0x8>)
 810a33a:	f000 b8af 	b.w	810a49c <_fwalk_reent>
 810a33e:	bf00      	nop
 810a340:	0810a279 	.word	0x0810a279

0810a344 <__sfmoreglue>:
 810a344:	b570      	push	{r4, r5, r6, lr}
 810a346:	2268      	movs	r2, #104	; 0x68
 810a348:	1e4d      	subs	r5, r1, #1
 810a34a:	4355      	muls	r5, r2
 810a34c:	460e      	mov	r6, r1
 810a34e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a352:	f7ff fc09 	bl	8109b68 <_malloc_r>
 810a356:	4604      	mov	r4, r0
 810a358:	b140      	cbz	r0, 810a36c <__sfmoreglue+0x28>
 810a35a:	2100      	movs	r1, #0
 810a35c:	e9c0 1600 	strd	r1, r6, [r0]
 810a360:	300c      	adds	r0, #12
 810a362:	60a0      	str	r0, [r4, #8]
 810a364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a368:	f7fd fcfe 	bl	8107d68 <memset>
 810a36c:	4620      	mov	r0, r4
 810a36e:	bd70      	pop	{r4, r5, r6, pc}

0810a370 <__sfp_lock_acquire>:
 810a370:	4801      	ldr	r0, [pc, #4]	; (810a378 <__sfp_lock_acquire+0x8>)
 810a372:	f000 b8b3 	b.w	810a4dc <__retarget_lock_acquire_recursive>
 810a376:	bf00      	nop
 810a378:	1000030d 	.word	0x1000030d

0810a37c <__sfp_lock_release>:
 810a37c:	4801      	ldr	r0, [pc, #4]	; (810a384 <__sfp_lock_release+0x8>)
 810a37e:	f000 b8ae 	b.w	810a4de <__retarget_lock_release_recursive>
 810a382:	bf00      	nop
 810a384:	1000030d 	.word	0x1000030d

0810a388 <__sinit_lock_acquire>:
 810a388:	4801      	ldr	r0, [pc, #4]	; (810a390 <__sinit_lock_acquire+0x8>)
 810a38a:	f000 b8a7 	b.w	810a4dc <__retarget_lock_acquire_recursive>
 810a38e:	bf00      	nop
 810a390:	1000030e 	.word	0x1000030e

0810a394 <__sinit_lock_release>:
 810a394:	4801      	ldr	r0, [pc, #4]	; (810a39c <__sinit_lock_release+0x8>)
 810a396:	f000 b8a2 	b.w	810a4de <__retarget_lock_release_recursive>
 810a39a:	bf00      	nop
 810a39c:	1000030e 	.word	0x1000030e

0810a3a0 <__sinit>:
 810a3a0:	b510      	push	{r4, lr}
 810a3a2:	4604      	mov	r4, r0
 810a3a4:	f7ff fff0 	bl	810a388 <__sinit_lock_acquire>
 810a3a8:	69a3      	ldr	r3, [r4, #24]
 810a3aa:	b11b      	cbz	r3, 810a3b4 <__sinit+0x14>
 810a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a3b0:	f7ff bff0 	b.w	810a394 <__sinit_lock_release>
 810a3b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a3b8:	6523      	str	r3, [r4, #80]	; 0x50
 810a3ba:	4b13      	ldr	r3, [pc, #76]	; (810a408 <__sinit+0x68>)
 810a3bc:	4a13      	ldr	r2, [pc, #76]	; (810a40c <__sinit+0x6c>)
 810a3be:	681b      	ldr	r3, [r3, #0]
 810a3c0:	62a2      	str	r2, [r4, #40]	; 0x28
 810a3c2:	42a3      	cmp	r3, r4
 810a3c4:	bf04      	itt	eq
 810a3c6:	2301      	moveq	r3, #1
 810a3c8:	61a3      	streq	r3, [r4, #24]
 810a3ca:	4620      	mov	r0, r4
 810a3cc:	f000 f820 	bl	810a410 <__sfp>
 810a3d0:	6060      	str	r0, [r4, #4]
 810a3d2:	4620      	mov	r0, r4
 810a3d4:	f000 f81c 	bl	810a410 <__sfp>
 810a3d8:	60a0      	str	r0, [r4, #8]
 810a3da:	4620      	mov	r0, r4
 810a3dc:	f000 f818 	bl	810a410 <__sfp>
 810a3e0:	2200      	movs	r2, #0
 810a3e2:	60e0      	str	r0, [r4, #12]
 810a3e4:	2104      	movs	r1, #4
 810a3e6:	6860      	ldr	r0, [r4, #4]
 810a3e8:	f7ff ff82 	bl	810a2f0 <std>
 810a3ec:	68a0      	ldr	r0, [r4, #8]
 810a3ee:	2201      	movs	r2, #1
 810a3f0:	2109      	movs	r1, #9
 810a3f2:	f7ff ff7d 	bl	810a2f0 <std>
 810a3f6:	68e0      	ldr	r0, [r4, #12]
 810a3f8:	2202      	movs	r2, #2
 810a3fa:	2112      	movs	r1, #18
 810a3fc:	f7ff ff78 	bl	810a2f0 <std>
 810a400:	2301      	movs	r3, #1
 810a402:	61a3      	str	r3, [r4, #24]
 810a404:	e7d2      	b.n	810a3ac <__sinit+0xc>
 810a406:	bf00      	nop
 810a408:	0810a7b8 	.word	0x0810a7b8
 810a40c:	0810a339 	.word	0x0810a339

0810a410 <__sfp>:
 810a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a412:	4607      	mov	r7, r0
 810a414:	f7ff ffac 	bl	810a370 <__sfp_lock_acquire>
 810a418:	4b1e      	ldr	r3, [pc, #120]	; (810a494 <__sfp+0x84>)
 810a41a:	681e      	ldr	r6, [r3, #0]
 810a41c:	69b3      	ldr	r3, [r6, #24]
 810a41e:	b913      	cbnz	r3, 810a426 <__sfp+0x16>
 810a420:	4630      	mov	r0, r6
 810a422:	f7ff ffbd 	bl	810a3a0 <__sinit>
 810a426:	3648      	adds	r6, #72	; 0x48
 810a428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a42c:	3b01      	subs	r3, #1
 810a42e:	d503      	bpl.n	810a438 <__sfp+0x28>
 810a430:	6833      	ldr	r3, [r6, #0]
 810a432:	b30b      	cbz	r3, 810a478 <__sfp+0x68>
 810a434:	6836      	ldr	r6, [r6, #0]
 810a436:	e7f7      	b.n	810a428 <__sfp+0x18>
 810a438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a43c:	b9d5      	cbnz	r5, 810a474 <__sfp+0x64>
 810a43e:	4b16      	ldr	r3, [pc, #88]	; (810a498 <__sfp+0x88>)
 810a440:	60e3      	str	r3, [r4, #12]
 810a442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a446:	6665      	str	r5, [r4, #100]	; 0x64
 810a448:	f000 f847 	bl	810a4da <__retarget_lock_init_recursive>
 810a44c:	f7ff ff96 	bl	810a37c <__sfp_lock_release>
 810a450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a458:	6025      	str	r5, [r4, #0]
 810a45a:	61a5      	str	r5, [r4, #24]
 810a45c:	2208      	movs	r2, #8
 810a45e:	4629      	mov	r1, r5
 810a460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a464:	f7fd fc80 	bl	8107d68 <memset>
 810a468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a46c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a470:	4620      	mov	r0, r4
 810a472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a474:	3468      	adds	r4, #104	; 0x68
 810a476:	e7d9      	b.n	810a42c <__sfp+0x1c>
 810a478:	2104      	movs	r1, #4
 810a47a:	4638      	mov	r0, r7
 810a47c:	f7ff ff62 	bl	810a344 <__sfmoreglue>
 810a480:	4604      	mov	r4, r0
 810a482:	6030      	str	r0, [r6, #0]
 810a484:	2800      	cmp	r0, #0
 810a486:	d1d5      	bne.n	810a434 <__sfp+0x24>
 810a488:	f7ff ff78 	bl	810a37c <__sfp_lock_release>
 810a48c:	230c      	movs	r3, #12
 810a48e:	603b      	str	r3, [r7, #0]
 810a490:	e7ee      	b.n	810a470 <__sfp+0x60>
 810a492:	bf00      	nop
 810a494:	0810a7b8 	.word	0x0810a7b8
 810a498:	ffff0001 	.word	0xffff0001

0810a49c <_fwalk_reent>:
 810a49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a4a0:	4606      	mov	r6, r0
 810a4a2:	4688      	mov	r8, r1
 810a4a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a4a8:	2700      	movs	r7, #0
 810a4aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a4ae:	f1b9 0901 	subs.w	r9, r9, #1
 810a4b2:	d505      	bpl.n	810a4c0 <_fwalk_reent+0x24>
 810a4b4:	6824      	ldr	r4, [r4, #0]
 810a4b6:	2c00      	cmp	r4, #0
 810a4b8:	d1f7      	bne.n	810a4aa <_fwalk_reent+0xe>
 810a4ba:	4638      	mov	r0, r7
 810a4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a4c0:	89ab      	ldrh	r3, [r5, #12]
 810a4c2:	2b01      	cmp	r3, #1
 810a4c4:	d907      	bls.n	810a4d6 <_fwalk_reent+0x3a>
 810a4c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a4ca:	3301      	adds	r3, #1
 810a4cc:	d003      	beq.n	810a4d6 <_fwalk_reent+0x3a>
 810a4ce:	4629      	mov	r1, r5
 810a4d0:	4630      	mov	r0, r6
 810a4d2:	47c0      	blx	r8
 810a4d4:	4307      	orrs	r7, r0
 810a4d6:	3568      	adds	r5, #104	; 0x68
 810a4d8:	e7e9      	b.n	810a4ae <_fwalk_reent+0x12>

0810a4da <__retarget_lock_init_recursive>:
 810a4da:	4770      	bx	lr

0810a4dc <__retarget_lock_acquire_recursive>:
 810a4dc:	4770      	bx	lr

0810a4de <__retarget_lock_release_recursive>:
 810a4de:	4770      	bx	lr

0810a4e0 <__swhatbuf_r>:
 810a4e0:	b570      	push	{r4, r5, r6, lr}
 810a4e2:	460e      	mov	r6, r1
 810a4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a4e8:	2900      	cmp	r1, #0
 810a4ea:	b096      	sub	sp, #88	; 0x58
 810a4ec:	4614      	mov	r4, r2
 810a4ee:	461d      	mov	r5, r3
 810a4f0:	da08      	bge.n	810a504 <__swhatbuf_r+0x24>
 810a4f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810a4f6:	2200      	movs	r2, #0
 810a4f8:	602a      	str	r2, [r5, #0]
 810a4fa:	061a      	lsls	r2, r3, #24
 810a4fc:	d410      	bmi.n	810a520 <__swhatbuf_r+0x40>
 810a4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a502:	e00e      	b.n	810a522 <__swhatbuf_r+0x42>
 810a504:	466a      	mov	r2, sp
 810a506:	f000 f8fb 	bl	810a700 <_fstat_r>
 810a50a:	2800      	cmp	r0, #0
 810a50c:	dbf1      	blt.n	810a4f2 <__swhatbuf_r+0x12>
 810a50e:	9a01      	ldr	r2, [sp, #4]
 810a510:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a514:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a518:	425a      	negs	r2, r3
 810a51a:	415a      	adcs	r2, r3
 810a51c:	602a      	str	r2, [r5, #0]
 810a51e:	e7ee      	b.n	810a4fe <__swhatbuf_r+0x1e>
 810a520:	2340      	movs	r3, #64	; 0x40
 810a522:	2000      	movs	r0, #0
 810a524:	6023      	str	r3, [r4, #0]
 810a526:	b016      	add	sp, #88	; 0x58
 810a528:	bd70      	pop	{r4, r5, r6, pc}
	...

0810a52c <__smakebuf_r>:
 810a52c:	898b      	ldrh	r3, [r1, #12]
 810a52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a530:	079d      	lsls	r5, r3, #30
 810a532:	4606      	mov	r6, r0
 810a534:	460c      	mov	r4, r1
 810a536:	d507      	bpl.n	810a548 <__smakebuf_r+0x1c>
 810a538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a53c:	6023      	str	r3, [r4, #0]
 810a53e:	6123      	str	r3, [r4, #16]
 810a540:	2301      	movs	r3, #1
 810a542:	6163      	str	r3, [r4, #20]
 810a544:	b002      	add	sp, #8
 810a546:	bd70      	pop	{r4, r5, r6, pc}
 810a548:	ab01      	add	r3, sp, #4
 810a54a:	466a      	mov	r2, sp
 810a54c:	f7ff ffc8 	bl	810a4e0 <__swhatbuf_r>
 810a550:	9900      	ldr	r1, [sp, #0]
 810a552:	4605      	mov	r5, r0
 810a554:	4630      	mov	r0, r6
 810a556:	f7ff fb07 	bl	8109b68 <_malloc_r>
 810a55a:	b948      	cbnz	r0, 810a570 <__smakebuf_r+0x44>
 810a55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a560:	059a      	lsls	r2, r3, #22
 810a562:	d4ef      	bmi.n	810a544 <__smakebuf_r+0x18>
 810a564:	f023 0303 	bic.w	r3, r3, #3
 810a568:	f043 0302 	orr.w	r3, r3, #2
 810a56c:	81a3      	strh	r3, [r4, #12]
 810a56e:	e7e3      	b.n	810a538 <__smakebuf_r+0xc>
 810a570:	4b0d      	ldr	r3, [pc, #52]	; (810a5a8 <__smakebuf_r+0x7c>)
 810a572:	62b3      	str	r3, [r6, #40]	; 0x28
 810a574:	89a3      	ldrh	r3, [r4, #12]
 810a576:	6020      	str	r0, [r4, #0]
 810a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a57c:	81a3      	strh	r3, [r4, #12]
 810a57e:	9b00      	ldr	r3, [sp, #0]
 810a580:	6163      	str	r3, [r4, #20]
 810a582:	9b01      	ldr	r3, [sp, #4]
 810a584:	6120      	str	r0, [r4, #16]
 810a586:	b15b      	cbz	r3, 810a5a0 <__smakebuf_r+0x74>
 810a588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a58c:	4630      	mov	r0, r6
 810a58e:	f000 f8c9 	bl	810a724 <_isatty_r>
 810a592:	b128      	cbz	r0, 810a5a0 <__smakebuf_r+0x74>
 810a594:	89a3      	ldrh	r3, [r4, #12]
 810a596:	f023 0303 	bic.w	r3, r3, #3
 810a59a:	f043 0301 	orr.w	r3, r3, #1
 810a59e:	81a3      	strh	r3, [r4, #12]
 810a5a0:	89a0      	ldrh	r0, [r4, #12]
 810a5a2:	4305      	orrs	r5, r0
 810a5a4:	81a5      	strh	r5, [r4, #12]
 810a5a6:	e7cd      	b.n	810a544 <__smakebuf_r+0x18>
 810a5a8:	0810a339 	.word	0x0810a339

0810a5ac <_raise_r>:
 810a5ac:	291f      	cmp	r1, #31
 810a5ae:	b538      	push	{r3, r4, r5, lr}
 810a5b0:	4604      	mov	r4, r0
 810a5b2:	460d      	mov	r5, r1
 810a5b4:	d904      	bls.n	810a5c0 <_raise_r+0x14>
 810a5b6:	2316      	movs	r3, #22
 810a5b8:	6003      	str	r3, [r0, #0]
 810a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 810a5be:	bd38      	pop	{r3, r4, r5, pc}
 810a5c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810a5c2:	b112      	cbz	r2, 810a5ca <_raise_r+0x1e>
 810a5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810a5c8:	b94b      	cbnz	r3, 810a5de <_raise_r+0x32>
 810a5ca:	4620      	mov	r0, r4
 810a5cc:	f000 f830 	bl	810a630 <_getpid_r>
 810a5d0:	462a      	mov	r2, r5
 810a5d2:	4601      	mov	r1, r0
 810a5d4:	4620      	mov	r0, r4
 810a5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810a5da:	f000 b817 	b.w	810a60c <_kill_r>
 810a5de:	2b01      	cmp	r3, #1
 810a5e0:	d00a      	beq.n	810a5f8 <_raise_r+0x4c>
 810a5e2:	1c59      	adds	r1, r3, #1
 810a5e4:	d103      	bne.n	810a5ee <_raise_r+0x42>
 810a5e6:	2316      	movs	r3, #22
 810a5e8:	6003      	str	r3, [r0, #0]
 810a5ea:	2001      	movs	r0, #1
 810a5ec:	e7e7      	b.n	810a5be <_raise_r+0x12>
 810a5ee:	2400      	movs	r4, #0
 810a5f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810a5f4:	4628      	mov	r0, r5
 810a5f6:	4798      	blx	r3
 810a5f8:	2000      	movs	r0, #0
 810a5fa:	e7e0      	b.n	810a5be <_raise_r+0x12>

0810a5fc <raise>:
 810a5fc:	4b02      	ldr	r3, [pc, #8]	; (810a608 <raise+0xc>)
 810a5fe:	4601      	mov	r1, r0
 810a600:	6818      	ldr	r0, [r3, #0]
 810a602:	f7ff bfd3 	b.w	810a5ac <_raise_r>
 810a606:	bf00      	nop
 810a608:	10000010 	.word	0x10000010

0810a60c <_kill_r>:
 810a60c:	b538      	push	{r3, r4, r5, lr}
 810a60e:	4d07      	ldr	r5, [pc, #28]	; (810a62c <_kill_r+0x20>)
 810a610:	2300      	movs	r3, #0
 810a612:	4604      	mov	r4, r0
 810a614:	4608      	mov	r0, r1
 810a616:	4611      	mov	r1, r2
 810a618:	602b      	str	r3, [r5, #0]
 810a61a:	f7f7 fb95 	bl	8101d48 <_kill>
 810a61e:	1c43      	adds	r3, r0, #1
 810a620:	d102      	bne.n	810a628 <_kill_r+0x1c>
 810a622:	682b      	ldr	r3, [r5, #0]
 810a624:	b103      	cbz	r3, 810a628 <_kill_r+0x1c>
 810a626:	6023      	str	r3, [r4, #0]
 810a628:	bd38      	pop	{r3, r4, r5, pc}
 810a62a:	bf00      	nop
 810a62c:	10000308 	.word	0x10000308

0810a630 <_getpid_r>:
 810a630:	f7f7 bb82 	b.w	8101d38 <_getpid>

0810a634 <__sread>:
 810a634:	b510      	push	{r4, lr}
 810a636:	460c      	mov	r4, r1
 810a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a63c:	f000 f894 	bl	810a768 <_read_r>
 810a640:	2800      	cmp	r0, #0
 810a642:	bfab      	itete	ge
 810a644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810a646:	89a3      	ldrhlt	r3, [r4, #12]
 810a648:	181b      	addge	r3, r3, r0
 810a64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810a64e:	bfac      	ite	ge
 810a650:	6563      	strge	r3, [r4, #84]	; 0x54
 810a652:	81a3      	strhlt	r3, [r4, #12]
 810a654:	bd10      	pop	{r4, pc}

0810a656 <__swrite>:
 810a656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a65a:	461f      	mov	r7, r3
 810a65c:	898b      	ldrh	r3, [r1, #12]
 810a65e:	05db      	lsls	r3, r3, #23
 810a660:	4605      	mov	r5, r0
 810a662:	460c      	mov	r4, r1
 810a664:	4616      	mov	r6, r2
 810a666:	d505      	bpl.n	810a674 <__swrite+0x1e>
 810a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a66c:	2302      	movs	r3, #2
 810a66e:	2200      	movs	r2, #0
 810a670:	f000 f868 	bl	810a744 <_lseek_r>
 810a674:	89a3      	ldrh	r3, [r4, #12]
 810a676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810a67e:	81a3      	strh	r3, [r4, #12]
 810a680:	4632      	mov	r2, r6
 810a682:	463b      	mov	r3, r7
 810a684:	4628      	mov	r0, r5
 810a686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a68a:	f000 b817 	b.w	810a6bc <_write_r>

0810a68e <__sseek>:
 810a68e:	b510      	push	{r4, lr}
 810a690:	460c      	mov	r4, r1
 810a692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a696:	f000 f855 	bl	810a744 <_lseek_r>
 810a69a:	1c43      	adds	r3, r0, #1
 810a69c:	89a3      	ldrh	r3, [r4, #12]
 810a69e:	bf15      	itete	ne
 810a6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 810a6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810a6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810a6aa:	81a3      	strheq	r3, [r4, #12]
 810a6ac:	bf18      	it	ne
 810a6ae:	81a3      	strhne	r3, [r4, #12]
 810a6b0:	bd10      	pop	{r4, pc}

0810a6b2 <__sclose>:
 810a6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a6b6:	f000 b813 	b.w	810a6e0 <_close_r>
	...

0810a6bc <_write_r>:
 810a6bc:	b538      	push	{r3, r4, r5, lr}
 810a6be:	4d07      	ldr	r5, [pc, #28]	; (810a6dc <_write_r+0x20>)
 810a6c0:	4604      	mov	r4, r0
 810a6c2:	4608      	mov	r0, r1
 810a6c4:	4611      	mov	r1, r2
 810a6c6:	2200      	movs	r2, #0
 810a6c8:	602a      	str	r2, [r5, #0]
 810a6ca:	461a      	mov	r2, r3
 810a6cc:	f7f7 fb73 	bl	8101db6 <_write>
 810a6d0:	1c43      	adds	r3, r0, #1
 810a6d2:	d102      	bne.n	810a6da <_write_r+0x1e>
 810a6d4:	682b      	ldr	r3, [r5, #0]
 810a6d6:	b103      	cbz	r3, 810a6da <_write_r+0x1e>
 810a6d8:	6023      	str	r3, [r4, #0]
 810a6da:	bd38      	pop	{r3, r4, r5, pc}
 810a6dc:	10000308 	.word	0x10000308

0810a6e0 <_close_r>:
 810a6e0:	b538      	push	{r3, r4, r5, lr}
 810a6e2:	4d06      	ldr	r5, [pc, #24]	; (810a6fc <_close_r+0x1c>)
 810a6e4:	2300      	movs	r3, #0
 810a6e6:	4604      	mov	r4, r0
 810a6e8:	4608      	mov	r0, r1
 810a6ea:	602b      	str	r3, [r5, #0]
 810a6ec:	f7f7 fb7f 	bl	8101dee <_close>
 810a6f0:	1c43      	adds	r3, r0, #1
 810a6f2:	d102      	bne.n	810a6fa <_close_r+0x1a>
 810a6f4:	682b      	ldr	r3, [r5, #0]
 810a6f6:	b103      	cbz	r3, 810a6fa <_close_r+0x1a>
 810a6f8:	6023      	str	r3, [r4, #0]
 810a6fa:	bd38      	pop	{r3, r4, r5, pc}
 810a6fc:	10000308 	.word	0x10000308

0810a700 <_fstat_r>:
 810a700:	b538      	push	{r3, r4, r5, lr}
 810a702:	4d07      	ldr	r5, [pc, #28]	; (810a720 <_fstat_r+0x20>)
 810a704:	2300      	movs	r3, #0
 810a706:	4604      	mov	r4, r0
 810a708:	4608      	mov	r0, r1
 810a70a:	4611      	mov	r1, r2
 810a70c:	602b      	str	r3, [r5, #0]
 810a70e:	f7f7 fb7a 	bl	8101e06 <_fstat>
 810a712:	1c43      	adds	r3, r0, #1
 810a714:	d102      	bne.n	810a71c <_fstat_r+0x1c>
 810a716:	682b      	ldr	r3, [r5, #0]
 810a718:	b103      	cbz	r3, 810a71c <_fstat_r+0x1c>
 810a71a:	6023      	str	r3, [r4, #0]
 810a71c:	bd38      	pop	{r3, r4, r5, pc}
 810a71e:	bf00      	nop
 810a720:	10000308 	.word	0x10000308

0810a724 <_isatty_r>:
 810a724:	b538      	push	{r3, r4, r5, lr}
 810a726:	4d06      	ldr	r5, [pc, #24]	; (810a740 <_isatty_r+0x1c>)
 810a728:	2300      	movs	r3, #0
 810a72a:	4604      	mov	r4, r0
 810a72c:	4608      	mov	r0, r1
 810a72e:	602b      	str	r3, [r5, #0]
 810a730:	f7f7 fb79 	bl	8101e26 <_isatty>
 810a734:	1c43      	adds	r3, r0, #1
 810a736:	d102      	bne.n	810a73e <_isatty_r+0x1a>
 810a738:	682b      	ldr	r3, [r5, #0]
 810a73a:	b103      	cbz	r3, 810a73e <_isatty_r+0x1a>
 810a73c:	6023      	str	r3, [r4, #0]
 810a73e:	bd38      	pop	{r3, r4, r5, pc}
 810a740:	10000308 	.word	0x10000308

0810a744 <_lseek_r>:
 810a744:	b538      	push	{r3, r4, r5, lr}
 810a746:	4d07      	ldr	r5, [pc, #28]	; (810a764 <_lseek_r+0x20>)
 810a748:	4604      	mov	r4, r0
 810a74a:	4608      	mov	r0, r1
 810a74c:	4611      	mov	r1, r2
 810a74e:	2200      	movs	r2, #0
 810a750:	602a      	str	r2, [r5, #0]
 810a752:	461a      	mov	r2, r3
 810a754:	f7f7 fb72 	bl	8101e3c <_lseek>
 810a758:	1c43      	adds	r3, r0, #1
 810a75a:	d102      	bne.n	810a762 <_lseek_r+0x1e>
 810a75c:	682b      	ldr	r3, [r5, #0]
 810a75e:	b103      	cbz	r3, 810a762 <_lseek_r+0x1e>
 810a760:	6023      	str	r3, [r4, #0]
 810a762:	bd38      	pop	{r3, r4, r5, pc}
 810a764:	10000308 	.word	0x10000308

0810a768 <_read_r>:
 810a768:	b538      	push	{r3, r4, r5, lr}
 810a76a:	4d07      	ldr	r5, [pc, #28]	; (810a788 <_read_r+0x20>)
 810a76c:	4604      	mov	r4, r0
 810a76e:	4608      	mov	r0, r1
 810a770:	4611      	mov	r1, r2
 810a772:	2200      	movs	r2, #0
 810a774:	602a      	str	r2, [r5, #0]
 810a776:	461a      	mov	r2, r3
 810a778:	f7f7 fb00 	bl	8101d7c <_read>
 810a77c:	1c43      	adds	r3, r0, #1
 810a77e:	d102      	bne.n	810a786 <_read_r+0x1e>
 810a780:	682b      	ldr	r3, [r5, #0]
 810a782:	b103      	cbz	r3, 810a786 <_read_r+0x1e>
 810a784:	6023      	str	r3, [r4, #0]
 810a786:	bd38      	pop	{r3, r4, r5, pc}
 810a788:	10000308 	.word	0x10000308

0810a78c <_init>:
 810a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a78e:	bf00      	nop
 810a790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a792:	bc08      	pop	{r3}
 810a794:	469e      	mov	lr, r3
 810a796:	4770      	bx	lr

0810a798 <_fini>:
 810a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a79a:	bf00      	nop
 810a79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a79e:	bc08      	pop	{r3}
 810a7a0:	469e      	mov	lr, r3
 810a7a2:	4770      	bx	lr
