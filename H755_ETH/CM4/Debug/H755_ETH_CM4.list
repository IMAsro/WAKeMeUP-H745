
H755_ETH_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a468  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0810a708  0810a708  0001a708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810aafc  0810aafc  0001aafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810ab00  0810ab00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  10000000  0810ab04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c8  100001e0  0810ace4  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  100003a8  0810ace4  000203a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002588e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000039d1  00000000  00000000  00045a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015a8  00000000  00000000  00049470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001460  00000000  00000000  0004aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d38e  00000000  00000000  0004be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019b75  00000000  00000000  00089206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0019af29  00000000  00000000  000a2d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0023dca4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d44  00000000  00000000  0023dcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a6f0 	.word	0x0810a6f0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810a6f0 	.word	0x0810a6f0

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100d5c:	4b0b      	ldr	r3, [pc, #44]	; (8100d8c <SystemInit+0x34>)
 8100d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100d62:	4a0a      	ldr	r2, [pc, #40]	; (8100d8c <SystemInit+0x34>)
 8100d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100d6c:	4b07      	ldr	r3, [pc, #28]	; (8100d8c <SystemInit+0x34>)
 8100d6e:	691b      	ldr	r3, [r3, #16]
 8100d70:	4a06      	ldr	r2, [pc, #24]	; (8100d8c <SystemInit+0x34>)
 8100d72:	f043 0310 	orr.w	r3, r3, #16
 8100d76:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100d78:	4b04      	ldr	r3, [pc, #16]	; (8100d8c <SystemInit+0x34>)
 8100d7a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100d7e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100d80:	bf00      	nop
 8100d82:	46bd      	mov	sp, r7
 8100d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d88:	4770      	bx	lr
 8100d8a:	bf00      	nop
 8100d8c:	e000ed00 	.word	0xe000ed00

08100d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100d90:	b590      	push	{r4, r7, lr}
 8100d92:	b083      	sub	sp, #12
 8100d94:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100d96:	4b7e      	ldr	r3, [pc, #504]	; (8100f90 <main+0x200>)
 8100d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d9c:	4a7c      	ldr	r2, [pc, #496]	; (8100f90 <main+0x200>)
 8100d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100da6:	4b7a      	ldr	r3, [pc, #488]	; (8100f90 <main+0x200>)
 8100da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100db0:	607b      	str	r3, [r7, #4]
 8100db2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100db4:	2001      	movs	r0, #1
 8100db6:	f002 fe6d 	bl	8103a94 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100dba:	f003 fd51 	bl	8104860 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100dbe:	2201      	movs	r2, #1
 8100dc0:	2102      	movs	r1, #2
 8100dc2:	2000      	movs	r0, #0
 8100dc4:	f003 fcd2 	bl	810476c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100dc8:	4b72      	ldr	r3, [pc, #456]	; (8100f94 <main+0x204>)
 8100dca:	681b      	ldr	r3, [r3, #0]
 8100dcc:	091b      	lsrs	r3, r3, #4
 8100dce:	f003 030f 	and.w	r3, r3, #15
 8100dd2:	2b07      	cmp	r3, #7
 8100dd4:	d108      	bne.n	8100de8 <main+0x58>
 8100dd6:	4b70      	ldr	r3, [pc, #448]	; (8100f98 <main+0x208>)
 8100dd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100ddc:	4a6e      	ldr	r2, [pc, #440]	; (8100f98 <main+0x208>)
 8100dde:	f043 0301 	orr.w	r3, r3, #1
 8100de2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100de6:	e007      	b.n	8100df8 <main+0x68>
 8100de8:	4b6b      	ldr	r3, [pc, #428]	; (8100f98 <main+0x208>)
 8100dea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100dee:	4a6a      	ldr	r2, [pc, #424]	; (8100f98 <main+0x208>)
 8100df0:	f043 0301 	orr.w	r3, r3, #1
 8100df4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100df8:	f001 f88e 	bl	8101f18 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100dfc:	f000 fa3e 	bl	810127c <MX_GPIO_Init>
  MX_I2C4_Init();
 8100e00:	f000 f956 	bl	81010b0 <MX_I2C4_Init>
  MX_ADC1_Init();
 8100e04:	f000 f8da 	bl	8100fbc <MX_ADC1_Init>
  MX_TIM1_Init();
 8100e08:	f000 f992 	bl	8101130 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /*Start ADC - ovr data overwrite, continous mode, IN15*/
  HAL_ADC_Start(&hadc1);
 8100e0c:	4863      	ldr	r0, [pc, #396]	; (8100f9c <main+0x20c>)
 8100e0e:	f001 fcc9 	bl	81027a4 <HAL_ADC_Start>
  /*Start TIM1 channels 1-3, PWM mode, ARR value 255*/
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8100e12:	2100      	movs	r1, #0
 8100e14:	4862      	ldr	r0, [pc, #392]	; (8100fa0 <main+0x210>)
 8100e16:	f006 f8bb 	bl	8106f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8100e1a:	2104      	movs	r1, #4
 8100e1c:	4860      	ldr	r0, [pc, #384]	; (8100fa0 <main+0x210>)
 8100e1e:	f006 f8b7 	bl	8106f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8100e22:	2108      	movs	r1, #8
 8100e24:	485e      	ldr	r0, [pc, #376]	; (8100fa0 <main+0x210>)
 8100e26:	f006 f8b3 	bl	8106f90 <HAL_TIM_PWM_Start>
  /*Fill data share struct between M4 and M7 with zeros*/
  memset(m4_to_m7_ptr,0,sizeof(m7_to_m4_ptr));
 8100e2a:	4b5e      	ldr	r3, [pc, #376]	; (8100fa4 <main+0x214>)
 8100e2c:	2204      	movs	r2, #4
 8100e2e:	2100      	movs	r1, #0
 8100e30:	4618      	mov	r0, r3
 8100e32:	f006 ff91 	bl	8107d58 <memset>
  memset(m7_to_m4_ptr,0,sizeof(m4_to_m7_ptr));
 8100e36:	4b5c      	ldr	r3, [pc, #368]	; (8100fa8 <main+0x218>)
 8100e38:	2204      	movs	r2, #4
 8100e3a:	2100      	movs	r1, #0
 8100e3c:	4618      	mov	r0, r3
 8100e3e:	f006 ff8b 	bl	8107d58 <memset>

  /*Start ADC1 in continous conversion mode*/
  ADC1->CFGR |= ADC_CFGR_CONT;
 8100e42:	4b5a      	ldr	r3, [pc, #360]	; (8100fac <main+0x21c>)
 8100e44:	68db      	ldr	r3, [r3, #12]
 8100e46:	4a59      	ldr	r2, [pc, #356]	; (8100fac <main+0x21c>)
 8100e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8100e4c:	60d3      	str	r3, [r2, #12]
  ADC1->CR |= ADC_CR_ADSTART;
 8100e4e:	4b57      	ldr	r3, [pc, #348]	; (8100fac <main+0x21c>)
 8100e50:	689b      	ldr	r3, [r3, #8]
 8100e52:	4a56      	ldr	r2, [pc, #344]	; (8100fac <main+0x21c>)
 8100e54:	f043 0304 	orr.w	r3, r3, #4
 8100e58:	6093      	str	r3, [r2, #8]
  /*Init LSM9DS1 sensor(gyro,mag,acceleration) connected to I2C4 bus*/
  LSM9DS1_Init(&hi2c4);
 8100e5a:	4855      	ldr	r0, [pc, #340]	; (8100fb0 <main+0x220>)
 8100e5c:	f000 fb2e 	bl	81014bc <LSM9DS1_Init>
  /*Init HDC1080 temperature and humidity sensor connected to I2C4 bus*/
  hdc1080_init(&hi2c4, 0, 0);
 8100e60:	2200      	movs	r2, #0
 8100e62:	2100      	movs	r1, #0
 8100e64:	4852      	ldr	r0, [pc, #328]	; (8100fb0 <main+0x220>)
 8100e66:	f000 fa61 	bl	810132c <hdc1080_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Read data from LSM9DS1 sensor and fill them to share struct between M4 and M7*/
	  LSM9DS1_ReadGyr(&hi2c4,&m4_to_m7_ptr->gyro_x,&m4_to_m7_ptr->gyro_y,&m4_to_m7_ptr->gyro_z);
 8100e6a:	4b4e      	ldr	r3, [pc, #312]	; (8100fa4 <main+0x214>)
 8100e6c:	f503 71f8 	add.w	r1, r3, #496	; 0x1f0
 8100e70:	4b4c      	ldr	r3, [pc, #304]	; (8100fa4 <main+0x214>)
 8100e72:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8100e76:	4b4b      	ldr	r3, [pc, #300]	; (8100fa4 <main+0x214>)
 8100e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8100e7c:	484c      	ldr	r0, [pc, #304]	; (8100fb0 <main+0x220>)
 8100e7e:	f000 fbff 	bl	8101680 <LSM9DS1_ReadGyr>
	  LSM9DS1_ReadMag(&hi2c4, &m4_to_m7_ptr->mag_x, &m4_to_m7_ptr->mag_y, &m4_to_m7_ptr->mag_z);
 8100e82:	4b48      	ldr	r3, [pc, #288]	; (8100fa4 <main+0x214>)
 8100e84:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8100e88:	4b46      	ldr	r3, [pc, #280]	; (8100fa4 <main+0x214>)
 8100e8a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8100e8e:	4b45      	ldr	r3, [pc, #276]	; (8100fa4 <main+0x214>)
 8100e90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8100e94:	4846      	ldr	r0, [pc, #280]	; (8100fb0 <main+0x220>)
 8100e96:	f000 fd1f 	bl	81018d8 <LSM9DS1_ReadMag>
	  LSM9DS1_ReadAcc(&hi2c4, &m4_to_m7_ptr->accel_x,&m4_to_m7_ptr->accel_y, &m4_to_m7_ptr->accel_z);
 8100e9a:	4b42      	ldr	r3, [pc, #264]	; (8100fa4 <main+0x214>)
 8100e9c:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 8100ea0:	4b40      	ldr	r3, [pc, #256]	; (8100fa4 <main+0x214>)
 8100ea2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8100ea6:	4b3f      	ldr	r3, [pc, #252]	; (8100fa4 <main+0x214>)
 8100ea8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8100eac:	4840      	ldr	r0, [pc, #256]	; (8100fb0 <main+0x220>)
 8100eae:	f000 fc7f 	bl	81017b0 <LSM9DS1_ReadAcc>

	  /*Read data from ADC1 (potentiometer value)*/
	  m4_to_m7_ptr->potlevel = (((float)ADC1->DR/65535.0)*3.3);
 8100eb2:	4b3e      	ldr	r3, [pc, #248]	; (8100fac <main+0x21c>)
 8100eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8100eb6:	ee07 3a90 	vmov	s15, r3
 8100eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ebe:	ee17 0a90 	vmov	r0, s15
 8100ec2:	f7ff fbc9 	bl	8100658 <__aeabi_f2d>
 8100ec6:	a32e      	add	r3, pc, #184	; (adr r3, 8100f80 <main+0x1f0>)
 8100ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100ecc:	f7ff fd46 	bl	810095c <__aeabi_ddiv>
 8100ed0:	4602      	mov	r2, r0
 8100ed2:	460b      	mov	r3, r1
 8100ed4:	4610      	mov	r0, r2
 8100ed6:	4619      	mov	r1, r3
 8100ed8:	a32b      	add	r3, pc, #172	; (adr r3, 8100f88 <main+0x1f8>)
 8100eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100ede:	f7ff fc13 	bl	8100708 <__aeabi_dmul>
 8100ee2:	4602      	mov	r2, r0
 8100ee4:	460b      	mov	r3, r1
 8100ee6:	4c2f      	ldr	r4, [pc, #188]	; (8100fa4 <main+0x214>)
 8100ee8:	4610      	mov	r0, r2
 8100eea:	4619      	mov	r1, r3
 8100eec:	f7ff fee4 	bl	8100cb8 <__aeabi_d2f>
 8100ef0:	4603      	mov	r3, r0
 8100ef2:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
	  /*Read teamperature and preassure data and fill them to shared struct*/
	  hdc1080_start_measurement(&hi2c4, &m4_to_m7_ptr->temperature[59], &m4_to_m7_ptr->pressure[59]);
 8100ef6:	4b2b      	ldr	r3, [pc, #172]	; (8100fa4 <main+0x214>)
 8100ef8:	33ec      	adds	r3, #236	; 0xec
 8100efa:	4a2a      	ldr	r2, [pc, #168]	; (8100fa4 <main+0x214>)
 8100efc:	f502 72ee 	add.w	r2, r2, #476	; 0x1dc
 8100f00:	4619      	mov	r1, r3
 8100f02:	482b      	ldr	r0, [pc, #172]	; (8100fb0 <main+0x220>)
 8100f04:	f000 fa50 	bl	81013a8 <hdc1080_start_measurement>

	  /*Set values of CCR registers (dutycycle) according to value from shared struct*/
	  TIM1->CCR1 = m7_to_m4_ptr->rgb_r;
 8100f08:	4b27      	ldr	r3, [pc, #156]	; (8100fa8 <main+0x218>)
 8100f0a:	4a2a      	ldr	r2, [pc, #168]	; (8100fb4 <main+0x224>)
 8100f0c:	681b      	ldr	r3, [r3, #0]
 8100f0e:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = m7_to_m4_ptr->rgb_g;
 8100f10:	4b25      	ldr	r3, [pc, #148]	; (8100fa8 <main+0x218>)
 8100f12:	4a28      	ldr	r2, [pc, #160]	; (8100fb4 <main+0x224>)
 8100f14:	685b      	ldr	r3, [r3, #4]
 8100f16:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3 = m7_to_m4_ptr->rgb_b;
 8100f18:	4b23      	ldr	r3, [pc, #140]	; (8100fa8 <main+0x218>)
 8100f1a:	4a26      	ldr	r2, [pc, #152]	; (8100fb4 <main+0x224>)
 8100f1c:	689b      	ldr	r3, [r3, #8]
 8100f1e:	63d3      	str	r3, [r2, #60]	; 0x3c

	  /*Toggle logic state of white led*/
	  if(m7_to_m4_ptr->w_led_status != 0)
 8100f20:	4b21      	ldr	r3, [pc, #132]	; (8100fa8 <main+0x218>)
 8100f22:	7b1b      	ldrb	r3, [r3, #12]
 8100f24:	b2db      	uxtb	r3, r3
 8100f26:	2b00      	cmp	r3, #0
 8100f28:	d006      	beq.n	8100f38 <main+0x1a8>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8100f2a:	2201      	movs	r2, #1
 8100f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100f30:	4821      	ldr	r0, [pc, #132]	; (8100fb8 <main+0x228>)
 8100f32:	f002 fd95 	bl	8103a60 <HAL_GPIO_WritePin>
 8100f36:	e005      	b.n	8100f44 <main+0x1b4>
	  else
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8100f38:	2200      	movs	r2, #0
 8100f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100f3e:	481e      	ldr	r0, [pc, #120]	; (8100fb8 <main+0x228>)
 8100f40:	f002 fd8e 	bl	8103a60 <HAL_GPIO_WritePin>
	  /*Confirmation of CCR values and led state value filled in shared struct (to check on websever wheater right value was set)*/
	  m4_to_m7_ptr->led_r = TIM1->CCR1;
 8100f44:	4b1b      	ldr	r3, [pc, #108]	; (8100fb4 <main+0x224>)
 8100f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8100f48:	4b16      	ldr	r3, [pc, #88]	; (8100fa4 <main+0x214>)
 8100f4a:	b2d2      	uxtb	r2, r2
 8100f4c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	  m4_to_m7_ptr->led_g = TIM1->CCR2;
 8100f50:	4b18      	ldr	r3, [pc, #96]	; (8100fb4 <main+0x224>)
 8100f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8100f54:	4b13      	ldr	r3, [pc, #76]	; (8100fa4 <main+0x214>)
 8100f56:	b2d2      	uxtb	r2, r2
 8100f58:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	  m4_to_m7_ptr->led_b = TIM1->CCR3;
 8100f5c:	4b15      	ldr	r3, [pc, #84]	; (8100fb4 <main+0x224>)
 8100f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8100f60:	4b10      	ldr	r3, [pc, #64]	; (8100fa4 <main+0x214>)
 8100f62:	b2d2      	uxtb	r2, r2
 8100f64:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	  m4_to_m7_ptr->led_w = m7_to_m4_ptr->w_led_status;
 8100f68:	4a0f      	ldr	r2, [pc, #60]	; (8100fa8 <main+0x218>)
 8100f6a:	4b0e      	ldr	r3, [pc, #56]	; (8100fa4 <main+0x214>)
 8100f6c:	7b12      	ldrb	r2, [r2, #12]
 8100f6e:	b2d2      	uxtb	r2, r2
 8100f70:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b

	  /*Delay 100ms*/
	  HAL_Delay(100);
 8100f74:	2064      	movs	r0, #100	; 0x64
 8100f76:	f001 f883 	bl	8102080 <HAL_Delay>
  {
 8100f7a:	e776      	b.n	8100e6a <main+0xda>
 8100f7c:	f3af 8000 	nop.w
 8100f80:	00000000 	.word	0x00000000
 8100f84:	40efffe0 	.word	0x40efffe0
 8100f88:	66666666 	.word	0x66666666
 8100f8c:	400a6666 	.word	0x400a6666
 8100f90:	58024400 	.word	0x58024400
 8100f94:	e000ed00 	.word	0xe000ed00
 8100f98:	58026400 	.word	0x58026400
 8100f9c:	100002e4 	.word	0x100002e4
 8100fa0:	10000348 	.word	0x10000348
 8100fa4:	30040a00 	.word	0x30040a00
 8100fa8:	30040d00 	.word	0x30040d00
 8100fac:	40022000 	.word	0x40022000
 8100fb0:	10000208 	.word	0x10000208
 8100fb4:	40010000 	.word	0x40010000
 8100fb8:	58020c00 	.word	0x58020c00

08100fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100fbc:	b580      	push	{r7, lr}
 8100fbe:	b08a      	sub	sp, #40	; 0x28
 8100fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fc2:	f107 031c 	add.w	r3, r7, #28
 8100fc6:	2200      	movs	r2, #0
 8100fc8:	601a      	str	r2, [r3, #0]
 8100fca:	605a      	str	r2, [r3, #4]
 8100fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100fce:	463b      	mov	r3, r7
 8100fd0:	2200      	movs	r2, #0
 8100fd2:	601a      	str	r2, [r3, #0]
 8100fd4:	605a      	str	r2, [r3, #4]
 8100fd6:	609a      	str	r2, [r3, #8]
 8100fd8:	60da      	str	r2, [r3, #12]
 8100fda:	611a      	str	r2, [r3, #16]
 8100fdc:	615a      	str	r2, [r3, #20]
 8100fde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8100fe0:	4b30      	ldr	r3, [pc, #192]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100fe2:	4a31      	ldr	r2, [pc, #196]	; (81010a8 <MX_ADC1_Init+0xec>)
 8100fe4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100fe6:	4b2f      	ldr	r3, [pc, #188]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100fe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8100fec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100fee:	4b2d      	ldr	r3, [pc, #180]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ff0:	2200      	movs	r2, #0
 8100ff2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100ff4:	4b2b      	ldr	r3, [pc, #172]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ff6:	2200      	movs	r2, #0
 8100ff8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100ffa:	4b2a      	ldr	r3, [pc, #168]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8100ffc:	2204      	movs	r2, #4
 8100ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101000:	4b28      	ldr	r3, [pc, #160]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101002:	2200      	movs	r2, #0
 8101004:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101006:	4b27      	ldr	r3, [pc, #156]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101008:	2200      	movs	r2, #0
 810100a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810100c:	4b25      	ldr	r3, [pc, #148]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810100e:	2201      	movs	r2, #1
 8101010:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101012:	4b24      	ldr	r3, [pc, #144]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101014:	2200      	movs	r2, #0
 8101016:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101018:	4b22      	ldr	r3, [pc, #136]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810101a:	2200      	movs	r2, #0
 810101c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810101e:	4b21      	ldr	r3, [pc, #132]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101020:	2200      	movs	r2, #0
 8101022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101024:	4b1f      	ldr	r3, [pc, #124]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101026:	2200      	movs	r2, #0
 8101028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810102a:	4b1e      	ldr	r3, [pc, #120]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810102c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8101030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101032:	4b1c      	ldr	r3, [pc, #112]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101034:	2200      	movs	r2, #0
 8101036:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101038:	4b1a      	ldr	r3, [pc, #104]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810103a:	2200      	movs	r2, #0
 810103c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101040:	4818      	ldr	r0, [pc, #96]	; (81010a4 <MX_ADC1_Init+0xe8>)
 8101042:	f001 fa0f 	bl	8102464 <HAL_ADC_Init>
 8101046:	4603      	mov	r3, r0
 8101048:	2b00      	cmp	r3, #0
 810104a:	d001      	beq.n	8101050 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 810104c:	f000 f94e 	bl	81012ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101050:	2300      	movs	r3, #0
 8101052:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101054:	f107 031c 	add.w	r3, r7, #28
 8101058:	4619      	mov	r1, r3
 810105a:	4812      	ldr	r0, [pc, #72]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810105c:	f002 f976 	bl	810334c <HAL_ADCEx_MultiModeConfigChannel>
 8101060:	4603      	mov	r3, r0
 8101062:	2b00      	cmp	r3, #0
 8101064:	d001      	beq.n	810106a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8101066:	f000 f941 	bl	81012ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 810106a:	4b10      	ldr	r3, [pc, #64]	; (81010ac <MX_ADC1_Init+0xf0>)
 810106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810106e:	2306      	movs	r3, #6
 8101070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101072:	2300      	movs	r3, #0
 8101074:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101076:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810107a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810107c:	2304      	movs	r3, #4
 810107e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101080:	2300      	movs	r3, #0
 8101082:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101084:	2300      	movs	r3, #0
 8101086:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101088:	463b      	mov	r3, r7
 810108a:	4619      	mov	r1, r3
 810108c:	4805      	ldr	r0, [pc, #20]	; (81010a4 <MX_ADC1_Init+0xe8>)
 810108e:	f001 fc53 	bl	8102938 <HAL_ADC_ConfigChannel>
 8101092:	4603      	mov	r3, r0
 8101094:	2b00      	cmp	r3, #0
 8101096:	d001      	beq.n	810109c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8101098:	f000 f928 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810109c:	bf00      	nop
 810109e:	3728      	adds	r7, #40	; 0x28
 81010a0:	46bd      	mov	sp, r7
 81010a2:	bd80      	pop	{r7, pc}
 81010a4:	100002e4 	.word	0x100002e4
 81010a8:	40022000 	.word	0x40022000
 81010ac:	3ef08000 	.word	0x3ef08000

081010b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81010b0:	b580      	push	{r7, lr}
 81010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81010b4:	4b1b      	ldr	r3, [pc, #108]	; (8101124 <MX_I2C4_Init+0x74>)
 81010b6:	4a1c      	ldr	r2, [pc, #112]	; (8101128 <MX_I2C4_Init+0x78>)
 81010b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81010ba:	4b1a      	ldr	r3, [pc, #104]	; (8101124 <MX_I2C4_Init+0x74>)
 81010bc:	4a1b      	ldr	r2, [pc, #108]	; (810112c <MX_I2C4_Init+0x7c>)
 81010be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81010c0:	4b18      	ldr	r3, [pc, #96]	; (8101124 <MX_I2C4_Init+0x74>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81010c6:	4b17      	ldr	r3, [pc, #92]	; (8101124 <MX_I2C4_Init+0x74>)
 81010c8:	2201      	movs	r2, #1
 81010ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81010cc:	4b15      	ldr	r3, [pc, #84]	; (8101124 <MX_I2C4_Init+0x74>)
 81010ce:	2200      	movs	r2, #0
 81010d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81010d2:	4b14      	ldr	r3, [pc, #80]	; (8101124 <MX_I2C4_Init+0x74>)
 81010d4:	2200      	movs	r2, #0
 81010d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81010d8:	4b12      	ldr	r3, [pc, #72]	; (8101124 <MX_I2C4_Init+0x74>)
 81010da:	2200      	movs	r2, #0
 81010dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81010de:	4b11      	ldr	r3, [pc, #68]	; (8101124 <MX_I2C4_Init+0x74>)
 81010e0:	2200      	movs	r2, #0
 81010e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81010e4:	4b0f      	ldr	r3, [pc, #60]	; (8101124 <MX_I2C4_Init+0x74>)
 81010e6:	2200      	movs	r2, #0
 81010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81010ea:	480e      	ldr	r0, [pc, #56]	; (8101124 <MX_I2C4_Init+0x74>)
 81010ec:	f002 fce4 	bl	8103ab8 <HAL_I2C_Init>
 81010f0:	4603      	mov	r3, r0
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	d001      	beq.n	81010fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 81010f6:	f000 f8f9 	bl	81012ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81010fa:	2100      	movs	r1, #0
 81010fc:	4809      	ldr	r0, [pc, #36]	; (8101124 <MX_I2C4_Init+0x74>)
 81010fe:	f003 fa9d 	bl	810463c <HAL_I2CEx_ConfigAnalogFilter>
 8101102:	4603      	mov	r3, r0
 8101104:	2b00      	cmp	r3, #0
 8101106:	d001      	beq.n	810110c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8101108:	f000 f8f0 	bl	81012ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 810110c:	2100      	movs	r1, #0
 810110e:	4805      	ldr	r0, [pc, #20]	; (8101124 <MX_I2C4_Init+0x74>)
 8101110:	f003 fadf 	bl	81046d2 <HAL_I2CEx_ConfigDigitalFilter>
 8101114:	4603      	mov	r3, r0
 8101116:	2b00      	cmp	r3, #0
 8101118:	d001      	beq.n	810111e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 810111a:	f000 f8e7 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 810111e:	bf00      	nop
 8101120:	bd80      	pop	{r7, pc}
 8101122:	bf00      	nop
 8101124:	10000208 	.word	0x10000208
 8101128:	58001c00 	.word	0x58001c00
 810112c:	10c0ecff 	.word	0x10c0ecff

08101130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b096      	sub	sp, #88	; 0x58
 8101134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101136:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810113a:	2200      	movs	r2, #0
 810113c:	601a      	str	r2, [r3, #0]
 810113e:	605a      	str	r2, [r3, #4]
 8101140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101146:	2200      	movs	r2, #0
 8101148:	601a      	str	r2, [r3, #0]
 810114a:	605a      	str	r2, [r3, #4]
 810114c:	609a      	str	r2, [r3, #8]
 810114e:	60da      	str	r2, [r3, #12]
 8101150:	611a      	str	r2, [r3, #16]
 8101152:	615a      	str	r2, [r3, #20]
 8101154:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101156:	1d3b      	adds	r3, r7, #4
 8101158:	222c      	movs	r2, #44	; 0x2c
 810115a:	2100      	movs	r1, #0
 810115c:	4618      	mov	r0, r3
 810115e:	f006 fdfb 	bl	8107d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101162:	4b44      	ldr	r3, [pc, #272]	; (8101274 <MX_TIM1_Init+0x144>)
 8101164:	4a44      	ldr	r2, [pc, #272]	; (8101278 <MX_TIM1_Init+0x148>)
 8101166:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8101168:	4b42      	ldr	r3, [pc, #264]	; (8101274 <MX_TIM1_Init+0x144>)
 810116a:	2200      	movs	r2, #0
 810116c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810116e:	4b41      	ldr	r3, [pc, #260]	; (8101274 <MX_TIM1_Init+0x144>)
 8101170:	2200      	movs	r2, #0
 8101172:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8101174:	4b3f      	ldr	r3, [pc, #252]	; (8101274 <MX_TIM1_Init+0x144>)
 8101176:	22ff      	movs	r2, #255	; 0xff
 8101178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810117a:	4b3e      	ldr	r3, [pc, #248]	; (8101274 <MX_TIM1_Init+0x144>)
 810117c:	2200      	movs	r2, #0
 810117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101180:	4b3c      	ldr	r3, [pc, #240]	; (8101274 <MX_TIM1_Init+0x144>)
 8101182:	2200      	movs	r2, #0
 8101184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101186:	4b3b      	ldr	r3, [pc, #236]	; (8101274 <MX_TIM1_Init+0x144>)
 8101188:	2200      	movs	r2, #0
 810118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810118c:	4839      	ldr	r0, [pc, #228]	; (8101274 <MX_TIM1_Init+0x144>)
 810118e:	f005 fea7 	bl	8106ee0 <HAL_TIM_PWM_Init>
 8101192:	4603      	mov	r3, r0
 8101194:	2b00      	cmp	r3, #0
 8101196:	d001      	beq.n	810119c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8101198:	f000 f8a8 	bl	81012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810119c:	2300      	movs	r3, #0
 810119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81011a0:	2300      	movs	r3, #0
 81011a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81011a4:	2300      	movs	r3, #0
 81011a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81011ac:	4619      	mov	r1, r3
 81011ae:	4831      	ldr	r0, [pc, #196]	; (8101274 <MX_TIM1_Init+0x144>)
 81011b0:	f006 fc94 	bl	8107adc <HAL_TIMEx_MasterConfigSynchronization>
 81011b4:	4603      	mov	r3, r0
 81011b6:	2b00      	cmp	r3, #0
 81011b8:	d001      	beq.n	81011be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 81011ba:	f000 f897 	bl	81012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81011be:	2360      	movs	r3, #96	; 0x60
 81011c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 81011c2:	2300      	movs	r3, #0
 81011c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81011c6:	2300      	movs	r3, #0
 81011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81011ca:	2300      	movs	r3, #0
 81011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81011ce:	2300      	movs	r3, #0
 81011d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81011d2:	2300      	movs	r3, #0
 81011d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81011d6:	2300      	movs	r3, #0
 81011d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81011da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81011de:	2200      	movs	r2, #0
 81011e0:	4619      	mov	r1, r3
 81011e2:	4824      	ldr	r0, [pc, #144]	; (8101274 <MX_TIM1_Init+0x144>)
 81011e4:	f005 ffdc 	bl	81071a0 <HAL_TIM_PWM_ConfigChannel>
 81011e8:	4603      	mov	r3, r0
 81011ea:	2b00      	cmp	r3, #0
 81011ec:	d001      	beq.n	81011f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 81011ee:	f000 f87d 	bl	81012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81011f6:	2204      	movs	r2, #4
 81011f8:	4619      	mov	r1, r3
 81011fa:	481e      	ldr	r0, [pc, #120]	; (8101274 <MX_TIM1_Init+0x144>)
 81011fc:	f005 ffd0 	bl	81071a0 <HAL_TIM_PWM_ConfigChannel>
 8101200:	4603      	mov	r3, r0
 8101202:	2b00      	cmp	r3, #0
 8101204:	d001      	beq.n	810120a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8101206:	f000 f871 	bl	81012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810120a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810120e:	2208      	movs	r2, #8
 8101210:	4619      	mov	r1, r3
 8101212:	4818      	ldr	r0, [pc, #96]	; (8101274 <MX_TIM1_Init+0x144>)
 8101214:	f005 ffc4 	bl	81071a0 <HAL_TIM_PWM_ConfigChannel>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 810121e:	f000 f865 	bl	81012ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101222:	2300      	movs	r3, #0
 8101224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101226:	2300      	movs	r3, #0
 8101228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810122a:	2300      	movs	r3, #0
 810122c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810122e:	2300      	movs	r3, #0
 8101230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101232:	2300      	movs	r3, #0
 8101234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810123a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810123c:	2300      	movs	r3, #0
 810123e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101240:	2300      	movs	r3, #0
 8101242:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101248:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810124a:	2300      	movs	r3, #0
 810124c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810124e:	2300      	movs	r3, #0
 8101250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101252:	1d3b      	adds	r3, r7, #4
 8101254:	4619      	mov	r1, r3
 8101256:	4807      	ldr	r0, [pc, #28]	; (8101274 <MX_TIM1_Init+0x144>)
 8101258:	f006 fcc8 	bl	8107bec <HAL_TIMEx_ConfigBreakDeadTime>
 810125c:	4603      	mov	r3, r0
 810125e:	2b00      	cmp	r3, #0
 8101260:	d001      	beq.n	8101266 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8101262:	f000 f843 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101266:	4803      	ldr	r0, [pc, #12]	; (8101274 <MX_TIM1_Init+0x144>)
 8101268:	f000 fcde 	bl	8101c28 <HAL_TIM_MspPostInit>

}
 810126c:	bf00      	nop
 810126e:	3758      	adds	r7, #88	; 0x58
 8101270:	46bd      	mov	sp, r7
 8101272:	bd80      	pop	{r7, pc}
 8101274:	10000348 	.word	0x10000348
 8101278:	40010000 	.word	0x40010000

0810127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810127c:	b480      	push	{r7}
 810127e:	b085      	sub	sp, #20
 8101280:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101282:	4b19      	ldr	r3, [pc, #100]	; (81012e8 <MX_GPIO_Init+0x6c>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	4a17      	ldr	r2, [pc, #92]	; (81012e8 <MX_GPIO_Init+0x6c>)
 810128a:	f043 0301 	orr.w	r3, r3, #1
 810128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101292:	4b15      	ldr	r3, [pc, #84]	; (81012e8 <MX_GPIO_Init+0x6c>)
 8101294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101298:	f003 0301 	and.w	r3, r3, #1
 810129c:	60fb      	str	r3, [r7, #12]
 810129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81012a0:	4b11      	ldr	r3, [pc, #68]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	4a10      	ldr	r2, [pc, #64]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012a8:	f043 0310 	orr.w	r3, r3, #16
 81012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b0:	4b0d      	ldr	r3, [pc, #52]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b6:	f003 0310 	and.w	r3, r3, #16
 81012ba:	60bb      	str	r3, [r7, #8]
 81012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012be:	4b0a      	ldr	r3, [pc, #40]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c4:	4a08      	ldr	r2, [pc, #32]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012c6:	f043 0302 	orr.w	r3, r3, #2
 81012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ce:	4b06      	ldr	r3, [pc, #24]	; (81012e8 <MX_GPIO_Init+0x6c>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d4:	f003 0302 	and.w	r3, r3, #2
 81012d8:	607b      	str	r3, [r7, #4]
 81012da:	687b      	ldr	r3, [r7, #4]

}
 81012dc:	bf00      	nop
 81012de:	3714      	adds	r7, #20
 81012e0:	46bd      	mov	sp, r7
 81012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e6:	4770      	bx	lr
 81012e8:	58024400 	.word	0x58024400

081012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81012ec:	b480      	push	{r7}
 81012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81012f0:	b672      	cpsid	i
}
 81012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81012f4:	e7fe      	b.n	81012f4 <Error_Handler+0x8>

081012f6 <getSignedVal>:
#include "sensor.h"
#include "math.h"

#include "hdc1080.h"

int16_t getSignedVal(uint8_t val_l, uint8_t val_h){
 81012f6:	b480      	push	{r7}
 81012f8:	b085      	sub	sp, #20
 81012fa:	af00      	add	r7, sp, #0
 81012fc:	4603      	mov	r3, r0
 81012fe:	460a      	mov	r2, r1
 8101300:	71fb      	strb	r3, [r7, #7]
 8101302:	4613      	mov	r3, r2
 8101304:	71bb      	strb	r3, [r7, #6]
	uint16_t value = (((val_h << 8) & 0xff00) | (val_l & 0xff) );
 8101306:	79bb      	ldrb	r3, [r7, #6]
 8101308:	021b      	lsls	r3, r3, #8
 810130a:	b21a      	sxth	r2, r3
 810130c:	79fb      	ldrb	r3, [r7, #7]
 810130e:	b21b      	sxth	r3, r3
 8101310:	4313      	orrs	r3, r2
 8101312:	b21b      	sxth	r3, r3
 8101314:	b29b      	uxth	r3, r3
 8101316:	81fb      	strh	r3, [r7, #14]
	return *(int16_t*) &value;
 8101318:	f107 030e 	add.w	r3, r7, #14
 810131c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8101320:	4618      	mov	r0, r3
 8101322:	3714      	adds	r7, #20
 8101324:	46bd      	mov	sp, r7
 8101326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810132a:	4770      	bx	lr

0810132c <hdc1080_init>:

void hdc1080_init(I2C_HandleTypeDef* hi2c_x,Temp_Reso Temperature_Resolution_x_bit,Humi_Reso Humidity_Resolution_x_bit)
{
 810132c:	b580      	push	{r7, lr}
 810132e:	b088      	sub	sp, #32
 8101330:	af04      	add	r7, sp, #16
 8101332:	6078      	str	r0, [r7, #4]
 8101334:	460b      	mov	r3, r1
 8101336:	70fb      	strb	r3, [r7, #3]
 8101338:	4613      	mov	r3, r2
 810133a:	70bb      	strb	r3, [r7, #2]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 810133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101340:	81fb      	strh	r3, [r7, #14]
	uint8_t data_send[2];

	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit)
 8101342:	78fb      	ldrb	r3, [r7, #3]
 8101344:	2b01      	cmp	r3, #1
 8101346:	d103      	bne.n	8101350 <hdc1080_init+0x24>
	{
		config_reg_value |= (1<<10); //11 bit
 8101348:	89fb      	ldrh	r3, [r7, #14]
 810134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810134e:	81fb      	strh	r3, [r7, #14]
	}

	switch(Humidity_Resolution_x_bit)
 8101350:	78bb      	ldrb	r3, [r7, #2]
 8101352:	2b01      	cmp	r3, #1
 8101354:	d002      	beq.n	810135c <hdc1080_init+0x30>
 8101356:	2b02      	cmp	r3, #2
 8101358:	d005      	beq.n	8101366 <hdc1080_init+0x3a>
 810135a:	e009      	b.n	8101370 <hdc1080_init+0x44>
	{
	case Humidity_Resolution_11_bit:
		config_reg_value|= (1<<8);
 810135c:	89fb      	ldrh	r3, [r7, #14]
 810135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101362:	81fb      	strh	r3, [r7, #14]
		break;
 8101364:	e004      	b.n	8101370 <hdc1080_init+0x44>
	case Humidity_Resolution_8_bit:
		config_reg_value|= (1<<9);
 8101366:	89fb      	ldrh	r3, [r7, #14]
 8101368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810136c:	81fb      	strh	r3, [r7, #14]
		break;
 810136e:	bf00      	nop
	}

	data_send[0]= (config_reg_value>>8);
 8101370:	89fb      	ldrh	r3, [r7, #14]
 8101372:	0a1b      	lsrs	r3, r3, #8
 8101374:	b29b      	uxth	r3, r3
 8101376:	b2db      	uxtb	r3, r3
 8101378:	733b      	strb	r3, [r7, #12]
	data_send[1]= (config_reg_value&0x00ff);
 810137a:	89fb      	ldrh	r3, [r7, #14]
 810137c:	b2db      	uxtb	r3, r3
 810137e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c_x,HDC_1080_ADD<<1,Configuration_register_add,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 8101380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101384:	9302      	str	r3, [sp, #8]
 8101386:	2302      	movs	r3, #2
 8101388:	9301      	str	r3, [sp, #4]
 810138a:	f107 030c 	add.w	r3, r7, #12
 810138e:	9300      	str	r3, [sp, #0]
 8101390:	2301      	movs	r3, #1
 8101392:	2202      	movs	r2, #2
 8101394:	2180      	movs	r1, #128	; 0x80
 8101396:	6878      	ldr	r0, [r7, #4]
 8101398:	f002 fe08 	bl	8103fac <HAL_I2C_Mem_Write>
}
 810139c:	bf00      	nop
 810139e:	3710      	adds	r7, #16
 81013a0:	46bd      	mov	sp, r7
 81013a2:	bd80      	pop	{r7, pc}
 81013a4:	0000      	movs	r0, r0
	...

081013a8 <hdc1080_start_measurement>:


uint8_t hdc1080_start_measurement(I2C_HandleTypeDef* hi2c_x,float* temperature, float* humidity)
{
 81013a8:	b580      	push	{r7, lr}
 81013aa:	b08a      	sub	sp, #40	; 0x28
 81013ac:	af02      	add	r7, sp, #8
 81013ae:	60f8      	str	r0, [r7, #12]
 81013b0:	60b9      	str	r1, [r7, #8]
 81013b2:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = Temperature_register_add;
 81013b4:	2300      	movs	r3, #0
 81013b6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c_x,HDC_1080_ADD<<1,&send_data,1,1000);
 81013b8:	f107 0217 	add.w	r2, r7, #23
 81013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013c0:	9300      	str	r3, [sp, #0]
 81013c2:	2301      	movs	r3, #1
 81013c4:	2180      	movs	r1, #128	; 0x80
 81013c6:	68f8      	ldr	r0, [r7, #12]
 81013c8:	f002 fc06 	bl	8103bd8 <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 81013cc:	200f      	movs	r0, #15
 81013ce:	f000 fe57 	bl	8102080 <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(hi2c_x,HDC_1080_ADD<<1,receive_data,4,1000);
 81013d2:	f107 0218 	add.w	r2, r7, #24
 81013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81013da:	9300      	str	r3, [sp, #0]
 81013dc:	2304      	movs	r3, #4
 81013de:	2180      	movs	r1, #128	; 0x80
 81013e0:	68f8      	ldr	r0, [r7, #12]
 81013e2:	f002 fced 	bl	8103dc0 <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0]<<8)|receive_data[1]);
 81013e6:	7e3b      	ldrb	r3, [r7, #24]
 81013e8:	021b      	lsls	r3, r3, #8
 81013ea:	b21a      	sxth	r2, r3
 81013ec:	7e7b      	ldrb	r3, [r7, #25]
 81013ee:	b21b      	sxth	r3, r3
 81013f0:	4313      	orrs	r3, r2
 81013f2:	b21b      	sxth	r3, r3
 81013f4:	83fb      	strh	r3, [r7, #30]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 81013f6:	7ebb      	ldrb	r3, [r7, #26]
 81013f8:	021b      	lsls	r3, r3, #8
 81013fa:	b21a      	sxth	r2, r3
 81013fc:	7efb      	ldrb	r3, [r7, #27]
 81013fe:	b21b      	sxth	r3, r3
 8101400:	4313      	orrs	r3, r2
 8101402:	b21b      	sxth	r3, r3
 8101404:	83bb      	strh	r3, [r7, #28]

	*temperature=(((temp_x/65535.0)*165.0)-40.0)-6;
 8101406:	8bfb      	ldrh	r3, [r7, #30]
 8101408:	4618      	mov	r0, r3
 810140a:	f7ff f913 	bl	8100634 <__aeabi_i2d>
 810140e:	a324      	add	r3, pc, #144	; (adr r3, 81014a0 <hdc1080_start_measurement+0xf8>)
 8101410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101414:	f7ff faa2 	bl	810095c <__aeabi_ddiv>
 8101418:	4602      	mov	r2, r0
 810141a:	460b      	mov	r3, r1
 810141c:	4610      	mov	r0, r2
 810141e:	4619      	mov	r1, r3
 8101420:	a324      	add	r3, pc, #144	; (adr r3, 81014b4 <hdc1080_start_measurement+0x10c>)
 8101422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101426:	f7ff f96f 	bl	8100708 <__aeabi_dmul>
 810142a:	4602      	mov	r2, r0
 810142c:	460b      	mov	r3, r1
 810142e:	4610      	mov	r0, r2
 8101430:	4619      	mov	r1, r3
 8101432:	f04f 0200 	mov.w	r2, #0
 8101436:	4b1c      	ldr	r3, [pc, #112]	; (81014a8 <hdc1080_start_measurement+0x100>)
 8101438:	f7fe ffae 	bl	8100398 <__aeabi_dsub>
 810143c:	4602      	mov	r2, r0
 810143e:	460b      	mov	r3, r1
 8101440:	4610      	mov	r0, r2
 8101442:	4619      	mov	r1, r3
 8101444:	f04f 0200 	mov.w	r2, #0
 8101448:	4b18      	ldr	r3, [pc, #96]	; (81014ac <hdc1080_start_measurement+0x104>)
 810144a:	f7fe ffa5 	bl	8100398 <__aeabi_dsub>
 810144e:	4602      	mov	r2, r0
 8101450:	460b      	mov	r3, r1
 8101452:	4610      	mov	r0, r2
 8101454:	4619      	mov	r1, r3
 8101456:	f7ff fc2f 	bl	8100cb8 <__aeabi_d2f>
 810145a:	4602      	mov	r2, r0
 810145c:	68bb      	ldr	r3, [r7, #8]
 810145e:	601a      	str	r2, [r3, #0]
	*humidity=(float)((humi_x/65535.0)*100.0);
 8101460:	8bbb      	ldrh	r3, [r7, #28]
 8101462:	4618      	mov	r0, r3
 8101464:	f7ff f8e6 	bl	8100634 <__aeabi_i2d>
 8101468:	a30d      	add	r3, pc, #52	; (adr r3, 81014a0 <hdc1080_start_measurement+0xf8>)
 810146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810146e:	f7ff fa75 	bl	810095c <__aeabi_ddiv>
 8101472:	4602      	mov	r2, r0
 8101474:	460b      	mov	r3, r1
 8101476:	4610      	mov	r0, r2
 8101478:	4619      	mov	r1, r3
 810147a:	f04f 0200 	mov.w	r2, #0
 810147e:	4b0c      	ldr	r3, [pc, #48]	; (81014b0 <hdc1080_start_measurement+0x108>)
 8101480:	f7ff f942 	bl	8100708 <__aeabi_dmul>
 8101484:	4602      	mov	r2, r0
 8101486:	460b      	mov	r3, r1
 8101488:	4610      	mov	r0, r2
 810148a:	4619      	mov	r1, r3
 810148c:	f7ff fc14 	bl	8100cb8 <__aeabi_d2f>
 8101490:	4602      	mov	r2, r0
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	601a      	str	r2, [r3, #0]

	return 0;
 8101496:	2300      	movs	r3, #0

}
 8101498:	4618      	mov	r0, r3
 810149a:	3720      	adds	r7, #32
 810149c:	46bd      	mov	sp, r7
 810149e:	bd80      	pop	{r7, pc}
 81014a0:	00000000 	.word	0x00000000
 81014a4:	40efffe0 	.word	0x40efffe0
 81014a8:	40440000 	.word	0x40440000
 81014ac:	40180000 	.word	0x40180000
 81014b0:	40590000 	.word	0x40590000
 81014b4:	00000000 	.word	0x00000000
 81014b8:	4064a000 	.word	0x4064a000

081014bc <LSM9DS1_Init>:

void LSM9DS1_Init( I2C_HandleTypeDef * phi2c ) {
 81014bc:	b580      	push	{r7, lr}
 81014be:	b086      	sub	sp, #24
 81014c0:	af02      	add	r7, sp, #8
 81014c2:	6078      	str	r0, [r7, #4]

		uint8_t		i2c_buf[2];

	  //reset
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG8;
 81014c4:	2322      	movs	r3, #34	; 0x22
 81014c6:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x05;
 81014c8:	2305      	movs	r3, #5
 81014ca:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81014cc:	23d6      	movs	r3, #214	; 0xd6
 81014ce:	b299      	uxth	r1, r3
 81014d0:	f107 020c 	add.w	r2, r7, #12
 81014d4:	f04f 33ff 	mov.w	r3, #4294967295
 81014d8:	9300      	str	r3, [sp, #0]
 81014da:	2302      	movs	r3, #2
 81014dc:	6878      	ldr	r0, [r7, #4]
 81014de:	f002 fb7b 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 81014e2:	4603      	mov	r3, r0
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d001      	beq.n	81014ec <LSM9DS1_Init+0x30>
	  	Error_Handler();
 81014e8:	f7ff ff00 	bl	81012ec <Error_Handler>

	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG2_M;
 81014ec:	2321      	movs	r3, #33	; 0x21
 81014ee:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x0C;
 81014f0:	230c      	movs	r3, #12
 81014f2:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81014f4:	233c      	movs	r3, #60	; 0x3c
 81014f6:	b299      	uxth	r1, r3
 81014f8:	f107 020c 	add.w	r2, r7, #12
 81014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8101500:	9300      	str	r3, [sp, #0]
 8101502:	2302      	movs	r3, #2
 8101504:	6878      	ldr	r0, [r7, #4]
 8101506:	f002 fb67 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 810150a:	4603      	mov	r3, r0
 810150c:	2b00      	cmp	r3, #0
 810150e:	d001      	beq.n	8101514 <LSM9DS1_Init+0x58>
	  	Error_Handler();
 8101510:	f7ff feec 	bl	81012ec <Error_Handler>
	  HAL_Delay(10);
 8101514:	200a      	movs	r0, #10
 8101516:	f000 fdb3 	bl	8102080 <HAL_Delay>

	  //detection
	  i2c_buf[0] = LSM9DS1_AG_RG_WHO_AM_I;
 810151a:	230f      	movs	r3, #15
 810151c:	733b      	strb	r3, [r7, #12]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 810151e:	23d6      	movs	r3, #214	; 0xd6
 8101520:	b299      	uxth	r1, r3
 8101522:	f107 020c 	add.w	r2, r7, #12
 8101526:	f04f 33ff 	mov.w	r3, #4294967295
 810152a:	9300      	str	r3, [sp, #0]
 810152c:	2301      	movs	r3, #1
 810152e:	6878      	ldr	r0, [r7, #4]
 8101530:	f002 fb52 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 8101534:	4603      	mov	r3, r0
 8101536:	2b00      	cmp	r3, #0
 8101538:	d001      	beq.n	810153e <LSM9DS1_Init+0x82>
	  	Error_Handler();
 810153a:	f7ff fed7 	bl	81012ec <Error_Handler>
	  if( ( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY ) != HAL_OK ) || ( i2c_buf[0] != 0x68 ) )
 810153e:	23d6      	movs	r3, #214	; 0xd6
 8101540:	b299      	uxth	r1, r3
 8101542:	f107 020c 	add.w	r2, r7, #12
 8101546:	f04f 33ff 	mov.w	r3, #4294967295
 810154a:	9300      	str	r3, [sp, #0]
 810154c:	2301      	movs	r3, #1
 810154e:	6878      	ldr	r0, [r7, #4]
 8101550:	f002 fc36 	bl	8103dc0 <HAL_I2C_Master_Receive>
 8101554:	4603      	mov	r3, r0
 8101556:	2b00      	cmp	r3, #0
 8101558:	d102      	bne.n	8101560 <LSM9DS1_Init+0xa4>
 810155a:	7b3b      	ldrb	r3, [r7, #12]
 810155c:	2b68      	cmp	r3, #104	; 0x68
 810155e:	d001      	beq.n	8101564 <LSM9DS1_Init+0xa8>
	  	Error_Handler();
 8101560:	f7ff fec4 	bl	81012ec <Error_Handler>

	  i2c_buf[0] = LSM9DS1_MA_RG_WHO_AM_I_M;
 8101564:	230f      	movs	r3, #15
 8101566:	733b      	strb	r3, [r7, #12]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 8101568:	233c      	movs	r3, #60	; 0x3c
 810156a:	b299      	uxth	r1, r3
 810156c:	f107 020c 	add.w	r2, r7, #12
 8101570:	f04f 33ff 	mov.w	r3, #4294967295
 8101574:	9300      	str	r3, [sp, #0]
 8101576:	2301      	movs	r3, #1
 8101578:	6878      	ldr	r0, [r7, #4]
 810157a:	f002 fb2d 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 810157e:	4603      	mov	r3, r0
 8101580:	2b00      	cmp	r3, #0
 8101582:	d001      	beq.n	8101588 <LSM9DS1_Init+0xcc>
	  	Error_Handler();
 8101584:	f7ff feb2 	bl	81012ec <Error_Handler>
	  if( ( HAL_I2C_Master_Receive(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY ) != HAL_OK ) || ( i2c_buf[0] != 0x3D ) )
 8101588:	233c      	movs	r3, #60	; 0x3c
 810158a:	b299      	uxth	r1, r3
 810158c:	f107 020c 	add.w	r2, r7, #12
 8101590:	f04f 33ff 	mov.w	r3, #4294967295
 8101594:	9300      	str	r3, [sp, #0]
 8101596:	2301      	movs	r3, #1
 8101598:	6878      	ldr	r0, [r7, #4]
 810159a:	f002 fc11 	bl	8103dc0 <HAL_I2C_Master_Receive>
 810159e:	4603      	mov	r3, r0
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	d102      	bne.n	81015aa <LSM9DS1_Init+0xee>
 81015a4:	7b3b      	ldrb	r3, [r7, #12]
 81015a6:	2b3d      	cmp	r3, #61	; 0x3d
 81015a8:	d001      	beq.n	81015ae <LSM9DS1_Init+0xf2>
	  	Error_Handler();
 81015aa:	f7ff fe9f 	bl	81012ec <Error_Handler>

	  // 119 Hz, 2000 dps, 16 Hz BW
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG1_G;
 81015ae:	2310      	movs	r3, #16
 81015b0:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x78;
 81015b2:	2378      	movs	r3, #120	; 0x78
 81015b4:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81015b6:	23d6      	movs	r3, #214	; 0xd6
 81015b8:	b299      	uxth	r1, r3
 81015ba:	f107 020c 	add.w	r2, r7, #12
 81015be:	f04f 33ff 	mov.w	r3, #4294967295
 81015c2:	9300      	str	r3, [sp, #0]
 81015c4:	2302      	movs	r3, #2
 81015c6:	6878      	ldr	r0, [r7, #4]
 81015c8:	f002 fb06 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2b00      	cmp	r3, #0
 81015d0:	d001      	beq.n	81015d6 <LSM9DS1_Init+0x11a>
	  	Error_Handler();
 81015d2:	f7ff fe8b 	bl	81012ec <Error_Handler>

	  // 119 Hz, 4g
	  i2c_buf[0] = LSM9DS1_AG_RG_CTRL_REG6_XL;
 81015d6:	2320      	movs	r3, #32
 81015d8:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x70;
 81015da:	2370      	movs	r3, #112	; 0x70
 81015dc:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 81015de:	23d6      	movs	r3, #214	; 0xd6
 81015e0:	b299      	uxth	r1, r3
 81015e2:	f107 020c 	add.w	r2, r7, #12
 81015e6:	f04f 33ff 	mov.w	r3, #4294967295
 81015ea:	9300      	str	r3, [sp, #0]
 81015ec:	2302      	movs	r3, #2
 81015ee:	6878      	ldr	r0, [r7, #4]
 81015f0:	f002 faf2 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 81015f4:	4603      	mov	r3, r0
 81015f6:	2b00      	cmp	r3, #0
 81015f8:	d001      	beq.n	81015fe <LSM9DS1_Init+0x142>
	  	Error_Handler();
 81015fa:	f7ff fe77 	bl	81012ec <Error_Handler>

	  //Temperature compensation enable, medium performance, 20 Hz
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG1_M;
 81015fe:	2320      	movs	r3, #32
 8101600:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0xB4;
 8101602:	23b4      	movs	r3, #180	; 0xb4
 8101604:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 8101606:	233c      	movs	r3, #60	; 0x3c
 8101608:	b299      	uxth	r1, r3
 810160a:	f107 020c 	add.w	r2, r7, #12
 810160e:	f04f 33ff 	mov.w	r3, #4294967295
 8101612:	9300      	str	r3, [sp, #0]
 8101614:	2302      	movs	r3, #2
 8101616:	6878      	ldr	r0, [r7, #4]
 8101618:	f002 fade 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 810161c:	4603      	mov	r3, r0
 810161e:	2b00      	cmp	r3, #0
 8101620:	d001      	beq.n	8101626 <LSM9DS1_Init+0x16a>
	  	Error_Handler();
 8101622:	f7ff fe63 	bl	81012ec <Error_Handler>

	  //4 gauss
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG2_M;
 8101626:	2321      	movs	r3, #33	; 0x21
 8101628:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x00;
 810162a:	2300      	movs	r3, #0
 810162c:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 810162e:	233c      	movs	r3, #60	; 0x3c
 8101630:	b299      	uxth	r1, r3
 8101632:	f107 020c 	add.w	r2, r7, #12
 8101636:	f04f 33ff 	mov.w	r3, #4294967295
 810163a:	9300      	str	r3, [sp, #0]
 810163c:	2302      	movs	r3, #2
 810163e:	6878      	ldr	r0, [r7, #4]
 8101640:	f002 faca 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 8101644:	4603      	mov	r3, r0
 8101646:	2b00      	cmp	r3, #0
 8101648:	d001      	beq.n	810164e <LSM9DS1_Init+0x192>
	  	Error_Handler();
 810164a:	f7ff fe4f 	bl	81012ec <Error_Handler>

	  // Continuous conversion mode
	  i2c_buf[0] = LSM9DS1_MA_RG_CTRL_REG3_M;
 810164e:	2322      	movs	r3, #34	; 0x22
 8101650:	733b      	strb	r3, [r7, #12]
	  i2c_buf[1] = 0x00;
 8101652:	2300      	movs	r3, #0
 8101654:	737b      	strb	r3, [r7, #13]
	  if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,2,HAL_MAX_DELAY) != HAL_OK )
 8101656:	233c      	movs	r3, #60	; 0x3c
 8101658:	b299      	uxth	r1, r3
 810165a:	f107 020c 	add.w	r2, r7, #12
 810165e:	f04f 33ff 	mov.w	r3, #4294967295
 8101662:	9300      	str	r3, [sp, #0]
 8101664:	2302      	movs	r3, #2
 8101666:	6878      	ldr	r0, [r7, #4]
 8101668:	f002 fab6 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 810166c:	4603      	mov	r3, r0
 810166e:	2b00      	cmp	r3, #0
 8101670:	d001      	beq.n	8101676 <LSM9DS1_Init+0x1ba>
	  	Error_Handler();
 8101672:	f7ff fe3b 	bl	81012ec <Error_Handler>

}
 8101676:	bf00      	nop
 8101678:	3710      	adds	r7, #16
 810167a:	46bd      	mov	sp, r7
 810167c:	bd80      	pop	{r7, pc}
	...

08101680 <LSM9DS1_ReadGyr>:



void LSM9DS1_ReadGyr( I2C_HandleTypeDef * phi2c, float *pgx, float *pgy, float *pgz ){
 8101680:	b580      	push	{r7, lr}
 8101682:	b088      	sub	sp, #32
 8101684:	af02      	add	r7, sp, #8
 8101686:	60f8      	str	r0, [r7, #12]
 8101688:	60b9      	str	r1, [r7, #8]
 810168a:	607a      	str	r2, [r7, #4]
 810168c:	603b      	str	r3, [r7, #0]

		uint8_t		i2c_buf[6];

		i2c_buf[0] = LSM9DS1_AG_RG_OUT_X_L_G;
 810168e:	2318      	movs	r3, #24
 8101690:	743b      	strb	r3, [r7, #16]
		if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 8101692:	23d6      	movs	r3, #214	; 0xd6
 8101694:	b299      	uxth	r1, r3
 8101696:	f107 0210 	add.w	r2, r7, #16
 810169a:	f04f 33ff 	mov.w	r3, #4294967295
 810169e:	9300      	str	r3, [sp, #0]
 81016a0:	2301      	movs	r3, #1
 81016a2:	68f8      	ldr	r0, [r7, #12]
 81016a4:	f002 fa98 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 81016a8:	4603      	mov	r3, r0
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d001      	beq.n	81016b2 <LSM9DS1_ReadGyr+0x32>
			Error_Handler();
 81016ae:	f7ff fe1d 	bl	81012ec <Error_Handler>

		if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 81016b2:	23d6      	movs	r3, #214	; 0xd6
 81016b4:	b299      	uxth	r1, r3
 81016b6:	f107 0210 	add.w	r2, r7, #16
 81016ba:	f04f 33ff 	mov.w	r3, #4294967295
 81016be:	9300      	str	r3, [sp, #0]
 81016c0:	2306      	movs	r3, #6
 81016c2:	68f8      	ldr	r0, [r7, #12]
 81016c4:	f002 fb7c 	bl	8103dc0 <HAL_I2C_Master_Receive>
 81016c8:	4603      	mov	r3, r0
 81016ca:	2b00      	cmp	r3, #0
 81016cc:	d001      	beq.n	81016d2 <LSM9DS1_ReadGyr+0x52>
			Error_Handler();
 81016ce:	f7ff fe0d 	bl	81012ec <Error_Handler>

	*pgx = getSignedVal(i2c_buf[0], i2c_buf[1]) *  0.07000 * 0.017453293;
 81016d2:	7c3b      	ldrb	r3, [r7, #16]
 81016d4:	7c7a      	ldrb	r2, [r7, #17]
 81016d6:	4611      	mov	r1, r2
 81016d8:	4618      	mov	r0, r3
 81016da:	f7ff fe0c 	bl	81012f6 <getSignedVal>
 81016de:	4603      	mov	r3, r0
 81016e0:	4618      	mov	r0, r3
 81016e2:	f7fe ffa7 	bl	8100634 <__aeabi_i2d>
 81016e6:	a32e      	add	r3, pc, #184	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 81016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016ec:	f7ff f80c 	bl	8100708 <__aeabi_dmul>
 81016f0:	4602      	mov	r2, r0
 81016f2:	460b      	mov	r3, r1
 81016f4:	4610      	mov	r0, r2
 81016f6:	4619      	mov	r1, r3
 81016f8:	a32b      	add	r3, pc, #172	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 81016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016fe:	f7ff f803 	bl	8100708 <__aeabi_dmul>
 8101702:	4602      	mov	r2, r0
 8101704:	460b      	mov	r3, r1
 8101706:	4610      	mov	r0, r2
 8101708:	4619      	mov	r1, r3
 810170a:	f7ff fad5 	bl	8100cb8 <__aeabi_d2f>
 810170e:	4602      	mov	r2, r0
 8101710:	68bb      	ldr	r3, [r7, #8]
 8101712:	601a      	str	r2, [r3, #0]
    *pgy = getSignedVal(i2c_buf[2], i2c_buf[3]) *  0.07000 * 0.017453293;
 8101714:	7cbb      	ldrb	r3, [r7, #18]
 8101716:	7cfa      	ldrb	r2, [r7, #19]
 8101718:	4611      	mov	r1, r2
 810171a:	4618      	mov	r0, r3
 810171c:	f7ff fdeb 	bl	81012f6 <getSignedVal>
 8101720:	4603      	mov	r3, r0
 8101722:	4618      	mov	r0, r3
 8101724:	f7fe ff86 	bl	8100634 <__aeabi_i2d>
 8101728:	a31d      	add	r3, pc, #116	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 810172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810172e:	f7fe ffeb 	bl	8100708 <__aeabi_dmul>
 8101732:	4602      	mov	r2, r0
 8101734:	460b      	mov	r3, r1
 8101736:	4610      	mov	r0, r2
 8101738:	4619      	mov	r1, r3
 810173a:	a31b      	add	r3, pc, #108	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 810173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101740:	f7fe ffe2 	bl	8100708 <__aeabi_dmul>
 8101744:	4602      	mov	r2, r0
 8101746:	460b      	mov	r3, r1
 8101748:	4610      	mov	r0, r2
 810174a:	4619      	mov	r1, r3
 810174c:	f7ff fab4 	bl	8100cb8 <__aeabi_d2f>
 8101750:	4602      	mov	r2, r0
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	601a      	str	r2, [r3, #0]
    *pgz = getSignedVal(i2c_buf[1], i2c_buf[5]) *  0.07000 * 0.017453293;
 8101756:	7c7b      	ldrb	r3, [r7, #17]
 8101758:	7d7a      	ldrb	r2, [r7, #21]
 810175a:	4611      	mov	r1, r2
 810175c:	4618      	mov	r0, r3
 810175e:	f7ff fdca 	bl	81012f6 <getSignedVal>
 8101762:	4603      	mov	r3, r0
 8101764:	4618      	mov	r0, r3
 8101766:	f7fe ff65 	bl	8100634 <__aeabi_i2d>
 810176a:	a30d      	add	r3, pc, #52	; (adr r3, 81017a0 <LSM9DS1_ReadGyr+0x120>)
 810176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101770:	f7fe ffca 	bl	8100708 <__aeabi_dmul>
 8101774:	4602      	mov	r2, r0
 8101776:	460b      	mov	r3, r1
 8101778:	4610      	mov	r0, r2
 810177a:	4619      	mov	r1, r3
 810177c:	a30a      	add	r3, pc, #40	; (adr r3, 81017a8 <LSM9DS1_ReadGyr+0x128>)
 810177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101782:	f7fe ffc1 	bl	8100708 <__aeabi_dmul>
 8101786:	4602      	mov	r2, r0
 8101788:	460b      	mov	r3, r1
 810178a:	4610      	mov	r0, r2
 810178c:	4619      	mov	r1, r3
 810178e:	f7ff fa93 	bl	8100cb8 <__aeabi_d2f>
 8101792:	4602      	mov	r2, r0
 8101794:	683b      	ldr	r3, [r7, #0]
 8101796:	601a      	str	r2, [r3, #0]

   // *pgz = ( (i2c_buf[5] << 8) | i2c_buf[4] ) * 2000./ 32768.;

}
 8101798:	bf00      	nop
 810179a:	3718      	adds	r7, #24
 810179c:	46bd      	mov	sp, r7
 810179e:	bd80      	pop	{r7, pc}
 81017a0:	1eb851ec 	.word	0x1eb851ec
 81017a4:	3fb1eb85 	.word	0x3fb1eb85
 81017a8:	aa91ed06 	.word	0xaa91ed06
 81017ac:	3f91df46 	.word	0x3f91df46

081017b0 <LSM9DS1_ReadAcc>:
  *proll  *= 180.0 / M_PI;

}

//[g]
void LSM9DS1_ReadAcc( I2C_HandleTypeDef * phi2c, float *pax, float *pay, float *paz ){
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b088      	sub	sp, #32
 81017b4:	af02      	add	r7, sp, #8
 81017b6:	60f8      	str	r0, [r7, #12]
 81017b8:	60b9      	str	r1, [r7, #8]
 81017ba:	607a      	str	r2, [r7, #4]
 81017bc:	603b      	str	r3, [r7, #0]

	uint8_t		i2c_buf[6];

	i2c_buf[0] = LSM9DS1_AG_RG_OUT_X_L_XL;
 81017be:	2328      	movs	r3, #40	; 0x28
 81017c0:	743b      	strb	r3, [r7, #16]
	if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_AG_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 81017c2:	23d6      	movs	r3, #214	; 0xd6
 81017c4:	b299      	uxth	r1, r3
 81017c6:	f107 0210 	add.w	r2, r7, #16
 81017ca:	f04f 33ff 	mov.w	r3, #4294967295
 81017ce:	9300      	str	r3, [sp, #0]
 81017d0:	2301      	movs	r3, #1
 81017d2:	68f8      	ldr	r0, [r7, #12]
 81017d4:	f002 fa00 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 81017d8:	4603      	mov	r3, r0
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d001      	beq.n	81017e2 <LSM9DS1_ReadAcc+0x32>
		Error_Handler();
 81017de:	f7ff fd85 	bl	81012ec <Error_Handler>

	if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_AG_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 81017e2:	23d6      	movs	r3, #214	; 0xd6
 81017e4:	b299      	uxth	r1, r3
 81017e6:	f107 0210 	add.w	r2, r7, #16
 81017ea:	f04f 33ff 	mov.w	r3, #4294967295
 81017ee:	9300      	str	r3, [sp, #0]
 81017f0:	2306      	movs	r3, #6
 81017f2:	68f8      	ldr	r0, [r7, #12]
 81017f4:	f002 fae4 	bl	8103dc0 <HAL_I2C_Master_Receive>
 81017f8:	4603      	mov	r3, r0
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d001      	beq.n	8101802 <LSM9DS1_ReadAcc+0x52>
		Error_Handler();
 81017fe:	f7ff fd75 	bl	81012ec <Error_Handler>

	*pax = (float)getSignedVal(i2c_buf[0], i2c_buf[1]);
 8101802:	7c3b      	ldrb	r3, [r7, #16]
 8101804:	7c7a      	ldrb	r2, [r7, #17]
 8101806:	4611      	mov	r1, r2
 8101808:	4618      	mov	r0, r3
 810180a:	f7ff fd74 	bl	81012f6 <getSignedVal>
 810180e:	4603      	mov	r3, r0
 8101810:	ee07 3a90 	vmov	s15, r3
 8101814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101818:	68bb      	ldr	r3, [r7, #8]
 810181a:	edc3 7a00 	vstr	s15, [r3]
	*pax = *pax * 4.0f / 32767.0f * 9.80665f;
 810181e:	68bb      	ldr	r3, [r7, #8]
 8101820:	edd3 7a00 	vldr	s15, [r3]
 8101824:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101828:	ee27 7a87 	vmul.f32	s14, s15, s14
 810182c:	eddf 6a27 	vldr	s13, [pc, #156]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 8101830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101834:	ed9f 7a26 	vldr	s14, [pc, #152]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 8101838:	ee67 7a87 	vmul.f32	s15, s15, s14
 810183c:	68bb      	ldr	r3, [r7, #8]
 810183e:	edc3 7a00 	vstr	s15, [r3]
	*pay = (float)getSignedVal(i2c_buf[2], i2c_buf[3]);
 8101842:	7cbb      	ldrb	r3, [r7, #18]
 8101844:	7cfa      	ldrb	r2, [r7, #19]
 8101846:	4611      	mov	r1, r2
 8101848:	4618      	mov	r0, r3
 810184a:	f7ff fd54 	bl	81012f6 <getSignedVal>
 810184e:	4603      	mov	r3, r0
 8101850:	ee07 3a90 	vmov	s15, r3
 8101854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	edc3 7a00 	vstr	s15, [r3]
	*pay = *pay * 4.0f / 32767.0f * 9.80665f;
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	edd3 7a00 	vldr	s15, [r3]
 8101864:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101868:	ee27 7a87 	vmul.f32	s14, s15, s14
 810186c:	eddf 6a17 	vldr	s13, [pc, #92]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 8101870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101874:	ed9f 7a16 	vldr	s14, [pc, #88]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 8101878:	ee67 7a87 	vmul.f32	s15, s15, s14
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	edc3 7a00 	vstr	s15, [r3]
	*paz = (float)getSignedVal(i2c_buf[4], i2c_buf[5]);
 8101882:	7d3b      	ldrb	r3, [r7, #20]
 8101884:	7d7a      	ldrb	r2, [r7, #21]
 8101886:	4611      	mov	r1, r2
 8101888:	4618      	mov	r0, r3
 810188a:	f7ff fd34 	bl	81012f6 <getSignedVal>
 810188e:	4603      	mov	r3, r0
 8101890:	ee07 3a90 	vmov	s15, r3
 8101894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101898:	683b      	ldr	r3, [r7, #0]
 810189a:	edc3 7a00 	vstr	s15, [r3]
	*paz = *paz * 4.0f / 32767.0f * 9.80665f;
 810189e:	683b      	ldr	r3, [r7, #0]
 81018a0:	edd3 7a00 	vldr	s15, [r3]
 81018a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81018a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 81018ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 81018cc <LSM9DS1_ReadAcc+0x11c>
 81018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81018b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 81018d0 <LSM9DS1_ReadAcc+0x120>
 81018b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81018bc:	683b      	ldr	r3, [r7, #0]
 81018be:	edc3 7a00 	vstr	s15, [r3]
}
 81018c2:	bf00      	nop
 81018c4:	3718      	adds	r7, #24
 81018c6:	46bd      	mov	sp, r7
 81018c8:	bd80      	pop	{r7, pc}
 81018ca:	bf00      	nop
 81018cc:	46fffe00 	.word	0x46fffe00
 81018d0:	411ce80a 	.word	0x411ce80a
 81018d4:	00000000 	.word	0x00000000

081018d8 <LSM9DS1_ReadMag>:

//[uT]
void LSM9DS1_ReadMag( I2C_HandleTypeDef * phi2c, float *pmx, float *pmy, float *pmz	){
 81018d8:	b580      	push	{r7, lr}
 81018da:	b088      	sub	sp, #32
 81018dc:	af02      	add	r7, sp, #8
 81018de:	60f8      	str	r0, [r7, #12]
 81018e0:	60b9      	str	r1, [r7, #8]
 81018e2:	607a      	str	r2, [r7, #4]
 81018e4:	603b      	str	r3, [r7, #0]

	uint8_t i2c_buf[6];

	i2c_buf[0] = LSM9DS1_MA_RG_OUT_X_L_M;
 81018e6:	2328      	movs	r3, #40	; 0x28
 81018e8:	743b      	strb	r3, [r7, #16]
	if( HAL_I2C_Master_Transmit(phi2c,LSM9DS1_MA_AD,i2c_buf,1,HAL_MAX_DELAY) != HAL_OK )
 81018ea:	233c      	movs	r3, #60	; 0x3c
 81018ec:	b299      	uxth	r1, r3
 81018ee:	f107 0210 	add.w	r2, r7, #16
 81018f2:	f04f 33ff 	mov.w	r3, #4294967295
 81018f6:	9300      	str	r3, [sp, #0]
 81018f8:	2301      	movs	r3, #1
 81018fa:	68f8      	ldr	r0, [r7, #12]
 81018fc:	f002 f96c 	bl	8103bd8 <HAL_I2C_Master_Transmit>
 8101900:	4603      	mov	r3, r0
 8101902:	2b00      	cmp	r3, #0
 8101904:	d001      	beq.n	810190a <LSM9DS1_ReadMag+0x32>
		Error_Handler();
 8101906:	f7ff fcf1 	bl	81012ec <Error_Handler>

	if( HAL_I2C_Master_Receive(phi2c,LSM9DS1_MA_AD,i2c_buf,6,HAL_MAX_DELAY ) != HAL_OK )
 810190a:	233c      	movs	r3, #60	; 0x3c
 810190c:	b299      	uxth	r1, r3
 810190e:	f107 0210 	add.w	r2, r7, #16
 8101912:	f04f 33ff 	mov.w	r3, #4294967295
 8101916:	9300      	str	r3, [sp, #0]
 8101918:	2306      	movs	r3, #6
 810191a:	68f8      	ldr	r0, [r7, #12]
 810191c:	f002 fa50 	bl	8103dc0 <HAL_I2C_Master_Receive>
 8101920:	4603      	mov	r3, r0
 8101922:	2b00      	cmp	r3, #0
 8101924:	d001      	beq.n	810192a <LSM9DS1_ReadMag+0x52>
		Error_Handler();
 8101926:	f7ff fce1 	bl	81012ec <Error_Handler>
//	*pmx = ( (i2c_buf[1] << 8) | i2c_buf[0] ) * 4.0 * 100.0 / 32768.0;
//	*pmy = ( (i2c_buf[3] << 8) | i2c_buf[2] ) * 4.0 * 100.0 / 32768.0;
//	*pmz = ( (i2c_buf[5] << 8) | i2c_buf[4] ) * 4.0 * 100.0 / 32768.0;


	*pmx = getSignedVal(i2c_buf[0], i2c_buf[1]) * 100.0 / 6842.0;
 810192a:	7c3b      	ldrb	r3, [r7, #16]
 810192c:	7c7a      	ldrb	r2, [r7, #17]
 810192e:	4611      	mov	r1, r2
 8101930:	4618      	mov	r0, r3
 8101932:	f7ff fce0 	bl	81012f6 <getSignedVal>
 8101936:	4603      	mov	r3, r0
 8101938:	4618      	mov	r0, r3
 810193a:	f7fe fe7b 	bl	8100634 <__aeabi_i2d>
 810193e:	f04f 0200 	mov.w	r2, #0
 8101942:	4b2f      	ldr	r3, [pc, #188]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 8101944:	f7fe fee0 	bl	8100708 <__aeabi_dmul>
 8101948:	4602      	mov	r2, r0
 810194a:	460b      	mov	r3, r1
 810194c:	4610      	mov	r0, r2
 810194e:	4619      	mov	r1, r3
 8101950:	a329      	add	r3, pc, #164	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 8101952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101956:	f7ff f801 	bl	810095c <__aeabi_ddiv>
 810195a:	4602      	mov	r2, r0
 810195c:	460b      	mov	r3, r1
 810195e:	4610      	mov	r0, r2
 8101960:	4619      	mov	r1, r3
 8101962:	f7ff f9a9 	bl	8100cb8 <__aeabi_d2f>
 8101966:	4602      	mov	r2, r0
 8101968:	68bb      	ldr	r3, [r7, #8]
 810196a:	601a      	str	r2, [r3, #0]
	*pmy = getSignedVal(i2c_buf[2], i2c_buf[3]) * 100.0 / 6842.0;
 810196c:	7cbb      	ldrb	r3, [r7, #18]
 810196e:	7cfa      	ldrb	r2, [r7, #19]
 8101970:	4611      	mov	r1, r2
 8101972:	4618      	mov	r0, r3
 8101974:	f7ff fcbf 	bl	81012f6 <getSignedVal>
 8101978:	4603      	mov	r3, r0
 810197a:	4618      	mov	r0, r3
 810197c:	f7fe fe5a 	bl	8100634 <__aeabi_i2d>
 8101980:	f04f 0200 	mov.w	r2, #0
 8101984:	4b1e      	ldr	r3, [pc, #120]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 8101986:	f7fe febf 	bl	8100708 <__aeabi_dmul>
 810198a:	4602      	mov	r2, r0
 810198c:	460b      	mov	r3, r1
 810198e:	4610      	mov	r0, r2
 8101990:	4619      	mov	r1, r3
 8101992:	a319      	add	r3, pc, #100	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 8101994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101998:	f7fe ffe0 	bl	810095c <__aeabi_ddiv>
 810199c:	4602      	mov	r2, r0
 810199e:	460b      	mov	r3, r1
 81019a0:	4610      	mov	r0, r2
 81019a2:	4619      	mov	r1, r3
 81019a4:	f7ff f988 	bl	8100cb8 <__aeabi_d2f>
 81019a8:	4602      	mov	r2, r0
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	601a      	str	r2, [r3, #0]
	*pmz = getSignedVal(i2c_buf[4], i2c_buf[5]) * 100.0 / 6842.0;
 81019ae:	7d3b      	ldrb	r3, [r7, #20]
 81019b0:	7d7a      	ldrb	r2, [r7, #21]
 81019b2:	4611      	mov	r1, r2
 81019b4:	4618      	mov	r0, r3
 81019b6:	f7ff fc9e 	bl	81012f6 <getSignedVal>
 81019ba:	4603      	mov	r3, r0
 81019bc:	4618      	mov	r0, r3
 81019be:	f7fe fe39 	bl	8100634 <__aeabi_i2d>
 81019c2:	f04f 0200 	mov.w	r2, #0
 81019c6:	4b0e      	ldr	r3, [pc, #56]	; (8101a00 <LSM9DS1_ReadMag+0x128>)
 81019c8:	f7fe fe9e 	bl	8100708 <__aeabi_dmul>
 81019cc:	4602      	mov	r2, r0
 81019ce:	460b      	mov	r3, r1
 81019d0:	4610      	mov	r0, r2
 81019d2:	4619      	mov	r1, r3
 81019d4:	a308      	add	r3, pc, #32	; (adr r3, 81019f8 <LSM9DS1_ReadMag+0x120>)
 81019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019da:	f7fe ffbf 	bl	810095c <__aeabi_ddiv>
 81019de:	4602      	mov	r2, r0
 81019e0:	460b      	mov	r3, r1
 81019e2:	4610      	mov	r0, r2
 81019e4:	4619      	mov	r1, r3
 81019e6:	f7ff f967 	bl	8100cb8 <__aeabi_d2f>
 81019ea:	4602      	mov	r2, r0
 81019ec:	683b      	ldr	r3, [r7, #0]
 81019ee:	601a      	str	r2, [r3, #0]


}
 81019f0:	bf00      	nop
 81019f2:	3718      	adds	r7, #24
 81019f4:	46bd      	mov	sp, r7
 81019f6:	bd80      	pop	{r7, pc}
 81019f8:	00000000 	.word	0x00000000
 81019fc:	40baba00 	.word	0x40baba00
 8101a00:	40590000 	.word	0x40590000

08101a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101a04:	b480      	push	{r7}
 8101a06:	b083      	sub	sp, #12
 8101a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a0a:	4b0a      	ldr	r3, [pc, #40]	; (8101a34 <HAL_MspInit+0x30>)
 8101a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a10:	4a08      	ldr	r2, [pc, #32]	; (8101a34 <HAL_MspInit+0x30>)
 8101a12:	f043 0302 	orr.w	r3, r3, #2
 8101a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a1a:	4b06      	ldr	r3, [pc, #24]	; (8101a34 <HAL_MspInit+0x30>)
 8101a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a20:	f003 0302 	and.w	r3, r3, #2
 8101a24:	607b      	str	r3, [r7, #4]
 8101a26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101a28:	bf00      	nop
 8101a2a:	370c      	adds	r7, #12
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a32:	4770      	bx	lr
 8101a34:	58024400 	.word	0x58024400

08101a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	b0b8      	sub	sp, #224	; 0xe0
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a44:	2200      	movs	r2, #0
 8101a46:	601a      	str	r2, [r3, #0]
 8101a48:	605a      	str	r2, [r3, #4]
 8101a4a:	609a      	str	r2, [r3, #8]
 8101a4c:	60da      	str	r2, [r3, #12]
 8101a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a50:	f107 0310 	add.w	r3, r7, #16
 8101a54:	22bc      	movs	r2, #188	; 0xbc
 8101a56:	2100      	movs	r1, #0
 8101a58:	4618      	mov	r0, r3
 8101a5a:	f006 f97d 	bl	8107d58 <memset>
  if(hadc->Instance==ADC1)
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4a2a      	ldr	r2, [pc, #168]	; (8101b0c <HAL_ADC_MspInit+0xd4>)
 8101a64:	4293      	cmp	r3, r2
 8101a66:	d14c      	bne.n	8101b02 <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101a68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101a6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8101a6e:	2305      	movs	r3, #5
 8101a70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8101a72:	2328      	movs	r3, #40	; 0x28
 8101a74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8101a76:	2304      	movs	r3, #4
 8101a78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101a7a:	2302      	movs	r3, #2
 8101a7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101a7e:	2302      	movs	r3, #2
 8101a80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8101a82:	2380      	movs	r3, #128	; 0x80
 8101a84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8101a86:	2300      	movs	r3, #0
 8101a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101a8a:	2300      	movs	r3, #0
 8101a8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101a8e:	2300      	movs	r3, #0
 8101a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a94:	f107 0310 	add.w	r3, r7, #16
 8101a98:	4618      	mov	r0, r3
 8101a9a:	f003 f89b 	bl	8104bd4 <HAL_RCCEx_PeriphCLKConfig>
 8101a9e:	4603      	mov	r3, r0
 8101aa0:	2b00      	cmp	r3, #0
 8101aa2:	d001      	beq.n	8101aa8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101aa4:	f7ff fc22 	bl	81012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101aa8:	4b19      	ldr	r3, [pc, #100]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101aae:	4a18      	ldr	r2, [pc, #96]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ab0:	f043 0320 	orr.w	r3, r3, #32
 8101ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ab8:	4b15      	ldr	r3, [pc, #84]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101abe:	f003 0320 	and.w	r3, r3, #32
 8101ac2:	60fb      	str	r3, [r7, #12]
 8101ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ac6:	4b12      	ldr	r3, [pc, #72]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101acc:	4a10      	ldr	r2, [pc, #64]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ace:	f043 0301 	orr.w	r3, r3, #1
 8101ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ad6:	4b0e      	ldr	r3, [pc, #56]	; (8101b10 <HAL_ADC_MspInit+0xd8>)
 8101ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101adc:	f003 0301 	and.w	r3, r3, #1
 8101ae0:	60bb      	str	r3, [r7, #8]
 8101ae2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101ae4:	2308      	movs	r3, #8
 8101ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101aea:	2303      	movs	r3, #3
 8101aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101af0:	2300      	movs	r3, #0
 8101af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101af6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101afa:	4619      	mov	r1, r3
 8101afc:	4805      	ldr	r0, [pc, #20]	; (8101b14 <HAL_ADC_MspInit+0xdc>)
 8101afe:	f001 fdff 	bl	8103700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8101b02:	bf00      	nop
 8101b04:	37e0      	adds	r7, #224	; 0xe0
 8101b06:	46bd      	mov	sp, r7
 8101b08:	bd80      	pop	{r7, pc}
 8101b0a:	bf00      	nop
 8101b0c:	40022000 	.word	0x40022000
 8101b10:	58024400 	.word	0x58024400
 8101b14:	58020000 	.word	0x58020000

08101b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b0b8      	sub	sp, #224	; 0xe0
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101b24:	2200      	movs	r2, #0
 8101b26:	601a      	str	r2, [r3, #0]
 8101b28:	605a      	str	r2, [r3, #4]
 8101b2a:	609a      	str	r2, [r3, #8]
 8101b2c:	60da      	str	r2, [r3, #12]
 8101b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b30:	f107 0310 	add.w	r3, r7, #16
 8101b34:	22bc      	movs	r2, #188	; 0xbc
 8101b36:	2100      	movs	r1, #0
 8101b38:	4618      	mov	r0, r3
 8101b3a:	f006 f90d 	bl	8107d58 <memset>
  if(hi2c->Instance==I2C4)
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	4a25      	ldr	r2, [pc, #148]	; (8101bd8 <HAL_I2C_MspInit+0xc0>)
 8101b44:	4293      	cmp	r3, r2
 8101b46:	d142      	bne.n	8101bce <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8101b48:	2310      	movs	r3, #16
 8101b4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8101b4c:	2300      	movs	r3, #0
 8101b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b52:	f107 0310 	add.w	r3, r7, #16
 8101b56:	4618      	mov	r0, r3
 8101b58:	f003 f83c 	bl	8104bd4 <HAL_RCCEx_PeriphCLKConfig>
 8101b5c:	4603      	mov	r3, r0
 8101b5e:	2b00      	cmp	r3, #0
 8101b60:	d001      	beq.n	8101b66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101b62:	f7ff fbc3 	bl	81012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b66:	4b1d      	ldr	r3, [pc, #116]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b6c:	4a1b      	ldr	r2, [pc, #108]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b6e:	f043 0302 	orr.w	r3, r3, #2
 8101b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b76:	4b19      	ldr	r3, [pc, #100]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b7c:	f003 0302 	and.w	r3, r3, #2
 8101b80:	60fb      	str	r3, [r7, #12]
 8101b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101b8c:	2312      	movs	r3, #18
 8101b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b92:	2300      	movs	r3, #0
 8101b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b98:	2300      	movs	r3, #0
 8101b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8101b9e:	2306      	movs	r3, #6
 8101ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101ba8:	4619      	mov	r1, r3
 8101baa:	480d      	ldr	r0, [pc, #52]	; (8101be0 <HAL_I2C_MspInit+0xc8>)
 8101bac:	f001 fda8 	bl	8103700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8101bb0:	4b0a      	ldr	r3, [pc, #40]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bb6:	4a09      	ldr	r2, [pc, #36]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101bbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101bc0:	4b06      	ldr	r3, [pc, #24]	; (8101bdc <HAL_I2C_MspInit+0xc4>)
 8101bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101bca:	60bb      	str	r3, [r7, #8]
 8101bcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8101bce:	bf00      	nop
 8101bd0:	37e0      	adds	r7, #224	; 0xe0
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}
 8101bd6:	bf00      	nop
 8101bd8:	58001c00 	.word	0x58001c00
 8101bdc:	58024400 	.word	0x58024400
 8101be0:	58020400 	.word	0x58020400

08101be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101be4:	b480      	push	{r7}
 8101be6:	b085      	sub	sp, #20
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	4a0b      	ldr	r2, [pc, #44]	; (8101c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d10e      	bne.n	8101c14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101bf6:	4b0b      	ldr	r3, [pc, #44]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bfc:	4a09      	ldr	r2, [pc, #36]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101bfe:	f043 0301 	orr.w	r3, r3, #1
 8101c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c06:	4b07      	ldr	r3, [pc, #28]	; (8101c24 <HAL_TIM_PWM_MspInit+0x40>)
 8101c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c0c:	f003 0301 	and.w	r3, r3, #1
 8101c10:	60fb      	str	r3, [r7, #12]
 8101c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8101c14:	bf00      	nop
 8101c16:	3714      	adds	r7, #20
 8101c18:	46bd      	mov	sp, r7
 8101c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1e:	4770      	bx	lr
 8101c20:	40010000 	.word	0x40010000
 8101c24:	58024400 	.word	0x58024400

08101c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b08a      	sub	sp, #40	; 0x28
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 0314 	add.w	r3, r7, #20
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a23      	ldr	r2, [pc, #140]	; (8101cd4 <HAL_TIM_MspPostInit+0xac>)
 8101c46:	4293      	cmp	r3, r2
 8101c48:	d13f      	bne.n	8101cca <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101c4a:	4b23      	ldr	r3, [pc, #140]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c50:	4a21      	ldr	r2, [pc, #132]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c52:	f043 0310 	orr.w	r3, r3, #16
 8101c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c5a:	4b1f      	ldr	r3, [pc, #124]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c60:	f003 0310 	and.w	r3, r3, #16
 8101c64:	613b      	str	r3, [r7, #16]
 8101c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c68:	4b1b      	ldr	r3, [pc, #108]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6e:	4a1a      	ldr	r2, [pc, #104]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c70:	f043 0301 	orr.w	r3, r3, #1
 8101c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c78:	4b17      	ldr	r3, [pc, #92]	; (8101cd8 <HAL_TIM_MspPostInit+0xb0>)
 8101c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7e:	f003 0301 	and.w	r3, r3, #1
 8101c82:	60fb      	str	r3, [r7, #12]
 8101c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8101c86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8101c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c8c:	2302      	movs	r3, #2
 8101c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c90:	2300      	movs	r3, #0
 8101c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c94:	2300      	movs	r3, #0
 8101c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101c98:	2301      	movs	r3, #1
 8101c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101c9c:	f107 0314 	add.w	r3, r7, #20
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	480e      	ldr	r0, [pc, #56]	; (8101cdc <HAL_TIM_MspPostInit+0xb4>)
 8101ca4:	f001 fd2c 	bl	8103700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cae:	2302      	movs	r3, #2
 8101cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cb2:	2300      	movs	r3, #0
 8101cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cb6:	2300      	movs	r3, #0
 8101cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101cba:	2301      	movs	r3, #1
 8101cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cbe:	f107 0314 	add.w	r3, r7, #20
 8101cc2:	4619      	mov	r1, r3
 8101cc4:	4806      	ldr	r0, [pc, #24]	; (8101ce0 <HAL_TIM_MspPostInit+0xb8>)
 8101cc6:	f001 fd1b 	bl	8103700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101cca:	bf00      	nop
 8101ccc:	3728      	adds	r7, #40	; 0x28
 8101cce:	46bd      	mov	sp, r7
 8101cd0:	bd80      	pop	{r7, pc}
 8101cd2:	bf00      	nop
 8101cd4:	40010000 	.word	0x40010000
 8101cd8:	58024400 	.word	0x58024400
 8101cdc:	58021000 	.word	0x58021000
 8101ce0:	58020000 	.word	0x58020000

08101ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ce4:	b480      	push	{r7}
 8101ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ce8:	e7fe      	b.n	8101ce8 <NMI_Handler+0x4>

08101cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101cea:	b480      	push	{r7}
 8101cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101cee:	e7fe      	b.n	8101cee <HardFault_Handler+0x4>

08101cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101cf0:	b480      	push	{r7}
 8101cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101cf4:	e7fe      	b.n	8101cf4 <MemManage_Handler+0x4>

08101cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101cf6:	b480      	push	{r7}
 8101cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101cfa:	e7fe      	b.n	8101cfa <BusFault_Handler+0x4>

08101cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101cfc:	b480      	push	{r7}
 8101cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d00:	e7fe      	b.n	8101d00 <UsageFault_Handler+0x4>

08101d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101d02:	b480      	push	{r7}
 8101d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101d06:	bf00      	nop
 8101d08:	46bd      	mov	sp, r7
 8101d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0e:	4770      	bx	lr

08101d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d10:	b480      	push	{r7}
 8101d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d14:	bf00      	nop
 8101d16:	46bd      	mov	sp, r7
 8101d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d1c:	4770      	bx	lr

08101d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101d1e:	b480      	push	{r7}
 8101d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101d22:	bf00      	nop
 8101d24:	46bd      	mov	sp, r7
 8101d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2a:	4770      	bx	lr

08101d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101d30:	f000 f986 	bl	8102040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101d34:	bf00      	nop
 8101d36:	bd80      	pop	{r7, pc}

08101d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
	return 1;
 8101d3c:	2301      	movs	r3, #1
}
 8101d3e:	4618      	mov	r0, r3
 8101d40:	46bd      	mov	sp, r7
 8101d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d46:	4770      	bx	lr

08101d48 <_kill>:

int _kill(int pid, int sig)
{
 8101d48:	b580      	push	{r7, lr}
 8101d4a:	b082      	sub	sp, #8
 8101d4c:	af00      	add	r7, sp, #0
 8101d4e:	6078      	str	r0, [r7, #4]
 8101d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101d52:	f005 ffc9 	bl	8107ce8 <__errno>
 8101d56:	4603      	mov	r3, r0
 8101d58:	2216      	movs	r2, #22
 8101d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8101d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101d60:	4618      	mov	r0, r3
 8101d62:	3708      	adds	r7, #8
 8101d64:	46bd      	mov	sp, r7
 8101d66:	bd80      	pop	{r7, pc}

08101d68 <_exit>:

void _exit (int status)
{
 8101d68:	b580      	push	{r7, lr}
 8101d6a:	b082      	sub	sp, #8
 8101d6c:	af00      	add	r7, sp, #0
 8101d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101d70:	f04f 31ff 	mov.w	r1, #4294967295
 8101d74:	6878      	ldr	r0, [r7, #4]
 8101d76:	f7ff ffe7 	bl	8101d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101d7a:	e7fe      	b.n	8101d7a <_exit+0x12>

08101d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101d7c:	b580      	push	{r7, lr}
 8101d7e:	b086      	sub	sp, #24
 8101d80:	af00      	add	r7, sp, #0
 8101d82:	60f8      	str	r0, [r7, #12]
 8101d84:	60b9      	str	r1, [r7, #8]
 8101d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d88:	2300      	movs	r3, #0
 8101d8a:	617b      	str	r3, [r7, #20]
 8101d8c:	e00a      	b.n	8101da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101d8e:	f3af 8000 	nop.w
 8101d92:	4601      	mov	r1, r0
 8101d94:	68bb      	ldr	r3, [r7, #8]
 8101d96:	1c5a      	adds	r2, r3, #1
 8101d98:	60ba      	str	r2, [r7, #8]
 8101d9a:	b2ca      	uxtb	r2, r1
 8101d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	3301      	adds	r3, #1
 8101da2:	617b      	str	r3, [r7, #20]
 8101da4:	697a      	ldr	r2, [r7, #20]
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	429a      	cmp	r2, r3
 8101daa:	dbf0      	blt.n	8101d8e <_read+0x12>
	}

return len;
 8101dac:	687b      	ldr	r3, [r7, #4]
}
 8101dae:	4618      	mov	r0, r3
 8101db0:	3718      	adds	r7, #24
 8101db2:	46bd      	mov	sp, r7
 8101db4:	bd80      	pop	{r7, pc}

08101db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101db6:	b580      	push	{r7, lr}
 8101db8:	b086      	sub	sp, #24
 8101dba:	af00      	add	r7, sp, #0
 8101dbc:	60f8      	str	r0, [r7, #12]
 8101dbe:	60b9      	str	r1, [r7, #8]
 8101dc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101dc2:	2300      	movs	r3, #0
 8101dc4:	617b      	str	r3, [r7, #20]
 8101dc6:	e009      	b.n	8101ddc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101dc8:	68bb      	ldr	r3, [r7, #8]
 8101dca:	1c5a      	adds	r2, r3, #1
 8101dcc:	60ba      	str	r2, [r7, #8]
 8101dce:	781b      	ldrb	r3, [r3, #0]
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101dd6:	697b      	ldr	r3, [r7, #20]
 8101dd8:	3301      	adds	r3, #1
 8101dda:	617b      	str	r3, [r7, #20]
 8101ddc:	697a      	ldr	r2, [r7, #20]
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	429a      	cmp	r2, r3
 8101de2:	dbf1      	blt.n	8101dc8 <_write+0x12>
	}
	return len;
 8101de4:	687b      	ldr	r3, [r7, #4]
}
 8101de6:	4618      	mov	r0, r3
 8101de8:	3718      	adds	r7, #24
 8101dea:	46bd      	mov	sp, r7
 8101dec:	bd80      	pop	{r7, pc}

08101dee <_close>:

int _close(int file)
{
 8101dee:	b480      	push	{r7}
 8101df0:	b083      	sub	sp, #12
 8101df2:	af00      	add	r7, sp, #0
 8101df4:	6078      	str	r0, [r7, #4]
	return -1;
 8101df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	370c      	adds	r7, #12
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e04:	4770      	bx	lr

08101e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101e06:	b480      	push	{r7}
 8101e08:	b083      	sub	sp, #12
 8101e0a:	af00      	add	r7, sp, #0
 8101e0c:	6078      	str	r0, [r7, #4]
 8101e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101e10:	683b      	ldr	r3, [r7, #0]
 8101e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101e16:	605a      	str	r2, [r3, #4]
	return 0;
 8101e18:	2300      	movs	r3, #0
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	370c      	adds	r7, #12
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr

08101e26 <_isatty>:

int _isatty(int file)
{
 8101e26:	b480      	push	{r7}
 8101e28:	b083      	sub	sp, #12
 8101e2a:	af00      	add	r7, sp, #0
 8101e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8101e2e:	2301      	movs	r3, #1
}
 8101e30:	4618      	mov	r0, r3
 8101e32:	370c      	adds	r7, #12
 8101e34:	46bd      	mov	sp, r7
 8101e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3a:	4770      	bx	lr

08101e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101e3c:	b480      	push	{r7}
 8101e3e:	b085      	sub	sp, #20
 8101e40:	af00      	add	r7, sp, #0
 8101e42:	60f8      	str	r0, [r7, #12]
 8101e44:	60b9      	str	r1, [r7, #8]
 8101e46:	607a      	str	r2, [r7, #4]
	return 0;
 8101e48:	2300      	movs	r3, #0
}
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	3714      	adds	r7, #20
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e54:	4770      	bx	lr
	...

08101e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101e58:	b580      	push	{r7, lr}
 8101e5a:	b086      	sub	sp, #24
 8101e5c:	af00      	add	r7, sp, #0
 8101e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101e60:	4a14      	ldr	r2, [pc, #80]	; (8101eb4 <_sbrk+0x5c>)
 8101e62:	4b15      	ldr	r3, [pc, #84]	; (8101eb8 <_sbrk+0x60>)
 8101e64:	1ad3      	subs	r3, r2, r3
 8101e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101e68:	697b      	ldr	r3, [r7, #20]
 8101e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101e6c:	4b13      	ldr	r3, [pc, #76]	; (8101ebc <_sbrk+0x64>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	2b00      	cmp	r3, #0
 8101e72:	d102      	bne.n	8101e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101e74:	4b11      	ldr	r3, [pc, #68]	; (8101ebc <_sbrk+0x64>)
 8101e76:	4a12      	ldr	r2, [pc, #72]	; (8101ec0 <_sbrk+0x68>)
 8101e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101e7a:	4b10      	ldr	r3, [pc, #64]	; (8101ebc <_sbrk+0x64>)
 8101e7c:	681a      	ldr	r2, [r3, #0]
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	4413      	add	r3, r2
 8101e82:	693a      	ldr	r2, [r7, #16]
 8101e84:	429a      	cmp	r2, r3
 8101e86:	d207      	bcs.n	8101e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101e88:	f005 ff2e 	bl	8107ce8 <__errno>
 8101e8c:	4603      	mov	r3, r0
 8101e8e:	220c      	movs	r2, #12
 8101e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101e92:	f04f 33ff 	mov.w	r3, #4294967295
 8101e96:	e009      	b.n	8101eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101e98:	4b08      	ldr	r3, [pc, #32]	; (8101ebc <_sbrk+0x64>)
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101e9e:	4b07      	ldr	r3, [pc, #28]	; (8101ebc <_sbrk+0x64>)
 8101ea0:	681a      	ldr	r2, [r3, #0]
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	4413      	add	r3, r2
 8101ea6:	4a05      	ldr	r2, [pc, #20]	; (8101ebc <_sbrk+0x64>)
 8101ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101eaa:	68fb      	ldr	r3, [r7, #12]
}
 8101eac:	4618      	mov	r0, r3
 8101eae:	3718      	adds	r7, #24
 8101eb0:	46bd      	mov	sp, r7
 8101eb2:	bd80      	pop	{r7, pc}
 8101eb4:	10048000 	.word	0x10048000
 8101eb8:	00000800 	.word	0x00000800
 8101ebc:	100001fc 	.word	0x100001fc
 8101ec0:	100003a8 	.word	0x100003a8

08101ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101efc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101ec8:	f7fe ff46 	bl	8100d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101ece:	e003      	b.n	8101ed8 <LoopCopyDataInit>

08101ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101ed0:	4b0b      	ldr	r3, [pc, #44]	; (8101f00 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101ed6:	3104      	adds	r1, #4

08101ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101ed8:	480a      	ldr	r0, [pc, #40]	; (8101f04 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8101eda:	4b0b      	ldr	r3, [pc, #44]	; (8101f08 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8101edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101ee0:	d3f6      	bcc.n	8101ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8101ee2:	4a0a      	ldr	r2, [pc, #40]	; (8101f0c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101ee4:	e002      	b.n	8101eec <LoopFillZerobss>

08101ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101ee8:	f842 3b04 	str.w	r3, [r2], #4

08101eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101eec:	4b08      	ldr	r3, [pc, #32]	; (8101f10 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8101eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101ef0:	d3f9      	bcc.n	8101ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ef2:	f005 feff 	bl	8107cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ef6:	f7fe ff4b 	bl	8100d90 <main>
  bx  lr    
 8101efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101efc:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101f00:	0810ab04 	.word	0x0810ab04
  ldr  r0, =_sdata
 8101f04:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101f08:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 8101f0c:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 8101f10:	100003a8 	.word	0x100003a8

08101f14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101f14:	e7fe      	b.n	8101f14 <ADC3_IRQHandler>
	...

08101f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b082      	sub	sp, #8
 8101f1c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101f1e:	4b28      	ldr	r3, [pc, #160]	; (8101fc0 <HAL_Init+0xa8>)
 8101f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f24:	4a26      	ldr	r2, [pc, #152]	; (8101fc0 <HAL_Init+0xa8>)
 8101f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101f2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101f2e:	4b24      	ldr	r3, [pc, #144]	; (8101fc0 <HAL_Init+0xa8>)
 8101f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101f38:	603b      	str	r3, [r7, #0]
 8101f3a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101f3c:	4b21      	ldr	r3, [pc, #132]	; (8101fc4 <HAL_Init+0xac>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101f48:	4a1e      	ldr	r2, [pc, #120]	; (8101fc4 <HAL_Init+0xac>)
 8101f4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101f4e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101f50:	4b1c      	ldr	r3, [pc, #112]	; (8101fc4 <HAL_Init+0xac>)
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	4a1b      	ldr	r2, [pc, #108]	; (8101fc4 <HAL_Init+0xac>)
 8101f56:	f043 0301 	orr.w	r3, r3, #1
 8101f5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101f5c:	2003      	movs	r0, #3
 8101f5e:	f001 fb89 	bl	8103674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101f62:	f002 fc8b 	bl	810487c <HAL_RCC_GetSysClockFreq>
 8101f66:	4602      	mov	r2, r0
 8101f68:	4b15      	ldr	r3, [pc, #84]	; (8101fc0 <HAL_Init+0xa8>)
 8101f6a:	699b      	ldr	r3, [r3, #24]
 8101f6c:	0a1b      	lsrs	r3, r3, #8
 8101f6e:	f003 030f 	and.w	r3, r3, #15
 8101f72:	4915      	ldr	r1, [pc, #84]	; (8101fc8 <HAL_Init+0xb0>)
 8101f74:	5ccb      	ldrb	r3, [r1, r3]
 8101f76:	f003 031f 	and.w	r3, r3, #31
 8101f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8101f7e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101f80:	4b0f      	ldr	r3, [pc, #60]	; (8101fc0 <HAL_Init+0xa8>)
 8101f82:	699b      	ldr	r3, [r3, #24]
 8101f84:	f003 030f 	and.w	r3, r3, #15
 8101f88:	4a0f      	ldr	r2, [pc, #60]	; (8101fc8 <HAL_Init+0xb0>)
 8101f8a:	5cd3      	ldrb	r3, [r2, r3]
 8101f8c:	f003 031f 	and.w	r3, r3, #31
 8101f90:	687a      	ldr	r2, [r7, #4]
 8101f92:	fa22 f303 	lsr.w	r3, r2, r3
 8101f96:	4a0d      	ldr	r2, [pc, #52]	; (8101fcc <HAL_Init+0xb4>)
 8101f98:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101f9a:	4b0c      	ldr	r3, [pc, #48]	; (8101fcc <HAL_Init+0xb4>)
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a0c      	ldr	r2, [pc, #48]	; (8101fd0 <HAL_Init+0xb8>)
 8101fa0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101fa2:	2000      	movs	r0, #0
 8101fa4:	f000 f816 	bl	8101fd4 <HAL_InitTick>
 8101fa8:	4603      	mov	r3, r0
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d001      	beq.n	8101fb2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101fae:	2301      	movs	r3, #1
 8101fb0:	e002      	b.n	8101fb8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101fb2:	f7ff fd27 	bl	8101a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101fb6:	2300      	movs	r3, #0
}
 8101fb8:	4618      	mov	r0, r3
 8101fba:	3708      	adds	r7, #8
 8101fbc:	46bd      	mov	sp, r7
 8101fbe:	bd80      	pop	{r7, pc}
 8101fc0:	58024400 	.word	0x58024400
 8101fc4:	40024400 	.word	0x40024400
 8101fc8:	0810a708 	.word	0x0810a708
 8101fcc:	10000004 	.word	0x10000004
 8101fd0:	10000000 	.word	0x10000000

08101fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101fd4:	b580      	push	{r7, lr}
 8101fd6:	b082      	sub	sp, #8
 8101fd8:	af00      	add	r7, sp, #0
 8101fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101fdc:	4b15      	ldr	r3, [pc, #84]	; (8102034 <HAL_InitTick+0x60>)
 8101fde:	781b      	ldrb	r3, [r3, #0]
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d101      	bne.n	8101fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101fe4:	2301      	movs	r3, #1
 8101fe6:	e021      	b.n	810202c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101fe8:	4b13      	ldr	r3, [pc, #76]	; (8102038 <HAL_InitTick+0x64>)
 8101fea:	681a      	ldr	r2, [r3, #0]
 8101fec:	4b11      	ldr	r3, [pc, #68]	; (8102034 <HAL_InitTick+0x60>)
 8101fee:	781b      	ldrb	r3, [r3, #0]
 8101ff0:	4619      	mov	r1, r3
 8101ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8101ffe:	4618      	mov	r0, r3
 8102000:	f001 fb5d 	bl	81036be <HAL_SYSTICK_Config>
 8102004:	4603      	mov	r3, r0
 8102006:	2b00      	cmp	r3, #0
 8102008:	d001      	beq.n	810200e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810200a:	2301      	movs	r3, #1
 810200c:	e00e      	b.n	810202c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	2b0f      	cmp	r3, #15
 8102012:	d80a      	bhi.n	810202a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102014:	2200      	movs	r2, #0
 8102016:	6879      	ldr	r1, [r7, #4]
 8102018:	f04f 30ff 	mov.w	r0, #4294967295
 810201c:	f001 fb35 	bl	810368a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102020:	4a06      	ldr	r2, [pc, #24]	; (810203c <HAL_InitTick+0x68>)
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102026:	2300      	movs	r3, #0
 8102028:	e000      	b.n	810202c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810202a:	2301      	movs	r3, #1
}
 810202c:	4618      	mov	r0, r3
 810202e:	3708      	adds	r7, #8
 8102030:	46bd      	mov	sp, r7
 8102032:	bd80      	pop	{r7, pc}
 8102034:	1000000c 	.word	0x1000000c
 8102038:	10000000 	.word	0x10000000
 810203c:	10000008 	.word	0x10000008

08102040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102040:	b480      	push	{r7}
 8102042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102044:	4b06      	ldr	r3, [pc, #24]	; (8102060 <HAL_IncTick+0x20>)
 8102046:	781b      	ldrb	r3, [r3, #0]
 8102048:	461a      	mov	r2, r3
 810204a:	4b06      	ldr	r3, [pc, #24]	; (8102064 <HAL_IncTick+0x24>)
 810204c:	681b      	ldr	r3, [r3, #0]
 810204e:	4413      	add	r3, r2
 8102050:	4a04      	ldr	r2, [pc, #16]	; (8102064 <HAL_IncTick+0x24>)
 8102052:	6013      	str	r3, [r2, #0]
}
 8102054:	bf00      	nop
 8102056:	46bd      	mov	sp, r7
 8102058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205c:	4770      	bx	lr
 810205e:	bf00      	nop
 8102060:	1000000c 	.word	0x1000000c
 8102064:	10000394 	.word	0x10000394

08102068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102068:	b480      	push	{r7}
 810206a:	af00      	add	r7, sp, #0
  return uwTick;
 810206c:	4b03      	ldr	r3, [pc, #12]	; (810207c <HAL_GetTick+0x14>)
 810206e:	681b      	ldr	r3, [r3, #0]
}
 8102070:	4618      	mov	r0, r3
 8102072:	46bd      	mov	sp, r7
 8102074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102078:	4770      	bx	lr
 810207a:	bf00      	nop
 810207c:	10000394 	.word	0x10000394

08102080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102080:	b580      	push	{r7, lr}
 8102082:	b084      	sub	sp, #16
 8102084:	af00      	add	r7, sp, #0
 8102086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102088:	f7ff ffee 	bl	8102068 <HAL_GetTick>
 810208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102092:	68fb      	ldr	r3, [r7, #12]
 8102094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102098:	d005      	beq.n	81020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810209a:	4b0a      	ldr	r3, [pc, #40]	; (81020c4 <HAL_Delay+0x44>)
 810209c:	781b      	ldrb	r3, [r3, #0]
 810209e:	461a      	mov	r2, r3
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	4413      	add	r3, r2
 81020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81020a6:	bf00      	nop
 81020a8:	f7ff ffde 	bl	8102068 <HAL_GetTick>
 81020ac:	4602      	mov	r2, r0
 81020ae:	68bb      	ldr	r3, [r7, #8]
 81020b0:	1ad3      	subs	r3, r2, r3
 81020b2:	68fa      	ldr	r2, [r7, #12]
 81020b4:	429a      	cmp	r2, r3
 81020b6:	d8f7      	bhi.n	81020a8 <HAL_Delay+0x28>
  {
  }
}
 81020b8:	bf00      	nop
 81020ba:	bf00      	nop
 81020bc:	3710      	adds	r7, #16
 81020be:	46bd      	mov	sp, r7
 81020c0:	bd80      	pop	{r7, pc}
 81020c2:	bf00      	nop
 81020c4:	1000000c 	.word	0x1000000c

081020c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81020c8:	b480      	push	{r7}
 81020ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81020cc:	4b03      	ldr	r3, [pc, #12]	; (81020dc <HAL_GetREVID+0x14>)
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	0c1b      	lsrs	r3, r3, #16
}
 81020d2:	4618      	mov	r0, r3
 81020d4:	46bd      	mov	sp, r7
 81020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020da:	4770      	bx	lr
 81020dc:	5c001000 	.word	0x5c001000

081020e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81020e0:	b480      	push	{r7}
 81020e2:	b083      	sub	sp, #12
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	6078      	str	r0, [r7, #4]
 81020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	689b      	ldr	r3, [r3, #8]
 81020ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81020f2:	683b      	ldr	r3, [r7, #0]
 81020f4:	431a      	orrs	r2, r3
 81020f6:	687b      	ldr	r3, [r7, #4]
 81020f8:	609a      	str	r2, [r3, #8]
}
 81020fa:	bf00      	nop
 81020fc:	370c      	adds	r7, #12
 81020fe:	46bd      	mov	sp, r7
 8102100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102104:	4770      	bx	lr

08102106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102106:	b480      	push	{r7}
 8102108:	b083      	sub	sp, #12
 810210a:	af00      	add	r7, sp, #0
 810210c:	6078      	str	r0, [r7, #4]
 810210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	689b      	ldr	r3, [r3, #8]
 8102114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102118:	683b      	ldr	r3, [r7, #0]
 810211a:	431a      	orrs	r2, r3
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	609a      	str	r2, [r3, #8]
}
 8102120:	bf00      	nop
 8102122:	370c      	adds	r7, #12
 8102124:	46bd      	mov	sp, r7
 8102126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212a:	4770      	bx	lr

0810212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810212c:	b480      	push	{r7}
 810212e:	b083      	sub	sp, #12
 8102130:	af00      	add	r7, sp, #0
 8102132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	689b      	ldr	r3, [r3, #8]
 8102138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 810213c:	4618      	mov	r0, r3
 810213e:	370c      	adds	r7, #12
 8102140:	46bd      	mov	sp, r7
 8102142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102146:	4770      	bx	lr

08102148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102148:	b480      	push	{r7}
 810214a:	b087      	sub	sp, #28
 810214c:	af00      	add	r7, sp, #0
 810214e:	60f8      	str	r0, [r7, #12]
 8102150:	60b9      	str	r1, [r7, #8]
 8102152:	607a      	str	r2, [r7, #4]
 8102154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102156:	68fb      	ldr	r3, [r7, #12]
 8102158:	3360      	adds	r3, #96	; 0x60
 810215a:	461a      	mov	r2, r3
 810215c:	68bb      	ldr	r3, [r7, #8]
 810215e:	009b      	lsls	r3, r3, #2
 8102160:	4413      	add	r3, r2
 8102162:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102164:	697b      	ldr	r3, [r7, #20]
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102172:	683b      	ldr	r3, [r7, #0]
 8102174:	430b      	orrs	r3, r1
 8102176:	431a      	orrs	r2, r3
 8102178:	697b      	ldr	r3, [r7, #20]
 810217a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 810217c:	bf00      	nop
 810217e:	371c      	adds	r7, #28
 8102180:	46bd      	mov	sp, r7
 8102182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102186:	4770      	bx	lr

08102188 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102188:	b480      	push	{r7}
 810218a:	b085      	sub	sp, #20
 810218c:	af00      	add	r7, sp, #0
 810218e:	60f8      	str	r0, [r7, #12]
 8102190:	60b9      	str	r1, [r7, #8]
 8102192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102194:	68fb      	ldr	r3, [r7, #12]
 8102196:	691b      	ldr	r3, [r3, #16]
 8102198:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 810219c:	68bb      	ldr	r3, [r7, #8]
 810219e:	f003 031f 	and.w	r3, r3, #31
 81021a2:	6879      	ldr	r1, [r7, #4]
 81021a4:	fa01 f303 	lsl.w	r3, r1, r3
 81021a8:	431a      	orrs	r2, r3
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	611a      	str	r2, [r3, #16]
}
 81021ae:	bf00      	nop
 81021b0:	3714      	adds	r7, #20
 81021b2:	46bd      	mov	sp, r7
 81021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b8:	4770      	bx	lr

081021ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81021ba:	b480      	push	{r7}
 81021bc:	b087      	sub	sp, #28
 81021be:	af00      	add	r7, sp, #0
 81021c0:	60f8      	str	r0, [r7, #12]
 81021c2:	60b9      	str	r1, [r7, #8]
 81021c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	3360      	adds	r3, #96	; 0x60
 81021ca:	461a      	mov	r2, r3
 81021cc:	68bb      	ldr	r3, [r7, #8]
 81021ce:	009b      	lsls	r3, r3, #2
 81021d0:	4413      	add	r3, r2
 81021d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81021d4:	697b      	ldr	r3, [r7, #20]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	431a      	orrs	r2, r3
 81021e0:	697b      	ldr	r3, [r7, #20]
 81021e2:	601a      	str	r2, [r3, #0]
  }
}
 81021e4:	bf00      	nop
 81021e6:	371c      	adds	r7, #28
 81021e8:	46bd      	mov	sp, r7
 81021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ee:	4770      	bx	lr

081021f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81021f0:	b480      	push	{r7}
 81021f2:	b087      	sub	sp, #28
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	60f8      	str	r0, [r7, #12]
 81021f8:	60b9      	str	r1, [r7, #8]
 81021fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	3330      	adds	r3, #48	; 0x30
 8102200:	461a      	mov	r2, r3
 8102202:	68bb      	ldr	r3, [r7, #8]
 8102204:	0a1b      	lsrs	r3, r3, #8
 8102206:	009b      	lsls	r3, r3, #2
 8102208:	f003 030c 	and.w	r3, r3, #12
 810220c:	4413      	add	r3, r2
 810220e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102210:	697b      	ldr	r3, [r7, #20]
 8102212:	681a      	ldr	r2, [r3, #0]
 8102214:	68bb      	ldr	r3, [r7, #8]
 8102216:	f003 031f 	and.w	r3, r3, #31
 810221a:	211f      	movs	r1, #31
 810221c:	fa01 f303 	lsl.w	r3, r1, r3
 8102220:	43db      	mvns	r3, r3
 8102222:	401a      	ands	r2, r3
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	0e9b      	lsrs	r3, r3, #26
 8102228:	f003 011f 	and.w	r1, r3, #31
 810222c:	68bb      	ldr	r3, [r7, #8]
 810222e:	f003 031f 	and.w	r3, r3, #31
 8102232:	fa01 f303 	lsl.w	r3, r1, r3
 8102236:	431a      	orrs	r2, r3
 8102238:	697b      	ldr	r3, [r7, #20]
 810223a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810223c:	bf00      	nop
 810223e:	371c      	adds	r7, #28
 8102240:	46bd      	mov	sp, r7
 8102242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102246:	4770      	bx	lr

08102248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102248:	b480      	push	{r7}
 810224a:	b087      	sub	sp, #28
 810224c:	af00      	add	r7, sp, #0
 810224e:	60f8      	str	r0, [r7, #12]
 8102250:	60b9      	str	r1, [r7, #8]
 8102252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102254:	68fb      	ldr	r3, [r7, #12]
 8102256:	3314      	adds	r3, #20
 8102258:	461a      	mov	r2, r3
 810225a:	68bb      	ldr	r3, [r7, #8]
 810225c:	0e5b      	lsrs	r3, r3, #25
 810225e:	009b      	lsls	r3, r3, #2
 8102260:	f003 0304 	and.w	r3, r3, #4
 8102264:	4413      	add	r3, r2
 8102266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102268:	697b      	ldr	r3, [r7, #20]
 810226a:	681a      	ldr	r2, [r3, #0]
 810226c:	68bb      	ldr	r3, [r7, #8]
 810226e:	0d1b      	lsrs	r3, r3, #20
 8102270:	f003 031f 	and.w	r3, r3, #31
 8102274:	2107      	movs	r1, #7
 8102276:	fa01 f303 	lsl.w	r3, r1, r3
 810227a:	43db      	mvns	r3, r3
 810227c:	401a      	ands	r2, r3
 810227e:	68bb      	ldr	r3, [r7, #8]
 8102280:	0d1b      	lsrs	r3, r3, #20
 8102282:	f003 031f 	and.w	r3, r3, #31
 8102286:	6879      	ldr	r1, [r7, #4]
 8102288:	fa01 f303 	lsl.w	r3, r1, r3
 810228c:	431a      	orrs	r2, r3
 810228e:	697b      	ldr	r3, [r7, #20]
 8102290:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102292:	bf00      	nop
 8102294:	371c      	adds	r7, #28
 8102296:	46bd      	mov	sp, r7
 8102298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229c:	4770      	bx	lr
	...

081022a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81022a0:	b480      	push	{r7}
 81022a2:	b085      	sub	sp, #20
 81022a4:	af00      	add	r7, sp, #0
 81022a6:	60f8      	str	r0, [r7, #12]
 81022a8:	60b9      	str	r1, [r7, #8]
 81022aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81022ac:	68fb      	ldr	r3, [r7, #12]
 81022ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81022b2:	68bb      	ldr	r3, [r7, #8]
 81022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81022b8:	43db      	mvns	r3, r3
 81022ba:	401a      	ands	r2, r3
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	f003 0318 	and.w	r3, r3, #24
 81022c2:	4908      	ldr	r1, [pc, #32]	; (81022e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 81022c4:	40d9      	lsrs	r1, r3
 81022c6:	68bb      	ldr	r3, [r7, #8]
 81022c8:	400b      	ands	r3, r1
 81022ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81022ce:	431a      	orrs	r2, r3
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 81022d6:	bf00      	nop
 81022d8:	3714      	adds	r7, #20
 81022da:	46bd      	mov	sp, r7
 81022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e0:	4770      	bx	lr
 81022e2:	bf00      	nop
 81022e4:	000fffff 	.word	0x000fffff

081022e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81022e8:	b480      	push	{r7}
 81022ea:	b083      	sub	sp, #12
 81022ec:	af00      	add	r7, sp, #0
 81022ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	689b      	ldr	r3, [r3, #8]
 81022f4:	f003 031f 	and.w	r3, r3, #31
}
 81022f8:	4618      	mov	r0, r3
 81022fa:	370c      	adds	r7, #12
 81022fc:	46bd      	mov	sp, r7
 81022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102302:	4770      	bx	lr

08102304 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102304:	b480      	push	{r7}
 8102306:	b083      	sub	sp, #12
 8102308:	af00      	add	r7, sp, #0
 810230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	689b      	ldr	r3, [r3, #8]
 8102310:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102318:	687a      	ldr	r2, [r7, #4]
 810231a:	6093      	str	r3, [r2, #8]
}
 810231c:	bf00      	nop
 810231e:	370c      	adds	r7, #12
 8102320:	46bd      	mov	sp, r7
 8102322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102326:	4770      	bx	lr

08102328 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102328:	b480      	push	{r7}
 810232a:	b083      	sub	sp, #12
 810232c:	af00      	add	r7, sp, #0
 810232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	689b      	ldr	r3, [r3, #8]
 8102334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810233c:	d101      	bne.n	8102342 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810233e:	2301      	movs	r3, #1
 8102340:	e000      	b.n	8102344 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102342:	2300      	movs	r3, #0
}
 8102344:	4618      	mov	r0, r3
 8102346:	370c      	adds	r7, #12
 8102348:	46bd      	mov	sp, r7
 810234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810234e:	4770      	bx	lr

08102350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102350:	b480      	push	{r7}
 8102352:	b083      	sub	sp, #12
 8102354:	af00      	add	r7, sp, #0
 8102356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	689b      	ldr	r3, [r3, #8]
 810235c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102364:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810236c:	bf00      	nop
 810236e:	370c      	adds	r7, #12
 8102370:	46bd      	mov	sp, r7
 8102372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102376:	4770      	bx	lr

08102378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102378:	b480      	push	{r7}
 810237a:	b083      	sub	sp, #12
 810237c:	af00      	add	r7, sp, #0
 810237e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	689b      	ldr	r3, [r3, #8]
 8102384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810238c:	d101      	bne.n	8102392 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810238e:	2301      	movs	r3, #1
 8102390:	e000      	b.n	8102394 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102392:	2300      	movs	r3, #0
}
 8102394:	4618      	mov	r0, r3
 8102396:	370c      	adds	r7, #12
 8102398:	46bd      	mov	sp, r7
 810239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239e:	4770      	bx	lr

081023a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81023a0:	b480      	push	{r7}
 81023a2:	b083      	sub	sp, #12
 81023a4:	af00      	add	r7, sp, #0
 81023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	689b      	ldr	r3, [r3, #8]
 81023ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81023b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81023b4:	f043 0201 	orr.w	r2, r3, #1
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81023bc:	bf00      	nop
 81023be:	370c      	adds	r7, #12
 81023c0:	46bd      	mov	sp, r7
 81023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c6:	4770      	bx	lr

081023c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81023c8:	b480      	push	{r7}
 81023ca:	b083      	sub	sp, #12
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	689b      	ldr	r3, [r3, #8]
 81023d4:	f003 0301 	and.w	r3, r3, #1
 81023d8:	2b01      	cmp	r3, #1
 81023da:	d101      	bne.n	81023e0 <LL_ADC_IsEnabled+0x18>
 81023dc:	2301      	movs	r3, #1
 81023de:	e000      	b.n	81023e2 <LL_ADC_IsEnabled+0x1a>
 81023e0:	2300      	movs	r3, #0
}
 81023e2:	4618      	mov	r0, r3
 81023e4:	370c      	adds	r7, #12
 81023e6:	46bd      	mov	sp, r7
 81023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ec:	4770      	bx	lr

081023ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 81023ee:	b480      	push	{r7}
 81023f0:	b083      	sub	sp, #12
 81023f2:	af00      	add	r7, sp, #0
 81023f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	689b      	ldr	r3, [r3, #8]
 81023fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81023fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102402:	f043 0204 	orr.w	r2, r3, #4
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 810240a:	bf00      	nop
 810240c:	370c      	adds	r7, #12
 810240e:	46bd      	mov	sp, r7
 8102410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102414:	4770      	bx	lr

08102416 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102416:	b480      	push	{r7}
 8102418:	b083      	sub	sp, #12
 810241a:	af00      	add	r7, sp, #0
 810241c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	689b      	ldr	r3, [r3, #8]
 8102422:	f003 0304 	and.w	r3, r3, #4
 8102426:	2b04      	cmp	r3, #4
 8102428:	d101      	bne.n	810242e <LL_ADC_REG_IsConversionOngoing+0x18>
 810242a:	2301      	movs	r3, #1
 810242c:	e000      	b.n	8102430 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810242e:	2300      	movs	r3, #0
}
 8102430:	4618      	mov	r0, r3
 8102432:	370c      	adds	r7, #12
 8102434:	46bd      	mov	sp, r7
 8102436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243a:	4770      	bx	lr

0810243c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810243c:	b480      	push	{r7}
 810243e:	b083      	sub	sp, #12
 8102440:	af00      	add	r7, sp, #0
 8102442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	689b      	ldr	r3, [r3, #8]
 8102448:	f003 0308 	and.w	r3, r3, #8
 810244c:	2b08      	cmp	r3, #8
 810244e:	d101      	bne.n	8102454 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102450:	2301      	movs	r3, #1
 8102452:	e000      	b.n	8102456 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102454:	2300      	movs	r3, #0
}
 8102456:	4618      	mov	r0, r3
 8102458:	370c      	adds	r7, #12
 810245a:	46bd      	mov	sp, r7
 810245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102460:	4770      	bx	lr
	...

08102464 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102464:	b590      	push	{r4, r7, lr}
 8102466:	b089      	sub	sp, #36	; 0x24
 8102468:	af00      	add	r7, sp, #0
 810246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810246c:	2300      	movs	r3, #0
 810246e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102470:	2300      	movs	r3, #0
 8102472:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	2b00      	cmp	r3, #0
 8102478:	d101      	bne.n	810247e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810247a:	2301      	movs	r3, #1
 810247c:	e18e      	b.n	810279c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	68db      	ldr	r3, [r3, #12]
 8102482:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102488:	2b00      	cmp	r3, #0
 810248a:	d109      	bne.n	81024a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810248c:	6878      	ldr	r0, [r7, #4]
 810248e:	f7ff fad3 	bl	8101a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	2200      	movs	r2, #0
 8102496:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	2200      	movs	r2, #0
 810249c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	4618      	mov	r0, r3
 81024a6:	f7ff ff3f 	bl	8102328 <LL_ADC_IsDeepPowerDownEnabled>
 81024aa:	4603      	mov	r3, r0
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d004      	beq.n	81024ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	4618      	mov	r0, r3
 81024b6:	f7ff ff25 	bl	8102304 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	4618      	mov	r0, r3
 81024c0:	f7ff ff5a 	bl	8102378 <LL_ADC_IsInternalRegulatorEnabled>
 81024c4:	4603      	mov	r3, r0
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d114      	bne.n	81024f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	4618      	mov	r0, r3
 81024d0:	f7ff ff3e 	bl	8102350 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81024d4:	4b9b      	ldr	r3, [pc, #620]	; (8102744 <HAL_ADC_Init+0x2e0>)
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	099b      	lsrs	r3, r3, #6
 81024da:	4a9b      	ldr	r2, [pc, #620]	; (8102748 <HAL_ADC_Init+0x2e4>)
 81024dc:	fba2 2303 	umull	r2, r3, r2, r3
 81024e0:	099b      	lsrs	r3, r3, #6
 81024e2:	3301      	adds	r3, #1
 81024e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81024e6:	e002      	b.n	81024ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81024e8:	68bb      	ldr	r3, [r7, #8]
 81024ea:	3b01      	subs	r3, #1
 81024ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81024ee:	68bb      	ldr	r3, [r7, #8]
 81024f0:	2b00      	cmp	r3, #0
 81024f2:	d1f9      	bne.n	81024e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	681b      	ldr	r3, [r3, #0]
 81024f8:	4618      	mov	r0, r3
 81024fa:	f7ff ff3d 	bl	8102378 <LL_ADC_IsInternalRegulatorEnabled>
 81024fe:	4603      	mov	r3, r0
 8102500:	2b00      	cmp	r3, #0
 8102502:	d10d      	bne.n	8102520 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102508:	f043 0210 	orr.w	r2, r3, #16
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102514:	f043 0201 	orr.w	r2, r3, #1
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 810251c:	2301      	movs	r3, #1
 810251e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4618      	mov	r0, r3
 8102526:	f7ff ff76 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 810252a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102530:	f003 0310 	and.w	r3, r3, #16
 8102534:	2b00      	cmp	r3, #0
 8102536:	f040 8128 	bne.w	810278a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810253a:	697b      	ldr	r3, [r7, #20]
 810253c:	2b00      	cmp	r3, #0
 810253e:	f040 8124 	bne.w	810278a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102546:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810254a:	f043 0202 	orr.w	r2, r3, #2
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4618      	mov	r0, r3
 8102558:	f7ff ff36 	bl	81023c8 <LL_ADC_IsEnabled>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d136      	bne.n	81025d0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4a79      	ldr	r2, [pc, #484]	; (810274c <HAL_ADC_Init+0x2e8>)
 8102568:	4293      	cmp	r3, r2
 810256a:	d004      	beq.n	8102576 <HAL_ADC_Init+0x112>
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	4a77      	ldr	r2, [pc, #476]	; (8102750 <HAL_ADC_Init+0x2ec>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d10e      	bne.n	8102594 <HAL_ADC_Init+0x130>
 8102576:	4875      	ldr	r0, [pc, #468]	; (810274c <HAL_ADC_Init+0x2e8>)
 8102578:	f7ff ff26 	bl	81023c8 <LL_ADC_IsEnabled>
 810257c:	4604      	mov	r4, r0
 810257e:	4874      	ldr	r0, [pc, #464]	; (8102750 <HAL_ADC_Init+0x2ec>)
 8102580:	f7ff ff22 	bl	81023c8 <LL_ADC_IsEnabled>
 8102584:	4603      	mov	r3, r0
 8102586:	4323      	orrs	r3, r4
 8102588:	2b00      	cmp	r3, #0
 810258a:	bf0c      	ite	eq
 810258c:	2301      	moveq	r3, #1
 810258e:	2300      	movne	r3, #0
 8102590:	b2db      	uxtb	r3, r3
 8102592:	e008      	b.n	81025a6 <HAL_ADC_Init+0x142>
 8102594:	486f      	ldr	r0, [pc, #444]	; (8102754 <HAL_ADC_Init+0x2f0>)
 8102596:	f7ff ff17 	bl	81023c8 <LL_ADC_IsEnabled>
 810259a:	4603      	mov	r3, r0
 810259c:	2b00      	cmp	r3, #0
 810259e:	bf0c      	ite	eq
 81025a0:	2301      	moveq	r3, #1
 81025a2:	2300      	movne	r3, #0
 81025a4:	b2db      	uxtb	r3, r3
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d012      	beq.n	81025d0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a67      	ldr	r2, [pc, #412]	; (810274c <HAL_ADC_Init+0x2e8>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d004      	beq.n	81025be <HAL_ADC_Init+0x15a>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a65      	ldr	r2, [pc, #404]	; (8102750 <HAL_ADC_Init+0x2ec>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d101      	bne.n	81025c2 <HAL_ADC_Init+0x15e>
 81025be:	4a66      	ldr	r2, [pc, #408]	; (8102758 <HAL_ADC_Init+0x2f4>)
 81025c0:	e000      	b.n	81025c4 <HAL_ADC_Init+0x160>
 81025c2:	4a66      	ldr	r2, [pc, #408]	; (810275c <HAL_ADC_Init+0x2f8>)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	685b      	ldr	r3, [r3, #4]
 81025c8:	4619      	mov	r1, r3
 81025ca:	4610      	mov	r0, r2
 81025cc:	f7ff fd88 	bl	81020e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81025d0:	f7ff fd7a 	bl	81020c8 <HAL_GetREVID>
 81025d4:	4603      	mov	r3, r0
 81025d6:	f241 0203 	movw	r2, #4099	; 0x1003
 81025da:	4293      	cmp	r3, r2
 81025dc:	d914      	bls.n	8102608 <HAL_ADC_Init+0x1a4>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	689b      	ldr	r3, [r3, #8]
 81025e2:	2b10      	cmp	r3, #16
 81025e4:	d110      	bne.n	8102608 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	7d5b      	ldrb	r3, [r3, #21]
 81025ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81025f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81025f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	7f1b      	ldrb	r3, [r3, #28]
 81025fc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81025fe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102600:	f043 030c 	orr.w	r3, r3, #12
 8102604:	61bb      	str	r3, [r7, #24]
 8102606:	e00d      	b.n	8102624 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	7d5b      	ldrb	r3, [r3, #21]
 810260c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102612:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102618:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	7f1b      	ldrb	r3, [r3, #28]
 810261e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102620:	4313      	orrs	r3, r2
 8102622:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	7f1b      	ldrb	r3, [r3, #28]
 8102628:	2b01      	cmp	r3, #1
 810262a:	d106      	bne.n	810263a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	6a1b      	ldr	r3, [r3, #32]
 8102630:	3b01      	subs	r3, #1
 8102632:	045b      	lsls	r3, r3, #17
 8102634:	69ba      	ldr	r2, [r7, #24]
 8102636:	4313      	orrs	r3, r2
 8102638:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810263e:	2b00      	cmp	r3, #0
 8102640:	d009      	beq.n	8102656 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102646:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810264e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102650:	69ba      	ldr	r2, [r7, #24]
 8102652:	4313      	orrs	r3, r2
 8102654:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	68da      	ldr	r2, [r3, #12]
 810265c:	4b40      	ldr	r3, [pc, #256]	; (8102760 <HAL_ADC_Init+0x2fc>)
 810265e:	4013      	ands	r3, r2
 8102660:	687a      	ldr	r2, [r7, #4]
 8102662:	6812      	ldr	r2, [r2, #0]
 8102664:	69b9      	ldr	r1, [r7, #24]
 8102666:	430b      	orrs	r3, r1
 8102668:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	4618      	mov	r0, r3
 8102670:	f7ff fed1 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 8102674:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	4618      	mov	r0, r3
 810267c:	f7ff fede 	bl	810243c <LL_ADC_INJ_IsConversionOngoing>
 8102680:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102682:	693b      	ldr	r3, [r7, #16]
 8102684:	2b00      	cmp	r3, #0
 8102686:	d14c      	bne.n	8102722 <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	2b00      	cmp	r3, #0
 810268c:	d149      	bne.n	8102722 <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	7d1b      	ldrb	r3, [r3, #20]
 8102692:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8102698:	4313      	orrs	r3, r2
 810269a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	68db      	ldr	r3, [r3, #12]
 81026a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81026a6:	f023 0303 	bic.w	r3, r3, #3
 81026aa:	687a      	ldr	r2, [r7, #4]
 81026ac:	6812      	ldr	r2, [r2, #0]
 81026ae:	69b9      	ldr	r1, [r7, #24]
 81026b0:	430b      	orrs	r3, r1
 81026b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81026ba:	2b01      	cmp	r3, #1
 81026bc:	d11b      	bne.n	81026f6 <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	691a      	ldr	r2, [r3, #16]
 81026ca:	4b26      	ldr	r3, [pc, #152]	; (8102764 <HAL_ADC_Init+0x300>)
 81026cc:	4013      	ands	r3, r2
 81026ce:	687a      	ldr	r2, [r7, #4]
 81026d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81026d2:	3a01      	subs	r2, #1
 81026d4:	0411      	lsls	r1, r2, #16
 81026d6:	687a      	ldr	r2, [r7, #4]
 81026d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81026da:	4311      	orrs	r1, r2
 81026dc:	687a      	ldr	r2, [r7, #4]
 81026de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81026e0:	4311      	orrs	r1, r2
 81026e2:	687a      	ldr	r2, [r7, #4]
 81026e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81026e6:	430a      	orrs	r2, r1
 81026e8:	431a      	orrs	r2, r3
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	f042 0201 	orr.w	r2, r2, #1
 81026f2:	611a      	str	r2, [r3, #16]
 81026f4:	e007      	b.n	8102706 <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	691a      	ldr	r2, [r3, #16]
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	f022 0201 	bic.w	r2, r2, #1
 8102704:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	691b      	ldr	r3, [r3, #16]
 810270c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	430a      	orrs	r2, r1
 810271a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810271c:	6878      	ldr	r0, [r7, #4]
 810271e:	f000 fce5 	bl	81030ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	68db      	ldr	r3, [r3, #12]
 8102726:	2b01      	cmp	r3, #1
 8102728:	d11e      	bne.n	8102768 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102730:	f023 010f 	bic.w	r1, r3, #15
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	699b      	ldr	r3, [r3, #24]
 8102738:	1e5a      	subs	r2, r3, #1
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	430a      	orrs	r2, r1
 8102740:	631a      	str	r2, [r3, #48]	; 0x30
 8102742:	e019      	b.n	8102778 <HAL_ADC_Init+0x314>
 8102744:	10000000 	.word	0x10000000
 8102748:	053e2d63 	.word	0x053e2d63
 810274c:	40022000 	.word	0x40022000
 8102750:	40022100 	.word	0x40022100
 8102754:	58026000 	.word	0x58026000
 8102758:	40022300 	.word	0x40022300
 810275c:	58026300 	.word	0x58026300
 8102760:	fff0c003 	.word	0xfff0c003
 8102764:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	681b      	ldr	r3, [r3, #0]
 810276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	f022 020f 	bic.w	r2, r2, #15
 8102776:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810277c:	f023 0303 	bic.w	r3, r3, #3
 8102780:	f043 0201 	orr.w	r2, r3, #1
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	655a      	str	r2, [r3, #84]	; 0x54
 8102788:	e007      	b.n	810279a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810278e:	f043 0210 	orr.w	r2, r3, #16
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102796:	2301      	movs	r3, #1
 8102798:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810279a:	7ffb      	ldrb	r3, [r7, #31]
}
 810279c:	4618      	mov	r0, r3
 810279e:	3724      	adds	r7, #36	; 0x24
 81027a0:	46bd      	mov	sp, r7
 81027a2:	bd90      	pop	{r4, r7, pc}

081027a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81027a4:	b580      	push	{r7, lr}
 81027a6:	b086      	sub	sp, #24
 81027a8:	af00      	add	r7, sp, #0
 81027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	4a5d      	ldr	r2, [pc, #372]	; (8102928 <HAL_ADC_Start+0x184>)
 81027b2:	4293      	cmp	r3, r2
 81027b4:	d004      	beq.n	81027c0 <HAL_ADC_Start+0x1c>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	4a5c      	ldr	r2, [pc, #368]	; (810292c <HAL_ADC_Start+0x188>)
 81027bc:	4293      	cmp	r3, r2
 81027be:	d101      	bne.n	81027c4 <HAL_ADC_Start+0x20>
 81027c0:	4b5b      	ldr	r3, [pc, #364]	; (8102930 <HAL_ADC_Start+0x18c>)
 81027c2:	e000      	b.n	81027c6 <HAL_ADC_Start+0x22>
 81027c4:	4b5b      	ldr	r3, [pc, #364]	; (8102934 <HAL_ADC_Start+0x190>)
 81027c6:	4618      	mov	r0, r3
 81027c8:	f7ff fd8e 	bl	81022e8 <LL_ADC_GetMultimode>
 81027cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	4618      	mov	r0, r3
 81027d4:	f7ff fe1f 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 81027d8:	4603      	mov	r3, r0
 81027da:	2b00      	cmp	r3, #0
 81027dc:	f040 809c 	bne.w	8102918 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81027e6:	2b01      	cmp	r3, #1
 81027e8:	d101      	bne.n	81027ee <HAL_ADC_Start+0x4a>
 81027ea:	2302      	movs	r3, #2
 81027ec:	e097      	b.n	810291e <HAL_ADC_Start+0x17a>
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	2201      	movs	r2, #1
 81027f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 81027f6:	6878      	ldr	r0, [r7, #4]
 81027f8:	f000 fbee 	bl	8102fd8 <ADC_Enable>
 81027fc:	4603      	mov	r3, r0
 81027fe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8102800:	7dfb      	ldrb	r3, [r7, #23]
 8102802:	2b00      	cmp	r3, #0
 8102804:	f040 8083 	bne.w	810290e <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810280c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102810:	f023 0301 	bic.w	r3, r3, #1
 8102814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a42      	ldr	r2, [pc, #264]	; (810292c <HAL_ADC_Start+0x188>)
 8102822:	4293      	cmp	r3, r2
 8102824:	d002      	beq.n	810282c <HAL_ADC_Start+0x88>
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	e000      	b.n	810282e <HAL_ADC_Start+0x8a>
 810282c:	4b3e      	ldr	r3, [pc, #248]	; (8102928 <HAL_ADC_Start+0x184>)
 810282e:	687a      	ldr	r2, [r7, #4]
 8102830:	6812      	ldr	r2, [r2, #0]
 8102832:	4293      	cmp	r3, r2
 8102834:	d002      	beq.n	810283c <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102836:	693b      	ldr	r3, [r7, #16]
 8102838:	2b00      	cmp	r3, #0
 810283a:	d105      	bne.n	8102848 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102840:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102854:	d106      	bne.n	8102864 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810285a:	f023 0206 	bic.w	r2, r3, #6
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	659a      	str	r2, [r3, #88]	; 0x58
 8102862:	e002      	b.n	810286a <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	2200      	movs	r2, #0
 8102868:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	221c      	movs	r2, #28
 8102870:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	2200      	movs	r2, #0
 8102876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	4a2b      	ldr	r2, [pc, #172]	; (810292c <HAL_ADC_Start+0x188>)
 8102880:	4293      	cmp	r3, r2
 8102882:	d002      	beq.n	810288a <HAL_ADC_Start+0xe6>
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	681b      	ldr	r3, [r3, #0]
 8102888:	e000      	b.n	810288c <HAL_ADC_Start+0xe8>
 810288a:	4b27      	ldr	r3, [pc, #156]	; (8102928 <HAL_ADC_Start+0x184>)
 810288c:	687a      	ldr	r2, [r7, #4]
 810288e:	6812      	ldr	r2, [r2, #0]
 8102890:	4293      	cmp	r3, r2
 8102892:	d008      	beq.n	81028a6 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102894:	693b      	ldr	r3, [r7, #16]
 8102896:	2b00      	cmp	r3, #0
 8102898:	d005      	beq.n	81028a6 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810289a:	693b      	ldr	r3, [r7, #16]
 810289c:	2b05      	cmp	r3, #5
 810289e:	d002      	beq.n	81028a6 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81028a0:	693b      	ldr	r3, [r7, #16]
 81028a2:	2b09      	cmp	r3, #9
 81028a4:	d114      	bne.n	81028d0 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	68db      	ldr	r3, [r3, #12]
 81028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d007      	beq.n	81028c4 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 81028bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	4618      	mov	r0, r3
 81028ca:	f7ff fd90 	bl	81023ee <LL_ADC_REG_StartConversion>
 81028ce:	e025      	b.n	810291c <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	4a12      	ldr	r2, [pc, #72]	; (810292c <HAL_ADC_Start+0x188>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d002      	beq.n	81028ec <HAL_ADC_Start+0x148>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	e000      	b.n	81028ee <HAL_ADC_Start+0x14a>
 81028ec:	4b0e      	ldr	r3, [pc, #56]	; (8102928 <HAL_ADC_Start+0x184>)
 81028ee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	68db      	ldr	r3, [r3, #12]
 81028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81028f8:	2b00      	cmp	r3, #0
 81028fa:	d00f      	beq.n	810291c <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	655a      	str	r2, [r3, #84]	; 0x54
 810290c:	e006      	b.n	810291c <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	2200      	movs	r2, #0
 8102912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8102916:	e001      	b.n	810291c <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102918:	2302      	movs	r3, #2
 810291a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 810291c:	7dfb      	ldrb	r3, [r7, #23]
}
 810291e:	4618      	mov	r0, r3
 8102920:	3718      	adds	r7, #24
 8102922:	46bd      	mov	sp, r7
 8102924:	bd80      	pop	{r7, pc}
 8102926:	bf00      	nop
 8102928:	40022000 	.word	0x40022000
 810292c:	40022100 	.word	0x40022100
 8102930:	40022300 	.word	0x40022300
 8102934:	58026300 	.word	0x58026300

08102938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102938:	b590      	push	{r4, r7, lr}
 810293a:	b0a1      	sub	sp, #132	; 0x84
 810293c:	af00      	add	r7, sp, #0
 810293e:	6078      	str	r0, [r7, #4]
 8102940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102942:	2300      	movs	r3, #0
 8102944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102948:	2300      	movs	r3, #0
 810294a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810294c:	683b      	ldr	r3, [r7, #0]
 810294e:	68db      	ldr	r3, [r3, #12]
 8102950:	4a9d      	ldr	r2, [pc, #628]	; (8102bc8 <HAL_ADC_ConfigChannel+0x290>)
 8102952:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810295a:	2b01      	cmp	r3, #1
 810295c:	d101      	bne.n	8102962 <HAL_ADC_ConfigChannel+0x2a>
 810295e:	2302      	movs	r3, #2
 8102960:	e321      	b.n	8102fa6 <HAL_ADC_ConfigChannel+0x66e>
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	2201      	movs	r2, #1
 8102966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	4618      	mov	r0, r3
 8102970:	f7ff fd51 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 8102974:	4603      	mov	r3, r0
 8102976:	2b00      	cmp	r3, #0
 8102978:	f040 8306 	bne.w	8102f88 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810297c:	683b      	ldr	r3, [r7, #0]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102984:	2b00      	cmp	r3, #0
 8102986:	d108      	bne.n	810299a <HAL_ADC_ConfigChannel+0x62>
 8102988:	683b      	ldr	r3, [r7, #0]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	0e9b      	lsrs	r3, r3, #26
 810298e:	f003 031f 	and.w	r3, r3, #31
 8102992:	2201      	movs	r2, #1
 8102994:	fa02 f303 	lsl.w	r3, r2, r3
 8102998:	e016      	b.n	81029c8 <HAL_ADC_ConfigChannel+0x90>
 810299a:	683b      	ldr	r3, [r7, #0]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81029a2:	fa93 f3a3 	rbit	r3, r3
 81029a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81029a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81029aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81029ae:	2b00      	cmp	r3, #0
 81029b0:	d101      	bne.n	81029b6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81029b2:	2320      	movs	r3, #32
 81029b4:	e003      	b.n	81029be <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81029b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81029b8:	fab3 f383 	clz	r3, r3
 81029bc:	b2db      	uxtb	r3, r3
 81029be:	f003 031f 	and.w	r3, r3, #31
 81029c2:	2201      	movs	r2, #1
 81029c4:	fa02 f303 	lsl.w	r3, r2, r3
 81029c8:	687a      	ldr	r2, [r7, #4]
 81029ca:	6812      	ldr	r2, [r2, #0]
 81029cc:	69d1      	ldr	r1, [r2, #28]
 81029ce:	687a      	ldr	r2, [r7, #4]
 81029d0:	6812      	ldr	r2, [r2, #0]
 81029d2:	430b      	orrs	r3, r1
 81029d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	6818      	ldr	r0, [r3, #0]
 81029da:	683b      	ldr	r3, [r7, #0]
 81029dc:	6859      	ldr	r1, [r3, #4]
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	461a      	mov	r2, r3
 81029e4:	f7ff fc04 	bl	81021f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4618      	mov	r0, r3
 81029ee:	f7ff fd12 	bl	8102416 <LL_ADC_REG_IsConversionOngoing>
 81029f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4618      	mov	r0, r3
 81029fa:	f7ff fd1f 	bl	810243c <LL_ADC_INJ_IsConversionOngoing>
 81029fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	f040 80b3 	bne.w	8102b6e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102a0a:	2b00      	cmp	r3, #0
 8102a0c:	f040 80af 	bne.w	8102b6e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	6818      	ldr	r0, [r3, #0]
 8102a14:	683b      	ldr	r3, [r7, #0]
 8102a16:	6819      	ldr	r1, [r3, #0]
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	689b      	ldr	r3, [r3, #8]
 8102a1c:	461a      	mov	r2, r3
 8102a1e:	f7ff fc13 	bl	8102248 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102a22:	4b6a      	ldr	r3, [pc, #424]	; (8102bcc <HAL_ADC_ConfigChannel+0x294>)
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a2e:	d10b      	bne.n	8102a48 <HAL_ADC_ConfigChannel+0x110>
 8102a30:	683b      	ldr	r3, [r7, #0]
 8102a32:	695a      	ldr	r2, [r3, #20]
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	68db      	ldr	r3, [r3, #12]
 8102a3a:	089b      	lsrs	r3, r3, #2
 8102a3c:	f003 0307 	and.w	r3, r3, #7
 8102a40:	005b      	lsls	r3, r3, #1
 8102a42:	fa02 f303 	lsl.w	r3, r2, r3
 8102a46:	e01d      	b.n	8102a84 <HAL_ADC_ConfigChannel+0x14c>
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	68db      	ldr	r3, [r3, #12]
 8102a4e:	f003 0310 	and.w	r3, r3, #16
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d10b      	bne.n	8102a6e <HAL_ADC_ConfigChannel+0x136>
 8102a56:	683b      	ldr	r3, [r7, #0]
 8102a58:	695a      	ldr	r2, [r3, #20]
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	68db      	ldr	r3, [r3, #12]
 8102a60:	089b      	lsrs	r3, r3, #2
 8102a62:	f003 0307 	and.w	r3, r3, #7
 8102a66:	005b      	lsls	r3, r3, #1
 8102a68:	fa02 f303 	lsl.w	r3, r2, r3
 8102a6c:	e00a      	b.n	8102a84 <HAL_ADC_ConfigChannel+0x14c>
 8102a6e:	683b      	ldr	r3, [r7, #0]
 8102a70:	695a      	ldr	r2, [r3, #20]
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	68db      	ldr	r3, [r3, #12]
 8102a78:	089b      	lsrs	r3, r3, #2
 8102a7a:	f003 0304 	and.w	r3, r3, #4
 8102a7e:	005b      	lsls	r3, r3, #1
 8102a80:	fa02 f303 	lsl.w	r3, r2, r3
 8102a84:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102a86:	683b      	ldr	r3, [r7, #0]
 8102a88:	691b      	ldr	r3, [r3, #16]
 8102a8a:	2b04      	cmp	r3, #4
 8102a8c:	d027      	beq.n	8102ade <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	6818      	ldr	r0, [r3, #0]
 8102a92:	683b      	ldr	r3, [r7, #0]
 8102a94:	6919      	ldr	r1, [r3, #16]
 8102a96:	683b      	ldr	r3, [r7, #0]
 8102a98:	681a      	ldr	r2, [r3, #0]
 8102a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102a9c:	f7ff fb54 	bl	8102148 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	6818      	ldr	r0, [r3, #0]
 8102aa4:	683b      	ldr	r3, [r7, #0]
 8102aa6:	6919      	ldr	r1, [r3, #16]
 8102aa8:	683b      	ldr	r3, [r7, #0]
 8102aaa:	7e5b      	ldrb	r3, [r3, #25]
 8102aac:	2b01      	cmp	r3, #1
 8102aae:	d102      	bne.n	8102ab6 <HAL_ADC_ConfigChannel+0x17e>
 8102ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102ab4:	e000      	b.n	8102ab8 <HAL_ADC_ConfigChannel+0x180>
 8102ab6:	2300      	movs	r3, #0
 8102ab8:	461a      	mov	r2, r3
 8102aba:	f7ff fb7e 	bl	81021ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	6818      	ldr	r0, [r3, #0]
 8102ac2:	683b      	ldr	r3, [r7, #0]
 8102ac4:	6919      	ldr	r1, [r3, #16]
 8102ac6:	683b      	ldr	r3, [r7, #0]
 8102ac8:	7e1b      	ldrb	r3, [r3, #24]
 8102aca:	2b01      	cmp	r3, #1
 8102acc:	d102      	bne.n	8102ad4 <HAL_ADC_ConfigChannel+0x19c>
 8102ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102ad2:	e000      	b.n	8102ad6 <HAL_ADC_ConfigChannel+0x19e>
 8102ad4:	2300      	movs	r3, #0
 8102ad6:	461a      	mov	r2, r3
 8102ad8:	f7ff fb56 	bl	8102188 <LL_ADC_SetDataRightShift>
 8102adc:	e047      	b.n	8102b6e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	681b      	ldr	r3, [r3, #0]
 8102ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102ae8:	683b      	ldr	r3, [r7, #0]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	069b      	lsls	r3, r3, #26
 8102aee:	429a      	cmp	r2, r3
 8102af0:	d107      	bne.n	8102b02 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b00:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b0c:	683b      	ldr	r3, [r7, #0]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	069b      	lsls	r3, r3, #26
 8102b12:	429a      	cmp	r2, r3
 8102b14:	d107      	bne.n	8102b26 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b24:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b30:	683b      	ldr	r3, [r7, #0]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	069b      	lsls	r3, r3, #26
 8102b36:	429a      	cmp	r2, r3
 8102b38:	d107      	bne.n	8102b4a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b48:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b54:	683b      	ldr	r3, [r7, #0]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	069b      	lsls	r3, r3, #26
 8102b5a:	429a      	cmp	r2, r3
 8102b5c:	d107      	bne.n	8102b6e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102b6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	4618      	mov	r0, r3
 8102b74:	f7ff fc28 	bl	81023c8 <LL_ADC_IsEnabled>
 8102b78:	4603      	mov	r3, r0
 8102b7a:	2b00      	cmp	r3, #0
 8102b7c:	f040 820d 	bne.w	8102f9a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	6818      	ldr	r0, [r3, #0]
 8102b84:	683b      	ldr	r3, [r7, #0]
 8102b86:	6819      	ldr	r1, [r3, #0]
 8102b88:	683b      	ldr	r3, [r7, #0]
 8102b8a:	68db      	ldr	r3, [r3, #12]
 8102b8c:	461a      	mov	r2, r3
 8102b8e:	f7ff fb87 	bl	81022a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102b92:	683b      	ldr	r3, [r7, #0]
 8102b94:	68db      	ldr	r3, [r3, #12]
 8102b96:	4a0c      	ldr	r2, [pc, #48]	; (8102bc8 <HAL_ADC_ConfigChannel+0x290>)
 8102b98:	4293      	cmp	r3, r2
 8102b9a:	f040 8133 	bne.w	8102e04 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ba2:	683b      	ldr	r3, [r7, #0]
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d110      	bne.n	8102bd0 <HAL_ADC_ConfigChannel+0x298>
 8102bae:	683b      	ldr	r3, [r7, #0]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	0e9b      	lsrs	r3, r3, #26
 8102bb4:	3301      	adds	r3, #1
 8102bb6:	f003 031f 	and.w	r3, r3, #31
 8102bba:	2b09      	cmp	r3, #9
 8102bbc:	bf94      	ite	ls
 8102bbe:	2301      	movls	r3, #1
 8102bc0:	2300      	movhi	r3, #0
 8102bc2:	b2db      	uxtb	r3, r3
 8102bc4:	e01e      	b.n	8102c04 <HAL_ADC_ConfigChannel+0x2cc>
 8102bc6:	bf00      	nop
 8102bc8:	47ff0000 	.word	0x47ff0000
 8102bcc:	5c001000 	.word	0x5c001000
 8102bd0:	683b      	ldr	r3, [r7, #0]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102bd8:	fa93 f3a3 	rbit	r3, r3
 8102bdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102be4:	2b00      	cmp	r3, #0
 8102be6:	d101      	bne.n	8102bec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102be8:	2320      	movs	r3, #32
 8102bea:	e003      	b.n	8102bf4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102bee:	fab3 f383 	clz	r3, r3
 8102bf2:	b2db      	uxtb	r3, r3
 8102bf4:	3301      	adds	r3, #1
 8102bf6:	f003 031f 	and.w	r3, r3, #31
 8102bfa:	2b09      	cmp	r3, #9
 8102bfc:	bf94      	ite	ls
 8102bfe:	2301      	movls	r3, #1
 8102c00:	2300      	movhi	r3, #0
 8102c02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d079      	beq.n	8102cfc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c08:	683b      	ldr	r3, [r7, #0]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c10:	2b00      	cmp	r3, #0
 8102c12:	d107      	bne.n	8102c24 <HAL_ADC_ConfigChannel+0x2ec>
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	0e9b      	lsrs	r3, r3, #26
 8102c1a:	3301      	adds	r3, #1
 8102c1c:	069b      	lsls	r3, r3, #26
 8102c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c22:	e015      	b.n	8102c50 <HAL_ADC_ConfigChannel+0x318>
 8102c24:	683b      	ldr	r3, [r7, #0]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102c2c:	fa93 f3a3 	rbit	r3, r3
 8102c30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102c34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	d101      	bne.n	8102c40 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102c3c:	2320      	movs	r3, #32
 8102c3e:	e003      	b.n	8102c48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c42:	fab3 f383 	clz	r3, r3
 8102c46:	b2db      	uxtb	r3, r3
 8102c48:	3301      	adds	r3, #1
 8102c4a:	069b      	lsls	r3, r3, #26
 8102c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c50:	683b      	ldr	r3, [r7, #0]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c58:	2b00      	cmp	r3, #0
 8102c5a:	d109      	bne.n	8102c70 <HAL_ADC_ConfigChannel+0x338>
 8102c5c:	683b      	ldr	r3, [r7, #0]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	0e9b      	lsrs	r3, r3, #26
 8102c62:	3301      	adds	r3, #1
 8102c64:	f003 031f 	and.w	r3, r3, #31
 8102c68:	2101      	movs	r1, #1
 8102c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8102c6e:	e017      	b.n	8102ca0 <HAL_ADC_ConfigChannel+0x368>
 8102c70:	683b      	ldr	r3, [r7, #0]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102c78:	fa93 f3a3 	rbit	r3, r3
 8102c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102c80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d101      	bne.n	8102c8c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102c88:	2320      	movs	r3, #32
 8102c8a:	e003      	b.n	8102c94 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c8e:	fab3 f383 	clz	r3, r3
 8102c92:	b2db      	uxtb	r3, r3
 8102c94:	3301      	adds	r3, #1
 8102c96:	f003 031f 	and.w	r3, r3, #31
 8102c9a:	2101      	movs	r1, #1
 8102c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8102ca0:	ea42 0103 	orr.w	r1, r2, r3
 8102ca4:	683b      	ldr	r3, [r7, #0]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cac:	2b00      	cmp	r3, #0
 8102cae:	d10a      	bne.n	8102cc6 <HAL_ADC_ConfigChannel+0x38e>
 8102cb0:	683b      	ldr	r3, [r7, #0]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	0e9b      	lsrs	r3, r3, #26
 8102cb6:	3301      	adds	r3, #1
 8102cb8:	f003 021f 	and.w	r2, r3, #31
 8102cbc:	4613      	mov	r3, r2
 8102cbe:	005b      	lsls	r3, r3, #1
 8102cc0:	4413      	add	r3, r2
 8102cc2:	051b      	lsls	r3, r3, #20
 8102cc4:	e018      	b.n	8102cf8 <HAL_ADC_ConfigChannel+0x3c0>
 8102cc6:	683b      	ldr	r3, [r7, #0]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102cce:	fa93 f3a3 	rbit	r3, r3
 8102cd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d101      	bne.n	8102ce2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102cde:	2320      	movs	r3, #32
 8102ce0:	e003      	b.n	8102cea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102ce4:	fab3 f383 	clz	r3, r3
 8102ce8:	b2db      	uxtb	r3, r3
 8102cea:	3301      	adds	r3, #1
 8102cec:	f003 021f 	and.w	r2, r3, #31
 8102cf0:	4613      	mov	r3, r2
 8102cf2:	005b      	lsls	r3, r3, #1
 8102cf4:	4413      	add	r3, r2
 8102cf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102cf8:	430b      	orrs	r3, r1
 8102cfa:	e07e      	b.n	8102dfa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102cfc:	683b      	ldr	r3, [r7, #0]
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d107      	bne.n	8102d18 <HAL_ADC_ConfigChannel+0x3e0>
 8102d08:	683b      	ldr	r3, [r7, #0]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	0e9b      	lsrs	r3, r3, #26
 8102d0e:	3301      	adds	r3, #1
 8102d10:	069b      	lsls	r3, r3, #26
 8102d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d16:	e015      	b.n	8102d44 <HAL_ADC_ConfigChannel+0x40c>
 8102d18:	683b      	ldr	r3, [r7, #0]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d20:	fa93 f3a3 	rbit	r3, r3
 8102d24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d2c:	2b00      	cmp	r3, #0
 8102d2e:	d101      	bne.n	8102d34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102d30:	2320      	movs	r3, #32
 8102d32:	e003      	b.n	8102d3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d36:	fab3 f383 	clz	r3, r3
 8102d3a:	b2db      	uxtb	r3, r3
 8102d3c:	3301      	adds	r3, #1
 8102d3e:	069b      	lsls	r3, r3, #26
 8102d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d44:	683b      	ldr	r3, [r7, #0]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d109      	bne.n	8102d64 <HAL_ADC_ConfigChannel+0x42c>
 8102d50:	683b      	ldr	r3, [r7, #0]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	0e9b      	lsrs	r3, r3, #26
 8102d56:	3301      	adds	r3, #1
 8102d58:	f003 031f 	and.w	r3, r3, #31
 8102d5c:	2101      	movs	r1, #1
 8102d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8102d62:	e017      	b.n	8102d94 <HAL_ADC_ConfigChannel+0x45c>
 8102d64:	683b      	ldr	r3, [r7, #0]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d6a:	69fb      	ldr	r3, [r7, #28]
 8102d6c:	fa93 f3a3 	rbit	r3, r3
 8102d70:	61bb      	str	r3, [r7, #24]
  return result;
 8102d72:	69bb      	ldr	r3, [r7, #24]
 8102d74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102d76:	6a3b      	ldr	r3, [r7, #32]
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d101      	bne.n	8102d80 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102d7c:	2320      	movs	r3, #32
 8102d7e:	e003      	b.n	8102d88 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102d80:	6a3b      	ldr	r3, [r7, #32]
 8102d82:	fab3 f383 	clz	r3, r3
 8102d86:	b2db      	uxtb	r3, r3
 8102d88:	3301      	adds	r3, #1
 8102d8a:	f003 031f 	and.w	r3, r3, #31
 8102d8e:	2101      	movs	r1, #1
 8102d90:	fa01 f303 	lsl.w	r3, r1, r3
 8102d94:	ea42 0103 	orr.w	r1, r2, r3
 8102d98:	683b      	ldr	r3, [r7, #0]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102da0:	2b00      	cmp	r3, #0
 8102da2:	d10d      	bne.n	8102dc0 <HAL_ADC_ConfigChannel+0x488>
 8102da4:	683b      	ldr	r3, [r7, #0]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	0e9b      	lsrs	r3, r3, #26
 8102daa:	3301      	adds	r3, #1
 8102dac:	f003 021f 	and.w	r2, r3, #31
 8102db0:	4613      	mov	r3, r2
 8102db2:	005b      	lsls	r3, r3, #1
 8102db4:	4413      	add	r3, r2
 8102db6:	3b1e      	subs	r3, #30
 8102db8:	051b      	lsls	r3, r3, #20
 8102dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102dbe:	e01b      	b.n	8102df8 <HAL_ADC_ConfigChannel+0x4c0>
 8102dc0:	683b      	ldr	r3, [r7, #0]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dc6:	693b      	ldr	r3, [r7, #16]
 8102dc8:	fa93 f3a3 	rbit	r3, r3
 8102dcc:	60fb      	str	r3, [r7, #12]
  return result;
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102dd2:	697b      	ldr	r3, [r7, #20]
 8102dd4:	2b00      	cmp	r3, #0
 8102dd6:	d101      	bne.n	8102ddc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102dd8:	2320      	movs	r3, #32
 8102dda:	e003      	b.n	8102de4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102ddc:	697b      	ldr	r3, [r7, #20]
 8102dde:	fab3 f383 	clz	r3, r3
 8102de2:	b2db      	uxtb	r3, r3
 8102de4:	3301      	adds	r3, #1
 8102de6:	f003 021f 	and.w	r2, r3, #31
 8102dea:	4613      	mov	r3, r2
 8102dec:	005b      	lsls	r3, r3, #1
 8102dee:	4413      	add	r3, r2
 8102df0:	3b1e      	subs	r3, #30
 8102df2:	051b      	lsls	r3, r3, #20
 8102df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102df8:	430b      	orrs	r3, r1
 8102dfa:	683a      	ldr	r2, [r7, #0]
 8102dfc:	6892      	ldr	r2, [r2, #8]
 8102dfe:	4619      	mov	r1, r3
 8102e00:	f7ff fa22 	bl	8102248 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102e04:	683b      	ldr	r3, [r7, #0]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	f280 80c6 	bge.w	8102f9a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4a67      	ldr	r2, [pc, #412]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102e14:	4293      	cmp	r3, r2
 8102e16:	d004      	beq.n	8102e22 <HAL_ADC_ConfigChannel+0x4ea>
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a65      	ldr	r2, [pc, #404]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d101      	bne.n	8102e26 <HAL_ADC_ConfigChannel+0x4ee>
 8102e22:	4b65      	ldr	r3, [pc, #404]	; (8102fb8 <HAL_ADC_ConfigChannel+0x680>)
 8102e24:	e000      	b.n	8102e28 <HAL_ADC_ConfigChannel+0x4f0>
 8102e26:	4b65      	ldr	r3, [pc, #404]	; (8102fbc <HAL_ADC_ConfigChannel+0x684>)
 8102e28:	4618      	mov	r0, r3
 8102e2a:	f7ff f97f 	bl	810212c <LL_ADC_GetCommonPathInternalCh>
 8102e2e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a5e      	ldr	r2, [pc, #376]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d004      	beq.n	8102e44 <HAL_ADC_ConfigChannel+0x50c>
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a5d      	ldr	r2, [pc, #372]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d10e      	bne.n	8102e62 <HAL_ADC_ConfigChannel+0x52a>
 8102e44:	485a      	ldr	r0, [pc, #360]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102e46:	f7ff fabf 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e4a:	4604      	mov	r4, r0
 8102e4c:	4859      	ldr	r0, [pc, #356]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102e4e:	f7ff fabb 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e52:	4603      	mov	r3, r0
 8102e54:	4323      	orrs	r3, r4
 8102e56:	2b00      	cmp	r3, #0
 8102e58:	bf0c      	ite	eq
 8102e5a:	2301      	moveq	r3, #1
 8102e5c:	2300      	movne	r3, #0
 8102e5e:	b2db      	uxtb	r3, r3
 8102e60:	e008      	b.n	8102e74 <HAL_ADC_ConfigChannel+0x53c>
 8102e62:	4857      	ldr	r0, [pc, #348]	; (8102fc0 <HAL_ADC_ConfigChannel+0x688>)
 8102e64:	f7ff fab0 	bl	81023c8 <LL_ADC_IsEnabled>
 8102e68:	4603      	mov	r3, r0
 8102e6a:	2b00      	cmp	r3, #0
 8102e6c:	bf0c      	ite	eq
 8102e6e:	2301      	moveq	r3, #1
 8102e70:	2300      	movne	r3, #0
 8102e72:	b2db      	uxtb	r3, r3
 8102e74:	2b00      	cmp	r3, #0
 8102e76:	d07d      	beq.n	8102f74 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102e78:	683b      	ldr	r3, [r7, #0]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a51      	ldr	r2, [pc, #324]	; (8102fc4 <HAL_ADC_ConfigChannel+0x68c>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d130      	bne.n	8102ee4 <HAL_ADC_ConfigChannel+0x5ac>
 8102e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d12b      	bne.n	8102ee4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a4b      	ldr	r2, [pc, #300]	; (8102fc0 <HAL_ADC_ConfigChannel+0x688>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	f040 8081 	bne.w	8102f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a44      	ldr	r2, [pc, #272]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d004      	beq.n	8102eac <HAL_ADC_ConfigChannel+0x574>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a43      	ldr	r2, [pc, #268]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d101      	bne.n	8102eb0 <HAL_ADC_ConfigChannel+0x578>
 8102eac:	4a42      	ldr	r2, [pc, #264]	; (8102fb8 <HAL_ADC_ConfigChannel+0x680>)
 8102eae:	e000      	b.n	8102eb2 <HAL_ADC_ConfigChannel+0x57a>
 8102eb0:	4a42      	ldr	r2, [pc, #264]	; (8102fbc <HAL_ADC_ConfigChannel+0x684>)
 8102eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102eb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102eb8:	4619      	mov	r1, r3
 8102eba:	4610      	mov	r0, r2
 8102ebc:	f7ff f923 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102ec0:	4b41      	ldr	r3, [pc, #260]	; (8102fc8 <HAL_ADC_ConfigChannel+0x690>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	099b      	lsrs	r3, r3, #6
 8102ec6:	4a41      	ldr	r2, [pc, #260]	; (8102fcc <HAL_ADC_ConfigChannel+0x694>)
 8102ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8102ecc:	099b      	lsrs	r3, r3, #6
 8102ece:	3301      	adds	r3, #1
 8102ed0:	005b      	lsls	r3, r3, #1
 8102ed2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102ed4:	e002      	b.n	8102edc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102ed6:	68bb      	ldr	r3, [r7, #8]
 8102ed8:	3b01      	subs	r3, #1
 8102eda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102edc:	68bb      	ldr	r3, [r7, #8]
 8102ede:	2b00      	cmp	r3, #0
 8102ee0:	d1f9      	bne.n	8102ed6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102ee2:	e05a      	b.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102ee4:	683b      	ldr	r3, [r7, #0]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	4a39      	ldr	r2, [pc, #228]	; (8102fd0 <HAL_ADC_ConfigChannel+0x698>)
 8102eea:	4293      	cmp	r3, r2
 8102eec:	d11e      	bne.n	8102f2c <HAL_ADC_ConfigChannel+0x5f4>
 8102eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102ef4:	2b00      	cmp	r3, #0
 8102ef6:	d119      	bne.n	8102f2c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	4a30      	ldr	r2, [pc, #192]	; (8102fc0 <HAL_ADC_ConfigChannel+0x688>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d14b      	bne.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	4a2a      	ldr	r2, [pc, #168]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102f08:	4293      	cmp	r3, r2
 8102f0a:	d004      	beq.n	8102f16 <HAL_ADC_ConfigChannel+0x5de>
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	4a28      	ldr	r2, [pc, #160]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102f12:	4293      	cmp	r3, r2
 8102f14:	d101      	bne.n	8102f1a <HAL_ADC_ConfigChannel+0x5e2>
 8102f16:	4a28      	ldr	r2, [pc, #160]	; (8102fb8 <HAL_ADC_ConfigChannel+0x680>)
 8102f18:	e000      	b.n	8102f1c <HAL_ADC_ConfigChannel+0x5e4>
 8102f1a:	4a28      	ldr	r2, [pc, #160]	; (8102fbc <HAL_ADC_ConfigChannel+0x684>)
 8102f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102f22:	4619      	mov	r1, r3
 8102f24:	4610      	mov	r0, r2
 8102f26:	f7ff f8ee 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f2a:	e036      	b.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102f2c:	683b      	ldr	r3, [r7, #0]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4a28      	ldr	r2, [pc, #160]	; (8102fd4 <HAL_ADC_ConfigChannel+0x69c>)
 8102f32:	4293      	cmp	r3, r2
 8102f34:	d131      	bne.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
 8102f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	d12c      	bne.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4a1e      	ldr	r2, [pc, #120]	; (8102fc0 <HAL_ADC_ConfigChannel+0x688>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d127      	bne.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4a18      	ldr	r2, [pc, #96]	; (8102fb0 <HAL_ADC_ConfigChannel+0x678>)
 8102f50:	4293      	cmp	r3, r2
 8102f52:	d004      	beq.n	8102f5e <HAL_ADC_ConfigChannel+0x626>
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a16      	ldr	r2, [pc, #88]	; (8102fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d101      	bne.n	8102f62 <HAL_ADC_ConfigChannel+0x62a>
 8102f5e:	4a16      	ldr	r2, [pc, #88]	; (8102fb8 <HAL_ADC_ConfigChannel+0x680>)
 8102f60:	e000      	b.n	8102f64 <HAL_ADC_ConfigChannel+0x62c>
 8102f62:	4a16      	ldr	r2, [pc, #88]	; (8102fbc <HAL_ADC_ConfigChannel+0x684>)
 8102f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102f6a:	4619      	mov	r1, r3
 8102f6c:	4610      	mov	r0, r2
 8102f6e:	f7ff f8ca 	bl	8102106 <LL_ADC_SetCommonPathInternalCh>
 8102f72:	e012      	b.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f78:	f043 0220 	orr.w	r2, r3, #32
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102f80:	2301      	movs	r3, #1
 8102f82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102f86:	e008      	b.n	8102f9a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f8c:	f043 0220 	orr.w	r2, r3, #32
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102f94:	2301      	movs	r3, #1
 8102f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	2200      	movs	r2, #0
 8102f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102fa6:	4618      	mov	r0, r3
 8102fa8:	3784      	adds	r7, #132	; 0x84
 8102faa:	46bd      	mov	sp, r7
 8102fac:	bd90      	pop	{r4, r7, pc}
 8102fae:	bf00      	nop
 8102fb0:	40022000 	.word	0x40022000
 8102fb4:	40022100 	.word	0x40022100
 8102fb8:	40022300 	.word	0x40022300
 8102fbc:	58026300 	.word	0x58026300
 8102fc0:	58026000 	.word	0x58026000
 8102fc4:	cb840000 	.word	0xcb840000
 8102fc8:	10000000 	.word	0x10000000
 8102fcc:	053e2d63 	.word	0x053e2d63
 8102fd0:	c7520000 	.word	0xc7520000
 8102fd4:	cfb80000 	.word	0xcfb80000

08102fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102fd8:	b580      	push	{r7, lr}
 8102fda:	b084      	sub	sp, #16
 8102fdc:	af00      	add	r7, sp, #0
 8102fde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	4618      	mov	r0, r3
 8102fe6:	f7ff f9ef 	bl	81023c8 <LL_ADC_IsEnabled>
 8102fea:	4603      	mov	r3, r0
 8102fec:	2b00      	cmp	r3, #0
 8102fee:	d16e      	bne.n	81030ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	689a      	ldr	r2, [r3, #8]
 8102ff6:	4b38      	ldr	r3, [pc, #224]	; (81030d8 <ADC_Enable+0x100>)
 8102ff8:	4013      	ands	r3, r2
 8102ffa:	2b00      	cmp	r3, #0
 8102ffc:	d00d      	beq.n	810301a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103002:	f043 0210 	orr.w	r2, r3, #16
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810300e:	f043 0201 	orr.w	r2, r3, #1
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8103016:	2301      	movs	r3, #1
 8103018:	e05a      	b.n	81030d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	4618      	mov	r0, r3
 8103020:	f7ff f9be 	bl	81023a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103024:	f7ff f820 	bl	8102068 <HAL_GetTick>
 8103028:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a2b      	ldr	r2, [pc, #172]	; (81030dc <ADC_Enable+0x104>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d004      	beq.n	810303e <ADC_Enable+0x66>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a29      	ldr	r2, [pc, #164]	; (81030e0 <ADC_Enable+0x108>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d101      	bne.n	8103042 <ADC_Enable+0x6a>
 810303e:	4b29      	ldr	r3, [pc, #164]	; (81030e4 <ADC_Enable+0x10c>)
 8103040:	e000      	b.n	8103044 <ADC_Enable+0x6c>
 8103042:	4b29      	ldr	r3, [pc, #164]	; (81030e8 <ADC_Enable+0x110>)
 8103044:	4618      	mov	r0, r3
 8103046:	f7ff f94f 	bl	81022e8 <LL_ADC_GetMultimode>
 810304a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	4a23      	ldr	r2, [pc, #140]	; (81030e0 <ADC_Enable+0x108>)
 8103052:	4293      	cmp	r3, r2
 8103054:	d002      	beq.n	810305c <ADC_Enable+0x84>
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	681b      	ldr	r3, [r3, #0]
 810305a:	e000      	b.n	810305e <ADC_Enable+0x86>
 810305c:	4b1f      	ldr	r3, [pc, #124]	; (81030dc <ADC_Enable+0x104>)
 810305e:	687a      	ldr	r2, [r7, #4]
 8103060:	6812      	ldr	r2, [r2, #0]
 8103062:	4293      	cmp	r3, r2
 8103064:	d02c      	beq.n	81030c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103066:	68bb      	ldr	r3, [r7, #8]
 8103068:	2b00      	cmp	r3, #0
 810306a:	d130      	bne.n	81030ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810306c:	e028      	b.n	81030c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	4618      	mov	r0, r3
 8103074:	f7ff f9a8 	bl	81023c8 <LL_ADC_IsEnabled>
 8103078:	4603      	mov	r3, r0
 810307a:	2b00      	cmp	r3, #0
 810307c:	d104      	bne.n	8103088 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	4618      	mov	r0, r3
 8103084:	f7ff f98c 	bl	81023a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8103088:	f7fe ffee 	bl	8102068 <HAL_GetTick>
 810308c:	4602      	mov	r2, r0
 810308e:	68fb      	ldr	r3, [r7, #12]
 8103090:	1ad3      	subs	r3, r2, r3
 8103092:	2b02      	cmp	r3, #2
 8103094:	d914      	bls.n	81030c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	f003 0301 	and.w	r3, r3, #1
 81030a0:	2b01      	cmp	r3, #1
 81030a2:	d00d      	beq.n	81030c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030a8:	f043 0210 	orr.w	r2, r3, #16
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030b4:	f043 0201 	orr.w	r2, r3, #1
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 81030bc:	2301      	movs	r3, #1
 81030be:	e007      	b.n	81030d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	f003 0301 	and.w	r3, r3, #1
 81030ca:	2b01      	cmp	r3, #1
 81030cc:	d1cf      	bne.n	810306e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81030ce:	2300      	movs	r3, #0
}
 81030d0:	4618      	mov	r0, r3
 81030d2:	3710      	adds	r7, #16
 81030d4:	46bd      	mov	sp, r7
 81030d6:	bd80      	pop	{r7, pc}
 81030d8:	8000003f 	.word	0x8000003f
 81030dc:	40022000 	.word	0x40022000
 81030e0:	40022100 	.word	0x40022100
 81030e4:	40022300 	.word	0x40022300
 81030e8:	58026300 	.word	0x58026300

081030ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81030ec:	b580      	push	{r7, lr}
 81030ee:	b084      	sub	sp, #16
 81030f0:	af00      	add	r7, sp, #0
 81030f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a79      	ldr	r2, [pc, #484]	; (81032e0 <ADC_ConfigureBoostMode+0x1f4>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d004      	beq.n	8103108 <ADC_ConfigureBoostMode+0x1c>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a78      	ldr	r2, [pc, #480]	; (81032e4 <ADC_ConfigureBoostMode+0x1f8>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d109      	bne.n	810311c <ADC_ConfigureBoostMode+0x30>
 8103108:	4b77      	ldr	r3, [pc, #476]	; (81032e8 <ADC_ConfigureBoostMode+0x1fc>)
 810310a:	689b      	ldr	r3, [r3, #8]
 810310c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103110:	2b00      	cmp	r3, #0
 8103112:	bf14      	ite	ne
 8103114:	2301      	movne	r3, #1
 8103116:	2300      	moveq	r3, #0
 8103118:	b2db      	uxtb	r3, r3
 810311a:	e008      	b.n	810312e <ADC_ConfigureBoostMode+0x42>
 810311c:	4b73      	ldr	r3, [pc, #460]	; (81032ec <ADC_ConfigureBoostMode+0x200>)
 810311e:	689b      	ldr	r3, [r3, #8]
 8103120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103124:	2b00      	cmp	r3, #0
 8103126:	bf14      	ite	ne
 8103128:	2301      	movne	r3, #1
 810312a:	2300      	moveq	r3, #0
 810312c:	b2db      	uxtb	r3, r3
 810312e:	2b00      	cmp	r3, #0
 8103130:	d01c      	beq.n	810316c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103132:	f001 fd1d 	bl	8104b70 <HAL_RCC_GetHCLKFreq>
 8103136:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	685b      	ldr	r3, [r3, #4]
 810313c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103140:	d010      	beq.n	8103164 <ADC_ConfigureBoostMode+0x78>
 8103142:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103146:	d871      	bhi.n	810322c <ADC_ConfigureBoostMode+0x140>
 8103148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810314c:	d002      	beq.n	8103154 <ADC_ConfigureBoostMode+0x68>
 810314e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103152:	d16b      	bne.n	810322c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	685b      	ldr	r3, [r3, #4]
 8103158:	0c1b      	lsrs	r3, r3, #16
 810315a:	68fa      	ldr	r2, [r7, #12]
 810315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103160:	60fb      	str	r3, [r7, #12]
        break;
 8103162:	e066      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103164:	68fb      	ldr	r3, [r7, #12]
 8103166:	089b      	lsrs	r3, r3, #2
 8103168:	60fb      	str	r3, [r7, #12]
        break;
 810316a:	e062      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810316c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103170:	f002 fc70 	bl	8105a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8103174:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	685b      	ldr	r3, [r3, #4]
 810317a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810317e:	d051      	beq.n	8103224 <ADC_ConfigureBoostMode+0x138>
 8103180:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103184:	d854      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 8103186:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810318a:	d047      	beq.n	810321c <ADC_ConfigureBoostMode+0x130>
 810318c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103190:	d84e      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 8103192:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103196:	d03d      	beq.n	8103214 <ADC_ConfigureBoostMode+0x128>
 8103198:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810319c:	d848      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 810319e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031a2:	d033      	beq.n	810320c <ADC_ConfigureBoostMode+0x120>
 81031a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031a8:	d842      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81031ae:	d029      	beq.n	8103204 <ADC_ConfigureBoostMode+0x118>
 81031b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81031b4:	d83c      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031ba:	d01a      	beq.n	81031f2 <ADC_ConfigureBoostMode+0x106>
 81031bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031c0:	d836      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031c6:	d014      	beq.n	81031f2 <ADC_ConfigureBoostMode+0x106>
 81031c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031cc:	d830      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031d2:	d00e      	beq.n	81031f2 <ADC_ConfigureBoostMode+0x106>
 81031d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031d8:	d82a      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81031de:	d008      	beq.n	81031f2 <ADC_ConfigureBoostMode+0x106>
 81031e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81031e4:	d824      	bhi.n	8103230 <ADC_ConfigureBoostMode+0x144>
 81031e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81031ea:	d002      	beq.n	81031f2 <ADC_ConfigureBoostMode+0x106>
 81031ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81031f0:	d11e      	bne.n	8103230 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	685b      	ldr	r3, [r3, #4]
 81031f6:	0c9b      	lsrs	r3, r3, #18
 81031f8:	005b      	lsls	r3, r3, #1
 81031fa:	68fa      	ldr	r2, [r7, #12]
 81031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8103200:	60fb      	str	r3, [r7, #12]
        break;
 8103202:	e016      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103204:	68fb      	ldr	r3, [r7, #12]
 8103206:	091b      	lsrs	r3, r3, #4
 8103208:	60fb      	str	r3, [r7, #12]
        break;
 810320a:	e012      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	095b      	lsrs	r3, r3, #5
 8103210:	60fb      	str	r3, [r7, #12]
        break;
 8103212:	e00e      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103214:	68fb      	ldr	r3, [r7, #12]
 8103216:	099b      	lsrs	r3, r3, #6
 8103218:	60fb      	str	r3, [r7, #12]
        break;
 810321a:	e00a      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	09db      	lsrs	r3, r3, #7
 8103220:	60fb      	str	r3, [r7, #12]
        break;
 8103222:	e006      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103224:	68fb      	ldr	r3, [r7, #12]
 8103226:	0a1b      	lsrs	r3, r3, #8
 8103228:	60fb      	str	r3, [r7, #12]
        break;
 810322a:	e002      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
        break;
 810322c:	bf00      	nop
 810322e:	e000      	b.n	8103232 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103230:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103232:	f7fe ff49 	bl	81020c8 <HAL_GetREVID>
 8103236:	4603      	mov	r3, r0
 8103238:	f241 0203 	movw	r2, #4099	; 0x1003
 810323c:	4293      	cmp	r3, r2
 810323e:	d815      	bhi.n	810326c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103240:	68fb      	ldr	r3, [r7, #12]
 8103242:	4a2b      	ldr	r2, [pc, #172]	; (81032f0 <ADC_ConfigureBoostMode+0x204>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d908      	bls.n	810325a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	689a      	ldr	r2, [r3, #8]
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103256:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103258:	e03e      	b.n	81032d8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	689a      	ldr	r2, [r3, #8]
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103268:	609a      	str	r2, [r3, #8]
}
 810326a:	e035      	b.n	81032d8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 810326c:	68fb      	ldr	r3, [r7, #12]
 810326e:	085b      	lsrs	r3, r3, #1
 8103270:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103272:	68fb      	ldr	r3, [r7, #12]
 8103274:	4a1f      	ldr	r2, [pc, #124]	; (81032f4 <ADC_ConfigureBoostMode+0x208>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d808      	bhi.n	810328c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	689a      	ldr	r2, [r3, #8]
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103288:	609a      	str	r2, [r3, #8]
}
 810328a:	e025      	b.n	81032d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	4a1a      	ldr	r2, [pc, #104]	; (81032f8 <ADC_ConfigureBoostMode+0x20c>)
 8103290:	4293      	cmp	r3, r2
 8103292:	d80a      	bhi.n	81032aa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	689b      	ldr	r3, [r3, #8]
 810329a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81032a6:	609a      	str	r2, [r3, #8]
}
 81032a8:	e016      	b.n	81032d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 81032aa:	68fb      	ldr	r3, [r7, #12]
 81032ac:	4a13      	ldr	r2, [pc, #76]	; (81032fc <ADC_ConfigureBoostMode+0x210>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d80a      	bhi.n	81032c8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	689b      	ldr	r3, [r3, #8]
 81032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81032c4:	609a      	str	r2, [r3, #8]
}
 81032c6:	e007      	b.n	81032d8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	689a      	ldr	r2, [r3, #8]
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81032d6:	609a      	str	r2, [r3, #8]
}
 81032d8:	bf00      	nop
 81032da:	3710      	adds	r7, #16
 81032dc:	46bd      	mov	sp, r7
 81032de:	bd80      	pop	{r7, pc}
 81032e0:	40022000 	.word	0x40022000
 81032e4:	40022100 	.word	0x40022100
 81032e8:	40022300 	.word	0x40022300
 81032ec:	58026300 	.word	0x58026300
 81032f0:	01312d00 	.word	0x01312d00
 81032f4:	005f5e10 	.word	0x005f5e10
 81032f8:	00bebc20 	.word	0x00bebc20
 81032fc:	017d7840 	.word	0x017d7840

08103300 <LL_ADC_IsEnabled>:
{
 8103300:	b480      	push	{r7}
 8103302:	b083      	sub	sp, #12
 8103304:	af00      	add	r7, sp, #0
 8103306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	689b      	ldr	r3, [r3, #8]
 810330c:	f003 0301 	and.w	r3, r3, #1
 8103310:	2b01      	cmp	r3, #1
 8103312:	d101      	bne.n	8103318 <LL_ADC_IsEnabled+0x18>
 8103314:	2301      	movs	r3, #1
 8103316:	e000      	b.n	810331a <LL_ADC_IsEnabled+0x1a>
 8103318:	2300      	movs	r3, #0
}
 810331a:	4618      	mov	r0, r3
 810331c:	370c      	adds	r7, #12
 810331e:	46bd      	mov	sp, r7
 8103320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103324:	4770      	bx	lr

08103326 <LL_ADC_REG_IsConversionOngoing>:
{
 8103326:	b480      	push	{r7}
 8103328:	b083      	sub	sp, #12
 810332a:	af00      	add	r7, sp, #0
 810332c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	689b      	ldr	r3, [r3, #8]
 8103332:	f003 0304 	and.w	r3, r3, #4
 8103336:	2b04      	cmp	r3, #4
 8103338:	d101      	bne.n	810333e <LL_ADC_REG_IsConversionOngoing+0x18>
 810333a:	2301      	movs	r3, #1
 810333c:	e000      	b.n	8103340 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810333e:	2300      	movs	r3, #0
}
 8103340:	4618      	mov	r0, r3
 8103342:	370c      	adds	r7, #12
 8103344:	46bd      	mov	sp, r7
 8103346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334a:	4770      	bx	lr

0810334c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 810334c:	b590      	push	{r4, r7, lr}
 810334e:	b09f      	sub	sp, #124	; 0x7c
 8103350:	af00      	add	r7, sp, #0
 8103352:	6078      	str	r0, [r7, #4]
 8103354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103356:	2300      	movs	r3, #0
 8103358:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103362:	2b01      	cmp	r3, #1
 8103364:	d101      	bne.n	810336a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103366:	2302      	movs	r3, #2
 8103368:	e0c4      	b.n	81034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	2201      	movs	r2, #1
 810336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103372:	2300      	movs	r3, #0
 8103374:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103376:	2300      	movs	r3, #0
 8103378:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a5f      	ldr	r2, [pc, #380]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d102      	bne.n	810338a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103384:	4b5e      	ldr	r3, [pc, #376]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103386:	60bb      	str	r3, [r7, #8]
 8103388:	e001      	b.n	810338e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810338a:	2300      	movs	r3, #0
 810338c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810338e:	68bb      	ldr	r3, [r7, #8]
 8103390:	2b00      	cmp	r3, #0
 8103392:	d10b      	bne.n	81033ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103398:	f043 0220 	orr.w	r2, r3, #32
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	2200      	movs	r2, #0
 81033a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81033a8:	2301      	movs	r3, #1
 81033aa:	e0a3      	b.n	81034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81033ac:	68bb      	ldr	r3, [r7, #8]
 81033ae:	4618      	mov	r0, r3
 81033b0:	f7ff ffb9 	bl	8103326 <LL_ADC_REG_IsConversionOngoing>
 81033b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4618      	mov	r0, r3
 81033bc:	f7ff ffb3 	bl	8103326 <LL_ADC_REG_IsConversionOngoing>
 81033c0:	4603      	mov	r3, r0
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	f040 8085 	bne.w	81034d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81033c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	f040 8081 	bne.w	81034d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	4a49      	ldr	r2, [pc, #292]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81033d6:	4293      	cmp	r3, r2
 81033d8:	d004      	beq.n	81033e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	681b      	ldr	r3, [r3, #0]
 81033de:	4a48      	ldr	r2, [pc, #288]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81033e0:	4293      	cmp	r3, r2
 81033e2:	d101      	bne.n	81033e8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81033e4:	4b47      	ldr	r3, [pc, #284]	; (8103504 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81033e6:	e000      	b.n	81033ea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81033e8:	4b47      	ldr	r3, [pc, #284]	; (8103508 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81033ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81033ec:	683b      	ldr	r3, [r7, #0]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	d03b      	beq.n	810346c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81033f6:	689b      	ldr	r3, [r3, #8]
 81033f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81033fc:	683b      	ldr	r3, [r7, #0]
 81033fe:	685b      	ldr	r3, [r3, #4]
 8103400:	431a      	orrs	r2, r3
 8103402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103404:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	4a3c      	ldr	r2, [pc, #240]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810340c:	4293      	cmp	r3, r2
 810340e:	d004      	beq.n	810341a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	4a3a      	ldr	r2, [pc, #232]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103416:	4293      	cmp	r3, r2
 8103418:	d10e      	bne.n	8103438 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810341a:	4838      	ldr	r0, [pc, #224]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810341c:	f7ff ff70 	bl	8103300 <LL_ADC_IsEnabled>
 8103420:	4604      	mov	r4, r0
 8103422:	4837      	ldr	r0, [pc, #220]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103424:	f7ff ff6c 	bl	8103300 <LL_ADC_IsEnabled>
 8103428:	4603      	mov	r3, r0
 810342a:	4323      	orrs	r3, r4
 810342c:	2b00      	cmp	r3, #0
 810342e:	bf0c      	ite	eq
 8103430:	2301      	moveq	r3, #1
 8103432:	2300      	movne	r3, #0
 8103434:	b2db      	uxtb	r3, r3
 8103436:	e008      	b.n	810344a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103438:	4834      	ldr	r0, [pc, #208]	; (810350c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810343a:	f7ff ff61 	bl	8103300 <LL_ADC_IsEnabled>
 810343e:	4603      	mov	r3, r0
 8103440:	2b00      	cmp	r3, #0
 8103442:	bf0c      	ite	eq
 8103444:	2301      	moveq	r3, #1
 8103446:	2300      	movne	r3, #0
 8103448:	b2db      	uxtb	r3, r3
 810344a:	2b00      	cmp	r3, #0
 810344c:	d04b      	beq.n	81034e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103450:	689b      	ldr	r3, [r3, #8]
 8103452:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103456:	f023 030f 	bic.w	r3, r3, #15
 810345a:	683a      	ldr	r2, [r7, #0]
 810345c:	6811      	ldr	r1, [r2, #0]
 810345e:	683a      	ldr	r2, [r7, #0]
 8103460:	6892      	ldr	r2, [r2, #8]
 8103462:	430a      	orrs	r2, r1
 8103464:	431a      	orrs	r2, r3
 8103466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103468:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810346a:	e03c      	b.n	81034e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810346c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810346e:	689b      	ldr	r3, [r3, #8]
 8103470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103476:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	4a1f      	ldr	r2, [pc, #124]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d004      	beq.n	810348c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	4a1e      	ldr	r2, [pc, #120]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103488:	4293      	cmp	r3, r2
 810348a:	d10e      	bne.n	81034aa <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 810348c:	481b      	ldr	r0, [pc, #108]	; (81034fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810348e:	f7ff ff37 	bl	8103300 <LL_ADC_IsEnabled>
 8103492:	4604      	mov	r4, r0
 8103494:	481a      	ldr	r0, [pc, #104]	; (8103500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103496:	f7ff ff33 	bl	8103300 <LL_ADC_IsEnabled>
 810349a:	4603      	mov	r3, r0
 810349c:	4323      	orrs	r3, r4
 810349e:	2b00      	cmp	r3, #0
 81034a0:	bf0c      	ite	eq
 81034a2:	2301      	moveq	r3, #1
 81034a4:	2300      	movne	r3, #0
 81034a6:	b2db      	uxtb	r3, r3
 81034a8:	e008      	b.n	81034bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81034aa:	4818      	ldr	r0, [pc, #96]	; (810350c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81034ac:	f7ff ff28 	bl	8103300 <LL_ADC_IsEnabled>
 81034b0:	4603      	mov	r3, r0
 81034b2:	2b00      	cmp	r3, #0
 81034b4:	bf0c      	ite	eq
 81034b6:	2301      	moveq	r3, #1
 81034b8:	2300      	movne	r3, #0
 81034ba:	b2db      	uxtb	r3, r3
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d012      	beq.n	81034e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034c2:	689b      	ldr	r3, [r3, #8]
 81034c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81034c8:	f023 030f 	bic.w	r3, r3, #15
 81034cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81034ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034d0:	e009      	b.n	81034e6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034d6:	f043 0220 	orr.w	r2, r3, #32
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81034de:	2301      	movs	r3, #1
 81034e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81034e4:	e000      	b.n	81034e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	2200      	movs	r2, #0
 81034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81034f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81034f4:	4618      	mov	r0, r3
 81034f6:	377c      	adds	r7, #124	; 0x7c
 81034f8:	46bd      	mov	sp, r7
 81034fa:	bd90      	pop	{r4, r7, pc}
 81034fc:	40022000 	.word	0x40022000
 8103500:	40022100 	.word	0x40022100
 8103504:	40022300 	.word	0x40022300
 8103508:	58026300 	.word	0x58026300
 810350c:	58026000 	.word	0x58026000

08103510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103510:	b480      	push	{r7}
 8103512:	b085      	sub	sp, #20
 8103514:	af00      	add	r7, sp, #0
 8103516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	f003 0307 	and.w	r3, r3, #7
 810351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103520:	4b0c      	ldr	r3, [pc, #48]	; (8103554 <__NVIC_SetPriorityGrouping+0x44>)
 8103522:	68db      	ldr	r3, [r3, #12]
 8103524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103526:	68ba      	ldr	r2, [r7, #8]
 8103528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810352c:	4013      	ands	r3, r2
 810352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103534:	68bb      	ldr	r3, [r7, #8]
 8103536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103542:	4a04      	ldr	r2, [pc, #16]	; (8103554 <__NVIC_SetPriorityGrouping+0x44>)
 8103544:	68bb      	ldr	r3, [r7, #8]
 8103546:	60d3      	str	r3, [r2, #12]
}
 8103548:	bf00      	nop
 810354a:	3714      	adds	r7, #20
 810354c:	46bd      	mov	sp, r7
 810354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103552:	4770      	bx	lr
 8103554:	e000ed00 	.word	0xe000ed00

08103558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103558:	b480      	push	{r7}
 810355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810355c:	4b04      	ldr	r3, [pc, #16]	; (8103570 <__NVIC_GetPriorityGrouping+0x18>)
 810355e:	68db      	ldr	r3, [r3, #12]
 8103560:	0a1b      	lsrs	r3, r3, #8
 8103562:	f003 0307 	and.w	r3, r3, #7
}
 8103566:	4618      	mov	r0, r3
 8103568:	46bd      	mov	sp, r7
 810356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810356e:	4770      	bx	lr
 8103570:	e000ed00 	.word	0xe000ed00

08103574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103574:	b480      	push	{r7}
 8103576:	b083      	sub	sp, #12
 8103578:	af00      	add	r7, sp, #0
 810357a:	4603      	mov	r3, r0
 810357c:	6039      	str	r1, [r7, #0]
 810357e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103584:	2b00      	cmp	r3, #0
 8103586:	db0a      	blt.n	810359e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103588:	683b      	ldr	r3, [r7, #0]
 810358a:	b2da      	uxtb	r2, r3
 810358c:	490c      	ldr	r1, [pc, #48]	; (81035c0 <__NVIC_SetPriority+0x4c>)
 810358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103592:	0112      	lsls	r2, r2, #4
 8103594:	b2d2      	uxtb	r2, r2
 8103596:	440b      	add	r3, r1
 8103598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810359c:	e00a      	b.n	81035b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810359e:	683b      	ldr	r3, [r7, #0]
 81035a0:	b2da      	uxtb	r2, r3
 81035a2:	4908      	ldr	r1, [pc, #32]	; (81035c4 <__NVIC_SetPriority+0x50>)
 81035a4:	88fb      	ldrh	r3, [r7, #6]
 81035a6:	f003 030f 	and.w	r3, r3, #15
 81035aa:	3b04      	subs	r3, #4
 81035ac:	0112      	lsls	r2, r2, #4
 81035ae:	b2d2      	uxtb	r2, r2
 81035b0:	440b      	add	r3, r1
 81035b2:	761a      	strb	r2, [r3, #24]
}
 81035b4:	bf00      	nop
 81035b6:	370c      	adds	r7, #12
 81035b8:	46bd      	mov	sp, r7
 81035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035be:	4770      	bx	lr
 81035c0:	e000e100 	.word	0xe000e100
 81035c4:	e000ed00 	.word	0xe000ed00

081035c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81035c8:	b480      	push	{r7}
 81035ca:	b089      	sub	sp, #36	; 0x24
 81035cc:	af00      	add	r7, sp, #0
 81035ce:	60f8      	str	r0, [r7, #12]
 81035d0:	60b9      	str	r1, [r7, #8]
 81035d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	f003 0307 	and.w	r3, r3, #7
 81035da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81035dc:	69fb      	ldr	r3, [r7, #28]
 81035de:	f1c3 0307 	rsb	r3, r3, #7
 81035e2:	2b04      	cmp	r3, #4
 81035e4:	bf28      	it	cs
 81035e6:	2304      	movcs	r3, #4
 81035e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81035ea:	69fb      	ldr	r3, [r7, #28]
 81035ec:	3304      	adds	r3, #4
 81035ee:	2b06      	cmp	r3, #6
 81035f0:	d902      	bls.n	81035f8 <NVIC_EncodePriority+0x30>
 81035f2:	69fb      	ldr	r3, [r7, #28]
 81035f4:	3b03      	subs	r3, #3
 81035f6:	e000      	b.n	81035fa <NVIC_EncodePriority+0x32>
 81035f8:	2300      	movs	r3, #0
 81035fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8103600:	69bb      	ldr	r3, [r7, #24]
 8103602:	fa02 f303 	lsl.w	r3, r2, r3
 8103606:	43da      	mvns	r2, r3
 8103608:	68bb      	ldr	r3, [r7, #8]
 810360a:	401a      	ands	r2, r3
 810360c:	697b      	ldr	r3, [r7, #20]
 810360e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103610:	f04f 31ff 	mov.w	r1, #4294967295
 8103614:	697b      	ldr	r3, [r7, #20]
 8103616:	fa01 f303 	lsl.w	r3, r1, r3
 810361a:	43d9      	mvns	r1, r3
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103620:	4313      	orrs	r3, r2
         );
}
 8103622:	4618      	mov	r0, r3
 8103624:	3724      	adds	r7, #36	; 0x24
 8103626:	46bd      	mov	sp, r7
 8103628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810362c:	4770      	bx	lr
	...

08103630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103630:	b580      	push	{r7, lr}
 8103632:	b082      	sub	sp, #8
 8103634:	af00      	add	r7, sp, #0
 8103636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	3b01      	subs	r3, #1
 810363c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103640:	d301      	bcc.n	8103646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103642:	2301      	movs	r3, #1
 8103644:	e00f      	b.n	8103666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103646:	4a0a      	ldr	r2, [pc, #40]	; (8103670 <SysTick_Config+0x40>)
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	3b01      	subs	r3, #1
 810364c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810364e:	210f      	movs	r1, #15
 8103650:	f04f 30ff 	mov.w	r0, #4294967295
 8103654:	f7ff ff8e 	bl	8103574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103658:	4b05      	ldr	r3, [pc, #20]	; (8103670 <SysTick_Config+0x40>)
 810365a:	2200      	movs	r2, #0
 810365c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810365e:	4b04      	ldr	r3, [pc, #16]	; (8103670 <SysTick_Config+0x40>)
 8103660:	2207      	movs	r2, #7
 8103662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103664:	2300      	movs	r3, #0
}
 8103666:	4618      	mov	r0, r3
 8103668:	3708      	adds	r7, #8
 810366a:	46bd      	mov	sp, r7
 810366c:	bd80      	pop	{r7, pc}
 810366e:	bf00      	nop
 8103670:	e000e010 	.word	0xe000e010

08103674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103674:	b580      	push	{r7, lr}
 8103676:	b082      	sub	sp, #8
 8103678:	af00      	add	r7, sp, #0
 810367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810367c:	6878      	ldr	r0, [r7, #4]
 810367e:	f7ff ff47 	bl	8103510 <__NVIC_SetPriorityGrouping>
}
 8103682:	bf00      	nop
 8103684:	3708      	adds	r7, #8
 8103686:	46bd      	mov	sp, r7
 8103688:	bd80      	pop	{r7, pc}

0810368a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810368a:	b580      	push	{r7, lr}
 810368c:	b086      	sub	sp, #24
 810368e:	af00      	add	r7, sp, #0
 8103690:	4603      	mov	r3, r0
 8103692:	60b9      	str	r1, [r7, #8]
 8103694:	607a      	str	r2, [r7, #4]
 8103696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103698:	f7ff ff5e 	bl	8103558 <__NVIC_GetPriorityGrouping>
 810369c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810369e:	687a      	ldr	r2, [r7, #4]
 81036a0:	68b9      	ldr	r1, [r7, #8]
 81036a2:	6978      	ldr	r0, [r7, #20]
 81036a4:	f7ff ff90 	bl	81035c8 <NVIC_EncodePriority>
 81036a8:	4602      	mov	r2, r0
 81036aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81036ae:	4611      	mov	r1, r2
 81036b0:	4618      	mov	r0, r3
 81036b2:	f7ff ff5f 	bl	8103574 <__NVIC_SetPriority>
}
 81036b6:	bf00      	nop
 81036b8:	3718      	adds	r7, #24
 81036ba:	46bd      	mov	sp, r7
 81036bc:	bd80      	pop	{r7, pc}

081036be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81036be:	b580      	push	{r7, lr}
 81036c0:	b082      	sub	sp, #8
 81036c2:	af00      	add	r7, sp, #0
 81036c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81036c6:	6878      	ldr	r0, [r7, #4]
 81036c8:	f7ff ffb2 	bl	8103630 <SysTick_Config>
 81036cc:	4603      	mov	r3, r0
}
 81036ce:	4618      	mov	r0, r3
 81036d0:	3708      	adds	r7, #8
 81036d2:	46bd      	mov	sp, r7
 81036d4:	bd80      	pop	{r7, pc}
	...

081036d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81036d8:	b480      	push	{r7}
 81036da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81036dc:	4b07      	ldr	r3, [pc, #28]	; (81036fc <HAL_GetCurrentCPUID+0x24>)
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	091b      	lsrs	r3, r3, #4
 81036e2:	f003 030f 	and.w	r3, r3, #15
 81036e6:	2b07      	cmp	r3, #7
 81036e8:	d101      	bne.n	81036ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81036ea:	2303      	movs	r3, #3
 81036ec:	e000      	b.n	81036f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81036ee:	2301      	movs	r3, #1
  }
}
 81036f0:	4618      	mov	r0, r3
 81036f2:	46bd      	mov	sp, r7
 81036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f8:	4770      	bx	lr
 81036fa:	bf00      	nop
 81036fc:	e000ed00 	.word	0xe000ed00

08103700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103700:	b480      	push	{r7}
 8103702:	b089      	sub	sp, #36	; 0x24
 8103704:	af00      	add	r7, sp, #0
 8103706:	6078      	str	r0, [r7, #4]
 8103708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810370a:	2300      	movs	r3, #0
 810370c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810370e:	4b89      	ldr	r3, [pc, #548]	; (8103934 <HAL_GPIO_Init+0x234>)
 8103710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103712:	e194      	b.n	8103a3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103714:	683b      	ldr	r3, [r7, #0]
 8103716:	681a      	ldr	r2, [r3, #0]
 8103718:	2101      	movs	r1, #1
 810371a:	69fb      	ldr	r3, [r7, #28]
 810371c:	fa01 f303 	lsl.w	r3, r1, r3
 8103720:	4013      	ands	r3, r2
 8103722:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103724:	693b      	ldr	r3, [r7, #16]
 8103726:	2b00      	cmp	r3, #0
 8103728:	f000 8186 	beq.w	8103a38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810372c:	683b      	ldr	r3, [r7, #0]
 810372e:	685b      	ldr	r3, [r3, #4]
 8103730:	2b01      	cmp	r3, #1
 8103732:	d00b      	beq.n	810374c <HAL_GPIO_Init+0x4c>
 8103734:	683b      	ldr	r3, [r7, #0]
 8103736:	685b      	ldr	r3, [r3, #4]
 8103738:	2b02      	cmp	r3, #2
 810373a:	d007      	beq.n	810374c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810373c:	683b      	ldr	r3, [r7, #0]
 810373e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103740:	2b11      	cmp	r3, #17
 8103742:	d003      	beq.n	810374c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103744:	683b      	ldr	r3, [r7, #0]
 8103746:	685b      	ldr	r3, [r3, #4]
 8103748:	2b12      	cmp	r3, #18
 810374a:	d130      	bne.n	81037ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	689b      	ldr	r3, [r3, #8]
 8103750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103752:	69fb      	ldr	r3, [r7, #28]
 8103754:	005b      	lsls	r3, r3, #1
 8103756:	2203      	movs	r2, #3
 8103758:	fa02 f303 	lsl.w	r3, r2, r3
 810375c:	43db      	mvns	r3, r3
 810375e:	69ba      	ldr	r2, [r7, #24]
 8103760:	4013      	ands	r3, r2
 8103762:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103764:	683b      	ldr	r3, [r7, #0]
 8103766:	68da      	ldr	r2, [r3, #12]
 8103768:	69fb      	ldr	r3, [r7, #28]
 810376a:	005b      	lsls	r3, r3, #1
 810376c:	fa02 f303 	lsl.w	r3, r2, r3
 8103770:	69ba      	ldr	r2, [r7, #24]
 8103772:	4313      	orrs	r3, r2
 8103774:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	69ba      	ldr	r2, [r7, #24]
 810377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	685b      	ldr	r3, [r3, #4]
 8103780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103782:	2201      	movs	r2, #1
 8103784:	69fb      	ldr	r3, [r7, #28]
 8103786:	fa02 f303 	lsl.w	r3, r2, r3
 810378a:	43db      	mvns	r3, r3
 810378c:	69ba      	ldr	r2, [r7, #24]
 810378e:	4013      	ands	r3, r2
 8103790:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8103792:	683b      	ldr	r3, [r7, #0]
 8103794:	685b      	ldr	r3, [r3, #4]
 8103796:	091b      	lsrs	r3, r3, #4
 8103798:	f003 0201 	and.w	r2, r3, #1
 810379c:	69fb      	ldr	r3, [r7, #28]
 810379e:	fa02 f303 	lsl.w	r3, r2, r3
 81037a2:	69ba      	ldr	r2, [r7, #24]
 81037a4:	4313      	orrs	r3, r2
 81037a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	69ba      	ldr	r2, [r7, #24]
 81037ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	68db      	ldr	r3, [r3, #12]
 81037b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81037b4:	69fb      	ldr	r3, [r7, #28]
 81037b6:	005b      	lsls	r3, r3, #1
 81037b8:	2203      	movs	r2, #3
 81037ba:	fa02 f303 	lsl.w	r3, r2, r3
 81037be:	43db      	mvns	r3, r3
 81037c0:	69ba      	ldr	r2, [r7, #24]
 81037c2:	4013      	ands	r3, r2
 81037c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81037c6:	683b      	ldr	r3, [r7, #0]
 81037c8:	689a      	ldr	r2, [r3, #8]
 81037ca:	69fb      	ldr	r3, [r7, #28]
 81037cc:	005b      	lsls	r3, r3, #1
 81037ce:	fa02 f303 	lsl.w	r3, r2, r3
 81037d2:	69ba      	ldr	r2, [r7, #24]
 81037d4:	4313      	orrs	r3, r2
 81037d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	69ba      	ldr	r2, [r7, #24]
 81037dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81037de:	683b      	ldr	r3, [r7, #0]
 81037e0:	685b      	ldr	r3, [r3, #4]
 81037e2:	2b02      	cmp	r3, #2
 81037e4:	d003      	beq.n	81037ee <HAL_GPIO_Init+0xee>
 81037e6:	683b      	ldr	r3, [r7, #0]
 81037e8:	685b      	ldr	r3, [r3, #4]
 81037ea:	2b12      	cmp	r3, #18
 81037ec:	d123      	bne.n	8103836 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81037ee:	69fb      	ldr	r3, [r7, #28]
 81037f0:	08da      	lsrs	r2, r3, #3
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	3208      	adds	r2, #8
 81037f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81037fc:	69fb      	ldr	r3, [r7, #28]
 81037fe:	f003 0307 	and.w	r3, r3, #7
 8103802:	009b      	lsls	r3, r3, #2
 8103804:	220f      	movs	r2, #15
 8103806:	fa02 f303 	lsl.w	r3, r2, r3
 810380a:	43db      	mvns	r3, r3
 810380c:	69ba      	ldr	r2, [r7, #24]
 810380e:	4013      	ands	r3, r2
 8103810:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103812:	683b      	ldr	r3, [r7, #0]
 8103814:	691a      	ldr	r2, [r3, #16]
 8103816:	69fb      	ldr	r3, [r7, #28]
 8103818:	f003 0307 	and.w	r3, r3, #7
 810381c:	009b      	lsls	r3, r3, #2
 810381e:	fa02 f303 	lsl.w	r3, r2, r3
 8103822:	69ba      	ldr	r2, [r7, #24]
 8103824:	4313      	orrs	r3, r2
 8103826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103828:	69fb      	ldr	r3, [r7, #28]
 810382a:	08da      	lsrs	r2, r3, #3
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	3208      	adds	r2, #8
 8103830:	69b9      	ldr	r1, [r7, #24]
 8103832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810383c:	69fb      	ldr	r3, [r7, #28]
 810383e:	005b      	lsls	r3, r3, #1
 8103840:	2203      	movs	r2, #3
 8103842:	fa02 f303 	lsl.w	r3, r2, r3
 8103846:	43db      	mvns	r3, r3
 8103848:	69ba      	ldr	r2, [r7, #24]
 810384a:	4013      	ands	r3, r2
 810384c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810384e:	683b      	ldr	r3, [r7, #0]
 8103850:	685b      	ldr	r3, [r3, #4]
 8103852:	f003 0203 	and.w	r2, r3, #3
 8103856:	69fb      	ldr	r3, [r7, #28]
 8103858:	005b      	lsls	r3, r3, #1
 810385a:	fa02 f303 	lsl.w	r3, r2, r3
 810385e:	69ba      	ldr	r2, [r7, #24]
 8103860:	4313      	orrs	r3, r2
 8103862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	69ba      	ldr	r2, [r7, #24]
 8103868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810386a:	683b      	ldr	r3, [r7, #0]
 810386c:	685b      	ldr	r3, [r3, #4]
 810386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103872:	2b00      	cmp	r3, #0
 8103874:	f000 80e0 	beq.w	8103a38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103878:	4b2f      	ldr	r3, [pc, #188]	; (8103938 <HAL_GPIO_Init+0x238>)
 810387a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810387e:	4a2e      	ldr	r2, [pc, #184]	; (8103938 <HAL_GPIO_Init+0x238>)
 8103880:	f043 0302 	orr.w	r3, r3, #2
 8103884:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103888:	4b2b      	ldr	r3, [pc, #172]	; (8103938 <HAL_GPIO_Init+0x238>)
 810388a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810388e:	f003 0302 	and.w	r3, r3, #2
 8103892:	60fb      	str	r3, [r7, #12]
 8103894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103896:	4a29      	ldr	r2, [pc, #164]	; (810393c <HAL_GPIO_Init+0x23c>)
 8103898:	69fb      	ldr	r3, [r7, #28]
 810389a:	089b      	lsrs	r3, r3, #2
 810389c:	3302      	adds	r3, #2
 810389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81038a4:	69fb      	ldr	r3, [r7, #28]
 81038a6:	f003 0303 	and.w	r3, r3, #3
 81038aa:	009b      	lsls	r3, r3, #2
 81038ac:	220f      	movs	r2, #15
 81038ae:	fa02 f303 	lsl.w	r3, r2, r3
 81038b2:	43db      	mvns	r3, r3
 81038b4:	69ba      	ldr	r2, [r7, #24]
 81038b6:	4013      	ands	r3, r2
 81038b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	4a20      	ldr	r2, [pc, #128]	; (8103940 <HAL_GPIO_Init+0x240>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d052      	beq.n	8103968 <HAL_GPIO_Init+0x268>
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	4a1f      	ldr	r2, [pc, #124]	; (8103944 <HAL_GPIO_Init+0x244>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d031      	beq.n	810392e <HAL_GPIO_Init+0x22e>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	4a1e      	ldr	r2, [pc, #120]	; (8103948 <HAL_GPIO_Init+0x248>)
 81038ce:	4293      	cmp	r3, r2
 81038d0:	d02b      	beq.n	810392a <HAL_GPIO_Init+0x22a>
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	4a1d      	ldr	r2, [pc, #116]	; (810394c <HAL_GPIO_Init+0x24c>)
 81038d6:	4293      	cmp	r3, r2
 81038d8:	d025      	beq.n	8103926 <HAL_GPIO_Init+0x226>
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	4a1c      	ldr	r2, [pc, #112]	; (8103950 <HAL_GPIO_Init+0x250>)
 81038de:	4293      	cmp	r3, r2
 81038e0:	d01f      	beq.n	8103922 <HAL_GPIO_Init+0x222>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	4a1b      	ldr	r2, [pc, #108]	; (8103954 <HAL_GPIO_Init+0x254>)
 81038e6:	4293      	cmp	r3, r2
 81038e8:	d019      	beq.n	810391e <HAL_GPIO_Init+0x21e>
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	4a1a      	ldr	r2, [pc, #104]	; (8103958 <HAL_GPIO_Init+0x258>)
 81038ee:	4293      	cmp	r3, r2
 81038f0:	d013      	beq.n	810391a <HAL_GPIO_Init+0x21a>
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	4a19      	ldr	r2, [pc, #100]	; (810395c <HAL_GPIO_Init+0x25c>)
 81038f6:	4293      	cmp	r3, r2
 81038f8:	d00d      	beq.n	8103916 <HAL_GPIO_Init+0x216>
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	4a18      	ldr	r2, [pc, #96]	; (8103960 <HAL_GPIO_Init+0x260>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d007      	beq.n	8103912 <HAL_GPIO_Init+0x212>
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	4a17      	ldr	r2, [pc, #92]	; (8103964 <HAL_GPIO_Init+0x264>)
 8103906:	4293      	cmp	r3, r2
 8103908:	d101      	bne.n	810390e <HAL_GPIO_Init+0x20e>
 810390a:	2309      	movs	r3, #9
 810390c:	e02d      	b.n	810396a <HAL_GPIO_Init+0x26a>
 810390e:	230a      	movs	r3, #10
 8103910:	e02b      	b.n	810396a <HAL_GPIO_Init+0x26a>
 8103912:	2308      	movs	r3, #8
 8103914:	e029      	b.n	810396a <HAL_GPIO_Init+0x26a>
 8103916:	2307      	movs	r3, #7
 8103918:	e027      	b.n	810396a <HAL_GPIO_Init+0x26a>
 810391a:	2306      	movs	r3, #6
 810391c:	e025      	b.n	810396a <HAL_GPIO_Init+0x26a>
 810391e:	2305      	movs	r3, #5
 8103920:	e023      	b.n	810396a <HAL_GPIO_Init+0x26a>
 8103922:	2304      	movs	r3, #4
 8103924:	e021      	b.n	810396a <HAL_GPIO_Init+0x26a>
 8103926:	2303      	movs	r3, #3
 8103928:	e01f      	b.n	810396a <HAL_GPIO_Init+0x26a>
 810392a:	2302      	movs	r3, #2
 810392c:	e01d      	b.n	810396a <HAL_GPIO_Init+0x26a>
 810392e:	2301      	movs	r3, #1
 8103930:	e01b      	b.n	810396a <HAL_GPIO_Init+0x26a>
 8103932:	bf00      	nop
 8103934:	580000c0 	.word	0x580000c0
 8103938:	58024400 	.word	0x58024400
 810393c:	58000400 	.word	0x58000400
 8103940:	58020000 	.word	0x58020000
 8103944:	58020400 	.word	0x58020400
 8103948:	58020800 	.word	0x58020800
 810394c:	58020c00 	.word	0x58020c00
 8103950:	58021000 	.word	0x58021000
 8103954:	58021400 	.word	0x58021400
 8103958:	58021800 	.word	0x58021800
 810395c:	58021c00 	.word	0x58021c00
 8103960:	58022000 	.word	0x58022000
 8103964:	58022400 	.word	0x58022400
 8103968:	2300      	movs	r3, #0
 810396a:	69fa      	ldr	r2, [r7, #28]
 810396c:	f002 0203 	and.w	r2, r2, #3
 8103970:	0092      	lsls	r2, r2, #2
 8103972:	4093      	lsls	r3, r2
 8103974:	69ba      	ldr	r2, [r7, #24]
 8103976:	4313      	orrs	r3, r2
 8103978:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810397a:	4938      	ldr	r1, [pc, #224]	; (8103a5c <HAL_GPIO_Init+0x35c>)
 810397c:	69fb      	ldr	r3, [r7, #28]
 810397e:	089b      	lsrs	r3, r3, #2
 8103980:	3302      	adds	r3, #2
 8103982:	69ba      	ldr	r2, [r7, #24]
 8103984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103988:	697b      	ldr	r3, [r7, #20]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810398e:	693b      	ldr	r3, [r7, #16]
 8103990:	43db      	mvns	r3, r3
 8103992:	69ba      	ldr	r2, [r7, #24]
 8103994:	4013      	ands	r3, r2
 8103996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8103998:	683b      	ldr	r3, [r7, #0]
 810399a:	685b      	ldr	r3, [r3, #4]
 810399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	d003      	beq.n	81039ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81039a4:	69ba      	ldr	r2, [r7, #24]
 81039a6:	693b      	ldr	r3, [r7, #16]
 81039a8:	4313      	orrs	r3, r2
 81039aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81039ac:	697b      	ldr	r3, [r7, #20]
 81039ae:	69ba      	ldr	r2, [r7, #24]
 81039b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81039b2:	697b      	ldr	r3, [r7, #20]
 81039b4:	685b      	ldr	r3, [r3, #4]
 81039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81039b8:	693b      	ldr	r3, [r7, #16]
 81039ba:	43db      	mvns	r3, r3
 81039bc:	69ba      	ldr	r2, [r7, #24]
 81039be:	4013      	ands	r3, r2
 81039c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81039c2:	683b      	ldr	r3, [r7, #0]
 81039c4:	685b      	ldr	r3, [r3, #4]
 81039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81039ca:	2b00      	cmp	r3, #0
 81039cc:	d003      	beq.n	81039d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81039ce:	69ba      	ldr	r2, [r7, #24]
 81039d0:	693b      	ldr	r3, [r7, #16]
 81039d2:	4313      	orrs	r3, r2
 81039d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81039d6:	697b      	ldr	r3, [r7, #20]
 81039d8:	69ba      	ldr	r2, [r7, #24]
 81039da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81039dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81039e4:	693b      	ldr	r3, [r7, #16]
 81039e6:	43db      	mvns	r3, r3
 81039e8:	69ba      	ldr	r2, [r7, #24]
 81039ea:	4013      	ands	r3, r2
 81039ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81039ee:	683b      	ldr	r3, [r7, #0]
 81039f0:	685b      	ldr	r3, [r3, #4]
 81039f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d003      	beq.n	8103a02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81039fa:	69ba      	ldr	r2, [r7, #24]
 81039fc:	693b      	ldr	r3, [r7, #16]
 81039fe:	4313      	orrs	r3, r2
 8103a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a06:	69bb      	ldr	r3, [r7, #24]
 8103a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a0e:	685b      	ldr	r3, [r3, #4]
 8103a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a12:	693b      	ldr	r3, [r7, #16]
 8103a14:	43db      	mvns	r3, r3
 8103a16:	69ba      	ldr	r2, [r7, #24]
 8103a18:	4013      	ands	r3, r2
 8103a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8103a1c:	683b      	ldr	r3, [r7, #0]
 8103a1e:	685b      	ldr	r3, [r3, #4]
 8103a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a24:	2b00      	cmp	r3, #0
 8103a26:	d003      	beq.n	8103a30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8103a28:	69ba      	ldr	r2, [r7, #24]
 8103a2a:	693b      	ldr	r3, [r7, #16]
 8103a2c:	4313      	orrs	r3, r2
 8103a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103a34:	69bb      	ldr	r3, [r7, #24]
 8103a36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8103a38:	69fb      	ldr	r3, [r7, #28]
 8103a3a:	3301      	adds	r3, #1
 8103a3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103a3e:	683b      	ldr	r3, [r7, #0]
 8103a40:	681a      	ldr	r2, [r3, #0]
 8103a42:	69fb      	ldr	r3, [r7, #28]
 8103a44:	fa22 f303 	lsr.w	r3, r2, r3
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	f47f ae63 	bne.w	8103714 <HAL_GPIO_Init+0x14>
  }
}
 8103a4e:	bf00      	nop
 8103a50:	bf00      	nop
 8103a52:	3724      	adds	r7, #36	; 0x24
 8103a54:	46bd      	mov	sp, r7
 8103a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a5a:	4770      	bx	lr
 8103a5c:	58000400 	.word	0x58000400

08103a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103a60:	b480      	push	{r7}
 8103a62:	b083      	sub	sp, #12
 8103a64:	af00      	add	r7, sp, #0
 8103a66:	6078      	str	r0, [r7, #4]
 8103a68:	460b      	mov	r3, r1
 8103a6a:	807b      	strh	r3, [r7, #2]
 8103a6c:	4613      	mov	r3, r2
 8103a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103a70:	787b      	ldrb	r3, [r7, #1]
 8103a72:	2b00      	cmp	r3, #0
 8103a74:	d003      	beq.n	8103a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103a76:	887a      	ldrh	r2, [r7, #2]
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103a7c:	e003      	b.n	8103a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103a7e:	887b      	ldrh	r3, [r7, #2]
 8103a80:	041a      	lsls	r2, r3, #16
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	619a      	str	r2, [r3, #24]
}
 8103a86:	bf00      	nop
 8103a88:	370c      	adds	r7, #12
 8103a8a:	46bd      	mov	sp, r7
 8103a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a90:	4770      	bx	lr
	...

08103a94 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103a94:	b480      	push	{r7}
 8103a96:	b083      	sub	sp, #12
 8103a98:	af00      	add	r7, sp, #0
 8103a9a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103a9c:	4b05      	ldr	r3, [pc, #20]	; (8103ab4 <HAL_HSEM_ActivateNotification+0x20>)
 8103a9e:	681a      	ldr	r2, [r3, #0]
 8103aa0:	4904      	ldr	r1, [pc, #16]	; (8103ab4 <HAL_HSEM_ActivateNotification+0x20>)
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	4313      	orrs	r3, r2
 8103aa6:	600b      	str	r3, [r1, #0]
#endif
}
 8103aa8:	bf00      	nop
 8103aaa:	370c      	adds	r7, #12
 8103aac:	46bd      	mov	sp, r7
 8103aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab2:	4770      	bx	lr
 8103ab4:	58026510 	.word	0x58026510

08103ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103ab8:	b580      	push	{r7, lr}
 8103aba:	b082      	sub	sp, #8
 8103abc:	af00      	add	r7, sp, #0
 8103abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d101      	bne.n	8103aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103ac6:	2301      	movs	r3, #1
 8103ac8:	e081      	b.n	8103bce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103ad0:	b2db      	uxtb	r3, r3
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d106      	bne.n	8103ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	2200      	movs	r2, #0
 8103ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103ade:	6878      	ldr	r0, [r7, #4]
 8103ae0:	f7fe f81a 	bl	8101b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	2224      	movs	r2, #36	; 0x24
 8103ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	681b      	ldr	r3, [r3, #0]
 8103af0:	681a      	ldr	r2, [r3, #0]
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	f022 0201 	bic.w	r2, r2, #1
 8103afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	685a      	ldr	r2, [r3, #4]
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103b08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	689a      	ldr	r2, [r3, #8]
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103b18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	68db      	ldr	r3, [r3, #12]
 8103b1e:	2b01      	cmp	r3, #1
 8103b20:	d107      	bne.n	8103b32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	689a      	ldr	r2, [r3, #8]
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	681b      	ldr	r3, [r3, #0]
 8103b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103b2e:	609a      	str	r2, [r3, #8]
 8103b30:	e006      	b.n	8103b40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	689a      	ldr	r2, [r3, #8]
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103b3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	68db      	ldr	r3, [r3, #12]
 8103b44:	2b02      	cmp	r3, #2
 8103b46:	d104      	bne.n	8103b52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	681b      	ldr	r3, [r3, #0]
 8103b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	681b      	ldr	r3, [r3, #0]
 8103b56:	685b      	ldr	r3, [r3, #4]
 8103b58:	687a      	ldr	r2, [r7, #4]
 8103b5a:	6812      	ldr	r2, [r2, #0]
 8103b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103b64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	68da      	ldr	r2, [r3, #12]
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103b74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	691a      	ldr	r2, [r3, #16]
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	695b      	ldr	r3, [r3, #20]
 8103b7e:	ea42 0103 	orr.w	r1, r2, r3
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	699b      	ldr	r3, [r3, #24]
 8103b86:	021a      	lsls	r2, r3, #8
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	430a      	orrs	r2, r1
 8103b8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	69d9      	ldr	r1, [r3, #28]
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	6a1a      	ldr	r2, [r3, #32]
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	430a      	orrs	r2, r1
 8103b9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	681b      	ldr	r3, [r3, #0]
 8103ba4:	681a      	ldr	r2, [r3, #0]
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	f042 0201 	orr.w	r2, r2, #1
 8103bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	2200      	movs	r2, #0
 8103bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	2220      	movs	r2, #32
 8103bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	2200      	movs	r2, #0
 8103bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	2200      	movs	r2, #0
 8103bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103bcc:	2300      	movs	r3, #0
}
 8103bce:	4618      	mov	r0, r3
 8103bd0:	3708      	adds	r7, #8
 8103bd2:	46bd      	mov	sp, r7
 8103bd4:	bd80      	pop	{r7, pc}
	...

08103bd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8103bd8:	b580      	push	{r7, lr}
 8103bda:	b088      	sub	sp, #32
 8103bdc:	af02      	add	r7, sp, #8
 8103bde:	60f8      	str	r0, [r7, #12]
 8103be0:	607a      	str	r2, [r7, #4]
 8103be2:	461a      	mov	r2, r3
 8103be4:	460b      	mov	r3, r1
 8103be6:	817b      	strh	r3, [r7, #10]
 8103be8:	4613      	mov	r3, r2
 8103bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103bec:	68fb      	ldr	r3, [r7, #12]
 8103bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103bf2:	b2db      	uxtb	r3, r3
 8103bf4:	2b20      	cmp	r3, #32
 8103bf6:	f040 80da 	bne.w	8103dae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103c00:	2b01      	cmp	r3, #1
 8103c02:	d101      	bne.n	8103c08 <HAL_I2C_Master_Transmit+0x30>
 8103c04:	2302      	movs	r3, #2
 8103c06:	e0d3      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
 8103c08:	68fb      	ldr	r3, [r7, #12]
 8103c0a:	2201      	movs	r2, #1
 8103c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103c10:	f7fe fa2a 	bl	8102068 <HAL_GetTick>
 8103c14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103c16:	697b      	ldr	r3, [r7, #20]
 8103c18:	9300      	str	r3, [sp, #0]
 8103c1a:	2319      	movs	r3, #25
 8103c1c:	2201      	movs	r2, #1
 8103c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103c22:	68f8      	ldr	r0, [r7, #12]
 8103c24:	f000 fb4e 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8103c28:	4603      	mov	r3, r0
 8103c2a:	2b00      	cmp	r3, #0
 8103c2c:	d001      	beq.n	8103c32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8103c2e:	2301      	movs	r3, #1
 8103c30:	e0be      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103c32:	68fb      	ldr	r3, [r7, #12]
 8103c34:	2221      	movs	r2, #33	; 0x21
 8103c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	2210      	movs	r2, #16
 8103c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103c42:	68fb      	ldr	r3, [r7, #12]
 8103c44:	2200      	movs	r2, #0
 8103c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	687a      	ldr	r2, [r7, #4]
 8103c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103c4e:	68fb      	ldr	r3, [r7, #12]
 8103c50:	893a      	ldrh	r2, [r7, #8]
 8103c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103c54:	68fb      	ldr	r3, [r7, #12]
 8103c56:	2200      	movs	r2, #0
 8103c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103c5a:	68fb      	ldr	r3, [r7, #12]
 8103c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103c5e:	b29b      	uxth	r3, r3
 8103c60:	2bff      	cmp	r3, #255	; 0xff
 8103c62:	d90e      	bls.n	8103c82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	22ff      	movs	r2, #255	; 0xff
 8103c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8103c6a:	68fb      	ldr	r3, [r7, #12]
 8103c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103c6e:	b2da      	uxtb	r2, r3
 8103c70:	8979      	ldrh	r1, [r7, #10]
 8103c72:	4b51      	ldr	r3, [pc, #324]	; (8103db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8103c74:	9300      	str	r3, [sp, #0]
 8103c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103c7a:	68f8      	ldr	r0, [r7, #12]
 8103c7c:	f000 fcb0 	bl	81045e0 <I2C_TransferConfig>
 8103c80:	e06c      	b.n	8103d5c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103c82:	68fb      	ldr	r3, [r7, #12]
 8103c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103c86:	b29a      	uxth	r2, r3
 8103c88:	68fb      	ldr	r3, [r7, #12]
 8103c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8103c8c:	68fb      	ldr	r3, [r7, #12]
 8103c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103c90:	b2da      	uxtb	r2, r3
 8103c92:	8979      	ldrh	r1, [r7, #10]
 8103c94:	4b48      	ldr	r3, [pc, #288]	; (8103db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8103c96:	9300      	str	r3, [sp, #0]
 8103c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103c9c:	68f8      	ldr	r0, [r7, #12]
 8103c9e:	f000 fc9f 	bl	81045e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8103ca2:	e05b      	b.n	8103d5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ca4:	697a      	ldr	r2, [r7, #20]
 8103ca6:	6a39      	ldr	r1, [r7, #32]
 8103ca8:	68f8      	ldr	r0, [r7, #12]
 8103caa:	f000 fb4b 	bl	8104344 <I2C_WaitOnTXISFlagUntilTimeout>
 8103cae:	4603      	mov	r3, r0
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d001      	beq.n	8103cb8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8103cb4:	2301      	movs	r3, #1
 8103cb6:	e07b      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cbc:	781a      	ldrb	r2, [r3, #0]
 8103cbe:	68fb      	ldr	r3, [r7, #12]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103cc4:	68fb      	ldr	r3, [r7, #12]
 8103cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cc8:	1c5a      	adds	r2, r3, #1
 8103cca:	68fb      	ldr	r3, [r7, #12]
 8103ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103cce:	68fb      	ldr	r3, [r7, #12]
 8103cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103cd2:	b29b      	uxth	r3, r3
 8103cd4:	3b01      	subs	r3, #1
 8103cd6:	b29a      	uxth	r2, r3
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ce0:	3b01      	subs	r3, #1
 8103ce2:	b29a      	uxth	r2, r3
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103ce8:	68fb      	ldr	r3, [r7, #12]
 8103cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103cec:	b29b      	uxth	r3, r3
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	d034      	beq.n	8103d5c <HAL_I2C_Master_Transmit+0x184>
 8103cf2:	68fb      	ldr	r3, [r7, #12]
 8103cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103cf6:	2b00      	cmp	r3, #0
 8103cf8:	d130      	bne.n	8103d5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103cfa:	697b      	ldr	r3, [r7, #20]
 8103cfc:	9300      	str	r3, [sp, #0]
 8103cfe:	6a3b      	ldr	r3, [r7, #32]
 8103d00:	2200      	movs	r2, #0
 8103d02:	2180      	movs	r1, #128	; 0x80
 8103d04:	68f8      	ldr	r0, [r7, #12]
 8103d06:	f000 fadd 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8103d0a:	4603      	mov	r3, r0
 8103d0c:	2b00      	cmp	r3, #0
 8103d0e:	d001      	beq.n	8103d14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8103d10:	2301      	movs	r3, #1
 8103d12:	e04d      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d18:	b29b      	uxth	r3, r3
 8103d1a:	2bff      	cmp	r3, #255	; 0xff
 8103d1c:	d90e      	bls.n	8103d3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103d1e:	68fb      	ldr	r3, [r7, #12]
 8103d20:	22ff      	movs	r2, #255	; 0xff
 8103d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d28:	b2da      	uxtb	r2, r3
 8103d2a:	8979      	ldrh	r1, [r7, #10]
 8103d2c:	2300      	movs	r3, #0
 8103d2e:	9300      	str	r3, [sp, #0]
 8103d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103d34:	68f8      	ldr	r0, [r7, #12]
 8103d36:	f000 fc53 	bl	81045e0 <I2C_TransferConfig>
 8103d3a:	e00f      	b.n	8103d5c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103d3c:	68fb      	ldr	r3, [r7, #12]
 8103d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d40:	b29a      	uxth	r2, r3
 8103d42:	68fb      	ldr	r3, [r7, #12]
 8103d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103d46:	68fb      	ldr	r3, [r7, #12]
 8103d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d4a:	b2da      	uxtb	r2, r3
 8103d4c:	8979      	ldrh	r1, [r7, #10]
 8103d4e:	2300      	movs	r3, #0
 8103d50:	9300      	str	r3, [sp, #0]
 8103d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103d56:	68f8      	ldr	r0, [r7, #12]
 8103d58:	f000 fc42 	bl	81045e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103d5c:	68fb      	ldr	r3, [r7, #12]
 8103d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d60:	b29b      	uxth	r3, r3
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d19e      	bne.n	8103ca4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103d66:	697a      	ldr	r2, [r7, #20]
 8103d68:	6a39      	ldr	r1, [r7, #32]
 8103d6a:	68f8      	ldr	r0, [r7, #12]
 8103d6c:	f000 fb2a 	bl	81043c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103d70:	4603      	mov	r3, r0
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d001      	beq.n	8103d7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8103d76:	2301      	movs	r3, #1
 8103d78:	e01a      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103d7a:	68fb      	ldr	r3, [r7, #12]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	2220      	movs	r2, #32
 8103d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103d82:	68fb      	ldr	r3, [r7, #12]
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	6859      	ldr	r1, [r3, #4]
 8103d88:	68fb      	ldr	r3, [r7, #12]
 8103d8a:	681a      	ldr	r2, [r3, #0]
 8103d8c:	4b0b      	ldr	r3, [pc, #44]	; (8103dbc <HAL_I2C_Master_Transmit+0x1e4>)
 8103d8e:	400b      	ands	r3, r1
 8103d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103d92:	68fb      	ldr	r3, [r7, #12]
 8103d94:	2220      	movs	r2, #32
 8103d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103d9a:	68fb      	ldr	r3, [r7, #12]
 8103d9c:	2200      	movs	r2, #0
 8103d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	2200      	movs	r2, #0
 8103da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103daa:	2300      	movs	r3, #0
 8103dac:	e000      	b.n	8103db0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8103dae:	2302      	movs	r3, #2
  }
}
 8103db0:	4618      	mov	r0, r3
 8103db2:	3718      	adds	r7, #24
 8103db4:	46bd      	mov	sp, r7
 8103db6:	bd80      	pop	{r7, pc}
 8103db8:	80002000 	.word	0x80002000
 8103dbc:	fe00e800 	.word	0xfe00e800

08103dc0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8103dc0:	b580      	push	{r7, lr}
 8103dc2:	b088      	sub	sp, #32
 8103dc4:	af02      	add	r7, sp, #8
 8103dc6:	60f8      	str	r0, [r7, #12]
 8103dc8:	607a      	str	r2, [r7, #4]
 8103dca:	461a      	mov	r2, r3
 8103dcc:	460b      	mov	r3, r1
 8103dce:	817b      	strh	r3, [r7, #10]
 8103dd0:	4613      	mov	r3, r2
 8103dd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103dda:	b2db      	uxtb	r3, r3
 8103ddc:	2b20      	cmp	r3, #32
 8103dde:	f040 80db 	bne.w	8103f98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103de2:	68fb      	ldr	r3, [r7, #12]
 8103de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103de8:	2b01      	cmp	r3, #1
 8103dea:	d101      	bne.n	8103df0 <HAL_I2C_Master_Receive+0x30>
 8103dec:	2302      	movs	r3, #2
 8103dee:	e0d4      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	2201      	movs	r2, #1
 8103df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103df8:	f7fe f936 	bl	8102068 <HAL_GetTick>
 8103dfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103dfe:	697b      	ldr	r3, [r7, #20]
 8103e00:	9300      	str	r3, [sp, #0]
 8103e02:	2319      	movs	r3, #25
 8103e04:	2201      	movs	r2, #1
 8103e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103e0a:	68f8      	ldr	r0, [r7, #12]
 8103e0c:	f000 fa5a 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8103e10:	4603      	mov	r3, r0
 8103e12:	2b00      	cmp	r3, #0
 8103e14:	d001      	beq.n	8103e1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103e16:	2301      	movs	r3, #1
 8103e18:	e0bf      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	2222      	movs	r2, #34	; 0x22
 8103e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	2210      	movs	r2, #16
 8103e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	2200      	movs	r2, #0
 8103e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	687a      	ldr	r2, [r7, #4]
 8103e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103e36:	68fb      	ldr	r3, [r7, #12]
 8103e38:	893a      	ldrh	r2, [r7, #8]
 8103e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103e3c:	68fb      	ldr	r3, [r7, #12]
 8103e3e:	2200      	movs	r2, #0
 8103e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e46:	b29b      	uxth	r3, r3
 8103e48:	2bff      	cmp	r3, #255	; 0xff
 8103e4a:	d90e      	bls.n	8103e6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	22ff      	movs	r2, #255	; 0xff
 8103e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8103e52:	68fb      	ldr	r3, [r7, #12]
 8103e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e56:	b2da      	uxtb	r2, r3
 8103e58:	8979      	ldrh	r1, [r7, #10]
 8103e5a:	4b52      	ldr	r3, [pc, #328]	; (8103fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8103e5c:	9300      	str	r3, [sp, #0]
 8103e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103e62:	68f8      	ldr	r0, [r7, #12]
 8103e64:	f000 fbbc 	bl	81045e0 <I2C_TransferConfig>
 8103e68:	e06d      	b.n	8103f46 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103e6a:	68fb      	ldr	r3, [r7, #12]
 8103e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e6e:	b29a      	uxth	r2, r3
 8103e70:	68fb      	ldr	r3, [r7, #12]
 8103e72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e78:	b2da      	uxtb	r2, r3
 8103e7a:	8979      	ldrh	r1, [r7, #10]
 8103e7c:	4b49      	ldr	r3, [pc, #292]	; (8103fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8103e7e:	9300      	str	r3, [sp, #0]
 8103e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103e84:	68f8      	ldr	r0, [r7, #12]
 8103e86:	f000 fbab 	bl	81045e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8103e8a:	e05c      	b.n	8103f46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103e8c:	697a      	ldr	r2, [r7, #20]
 8103e8e:	6a39      	ldr	r1, [r7, #32]
 8103e90:	68f8      	ldr	r0, [r7, #12]
 8103e92:	f000 fad3 	bl	810443c <I2C_WaitOnRXNEFlagUntilTimeout>
 8103e96:	4603      	mov	r3, r0
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	d001      	beq.n	8103ea0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103e9c:	2301      	movs	r3, #1
 8103e9e:	e07c      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eaa:	b2d2      	uxtb	r2, r2
 8103eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103eae:	68fb      	ldr	r3, [r7, #12]
 8103eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eb2:	1c5a      	adds	r2, r3, #1
 8103eb4:	68fb      	ldr	r3, [r7, #12]
 8103eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ebc:	3b01      	subs	r3, #1
 8103ebe:	b29a      	uxth	r2, r3
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ec8:	b29b      	uxth	r3, r3
 8103eca:	3b01      	subs	r3, #1
 8103ecc:	b29a      	uxth	r2, r3
 8103ece:	68fb      	ldr	r3, [r7, #12]
 8103ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103ed2:	68fb      	ldr	r3, [r7, #12]
 8103ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ed6:	b29b      	uxth	r3, r3
 8103ed8:	2b00      	cmp	r3, #0
 8103eda:	d034      	beq.n	8103f46 <HAL_I2C_Master_Receive+0x186>
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ee0:	2b00      	cmp	r3, #0
 8103ee2:	d130      	bne.n	8103f46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103ee4:	697b      	ldr	r3, [r7, #20]
 8103ee6:	9300      	str	r3, [sp, #0]
 8103ee8:	6a3b      	ldr	r3, [r7, #32]
 8103eea:	2200      	movs	r2, #0
 8103eec:	2180      	movs	r1, #128	; 0x80
 8103eee:	68f8      	ldr	r0, [r7, #12]
 8103ef0:	f000 f9e8 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8103ef4:	4603      	mov	r3, r0
 8103ef6:	2b00      	cmp	r3, #0
 8103ef8:	d001      	beq.n	8103efe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103efa:	2301      	movs	r3, #1
 8103efc:	e04d      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103efe:	68fb      	ldr	r3, [r7, #12]
 8103f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f02:	b29b      	uxth	r3, r3
 8103f04:	2bff      	cmp	r3, #255	; 0xff
 8103f06:	d90e      	bls.n	8103f26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	22ff      	movs	r2, #255	; 0xff
 8103f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103f0e:	68fb      	ldr	r3, [r7, #12]
 8103f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f12:	b2da      	uxtb	r2, r3
 8103f14:	8979      	ldrh	r1, [r7, #10]
 8103f16:	2300      	movs	r3, #0
 8103f18:	9300      	str	r3, [sp, #0]
 8103f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103f1e:	68f8      	ldr	r0, [r7, #12]
 8103f20:	f000 fb5e 	bl	81045e0 <I2C_TransferConfig>
 8103f24:	e00f      	b.n	8103f46 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103f26:	68fb      	ldr	r3, [r7, #12]
 8103f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f2a:	b29a      	uxth	r2, r3
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f34:	b2da      	uxtb	r2, r3
 8103f36:	8979      	ldrh	r1, [r7, #10]
 8103f38:	2300      	movs	r3, #0
 8103f3a:	9300      	str	r3, [sp, #0]
 8103f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103f40:	68f8      	ldr	r0, [r7, #12]
 8103f42:	f000 fb4d 	bl	81045e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f4a:	b29b      	uxth	r3, r3
 8103f4c:	2b00      	cmp	r3, #0
 8103f4e:	d19d      	bne.n	8103e8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103f50:	697a      	ldr	r2, [r7, #20]
 8103f52:	6a39      	ldr	r1, [r7, #32]
 8103f54:	68f8      	ldr	r0, [r7, #12]
 8103f56:	f000 fa35 	bl	81043c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103f5a:	4603      	mov	r3, r0
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d001      	beq.n	8103f64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103f60:	2301      	movs	r3, #1
 8103f62:	e01a      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103f64:	68fb      	ldr	r3, [r7, #12]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	2220      	movs	r2, #32
 8103f6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103f6c:	68fb      	ldr	r3, [r7, #12]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	6859      	ldr	r1, [r3, #4]
 8103f72:	68fb      	ldr	r3, [r7, #12]
 8103f74:	681a      	ldr	r2, [r3, #0]
 8103f76:	4b0c      	ldr	r3, [pc, #48]	; (8103fa8 <HAL_I2C_Master_Receive+0x1e8>)
 8103f78:	400b      	ands	r3, r1
 8103f7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	2220      	movs	r2, #32
 8103f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	2200      	movs	r2, #0
 8103f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	2200      	movs	r2, #0
 8103f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103f94:	2300      	movs	r3, #0
 8103f96:	e000      	b.n	8103f9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103f98:	2302      	movs	r3, #2
  }
}
 8103f9a:	4618      	mov	r0, r3
 8103f9c:	3718      	adds	r7, #24
 8103f9e:	46bd      	mov	sp, r7
 8103fa0:	bd80      	pop	{r7, pc}
 8103fa2:	bf00      	nop
 8103fa4:	80002400 	.word	0x80002400
 8103fa8:	fe00e800 	.word	0xfe00e800

08103fac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103fac:	b580      	push	{r7, lr}
 8103fae:	b088      	sub	sp, #32
 8103fb0:	af02      	add	r7, sp, #8
 8103fb2:	60f8      	str	r0, [r7, #12]
 8103fb4:	4608      	mov	r0, r1
 8103fb6:	4611      	mov	r1, r2
 8103fb8:	461a      	mov	r2, r3
 8103fba:	4603      	mov	r3, r0
 8103fbc:	817b      	strh	r3, [r7, #10]
 8103fbe:	460b      	mov	r3, r1
 8103fc0:	813b      	strh	r3, [r7, #8]
 8103fc2:	4613      	mov	r3, r2
 8103fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103fcc:	b2db      	uxtb	r3, r3
 8103fce:	2b20      	cmp	r3, #32
 8103fd0:	f040 80f9 	bne.w	81041c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103fd4:	6a3b      	ldr	r3, [r7, #32]
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	d002      	beq.n	8103fe0 <HAL_I2C_Mem_Write+0x34>
 8103fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d105      	bne.n	8103fec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103fe6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103fe8:	2301      	movs	r3, #1
 8103fea:	e0ed      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103ff2:	2b01      	cmp	r3, #1
 8103ff4:	d101      	bne.n	8103ffa <HAL_I2C_Mem_Write+0x4e>
 8103ff6:	2302      	movs	r3, #2
 8103ff8:	e0e6      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	2201      	movs	r2, #1
 8103ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104002:	f7fe f831 	bl	8102068 <HAL_GetTick>
 8104006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104008:	697b      	ldr	r3, [r7, #20]
 810400a:	9300      	str	r3, [sp, #0]
 810400c:	2319      	movs	r3, #25
 810400e:	2201      	movs	r2, #1
 8104010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104014:	68f8      	ldr	r0, [r7, #12]
 8104016:	f000 f955 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 810401a:	4603      	mov	r3, r0
 810401c:	2b00      	cmp	r3, #0
 810401e:	d001      	beq.n	8104024 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104020:	2301      	movs	r3, #1
 8104022:	e0d1      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	2221      	movs	r2, #33	; 0x21
 8104028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810402c:	68fb      	ldr	r3, [r7, #12]
 810402e:	2240      	movs	r2, #64	; 0x40
 8104030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	2200      	movs	r2, #0
 8104038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	6a3a      	ldr	r2, [r7, #32]
 810403e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104046:	68fb      	ldr	r3, [r7, #12]
 8104048:	2200      	movs	r2, #0
 810404a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810404c:	88f8      	ldrh	r0, [r7, #6]
 810404e:	893a      	ldrh	r2, [r7, #8]
 8104050:	8979      	ldrh	r1, [r7, #10]
 8104052:	697b      	ldr	r3, [r7, #20]
 8104054:	9301      	str	r3, [sp, #4]
 8104056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104058:	9300      	str	r3, [sp, #0]
 810405a:	4603      	mov	r3, r0
 810405c:	68f8      	ldr	r0, [r7, #12]
 810405e:	f000 f8b9 	bl	81041d4 <I2C_RequestMemoryWrite>
 8104062:	4603      	mov	r3, r0
 8104064:	2b00      	cmp	r3, #0
 8104066:	d005      	beq.n	8104074 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104068:	68fb      	ldr	r3, [r7, #12]
 810406a:	2200      	movs	r2, #0
 810406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104070:	2301      	movs	r3, #1
 8104072:	e0a9      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104078:	b29b      	uxth	r3, r3
 810407a:	2bff      	cmp	r3, #255	; 0xff
 810407c:	d90e      	bls.n	810409c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	22ff      	movs	r2, #255	; 0xff
 8104082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104088:	b2da      	uxtb	r2, r3
 810408a:	8979      	ldrh	r1, [r7, #10]
 810408c:	2300      	movs	r3, #0
 810408e:	9300      	str	r3, [sp, #0]
 8104090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104094:	68f8      	ldr	r0, [r7, #12]
 8104096:	f000 faa3 	bl	81045e0 <I2C_TransferConfig>
 810409a:	e00f      	b.n	81040bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040a0:	b29a      	uxth	r2, r3
 81040a2:	68fb      	ldr	r3, [r7, #12]
 81040a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040aa:	b2da      	uxtb	r2, r3
 81040ac:	8979      	ldrh	r1, [r7, #10]
 81040ae:	2300      	movs	r3, #0
 81040b0:	9300      	str	r3, [sp, #0]
 81040b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81040b6:	68f8      	ldr	r0, [r7, #12]
 81040b8:	f000 fa92 	bl	81045e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81040bc:	697a      	ldr	r2, [r7, #20]
 81040be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81040c0:	68f8      	ldr	r0, [r7, #12]
 81040c2:	f000 f93f 	bl	8104344 <I2C_WaitOnTXISFlagUntilTimeout>
 81040c6:	4603      	mov	r3, r0
 81040c8:	2b00      	cmp	r3, #0
 81040ca:	d001      	beq.n	81040d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81040cc:	2301      	movs	r3, #1
 81040ce:	e07b      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040d4:	781a      	ldrb	r2, [r3, #0]
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81040dc:	68fb      	ldr	r3, [r7, #12]
 81040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040e0:	1c5a      	adds	r2, r3, #1
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040ea:	b29b      	uxth	r3, r3
 81040ec:	3b01      	subs	r3, #1
 81040ee:	b29a      	uxth	r2, r3
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81040f4:	68fb      	ldr	r3, [r7, #12]
 81040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040f8:	3b01      	subs	r3, #1
 81040fa:	b29a      	uxth	r2, r3
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104104:	b29b      	uxth	r3, r3
 8104106:	2b00      	cmp	r3, #0
 8104108:	d034      	beq.n	8104174 <HAL_I2C_Mem_Write+0x1c8>
 810410a:	68fb      	ldr	r3, [r7, #12]
 810410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810410e:	2b00      	cmp	r3, #0
 8104110:	d130      	bne.n	8104174 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104112:	697b      	ldr	r3, [r7, #20]
 8104114:	9300      	str	r3, [sp, #0]
 8104116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104118:	2200      	movs	r2, #0
 810411a:	2180      	movs	r1, #128	; 0x80
 810411c:	68f8      	ldr	r0, [r7, #12]
 810411e:	f000 f8d1 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8104122:	4603      	mov	r3, r0
 8104124:	2b00      	cmp	r3, #0
 8104126:	d001      	beq.n	810412c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104128:	2301      	movs	r3, #1
 810412a:	e04d      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104130:	b29b      	uxth	r3, r3
 8104132:	2bff      	cmp	r3, #255	; 0xff
 8104134:	d90e      	bls.n	8104154 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104136:	68fb      	ldr	r3, [r7, #12]
 8104138:	22ff      	movs	r2, #255	; 0xff
 810413a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104140:	b2da      	uxtb	r2, r3
 8104142:	8979      	ldrh	r1, [r7, #10]
 8104144:	2300      	movs	r3, #0
 8104146:	9300      	str	r3, [sp, #0]
 8104148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810414c:	68f8      	ldr	r0, [r7, #12]
 810414e:	f000 fa47 	bl	81045e0 <I2C_TransferConfig>
 8104152:	e00f      	b.n	8104174 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104154:	68fb      	ldr	r3, [r7, #12]
 8104156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104158:	b29a      	uxth	r2, r3
 810415a:	68fb      	ldr	r3, [r7, #12]
 810415c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104162:	b2da      	uxtb	r2, r3
 8104164:	8979      	ldrh	r1, [r7, #10]
 8104166:	2300      	movs	r3, #0
 8104168:	9300      	str	r3, [sp, #0]
 810416a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810416e:	68f8      	ldr	r0, [r7, #12]
 8104170:	f000 fa36 	bl	81045e0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104178:	b29b      	uxth	r3, r3
 810417a:	2b00      	cmp	r3, #0
 810417c:	d19e      	bne.n	81040bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810417e:	697a      	ldr	r2, [r7, #20]
 8104180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104182:	68f8      	ldr	r0, [r7, #12]
 8104184:	f000 f91e 	bl	81043c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104188:	4603      	mov	r3, r0
 810418a:	2b00      	cmp	r3, #0
 810418c:	d001      	beq.n	8104192 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810418e:	2301      	movs	r3, #1
 8104190:	e01a      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	2220      	movs	r2, #32
 8104198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	6859      	ldr	r1, [r3, #4]
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	681a      	ldr	r2, [r3, #0]
 81041a4:	4b0a      	ldr	r3, [pc, #40]	; (81041d0 <HAL_I2C_Mem_Write+0x224>)
 81041a6:	400b      	ands	r3, r1
 81041a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81041aa:	68fb      	ldr	r3, [r7, #12]
 81041ac:	2220      	movs	r2, #32
 81041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	2200      	movs	r2, #0
 81041b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	2200      	movs	r2, #0
 81041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81041c2:	2300      	movs	r3, #0
 81041c4:	e000      	b.n	81041c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81041c6:	2302      	movs	r3, #2
  }
}
 81041c8:	4618      	mov	r0, r3
 81041ca:	3718      	adds	r7, #24
 81041cc:	46bd      	mov	sp, r7
 81041ce:	bd80      	pop	{r7, pc}
 81041d0:	fe00e800 	.word	0xfe00e800

081041d4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81041d4:	b580      	push	{r7, lr}
 81041d6:	b086      	sub	sp, #24
 81041d8:	af02      	add	r7, sp, #8
 81041da:	60f8      	str	r0, [r7, #12]
 81041dc:	4608      	mov	r0, r1
 81041de:	4611      	mov	r1, r2
 81041e0:	461a      	mov	r2, r3
 81041e2:	4603      	mov	r3, r0
 81041e4:	817b      	strh	r3, [r7, #10]
 81041e6:	460b      	mov	r3, r1
 81041e8:	813b      	strh	r3, [r7, #8]
 81041ea:	4613      	mov	r3, r2
 81041ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81041ee:	88fb      	ldrh	r3, [r7, #6]
 81041f0:	b2da      	uxtb	r2, r3
 81041f2:	8979      	ldrh	r1, [r7, #10]
 81041f4:	4b20      	ldr	r3, [pc, #128]	; (8104278 <I2C_RequestMemoryWrite+0xa4>)
 81041f6:	9300      	str	r3, [sp, #0]
 81041f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81041fc:	68f8      	ldr	r0, [r7, #12]
 81041fe:	f000 f9ef 	bl	81045e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104202:	69fa      	ldr	r2, [r7, #28]
 8104204:	69b9      	ldr	r1, [r7, #24]
 8104206:	68f8      	ldr	r0, [r7, #12]
 8104208:	f000 f89c 	bl	8104344 <I2C_WaitOnTXISFlagUntilTimeout>
 810420c:	4603      	mov	r3, r0
 810420e:	2b00      	cmp	r3, #0
 8104210:	d001      	beq.n	8104216 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104212:	2301      	movs	r3, #1
 8104214:	e02c      	b.n	8104270 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104216:	88fb      	ldrh	r3, [r7, #6]
 8104218:	2b01      	cmp	r3, #1
 810421a:	d105      	bne.n	8104228 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810421c:	893b      	ldrh	r3, [r7, #8]
 810421e:	b2da      	uxtb	r2, r3
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	629a      	str	r2, [r3, #40]	; 0x28
 8104226:	e015      	b.n	8104254 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104228:	893b      	ldrh	r3, [r7, #8]
 810422a:	0a1b      	lsrs	r3, r3, #8
 810422c:	b29b      	uxth	r3, r3
 810422e:	b2da      	uxtb	r2, r3
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104236:	69fa      	ldr	r2, [r7, #28]
 8104238:	69b9      	ldr	r1, [r7, #24]
 810423a:	68f8      	ldr	r0, [r7, #12]
 810423c:	f000 f882 	bl	8104344 <I2C_WaitOnTXISFlagUntilTimeout>
 8104240:	4603      	mov	r3, r0
 8104242:	2b00      	cmp	r3, #0
 8104244:	d001      	beq.n	810424a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8104246:	2301      	movs	r3, #1
 8104248:	e012      	b.n	8104270 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810424a:	893b      	ldrh	r3, [r7, #8]
 810424c:	b2da      	uxtb	r2, r3
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104254:	69fb      	ldr	r3, [r7, #28]
 8104256:	9300      	str	r3, [sp, #0]
 8104258:	69bb      	ldr	r3, [r7, #24]
 810425a:	2200      	movs	r2, #0
 810425c:	2180      	movs	r1, #128	; 0x80
 810425e:	68f8      	ldr	r0, [r7, #12]
 8104260:	f000 f830 	bl	81042c4 <I2C_WaitOnFlagUntilTimeout>
 8104264:	4603      	mov	r3, r0
 8104266:	2b00      	cmp	r3, #0
 8104268:	d001      	beq.n	810426e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810426a:	2301      	movs	r3, #1
 810426c:	e000      	b.n	8104270 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810426e:	2300      	movs	r3, #0
}
 8104270:	4618      	mov	r0, r3
 8104272:	3710      	adds	r7, #16
 8104274:	46bd      	mov	sp, r7
 8104276:	bd80      	pop	{r7, pc}
 8104278:	80002000 	.word	0x80002000

0810427c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810427c:	b480      	push	{r7}
 810427e:	b083      	sub	sp, #12
 8104280:	af00      	add	r7, sp, #0
 8104282:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	699b      	ldr	r3, [r3, #24]
 810428a:	f003 0302 	and.w	r3, r3, #2
 810428e:	2b02      	cmp	r3, #2
 8104290:	d103      	bne.n	810429a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	2200      	movs	r2, #0
 8104298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	699b      	ldr	r3, [r3, #24]
 81042a0:	f003 0301 	and.w	r3, r3, #1
 81042a4:	2b01      	cmp	r3, #1
 81042a6:	d007      	beq.n	81042b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	699a      	ldr	r2, [r3, #24]
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	f042 0201 	orr.w	r2, r2, #1
 81042b6:	619a      	str	r2, [r3, #24]
  }
}
 81042b8:	bf00      	nop
 81042ba:	370c      	adds	r7, #12
 81042bc:	46bd      	mov	sp, r7
 81042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c2:	4770      	bx	lr

081042c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81042c4:	b580      	push	{r7, lr}
 81042c6:	b084      	sub	sp, #16
 81042c8:	af00      	add	r7, sp, #0
 81042ca:	60f8      	str	r0, [r7, #12]
 81042cc:	60b9      	str	r1, [r7, #8]
 81042ce:	603b      	str	r3, [r7, #0]
 81042d0:	4613      	mov	r3, r2
 81042d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81042d4:	e022      	b.n	810431c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81042d6:	683b      	ldr	r3, [r7, #0]
 81042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81042dc:	d01e      	beq.n	810431c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81042de:	f7fd fec3 	bl	8102068 <HAL_GetTick>
 81042e2:	4602      	mov	r2, r0
 81042e4:	69bb      	ldr	r3, [r7, #24]
 81042e6:	1ad3      	subs	r3, r2, r3
 81042e8:	683a      	ldr	r2, [r7, #0]
 81042ea:	429a      	cmp	r2, r3
 81042ec:	d302      	bcc.n	81042f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 81042ee:	683b      	ldr	r3, [r7, #0]
 81042f0:	2b00      	cmp	r3, #0
 81042f2:	d113      	bne.n	810431c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042f8:	f043 0220 	orr.w	r2, r3, #32
 81042fc:	68fb      	ldr	r3, [r7, #12]
 81042fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	2220      	movs	r2, #32
 8104304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	2200      	movs	r2, #0
 810430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	2200      	movs	r2, #0
 8104314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8104318:	2301      	movs	r3, #1
 810431a:	e00f      	b.n	810433c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	699a      	ldr	r2, [r3, #24]
 8104322:	68bb      	ldr	r3, [r7, #8]
 8104324:	4013      	ands	r3, r2
 8104326:	68ba      	ldr	r2, [r7, #8]
 8104328:	429a      	cmp	r2, r3
 810432a:	bf0c      	ite	eq
 810432c:	2301      	moveq	r3, #1
 810432e:	2300      	movne	r3, #0
 8104330:	b2db      	uxtb	r3, r3
 8104332:	461a      	mov	r2, r3
 8104334:	79fb      	ldrb	r3, [r7, #7]
 8104336:	429a      	cmp	r2, r3
 8104338:	d0cd      	beq.n	81042d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810433a:	2300      	movs	r3, #0
}
 810433c:	4618      	mov	r0, r3
 810433e:	3710      	adds	r7, #16
 8104340:	46bd      	mov	sp, r7
 8104342:	bd80      	pop	{r7, pc}

08104344 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104344:	b580      	push	{r7, lr}
 8104346:	b084      	sub	sp, #16
 8104348:	af00      	add	r7, sp, #0
 810434a:	60f8      	str	r0, [r7, #12]
 810434c:	60b9      	str	r1, [r7, #8]
 810434e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104350:	e02c      	b.n	81043ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8104352:	687a      	ldr	r2, [r7, #4]
 8104354:	68b9      	ldr	r1, [r7, #8]
 8104356:	68f8      	ldr	r0, [r7, #12]
 8104358:	f000 f8dc 	bl	8104514 <I2C_IsAcknowledgeFailed>
 810435c:	4603      	mov	r3, r0
 810435e:	2b00      	cmp	r3, #0
 8104360:	d001      	beq.n	8104366 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104362:	2301      	movs	r3, #1
 8104364:	e02a      	b.n	81043bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104366:	68bb      	ldr	r3, [r7, #8]
 8104368:	f1b3 3fff 	cmp.w	r3, #4294967295
 810436c:	d01e      	beq.n	81043ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810436e:	f7fd fe7b 	bl	8102068 <HAL_GetTick>
 8104372:	4602      	mov	r2, r0
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	1ad3      	subs	r3, r2, r3
 8104378:	68ba      	ldr	r2, [r7, #8]
 810437a:	429a      	cmp	r2, r3
 810437c:	d302      	bcc.n	8104384 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810437e:	68bb      	ldr	r3, [r7, #8]
 8104380:	2b00      	cmp	r3, #0
 8104382:	d113      	bne.n	81043ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104388:	f043 0220 	orr.w	r2, r3, #32
 810438c:	68fb      	ldr	r3, [r7, #12]
 810438e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	2220      	movs	r2, #32
 8104394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	2200      	movs	r2, #0
 810439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	2200      	movs	r2, #0
 81043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81043a8:	2301      	movs	r3, #1
 81043aa:	e007      	b.n	81043bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	699b      	ldr	r3, [r3, #24]
 81043b2:	f003 0302 	and.w	r3, r3, #2
 81043b6:	2b02      	cmp	r3, #2
 81043b8:	d1cb      	bne.n	8104352 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81043ba:	2300      	movs	r3, #0
}
 81043bc:	4618      	mov	r0, r3
 81043be:	3710      	adds	r7, #16
 81043c0:	46bd      	mov	sp, r7
 81043c2:	bd80      	pop	{r7, pc}

081043c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81043c4:	b580      	push	{r7, lr}
 81043c6:	b084      	sub	sp, #16
 81043c8:	af00      	add	r7, sp, #0
 81043ca:	60f8      	str	r0, [r7, #12]
 81043cc:	60b9      	str	r1, [r7, #8]
 81043ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81043d0:	e028      	b.n	8104424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81043d2:	687a      	ldr	r2, [r7, #4]
 81043d4:	68b9      	ldr	r1, [r7, #8]
 81043d6:	68f8      	ldr	r0, [r7, #12]
 81043d8:	f000 f89c 	bl	8104514 <I2C_IsAcknowledgeFailed>
 81043dc:	4603      	mov	r3, r0
 81043de:	2b00      	cmp	r3, #0
 81043e0:	d001      	beq.n	81043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81043e2:	2301      	movs	r3, #1
 81043e4:	e026      	b.n	8104434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81043e6:	f7fd fe3f 	bl	8102068 <HAL_GetTick>
 81043ea:	4602      	mov	r2, r0
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	1ad3      	subs	r3, r2, r3
 81043f0:	68ba      	ldr	r2, [r7, #8]
 81043f2:	429a      	cmp	r2, r3
 81043f4:	d302      	bcc.n	81043fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81043f6:	68bb      	ldr	r3, [r7, #8]
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	d113      	bne.n	8104424 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104400:	f043 0220 	orr.w	r2, r3, #32
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	2220      	movs	r2, #32
 810440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	2200      	movs	r2, #0
 8104414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	2200      	movs	r2, #0
 810441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8104420:	2301      	movs	r3, #1
 8104422:	e007      	b.n	8104434 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	699b      	ldr	r3, [r3, #24]
 810442a:	f003 0320 	and.w	r3, r3, #32
 810442e:	2b20      	cmp	r3, #32
 8104430:	d1cf      	bne.n	81043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104432:	2300      	movs	r3, #0
}
 8104434:	4618      	mov	r0, r3
 8104436:	3710      	adds	r7, #16
 8104438:	46bd      	mov	sp, r7
 810443a:	bd80      	pop	{r7, pc}

0810443c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810443c:	b580      	push	{r7, lr}
 810443e:	b084      	sub	sp, #16
 8104440:	af00      	add	r7, sp, #0
 8104442:	60f8      	str	r0, [r7, #12]
 8104444:	60b9      	str	r1, [r7, #8]
 8104446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8104448:	e055      	b.n	81044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810444a:	687a      	ldr	r2, [r7, #4]
 810444c:	68b9      	ldr	r1, [r7, #8]
 810444e:	68f8      	ldr	r0, [r7, #12]
 8104450:	f000 f860 	bl	8104514 <I2C_IsAcknowledgeFailed>
 8104454:	4603      	mov	r3, r0
 8104456:	2b00      	cmp	r3, #0
 8104458:	d001      	beq.n	810445e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810445a:	2301      	movs	r3, #1
 810445c:	e053      	b.n	8104506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	699b      	ldr	r3, [r3, #24]
 8104464:	f003 0320 	and.w	r3, r3, #32
 8104468:	2b20      	cmp	r3, #32
 810446a:	d129      	bne.n	81044c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	699b      	ldr	r3, [r3, #24]
 8104472:	f003 0304 	and.w	r3, r3, #4
 8104476:	2b04      	cmp	r3, #4
 8104478:	d105      	bne.n	8104486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810447e:	2b00      	cmp	r3, #0
 8104480:	d001      	beq.n	8104486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8104482:	2300      	movs	r3, #0
 8104484:	e03f      	b.n	8104506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	2220      	movs	r2, #32
 810448c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	6859      	ldr	r1, [r3, #4]
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	681a      	ldr	r2, [r3, #0]
 8104498:	4b1d      	ldr	r3, [pc, #116]	; (8104510 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 810449a:	400b      	ands	r3, r1
 810449c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810449e:	68fb      	ldr	r3, [r7, #12]
 81044a0:	2200      	movs	r2, #0
 81044a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81044a4:	68fb      	ldr	r3, [r7, #12]
 81044a6:	2220      	movs	r2, #32
 81044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81044ac:	68fb      	ldr	r3, [r7, #12]
 81044ae:	2200      	movs	r2, #0
 81044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81044b4:	68fb      	ldr	r3, [r7, #12]
 81044b6:	2200      	movs	r2, #0
 81044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81044bc:	2301      	movs	r3, #1
 81044be:	e022      	b.n	8104506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81044c0:	f7fd fdd2 	bl	8102068 <HAL_GetTick>
 81044c4:	4602      	mov	r2, r0
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	1ad3      	subs	r3, r2, r3
 81044ca:	68ba      	ldr	r2, [r7, #8]
 81044cc:	429a      	cmp	r2, r3
 81044ce:	d302      	bcc.n	81044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 81044d0:	68bb      	ldr	r3, [r7, #8]
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d10f      	bne.n	81044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81044d6:	68fb      	ldr	r3, [r7, #12]
 81044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044da:	f043 0220 	orr.w	r2, r3, #32
 81044de:	68fb      	ldr	r3, [r7, #12]
 81044e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	2220      	movs	r2, #32
 81044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81044ea:	68fb      	ldr	r3, [r7, #12]
 81044ec:	2200      	movs	r2, #0
 81044ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81044f2:	2301      	movs	r3, #1
 81044f4:	e007      	b.n	8104506 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	699b      	ldr	r3, [r3, #24]
 81044fc:	f003 0304 	and.w	r3, r3, #4
 8104500:	2b04      	cmp	r3, #4
 8104502:	d1a2      	bne.n	810444a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104504:	2300      	movs	r3, #0
}
 8104506:	4618      	mov	r0, r3
 8104508:	3710      	adds	r7, #16
 810450a:	46bd      	mov	sp, r7
 810450c:	bd80      	pop	{r7, pc}
 810450e:	bf00      	nop
 8104510:	fe00e800 	.word	0xfe00e800

08104514 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104514:	b580      	push	{r7, lr}
 8104516:	b084      	sub	sp, #16
 8104518:	af00      	add	r7, sp, #0
 810451a:	60f8      	str	r0, [r7, #12]
 810451c:	60b9      	str	r1, [r7, #8]
 810451e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	699b      	ldr	r3, [r3, #24]
 8104526:	f003 0310 	and.w	r3, r3, #16
 810452a:	2b10      	cmp	r3, #16
 810452c:	d151      	bne.n	81045d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810452e:	e022      	b.n	8104576 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104530:	68bb      	ldr	r3, [r7, #8]
 8104532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104536:	d01e      	beq.n	8104576 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104538:	f7fd fd96 	bl	8102068 <HAL_GetTick>
 810453c:	4602      	mov	r2, r0
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	1ad3      	subs	r3, r2, r3
 8104542:	68ba      	ldr	r2, [r7, #8]
 8104544:	429a      	cmp	r2, r3
 8104546:	d302      	bcc.n	810454e <I2C_IsAcknowledgeFailed+0x3a>
 8104548:	68bb      	ldr	r3, [r7, #8]
 810454a:	2b00      	cmp	r3, #0
 810454c:	d113      	bne.n	8104576 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104552:	f043 0220 	orr.w	r2, r3, #32
 8104556:	68fb      	ldr	r3, [r7, #12]
 8104558:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	2220      	movs	r2, #32
 810455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104562:	68fb      	ldr	r3, [r7, #12]
 8104564:	2200      	movs	r2, #0
 8104566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810456a:	68fb      	ldr	r3, [r7, #12]
 810456c:	2200      	movs	r2, #0
 810456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8104572:	2301      	movs	r3, #1
 8104574:	e02e      	b.n	81045d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104576:	68fb      	ldr	r3, [r7, #12]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	699b      	ldr	r3, [r3, #24]
 810457c:	f003 0320 	and.w	r3, r3, #32
 8104580:	2b20      	cmp	r3, #32
 8104582:	d1d5      	bne.n	8104530 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104584:	68fb      	ldr	r3, [r7, #12]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	2210      	movs	r2, #16
 810458a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810458c:	68fb      	ldr	r3, [r7, #12]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	2220      	movs	r2, #32
 8104592:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104594:	68f8      	ldr	r0, [r7, #12]
 8104596:	f7ff fe71 	bl	810427c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810459a:	68fb      	ldr	r3, [r7, #12]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	6859      	ldr	r1, [r3, #4]
 81045a0:	68fb      	ldr	r3, [r7, #12]
 81045a2:	681a      	ldr	r2, [r3, #0]
 81045a4:	4b0d      	ldr	r3, [pc, #52]	; (81045dc <I2C_IsAcknowledgeFailed+0xc8>)
 81045a6:	400b      	ands	r3, r1
 81045a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045ae:	f043 0204 	orr.w	r2, r3, #4
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81045b6:	68fb      	ldr	r3, [r7, #12]
 81045b8:	2220      	movs	r2, #32
 81045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81045be:	68fb      	ldr	r3, [r7, #12]
 81045c0:	2200      	movs	r2, #0
 81045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81045c6:	68fb      	ldr	r3, [r7, #12]
 81045c8:	2200      	movs	r2, #0
 81045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81045ce:	2301      	movs	r3, #1
 81045d0:	e000      	b.n	81045d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81045d2:	2300      	movs	r3, #0
}
 81045d4:	4618      	mov	r0, r3
 81045d6:	3710      	adds	r7, #16
 81045d8:	46bd      	mov	sp, r7
 81045da:	bd80      	pop	{r7, pc}
 81045dc:	fe00e800 	.word	0xfe00e800

081045e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81045e0:	b480      	push	{r7}
 81045e2:	b085      	sub	sp, #20
 81045e4:	af00      	add	r7, sp, #0
 81045e6:	60f8      	str	r0, [r7, #12]
 81045e8:	607b      	str	r3, [r7, #4]
 81045ea:	460b      	mov	r3, r1
 81045ec:	817b      	strh	r3, [r7, #10]
 81045ee:	4613      	mov	r3, r2
 81045f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	685a      	ldr	r2, [r3, #4]
 81045f8:	69bb      	ldr	r3, [r7, #24]
 81045fa:	0d5b      	lsrs	r3, r3, #21
 81045fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8104600:	4b0d      	ldr	r3, [pc, #52]	; (8104638 <I2C_TransferConfig+0x58>)
 8104602:	430b      	orrs	r3, r1
 8104604:	43db      	mvns	r3, r3
 8104606:	ea02 0103 	and.w	r1, r2, r3
 810460a:	897b      	ldrh	r3, [r7, #10]
 810460c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8104610:	7a7b      	ldrb	r3, [r7, #9]
 8104612:	041b      	lsls	r3, r3, #16
 8104614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8104618:	431a      	orrs	r2, r3
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	431a      	orrs	r2, r3
 810461e:	69bb      	ldr	r3, [r7, #24]
 8104620:	431a      	orrs	r2, r3
 8104622:	68fb      	ldr	r3, [r7, #12]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	430a      	orrs	r2, r1
 8104628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 810462a:	bf00      	nop
 810462c:	3714      	adds	r7, #20
 810462e:	46bd      	mov	sp, r7
 8104630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104634:	4770      	bx	lr
 8104636:	bf00      	nop
 8104638:	03ff63ff 	.word	0x03ff63ff

0810463c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810463c:	b480      	push	{r7}
 810463e:	b083      	sub	sp, #12
 8104640:	af00      	add	r7, sp, #0
 8104642:	6078      	str	r0, [r7, #4]
 8104644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810464c:	b2db      	uxtb	r3, r3
 810464e:	2b20      	cmp	r3, #32
 8104650:	d138      	bne.n	81046c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104658:	2b01      	cmp	r3, #1
 810465a:	d101      	bne.n	8104660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810465c:	2302      	movs	r3, #2
 810465e:	e032      	b.n	81046c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	2201      	movs	r2, #1
 8104664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	2224      	movs	r2, #36	; 0x24
 810466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	681b      	ldr	r3, [r3, #0]
 8104674:	681a      	ldr	r2, [r3, #0]
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	f022 0201 	bic.w	r2, r2, #1
 810467e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	681a      	ldr	r2, [r3, #0]
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810468e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	6819      	ldr	r1, [r3, #0]
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	683a      	ldr	r2, [r7, #0]
 810469c:	430a      	orrs	r2, r1
 810469e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	681a      	ldr	r2, [r3, #0]
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	f042 0201 	orr.w	r2, r2, #1
 81046ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	2220      	movs	r2, #32
 81046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	2200      	movs	r2, #0
 81046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81046c0:	2300      	movs	r3, #0
 81046c2:	e000      	b.n	81046c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81046c4:	2302      	movs	r3, #2
  }
}
 81046c6:	4618      	mov	r0, r3
 81046c8:	370c      	adds	r7, #12
 81046ca:	46bd      	mov	sp, r7
 81046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d0:	4770      	bx	lr

081046d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81046d2:	b480      	push	{r7}
 81046d4:	b085      	sub	sp, #20
 81046d6:	af00      	add	r7, sp, #0
 81046d8:	6078      	str	r0, [r7, #4]
 81046da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81046e2:	b2db      	uxtb	r3, r3
 81046e4:	2b20      	cmp	r3, #32
 81046e6:	d139      	bne.n	810475c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81046ee:	2b01      	cmp	r3, #1
 81046f0:	d101      	bne.n	81046f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81046f2:	2302      	movs	r3, #2
 81046f4:	e033      	b.n	810475e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	2201      	movs	r2, #1
 81046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	2224      	movs	r2, #36	; 0x24
 8104702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	681a      	ldr	r2, [r3, #0]
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	681b      	ldr	r3, [r3, #0]
 8104710:	f022 0201 	bic.w	r2, r2, #1
 8104714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104726:	683b      	ldr	r3, [r7, #0]
 8104728:	021b      	lsls	r3, r3, #8
 810472a:	68fa      	ldr	r2, [r7, #12]
 810472c:	4313      	orrs	r3, r2
 810472e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	68fa      	ldr	r2, [r7, #12]
 8104736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	681a      	ldr	r2, [r3, #0]
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	f042 0201 	orr.w	r2, r2, #1
 8104746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	2220      	movs	r2, #32
 810474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	2200      	movs	r2, #0
 8104754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104758:	2300      	movs	r3, #0
 810475a:	e000      	b.n	810475e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810475c:	2302      	movs	r3, #2
  }
}
 810475e:	4618      	mov	r0, r3
 8104760:	3714      	adds	r7, #20
 8104762:	46bd      	mov	sp, r7
 8104764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104768:	4770      	bx	lr
	...

0810476c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810476c:	b580      	push	{r7, lr}
 810476e:	b084      	sub	sp, #16
 8104770:	af00      	add	r7, sp, #0
 8104772:	60f8      	str	r0, [r7, #12]
 8104774:	460b      	mov	r3, r1
 8104776:	607a      	str	r2, [r7, #4]
 8104778:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810477a:	4b37      	ldr	r3, [pc, #220]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	f023 0201 	bic.w	r2, r3, #1
 8104782:	4935      	ldr	r1, [pc, #212]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104784:	68fb      	ldr	r3, [r7, #12]
 8104786:	4313      	orrs	r3, r2
 8104788:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	2b00      	cmp	r3, #0
 810478e:	d123      	bne.n	81047d8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104790:	f7fe ffa2 	bl	81036d8 <HAL_GetCurrentCPUID>
 8104794:	4603      	mov	r3, r0
 8104796:	2b03      	cmp	r3, #3
 8104798:	d158      	bne.n	810484c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810479a:	4b2f      	ldr	r3, [pc, #188]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 810479c:	691b      	ldr	r3, [r3, #16]
 810479e:	4a2e      	ldr	r2, [pc, #184]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047a0:	f023 0301 	bic.w	r3, r3, #1
 81047a4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047a6:	4b2d      	ldr	r3, [pc, #180]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047a8:	691b      	ldr	r3, [r3, #16]
 81047aa:	4a2c      	ldr	r2, [pc, #176]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047ac:	f043 0304 	orr.w	r3, r3, #4
 81047b0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81047b2:	f3bf 8f4f 	dsb	sy
}
 81047b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81047b8:	f3bf 8f6f 	isb	sy
}
 81047bc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81047be:	7afb      	ldrb	r3, [r7, #11]
 81047c0:	2b01      	cmp	r3, #1
 81047c2:	d101      	bne.n	81047c8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81047c4:	bf30      	wfi
 81047c6:	e000      	b.n	81047ca <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81047c8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047ca:	4b24      	ldr	r3, [pc, #144]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047cc:	691b      	ldr	r3, [r3, #16]
 81047ce:	4a23      	ldr	r2, [pc, #140]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047d0:	f023 0304 	bic.w	r3, r3, #4
 81047d4:	6113      	str	r3, [r2, #16]
 81047d6:	e03c      	b.n	8104852 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	2b01      	cmp	r3, #1
 81047dc:	d123      	bne.n	8104826 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81047de:	f7fe ff7b 	bl	81036d8 <HAL_GetCurrentCPUID>
 81047e2:	4603      	mov	r3, r0
 81047e4:	2b01      	cmp	r3, #1
 81047e6:	d133      	bne.n	8104850 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81047e8:	4b1b      	ldr	r3, [pc, #108]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047ea:	695b      	ldr	r3, [r3, #20]
 81047ec:	4a1a      	ldr	r2, [pc, #104]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047ee:	f023 0302 	bic.w	r3, r3, #2
 81047f2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047f4:	4b19      	ldr	r3, [pc, #100]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047f6:	691b      	ldr	r3, [r3, #16]
 81047f8:	4a18      	ldr	r2, [pc, #96]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047fa:	f043 0304 	orr.w	r3, r3, #4
 81047fe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104800:	f3bf 8f4f 	dsb	sy
}
 8104804:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104806:	f3bf 8f6f 	isb	sy
}
 810480a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810480c:	7afb      	ldrb	r3, [r7, #11]
 810480e:	2b01      	cmp	r3, #1
 8104810:	d101      	bne.n	8104816 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104812:	bf30      	wfi
 8104814:	e000      	b.n	8104818 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104816:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104818:	4b10      	ldr	r3, [pc, #64]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810481a:	691b      	ldr	r3, [r3, #16]
 810481c:	4a0f      	ldr	r2, [pc, #60]	; (810485c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810481e:	f023 0304 	bic.w	r3, r3, #4
 8104822:	6113      	str	r3, [r2, #16]
 8104824:	e015      	b.n	8104852 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104826:	f7fe ff57 	bl	81036d8 <HAL_GetCurrentCPUID>
 810482a:	4603      	mov	r3, r0
 810482c:	2b03      	cmp	r3, #3
 810482e:	d106      	bne.n	810483e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104830:	4b09      	ldr	r3, [pc, #36]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104832:	691b      	ldr	r3, [r3, #16]
 8104834:	4a08      	ldr	r2, [pc, #32]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104836:	f023 0304 	bic.w	r3, r3, #4
 810483a:	6113      	str	r3, [r2, #16]
 810483c:	e009      	b.n	8104852 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810483e:	4b06      	ldr	r3, [pc, #24]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104840:	695b      	ldr	r3, [r3, #20]
 8104842:	4a05      	ldr	r2, [pc, #20]	; (8104858 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104844:	f023 0304 	bic.w	r3, r3, #4
 8104848:	6153      	str	r3, [r2, #20]
 810484a:	e002      	b.n	8104852 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810484c:	bf00      	nop
 810484e:	e000      	b.n	8104852 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104850:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104852:	3710      	adds	r7, #16
 8104854:	46bd      	mov	sp, r7
 8104856:	bd80      	pop	{r7, pc}
 8104858:	58024800 	.word	0x58024800
 810485c:	e000ed00 	.word	0xe000ed00

08104860 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104860:	b580      	push	{r7, lr}
 8104862:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104864:	f7fe ff38 	bl	81036d8 <HAL_GetCurrentCPUID>
 8104868:	4603      	mov	r3, r0
 810486a:	2b03      	cmp	r3, #3
 810486c:	d101      	bne.n	8104872 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810486e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104870:	e001      	b.n	8104876 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104872:	bf40      	sev
    __WFE ();
 8104874:	bf20      	wfe
}
 8104876:	bf00      	nop
 8104878:	bd80      	pop	{r7, pc}
	...

0810487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810487c:	b480      	push	{r7}
 810487e:	b089      	sub	sp, #36	; 0x24
 8104880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104882:	4bb3      	ldr	r3, [pc, #716]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104884:	691b      	ldr	r3, [r3, #16]
 8104886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810488a:	2b18      	cmp	r3, #24
 810488c:	f200 8155 	bhi.w	8104b3a <HAL_RCC_GetSysClockFreq+0x2be>
 8104890:	a201      	add	r2, pc, #4	; (adr r2, 8104898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104896:	bf00      	nop
 8104898:	081048fd 	.word	0x081048fd
 810489c:	08104b3b 	.word	0x08104b3b
 81048a0:	08104b3b 	.word	0x08104b3b
 81048a4:	08104b3b 	.word	0x08104b3b
 81048a8:	08104b3b 	.word	0x08104b3b
 81048ac:	08104b3b 	.word	0x08104b3b
 81048b0:	08104b3b 	.word	0x08104b3b
 81048b4:	08104b3b 	.word	0x08104b3b
 81048b8:	08104923 	.word	0x08104923
 81048bc:	08104b3b 	.word	0x08104b3b
 81048c0:	08104b3b 	.word	0x08104b3b
 81048c4:	08104b3b 	.word	0x08104b3b
 81048c8:	08104b3b 	.word	0x08104b3b
 81048cc:	08104b3b 	.word	0x08104b3b
 81048d0:	08104b3b 	.word	0x08104b3b
 81048d4:	08104b3b 	.word	0x08104b3b
 81048d8:	08104929 	.word	0x08104929
 81048dc:	08104b3b 	.word	0x08104b3b
 81048e0:	08104b3b 	.word	0x08104b3b
 81048e4:	08104b3b 	.word	0x08104b3b
 81048e8:	08104b3b 	.word	0x08104b3b
 81048ec:	08104b3b 	.word	0x08104b3b
 81048f0:	08104b3b 	.word	0x08104b3b
 81048f4:	08104b3b 	.word	0x08104b3b
 81048f8:	0810492f 	.word	0x0810492f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81048fc:	4b94      	ldr	r3, [pc, #592]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	f003 0320 	and.w	r3, r3, #32
 8104904:	2b00      	cmp	r3, #0
 8104906:	d009      	beq.n	810491c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104908:	4b91      	ldr	r3, [pc, #580]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	08db      	lsrs	r3, r3, #3
 810490e:	f003 0303 	and.w	r3, r3, #3
 8104912:	4a90      	ldr	r2, [pc, #576]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104914:	fa22 f303 	lsr.w	r3, r2, r3
 8104918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810491a:	e111      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810491c:	4b8d      	ldr	r3, [pc, #564]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810491e:	61bb      	str	r3, [r7, #24]
    break;
 8104920:	e10e      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104922:	4b8d      	ldr	r3, [pc, #564]	; (8104b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104924:	61bb      	str	r3, [r7, #24]
    break;
 8104926:	e10b      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104928:	4b8c      	ldr	r3, [pc, #560]	; (8104b5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810492a:	61bb      	str	r3, [r7, #24]
    break;
 810492c:	e108      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810492e:	4b88      	ldr	r3, [pc, #544]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104932:	f003 0303 	and.w	r3, r3, #3
 8104936:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104938:	4b85      	ldr	r3, [pc, #532]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810493c:	091b      	lsrs	r3, r3, #4
 810493e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104942:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104944:	4b82      	ldr	r3, [pc, #520]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104948:	f003 0301 	and.w	r3, r3, #1
 810494c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810494e:	4b80      	ldr	r3, [pc, #512]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104952:	08db      	lsrs	r3, r3, #3
 8104954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104958:	68fa      	ldr	r2, [r7, #12]
 810495a:	fb02 f303 	mul.w	r3, r2, r3
 810495e:	ee07 3a90 	vmov	s15, r3
 8104962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104966:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810496a:	693b      	ldr	r3, [r7, #16]
 810496c:	2b00      	cmp	r3, #0
 810496e:	f000 80e1 	beq.w	8104b34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104972:	697b      	ldr	r3, [r7, #20]
 8104974:	2b02      	cmp	r3, #2
 8104976:	f000 8083 	beq.w	8104a80 <HAL_RCC_GetSysClockFreq+0x204>
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	2b02      	cmp	r3, #2
 810497e:	f200 80a1 	bhi.w	8104ac4 <HAL_RCC_GetSysClockFreq+0x248>
 8104982:	697b      	ldr	r3, [r7, #20]
 8104984:	2b00      	cmp	r3, #0
 8104986:	d003      	beq.n	8104990 <HAL_RCC_GetSysClockFreq+0x114>
 8104988:	697b      	ldr	r3, [r7, #20]
 810498a:	2b01      	cmp	r3, #1
 810498c:	d056      	beq.n	8104a3c <HAL_RCC_GetSysClockFreq+0x1c0>
 810498e:	e099      	b.n	8104ac4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104990:	4b6f      	ldr	r3, [pc, #444]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	f003 0320 	and.w	r3, r3, #32
 8104998:	2b00      	cmp	r3, #0
 810499a:	d02d      	beq.n	81049f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810499c:	4b6c      	ldr	r3, [pc, #432]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	08db      	lsrs	r3, r3, #3
 81049a2:	f003 0303 	and.w	r3, r3, #3
 81049a6:	4a6b      	ldr	r2, [pc, #428]	; (8104b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049a8:	fa22 f303 	lsr.w	r3, r2, r3
 81049ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	ee07 3a90 	vmov	s15, r3
 81049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049b8:	693b      	ldr	r3, [r7, #16]
 81049ba:	ee07 3a90 	vmov	s15, r3
 81049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049c6:	4b62      	ldr	r3, [pc, #392]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049ce:	ee07 3a90 	vmov	s15, r3
 81049d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81049da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 81049de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81049f6:	e087      	b.n	8104b08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81049f8:	693b      	ldr	r3, [r7, #16]
 81049fa:	ee07 3a90 	vmov	s15, r3
 81049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104b64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a0a:	4b51      	ldr	r3, [pc, #324]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a12:	ee07 3a90 	vmov	s15, r3
 8104a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a3a:	e065      	b.n	8104b08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a3c:	693b      	ldr	r3, [r7, #16]
 8104a3e:	ee07 3a90 	vmov	s15, r3
 8104a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a4e:	4b40      	ldr	r3, [pc, #256]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a56:	ee07 3a90 	vmov	s15, r3
 8104a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a7e:	e043      	b.n	8104b08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a80:	693b      	ldr	r3, [r7, #16]
 8104a82:	ee07 3a90 	vmov	s15, r3
 8104a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104b6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8104a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a92:	4b2f      	ldr	r3, [pc, #188]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a9a:	ee07 3a90 	vmov	s15, r3
 8104a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8104aa6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ac2:	e021      	b.n	8104b08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104ac4:	693b      	ldr	r3, [r7, #16]
 8104ac6:	ee07 3a90 	vmov	s15, r3
 8104aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ace:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ad6:	4b1e      	ldr	r3, [pc, #120]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ade:	ee07 3a90 	vmov	s15, r3
 8104ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8104aea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104b08:	4b11      	ldr	r3, [pc, #68]	; (8104b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b0c:	0a5b      	lsrs	r3, r3, #9
 8104b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b12:	3301      	adds	r3, #1
 8104b14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104b16:	683b      	ldr	r3, [r7, #0]
 8104b18:	ee07 3a90 	vmov	s15, r3
 8104b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b2c:	ee17 3a90 	vmov	r3, s15
 8104b30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104b32:	e005      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104b34:	2300      	movs	r3, #0
 8104b36:	61bb      	str	r3, [r7, #24]
    break;
 8104b38:	e002      	b.n	8104b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104b3a:	4b07      	ldr	r3, [pc, #28]	; (8104b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104b3c:	61bb      	str	r3, [r7, #24]
    break;
 8104b3e:	bf00      	nop
  }

  return sysclockfreq;
 8104b40:	69bb      	ldr	r3, [r7, #24]
}
 8104b42:	4618      	mov	r0, r3
 8104b44:	3724      	adds	r7, #36	; 0x24
 8104b46:	46bd      	mov	sp, r7
 8104b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b4c:	4770      	bx	lr
 8104b4e:	bf00      	nop
 8104b50:	58024400 	.word	0x58024400
 8104b54:	03d09000 	.word	0x03d09000
 8104b58:	003d0900 	.word	0x003d0900
 8104b5c:	017d7840 	.word	0x017d7840
 8104b60:	46000000 	.word	0x46000000
 8104b64:	4c742400 	.word	0x4c742400
 8104b68:	4a742400 	.word	0x4a742400
 8104b6c:	4bbebc20 	.word	0x4bbebc20

08104b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104b70:	b580      	push	{r7, lr}
 8104b72:	b082      	sub	sp, #8
 8104b74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104b76:	f7ff fe81 	bl	810487c <HAL_RCC_GetSysClockFreq>
 8104b7a:	4602      	mov	r2, r0
 8104b7c:	4b11      	ldr	r3, [pc, #68]	; (8104bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8104b7e:	699b      	ldr	r3, [r3, #24]
 8104b80:	0a1b      	lsrs	r3, r3, #8
 8104b82:	f003 030f 	and.w	r3, r3, #15
 8104b86:	4910      	ldr	r1, [pc, #64]	; (8104bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8104b88:	5ccb      	ldrb	r3, [r1, r3]
 8104b8a:	f003 031f 	and.w	r3, r3, #31
 8104b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8104b92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b94:	4b0b      	ldr	r3, [pc, #44]	; (8104bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8104b96:	699b      	ldr	r3, [r3, #24]
 8104b98:	f003 030f 	and.w	r3, r3, #15
 8104b9c:	4a0a      	ldr	r2, [pc, #40]	; (8104bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8104b9e:	5cd3      	ldrb	r3, [r2, r3]
 8104ba0:	f003 031f 	and.w	r3, r3, #31
 8104ba4:	687a      	ldr	r2, [r7, #4]
 8104ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8104baa:	4a08      	ldr	r2, [pc, #32]	; (8104bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104bae:	4b07      	ldr	r3, [pc, #28]	; (8104bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	4a07      	ldr	r2, [pc, #28]	; (8104bd0 <HAL_RCC_GetHCLKFreq+0x60>)
 8104bb4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104bb6:	4b05      	ldr	r3, [pc, #20]	; (8104bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8104bb8:	681b      	ldr	r3, [r3, #0]
}
 8104bba:	4618      	mov	r0, r3
 8104bbc:	3708      	adds	r7, #8
 8104bbe:	46bd      	mov	sp, r7
 8104bc0:	bd80      	pop	{r7, pc}
 8104bc2:	bf00      	nop
 8104bc4:	58024400 	.word	0x58024400
 8104bc8:	0810a708 	.word	0x0810a708
 8104bcc:	10000004 	.word	0x10000004
 8104bd0:	10000000 	.word	0x10000000

08104bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104bd4:	b580      	push	{r7, lr}
 8104bd6:	b086      	sub	sp, #24
 8104bd8:	af00      	add	r7, sp, #0
 8104bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104bdc:	2300      	movs	r3, #0
 8104bde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104be0:	2300      	movs	r3, #0
 8104be2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104bec:	2b00      	cmp	r3, #0
 8104bee:	d03f      	beq.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104bf8:	d02a      	beq.n	8104c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104bfe:	d824      	bhi.n	8104c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c04:	d018      	beq.n	8104c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c0a:	d81e      	bhi.n	8104c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d003      	beq.n	8104c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104c14:	d007      	beq.n	8104c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104c16:	e018      	b.n	8104c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c18:	4bab      	ldr	r3, [pc, #684]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c1c:	4aaa      	ldr	r2, [pc, #680]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c24:	e015      	b.n	8104c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	3304      	adds	r3, #4
 8104c2a:	2102      	movs	r1, #2
 8104c2c:	4618      	mov	r0, r3
 8104c2e:	f001 fff3 	bl	8106c18 <RCCEx_PLL2_Config>
 8104c32:	4603      	mov	r3, r0
 8104c34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c36:	e00c      	b.n	8104c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	3324      	adds	r3, #36	; 0x24
 8104c3c:	2102      	movs	r1, #2
 8104c3e:	4618      	mov	r0, r3
 8104c40:	f002 f89c 	bl	8106d7c <RCCEx_PLL3_Config>
 8104c44:	4603      	mov	r3, r0
 8104c46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104c48:	e003      	b.n	8104c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c4a:	2301      	movs	r3, #1
 8104c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8104c4e:	e000      	b.n	8104c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c52:	7dfb      	ldrb	r3, [r7, #23]
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	d109      	bne.n	8104c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104c58:	4b9b      	ldr	r3, [pc, #620]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c64:	4998      	ldr	r1, [pc, #608]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104c66:	4313      	orrs	r3, r2
 8104c68:	650b      	str	r3, [r1, #80]	; 0x50
 8104c6a:	e001      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c6c:	7dfb      	ldrb	r3, [r7, #23]
 8104c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c78:	2b00      	cmp	r3, #0
 8104c7a:	d03d      	beq.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c80:	2b04      	cmp	r3, #4
 8104c82:	d826      	bhi.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104c84:	a201      	add	r2, pc, #4	; (adr r2, 8104c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c8a:	bf00      	nop
 8104c8c:	08104ca1 	.word	0x08104ca1
 8104c90:	08104caf 	.word	0x08104caf
 8104c94:	08104cc1 	.word	0x08104cc1
 8104c98:	08104cd9 	.word	0x08104cd9
 8104c9c:	08104cd9 	.word	0x08104cd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ca0:	4b89      	ldr	r3, [pc, #548]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ca4:	4a88      	ldr	r2, [pc, #544]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cac:	e015      	b.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	3304      	adds	r3, #4
 8104cb2:	2100      	movs	r1, #0
 8104cb4:	4618      	mov	r0, r3
 8104cb6:	f001 ffaf 	bl	8106c18 <RCCEx_PLL2_Config>
 8104cba:	4603      	mov	r3, r0
 8104cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cbe:	e00c      	b.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	3324      	adds	r3, #36	; 0x24
 8104cc4:	2100      	movs	r1, #0
 8104cc6:	4618      	mov	r0, r3
 8104cc8:	f002 f858 	bl	8106d7c <RCCEx_PLL3_Config>
 8104ccc:	4603      	mov	r3, r0
 8104cce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cd0:	e003      	b.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104cd2:	2301      	movs	r3, #1
 8104cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8104cd6:	e000      	b.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104cda:	7dfb      	ldrb	r3, [r7, #23]
 8104cdc:	2b00      	cmp	r3, #0
 8104cde:	d109      	bne.n	8104cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104ce0:	4b79      	ldr	r3, [pc, #484]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ce4:	f023 0207 	bic.w	r2, r3, #7
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cec:	4976      	ldr	r1, [pc, #472]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104cee:	4313      	orrs	r3, r2
 8104cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8104cf2:	e001      	b.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cf4:	7dfb      	ldrb	r3, [r7, #23]
 8104cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104d00:	2b00      	cmp	r3, #0
 8104d02:	d042      	beq.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d0c:	d02b      	beq.n	8104d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d12:	d825      	bhi.n	8104d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d14:	2bc0      	cmp	r3, #192	; 0xc0
 8104d16:	d028      	beq.n	8104d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104d18:	2bc0      	cmp	r3, #192	; 0xc0
 8104d1a:	d821      	bhi.n	8104d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d1c:	2b80      	cmp	r3, #128	; 0x80
 8104d1e:	d016      	beq.n	8104d4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104d20:	2b80      	cmp	r3, #128	; 0x80
 8104d22:	d81d      	bhi.n	8104d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104d24:	2b00      	cmp	r3, #0
 8104d26:	d002      	beq.n	8104d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104d28:	2b40      	cmp	r3, #64	; 0x40
 8104d2a:	d007      	beq.n	8104d3c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104d2c:	e018      	b.n	8104d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d2e:	4b66      	ldr	r3, [pc, #408]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d32:	4a65      	ldr	r2, [pc, #404]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d3a:	e017      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	3304      	adds	r3, #4
 8104d40:	2100      	movs	r1, #0
 8104d42:	4618      	mov	r0, r3
 8104d44:	f001 ff68 	bl	8106c18 <RCCEx_PLL2_Config>
 8104d48:	4603      	mov	r3, r0
 8104d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d4c:	e00e      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	3324      	adds	r3, #36	; 0x24
 8104d52:	2100      	movs	r1, #0
 8104d54:	4618      	mov	r0, r3
 8104d56:	f002 f811 	bl	8106d7c <RCCEx_PLL3_Config>
 8104d5a:	4603      	mov	r3, r0
 8104d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104d5e:	e005      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d60:	2301      	movs	r3, #1
 8104d62:	75fb      	strb	r3, [r7, #23]
      break;
 8104d64:	e002      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104d66:	bf00      	nop
 8104d68:	e000      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d6c:	7dfb      	ldrb	r3, [r7, #23]
 8104d6e:	2b00      	cmp	r3, #0
 8104d70:	d109      	bne.n	8104d86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104d72:	4b55      	ldr	r3, [pc, #340]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d76:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d7e:	4952      	ldr	r1, [pc, #328]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104d80:	4313      	orrs	r3, r2
 8104d82:	650b      	str	r3, [r1, #80]	; 0x50
 8104d84:	e001      	b.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d86:	7dfb      	ldrb	r3, [r7, #23]
 8104d88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104d92:	2b00      	cmp	r3, #0
 8104d94:	d049      	beq.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104da0:	d030      	beq.n	8104e04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104da6:	d82a      	bhi.n	8104dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104da8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104dac:	d02c      	beq.n	8104e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104dae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104db2:	d824      	bhi.n	8104dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104db8:	d018      	beq.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104dbe:	d81e      	bhi.n	8104dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104dc0:	2b00      	cmp	r3, #0
 8104dc2:	d003      	beq.n	8104dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104dc8:	d007      	beq.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104dca:	e018      	b.n	8104dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104dcc:	4b3e      	ldr	r3, [pc, #248]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dd0:	4a3d      	ldr	r2, [pc, #244]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104dd8:	e017      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	3304      	adds	r3, #4
 8104dde:	2100      	movs	r1, #0
 8104de0:	4618      	mov	r0, r3
 8104de2:	f001 ff19 	bl	8106c18 <RCCEx_PLL2_Config>
 8104de6:	4603      	mov	r3, r0
 8104de8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104dea:	e00e      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	3324      	adds	r3, #36	; 0x24
 8104df0:	2100      	movs	r1, #0
 8104df2:	4618      	mov	r0, r3
 8104df4:	f001 ffc2 	bl	8106d7c <RCCEx_PLL3_Config>
 8104df8:	4603      	mov	r3, r0
 8104dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104dfc:	e005      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104dfe:	2301      	movs	r3, #1
 8104e00:	75fb      	strb	r3, [r7, #23]
      break;
 8104e02:	e002      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104e04:	bf00      	nop
 8104e06:	e000      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e0a:	7dfb      	ldrb	r3, [r7, #23]
 8104e0c:	2b00      	cmp	r3, #0
 8104e0e:	d10a      	bne.n	8104e26 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104e10:	4b2d      	ldr	r3, [pc, #180]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104e1e:	492a      	ldr	r1, [pc, #168]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104e20:	4313      	orrs	r3, r2
 8104e22:	658b      	str	r3, [r1, #88]	; 0x58
 8104e24:	e001      	b.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e26:	7dfb      	ldrb	r3, [r7, #23]
 8104e28:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104e32:	2b00      	cmp	r3, #0
 8104e34:	d04c      	beq.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104e40:	d030      	beq.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104e46:	d82a      	bhi.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104e4c:	d02c      	beq.n	8104ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8104e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104e52:	d824      	bhi.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e58:	d018      	beq.n	8104e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e5e:	d81e      	bhi.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104e60:	2b00      	cmp	r3, #0
 8104e62:	d003      	beq.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104e68:	d007      	beq.n	8104e7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104e6a:	e018      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e6c:	4b16      	ldr	r3, [pc, #88]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e70:	4a15      	ldr	r2, [pc, #84]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104e78:	e017      	b.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	3304      	adds	r3, #4
 8104e7e:	2100      	movs	r1, #0
 8104e80:	4618      	mov	r0, r3
 8104e82:	f001 fec9 	bl	8106c18 <RCCEx_PLL2_Config>
 8104e86:	4603      	mov	r3, r0
 8104e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104e8a:	e00e      	b.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	3324      	adds	r3, #36	; 0x24
 8104e90:	2100      	movs	r1, #0
 8104e92:	4618      	mov	r0, r3
 8104e94:	f001 ff72 	bl	8106d7c <RCCEx_PLL3_Config>
 8104e98:	4603      	mov	r3, r0
 8104e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104e9c:	e005      	b.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104e9e:	2301      	movs	r3, #1
 8104ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8104ea2:	e002      	b.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8104ea4:	bf00      	nop
 8104ea6:	e000      	b.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8104ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104eaa:	7dfb      	ldrb	r3, [r7, #23]
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d10d      	bne.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104eb0:	4b05      	ldr	r3, [pc, #20]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104eb4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104ebe:	4902      	ldr	r1, [pc, #8]	; (8104ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8104ec0:	4313      	orrs	r3, r2
 8104ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8104ec4:	e004      	b.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8104ec6:	bf00      	nop
 8104ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ecc:	7dfb      	ldrb	r3, [r7, #23]
 8104ece:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d032      	beq.n	8104f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104ee0:	2b30      	cmp	r3, #48	; 0x30
 8104ee2:	d01c      	beq.n	8104f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104ee4:	2b30      	cmp	r3, #48	; 0x30
 8104ee6:	d817      	bhi.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8104ee8:	2b20      	cmp	r3, #32
 8104eea:	d00c      	beq.n	8104f06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8104eec:	2b20      	cmp	r3, #32
 8104eee:	d813      	bhi.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8104ef0:	2b00      	cmp	r3, #0
 8104ef2:	d016      	beq.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8104ef4:	2b10      	cmp	r3, #16
 8104ef6:	d10f      	bne.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ef8:	4baf      	ldr	r3, [pc, #700]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104efc:	4aae      	ldr	r2, [pc, #696]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104f04:	e00e      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	3304      	adds	r3, #4
 8104f0a:	2102      	movs	r1, #2
 8104f0c:	4618      	mov	r0, r3
 8104f0e:	f001 fe83 	bl	8106c18 <RCCEx_PLL2_Config>
 8104f12:	4603      	mov	r3, r0
 8104f14:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104f16:	e005      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104f18:	2301      	movs	r3, #1
 8104f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8104f1c:	e002      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8104f1e:	bf00      	nop
 8104f20:	e000      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8104f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f24:	7dfb      	ldrb	r3, [r7, #23]
 8104f26:	2b00      	cmp	r3, #0
 8104f28:	d109      	bne.n	8104f3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104f2a:	4ba3      	ldr	r3, [pc, #652]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104f36:	49a0      	ldr	r1, [pc, #640]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104f38:	4313      	orrs	r3, r2
 8104f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104f3c:	e001      	b.n	8104f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f3e:	7dfb      	ldrb	r3, [r7, #23]
 8104f40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	d047      	beq.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104f56:	d030      	beq.n	8104fba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8104f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104f5c:	d82a      	bhi.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104f5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104f62:	d02c      	beq.n	8104fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8104f64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104f68:	d824      	bhi.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104f6e:	d018      	beq.n	8104fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8104f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104f74:	d81e      	bhi.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104f76:	2b00      	cmp	r3, #0
 8104f78:	d003      	beq.n	8104f82 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8104f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f7e:	d007      	beq.n	8104f90 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8104f80:	e018      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f82:	4b8d      	ldr	r3, [pc, #564]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f86:	4a8c      	ldr	r2, [pc, #560]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104f8e:	e017      	b.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	3304      	adds	r3, #4
 8104f94:	2100      	movs	r1, #0
 8104f96:	4618      	mov	r0, r3
 8104f98:	f001 fe3e 	bl	8106c18 <RCCEx_PLL2_Config>
 8104f9c:	4603      	mov	r3, r0
 8104f9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104fa0:	e00e      	b.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	3324      	adds	r3, #36	; 0x24
 8104fa6:	2100      	movs	r1, #0
 8104fa8:	4618      	mov	r0, r3
 8104faa:	f001 fee7 	bl	8106d7c <RCCEx_PLL3_Config>
 8104fae:	4603      	mov	r3, r0
 8104fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104fb2:	e005      	b.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104fb4:	2301      	movs	r3, #1
 8104fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8104fb8:	e002      	b.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8104fba:	bf00      	nop
 8104fbc:	e000      	b.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8104fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104fc0:	7dfb      	ldrb	r3, [r7, #23]
 8104fc2:	2b00      	cmp	r3, #0
 8104fc4:	d109      	bne.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104fc6:	4b7c      	ldr	r3, [pc, #496]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104fca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fd2:	4979      	ldr	r1, [pc, #484]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104fd4:	4313      	orrs	r3, r2
 8104fd6:	650b      	str	r3, [r1, #80]	; 0x50
 8104fd8:	e001      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fda:	7dfb      	ldrb	r3, [r7, #23]
 8104fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104fe6:	2b00      	cmp	r3, #0
 8104fe8:	d049      	beq.n	810507e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104ff2:	d02e      	beq.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8104ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104ff8:	d828      	bhi.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8104ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104ffe:	d02a      	beq.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8105000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105004:	d822      	bhi.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810500a:	d026      	beq.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x486>
 810500c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105010:	d81c      	bhi.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105016:	d010      	beq.n	810503a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8105018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810501c:	d816      	bhi.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810501e:	2b00      	cmp	r3, #0
 8105020:	d01d      	beq.n	810505e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8105022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105026:	d111      	bne.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	3304      	adds	r3, #4
 810502c:	2101      	movs	r1, #1
 810502e:	4618      	mov	r0, r3
 8105030:	f001 fdf2 	bl	8106c18 <RCCEx_PLL2_Config>
 8105034:	4603      	mov	r3, r0
 8105036:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105038:	e012      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	3324      	adds	r3, #36	; 0x24
 810503e:	2101      	movs	r1, #1
 8105040:	4618      	mov	r0, r3
 8105042:	f001 fe9b 	bl	8106d7c <RCCEx_PLL3_Config>
 8105046:	4603      	mov	r3, r0
 8105048:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810504a:	e009      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810504c:	2301      	movs	r3, #1
 810504e:	75fb      	strb	r3, [r7, #23]
      break;
 8105050:	e006      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105052:	bf00      	nop
 8105054:	e004      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105056:	bf00      	nop
 8105058:	e002      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810505a:	bf00      	nop
 810505c:	e000      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810505e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105060:	7dfb      	ldrb	r3, [r7, #23]
 8105062:	2b00      	cmp	r3, #0
 8105064:	d109      	bne.n	810507a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105066:	4b54      	ldr	r3, [pc, #336]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8105068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810506a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105072:	4951      	ldr	r1, [pc, #324]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8105074:	4313      	orrs	r3, r2
 8105076:	650b      	str	r3, [r1, #80]	; 0x50
 8105078:	e001      	b.n	810507e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810507a:	7dfb      	ldrb	r3, [r7, #23]
 810507c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105086:	2b00      	cmp	r3, #0
 8105088:	d04b      	beq.n	8105122 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105094:	d02e      	beq.n	81050f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8105096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810509a:	d828      	bhi.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050a0:	d02a      	beq.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050a6:	d822      	bhi.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81050a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81050ac:	d026      	beq.n	81050fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 81050ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81050b2:	d81c      	bhi.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81050b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050b8:	d010      	beq.n	81050dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 81050ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050be:	d816      	bhi.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	d01d      	beq.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81050c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050c8:	d111      	bne.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	3304      	adds	r3, #4
 81050ce:	2101      	movs	r1, #1
 81050d0:	4618      	mov	r0, r3
 81050d2:	f001 fda1 	bl	8106c18 <RCCEx_PLL2_Config>
 81050d6:	4603      	mov	r3, r0
 81050d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81050da:	e012      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	3324      	adds	r3, #36	; 0x24
 81050e0:	2101      	movs	r1, #1
 81050e2:	4618      	mov	r0, r3
 81050e4:	f001 fe4a 	bl	8106d7c <RCCEx_PLL3_Config>
 81050e8:	4603      	mov	r3, r0
 81050ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81050ec:	e009      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81050ee:	2301      	movs	r3, #1
 81050f0:	75fb      	strb	r3, [r7, #23]
      break;
 81050f2:	e006      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81050f4:	bf00      	nop
 81050f6:	e004      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81050f8:	bf00      	nop
 81050fa:	e002      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81050fc:	bf00      	nop
 81050fe:	e000      	b.n	8105102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105102:	7dfb      	ldrb	r3, [r7, #23]
 8105104:	2b00      	cmp	r3, #0
 8105106:	d10a      	bne.n	810511e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105108:	4b2b      	ldr	r3, [pc, #172]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810510c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105116:	4928      	ldr	r1, [pc, #160]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8105118:	4313      	orrs	r3, r2
 810511a:	658b      	str	r3, [r1, #88]	; 0x58
 810511c:	e001      	b.n	8105122 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810511e:	7dfb      	ldrb	r3, [r7, #23]
 8105120:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810512a:	2b00      	cmp	r3, #0
 810512c:	d02f      	beq.n	810518e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105136:	d00e      	beq.n	8105156 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8105138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810513c:	d814      	bhi.n	8105168 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810513e:	2b00      	cmp	r3, #0
 8105140:	d015      	beq.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105146:	d10f      	bne.n	8105168 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105148:	4b1b      	ldr	r3, [pc, #108]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810514c:	4a1a      	ldr	r2, [pc, #104]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105154:	e00c      	b.n	8105170 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	3304      	adds	r3, #4
 810515a:	2101      	movs	r1, #1
 810515c:	4618      	mov	r0, r3
 810515e:	f001 fd5b 	bl	8106c18 <RCCEx_PLL2_Config>
 8105162:	4603      	mov	r3, r0
 8105164:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105166:	e003      	b.n	8105170 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105168:	2301      	movs	r3, #1
 810516a:	75fb      	strb	r3, [r7, #23]
      break;
 810516c:	e000      	b.n	8105170 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810516e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105170:	7dfb      	ldrb	r3, [r7, #23]
 8105172:	2b00      	cmp	r3, #0
 8105174:	d109      	bne.n	810518a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105176:	4b10      	ldr	r3, [pc, #64]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8105178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810517a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105182:	490d      	ldr	r1, [pc, #52]	; (81051b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8105184:	4313      	orrs	r3, r2
 8105186:	650b      	str	r3, [r1, #80]	; 0x50
 8105188:	e001      	b.n	810518e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810518a:	7dfb      	ldrb	r3, [r7, #23]
 810518c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105196:	2b00      	cmp	r3, #0
 8105198:	d033      	beq.n	8105202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810519e:	2b03      	cmp	r3, #3
 81051a0:	d81c      	bhi.n	81051dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 81051a2:	a201      	add	r2, pc, #4	; (adr r2, 81051a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051a8:	081051e3 	.word	0x081051e3
 81051ac:	081051bd 	.word	0x081051bd
 81051b0:	081051cb 	.word	0x081051cb
 81051b4:	081051e3 	.word	0x081051e3
 81051b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051bc:	4bb9      	ldr	r3, [pc, #740]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051c0:	4ab8      	ldr	r2, [pc, #736]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81051c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81051c8:	e00c      	b.n	81051e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	3304      	adds	r3, #4
 81051ce:	2102      	movs	r1, #2
 81051d0:	4618      	mov	r0, r3
 81051d2:	f001 fd21 	bl	8106c18 <RCCEx_PLL2_Config>
 81051d6:	4603      	mov	r3, r0
 81051d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81051da:	e003      	b.n	81051e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81051dc:	2301      	movs	r3, #1
 81051de:	75fb      	strb	r3, [r7, #23]
      break;
 81051e0:	e000      	b.n	81051e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81051e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051e4:	7dfb      	ldrb	r3, [r7, #23]
 81051e6:	2b00      	cmp	r3, #0
 81051e8:	d109      	bne.n	81051fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81051ea:	4bae      	ldr	r3, [pc, #696]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051ee:	f023 0203 	bic.w	r2, r3, #3
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81051f6:	49ab      	ldr	r1, [pc, #684]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81051f8:	4313      	orrs	r3, r2
 81051fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81051fc:	e001      	b.n	8105202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051fe:	7dfb      	ldrb	r3, [r7, #23]
 8105200:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810520a:	2b00      	cmp	r3, #0
 810520c:	f000 8088 	beq.w	8105320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105210:	4ba5      	ldr	r3, [pc, #660]	; (81054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	4aa4      	ldr	r2, [pc, #656]	; (81054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8105216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810521a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810521c:	f7fc ff24 	bl	8102068 <HAL_GetTick>
 8105220:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105222:	e009      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105224:	f7fc ff20 	bl	8102068 <HAL_GetTick>
 8105228:	4602      	mov	r2, r0
 810522a:	693b      	ldr	r3, [r7, #16]
 810522c:	1ad3      	subs	r3, r2, r3
 810522e:	2b64      	cmp	r3, #100	; 0x64
 8105230:	d902      	bls.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105232:	2303      	movs	r3, #3
 8105234:	75fb      	strb	r3, [r7, #23]
        break;
 8105236:	e005      	b.n	8105244 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105238:	4b9b      	ldr	r3, [pc, #620]	; (81054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105240:	2b00      	cmp	r3, #0
 8105242:	d0ef      	beq.n	8105224 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8105244:	7dfb      	ldrb	r3, [r7, #23]
 8105246:	2b00      	cmp	r3, #0
 8105248:	d168      	bne.n	810531c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810524a:	4b96      	ldr	r3, [pc, #600]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810524c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105254:	4053      	eors	r3, r2
 8105256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810525a:	2b00      	cmp	r3, #0
 810525c:	d013      	beq.n	8105286 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810525e:	4b91      	ldr	r3, [pc, #580]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105266:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105268:	4b8e      	ldr	r3, [pc, #568]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810526c:	4a8d      	ldr	r2, [pc, #564]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810526e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105272:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105274:	4b8b      	ldr	r3, [pc, #556]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105278:	4a8a      	ldr	r2, [pc, #552]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810527e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105280:	4a88      	ldr	r2, [pc, #544]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105282:	68fb      	ldr	r3, [r7, #12]
 8105284:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105290:	d115      	bne.n	81052be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105292:	f7fc fee9 	bl	8102068 <HAL_GetTick>
 8105296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105298:	e00b      	b.n	81052b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810529a:	f7fc fee5 	bl	8102068 <HAL_GetTick>
 810529e:	4602      	mov	r2, r0
 81052a0:	693b      	ldr	r3, [r7, #16]
 81052a2:	1ad3      	subs	r3, r2, r3
 81052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 81052a8:	4293      	cmp	r3, r2
 81052aa:	d902      	bls.n	81052b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81052ac:	2303      	movs	r3, #3
 81052ae:	75fb      	strb	r3, [r7, #23]
            break;
 81052b0:	e005      	b.n	81052be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81052b2:	4b7c      	ldr	r3, [pc, #496]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81052b6:	f003 0302 	and.w	r3, r3, #2
 81052ba:	2b00      	cmp	r3, #0
 81052bc:	d0ed      	beq.n	810529a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81052be:	7dfb      	ldrb	r3, [r7, #23]
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d128      	bne.n	8105316 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81052ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81052d2:	d10f      	bne.n	81052f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81052d4:	4b73      	ldr	r3, [pc, #460]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81052d6:	691b      	ldr	r3, [r3, #16]
 81052d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052e2:	091b      	lsrs	r3, r3, #4
 81052e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81052e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81052ec:	496d      	ldr	r1, [pc, #436]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81052ee:	4313      	orrs	r3, r2
 81052f0:	610b      	str	r3, [r1, #16]
 81052f2:	e005      	b.n	8105300 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81052f4:	4b6b      	ldr	r3, [pc, #428]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81052f6:	691b      	ldr	r3, [r3, #16]
 81052f8:	4a6a      	ldr	r2, [pc, #424]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81052fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81052fe:	6113      	str	r3, [r2, #16]
 8105300:	4b68      	ldr	r3, [pc, #416]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810530a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810530e:	4965      	ldr	r1, [pc, #404]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105310:	4313      	orrs	r3, r2
 8105312:	670b      	str	r3, [r1, #112]	; 0x70
 8105314:	e004      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105316:	7dfb      	ldrb	r3, [r7, #23]
 8105318:	75bb      	strb	r3, [r7, #22]
 810531a:	e001      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810531c:	7dfb      	ldrb	r3, [r7, #23]
 810531e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	f003 0301 	and.w	r3, r3, #1
 8105328:	2b00      	cmp	r3, #0
 810532a:	d07e      	beq.n	810542a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105330:	2b28      	cmp	r3, #40	; 0x28
 8105332:	d867      	bhi.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8105334:	a201      	add	r2, pc, #4	; (adr r2, 810533c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8105336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810533a:	bf00      	nop
 810533c:	0810540b 	.word	0x0810540b
 8105340:	08105405 	.word	0x08105405
 8105344:	08105405 	.word	0x08105405
 8105348:	08105405 	.word	0x08105405
 810534c:	08105405 	.word	0x08105405
 8105350:	08105405 	.word	0x08105405
 8105354:	08105405 	.word	0x08105405
 8105358:	08105405 	.word	0x08105405
 810535c:	081053e1 	.word	0x081053e1
 8105360:	08105405 	.word	0x08105405
 8105364:	08105405 	.word	0x08105405
 8105368:	08105405 	.word	0x08105405
 810536c:	08105405 	.word	0x08105405
 8105370:	08105405 	.word	0x08105405
 8105374:	08105405 	.word	0x08105405
 8105378:	08105405 	.word	0x08105405
 810537c:	081053f3 	.word	0x081053f3
 8105380:	08105405 	.word	0x08105405
 8105384:	08105405 	.word	0x08105405
 8105388:	08105405 	.word	0x08105405
 810538c:	08105405 	.word	0x08105405
 8105390:	08105405 	.word	0x08105405
 8105394:	08105405 	.word	0x08105405
 8105398:	08105405 	.word	0x08105405
 810539c:	0810540b 	.word	0x0810540b
 81053a0:	08105405 	.word	0x08105405
 81053a4:	08105405 	.word	0x08105405
 81053a8:	08105405 	.word	0x08105405
 81053ac:	08105405 	.word	0x08105405
 81053b0:	08105405 	.word	0x08105405
 81053b4:	08105405 	.word	0x08105405
 81053b8:	08105405 	.word	0x08105405
 81053bc:	0810540b 	.word	0x0810540b
 81053c0:	08105405 	.word	0x08105405
 81053c4:	08105405 	.word	0x08105405
 81053c8:	08105405 	.word	0x08105405
 81053cc:	08105405 	.word	0x08105405
 81053d0:	08105405 	.word	0x08105405
 81053d4:	08105405 	.word	0x08105405
 81053d8:	08105405 	.word	0x08105405
 81053dc:	0810540b 	.word	0x0810540b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	3304      	adds	r3, #4
 81053e4:	2101      	movs	r1, #1
 81053e6:	4618      	mov	r0, r3
 81053e8:	f001 fc16 	bl	8106c18 <RCCEx_PLL2_Config>
 81053ec:	4603      	mov	r3, r0
 81053ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81053f0:	e00c      	b.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	3324      	adds	r3, #36	; 0x24
 81053f6:	2101      	movs	r1, #1
 81053f8:	4618      	mov	r0, r3
 81053fa:	f001 fcbf 	bl	8106d7c <RCCEx_PLL3_Config>
 81053fe:	4603      	mov	r3, r0
 8105400:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105402:	e003      	b.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105404:	2301      	movs	r3, #1
 8105406:	75fb      	strb	r3, [r7, #23]
      break;
 8105408:	e000      	b.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810540c:	7dfb      	ldrb	r3, [r7, #23]
 810540e:	2b00      	cmp	r3, #0
 8105410:	d109      	bne.n	8105426 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105412:	4b24      	ldr	r3, [pc, #144]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105416:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810541e:	4921      	ldr	r1, [pc, #132]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105420:	4313      	orrs	r3, r2
 8105422:	654b      	str	r3, [r1, #84]	; 0x54
 8105424:	e001      	b.n	810542a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105426:	7dfb      	ldrb	r3, [r7, #23]
 8105428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	f003 0302 	and.w	r3, r3, #2
 8105432:	2b00      	cmp	r3, #0
 8105434:	d03c      	beq.n	81054b0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810543a:	2b05      	cmp	r3, #5
 810543c:	d820      	bhi.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810543e:	a201      	add	r2, pc, #4	; (adr r2, 8105444 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8105440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105444:	08105487 	.word	0x08105487
 8105448:	0810545d 	.word	0x0810545d
 810544c:	0810546f 	.word	0x0810546f
 8105450:	08105487 	.word	0x08105487
 8105454:	08105487 	.word	0x08105487
 8105458:	08105487 	.word	0x08105487
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	3304      	adds	r3, #4
 8105460:	2101      	movs	r1, #1
 8105462:	4618      	mov	r0, r3
 8105464:	f001 fbd8 	bl	8106c18 <RCCEx_PLL2_Config>
 8105468:	4603      	mov	r3, r0
 810546a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810546c:	e00c      	b.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	3324      	adds	r3, #36	; 0x24
 8105472:	2101      	movs	r1, #1
 8105474:	4618      	mov	r0, r3
 8105476:	f001 fc81 	bl	8106d7c <RCCEx_PLL3_Config>
 810547a:	4603      	mov	r3, r0
 810547c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810547e:	e003      	b.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105480:	2301      	movs	r3, #1
 8105482:	75fb      	strb	r3, [r7, #23]
      break;
 8105484:	e000      	b.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8105486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105488:	7dfb      	ldrb	r3, [r7, #23]
 810548a:	2b00      	cmp	r3, #0
 810548c:	d10e      	bne.n	81054ac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810548e:	4b05      	ldr	r3, [pc, #20]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8105490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105492:	f023 0207 	bic.w	r2, r3, #7
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810549a:	4902      	ldr	r1, [pc, #8]	; (81054a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810549c:	4313      	orrs	r3, r2
 810549e:	654b      	str	r3, [r1, #84]	; 0x54
 81054a0:	e006      	b.n	81054b0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81054a2:	bf00      	nop
 81054a4:	58024400 	.word	0x58024400
 81054a8:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054ac:	7dfb      	ldrb	r3, [r7, #23]
 81054ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	f003 0304 	and.w	r3, r3, #4
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d039      	beq.n	8105530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81054c2:	2b05      	cmp	r3, #5
 81054c4:	d820      	bhi.n	8105508 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81054c6:	a201      	add	r2, pc, #4	; (adr r2, 81054cc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054cc:	0810550f 	.word	0x0810550f
 81054d0:	081054e5 	.word	0x081054e5
 81054d4:	081054f7 	.word	0x081054f7
 81054d8:	0810550f 	.word	0x0810550f
 81054dc:	0810550f 	.word	0x0810550f
 81054e0:	0810550f 	.word	0x0810550f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	3304      	adds	r3, #4
 81054e8:	2101      	movs	r1, #1
 81054ea:	4618      	mov	r0, r3
 81054ec:	f001 fb94 	bl	8106c18 <RCCEx_PLL2_Config>
 81054f0:	4603      	mov	r3, r0
 81054f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81054f4:	e00c      	b.n	8105510 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	3324      	adds	r3, #36	; 0x24
 81054fa:	2101      	movs	r1, #1
 81054fc:	4618      	mov	r0, r3
 81054fe:	f001 fc3d 	bl	8106d7c <RCCEx_PLL3_Config>
 8105502:	4603      	mov	r3, r0
 8105504:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105506:	e003      	b.n	8105510 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105508:	2301      	movs	r3, #1
 810550a:	75fb      	strb	r3, [r7, #23]
      break;
 810550c:	e000      	b.n	8105510 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810550e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105510:	7dfb      	ldrb	r3, [r7, #23]
 8105512:	2b00      	cmp	r3, #0
 8105514:	d10a      	bne.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105516:	4bb7      	ldr	r3, [pc, #732]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8105518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810551a:	f023 0207 	bic.w	r2, r3, #7
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105524:	49b3      	ldr	r1, [pc, #716]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8105526:	4313      	orrs	r3, r2
 8105528:	658b      	str	r3, [r1, #88]	; 0x58
 810552a:	e001      	b.n	8105530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810552c:	7dfb      	ldrb	r3, [r7, #23]
 810552e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	f003 0320 	and.w	r3, r3, #32
 8105538:	2b00      	cmp	r3, #0
 810553a:	d04b      	beq.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105546:	d02e      	beq.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8105548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810554c:	d828      	bhi.n	81055a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105552:	d02a      	beq.n	81055aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8105554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105558:	d822      	bhi.n	81055a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810555a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810555e:	d026      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8105560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105564:	d81c      	bhi.n	81055a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8105566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810556a:	d010      	beq.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810556c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105570:	d816      	bhi.n	81055a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8105572:	2b00      	cmp	r3, #0
 8105574:	d01d      	beq.n	81055b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810557a:	d111      	bne.n	81055a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	3304      	adds	r3, #4
 8105580:	2100      	movs	r1, #0
 8105582:	4618      	mov	r0, r3
 8105584:	f001 fb48 	bl	8106c18 <RCCEx_PLL2_Config>
 8105588:	4603      	mov	r3, r0
 810558a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810558c:	e012      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	3324      	adds	r3, #36	; 0x24
 8105592:	2102      	movs	r1, #2
 8105594:	4618      	mov	r0, r3
 8105596:	f001 fbf1 	bl	8106d7c <RCCEx_PLL3_Config>
 810559a:	4603      	mov	r3, r0
 810559c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810559e:	e009      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81055a0:	2301      	movs	r3, #1
 81055a2:	75fb      	strb	r3, [r7, #23]
      break;
 81055a4:	e006      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81055a6:	bf00      	nop
 81055a8:	e004      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81055aa:	bf00      	nop
 81055ac:	e002      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81055ae:	bf00      	nop
 81055b0:	e000      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81055b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81055b4:	7dfb      	ldrb	r3, [r7, #23]
 81055b6:	2b00      	cmp	r3, #0
 81055b8:	d10a      	bne.n	81055d0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81055ba:	4b8e      	ldr	r3, [pc, #568]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81055c8:	498a      	ldr	r1, [pc, #552]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81055ca:	4313      	orrs	r3, r2
 81055cc:	654b      	str	r3, [r1, #84]	; 0x54
 81055ce:	e001      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055d0:	7dfb      	ldrb	r3, [r7, #23]
 81055d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d04b      	beq.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81055e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81055ea:	d02e      	beq.n	810564a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81055ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81055f0:	d828      	bhi.n	8105644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81055f6:	d02a      	beq.n	810564e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81055fc:	d822      	bhi.n	8105644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81055fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105602:	d026      	beq.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105608:	d81c      	bhi.n	8105644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810560a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810560e:	d010      	beq.n	8105632 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8105610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105614:	d816      	bhi.n	8105644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8105616:	2b00      	cmp	r3, #0
 8105618:	d01d      	beq.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810561a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810561e:	d111      	bne.n	8105644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	3304      	adds	r3, #4
 8105624:	2100      	movs	r1, #0
 8105626:	4618      	mov	r0, r3
 8105628:	f001 faf6 	bl	8106c18 <RCCEx_PLL2_Config>
 810562c:	4603      	mov	r3, r0
 810562e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105630:	e012      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	3324      	adds	r3, #36	; 0x24
 8105636:	2102      	movs	r1, #2
 8105638:	4618      	mov	r0, r3
 810563a:	f001 fb9f 	bl	8106d7c <RCCEx_PLL3_Config>
 810563e:	4603      	mov	r3, r0
 8105640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105642:	e009      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105644:	2301      	movs	r3, #1
 8105646:	75fb      	strb	r3, [r7, #23]
      break;
 8105648:	e006      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810564a:	bf00      	nop
 810564c:	e004      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810564e:	bf00      	nop
 8105650:	e002      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8105652:	bf00      	nop
 8105654:	e000      	b.n	8105658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8105656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105658:	7dfb      	ldrb	r3, [r7, #23]
 810565a:	2b00      	cmp	r3, #0
 810565c:	d10a      	bne.n	8105674 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810565e:	4b65      	ldr	r3, [pc, #404]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8105660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105662:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810566c:	4961      	ldr	r1, [pc, #388]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810566e:	4313      	orrs	r3, r2
 8105670:	658b      	str	r3, [r1, #88]	; 0x58
 8105672:	e001      	b.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105674:	7dfb      	ldrb	r3, [r7, #23]
 8105676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105680:	2b00      	cmp	r3, #0
 8105682:	d04b      	beq.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810568a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810568e:	d02e      	beq.n	81056ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8105690:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105694:	d828      	bhi.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8105696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810569a:	d02a      	beq.n	81056f2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81056a0:	d822      	bhi.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81056a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056a6:	d026      	beq.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81056a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056ac:	d81c      	bhi.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81056ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81056b2:	d010      	beq.n	81056d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81056b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81056b8:	d816      	bhi.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d01d      	beq.n	81056fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81056be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81056c2:	d111      	bne.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	3304      	adds	r3, #4
 81056c8:	2100      	movs	r1, #0
 81056ca:	4618      	mov	r0, r3
 81056cc:	f001 faa4 	bl	8106c18 <RCCEx_PLL2_Config>
 81056d0:	4603      	mov	r3, r0
 81056d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81056d4:	e012      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	3324      	adds	r3, #36	; 0x24
 81056da:	2102      	movs	r1, #2
 81056dc:	4618      	mov	r0, r3
 81056de:	f001 fb4d 	bl	8106d7c <RCCEx_PLL3_Config>
 81056e2:	4603      	mov	r3, r0
 81056e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81056e6:	e009      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056e8:	2301      	movs	r3, #1
 81056ea:	75fb      	strb	r3, [r7, #23]
      break;
 81056ec:	e006      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81056ee:	bf00      	nop
 81056f0:	e004      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81056f2:	bf00      	nop
 81056f4:	e002      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81056f6:	bf00      	nop
 81056f8:	e000      	b.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81056fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81056fc:	7dfb      	ldrb	r3, [r7, #23]
 81056fe:	2b00      	cmp	r3, #0
 8105700:	d10a      	bne.n	8105718 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105702:	4b3c      	ldr	r3, [pc, #240]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8105704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105710:	4938      	ldr	r1, [pc, #224]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8105712:	4313      	orrs	r3, r2
 8105714:	658b      	str	r3, [r1, #88]	; 0x58
 8105716:	e001      	b.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105718:	7dfb      	ldrb	r3, [r7, #23]
 810571a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	f003 0308 	and.w	r3, r3, #8
 8105724:	2b00      	cmp	r3, #0
 8105726:	d01a      	beq.n	810575e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810572e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105732:	d10a      	bne.n	810574a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	3324      	adds	r3, #36	; 0x24
 8105738:	2102      	movs	r1, #2
 810573a:	4618      	mov	r0, r3
 810573c:	f001 fb1e 	bl	8106d7c <RCCEx_PLL3_Config>
 8105740:	4603      	mov	r3, r0
 8105742:	2b00      	cmp	r3, #0
 8105744:	d001      	beq.n	810574a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8105746:	2301      	movs	r3, #1
 8105748:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810574a:	4b2a      	ldr	r3, [pc, #168]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810574e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105758:	4926      	ldr	r1, [pc, #152]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810575a:	4313      	orrs	r3, r2
 810575c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	f003 0310 	and.w	r3, r3, #16
 8105766:	2b00      	cmp	r3, #0
 8105768:	d01a      	beq.n	81057a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105774:	d10a      	bne.n	810578c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	3324      	adds	r3, #36	; 0x24
 810577a:	2102      	movs	r1, #2
 810577c:	4618      	mov	r0, r3
 810577e:	f001 fafd 	bl	8106d7c <RCCEx_PLL3_Config>
 8105782:	4603      	mov	r3, r0
 8105784:	2b00      	cmp	r3, #0
 8105786:	d001      	beq.n	810578c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8105788:	2301      	movs	r3, #1
 810578a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810578c:	4b19      	ldr	r3, [pc, #100]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810579a:	4916      	ldr	r1, [pc, #88]	; (81057f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810579c:	4313      	orrs	r3, r2
 810579e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81057a8:	2b00      	cmp	r3, #0
 81057aa:	d036      	beq.n	810581a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81057b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81057b6:	d01f      	beq.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81057b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81057bc:	d817      	bhi.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81057be:	2b00      	cmp	r3, #0
 81057c0:	d003      	beq.n	81057ca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81057c6:	d009      	beq.n	81057dc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81057c8:	e011      	b.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	3304      	adds	r3, #4
 81057ce:	2100      	movs	r1, #0
 81057d0:	4618      	mov	r0, r3
 81057d2:	f001 fa21 	bl	8106c18 <RCCEx_PLL2_Config>
 81057d6:	4603      	mov	r3, r0
 81057d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81057da:	e00e      	b.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	3324      	adds	r3, #36	; 0x24
 81057e0:	2102      	movs	r1, #2
 81057e2:	4618      	mov	r0, r3
 81057e4:	f001 faca 	bl	8106d7c <RCCEx_PLL3_Config>
 81057e8:	4603      	mov	r3, r0
 81057ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81057ec:	e005      	b.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81057ee:	2301      	movs	r3, #1
 81057f0:	75fb      	strb	r3, [r7, #23]
      break;
 81057f2:	e002      	b.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81057f4:	58024400 	.word	0x58024400
      break;
 81057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81057fa:	7dfb      	ldrb	r3, [r7, #23]
 81057fc:	2b00      	cmp	r3, #0
 81057fe:	d10a      	bne.n	8105816 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105800:	4b93      	ldr	r3, [pc, #588]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810580e:	4990      	ldr	r1, [pc, #576]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105810:	4313      	orrs	r3, r2
 8105812:	658b      	str	r3, [r1, #88]	; 0x58
 8105814:	e001      	b.n	810581a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105816:	7dfb      	ldrb	r3, [r7, #23]
 8105818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105822:	2b00      	cmp	r3, #0
 8105824:	d033      	beq.n	810588e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810582c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105830:	d01c      	beq.n	810586c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8105832:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105836:	d816      	bhi.n	8105866 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8105838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810583c:	d003      	beq.n	8105846 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810583e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105842:	d007      	beq.n	8105854 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8105844:	e00f      	b.n	8105866 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105846:	4b82      	ldr	r3, [pc, #520]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810584a:	4a81      	ldr	r2, [pc, #516]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810584c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8105852:	e00c      	b.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	3324      	adds	r3, #36	; 0x24
 8105858:	2101      	movs	r1, #1
 810585a:	4618      	mov	r0, r3
 810585c:	f001 fa8e 	bl	8106d7c <RCCEx_PLL3_Config>
 8105860:	4603      	mov	r3, r0
 8105862:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8105864:	e003      	b.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105866:	2301      	movs	r3, #1
 8105868:	75fb      	strb	r3, [r7, #23]
      break;
 810586a:	e000      	b.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810586c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810586e:	7dfb      	ldrb	r3, [r7, #23]
 8105870:	2b00      	cmp	r3, #0
 8105872:	d10a      	bne.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105874:	4b76      	ldr	r3, [pc, #472]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810587c:	687b      	ldr	r3, [r7, #4]
 810587e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105882:	4973      	ldr	r1, [pc, #460]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105884:	4313      	orrs	r3, r2
 8105886:	654b      	str	r3, [r1, #84]	; 0x54
 8105888:	e001      	b.n	810588e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810588a:	7dfb      	ldrb	r3, [r7, #23]
 810588c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105896:	2b00      	cmp	r3, #0
 8105898:	d029      	beq.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d003      	beq.n	81058aa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81058a6:	d007      	beq.n	81058b8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81058a8:	e00f      	b.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058aa:	4b69      	ldr	r3, [pc, #420]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058ae:	4a68      	ldr	r2, [pc, #416]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81058b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81058b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81058b6:	e00b      	b.n	81058d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	3304      	adds	r3, #4
 81058bc:	2102      	movs	r1, #2
 81058be:	4618      	mov	r0, r3
 81058c0:	f001 f9aa 	bl	8106c18 <RCCEx_PLL2_Config>
 81058c4:	4603      	mov	r3, r0
 81058c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81058c8:	e002      	b.n	81058d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81058ca:	2301      	movs	r3, #1
 81058cc:	75fb      	strb	r3, [r7, #23]
      break;
 81058ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81058d0:	7dfb      	ldrb	r3, [r7, #23]
 81058d2:	2b00      	cmp	r3, #0
 81058d4:	d109      	bne.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81058d6:	4b5e      	ldr	r3, [pc, #376]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81058d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058e2:	495b      	ldr	r1, [pc, #364]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81058e4:	4313      	orrs	r3, r2
 81058e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81058e8:	e001      	b.n	81058ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058ea:	7dfb      	ldrb	r3, [r7, #23]
 81058ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81058f6:	2b00      	cmp	r3, #0
 81058f8:	d00a      	beq.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81058fa:	687b      	ldr	r3, [r7, #4]
 81058fc:	3324      	adds	r3, #36	; 0x24
 81058fe:	2102      	movs	r1, #2
 8105900:	4618      	mov	r0, r3
 8105902:	f001 fa3b 	bl	8106d7c <RCCEx_PLL3_Config>
 8105906:	4603      	mov	r3, r0
 8105908:	2b00      	cmp	r3, #0
 810590a:	d001      	beq.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810590c:	2301      	movs	r3, #1
 810590e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105918:	2b00      	cmp	r3, #0
 810591a:	d030      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105924:	d017      	beq.n	8105956 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8105926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810592a:	d811      	bhi.n	8105950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810592c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105930:	d013      	beq.n	810595a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8105932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105936:	d80b      	bhi.n	8105950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8105938:	2b00      	cmp	r3, #0
 810593a:	d010      	beq.n	810595e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105940:	d106      	bne.n	8105950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105942:	4b43      	ldr	r3, [pc, #268]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105946:	4a42      	ldr	r2, [pc, #264]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810594c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810594e:	e007      	b.n	8105960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105950:	2301      	movs	r3, #1
 8105952:	75fb      	strb	r3, [r7, #23]
      break;
 8105954:	e004      	b.n	8105960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8105956:	bf00      	nop
 8105958:	e002      	b.n	8105960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810595a:	bf00      	nop
 810595c:	e000      	b.n	8105960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810595e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105960:	7dfb      	ldrb	r3, [r7, #23]
 8105962:	2b00      	cmp	r3, #0
 8105964:	d109      	bne.n	810597a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105966:	4b3a      	ldr	r3, [pc, #232]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810596a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105972:	4937      	ldr	r1, [pc, #220]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105974:	4313      	orrs	r3, r2
 8105976:	654b      	str	r3, [r1, #84]	; 0x54
 8105978:	e001      	b.n	810597e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810597a:	7dfb      	ldrb	r3, [r7, #23]
 810597c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810597e:	687b      	ldr	r3, [r7, #4]
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105986:	2b00      	cmp	r3, #0
 8105988:	d008      	beq.n	810599c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810598a:	4b31      	ldr	r3, [pc, #196]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810598e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105996:	492e      	ldr	r1, [pc, #184]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105998:	4313      	orrs	r3, r2
 810599a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81059a4:	2b00      	cmp	r3, #0
 81059a6:	d009      	beq.n	81059bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81059a8:	4b29      	ldr	r3, [pc, #164]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059aa:	691b      	ldr	r3, [r3, #16]
 81059ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81059b0:	687b      	ldr	r3, [r7, #4]
 81059b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81059b6:	4926      	ldr	r1, [pc, #152]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059b8:	4313      	orrs	r3, r2
 81059ba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81059c4:	2b00      	cmp	r3, #0
 81059c6:	d008      	beq.n	81059da <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81059c8:	4b21      	ldr	r3, [pc, #132]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81059cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81059d4:	491e      	ldr	r1, [pc, #120]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059d6:	4313      	orrs	r3, r2
 81059d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81059e2:	2b00      	cmp	r3, #0
 81059e4:	d00d      	beq.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81059e6:	4b1a      	ldr	r3, [pc, #104]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059e8:	691b      	ldr	r3, [r3, #16]
 81059ea:	4a19      	ldr	r2, [pc, #100]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81059f0:	6113      	str	r3, [r2, #16]
 81059f2:	4b17      	ldr	r3, [pc, #92]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059f4:	691a      	ldr	r2, [r3, #16]
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81059fc:	4914      	ldr	r1, [pc, #80]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81059fe:	4313      	orrs	r3, r2
 8105a00:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	da08      	bge.n	8105a1c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105a0a:	4b11      	ldr	r3, [pc, #68]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a16:	490e      	ldr	r1, [pc, #56]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105a18:	4313      	orrs	r3, r2
 8105a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105a24:	2b00      	cmp	r3, #0
 8105a26:	d009      	beq.n	8105a3c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105a28:	4b09      	ldr	r3, [pc, #36]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105a36:	4906      	ldr	r1, [pc, #24]	; (8105a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8105a38:	4313      	orrs	r3, r2
 8105a3a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8105a3c:	7dbb      	ldrb	r3, [r7, #22]
 8105a3e:	2b00      	cmp	r3, #0
 8105a40:	d101      	bne.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8105a42:	2300      	movs	r3, #0
 8105a44:	e000      	b.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8105a46:	2301      	movs	r3, #1
}
 8105a48:	4618      	mov	r0, r3
 8105a4a:	3718      	adds	r7, #24
 8105a4c:	46bd      	mov	sp, r7
 8105a4e:	bd80      	pop	{r7, pc}
 8105a50:	58024400 	.word	0x58024400

08105a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8105a54:	b580      	push	{r7, lr}
 8105a56:	b090      	sub	sp, #64	; 0x40
 8105a58:	af00      	add	r7, sp, #0
 8105a5a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105a62:	f040 8095 	bne.w	8105b90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8105a66:	4bae      	ldr	r3, [pc, #696]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a6a:	f003 0307 	and.w	r3, r3, #7
 8105a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8105a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105a72:	2b04      	cmp	r3, #4
 8105a74:	f200 8088 	bhi.w	8105b88 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8105a78:	a201      	add	r2, pc, #4	; (adr r2, 8105a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8105a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a7e:	bf00      	nop
 8105a80:	08105a95 	.word	0x08105a95
 8105a84:	08105abd 	.word	0x08105abd
 8105a88:	08105ae5 	.word	0x08105ae5
 8105a8c:	08105b81 	.word	0x08105b81
 8105a90:	08105b0d 	.word	0x08105b0d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105a94:	4ba2      	ldr	r3, [pc, #648]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105aa0:	d108      	bne.n	8105ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105aa6:	4618      	mov	r0, r3
 8105aa8:	f000 ff64 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8105aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105aae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ab0:	f000 bc95 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105ab4:	2300      	movs	r3, #0
 8105ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ab8:	f000 bc91 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105abc:	4b98      	ldr	r3, [pc, #608]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105ac8:	d108      	bne.n	8105adc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105aca:	f107 0318 	add.w	r3, r7, #24
 8105ace:	4618      	mov	r0, r3
 8105ad0:	f000 fca8 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105ad4:	69bb      	ldr	r3, [r7, #24]
 8105ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105ad8:	f000 bc81 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105adc:	2300      	movs	r3, #0
 8105ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ae0:	f000 bc7d 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105ae4:	4b8e      	ldr	r3, [pc, #568]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105af0:	d108      	bne.n	8105b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105af2:	f107 030c 	add.w	r3, r7, #12
 8105af6:	4618      	mov	r0, r3
 8105af8:	f000 fde8 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105afc:	68fb      	ldr	r3, [r7, #12]
 8105afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105b00:	f000 bc6d 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105b04:	2300      	movs	r3, #0
 8105b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b08:	f000 bc69 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105b0c:	4b84      	ldr	r3, [pc, #528]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105b14:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105b16:	4b82      	ldr	r3, [pc, #520]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b18:	681b      	ldr	r3, [r3, #0]
 8105b1a:	f003 0304 	and.w	r3, r3, #4
 8105b1e:	2b04      	cmp	r3, #4
 8105b20:	d10c      	bne.n	8105b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8105b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b24:	2b00      	cmp	r3, #0
 8105b26:	d109      	bne.n	8105b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105b28:	4b7d      	ldr	r3, [pc, #500]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b2a:	681b      	ldr	r3, [r3, #0]
 8105b2c:	08db      	lsrs	r3, r3, #3
 8105b2e:	f003 0303 	and.w	r3, r3, #3
 8105b32:	4a7c      	ldr	r2, [pc, #496]	; (8105d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8105b34:	fa22 f303 	lsr.w	r3, r2, r3
 8105b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b3a:	e01f      	b.n	8105b7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105b3c:	4b78      	ldr	r3, [pc, #480]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b48:	d106      	bne.n	8105b58 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8105b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105b50:	d102      	bne.n	8105b58 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105b52:	4b75      	ldr	r3, [pc, #468]	; (8105d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8105b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b56:	e011      	b.n	8105b7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105b58:	4b71      	ldr	r3, [pc, #452]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105b64:	d106      	bne.n	8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8105b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105b6c:	d102      	bne.n	8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105b6e:	4b6f      	ldr	r3, [pc, #444]	; (8105d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8105b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105b72:	e003      	b.n	8105b7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105b74:	2300      	movs	r3, #0
 8105b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105b78:	f000 bc31 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105b7c:	f000 bc2f 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105b80:	4b6b      	ldr	r3, [pc, #428]	; (8105d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8105b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b84:	f000 bc2b 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8105b88:	2300      	movs	r3, #0
 8105b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105b8c:	f000 bc27 	b.w	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105b96:	f040 8095 	bne.w	8105cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8105b9a:	4b61      	ldr	r3, [pc, #388]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b9e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8105ba2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105baa:	d04d      	beq.n	8105c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8105bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bb2:	f200 8084 	bhi.w	8105cbe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bb8:	2bc0      	cmp	r3, #192	; 0xc0
 8105bba:	d07d      	beq.n	8105cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8105bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8105bc0:	d87d      	bhi.n	8105cbe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bc4:	2b80      	cmp	r3, #128	; 0x80
 8105bc6:	d02d      	beq.n	8105c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bca:	2b80      	cmp	r3, #128	; 0x80
 8105bcc:	d877      	bhi.n	8105cbe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bd0:	2b00      	cmp	r3, #0
 8105bd2:	d003      	beq.n	8105bdc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8105bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bd6:	2b40      	cmp	r3, #64	; 0x40
 8105bd8:	d012      	beq.n	8105c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8105bda:	e070      	b.n	8105cbe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105bdc:	4b50      	ldr	r3, [pc, #320]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105be8:	d107      	bne.n	8105bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105bee:	4618      	mov	r0, r3
 8105bf0:	f000 fec0 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105bf8:	e3f1      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105bfa:	2300      	movs	r3, #0
 8105bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105bfe:	e3ee      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105c00:	4b47      	ldr	r3, [pc, #284]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105c0c:	d107      	bne.n	8105c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105c0e:	f107 0318 	add.w	r3, r7, #24
 8105c12:	4618      	mov	r0, r3
 8105c14:	f000 fc06 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105c18:	69bb      	ldr	r3, [r7, #24]
 8105c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105c1c:	e3df      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105c1e:	2300      	movs	r3, #0
 8105c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105c22:	e3dc      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105c24:	4b3e      	ldr	r3, [pc, #248]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c26:	681b      	ldr	r3, [r3, #0]
 8105c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105c30:	d107      	bne.n	8105c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105c32:	f107 030c 	add.w	r3, r7, #12
 8105c36:	4618      	mov	r0, r3
 8105c38:	f000 fd48 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105c3c:	68fb      	ldr	r3, [r7, #12]
 8105c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105c40:	e3cd      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105c42:	2300      	movs	r3, #0
 8105c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105c46:	e3ca      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105c48:	4b35      	ldr	r3, [pc, #212]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105c50:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c52:	4b33      	ldr	r3, [pc, #204]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	f003 0304 	and.w	r3, r3, #4
 8105c5a:	2b04      	cmp	r3, #4
 8105c5c:	d10c      	bne.n	8105c78 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8105c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d109      	bne.n	8105c78 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105c64:	4b2e      	ldr	r3, [pc, #184]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	08db      	lsrs	r3, r3, #3
 8105c6a:	f003 0303 	and.w	r3, r3, #3
 8105c6e:	4a2d      	ldr	r2, [pc, #180]	; (8105d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8105c70:	fa22 f303 	lsr.w	r3, r2, r3
 8105c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105c76:	e01e      	b.n	8105cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105c78:	4b29      	ldr	r3, [pc, #164]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c7a:	681b      	ldr	r3, [r3, #0]
 8105c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c84:	d106      	bne.n	8105c94 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8105c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105c8c:	d102      	bne.n	8105c94 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105c8e:	4b26      	ldr	r3, [pc, #152]	; (8105d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8105c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105c92:	e010      	b.n	8105cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105c94:	4b22      	ldr	r3, [pc, #136]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105c96:	681b      	ldr	r3, [r3, #0]
 8105c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ca0:	d106      	bne.n	8105cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8105ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ca8:	d102      	bne.n	8105cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105caa:	4b20      	ldr	r3, [pc, #128]	; (8105d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8105cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105cae:	e002      	b.n	8105cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105cb0:	2300      	movs	r3, #0
 8105cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105cb4:	e393      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105cb6:	e392      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105cb8:	4b1d      	ldr	r3, [pc, #116]	; (8105d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8105cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105cbc:	e38f      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8105cbe:	2300      	movs	r3, #0
 8105cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105cc2:	e38c      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105cca:	f040 80a7 	bne.w	8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8105cce:	4b14      	ldr	r3, [pc, #80]	; (8105d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105cd2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8105cd6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105cde:	d05f      	beq.n	8105da0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8105ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105ce6:	f200 8096 	bhi.w	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8105cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105cec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cf0:	f000 808e 	beq.w	8105e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8105cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105cf6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cfa:	f200 808c 	bhi.w	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8105cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d04:	d03a      	beq.n	8105d7c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8105d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d0c:	f200 8083 	bhi.w	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8105d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d00e      	beq.n	8105d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8105d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105d1c:	d01c      	beq.n	8105d58 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8105d1e:	e07a      	b.n	8105e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8105d20:	58024400 	.word	0x58024400
 8105d24:	03d09000 	.word	0x03d09000
 8105d28:	003d0900 	.word	0x003d0900
 8105d2c:	017d7840 	.word	0x017d7840
 8105d30:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105d34:	4baa      	ldr	r3, [pc, #680]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d40:	d107      	bne.n	8105d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105d46:	4618      	mov	r0, r3
 8105d48:	f000 fe14 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d50:	e345      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105d52:	2300      	movs	r3, #0
 8105d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d56:	e342      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d58:	4ba1      	ldr	r3, [pc, #644]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105d64:	d107      	bne.n	8105d76 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d66:	f107 0318 	add.w	r3, r7, #24
 8105d6a:	4618      	mov	r0, r3
 8105d6c:	f000 fb5a 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105d70:	69bb      	ldr	r3, [r7, #24]
 8105d72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d74:	e333      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105d76:	2300      	movs	r3, #0
 8105d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d7a:	e330      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d7c:	4b98      	ldr	r3, [pc, #608]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d88:	d107      	bne.n	8105d9a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d8a:	f107 030c 	add.w	r3, r7, #12
 8105d8e:	4618      	mov	r0, r3
 8105d90:	f000 fc9c 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105d94:	68fb      	ldr	r3, [r7, #12]
 8105d96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d98:	e321      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105d9a:	2300      	movs	r3, #0
 8105d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d9e:	e31e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105da0:	4b8f      	ldr	r3, [pc, #572]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105da8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105daa:	4b8d      	ldr	r3, [pc, #564]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	f003 0304 	and.w	r3, r3, #4
 8105db2:	2b04      	cmp	r3, #4
 8105db4:	d10c      	bne.n	8105dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8105db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105db8:	2b00      	cmp	r3, #0
 8105dba:	d109      	bne.n	8105dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105dbc:	4b88      	ldr	r3, [pc, #544]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	08db      	lsrs	r3, r3, #3
 8105dc2:	f003 0303 	and.w	r3, r3, #3
 8105dc6:	4a87      	ldr	r2, [pc, #540]	; (8105fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8105dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8105dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105dce:	e01e      	b.n	8105e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105dd0:	4b83      	ldr	r3, [pc, #524]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105ddc:	d106      	bne.n	8105dec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8105dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105de4:	d102      	bne.n	8105dec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105de6:	4b80      	ldr	r3, [pc, #512]	; (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8105de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105dea:	e010      	b.n	8105e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105dec:	4b7c      	ldr	r3, [pc, #496]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105df8:	d106      	bne.n	8105e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8105dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e00:	d102      	bne.n	8105e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105e02:	4b7a      	ldr	r3, [pc, #488]	; (8105fec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8105e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105e06:	e002      	b.n	8105e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105e08:	2300      	movs	r3, #0
 8105e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105e0c:	e2e7      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105e0e:	e2e6      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105e10:	4b77      	ldr	r3, [pc, #476]	; (8105ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8105e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e14:	e2e3      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8105e16:	2300      	movs	r3, #0
 8105e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e1a:	e2e0      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105e22:	f040 809c 	bne.w	8105f5e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8105e26:	4b6e      	ldr	r3, [pc, #440]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8105e2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105e36:	d054      	beq.n	8105ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8105e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105e3e:	f200 808b 	bhi.w	8105f58 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8105e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105e48:	f000 8083 	beq.w	8105f52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8105e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105e52:	f200 8081 	bhi.w	8105f58 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8105e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e5c:	d02f      	beq.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8105e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e64:	d878      	bhi.n	8105f58 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8105e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e68:	2b00      	cmp	r3, #0
 8105e6a:	d004      	beq.n	8105e76 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8105e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105e72:	d012      	beq.n	8105e9a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8105e74:	e070      	b.n	8105f58 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e76:	4b5a      	ldr	r3, [pc, #360]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e82:	d107      	bne.n	8105e94 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105e88:	4618      	mov	r0, r3
 8105e8a:	f000 fd73 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105e90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105e92:	e2a4      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105e94:	2300      	movs	r3, #0
 8105e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e98:	e2a1      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105e9a:	4b51      	ldr	r3, [pc, #324]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105ea6:	d107      	bne.n	8105eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ea8:	f107 0318 	add.w	r3, r7, #24
 8105eac:	4618      	mov	r0, r3
 8105eae:	f000 fab9 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105eb2:	69bb      	ldr	r3, [r7, #24]
 8105eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8105eb6:	e292      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105eb8:	2300      	movs	r3, #0
 8105eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ebc:	e28f      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105ebe:	4b48      	ldr	r3, [pc, #288]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105eca:	d107      	bne.n	8105edc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ecc:	f107 030c 	add.w	r3, r7, #12
 8105ed0:	4618      	mov	r0, r3
 8105ed2:	f000 fbfb 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105ed6:	68fb      	ldr	r3, [r7, #12]
 8105ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105eda:	e280      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105edc:	2300      	movs	r3, #0
 8105ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ee0:	e27d      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105ee2:	4b3f      	ldr	r3, [pc, #252]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105eea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105eec:	4b3c      	ldr	r3, [pc, #240]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105eee:	681b      	ldr	r3, [r3, #0]
 8105ef0:	f003 0304 	and.w	r3, r3, #4
 8105ef4:	2b04      	cmp	r3, #4
 8105ef6:	d10c      	bne.n	8105f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8105ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d109      	bne.n	8105f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105efe:	4b38      	ldr	r3, [pc, #224]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	08db      	lsrs	r3, r3, #3
 8105f04:	f003 0303 	and.w	r3, r3, #3
 8105f08:	4a36      	ldr	r2, [pc, #216]	; (8105fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8105f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8105f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f10:	e01e      	b.n	8105f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105f12:	4b33      	ldr	r3, [pc, #204]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105f1e:	d106      	bne.n	8105f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8105f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f26:	d102      	bne.n	8105f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105f28:	4b2f      	ldr	r3, [pc, #188]	; (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8105f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f2c:	e010      	b.n	8105f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105f2e:	4b2c      	ldr	r3, [pc, #176]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105f3a:	d106      	bne.n	8105f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8105f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f42:	d102      	bne.n	8105f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105f44:	4b29      	ldr	r3, [pc, #164]	; (8105fec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8105f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f48:	e002      	b.n	8105f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105f4a:	2300      	movs	r3, #0
 8105f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105f4e:	e246      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105f50:	e245      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105f52:	4b27      	ldr	r3, [pc, #156]	; (8105ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8105f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105f56:	e242      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8105f58:	2300      	movs	r3, #0
 8105f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105f5c:	e23f      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105f64:	f040 80a8 	bne.w	81060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8105f68:	4b1d      	ldr	r3, [pc, #116]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105f70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105f78:	d060      	beq.n	810603c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8105f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105f80:	f200 8097 	bhi.w	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8105f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f8a:	f000 808f 	beq.w	81060ac <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8105f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f94:	f200 808d 	bhi.w	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8105f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f9e:	d03b      	beq.n	8106018 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8105fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105fa6:	f200 8084 	bhi.w	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8105faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	d004      	beq.n	8105fba <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8105fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fb6:	d01d      	beq.n	8105ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8105fb8:	e07b      	b.n	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105fba:	4b09      	ldr	r3, [pc, #36]	; (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105fc6:	d107      	bne.n	8105fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105fcc:	4618      	mov	r0, r3
 8105fce:	f000 fcd1 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105fd6:	e202      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105fd8:	2300      	movs	r3, #0
 8105fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105fdc:	e1ff      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105fde:	bf00      	nop
 8105fe0:	58024400 	.word	0x58024400
 8105fe4:	03d09000 	.word	0x03d09000
 8105fe8:	003d0900 	.word	0x003d0900
 8105fec:	017d7840 	.word	0x017d7840
 8105ff0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105ff4:	4ba3      	ldr	r3, [pc, #652]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106000:	d107      	bne.n	8106012 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106002:	f107 0318 	add.w	r3, r7, #24
 8106006:	4618      	mov	r0, r3
 8106008:	f000 fa0c 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810600c:	69bb      	ldr	r3, [r7, #24]
 810600e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106010:	e1e5      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106012:	2300      	movs	r3, #0
 8106014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106016:	e1e2      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106018:	4b9a      	ldr	r3, [pc, #616]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106024:	d107      	bne.n	8106036 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106026:	f107 030c 	add.w	r3, r7, #12
 810602a:	4618      	mov	r0, r3
 810602c:	f000 fb4e 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106030:	68fb      	ldr	r3, [r7, #12]
 8106032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106034:	e1d3      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106036:	2300      	movs	r3, #0
 8106038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810603a:	e1d0      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810603c:	4b91      	ldr	r3, [pc, #580]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106044:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106046:	4b8f      	ldr	r3, [pc, #572]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	f003 0304 	and.w	r3, r3, #4
 810604e:	2b04      	cmp	r3, #4
 8106050:	d10c      	bne.n	810606c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8106052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106054:	2b00      	cmp	r3, #0
 8106056:	d109      	bne.n	810606c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106058:	4b8a      	ldr	r3, [pc, #552]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	08db      	lsrs	r3, r3, #3
 810605e:	f003 0303 	and.w	r3, r3, #3
 8106062:	4a89      	ldr	r2, [pc, #548]	; (8106288 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8106064:	fa22 f303 	lsr.w	r3, r2, r3
 8106068:	63fb      	str	r3, [r7, #60]	; 0x3c
 810606a:	e01e      	b.n	81060aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810606c:	4b85      	ldr	r3, [pc, #532]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106078:	d106      	bne.n	8106088 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810607c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106080:	d102      	bne.n	8106088 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106082:	4b82      	ldr	r3, [pc, #520]	; (810628c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8106084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106086:	e010      	b.n	81060aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106088:	4b7e      	ldr	r3, [pc, #504]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106094:	d106      	bne.n	81060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8106096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810609c:	d102      	bne.n	81060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810609e:	4b7c      	ldr	r3, [pc, #496]	; (8106290 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 81060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060a2:	e002      	b.n	81060aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81060a4:	2300      	movs	r3, #0
 81060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81060a8:	e199      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81060aa:	e198      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81060ac:	4b79      	ldr	r3, [pc, #484]	; (8106294 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060b0:	e195      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81060b2:	2300      	movs	r3, #0
 81060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060b6:	e192      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81060be:	d173      	bne.n	81061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81060c0:	4b70      	ldr	r3, [pc, #448]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81060c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060d0:	d02f      	beq.n	8106132 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 81060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81060d8:	d863      	bhi.n	81061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 81060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d004      	beq.n	81060ea <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 81060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81060e6:	d012      	beq.n	810610e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 81060e8:	e05b      	b.n	81061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81060ea:	4b66      	ldr	r3, [pc, #408]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81060f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81060f6:	d107      	bne.n	8106108 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81060f8:	f107 0318 	add.w	r3, r7, #24
 81060fc:	4618      	mov	r0, r3
 81060fe:	f000 f991 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106102:	69bb      	ldr	r3, [r7, #24]
 8106104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106106:	e16a      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106108:	2300      	movs	r3, #0
 810610a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810610c:	e167      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810610e:	4b5d      	ldr	r3, [pc, #372]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810611a:	d107      	bne.n	810612c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810611c:	f107 030c 	add.w	r3, r7, #12
 8106120:	4618      	mov	r0, r3
 8106122:	f000 fad3 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106126:	697b      	ldr	r3, [r7, #20]
 8106128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810612a:	e158      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810612c:	2300      	movs	r3, #0
 810612e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106130:	e155      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106132:	4b54      	ldr	r3, [pc, #336]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810613a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810613c:	4b51      	ldr	r3, [pc, #324]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	f003 0304 	and.w	r3, r3, #4
 8106144:	2b04      	cmp	r3, #4
 8106146:	d10c      	bne.n	8106162 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8106148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810614a:	2b00      	cmp	r3, #0
 810614c:	d109      	bne.n	8106162 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810614e:	4b4d      	ldr	r3, [pc, #308]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106150:	681b      	ldr	r3, [r3, #0]
 8106152:	08db      	lsrs	r3, r3, #3
 8106154:	f003 0303 	and.w	r3, r3, #3
 8106158:	4a4b      	ldr	r2, [pc, #300]	; (8106288 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810615a:	fa22 f303 	lsr.w	r3, r2, r3
 810615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106160:	e01e      	b.n	81061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106162:	4b48      	ldr	r3, [pc, #288]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106164:	681b      	ldr	r3, [r3, #0]
 8106166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810616e:	d106      	bne.n	810617e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8106170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106176:	d102      	bne.n	810617e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106178:	4b44      	ldr	r3, [pc, #272]	; (810628c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810617a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810617c:	e010      	b.n	81061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810617e:	4b41      	ldr	r3, [pc, #260]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810618a:	d106      	bne.n	810619a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810618e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106192:	d102      	bne.n	810619a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106194:	4b3e      	ldr	r3, [pc, #248]	; (8106290 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8106196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106198:	e002      	b.n	81061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810619a:	2300      	movs	r3, #0
 810619c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810619e:	e11e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81061a0:	e11d      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 81061a2:	2300      	movs	r3, #0
 81061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81061a6:	e11a      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81061ae:	d133      	bne.n	8106218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81061b0:	4b34      	ldr	r3, [pc, #208]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81061b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81061b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81061b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061bc:	2b00      	cmp	r3, #0
 81061be:	d004      	beq.n	81061ca <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 81061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81061c6:	d012      	beq.n	81061ee <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 81061c8:	e023      	b.n	8106212 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81061ca:	4b2e      	ldr	r3, [pc, #184]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81061d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81061d6:	d107      	bne.n	81061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81061d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81061dc:	4618      	mov	r0, r3
 81061de:	f000 fbc9 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81061e6:	e0fa      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81061e8:	2300      	movs	r3, #0
 81061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81061ec:	e0f7      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81061ee:	4b25      	ldr	r3, [pc, #148]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81061f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81061fa:	d107      	bne.n	810620c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81061fc:	f107 0318 	add.w	r3, r7, #24
 8106200:	4618      	mov	r0, r3
 8106202:	f000 f90f 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106206:	6a3b      	ldr	r3, [r7, #32]
 8106208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810620a:	e0e8      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810620c:	2300      	movs	r3, #0
 810620e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106210:	e0e5      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106212:	2300      	movs	r3, #0
 8106214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106216:	e0e2      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810621e:	f040 808f 	bne.w	8106340 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106222:	4b18      	ldr	r3, [pc, #96]	; (8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106226:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810622a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810622e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106232:	d075      	beq.n	8106320 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8106234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810623a:	d87e      	bhi.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106242:	d060      	beq.n	8106306 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8106244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810624a:	d876      	bhi.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810624e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106252:	d045      	beq.n	81062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8106254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810625a:	d86e      	bhi.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810625e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106262:	d02b      	beq.n	81062bc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8106264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810626a:	d866      	bhi.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810626e:	2b00      	cmp	r3, #0
 8106270:	d004      	beq.n	810627c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8106272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106278:	d00e      	beq.n	8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810627a:	e05e      	b.n	810633a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810627c:	f000 f8bc 	bl	81063f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8106280:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8106282:	e0ac      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106284:	58024400 	.word	0x58024400
 8106288:	03d09000 	.word	0x03d09000
 810628c:	003d0900 	.word	0x003d0900
 8106290:	017d7840 	.word	0x017d7840
 8106294:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106298:	4b53      	ldr	r3, [pc, #332]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81062a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81062a4:	d107      	bne.n	81062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81062a6:	f107 0318 	add.w	r3, r7, #24
 81062aa:	4618      	mov	r0, r3
 81062ac:	f000 f8ba 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81062b0:	69fb      	ldr	r3, [r7, #28]
 81062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81062b4:	e093      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81062b6:	2300      	movs	r3, #0
 81062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062ba:	e090      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81062bc:	4b4a      	ldr	r3, [pc, #296]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062c8:	d107      	bne.n	81062da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81062ca:	f107 030c 	add.w	r3, r7, #12
 81062ce:	4618      	mov	r0, r3
 81062d0:	f000 f9fc 	bl	81066cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81062d4:	693b      	ldr	r3, [r7, #16]
 81062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81062d8:	e081      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81062da:	2300      	movs	r3, #0
 81062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062de:	e07e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81062e0:	4b41      	ldr	r3, [pc, #260]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	f003 0304 	and.w	r3, r3, #4
 81062e8:	2b04      	cmp	r3, #4
 81062ea:	d109      	bne.n	8106300 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81062ec:	4b3e      	ldr	r3, [pc, #248]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	08db      	lsrs	r3, r3, #3
 81062f2:	f003 0303 	and.w	r3, r3, #3
 81062f6:	4a3d      	ldr	r2, [pc, #244]	; (81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 81062f8:	fa22 f303 	lsr.w	r3, r2, r3
 81062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81062fe:	e06e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106300:	2300      	movs	r3, #0
 8106302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106304:	e06b      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106306:	4b38      	ldr	r3, [pc, #224]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106308:	681b      	ldr	r3, [r3, #0]
 810630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106312:	d102      	bne.n	810631a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8106314:	4b36      	ldr	r3, [pc, #216]	; (81063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8106316:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106318:	e061      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810631a:	2300      	movs	r3, #0
 810631c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810631e:	e05e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106320:	4b31      	ldr	r3, [pc, #196]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106322:	681b      	ldr	r3, [r3, #0]
 8106324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810632c:	d102      	bne.n	8106334 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810632e:	4b31      	ldr	r3, [pc, #196]	; (81063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8106330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106332:	e054      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106334:	2300      	movs	r3, #0
 8106336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106338:	e051      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810633a:	2300      	movs	r3, #0
 810633c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810633e:	e04e      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106346:	d148      	bne.n	81063da <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8106348:	4b27      	ldr	r3, [pc, #156]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810634c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106350:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106358:	d02a      	beq.n	81063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810635c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106360:	d838      	bhi.n	81063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8106362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106364:	2b00      	cmp	r3, #0
 8106366:	d004      	beq.n	8106372 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8106368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810636a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810636e:	d00d      	beq.n	810638c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8106370:	e030      	b.n	81063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106372:	4b1d      	ldr	r3, [pc, #116]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810637a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810637e:	d102      	bne.n	8106386 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8106380:	4b1c      	ldr	r3, [pc, #112]	; (81063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8106382:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106384:	e02b      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106386:	2300      	movs	r3, #0
 8106388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810638a:	e028      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810638c:	4b16      	ldr	r3, [pc, #88]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106398:	d107      	bne.n	81063aa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810639a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810639e:	4618      	mov	r0, r3
 81063a0:	f000 fae8 	bl	8106974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81063a8:	e019      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81063aa:	2300      	movs	r3, #0
 81063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063ae:	e016      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81063b0:	4b0d      	ldr	r3, [pc, #52]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81063b2:	681b      	ldr	r3, [r3, #0]
 81063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81063bc:	d107      	bne.n	81063ce <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81063be:	f107 0318 	add.w	r3, r7, #24
 81063c2:	4618      	mov	r0, r3
 81063c4:	f000 f82e 	bl	8106424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81063c8:	69fb      	ldr	r3, [r7, #28]
 81063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81063cc:	e007      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81063ce:	2300      	movs	r3, #0
 81063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063d2:	e004      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81063d4:	2300      	movs	r3, #0
 81063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063d8:	e001      	b.n	81063de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 81063da:	2300      	movs	r3, #0
 81063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81063de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81063e0:	4618      	mov	r0, r3
 81063e2:	3740      	adds	r7, #64	; 0x40
 81063e4:	46bd      	mov	sp, r7
 81063e6:	bd80      	pop	{r7, pc}
 81063e8:	58024400 	.word	0x58024400
 81063ec:	03d09000 	.word	0x03d09000
 81063f0:	003d0900 	.word	0x003d0900
 81063f4:	017d7840 	.word	0x017d7840

081063f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81063f8:	b580      	push	{r7, lr}
 81063fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81063fc:	f7fe fbb8 	bl	8104b70 <HAL_RCC_GetHCLKFreq>
 8106400:	4602      	mov	r2, r0
 8106402:	4b06      	ldr	r3, [pc, #24]	; (810641c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106404:	6a1b      	ldr	r3, [r3, #32]
 8106406:	091b      	lsrs	r3, r3, #4
 8106408:	f003 0307 	and.w	r3, r3, #7
 810640c:	4904      	ldr	r1, [pc, #16]	; (8106420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810640e:	5ccb      	ldrb	r3, [r1, r3]
 8106410:	f003 031f 	and.w	r3, r3, #31
 8106414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106418:	4618      	mov	r0, r3
 810641a:	bd80      	pop	{r7, pc}
 810641c:	58024400 	.word	0x58024400
 8106420:	0810a708 	.word	0x0810a708

08106424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106424:	b480      	push	{r7}
 8106426:	b089      	sub	sp, #36	; 0x24
 8106428:	af00      	add	r7, sp, #0
 810642a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810642c:	4ba1      	ldr	r3, [pc, #644]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106430:	f003 0303 	and.w	r3, r3, #3
 8106434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106436:	4b9f      	ldr	r3, [pc, #636]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810643a:	0b1b      	lsrs	r3, r3, #12
 810643c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106442:	4b9c      	ldr	r3, [pc, #624]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106446:	091b      	lsrs	r3, r3, #4
 8106448:	f003 0301 	and.w	r3, r3, #1
 810644c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810644e:	4b99      	ldr	r3, [pc, #612]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106452:	08db      	lsrs	r3, r3, #3
 8106454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106458:	693a      	ldr	r2, [r7, #16]
 810645a:	fb02 f303 	mul.w	r3, r2, r3
 810645e:	ee07 3a90 	vmov	s15, r3
 8106462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810646a:	697b      	ldr	r3, [r7, #20]
 810646c:	2b00      	cmp	r3, #0
 810646e:	f000 8111 	beq.w	8106694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106472:	69bb      	ldr	r3, [r7, #24]
 8106474:	2b02      	cmp	r3, #2
 8106476:	f000 8083 	beq.w	8106580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810647a:	69bb      	ldr	r3, [r7, #24]
 810647c:	2b02      	cmp	r3, #2
 810647e:	f200 80a1 	bhi.w	81065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106482:	69bb      	ldr	r3, [r7, #24]
 8106484:	2b00      	cmp	r3, #0
 8106486:	d003      	beq.n	8106490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106488:	69bb      	ldr	r3, [r7, #24]
 810648a:	2b01      	cmp	r3, #1
 810648c:	d056      	beq.n	810653c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810648e:	e099      	b.n	81065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106490:	4b88      	ldr	r3, [pc, #544]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	f003 0320 	and.w	r3, r3, #32
 8106498:	2b00      	cmp	r3, #0
 810649a:	d02d      	beq.n	81064f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810649c:	4b85      	ldr	r3, [pc, #532]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	08db      	lsrs	r3, r3, #3
 81064a2:	f003 0303 	and.w	r3, r3, #3
 81064a6:	4a84      	ldr	r2, [pc, #528]	; (81066b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81064a8:	fa22 f303 	lsr.w	r3, r2, r3
 81064ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81064ae:	68bb      	ldr	r3, [r7, #8]
 81064b0:	ee07 3a90 	vmov	s15, r3
 81064b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064b8:	697b      	ldr	r3, [r7, #20]
 81064ba:	ee07 3a90 	vmov	s15, r3
 81064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064c6:	4b7b      	ldr	r3, [pc, #492]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064ce:	ee07 3a90 	vmov	s15, r3
 81064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81064da:	eddf 5a78 	vldr	s11, [pc, #480]	; 81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81064f6:	e087      	b.n	8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81064f8:	697b      	ldr	r3, [r7, #20]
 81064fa:	ee07 3a90 	vmov	s15, r3
 81064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810650a:	4b6a      	ldr	r3, [pc, #424]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106512:	ee07 3a90 	vmov	s15, r3
 8106516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810651a:	ed97 6a03 	vldr	s12, [r7, #12]
 810651e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810652a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810653a:	e065      	b.n	8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810653c:	697b      	ldr	r3, [r7, #20]
 810653e:	ee07 3a90 	vmov	s15, r3
 8106542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810654e:	4b59      	ldr	r3, [pc, #356]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106556:	ee07 3a90 	vmov	s15, r3
 810655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810655e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106562:	eddf 5a56 	vldr	s11, [pc, #344]	; 81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810656e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106576:	ee67 7a27 	vmul.f32	s15, s14, s15
 810657a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810657e:	e043      	b.n	8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106580:	697b      	ldr	r3, [r7, #20]
 8106582:	ee07 3a90 	vmov	s15, r3
 8106586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810658a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81066c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106592:	4b48      	ldr	r3, [pc, #288]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810659a:	ee07 3a90 	vmov	s15, r3
 810659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81065a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81065c2:	e021      	b.n	8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81065c4:	697b      	ldr	r3, [r7, #20]
 81065c6:	ee07 3a90 	vmov	s15, r3
 81065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065d6:	4b37      	ldr	r3, [pc, #220]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065de:	ee07 3a90 	vmov	s15, r3
 81065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81065ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106608:	4b2a      	ldr	r3, [pc, #168]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810660c:	0a5b      	lsrs	r3, r3, #9
 810660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106612:	ee07 3a90 	vmov	s15, r3
 8106616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810661a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810661e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106622:	edd7 6a07 	vldr	s13, [r7, #28]
 8106626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810662a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810662e:	ee17 2a90 	vmov	r2, s15
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106636:	4b1f      	ldr	r3, [pc, #124]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810663a:	0c1b      	lsrs	r3, r3, #16
 810663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106640:	ee07 3a90 	vmov	s15, r3
 8106644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810664c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106650:	edd7 6a07 	vldr	s13, [r7, #28]
 8106654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810665c:	ee17 2a90 	vmov	r2, s15
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106664:	4b13      	ldr	r3, [pc, #76]	; (81066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106668:	0e1b      	lsrs	r3, r3, #24
 810666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810666e:	ee07 3a90 	vmov	s15, r3
 8106672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810667a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810667e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810668a:	ee17 2a90 	vmov	r2, s15
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106692:	e008      	b.n	81066a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	2200      	movs	r2, #0
 8106698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	2200      	movs	r2, #0
 810669e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	2200      	movs	r2, #0
 81066a4:	609a      	str	r2, [r3, #8]
}
 81066a6:	bf00      	nop
 81066a8:	3724      	adds	r7, #36	; 0x24
 81066aa:	46bd      	mov	sp, r7
 81066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b0:	4770      	bx	lr
 81066b2:	bf00      	nop
 81066b4:	58024400 	.word	0x58024400
 81066b8:	03d09000 	.word	0x03d09000
 81066bc:	46000000 	.word	0x46000000
 81066c0:	4c742400 	.word	0x4c742400
 81066c4:	4a742400 	.word	0x4a742400
 81066c8:	4bbebc20 	.word	0x4bbebc20

081066cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81066cc:	b480      	push	{r7}
 81066ce:	b089      	sub	sp, #36	; 0x24
 81066d0:	af00      	add	r7, sp, #0
 81066d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81066d4:	4ba1      	ldr	r3, [pc, #644]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066d8:	f003 0303 	and.w	r3, r3, #3
 81066dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81066de:	4b9f      	ldr	r3, [pc, #636]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066e2:	0d1b      	lsrs	r3, r3, #20
 81066e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81066e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81066ea:	4b9c      	ldr	r3, [pc, #624]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066ee:	0a1b      	lsrs	r3, r3, #8
 81066f0:	f003 0301 	and.w	r3, r3, #1
 81066f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81066f6:	4b99      	ldr	r3, [pc, #612]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81066fa:	08db      	lsrs	r3, r3, #3
 81066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106700:	693a      	ldr	r2, [r7, #16]
 8106702:	fb02 f303 	mul.w	r3, r2, r3
 8106706:	ee07 3a90 	vmov	s15, r3
 810670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810670e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106712:	697b      	ldr	r3, [r7, #20]
 8106714:	2b00      	cmp	r3, #0
 8106716:	f000 8111 	beq.w	810693c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810671a:	69bb      	ldr	r3, [r7, #24]
 810671c:	2b02      	cmp	r3, #2
 810671e:	f000 8083 	beq.w	8106828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106722:	69bb      	ldr	r3, [r7, #24]
 8106724:	2b02      	cmp	r3, #2
 8106726:	f200 80a1 	bhi.w	810686c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810672a:	69bb      	ldr	r3, [r7, #24]
 810672c:	2b00      	cmp	r3, #0
 810672e:	d003      	beq.n	8106738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106730:	69bb      	ldr	r3, [r7, #24]
 8106732:	2b01      	cmp	r3, #1
 8106734:	d056      	beq.n	81067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106736:	e099      	b.n	810686c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106738:	4b88      	ldr	r3, [pc, #544]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	f003 0320 	and.w	r3, r3, #32
 8106740:	2b00      	cmp	r3, #0
 8106742:	d02d      	beq.n	81067a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106744:	4b85      	ldr	r3, [pc, #532]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	08db      	lsrs	r3, r3, #3
 810674a:	f003 0303 	and.w	r3, r3, #3
 810674e:	4a84      	ldr	r2, [pc, #528]	; (8106960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106750:	fa22 f303 	lsr.w	r3, r2, r3
 8106754:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106756:	68bb      	ldr	r3, [r7, #8]
 8106758:	ee07 3a90 	vmov	s15, r3
 810675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106760:	697b      	ldr	r3, [r7, #20]
 8106762:	ee07 3a90 	vmov	s15, r3
 8106766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810676e:	4b7b      	ldr	r3, [pc, #492]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106776:	ee07 3a90 	vmov	s15, r3
 810677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810677e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106782:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810678e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810679a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810679e:	e087      	b.n	81068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81067a0:	697b      	ldr	r3, [r7, #20]
 81067a2:	ee07 3a90 	vmov	s15, r3
 81067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067b2:	4b6a      	ldr	r3, [pc, #424]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067ba:	ee07 3a90 	vmov	s15, r3
 81067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81067c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067e2:	e065      	b.n	81068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81067e4:	697b      	ldr	r3, [r7, #20]
 81067e6:	ee07 3a90 	vmov	s15, r3
 81067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810696c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067f6:	4b59      	ldr	r3, [pc, #356]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067fe:	ee07 3a90 	vmov	s15, r3
 8106802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106806:	ed97 6a03 	vldr	s12, [r7, #12]
 810680a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106826:	e043      	b.n	81068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106828:	697b      	ldr	r3, [r7, #20]
 810682a:	ee07 3a90 	vmov	s15, r3
 810682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810683a:	4b48      	ldr	r3, [pc, #288]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106842:	ee07 3a90 	vmov	s15, r3
 8106846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810684a:	ed97 6a03 	vldr	s12, [r7, #12]
 810684e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810685a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810686a:	e021      	b.n	81068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810686c:	697b      	ldr	r3, [r7, #20]
 810686e:	ee07 3a90 	vmov	s15, r3
 8106872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810696c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810687e:	4b37      	ldr	r3, [pc, #220]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106886:	ee07 3a90 	vmov	s15, r3
 810688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810688e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106892:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81068ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81068b0:	4b2a      	ldr	r3, [pc, #168]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068b4:	0a5b      	lsrs	r3, r3, #9
 81068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068ba:	ee07 3a90 	vmov	s15, r3
 81068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81068c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81068ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81068ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068d6:	ee17 2a90 	vmov	r2, s15
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81068de:	4b1f      	ldr	r3, [pc, #124]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068e2:	0c1b      	lsrs	r3, r3, #16
 81068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068e8:	ee07 3a90 	vmov	s15, r3
 81068ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81068f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81068f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81068fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106904:	ee17 2a90 	vmov	r2, s15
 8106908:	687b      	ldr	r3, [r7, #4]
 810690a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810690c:	4b13      	ldr	r3, [pc, #76]	; (810695c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106910:	0e1b      	lsrs	r3, r3, #24
 8106912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106916:	ee07 3a90 	vmov	s15, r3
 810691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810691e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106926:	edd7 6a07 	vldr	s13, [r7, #28]
 810692a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810692e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106932:	ee17 2a90 	vmov	r2, s15
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810693a:	e008      	b.n	810694e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	2200      	movs	r2, #0
 8106940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	2200      	movs	r2, #0
 8106946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	2200      	movs	r2, #0
 810694c:	609a      	str	r2, [r3, #8]
}
 810694e:	bf00      	nop
 8106950:	3724      	adds	r7, #36	; 0x24
 8106952:	46bd      	mov	sp, r7
 8106954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106958:	4770      	bx	lr
 810695a:	bf00      	nop
 810695c:	58024400 	.word	0x58024400
 8106960:	03d09000 	.word	0x03d09000
 8106964:	46000000 	.word	0x46000000
 8106968:	4c742400 	.word	0x4c742400
 810696c:	4a742400 	.word	0x4a742400
 8106970:	4bbebc20 	.word	0x4bbebc20

08106974 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8106974:	b480      	push	{r7}
 8106976:	b089      	sub	sp, #36	; 0x24
 8106978:	af00      	add	r7, sp, #0
 810697a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810697c:	4ba0      	ldr	r3, [pc, #640]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106980:	f003 0303 	and.w	r3, r3, #3
 8106984:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8106986:	4b9e      	ldr	r3, [pc, #632]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810698a:	091b      	lsrs	r3, r3, #4
 810698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106990:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8106992:	4b9b      	ldr	r3, [pc, #620]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106996:	f003 0301 	and.w	r3, r3, #1
 810699a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810699c:	4b98      	ldr	r3, [pc, #608]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81069a0:	08db      	lsrs	r3, r3, #3
 81069a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81069a6:	693a      	ldr	r2, [r7, #16]
 81069a8:	fb02 f303 	mul.w	r3, r2, r3
 81069ac:	ee07 3a90 	vmov	s15, r3
 81069b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81069b8:	697b      	ldr	r3, [r7, #20]
 81069ba:	2b00      	cmp	r3, #0
 81069bc:	f000 8111 	beq.w	8106be2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81069c0:	69bb      	ldr	r3, [r7, #24]
 81069c2:	2b02      	cmp	r3, #2
 81069c4:	f000 8083 	beq.w	8106ace <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81069c8:	69bb      	ldr	r3, [r7, #24]
 81069ca:	2b02      	cmp	r3, #2
 81069cc:	f200 80a1 	bhi.w	8106b12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81069d0:	69bb      	ldr	r3, [r7, #24]
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d003      	beq.n	81069de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81069d6:	69bb      	ldr	r3, [r7, #24]
 81069d8:	2b01      	cmp	r3, #1
 81069da:	d056      	beq.n	8106a8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81069dc:	e099      	b.n	8106b12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069de:	4b88      	ldr	r3, [pc, #544]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	f003 0320 	and.w	r3, r3, #32
 81069e6:	2b00      	cmp	r3, #0
 81069e8:	d02d      	beq.n	8106a46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81069ea:	4b85      	ldr	r3, [pc, #532]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	08db      	lsrs	r3, r3, #3
 81069f0:	f003 0303 	and.w	r3, r3, #3
 81069f4:	4a83      	ldr	r2, [pc, #524]	; (8106c04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81069f6:	fa22 f303 	lsr.w	r3, r2, r3
 81069fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81069fc:	68bb      	ldr	r3, [r7, #8]
 81069fe:	ee07 3a90 	vmov	s15, r3
 8106a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a06:	697b      	ldr	r3, [r7, #20]
 8106a08:	ee07 3a90 	vmov	s15, r3
 8106a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a14:	4b7a      	ldr	r3, [pc, #488]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a1c:	ee07 3a90 	vmov	s15, r3
 8106a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a28:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a40:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106a44:	e087      	b.n	8106b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a46:	697b      	ldr	r3, [r7, #20]
 8106a48:	ee07 3a90 	vmov	s15, r3
 8106a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106c0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a58:	4b69      	ldr	r3, [pc, #420]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a60:	ee07 3a90 	vmov	s15, r3
 8106a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a88:	e065      	b.n	8106b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a8a:	697b      	ldr	r3, [r7, #20]
 8106a8c:	ee07 3a90 	vmov	s15, r3
 8106a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106c10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a9c:	4b58      	ldr	r3, [pc, #352]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106aa4:	ee07 3a90 	vmov	s15, r3
 8106aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106aac:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ab0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ac8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106acc:	e043      	b.n	8106b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106ace:	697b      	ldr	r3, [r7, #20]
 8106ad0:	ee07 3a90 	vmov	s15, r3
 8106ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ad8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ae0:	4b47      	ldr	r3, [pc, #284]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ae8:	ee07 3a90 	vmov	s15, r3
 8106aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106af0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106af4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b10:	e021      	b.n	8106b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106b12:	697b      	ldr	r3, [r7, #20]
 8106b14:	ee07 3a90 	vmov	s15, r3
 8106b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106c0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b24:	4b36      	ldr	r3, [pc, #216]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b2c:	ee07 3a90 	vmov	s15, r3
 8106b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b34:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106b54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8106b56:	4b2a      	ldr	r3, [pc, #168]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b5a:	0a5b      	lsrs	r3, r3, #9
 8106b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b60:	ee07 3a90 	vmov	s15, r3
 8106b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b7c:	ee17 2a90 	vmov	r2, s15
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8106b84:	4b1e      	ldr	r3, [pc, #120]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b88:	0c1b      	lsrs	r3, r3, #16
 8106b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b8e:	ee07 3a90 	vmov	s15, r3
 8106b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106baa:	ee17 2a90 	vmov	r2, s15
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8106bb2:	4b13      	ldr	r3, [pc, #76]	; (8106c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106bb6:	0e1b      	lsrs	r3, r3, #24
 8106bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106bbc:	ee07 3a90 	vmov	s15, r3
 8106bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8106bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bd8:	ee17 2a90 	vmov	r2, s15
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106be0:	e008      	b.n	8106bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	2200      	movs	r2, #0
 8106be6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	2200      	movs	r2, #0
 8106bec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	2200      	movs	r2, #0
 8106bf2:	609a      	str	r2, [r3, #8]
}
 8106bf4:	bf00      	nop
 8106bf6:	3724      	adds	r7, #36	; 0x24
 8106bf8:	46bd      	mov	sp, r7
 8106bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bfe:	4770      	bx	lr
 8106c00:	58024400 	.word	0x58024400
 8106c04:	03d09000 	.word	0x03d09000
 8106c08:	46000000 	.word	0x46000000
 8106c0c:	4c742400 	.word	0x4c742400
 8106c10:	4a742400 	.word	0x4a742400
 8106c14:	4bbebc20 	.word	0x4bbebc20

08106c18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106c18:	b580      	push	{r7, lr}
 8106c1a:	b084      	sub	sp, #16
 8106c1c:	af00      	add	r7, sp, #0
 8106c1e:	6078      	str	r0, [r7, #4]
 8106c20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106c22:	2300      	movs	r3, #0
 8106c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106c26:	4b54      	ldr	r3, [pc, #336]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c2a:	f003 0303 	and.w	r3, r3, #3
 8106c2e:	2b03      	cmp	r3, #3
 8106c30:	d101      	bne.n	8106c36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106c32:	2301      	movs	r3, #1
 8106c34:	e09b      	b.n	8106d6e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106c36:	4b50      	ldr	r3, [pc, #320]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c38:	681b      	ldr	r3, [r3, #0]
 8106c3a:	4a4f      	ldr	r2, [pc, #316]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106c42:	f7fb fa11 	bl	8102068 <HAL_GetTick>
 8106c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106c48:	e008      	b.n	8106c5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106c4a:	f7fb fa0d 	bl	8102068 <HAL_GetTick>
 8106c4e:	4602      	mov	r2, r0
 8106c50:	68bb      	ldr	r3, [r7, #8]
 8106c52:	1ad3      	subs	r3, r2, r3
 8106c54:	2b02      	cmp	r3, #2
 8106c56:	d901      	bls.n	8106c5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106c58:	2303      	movs	r3, #3
 8106c5a:	e088      	b.n	8106d6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106c5c:	4b46      	ldr	r3, [pc, #280]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d1f0      	bne.n	8106c4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106c68:	4b43      	ldr	r3, [pc, #268]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	031b      	lsls	r3, r3, #12
 8106c76:	4940      	ldr	r1, [pc, #256]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106c78:	4313      	orrs	r3, r2
 8106c7a:	628b      	str	r3, [r1, #40]	; 0x28
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	685b      	ldr	r3, [r3, #4]
 8106c80:	3b01      	subs	r3, #1
 8106c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	689b      	ldr	r3, [r3, #8]
 8106c8a:	3b01      	subs	r3, #1
 8106c8c:	025b      	lsls	r3, r3, #9
 8106c8e:	b29b      	uxth	r3, r3
 8106c90:	431a      	orrs	r2, r3
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	68db      	ldr	r3, [r3, #12]
 8106c96:	3b01      	subs	r3, #1
 8106c98:	041b      	lsls	r3, r3, #16
 8106c9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106c9e:	431a      	orrs	r2, r3
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	691b      	ldr	r3, [r3, #16]
 8106ca4:	3b01      	subs	r3, #1
 8106ca6:	061b      	lsls	r3, r3, #24
 8106ca8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106cac:	4932      	ldr	r1, [pc, #200]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cae:	4313      	orrs	r3, r2
 8106cb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106cb2:	4b31      	ldr	r3, [pc, #196]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	695b      	ldr	r3, [r3, #20]
 8106cbe:	492e      	ldr	r1, [pc, #184]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cc0:	4313      	orrs	r3, r2
 8106cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106cc4:	4b2c      	ldr	r3, [pc, #176]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cc8:	f023 0220 	bic.w	r2, r3, #32
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	699b      	ldr	r3, [r3, #24]
 8106cd0:	4929      	ldr	r1, [pc, #164]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cd2:	4313      	orrs	r3, r2
 8106cd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106cd6:	4b28      	ldr	r3, [pc, #160]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cda:	4a27      	ldr	r2, [pc, #156]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cdc:	f023 0310 	bic.w	r3, r3, #16
 8106ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106ce2:	4b25      	ldr	r3, [pc, #148]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106cea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106cee:	687a      	ldr	r2, [r7, #4]
 8106cf0:	69d2      	ldr	r2, [r2, #28]
 8106cf2:	00d2      	lsls	r2, r2, #3
 8106cf4:	4920      	ldr	r1, [pc, #128]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cf6:	4313      	orrs	r3, r2
 8106cf8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106cfa:	4b1f      	ldr	r3, [pc, #124]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cfe:	4a1e      	ldr	r2, [pc, #120]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d00:	f043 0310 	orr.w	r3, r3, #16
 8106d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106d06:	683b      	ldr	r3, [r7, #0]
 8106d08:	2b00      	cmp	r3, #0
 8106d0a:	d106      	bne.n	8106d1a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106d0c:	4b1a      	ldr	r3, [pc, #104]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d10:	4a19      	ldr	r2, [pc, #100]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d18:	e00f      	b.n	8106d3a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106d1a:	683b      	ldr	r3, [r7, #0]
 8106d1c:	2b01      	cmp	r3, #1
 8106d1e:	d106      	bne.n	8106d2e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106d20:	4b15      	ldr	r3, [pc, #84]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d24:	4a14      	ldr	r2, [pc, #80]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106d2c:	e005      	b.n	8106d3a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106d2e:	4b12      	ldr	r3, [pc, #72]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d32:	4a11      	ldr	r2, [pc, #68]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106d3a:	4b0f      	ldr	r3, [pc, #60]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	4a0e      	ldr	r2, [pc, #56]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106d46:	f7fb f98f 	bl	8102068 <HAL_GetTick>
 8106d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106d4c:	e008      	b.n	8106d60 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106d4e:	f7fb f98b 	bl	8102068 <HAL_GetTick>
 8106d52:	4602      	mov	r2, r0
 8106d54:	68bb      	ldr	r3, [r7, #8]
 8106d56:	1ad3      	subs	r3, r2, r3
 8106d58:	2b02      	cmp	r3, #2
 8106d5a:	d901      	bls.n	8106d60 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106d5c:	2303      	movs	r3, #3
 8106d5e:	e006      	b.n	8106d6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106d60:	4b05      	ldr	r3, [pc, #20]	; (8106d78 <RCCEx_PLL2_Config+0x160>)
 8106d62:	681b      	ldr	r3, [r3, #0]
 8106d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d0f0      	beq.n	8106d4e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d6e:	4618      	mov	r0, r3
 8106d70:	3710      	adds	r7, #16
 8106d72:	46bd      	mov	sp, r7
 8106d74:	bd80      	pop	{r7, pc}
 8106d76:	bf00      	nop
 8106d78:	58024400 	.word	0x58024400

08106d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106d7c:	b580      	push	{r7, lr}
 8106d7e:	b084      	sub	sp, #16
 8106d80:	af00      	add	r7, sp, #0
 8106d82:	6078      	str	r0, [r7, #4]
 8106d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106d86:	2300      	movs	r3, #0
 8106d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106d8a:	4b54      	ldr	r3, [pc, #336]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d8e:	f003 0303 	and.w	r3, r3, #3
 8106d92:	2b03      	cmp	r3, #3
 8106d94:	d101      	bne.n	8106d9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106d96:	2301      	movs	r3, #1
 8106d98:	e09b      	b.n	8106ed2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106d9a:	4b50      	ldr	r3, [pc, #320]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	4a4f      	ldr	r2, [pc, #316]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106da6:	f7fb f95f 	bl	8102068 <HAL_GetTick>
 8106daa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106dac:	e008      	b.n	8106dc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106dae:	f7fb f95b 	bl	8102068 <HAL_GetTick>
 8106db2:	4602      	mov	r2, r0
 8106db4:	68bb      	ldr	r3, [r7, #8]
 8106db6:	1ad3      	subs	r3, r2, r3
 8106db8:	2b02      	cmp	r3, #2
 8106dba:	d901      	bls.n	8106dc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106dbc:	2303      	movs	r3, #3
 8106dbe:	e088      	b.n	8106ed2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106dc0:	4b46      	ldr	r3, [pc, #280]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106dc8:	2b00      	cmp	r3, #0
 8106dca:	d1f0      	bne.n	8106dae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106dcc:	4b43      	ldr	r3, [pc, #268]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	681b      	ldr	r3, [r3, #0]
 8106dd8:	051b      	lsls	r3, r3, #20
 8106dda:	4940      	ldr	r1, [pc, #256]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106ddc:	4313      	orrs	r3, r2
 8106dde:	628b      	str	r3, [r1, #40]	; 0x28
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	685b      	ldr	r3, [r3, #4]
 8106de4:	3b01      	subs	r3, #1
 8106de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	689b      	ldr	r3, [r3, #8]
 8106dee:	3b01      	subs	r3, #1
 8106df0:	025b      	lsls	r3, r3, #9
 8106df2:	b29b      	uxth	r3, r3
 8106df4:	431a      	orrs	r2, r3
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	68db      	ldr	r3, [r3, #12]
 8106dfa:	3b01      	subs	r3, #1
 8106dfc:	041b      	lsls	r3, r3, #16
 8106dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106e02:	431a      	orrs	r2, r3
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	691b      	ldr	r3, [r3, #16]
 8106e08:	3b01      	subs	r3, #1
 8106e0a:	061b      	lsls	r3, r3, #24
 8106e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106e10:	4932      	ldr	r1, [pc, #200]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e12:	4313      	orrs	r3, r2
 8106e14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106e16:	4b31      	ldr	r3, [pc, #196]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	695b      	ldr	r3, [r3, #20]
 8106e22:	492e      	ldr	r1, [pc, #184]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e24:	4313      	orrs	r3, r2
 8106e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106e28:	4b2c      	ldr	r3, [pc, #176]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	699b      	ldr	r3, [r3, #24]
 8106e34:	4929      	ldr	r1, [pc, #164]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e36:	4313      	orrs	r3, r2
 8106e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106e3a:	4b28      	ldr	r3, [pc, #160]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e3e:	4a27      	ldr	r2, [pc, #156]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106e46:	4b25      	ldr	r3, [pc, #148]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106e4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106e52:	687a      	ldr	r2, [r7, #4]
 8106e54:	69d2      	ldr	r2, [r2, #28]
 8106e56:	00d2      	lsls	r2, r2, #3
 8106e58:	4920      	ldr	r1, [pc, #128]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e5a:	4313      	orrs	r3, r2
 8106e5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106e5e:	4b1f      	ldr	r3, [pc, #124]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e62:	4a1e      	ldr	r2, [pc, #120]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106e6a:	683b      	ldr	r3, [r7, #0]
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	d106      	bne.n	8106e7e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106e70:	4b1a      	ldr	r3, [pc, #104]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e74:	4a19      	ldr	r2, [pc, #100]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106e7c:	e00f      	b.n	8106e9e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106e7e:	683b      	ldr	r3, [r7, #0]
 8106e80:	2b01      	cmp	r3, #1
 8106e82:	d106      	bne.n	8106e92 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106e84:	4b15      	ldr	r3, [pc, #84]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e88:	4a14      	ldr	r2, [pc, #80]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106e90:	e005      	b.n	8106e9e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106e92:	4b12      	ldr	r3, [pc, #72]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e96:	4a11      	ldr	r2, [pc, #68]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106e9e:	4b0f      	ldr	r3, [pc, #60]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106ea0:	681b      	ldr	r3, [r3, #0]
 8106ea2:	4a0e      	ldr	r2, [pc, #56]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106eaa:	f7fb f8dd 	bl	8102068 <HAL_GetTick>
 8106eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106eb0:	e008      	b.n	8106ec4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106eb2:	f7fb f8d9 	bl	8102068 <HAL_GetTick>
 8106eb6:	4602      	mov	r2, r0
 8106eb8:	68bb      	ldr	r3, [r7, #8]
 8106eba:	1ad3      	subs	r3, r2, r3
 8106ebc:	2b02      	cmp	r3, #2
 8106ebe:	d901      	bls.n	8106ec4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106ec0:	2303      	movs	r3, #3
 8106ec2:	e006      	b.n	8106ed2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106ec4:	4b05      	ldr	r3, [pc, #20]	; (8106edc <RCCEx_PLL3_Config+0x160>)
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d0f0      	beq.n	8106eb2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ed2:	4618      	mov	r0, r3
 8106ed4:	3710      	adds	r7, #16
 8106ed6:	46bd      	mov	sp, r7
 8106ed8:	bd80      	pop	{r7, pc}
 8106eda:	bf00      	nop
 8106edc:	58024400 	.word	0x58024400

08106ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106ee0:	b580      	push	{r7, lr}
 8106ee2:	b082      	sub	sp, #8
 8106ee4:	af00      	add	r7, sp, #0
 8106ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	2b00      	cmp	r3, #0
 8106eec:	d101      	bne.n	8106ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106eee:	2301      	movs	r3, #1
 8106ef0:	e049      	b.n	8106f86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106ef8:	b2db      	uxtb	r3, r3
 8106efa:	2b00      	cmp	r3, #0
 8106efc:	d106      	bne.n	8106f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	2200      	movs	r2, #0
 8106f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106f06:	6878      	ldr	r0, [r7, #4]
 8106f08:	f7fa fe6c 	bl	8101be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	2202      	movs	r2, #2
 8106f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	681a      	ldr	r2, [r3, #0]
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	3304      	adds	r3, #4
 8106f1c:	4619      	mov	r1, r3
 8106f1e:	4610      	mov	r0, r2
 8106f20:	f000 fa4e 	bl	81073c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	2201      	movs	r2, #1
 8106f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	2201      	movs	r2, #1
 8106f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	2201      	movs	r2, #1
 8106f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	2201      	movs	r2, #1
 8106f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	2201      	movs	r2, #1
 8106f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	2201      	movs	r2, #1
 8106f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	2201      	movs	r2, #1
 8106f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	2201      	movs	r2, #1
 8106f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	2201      	movs	r2, #1
 8106f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	2201      	movs	r2, #1
 8106f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	2201      	movs	r2, #1
 8106f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	2201      	movs	r2, #1
 8106f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106f84:	2300      	movs	r3, #0
}
 8106f86:	4618      	mov	r0, r3
 8106f88:	3708      	adds	r7, #8
 8106f8a:	46bd      	mov	sp, r7
 8106f8c:	bd80      	pop	{r7, pc}
	...

08106f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106f90:	b580      	push	{r7, lr}
 8106f92:	b084      	sub	sp, #16
 8106f94:	af00      	add	r7, sp, #0
 8106f96:	6078      	str	r0, [r7, #4]
 8106f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106f9a:	683b      	ldr	r3, [r7, #0]
 8106f9c:	2b00      	cmp	r3, #0
 8106f9e:	d109      	bne.n	8106fb4 <HAL_TIM_PWM_Start+0x24>
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106fa6:	b2db      	uxtb	r3, r3
 8106fa8:	2b01      	cmp	r3, #1
 8106faa:	bf14      	ite	ne
 8106fac:	2301      	movne	r3, #1
 8106fae:	2300      	moveq	r3, #0
 8106fb0:	b2db      	uxtb	r3, r3
 8106fb2:	e03c      	b.n	810702e <HAL_TIM_PWM_Start+0x9e>
 8106fb4:	683b      	ldr	r3, [r7, #0]
 8106fb6:	2b04      	cmp	r3, #4
 8106fb8:	d109      	bne.n	8106fce <HAL_TIM_PWM_Start+0x3e>
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106fc0:	b2db      	uxtb	r3, r3
 8106fc2:	2b01      	cmp	r3, #1
 8106fc4:	bf14      	ite	ne
 8106fc6:	2301      	movne	r3, #1
 8106fc8:	2300      	moveq	r3, #0
 8106fca:	b2db      	uxtb	r3, r3
 8106fcc:	e02f      	b.n	810702e <HAL_TIM_PWM_Start+0x9e>
 8106fce:	683b      	ldr	r3, [r7, #0]
 8106fd0:	2b08      	cmp	r3, #8
 8106fd2:	d109      	bne.n	8106fe8 <HAL_TIM_PWM_Start+0x58>
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106fda:	b2db      	uxtb	r3, r3
 8106fdc:	2b01      	cmp	r3, #1
 8106fde:	bf14      	ite	ne
 8106fe0:	2301      	movne	r3, #1
 8106fe2:	2300      	moveq	r3, #0
 8106fe4:	b2db      	uxtb	r3, r3
 8106fe6:	e022      	b.n	810702e <HAL_TIM_PWM_Start+0x9e>
 8106fe8:	683b      	ldr	r3, [r7, #0]
 8106fea:	2b0c      	cmp	r3, #12
 8106fec:	d109      	bne.n	8107002 <HAL_TIM_PWM_Start+0x72>
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106ff4:	b2db      	uxtb	r3, r3
 8106ff6:	2b01      	cmp	r3, #1
 8106ff8:	bf14      	ite	ne
 8106ffa:	2301      	movne	r3, #1
 8106ffc:	2300      	moveq	r3, #0
 8106ffe:	b2db      	uxtb	r3, r3
 8107000:	e015      	b.n	810702e <HAL_TIM_PWM_Start+0x9e>
 8107002:	683b      	ldr	r3, [r7, #0]
 8107004:	2b10      	cmp	r3, #16
 8107006:	d109      	bne.n	810701c <HAL_TIM_PWM_Start+0x8c>
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810700e:	b2db      	uxtb	r3, r3
 8107010:	2b01      	cmp	r3, #1
 8107012:	bf14      	ite	ne
 8107014:	2301      	movne	r3, #1
 8107016:	2300      	moveq	r3, #0
 8107018:	b2db      	uxtb	r3, r3
 810701a:	e008      	b.n	810702e <HAL_TIM_PWM_Start+0x9e>
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8107022:	b2db      	uxtb	r3, r3
 8107024:	2b01      	cmp	r3, #1
 8107026:	bf14      	ite	ne
 8107028:	2301      	movne	r3, #1
 810702a:	2300      	moveq	r3, #0
 810702c:	b2db      	uxtb	r3, r3
 810702e:	2b00      	cmp	r3, #0
 8107030:	d001      	beq.n	8107036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8107032:	2301      	movs	r3, #1
 8107034:	e09c      	b.n	8107170 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107036:	683b      	ldr	r3, [r7, #0]
 8107038:	2b00      	cmp	r3, #0
 810703a:	d104      	bne.n	8107046 <HAL_TIM_PWM_Start+0xb6>
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	2202      	movs	r2, #2
 8107040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107044:	e023      	b.n	810708e <HAL_TIM_PWM_Start+0xfe>
 8107046:	683b      	ldr	r3, [r7, #0]
 8107048:	2b04      	cmp	r3, #4
 810704a:	d104      	bne.n	8107056 <HAL_TIM_PWM_Start+0xc6>
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2202      	movs	r2, #2
 8107050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107054:	e01b      	b.n	810708e <HAL_TIM_PWM_Start+0xfe>
 8107056:	683b      	ldr	r3, [r7, #0]
 8107058:	2b08      	cmp	r3, #8
 810705a:	d104      	bne.n	8107066 <HAL_TIM_PWM_Start+0xd6>
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	2202      	movs	r2, #2
 8107060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107064:	e013      	b.n	810708e <HAL_TIM_PWM_Start+0xfe>
 8107066:	683b      	ldr	r3, [r7, #0]
 8107068:	2b0c      	cmp	r3, #12
 810706a:	d104      	bne.n	8107076 <HAL_TIM_PWM_Start+0xe6>
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	2202      	movs	r2, #2
 8107070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107074:	e00b      	b.n	810708e <HAL_TIM_PWM_Start+0xfe>
 8107076:	683b      	ldr	r3, [r7, #0]
 8107078:	2b10      	cmp	r3, #16
 810707a:	d104      	bne.n	8107086 <HAL_TIM_PWM_Start+0xf6>
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	2202      	movs	r2, #2
 8107080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107084:	e003      	b.n	810708e <HAL_TIM_PWM_Start+0xfe>
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	2202      	movs	r2, #2
 810708a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	2201      	movs	r2, #1
 8107094:	6839      	ldr	r1, [r7, #0]
 8107096:	4618      	mov	r0, r3
 8107098:	f000 fcfa 	bl	8107a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	4a35      	ldr	r2, [pc, #212]	; (8107178 <HAL_TIM_PWM_Start+0x1e8>)
 81070a2:	4293      	cmp	r3, r2
 81070a4:	d013      	beq.n	81070ce <HAL_TIM_PWM_Start+0x13e>
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	681b      	ldr	r3, [r3, #0]
 81070aa:	4a34      	ldr	r2, [pc, #208]	; (810717c <HAL_TIM_PWM_Start+0x1ec>)
 81070ac:	4293      	cmp	r3, r2
 81070ae:	d00e      	beq.n	81070ce <HAL_TIM_PWM_Start+0x13e>
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	681b      	ldr	r3, [r3, #0]
 81070b4:	4a32      	ldr	r2, [pc, #200]	; (8107180 <HAL_TIM_PWM_Start+0x1f0>)
 81070b6:	4293      	cmp	r3, r2
 81070b8:	d009      	beq.n	81070ce <HAL_TIM_PWM_Start+0x13e>
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	681b      	ldr	r3, [r3, #0]
 81070be:	4a31      	ldr	r2, [pc, #196]	; (8107184 <HAL_TIM_PWM_Start+0x1f4>)
 81070c0:	4293      	cmp	r3, r2
 81070c2:	d004      	beq.n	81070ce <HAL_TIM_PWM_Start+0x13e>
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	681b      	ldr	r3, [r3, #0]
 81070c8:	4a2f      	ldr	r2, [pc, #188]	; (8107188 <HAL_TIM_PWM_Start+0x1f8>)
 81070ca:	4293      	cmp	r3, r2
 81070cc:	d101      	bne.n	81070d2 <HAL_TIM_PWM_Start+0x142>
 81070ce:	2301      	movs	r3, #1
 81070d0:	e000      	b.n	81070d4 <HAL_TIM_PWM_Start+0x144>
 81070d2:	2300      	movs	r3, #0
 81070d4:	2b00      	cmp	r3, #0
 81070d6:	d007      	beq.n	81070e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81070e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	681b      	ldr	r3, [r3, #0]
 81070ec:	4a22      	ldr	r2, [pc, #136]	; (8107178 <HAL_TIM_PWM_Start+0x1e8>)
 81070ee:	4293      	cmp	r3, r2
 81070f0:	d01d      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81070fa:	d018      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	4a22      	ldr	r2, [pc, #136]	; (810718c <HAL_TIM_PWM_Start+0x1fc>)
 8107102:	4293      	cmp	r3, r2
 8107104:	d013      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	681b      	ldr	r3, [r3, #0]
 810710a:	4a21      	ldr	r2, [pc, #132]	; (8107190 <HAL_TIM_PWM_Start+0x200>)
 810710c:	4293      	cmp	r3, r2
 810710e:	d00e      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	4a1f      	ldr	r2, [pc, #124]	; (8107194 <HAL_TIM_PWM_Start+0x204>)
 8107116:	4293      	cmp	r3, r2
 8107118:	d009      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	4a17      	ldr	r2, [pc, #92]	; (810717c <HAL_TIM_PWM_Start+0x1ec>)
 8107120:	4293      	cmp	r3, r2
 8107122:	d004      	beq.n	810712e <HAL_TIM_PWM_Start+0x19e>
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	4a1b      	ldr	r2, [pc, #108]	; (8107198 <HAL_TIM_PWM_Start+0x208>)
 810712a:	4293      	cmp	r3, r2
 810712c:	d115      	bne.n	810715a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	689a      	ldr	r2, [r3, #8]
 8107134:	4b19      	ldr	r3, [pc, #100]	; (810719c <HAL_TIM_PWM_Start+0x20c>)
 8107136:	4013      	ands	r3, r2
 8107138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	2b06      	cmp	r3, #6
 810713e:	d015      	beq.n	810716c <HAL_TIM_PWM_Start+0x1dc>
 8107140:	68fb      	ldr	r3, [r7, #12]
 8107142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107146:	d011      	beq.n	810716c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	681b      	ldr	r3, [r3, #0]
 810714c:	681a      	ldr	r2, [r3, #0]
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	f042 0201 	orr.w	r2, r2, #1
 8107156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107158:	e008      	b.n	810716c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	681a      	ldr	r2, [r3, #0]
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	f042 0201 	orr.w	r2, r2, #1
 8107168:	601a      	str	r2, [r3, #0]
 810716a:	e000      	b.n	810716e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810716c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810716e:	2300      	movs	r3, #0
}
 8107170:	4618      	mov	r0, r3
 8107172:	3710      	adds	r7, #16
 8107174:	46bd      	mov	sp, r7
 8107176:	bd80      	pop	{r7, pc}
 8107178:	40010000 	.word	0x40010000
 810717c:	40010400 	.word	0x40010400
 8107180:	40014000 	.word	0x40014000
 8107184:	40014400 	.word	0x40014400
 8107188:	40014800 	.word	0x40014800
 810718c:	40000400 	.word	0x40000400
 8107190:	40000800 	.word	0x40000800
 8107194:	40000c00 	.word	0x40000c00
 8107198:	40001800 	.word	0x40001800
 810719c:	00010007 	.word	0x00010007

081071a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81071a0:	b580      	push	{r7, lr}
 81071a2:	b084      	sub	sp, #16
 81071a4:	af00      	add	r7, sp, #0
 81071a6:	60f8      	str	r0, [r7, #12]
 81071a8:	60b9      	str	r1, [r7, #8]
 81071aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81071b2:	2b01      	cmp	r3, #1
 81071b4:	d101      	bne.n	81071ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 81071b6:	2302      	movs	r3, #2
 81071b8:	e0fd      	b.n	81073b6 <HAL_TIM_PWM_ConfigChannel+0x216>
 81071ba:	68fb      	ldr	r3, [r7, #12]
 81071bc:	2201      	movs	r2, #1
 81071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	2b14      	cmp	r3, #20
 81071c6:	f200 80f0 	bhi.w	81073aa <HAL_TIM_PWM_ConfigChannel+0x20a>
 81071ca:	a201      	add	r2, pc, #4	; (adr r2, 81071d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 81071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071d0:	08107225 	.word	0x08107225
 81071d4:	081073ab 	.word	0x081073ab
 81071d8:	081073ab 	.word	0x081073ab
 81071dc:	081073ab 	.word	0x081073ab
 81071e0:	08107265 	.word	0x08107265
 81071e4:	081073ab 	.word	0x081073ab
 81071e8:	081073ab 	.word	0x081073ab
 81071ec:	081073ab 	.word	0x081073ab
 81071f0:	081072a7 	.word	0x081072a7
 81071f4:	081073ab 	.word	0x081073ab
 81071f8:	081073ab 	.word	0x081073ab
 81071fc:	081073ab 	.word	0x081073ab
 8107200:	081072e7 	.word	0x081072e7
 8107204:	081073ab 	.word	0x081073ab
 8107208:	081073ab 	.word	0x081073ab
 810720c:	081073ab 	.word	0x081073ab
 8107210:	08107329 	.word	0x08107329
 8107214:	081073ab 	.word	0x081073ab
 8107218:	081073ab 	.word	0x081073ab
 810721c:	081073ab 	.word	0x081073ab
 8107220:	08107369 	.word	0x08107369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	681b      	ldr	r3, [r3, #0]
 8107228:	68b9      	ldr	r1, [r7, #8]
 810722a:	4618      	mov	r0, r3
 810722c:	f000 f962 	bl	81074f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	699a      	ldr	r2, [r3, #24]
 8107236:	68fb      	ldr	r3, [r7, #12]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	f042 0208 	orr.w	r2, r2, #8
 810723e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	699a      	ldr	r2, [r3, #24]
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	f022 0204 	bic.w	r2, r2, #4
 810724e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	681b      	ldr	r3, [r3, #0]
 8107254:	6999      	ldr	r1, [r3, #24]
 8107256:	68bb      	ldr	r3, [r7, #8]
 8107258:	691a      	ldr	r2, [r3, #16]
 810725a:	68fb      	ldr	r3, [r7, #12]
 810725c:	681b      	ldr	r3, [r3, #0]
 810725e:	430a      	orrs	r2, r1
 8107260:	619a      	str	r2, [r3, #24]
      break;
 8107262:	e0a3      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	681b      	ldr	r3, [r3, #0]
 8107268:	68b9      	ldr	r1, [r7, #8]
 810726a:	4618      	mov	r0, r3
 810726c:	f000 f9d2 	bl	8107614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	699a      	ldr	r2, [r3, #24]
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810727e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107280:	68fb      	ldr	r3, [r7, #12]
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	699a      	ldr	r2, [r3, #24]
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810728e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107290:	68fb      	ldr	r3, [r7, #12]
 8107292:	681b      	ldr	r3, [r3, #0]
 8107294:	6999      	ldr	r1, [r3, #24]
 8107296:	68bb      	ldr	r3, [r7, #8]
 8107298:	691b      	ldr	r3, [r3, #16]
 810729a:	021a      	lsls	r2, r3, #8
 810729c:	68fb      	ldr	r3, [r7, #12]
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	430a      	orrs	r2, r1
 81072a2:	619a      	str	r2, [r3, #24]
      break;
 81072a4:	e082      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	68b9      	ldr	r1, [r7, #8]
 81072ac:	4618      	mov	r0, r3
 81072ae:	f000 fa3b 	bl	8107728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	681b      	ldr	r3, [r3, #0]
 81072b6:	69da      	ldr	r2, [r3, #28]
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	681b      	ldr	r3, [r3, #0]
 81072bc:	f042 0208 	orr.w	r2, r2, #8
 81072c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81072c2:	68fb      	ldr	r3, [r7, #12]
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	69da      	ldr	r2, [r3, #28]
 81072c8:	68fb      	ldr	r3, [r7, #12]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	f022 0204 	bic.w	r2, r2, #4
 81072d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	69d9      	ldr	r1, [r3, #28]
 81072d8:	68bb      	ldr	r3, [r7, #8]
 81072da:	691a      	ldr	r2, [r3, #16]
 81072dc:	68fb      	ldr	r3, [r7, #12]
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	430a      	orrs	r2, r1
 81072e2:	61da      	str	r2, [r3, #28]
      break;
 81072e4:	e062      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81072e6:	68fb      	ldr	r3, [r7, #12]
 81072e8:	681b      	ldr	r3, [r3, #0]
 81072ea:	68b9      	ldr	r1, [r7, #8]
 81072ec:	4618      	mov	r0, r3
 81072ee:	f000 faa1 	bl	8107834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81072f2:	68fb      	ldr	r3, [r7, #12]
 81072f4:	681b      	ldr	r3, [r3, #0]
 81072f6:	69da      	ldr	r2, [r3, #28]
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107302:	68fb      	ldr	r3, [r7, #12]
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	69da      	ldr	r2, [r3, #28]
 8107308:	68fb      	ldr	r3, [r7, #12]
 810730a:	681b      	ldr	r3, [r3, #0]
 810730c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	69d9      	ldr	r1, [r3, #28]
 8107318:	68bb      	ldr	r3, [r7, #8]
 810731a:	691b      	ldr	r3, [r3, #16]
 810731c:	021a      	lsls	r2, r3, #8
 810731e:	68fb      	ldr	r3, [r7, #12]
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	430a      	orrs	r2, r1
 8107324:	61da      	str	r2, [r3, #28]
      break;
 8107326:	e041      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107328:	68fb      	ldr	r3, [r7, #12]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	68b9      	ldr	r1, [r7, #8]
 810732e:	4618      	mov	r0, r3
 8107330:	f000 fae8 	bl	8107904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107334:	68fb      	ldr	r3, [r7, #12]
 8107336:	681b      	ldr	r3, [r3, #0]
 8107338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	681b      	ldr	r3, [r3, #0]
 810733e:	f042 0208 	orr.w	r2, r2, #8
 8107342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107344:	68fb      	ldr	r3, [r7, #12]
 8107346:	681b      	ldr	r3, [r3, #0]
 8107348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	681b      	ldr	r3, [r3, #0]
 810734e:	f022 0204 	bic.w	r2, r2, #4
 8107352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810735a:	68bb      	ldr	r3, [r7, #8]
 810735c:	691a      	ldr	r2, [r3, #16]
 810735e:	68fb      	ldr	r3, [r7, #12]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	430a      	orrs	r2, r1
 8107364:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107366:	e021      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	68b9      	ldr	r1, [r7, #8]
 810736e:	4618      	mov	r0, r3
 8107370:	f000 fb2a 	bl	81079c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	681b      	ldr	r3, [r3, #0]
 810737e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810739a:	68bb      	ldr	r3, [r7, #8]
 810739c:	691b      	ldr	r3, [r3, #16]
 810739e:	021a      	lsls	r2, r3, #8
 81073a0:	68fb      	ldr	r3, [r7, #12]
 81073a2:	681b      	ldr	r3, [r3, #0]
 81073a4:	430a      	orrs	r2, r1
 81073a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81073a8:	e000      	b.n	81073ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 81073aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81073ac:	68fb      	ldr	r3, [r7, #12]
 81073ae:	2200      	movs	r2, #0
 81073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81073b4:	2300      	movs	r3, #0
}
 81073b6:	4618      	mov	r0, r3
 81073b8:	3710      	adds	r7, #16
 81073ba:	46bd      	mov	sp, r7
 81073bc:	bd80      	pop	{r7, pc}
 81073be:	bf00      	nop

081073c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81073c0:	b480      	push	{r7}
 81073c2:	b085      	sub	sp, #20
 81073c4:	af00      	add	r7, sp, #0
 81073c6:	6078      	str	r0, [r7, #4]
 81073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	681b      	ldr	r3, [r3, #0]
 81073ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81073d0:	687b      	ldr	r3, [r7, #4]
 81073d2:	4a40      	ldr	r2, [pc, #256]	; (81074d4 <TIM_Base_SetConfig+0x114>)
 81073d4:	4293      	cmp	r3, r2
 81073d6:	d013      	beq.n	8107400 <TIM_Base_SetConfig+0x40>
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073de:	d00f      	beq.n	8107400 <TIM_Base_SetConfig+0x40>
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	4a3d      	ldr	r2, [pc, #244]	; (81074d8 <TIM_Base_SetConfig+0x118>)
 81073e4:	4293      	cmp	r3, r2
 81073e6:	d00b      	beq.n	8107400 <TIM_Base_SetConfig+0x40>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	4a3c      	ldr	r2, [pc, #240]	; (81074dc <TIM_Base_SetConfig+0x11c>)
 81073ec:	4293      	cmp	r3, r2
 81073ee:	d007      	beq.n	8107400 <TIM_Base_SetConfig+0x40>
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	4a3b      	ldr	r2, [pc, #236]	; (81074e0 <TIM_Base_SetConfig+0x120>)
 81073f4:	4293      	cmp	r3, r2
 81073f6:	d003      	beq.n	8107400 <TIM_Base_SetConfig+0x40>
 81073f8:	687b      	ldr	r3, [r7, #4]
 81073fa:	4a3a      	ldr	r2, [pc, #232]	; (81074e4 <TIM_Base_SetConfig+0x124>)
 81073fc:	4293      	cmp	r3, r2
 81073fe:	d108      	bne.n	8107412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107408:	683b      	ldr	r3, [r7, #0]
 810740a:	685b      	ldr	r3, [r3, #4]
 810740c:	68fa      	ldr	r2, [r7, #12]
 810740e:	4313      	orrs	r3, r2
 8107410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	4a2f      	ldr	r2, [pc, #188]	; (81074d4 <TIM_Base_SetConfig+0x114>)
 8107416:	4293      	cmp	r3, r2
 8107418:	d01f      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107420:	d01b      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	4a2c      	ldr	r2, [pc, #176]	; (81074d8 <TIM_Base_SetConfig+0x118>)
 8107426:	4293      	cmp	r3, r2
 8107428:	d017      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	4a2b      	ldr	r2, [pc, #172]	; (81074dc <TIM_Base_SetConfig+0x11c>)
 810742e:	4293      	cmp	r3, r2
 8107430:	d013      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	4a2a      	ldr	r2, [pc, #168]	; (81074e0 <TIM_Base_SetConfig+0x120>)
 8107436:	4293      	cmp	r3, r2
 8107438:	d00f      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 810743a:	687b      	ldr	r3, [r7, #4]
 810743c:	4a29      	ldr	r2, [pc, #164]	; (81074e4 <TIM_Base_SetConfig+0x124>)
 810743e:	4293      	cmp	r3, r2
 8107440:	d00b      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	4a28      	ldr	r2, [pc, #160]	; (81074e8 <TIM_Base_SetConfig+0x128>)
 8107446:	4293      	cmp	r3, r2
 8107448:	d007      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	4a27      	ldr	r2, [pc, #156]	; (81074ec <TIM_Base_SetConfig+0x12c>)
 810744e:	4293      	cmp	r3, r2
 8107450:	d003      	beq.n	810745a <TIM_Base_SetConfig+0x9a>
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	4a26      	ldr	r2, [pc, #152]	; (81074f0 <TIM_Base_SetConfig+0x130>)
 8107456:	4293      	cmp	r3, r2
 8107458:	d108      	bne.n	810746c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810745a:	68fb      	ldr	r3, [r7, #12]
 810745c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107462:	683b      	ldr	r3, [r7, #0]
 8107464:	68db      	ldr	r3, [r3, #12]
 8107466:	68fa      	ldr	r2, [r7, #12]
 8107468:	4313      	orrs	r3, r2
 810746a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810746c:	68fb      	ldr	r3, [r7, #12]
 810746e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107472:	683b      	ldr	r3, [r7, #0]
 8107474:	695b      	ldr	r3, [r3, #20]
 8107476:	4313      	orrs	r3, r2
 8107478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	68fa      	ldr	r2, [r7, #12]
 810747e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107480:	683b      	ldr	r3, [r7, #0]
 8107482:	689a      	ldr	r2, [r3, #8]
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107488:	683b      	ldr	r3, [r7, #0]
 810748a:	681a      	ldr	r2, [r3, #0]
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	4a10      	ldr	r2, [pc, #64]	; (81074d4 <TIM_Base_SetConfig+0x114>)
 8107494:	4293      	cmp	r3, r2
 8107496:	d00f      	beq.n	81074b8 <TIM_Base_SetConfig+0xf8>
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	4a12      	ldr	r2, [pc, #72]	; (81074e4 <TIM_Base_SetConfig+0x124>)
 810749c:	4293      	cmp	r3, r2
 810749e:	d00b      	beq.n	81074b8 <TIM_Base_SetConfig+0xf8>
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	4a11      	ldr	r2, [pc, #68]	; (81074e8 <TIM_Base_SetConfig+0x128>)
 81074a4:	4293      	cmp	r3, r2
 81074a6:	d007      	beq.n	81074b8 <TIM_Base_SetConfig+0xf8>
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	4a10      	ldr	r2, [pc, #64]	; (81074ec <TIM_Base_SetConfig+0x12c>)
 81074ac:	4293      	cmp	r3, r2
 81074ae:	d003      	beq.n	81074b8 <TIM_Base_SetConfig+0xf8>
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	4a0f      	ldr	r2, [pc, #60]	; (81074f0 <TIM_Base_SetConfig+0x130>)
 81074b4:	4293      	cmp	r3, r2
 81074b6:	d103      	bne.n	81074c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81074b8:	683b      	ldr	r3, [r7, #0]
 81074ba:	691a      	ldr	r2, [r3, #16]
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	2201      	movs	r2, #1
 81074c4:	615a      	str	r2, [r3, #20]
}
 81074c6:	bf00      	nop
 81074c8:	3714      	adds	r7, #20
 81074ca:	46bd      	mov	sp, r7
 81074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074d0:	4770      	bx	lr
 81074d2:	bf00      	nop
 81074d4:	40010000 	.word	0x40010000
 81074d8:	40000400 	.word	0x40000400
 81074dc:	40000800 	.word	0x40000800
 81074e0:	40000c00 	.word	0x40000c00
 81074e4:	40010400 	.word	0x40010400
 81074e8:	40014000 	.word	0x40014000
 81074ec:	40014400 	.word	0x40014400
 81074f0:	40014800 	.word	0x40014800

081074f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81074f4:	b480      	push	{r7}
 81074f6:	b087      	sub	sp, #28
 81074f8:	af00      	add	r7, sp, #0
 81074fa:	6078      	str	r0, [r7, #4]
 81074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81074fe:	687b      	ldr	r3, [r7, #4]
 8107500:	6a1b      	ldr	r3, [r3, #32]
 8107502:	f023 0201 	bic.w	r2, r3, #1
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	6a1b      	ldr	r3, [r3, #32]
 810750e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	685b      	ldr	r3, [r3, #4]
 8107514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	699b      	ldr	r3, [r3, #24]
 810751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810751c:	68fb      	ldr	r3, [r7, #12]
 810751e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	f023 0303 	bic.w	r3, r3, #3
 810752e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107530:	683b      	ldr	r3, [r7, #0]
 8107532:	681b      	ldr	r3, [r3, #0]
 8107534:	68fa      	ldr	r2, [r7, #12]
 8107536:	4313      	orrs	r3, r2
 8107538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810753a:	697b      	ldr	r3, [r7, #20]
 810753c:	f023 0302 	bic.w	r3, r3, #2
 8107540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107542:	683b      	ldr	r3, [r7, #0]
 8107544:	689b      	ldr	r3, [r3, #8]
 8107546:	697a      	ldr	r2, [r7, #20]
 8107548:	4313      	orrs	r3, r2
 810754a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	4a2c      	ldr	r2, [pc, #176]	; (8107600 <TIM_OC1_SetConfig+0x10c>)
 8107550:	4293      	cmp	r3, r2
 8107552:	d00f      	beq.n	8107574 <TIM_OC1_SetConfig+0x80>
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	4a2b      	ldr	r2, [pc, #172]	; (8107604 <TIM_OC1_SetConfig+0x110>)
 8107558:	4293      	cmp	r3, r2
 810755a:	d00b      	beq.n	8107574 <TIM_OC1_SetConfig+0x80>
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	4a2a      	ldr	r2, [pc, #168]	; (8107608 <TIM_OC1_SetConfig+0x114>)
 8107560:	4293      	cmp	r3, r2
 8107562:	d007      	beq.n	8107574 <TIM_OC1_SetConfig+0x80>
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	4a29      	ldr	r2, [pc, #164]	; (810760c <TIM_OC1_SetConfig+0x118>)
 8107568:	4293      	cmp	r3, r2
 810756a:	d003      	beq.n	8107574 <TIM_OC1_SetConfig+0x80>
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	4a28      	ldr	r2, [pc, #160]	; (8107610 <TIM_OC1_SetConfig+0x11c>)
 8107570:	4293      	cmp	r3, r2
 8107572:	d10c      	bne.n	810758e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107574:	697b      	ldr	r3, [r7, #20]
 8107576:	f023 0308 	bic.w	r3, r3, #8
 810757a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810757c:	683b      	ldr	r3, [r7, #0]
 810757e:	68db      	ldr	r3, [r3, #12]
 8107580:	697a      	ldr	r2, [r7, #20]
 8107582:	4313      	orrs	r3, r2
 8107584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107586:	697b      	ldr	r3, [r7, #20]
 8107588:	f023 0304 	bic.w	r3, r3, #4
 810758c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	4a1b      	ldr	r2, [pc, #108]	; (8107600 <TIM_OC1_SetConfig+0x10c>)
 8107592:	4293      	cmp	r3, r2
 8107594:	d00f      	beq.n	81075b6 <TIM_OC1_SetConfig+0xc2>
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	4a1a      	ldr	r2, [pc, #104]	; (8107604 <TIM_OC1_SetConfig+0x110>)
 810759a:	4293      	cmp	r3, r2
 810759c:	d00b      	beq.n	81075b6 <TIM_OC1_SetConfig+0xc2>
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	4a19      	ldr	r2, [pc, #100]	; (8107608 <TIM_OC1_SetConfig+0x114>)
 81075a2:	4293      	cmp	r3, r2
 81075a4:	d007      	beq.n	81075b6 <TIM_OC1_SetConfig+0xc2>
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	4a18      	ldr	r2, [pc, #96]	; (810760c <TIM_OC1_SetConfig+0x118>)
 81075aa:	4293      	cmp	r3, r2
 81075ac:	d003      	beq.n	81075b6 <TIM_OC1_SetConfig+0xc2>
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	4a17      	ldr	r2, [pc, #92]	; (8107610 <TIM_OC1_SetConfig+0x11c>)
 81075b2:	4293      	cmp	r3, r2
 81075b4:	d111      	bne.n	81075da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81075b6:	693b      	ldr	r3, [r7, #16]
 81075b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81075bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81075be:	693b      	ldr	r3, [r7, #16]
 81075c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81075c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81075c6:	683b      	ldr	r3, [r7, #0]
 81075c8:	695b      	ldr	r3, [r3, #20]
 81075ca:	693a      	ldr	r2, [r7, #16]
 81075cc:	4313      	orrs	r3, r2
 81075ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81075d0:	683b      	ldr	r3, [r7, #0]
 81075d2:	699b      	ldr	r3, [r3, #24]
 81075d4:	693a      	ldr	r2, [r7, #16]
 81075d6:	4313      	orrs	r3, r2
 81075d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	693a      	ldr	r2, [r7, #16]
 81075de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	68fa      	ldr	r2, [r7, #12]
 81075e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81075e6:	683b      	ldr	r3, [r7, #0]
 81075e8:	685a      	ldr	r2, [r3, #4]
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81075ee:	687b      	ldr	r3, [r7, #4]
 81075f0:	697a      	ldr	r2, [r7, #20]
 81075f2:	621a      	str	r2, [r3, #32]
}
 81075f4:	bf00      	nop
 81075f6:	371c      	adds	r7, #28
 81075f8:	46bd      	mov	sp, r7
 81075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075fe:	4770      	bx	lr
 8107600:	40010000 	.word	0x40010000
 8107604:	40010400 	.word	0x40010400
 8107608:	40014000 	.word	0x40014000
 810760c:	40014400 	.word	0x40014400
 8107610:	40014800 	.word	0x40014800

08107614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107614:	b480      	push	{r7}
 8107616:	b087      	sub	sp, #28
 8107618:	af00      	add	r7, sp, #0
 810761a:	6078      	str	r0, [r7, #4]
 810761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	6a1b      	ldr	r3, [r3, #32]
 8107622:	f023 0210 	bic.w	r2, r3, #16
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810762a:	687b      	ldr	r3, [r7, #4]
 810762c:	6a1b      	ldr	r3, [r3, #32]
 810762e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	685b      	ldr	r3, [r3, #4]
 8107634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	699b      	ldr	r3, [r3, #24]
 810763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810763c:	68fb      	ldr	r3, [r7, #12]
 810763e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107648:	68fb      	ldr	r3, [r7, #12]
 810764a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810764e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107650:	683b      	ldr	r3, [r7, #0]
 8107652:	681b      	ldr	r3, [r3, #0]
 8107654:	021b      	lsls	r3, r3, #8
 8107656:	68fa      	ldr	r2, [r7, #12]
 8107658:	4313      	orrs	r3, r2
 810765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810765c:	697b      	ldr	r3, [r7, #20]
 810765e:	f023 0320 	bic.w	r3, r3, #32
 8107662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107664:	683b      	ldr	r3, [r7, #0]
 8107666:	689b      	ldr	r3, [r3, #8]
 8107668:	011b      	lsls	r3, r3, #4
 810766a:	697a      	ldr	r2, [r7, #20]
 810766c:	4313      	orrs	r3, r2
 810766e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107670:	687b      	ldr	r3, [r7, #4]
 8107672:	4a28      	ldr	r2, [pc, #160]	; (8107714 <TIM_OC2_SetConfig+0x100>)
 8107674:	4293      	cmp	r3, r2
 8107676:	d003      	beq.n	8107680 <TIM_OC2_SetConfig+0x6c>
 8107678:	687b      	ldr	r3, [r7, #4]
 810767a:	4a27      	ldr	r2, [pc, #156]	; (8107718 <TIM_OC2_SetConfig+0x104>)
 810767c:	4293      	cmp	r3, r2
 810767e:	d10d      	bne.n	810769c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107680:	697b      	ldr	r3, [r7, #20]
 8107682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107688:	683b      	ldr	r3, [r7, #0]
 810768a:	68db      	ldr	r3, [r3, #12]
 810768c:	011b      	lsls	r3, r3, #4
 810768e:	697a      	ldr	r2, [r7, #20]
 8107690:	4313      	orrs	r3, r2
 8107692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107694:	697b      	ldr	r3, [r7, #20]
 8107696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810769a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	4a1d      	ldr	r2, [pc, #116]	; (8107714 <TIM_OC2_SetConfig+0x100>)
 81076a0:	4293      	cmp	r3, r2
 81076a2:	d00f      	beq.n	81076c4 <TIM_OC2_SetConfig+0xb0>
 81076a4:	687b      	ldr	r3, [r7, #4]
 81076a6:	4a1c      	ldr	r2, [pc, #112]	; (8107718 <TIM_OC2_SetConfig+0x104>)
 81076a8:	4293      	cmp	r3, r2
 81076aa:	d00b      	beq.n	81076c4 <TIM_OC2_SetConfig+0xb0>
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	4a1b      	ldr	r2, [pc, #108]	; (810771c <TIM_OC2_SetConfig+0x108>)
 81076b0:	4293      	cmp	r3, r2
 81076b2:	d007      	beq.n	81076c4 <TIM_OC2_SetConfig+0xb0>
 81076b4:	687b      	ldr	r3, [r7, #4]
 81076b6:	4a1a      	ldr	r2, [pc, #104]	; (8107720 <TIM_OC2_SetConfig+0x10c>)
 81076b8:	4293      	cmp	r3, r2
 81076ba:	d003      	beq.n	81076c4 <TIM_OC2_SetConfig+0xb0>
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	4a19      	ldr	r2, [pc, #100]	; (8107724 <TIM_OC2_SetConfig+0x110>)
 81076c0:	4293      	cmp	r3, r2
 81076c2:	d113      	bne.n	81076ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81076c4:	693b      	ldr	r3, [r7, #16]
 81076c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81076ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81076cc:	693b      	ldr	r3, [r7, #16]
 81076ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81076d4:	683b      	ldr	r3, [r7, #0]
 81076d6:	695b      	ldr	r3, [r3, #20]
 81076d8:	009b      	lsls	r3, r3, #2
 81076da:	693a      	ldr	r2, [r7, #16]
 81076dc:	4313      	orrs	r3, r2
 81076de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81076e0:	683b      	ldr	r3, [r7, #0]
 81076e2:	699b      	ldr	r3, [r3, #24]
 81076e4:	009b      	lsls	r3, r3, #2
 81076e6:	693a      	ldr	r2, [r7, #16]
 81076e8:	4313      	orrs	r3, r2
 81076ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81076ec:	687b      	ldr	r3, [r7, #4]
 81076ee:	693a      	ldr	r2, [r7, #16]
 81076f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	68fa      	ldr	r2, [r7, #12]
 81076f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81076f8:	683b      	ldr	r3, [r7, #0]
 81076fa:	685a      	ldr	r2, [r3, #4]
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	697a      	ldr	r2, [r7, #20]
 8107704:	621a      	str	r2, [r3, #32]
}
 8107706:	bf00      	nop
 8107708:	371c      	adds	r7, #28
 810770a:	46bd      	mov	sp, r7
 810770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107710:	4770      	bx	lr
 8107712:	bf00      	nop
 8107714:	40010000 	.word	0x40010000
 8107718:	40010400 	.word	0x40010400
 810771c:	40014000 	.word	0x40014000
 8107720:	40014400 	.word	0x40014400
 8107724:	40014800 	.word	0x40014800

08107728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107728:	b480      	push	{r7}
 810772a:	b087      	sub	sp, #28
 810772c:	af00      	add	r7, sp, #0
 810772e:	6078      	str	r0, [r7, #4]
 8107730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	6a1b      	ldr	r3, [r3, #32]
 8107736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810773e:	687b      	ldr	r3, [r7, #4]
 8107740:	6a1b      	ldr	r3, [r3, #32]
 8107742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	685b      	ldr	r3, [r3, #4]
 8107748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	69db      	ldr	r3, [r3, #28]
 810774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107750:	68fb      	ldr	r3, [r7, #12]
 8107752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107758:	68fb      	ldr	r3, [r7, #12]
 810775a:	f023 0303 	bic.w	r3, r3, #3
 810775e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107760:	683b      	ldr	r3, [r7, #0]
 8107762:	681b      	ldr	r3, [r3, #0]
 8107764:	68fa      	ldr	r2, [r7, #12]
 8107766:	4313      	orrs	r3, r2
 8107768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810776a:	697b      	ldr	r3, [r7, #20]
 810776c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107772:	683b      	ldr	r3, [r7, #0]
 8107774:	689b      	ldr	r3, [r3, #8]
 8107776:	021b      	lsls	r3, r3, #8
 8107778:	697a      	ldr	r2, [r7, #20]
 810777a:	4313      	orrs	r3, r2
 810777c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	4a27      	ldr	r2, [pc, #156]	; (8107820 <TIM_OC3_SetConfig+0xf8>)
 8107782:	4293      	cmp	r3, r2
 8107784:	d003      	beq.n	810778e <TIM_OC3_SetConfig+0x66>
 8107786:	687b      	ldr	r3, [r7, #4]
 8107788:	4a26      	ldr	r2, [pc, #152]	; (8107824 <TIM_OC3_SetConfig+0xfc>)
 810778a:	4293      	cmp	r3, r2
 810778c:	d10d      	bne.n	81077aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810778e:	697b      	ldr	r3, [r7, #20]
 8107790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107796:	683b      	ldr	r3, [r7, #0]
 8107798:	68db      	ldr	r3, [r3, #12]
 810779a:	021b      	lsls	r3, r3, #8
 810779c:	697a      	ldr	r2, [r7, #20]
 810779e:	4313      	orrs	r3, r2
 81077a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81077a2:	697b      	ldr	r3, [r7, #20]
 81077a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81077a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81077aa:	687b      	ldr	r3, [r7, #4]
 81077ac:	4a1c      	ldr	r2, [pc, #112]	; (8107820 <TIM_OC3_SetConfig+0xf8>)
 81077ae:	4293      	cmp	r3, r2
 81077b0:	d00f      	beq.n	81077d2 <TIM_OC3_SetConfig+0xaa>
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	4a1b      	ldr	r2, [pc, #108]	; (8107824 <TIM_OC3_SetConfig+0xfc>)
 81077b6:	4293      	cmp	r3, r2
 81077b8:	d00b      	beq.n	81077d2 <TIM_OC3_SetConfig+0xaa>
 81077ba:	687b      	ldr	r3, [r7, #4]
 81077bc:	4a1a      	ldr	r2, [pc, #104]	; (8107828 <TIM_OC3_SetConfig+0x100>)
 81077be:	4293      	cmp	r3, r2
 81077c0:	d007      	beq.n	81077d2 <TIM_OC3_SetConfig+0xaa>
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	4a19      	ldr	r2, [pc, #100]	; (810782c <TIM_OC3_SetConfig+0x104>)
 81077c6:	4293      	cmp	r3, r2
 81077c8:	d003      	beq.n	81077d2 <TIM_OC3_SetConfig+0xaa>
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	4a18      	ldr	r2, [pc, #96]	; (8107830 <TIM_OC3_SetConfig+0x108>)
 81077ce:	4293      	cmp	r3, r2
 81077d0:	d113      	bne.n	81077fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81077d2:	693b      	ldr	r3, [r7, #16]
 81077d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81077d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81077da:	693b      	ldr	r3, [r7, #16]
 81077dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81077e2:	683b      	ldr	r3, [r7, #0]
 81077e4:	695b      	ldr	r3, [r3, #20]
 81077e6:	011b      	lsls	r3, r3, #4
 81077e8:	693a      	ldr	r2, [r7, #16]
 81077ea:	4313      	orrs	r3, r2
 81077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81077ee:	683b      	ldr	r3, [r7, #0]
 81077f0:	699b      	ldr	r3, [r3, #24]
 81077f2:	011b      	lsls	r3, r3, #4
 81077f4:	693a      	ldr	r2, [r7, #16]
 81077f6:	4313      	orrs	r3, r2
 81077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	693a      	ldr	r2, [r7, #16]
 81077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	68fa      	ldr	r2, [r7, #12]
 8107804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107806:	683b      	ldr	r3, [r7, #0]
 8107808:	685a      	ldr	r2, [r3, #4]
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810780e:	687b      	ldr	r3, [r7, #4]
 8107810:	697a      	ldr	r2, [r7, #20]
 8107812:	621a      	str	r2, [r3, #32]
}
 8107814:	bf00      	nop
 8107816:	371c      	adds	r7, #28
 8107818:	46bd      	mov	sp, r7
 810781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810781e:	4770      	bx	lr
 8107820:	40010000 	.word	0x40010000
 8107824:	40010400 	.word	0x40010400
 8107828:	40014000 	.word	0x40014000
 810782c:	40014400 	.word	0x40014400
 8107830:	40014800 	.word	0x40014800

08107834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107834:	b480      	push	{r7}
 8107836:	b087      	sub	sp, #28
 8107838:	af00      	add	r7, sp, #0
 810783a:	6078      	str	r0, [r7, #4]
 810783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	6a1b      	ldr	r3, [r3, #32]
 8107842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	6a1b      	ldr	r3, [r3, #32]
 810784e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	685b      	ldr	r3, [r3, #4]
 8107854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107856:	687b      	ldr	r3, [r7, #4]
 8107858:	69db      	ldr	r3, [r3, #28]
 810785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810785c:	68fb      	ldr	r3, [r7, #12]
 810785e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810786a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810786c:	683b      	ldr	r3, [r7, #0]
 810786e:	681b      	ldr	r3, [r3, #0]
 8107870:	021b      	lsls	r3, r3, #8
 8107872:	68fa      	ldr	r2, [r7, #12]
 8107874:	4313      	orrs	r3, r2
 8107876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107878:	693b      	ldr	r3, [r7, #16]
 810787a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810787e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107880:	683b      	ldr	r3, [r7, #0]
 8107882:	689b      	ldr	r3, [r3, #8]
 8107884:	031b      	lsls	r3, r3, #12
 8107886:	693a      	ldr	r2, [r7, #16]
 8107888:	4313      	orrs	r3, r2
 810788a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	4a18      	ldr	r2, [pc, #96]	; (81078f0 <TIM_OC4_SetConfig+0xbc>)
 8107890:	4293      	cmp	r3, r2
 8107892:	d00f      	beq.n	81078b4 <TIM_OC4_SetConfig+0x80>
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	4a17      	ldr	r2, [pc, #92]	; (81078f4 <TIM_OC4_SetConfig+0xc0>)
 8107898:	4293      	cmp	r3, r2
 810789a:	d00b      	beq.n	81078b4 <TIM_OC4_SetConfig+0x80>
 810789c:	687b      	ldr	r3, [r7, #4]
 810789e:	4a16      	ldr	r2, [pc, #88]	; (81078f8 <TIM_OC4_SetConfig+0xc4>)
 81078a0:	4293      	cmp	r3, r2
 81078a2:	d007      	beq.n	81078b4 <TIM_OC4_SetConfig+0x80>
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	4a15      	ldr	r2, [pc, #84]	; (81078fc <TIM_OC4_SetConfig+0xc8>)
 81078a8:	4293      	cmp	r3, r2
 81078aa:	d003      	beq.n	81078b4 <TIM_OC4_SetConfig+0x80>
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	4a14      	ldr	r2, [pc, #80]	; (8107900 <TIM_OC4_SetConfig+0xcc>)
 81078b0:	4293      	cmp	r3, r2
 81078b2:	d109      	bne.n	81078c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81078b4:	697b      	ldr	r3, [r7, #20]
 81078b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81078ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81078bc:	683b      	ldr	r3, [r7, #0]
 81078be:	695b      	ldr	r3, [r3, #20]
 81078c0:	019b      	lsls	r3, r3, #6
 81078c2:	697a      	ldr	r2, [r7, #20]
 81078c4:	4313      	orrs	r3, r2
 81078c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	697a      	ldr	r2, [r7, #20]
 81078cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	68fa      	ldr	r2, [r7, #12]
 81078d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81078d4:	683b      	ldr	r3, [r7, #0]
 81078d6:	685a      	ldr	r2, [r3, #4]
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81078dc:	687b      	ldr	r3, [r7, #4]
 81078de:	693a      	ldr	r2, [r7, #16]
 81078e0:	621a      	str	r2, [r3, #32]
}
 81078e2:	bf00      	nop
 81078e4:	371c      	adds	r7, #28
 81078e6:	46bd      	mov	sp, r7
 81078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078ec:	4770      	bx	lr
 81078ee:	bf00      	nop
 81078f0:	40010000 	.word	0x40010000
 81078f4:	40010400 	.word	0x40010400
 81078f8:	40014000 	.word	0x40014000
 81078fc:	40014400 	.word	0x40014400
 8107900:	40014800 	.word	0x40014800

08107904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107904:	b480      	push	{r7}
 8107906:	b087      	sub	sp, #28
 8107908:	af00      	add	r7, sp, #0
 810790a:	6078      	str	r0, [r7, #4]
 810790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810790e:	687b      	ldr	r3, [r7, #4]
 8107910:	6a1b      	ldr	r3, [r3, #32]
 8107912:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810791a:	687b      	ldr	r3, [r7, #4]
 810791c:	6a1b      	ldr	r3, [r3, #32]
 810791e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	685b      	ldr	r3, [r3, #4]
 8107924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810792c:	68fb      	ldr	r3, [r7, #12]
 810792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107934:	683b      	ldr	r3, [r7, #0]
 8107936:	681b      	ldr	r3, [r3, #0]
 8107938:	68fa      	ldr	r2, [r7, #12]
 810793a:	4313      	orrs	r3, r2
 810793c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810793e:	693b      	ldr	r3, [r7, #16]
 8107940:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107946:	683b      	ldr	r3, [r7, #0]
 8107948:	689b      	ldr	r3, [r3, #8]
 810794a:	041b      	lsls	r3, r3, #16
 810794c:	693a      	ldr	r2, [r7, #16]
 810794e:	4313      	orrs	r3, r2
 8107950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	4a17      	ldr	r2, [pc, #92]	; (81079b4 <TIM_OC5_SetConfig+0xb0>)
 8107956:	4293      	cmp	r3, r2
 8107958:	d00f      	beq.n	810797a <TIM_OC5_SetConfig+0x76>
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	4a16      	ldr	r2, [pc, #88]	; (81079b8 <TIM_OC5_SetConfig+0xb4>)
 810795e:	4293      	cmp	r3, r2
 8107960:	d00b      	beq.n	810797a <TIM_OC5_SetConfig+0x76>
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	4a15      	ldr	r2, [pc, #84]	; (81079bc <TIM_OC5_SetConfig+0xb8>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d007      	beq.n	810797a <TIM_OC5_SetConfig+0x76>
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	4a14      	ldr	r2, [pc, #80]	; (81079c0 <TIM_OC5_SetConfig+0xbc>)
 810796e:	4293      	cmp	r3, r2
 8107970:	d003      	beq.n	810797a <TIM_OC5_SetConfig+0x76>
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	4a13      	ldr	r2, [pc, #76]	; (81079c4 <TIM_OC5_SetConfig+0xc0>)
 8107976:	4293      	cmp	r3, r2
 8107978:	d109      	bne.n	810798e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810797a:	697b      	ldr	r3, [r7, #20]
 810797c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107982:	683b      	ldr	r3, [r7, #0]
 8107984:	695b      	ldr	r3, [r3, #20]
 8107986:	021b      	lsls	r3, r3, #8
 8107988:	697a      	ldr	r2, [r7, #20]
 810798a:	4313      	orrs	r3, r2
 810798c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	697a      	ldr	r2, [r7, #20]
 8107992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	68fa      	ldr	r2, [r7, #12]
 8107998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810799a:	683b      	ldr	r3, [r7, #0]
 810799c:	685a      	ldr	r2, [r3, #4]
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	693a      	ldr	r2, [r7, #16]
 81079a6:	621a      	str	r2, [r3, #32]
}
 81079a8:	bf00      	nop
 81079aa:	371c      	adds	r7, #28
 81079ac:	46bd      	mov	sp, r7
 81079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079b2:	4770      	bx	lr
 81079b4:	40010000 	.word	0x40010000
 81079b8:	40010400 	.word	0x40010400
 81079bc:	40014000 	.word	0x40014000
 81079c0:	40014400 	.word	0x40014400
 81079c4:	40014800 	.word	0x40014800

081079c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81079c8:	b480      	push	{r7}
 81079ca:	b087      	sub	sp, #28
 81079cc:	af00      	add	r7, sp, #0
 81079ce:	6078      	str	r0, [r7, #4]
 81079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	6a1b      	ldr	r3, [r3, #32]
 81079d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81079de:	687b      	ldr	r3, [r7, #4]
 81079e0:	6a1b      	ldr	r3, [r3, #32]
 81079e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	685b      	ldr	r3, [r3, #4]
 81079e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81079f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81079f8:	683b      	ldr	r3, [r7, #0]
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	021b      	lsls	r3, r3, #8
 81079fe:	68fa      	ldr	r2, [r7, #12]
 8107a00:	4313      	orrs	r3, r2
 8107a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107a04:	693b      	ldr	r3, [r7, #16]
 8107a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107a0c:	683b      	ldr	r3, [r7, #0]
 8107a0e:	689b      	ldr	r3, [r3, #8]
 8107a10:	051b      	lsls	r3, r3, #20
 8107a12:	693a      	ldr	r2, [r7, #16]
 8107a14:	4313      	orrs	r3, r2
 8107a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	4a18      	ldr	r2, [pc, #96]	; (8107a7c <TIM_OC6_SetConfig+0xb4>)
 8107a1c:	4293      	cmp	r3, r2
 8107a1e:	d00f      	beq.n	8107a40 <TIM_OC6_SetConfig+0x78>
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	4a17      	ldr	r2, [pc, #92]	; (8107a80 <TIM_OC6_SetConfig+0xb8>)
 8107a24:	4293      	cmp	r3, r2
 8107a26:	d00b      	beq.n	8107a40 <TIM_OC6_SetConfig+0x78>
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	4a16      	ldr	r2, [pc, #88]	; (8107a84 <TIM_OC6_SetConfig+0xbc>)
 8107a2c:	4293      	cmp	r3, r2
 8107a2e:	d007      	beq.n	8107a40 <TIM_OC6_SetConfig+0x78>
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	4a15      	ldr	r2, [pc, #84]	; (8107a88 <TIM_OC6_SetConfig+0xc0>)
 8107a34:	4293      	cmp	r3, r2
 8107a36:	d003      	beq.n	8107a40 <TIM_OC6_SetConfig+0x78>
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	4a14      	ldr	r2, [pc, #80]	; (8107a8c <TIM_OC6_SetConfig+0xc4>)
 8107a3c:	4293      	cmp	r3, r2
 8107a3e:	d109      	bne.n	8107a54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107a40:	697b      	ldr	r3, [r7, #20]
 8107a42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107a46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107a48:	683b      	ldr	r3, [r7, #0]
 8107a4a:	695b      	ldr	r3, [r3, #20]
 8107a4c:	029b      	lsls	r3, r3, #10
 8107a4e:	697a      	ldr	r2, [r7, #20]
 8107a50:	4313      	orrs	r3, r2
 8107a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	697a      	ldr	r2, [r7, #20]
 8107a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	68fa      	ldr	r2, [r7, #12]
 8107a5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107a60:	683b      	ldr	r3, [r7, #0]
 8107a62:	685a      	ldr	r2, [r3, #4]
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	693a      	ldr	r2, [r7, #16]
 8107a6c:	621a      	str	r2, [r3, #32]
}
 8107a6e:	bf00      	nop
 8107a70:	371c      	adds	r7, #28
 8107a72:	46bd      	mov	sp, r7
 8107a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a78:	4770      	bx	lr
 8107a7a:	bf00      	nop
 8107a7c:	40010000 	.word	0x40010000
 8107a80:	40010400 	.word	0x40010400
 8107a84:	40014000 	.word	0x40014000
 8107a88:	40014400 	.word	0x40014400
 8107a8c:	40014800 	.word	0x40014800

08107a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107a90:	b480      	push	{r7}
 8107a92:	b087      	sub	sp, #28
 8107a94:	af00      	add	r7, sp, #0
 8107a96:	60f8      	str	r0, [r7, #12]
 8107a98:	60b9      	str	r1, [r7, #8]
 8107a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107a9c:	68bb      	ldr	r3, [r7, #8]
 8107a9e:	f003 031f 	and.w	r3, r3, #31
 8107aa2:	2201      	movs	r2, #1
 8107aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8107aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107aaa:	68fb      	ldr	r3, [r7, #12]
 8107aac:	6a1a      	ldr	r2, [r3, #32]
 8107aae:	697b      	ldr	r3, [r7, #20]
 8107ab0:	43db      	mvns	r3, r3
 8107ab2:	401a      	ands	r2, r3
 8107ab4:	68fb      	ldr	r3, [r7, #12]
 8107ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107ab8:	68fb      	ldr	r3, [r7, #12]
 8107aba:	6a1a      	ldr	r2, [r3, #32]
 8107abc:	68bb      	ldr	r3, [r7, #8]
 8107abe:	f003 031f 	and.w	r3, r3, #31
 8107ac2:	6879      	ldr	r1, [r7, #4]
 8107ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8107ac8:	431a      	orrs	r2, r3
 8107aca:	68fb      	ldr	r3, [r7, #12]
 8107acc:	621a      	str	r2, [r3, #32]
}
 8107ace:	bf00      	nop
 8107ad0:	371c      	adds	r7, #28
 8107ad2:	46bd      	mov	sp, r7
 8107ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ad8:	4770      	bx	lr
	...

08107adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107adc:	b480      	push	{r7}
 8107ade:	b085      	sub	sp, #20
 8107ae0:	af00      	add	r7, sp, #0
 8107ae2:	6078      	str	r0, [r7, #4]
 8107ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107aec:	2b01      	cmp	r3, #1
 8107aee:	d101      	bne.n	8107af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107af0:	2302      	movs	r3, #2
 8107af2:	e068      	b.n	8107bc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	2201      	movs	r2, #1
 8107af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	2202      	movs	r2, #2
 8107b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	685b      	ldr	r3, [r3, #4]
 8107b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	689b      	ldr	r3, [r3, #8]
 8107b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	681b      	ldr	r3, [r3, #0]
 8107b18:	4a2e      	ldr	r2, [pc, #184]	; (8107bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b1a:	4293      	cmp	r3, r2
 8107b1c:	d004      	beq.n	8107b28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	4a2d      	ldr	r2, [pc, #180]	; (8107bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b24:	4293      	cmp	r3, r2
 8107b26:	d108      	bne.n	8107b3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107b28:	68fb      	ldr	r3, [r7, #12]
 8107b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107b2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107b30:	683b      	ldr	r3, [r7, #0]
 8107b32:	685b      	ldr	r3, [r3, #4]
 8107b34:	68fa      	ldr	r2, [r7, #12]
 8107b36:	4313      	orrs	r3, r2
 8107b38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107b42:	683b      	ldr	r3, [r7, #0]
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	68fa      	ldr	r2, [r7, #12]
 8107b48:	4313      	orrs	r3, r2
 8107b4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	681b      	ldr	r3, [r3, #0]
 8107b50:	68fa      	ldr	r2, [r7, #12]
 8107b52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	4a1e      	ldr	r2, [pc, #120]	; (8107bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b5a:	4293      	cmp	r3, r2
 8107b5c:	d01d      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b66:	d018      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	4a1b      	ldr	r2, [pc, #108]	; (8107bdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107b6e:	4293      	cmp	r3, r2
 8107b70:	d013      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	4a1a      	ldr	r2, [pc, #104]	; (8107be0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107b78:	4293      	cmp	r3, r2
 8107b7a:	d00e      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	681b      	ldr	r3, [r3, #0]
 8107b80:	4a18      	ldr	r2, [pc, #96]	; (8107be4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107b82:	4293      	cmp	r3, r2
 8107b84:	d009      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	4a13      	ldr	r2, [pc, #76]	; (8107bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b8c:	4293      	cmp	r3, r2
 8107b8e:	d004      	beq.n	8107b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b90:	687b      	ldr	r3, [r7, #4]
 8107b92:	681b      	ldr	r3, [r3, #0]
 8107b94:	4a14      	ldr	r2, [pc, #80]	; (8107be8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107b96:	4293      	cmp	r3, r2
 8107b98:	d10c      	bne.n	8107bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107b9a:	68bb      	ldr	r3, [r7, #8]
 8107b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107ba2:	683b      	ldr	r3, [r7, #0]
 8107ba4:	689b      	ldr	r3, [r3, #8]
 8107ba6:	68ba      	ldr	r2, [r7, #8]
 8107ba8:	4313      	orrs	r3, r2
 8107baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	68ba      	ldr	r2, [r7, #8]
 8107bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	2201      	movs	r2, #1
 8107bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	2200      	movs	r2, #0
 8107bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107bc4:	2300      	movs	r3, #0
}
 8107bc6:	4618      	mov	r0, r3
 8107bc8:	3714      	adds	r7, #20
 8107bca:	46bd      	mov	sp, r7
 8107bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bd0:	4770      	bx	lr
 8107bd2:	bf00      	nop
 8107bd4:	40010000 	.word	0x40010000
 8107bd8:	40010400 	.word	0x40010400
 8107bdc:	40000400 	.word	0x40000400
 8107be0:	40000800 	.word	0x40000800
 8107be4:	40000c00 	.word	0x40000c00
 8107be8:	40001800 	.word	0x40001800

08107bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107bec:	b480      	push	{r7}
 8107bee:	b085      	sub	sp, #20
 8107bf0:	af00      	add	r7, sp, #0
 8107bf2:	6078      	str	r0, [r7, #4]
 8107bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107bf6:	2300      	movs	r3, #0
 8107bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107c00:	2b01      	cmp	r3, #1
 8107c02:	d101      	bne.n	8107c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107c04:	2302      	movs	r3, #2
 8107c06:	e065      	b.n	8107cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	2201      	movs	r2, #1
 8107c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107c10:	68fb      	ldr	r3, [r7, #12]
 8107c12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107c16:	683b      	ldr	r3, [r7, #0]
 8107c18:	68db      	ldr	r3, [r3, #12]
 8107c1a:	4313      	orrs	r3, r2
 8107c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107c1e:	68fb      	ldr	r3, [r7, #12]
 8107c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107c24:	683b      	ldr	r3, [r7, #0]
 8107c26:	689b      	ldr	r3, [r3, #8]
 8107c28:	4313      	orrs	r3, r2
 8107c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107c2c:	68fb      	ldr	r3, [r7, #12]
 8107c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107c32:	683b      	ldr	r3, [r7, #0]
 8107c34:	685b      	ldr	r3, [r3, #4]
 8107c36:	4313      	orrs	r3, r2
 8107c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107c3a:	68fb      	ldr	r3, [r7, #12]
 8107c3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107c40:	683b      	ldr	r3, [r7, #0]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	4313      	orrs	r3, r2
 8107c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107c4e:	683b      	ldr	r3, [r7, #0]
 8107c50:	691b      	ldr	r3, [r3, #16]
 8107c52:	4313      	orrs	r3, r2
 8107c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107c56:	68fb      	ldr	r3, [r7, #12]
 8107c58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107c5c:	683b      	ldr	r3, [r7, #0]
 8107c5e:	695b      	ldr	r3, [r3, #20]
 8107c60:	4313      	orrs	r3, r2
 8107c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107c64:	68fb      	ldr	r3, [r7, #12]
 8107c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107c6a:	683b      	ldr	r3, [r7, #0]
 8107c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c6e:	4313      	orrs	r3, r2
 8107c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107c72:	68fb      	ldr	r3, [r7, #12]
 8107c74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107c78:	683b      	ldr	r3, [r7, #0]
 8107c7a:	699b      	ldr	r3, [r3, #24]
 8107c7c:	041b      	lsls	r3, r3, #16
 8107c7e:	4313      	orrs	r3, r2
 8107c80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	4a16      	ldr	r2, [pc, #88]	; (8107ce0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107c88:	4293      	cmp	r3, r2
 8107c8a:	d004      	beq.n	8107c96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	681b      	ldr	r3, [r3, #0]
 8107c90:	4a14      	ldr	r2, [pc, #80]	; (8107ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107c92:	4293      	cmp	r3, r2
 8107c94:	d115      	bne.n	8107cc2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107c96:	68fb      	ldr	r3, [r7, #12]
 8107c98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107c9c:	683b      	ldr	r3, [r7, #0]
 8107c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ca0:	051b      	lsls	r3, r3, #20
 8107ca2:	4313      	orrs	r3, r2
 8107ca4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107cac:	683b      	ldr	r3, [r7, #0]
 8107cae:	69db      	ldr	r3, [r3, #28]
 8107cb0:	4313      	orrs	r3, r2
 8107cb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107cb4:	68fb      	ldr	r3, [r7, #12]
 8107cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107cba:	683b      	ldr	r3, [r7, #0]
 8107cbc:	6a1b      	ldr	r3, [r3, #32]
 8107cbe:	4313      	orrs	r3, r2
 8107cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	68fa      	ldr	r2, [r7, #12]
 8107cc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	2200      	movs	r2, #0
 8107cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107cd2:	2300      	movs	r3, #0
}
 8107cd4:	4618      	mov	r0, r3
 8107cd6:	3714      	adds	r7, #20
 8107cd8:	46bd      	mov	sp, r7
 8107cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cde:	4770      	bx	lr
 8107ce0:	40010000 	.word	0x40010000
 8107ce4:	40010400 	.word	0x40010400

08107ce8 <__errno>:
 8107ce8:	4b01      	ldr	r3, [pc, #4]	; (8107cf0 <__errno+0x8>)
 8107cea:	6818      	ldr	r0, [r3, #0]
 8107cec:	4770      	bx	lr
 8107cee:	bf00      	nop
 8107cf0:	10000010 	.word	0x10000010

08107cf4 <__libc_init_array>:
 8107cf4:	b570      	push	{r4, r5, r6, lr}
 8107cf6:	4d0d      	ldr	r5, [pc, #52]	; (8107d2c <__libc_init_array+0x38>)
 8107cf8:	4c0d      	ldr	r4, [pc, #52]	; (8107d30 <__libc_init_array+0x3c>)
 8107cfa:	1b64      	subs	r4, r4, r5
 8107cfc:	10a4      	asrs	r4, r4, #2
 8107cfe:	2600      	movs	r6, #0
 8107d00:	42a6      	cmp	r6, r4
 8107d02:	d109      	bne.n	8107d18 <__libc_init_array+0x24>
 8107d04:	4d0b      	ldr	r5, [pc, #44]	; (8107d34 <__libc_init_array+0x40>)
 8107d06:	4c0c      	ldr	r4, [pc, #48]	; (8107d38 <__libc_init_array+0x44>)
 8107d08:	f002 fcf2 	bl	810a6f0 <_init>
 8107d0c:	1b64      	subs	r4, r4, r5
 8107d0e:	10a4      	asrs	r4, r4, #2
 8107d10:	2600      	movs	r6, #0
 8107d12:	42a6      	cmp	r6, r4
 8107d14:	d105      	bne.n	8107d22 <__libc_init_array+0x2e>
 8107d16:	bd70      	pop	{r4, r5, r6, pc}
 8107d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d1c:	4798      	blx	r3
 8107d1e:	3601      	adds	r6, #1
 8107d20:	e7ee      	b.n	8107d00 <__libc_init_array+0xc>
 8107d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d26:	4798      	blx	r3
 8107d28:	3601      	adds	r6, #1
 8107d2a:	e7f2      	b.n	8107d12 <__libc_init_array+0x1e>
 8107d2c:	0810aafc 	.word	0x0810aafc
 8107d30:	0810aafc 	.word	0x0810aafc
 8107d34:	0810aafc 	.word	0x0810aafc
 8107d38:	0810ab00 	.word	0x0810ab00

08107d3c <memcpy>:
 8107d3c:	440a      	add	r2, r1
 8107d3e:	4291      	cmp	r1, r2
 8107d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8107d44:	d100      	bne.n	8107d48 <memcpy+0xc>
 8107d46:	4770      	bx	lr
 8107d48:	b510      	push	{r4, lr}
 8107d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107d52:	4291      	cmp	r1, r2
 8107d54:	d1f9      	bne.n	8107d4a <memcpy+0xe>
 8107d56:	bd10      	pop	{r4, pc}

08107d58 <memset>:
 8107d58:	4402      	add	r2, r0
 8107d5a:	4603      	mov	r3, r0
 8107d5c:	4293      	cmp	r3, r2
 8107d5e:	d100      	bne.n	8107d62 <memset+0xa>
 8107d60:	4770      	bx	lr
 8107d62:	f803 1b01 	strb.w	r1, [r3], #1
 8107d66:	e7f9      	b.n	8107d5c <memset+0x4>

08107d68 <__cvt>:
 8107d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107d6c:	ec55 4b10 	vmov	r4, r5, d0
 8107d70:	2d00      	cmp	r5, #0
 8107d72:	460e      	mov	r6, r1
 8107d74:	4619      	mov	r1, r3
 8107d76:	462b      	mov	r3, r5
 8107d78:	bfbb      	ittet	lt
 8107d7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107d7e:	461d      	movlt	r5, r3
 8107d80:	2300      	movge	r3, #0
 8107d82:	232d      	movlt	r3, #45	; 0x2d
 8107d84:	700b      	strb	r3, [r1, #0]
 8107d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107d88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107d8c:	4691      	mov	r9, r2
 8107d8e:	f023 0820 	bic.w	r8, r3, #32
 8107d92:	bfbc      	itt	lt
 8107d94:	4622      	movlt	r2, r4
 8107d96:	4614      	movlt	r4, r2
 8107d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107d9c:	d005      	beq.n	8107daa <__cvt+0x42>
 8107d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107da2:	d100      	bne.n	8107da6 <__cvt+0x3e>
 8107da4:	3601      	adds	r6, #1
 8107da6:	2102      	movs	r1, #2
 8107da8:	e000      	b.n	8107dac <__cvt+0x44>
 8107daa:	2103      	movs	r1, #3
 8107dac:	ab03      	add	r3, sp, #12
 8107dae:	9301      	str	r3, [sp, #4]
 8107db0:	ab02      	add	r3, sp, #8
 8107db2:	9300      	str	r3, [sp, #0]
 8107db4:	ec45 4b10 	vmov	d0, r4, r5
 8107db8:	4653      	mov	r3, sl
 8107dba:	4632      	mov	r2, r6
 8107dbc:	f000 fccc 	bl	8108758 <_dtoa_r>
 8107dc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107dc4:	4607      	mov	r7, r0
 8107dc6:	d102      	bne.n	8107dce <__cvt+0x66>
 8107dc8:	f019 0f01 	tst.w	r9, #1
 8107dcc:	d022      	beq.n	8107e14 <__cvt+0xac>
 8107dce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107dd2:	eb07 0906 	add.w	r9, r7, r6
 8107dd6:	d110      	bne.n	8107dfa <__cvt+0x92>
 8107dd8:	783b      	ldrb	r3, [r7, #0]
 8107dda:	2b30      	cmp	r3, #48	; 0x30
 8107ddc:	d10a      	bne.n	8107df4 <__cvt+0x8c>
 8107dde:	2200      	movs	r2, #0
 8107de0:	2300      	movs	r3, #0
 8107de2:	4620      	mov	r0, r4
 8107de4:	4629      	mov	r1, r5
 8107de6:	f7f8 fef7 	bl	8100bd8 <__aeabi_dcmpeq>
 8107dea:	b918      	cbnz	r0, 8107df4 <__cvt+0x8c>
 8107dec:	f1c6 0601 	rsb	r6, r6, #1
 8107df0:	f8ca 6000 	str.w	r6, [sl]
 8107df4:	f8da 3000 	ldr.w	r3, [sl]
 8107df8:	4499      	add	r9, r3
 8107dfa:	2200      	movs	r2, #0
 8107dfc:	2300      	movs	r3, #0
 8107dfe:	4620      	mov	r0, r4
 8107e00:	4629      	mov	r1, r5
 8107e02:	f7f8 fee9 	bl	8100bd8 <__aeabi_dcmpeq>
 8107e06:	b108      	cbz	r0, 8107e0c <__cvt+0xa4>
 8107e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8107e0c:	2230      	movs	r2, #48	; 0x30
 8107e0e:	9b03      	ldr	r3, [sp, #12]
 8107e10:	454b      	cmp	r3, r9
 8107e12:	d307      	bcc.n	8107e24 <__cvt+0xbc>
 8107e14:	9b03      	ldr	r3, [sp, #12]
 8107e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107e18:	1bdb      	subs	r3, r3, r7
 8107e1a:	4638      	mov	r0, r7
 8107e1c:	6013      	str	r3, [r2, #0]
 8107e1e:	b004      	add	sp, #16
 8107e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107e24:	1c59      	adds	r1, r3, #1
 8107e26:	9103      	str	r1, [sp, #12]
 8107e28:	701a      	strb	r2, [r3, #0]
 8107e2a:	e7f0      	b.n	8107e0e <__cvt+0xa6>

08107e2c <__exponent>:
 8107e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107e2e:	4603      	mov	r3, r0
 8107e30:	2900      	cmp	r1, #0
 8107e32:	bfb8      	it	lt
 8107e34:	4249      	neglt	r1, r1
 8107e36:	f803 2b02 	strb.w	r2, [r3], #2
 8107e3a:	bfb4      	ite	lt
 8107e3c:	222d      	movlt	r2, #45	; 0x2d
 8107e3e:	222b      	movge	r2, #43	; 0x2b
 8107e40:	2909      	cmp	r1, #9
 8107e42:	7042      	strb	r2, [r0, #1]
 8107e44:	dd2a      	ble.n	8107e9c <__exponent+0x70>
 8107e46:	f10d 0407 	add.w	r4, sp, #7
 8107e4a:	46a4      	mov	ip, r4
 8107e4c:	270a      	movs	r7, #10
 8107e4e:	46a6      	mov	lr, r4
 8107e50:	460a      	mov	r2, r1
 8107e52:	fb91 f6f7 	sdiv	r6, r1, r7
 8107e56:	fb07 1516 	mls	r5, r7, r6, r1
 8107e5a:	3530      	adds	r5, #48	; 0x30
 8107e5c:	2a63      	cmp	r2, #99	; 0x63
 8107e5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8107e62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107e66:	4631      	mov	r1, r6
 8107e68:	dcf1      	bgt.n	8107e4e <__exponent+0x22>
 8107e6a:	3130      	adds	r1, #48	; 0x30
 8107e6c:	f1ae 0502 	sub.w	r5, lr, #2
 8107e70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107e74:	1c44      	adds	r4, r0, #1
 8107e76:	4629      	mov	r1, r5
 8107e78:	4561      	cmp	r1, ip
 8107e7a:	d30a      	bcc.n	8107e92 <__exponent+0x66>
 8107e7c:	f10d 0209 	add.w	r2, sp, #9
 8107e80:	eba2 020e 	sub.w	r2, r2, lr
 8107e84:	4565      	cmp	r5, ip
 8107e86:	bf88      	it	hi
 8107e88:	2200      	movhi	r2, #0
 8107e8a:	4413      	add	r3, r2
 8107e8c:	1a18      	subs	r0, r3, r0
 8107e8e:	b003      	add	sp, #12
 8107e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107e96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107e9a:	e7ed      	b.n	8107e78 <__exponent+0x4c>
 8107e9c:	2330      	movs	r3, #48	; 0x30
 8107e9e:	3130      	adds	r1, #48	; 0x30
 8107ea0:	7083      	strb	r3, [r0, #2]
 8107ea2:	70c1      	strb	r1, [r0, #3]
 8107ea4:	1d03      	adds	r3, r0, #4
 8107ea6:	e7f1      	b.n	8107e8c <__exponent+0x60>

08107ea8 <_printf_float>:
 8107ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107eac:	ed2d 8b02 	vpush	{d8}
 8107eb0:	b08d      	sub	sp, #52	; 0x34
 8107eb2:	460c      	mov	r4, r1
 8107eb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107eb8:	4616      	mov	r6, r2
 8107eba:	461f      	mov	r7, r3
 8107ebc:	4605      	mov	r5, r0
 8107ebe:	f001 fa37 	bl	8109330 <_localeconv_r>
 8107ec2:	f8d0 a000 	ldr.w	sl, [r0]
 8107ec6:	4650      	mov	r0, sl
 8107ec8:	f7f8 fa0a 	bl	81002e0 <strlen>
 8107ecc:	2300      	movs	r3, #0
 8107ece:	930a      	str	r3, [sp, #40]	; 0x28
 8107ed0:	6823      	ldr	r3, [r4, #0]
 8107ed2:	9305      	str	r3, [sp, #20]
 8107ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8107ed8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107edc:	3307      	adds	r3, #7
 8107ede:	f023 0307 	bic.w	r3, r3, #7
 8107ee2:	f103 0208 	add.w	r2, r3, #8
 8107ee6:	f8c8 2000 	str.w	r2, [r8]
 8107eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107eee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107ef2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107efa:	9307      	str	r3, [sp, #28]
 8107efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8107f00:	ee08 0a10 	vmov	s16, r0
 8107f04:	4b9f      	ldr	r3, [pc, #636]	; (8108184 <_printf_float+0x2dc>)
 8107f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8107f0e:	f7f8 fe95 	bl	8100c3c <__aeabi_dcmpun>
 8107f12:	bb88      	cbnz	r0, 8107f78 <_printf_float+0xd0>
 8107f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107f18:	4b9a      	ldr	r3, [pc, #616]	; (8108184 <_printf_float+0x2dc>)
 8107f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8107f1e:	f7f8 fe6f 	bl	8100c00 <__aeabi_dcmple>
 8107f22:	bb48      	cbnz	r0, 8107f78 <_printf_float+0xd0>
 8107f24:	2200      	movs	r2, #0
 8107f26:	2300      	movs	r3, #0
 8107f28:	4640      	mov	r0, r8
 8107f2a:	4649      	mov	r1, r9
 8107f2c:	f7f8 fe5e 	bl	8100bec <__aeabi_dcmplt>
 8107f30:	b110      	cbz	r0, 8107f38 <_printf_float+0x90>
 8107f32:	232d      	movs	r3, #45	; 0x2d
 8107f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107f38:	4b93      	ldr	r3, [pc, #588]	; (8108188 <_printf_float+0x2e0>)
 8107f3a:	4894      	ldr	r0, [pc, #592]	; (810818c <_printf_float+0x2e4>)
 8107f3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107f40:	bf94      	ite	ls
 8107f42:	4698      	movls	r8, r3
 8107f44:	4680      	movhi	r8, r0
 8107f46:	2303      	movs	r3, #3
 8107f48:	6123      	str	r3, [r4, #16]
 8107f4a:	9b05      	ldr	r3, [sp, #20]
 8107f4c:	f023 0204 	bic.w	r2, r3, #4
 8107f50:	6022      	str	r2, [r4, #0]
 8107f52:	f04f 0900 	mov.w	r9, #0
 8107f56:	9700      	str	r7, [sp, #0]
 8107f58:	4633      	mov	r3, r6
 8107f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8107f5c:	4621      	mov	r1, r4
 8107f5e:	4628      	mov	r0, r5
 8107f60:	f000 f9d8 	bl	8108314 <_printf_common>
 8107f64:	3001      	adds	r0, #1
 8107f66:	f040 8090 	bne.w	810808a <_printf_float+0x1e2>
 8107f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8107f6e:	b00d      	add	sp, #52	; 0x34
 8107f70:	ecbd 8b02 	vpop	{d8}
 8107f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f78:	4642      	mov	r2, r8
 8107f7a:	464b      	mov	r3, r9
 8107f7c:	4640      	mov	r0, r8
 8107f7e:	4649      	mov	r1, r9
 8107f80:	f7f8 fe5c 	bl	8100c3c <__aeabi_dcmpun>
 8107f84:	b140      	cbz	r0, 8107f98 <_printf_float+0xf0>
 8107f86:	464b      	mov	r3, r9
 8107f88:	2b00      	cmp	r3, #0
 8107f8a:	bfbc      	itt	lt
 8107f8c:	232d      	movlt	r3, #45	; 0x2d
 8107f8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107f92:	487f      	ldr	r0, [pc, #508]	; (8108190 <_printf_float+0x2e8>)
 8107f94:	4b7f      	ldr	r3, [pc, #508]	; (8108194 <_printf_float+0x2ec>)
 8107f96:	e7d1      	b.n	8107f3c <_printf_float+0x94>
 8107f98:	6863      	ldr	r3, [r4, #4]
 8107f9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107f9e:	9206      	str	r2, [sp, #24]
 8107fa0:	1c5a      	adds	r2, r3, #1
 8107fa2:	d13f      	bne.n	8108024 <_printf_float+0x17c>
 8107fa4:	2306      	movs	r3, #6
 8107fa6:	6063      	str	r3, [r4, #4]
 8107fa8:	9b05      	ldr	r3, [sp, #20]
 8107faa:	6861      	ldr	r1, [r4, #4]
 8107fac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107fb0:	2300      	movs	r3, #0
 8107fb2:	9303      	str	r3, [sp, #12]
 8107fb4:	ab0a      	add	r3, sp, #40	; 0x28
 8107fb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107fba:	ab09      	add	r3, sp, #36	; 0x24
 8107fbc:	ec49 8b10 	vmov	d0, r8, r9
 8107fc0:	9300      	str	r3, [sp, #0]
 8107fc2:	6022      	str	r2, [r4, #0]
 8107fc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107fc8:	4628      	mov	r0, r5
 8107fca:	f7ff fecd 	bl	8107d68 <__cvt>
 8107fce:	9b06      	ldr	r3, [sp, #24]
 8107fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107fd2:	2b47      	cmp	r3, #71	; 0x47
 8107fd4:	4680      	mov	r8, r0
 8107fd6:	d108      	bne.n	8107fea <_printf_float+0x142>
 8107fd8:	1cc8      	adds	r0, r1, #3
 8107fda:	db02      	blt.n	8107fe2 <_printf_float+0x13a>
 8107fdc:	6863      	ldr	r3, [r4, #4]
 8107fde:	4299      	cmp	r1, r3
 8107fe0:	dd41      	ble.n	8108066 <_printf_float+0x1be>
 8107fe2:	f1ab 0b02 	sub.w	fp, fp, #2
 8107fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8107fea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107fee:	d820      	bhi.n	8108032 <_printf_float+0x18a>
 8107ff0:	3901      	subs	r1, #1
 8107ff2:	465a      	mov	r2, fp
 8107ff4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107ff8:	9109      	str	r1, [sp, #36]	; 0x24
 8107ffa:	f7ff ff17 	bl	8107e2c <__exponent>
 8107ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108000:	1813      	adds	r3, r2, r0
 8108002:	2a01      	cmp	r2, #1
 8108004:	4681      	mov	r9, r0
 8108006:	6123      	str	r3, [r4, #16]
 8108008:	dc02      	bgt.n	8108010 <_printf_float+0x168>
 810800a:	6822      	ldr	r2, [r4, #0]
 810800c:	07d2      	lsls	r2, r2, #31
 810800e:	d501      	bpl.n	8108014 <_printf_float+0x16c>
 8108010:	3301      	adds	r3, #1
 8108012:	6123      	str	r3, [r4, #16]
 8108014:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8108018:	2b00      	cmp	r3, #0
 810801a:	d09c      	beq.n	8107f56 <_printf_float+0xae>
 810801c:	232d      	movs	r3, #45	; 0x2d
 810801e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108022:	e798      	b.n	8107f56 <_printf_float+0xae>
 8108024:	9a06      	ldr	r2, [sp, #24]
 8108026:	2a47      	cmp	r2, #71	; 0x47
 8108028:	d1be      	bne.n	8107fa8 <_printf_float+0x100>
 810802a:	2b00      	cmp	r3, #0
 810802c:	d1bc      	bne.n	8107fa8 <_printf_float+0x100>
 810802e:	2301      	movs	r3, #1
 8108030:	e7b9      	b.n	8107fa6 <_printf_float+0xfe>
 8108032:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8108036:	d118      	bne.n	810806a <_printf_float+0x1c2>
 8108038:	2900      	cmp	r1, #0
 810803a:	6863      	ldr	r3, [r4, #4]
 810803c:	dd0b      	ble.n	8108056 <_printf_float+0x1ae>
 810803e:	6121      	str	r1, [r4, #16]
 8108040:	b913      	cbnz	r3, 8108048 <_printf_float+0x1a0>
 8108042:	6822      	ldr	r2, [r4, #0]
 8108044:	07d0      	lsls	r0, r2, #31
 8108046:	d502      	bpl.n	810804e <_printf_float+0x1a6>
 8108048:	3301      	adds	r3, #1
 810804a:	440b      	add	r3, r1
 810804c:	6123      	str	r3, [r4, #16]
 810804e:	65a1      	str	r1, [r4, #88]	; 0x58
 8108050:	f04f 0900 	mov.w	r9, #0
 8108054:	e7de      	b.n	8108014 <_printf_float+0x16c>
 8108056:	b913      	cbnz	r3, 810805e <_printf_float+0x1b6>
 8108058:	6822      	ldr	r2, [r4, #0]
 810805a:	07d2      	lsls	r2, r2, #31
 810805c:	d501      	bpl.n	8108062 <_printf_float+0x1ba>
 810805e:	3302      	adds	r3, #2
 8108060:	e7f4      	b.n	810804c <_printf_float+0x1a4>
 8108062:	2301      	movs	r3, #1
 8108064:	e7f2      	b.n	810804c <_printf_float+0x1a4>
 8108066:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810806c:	4299      	cmp	r1, r3
 810806e:	db05      	blt.n	810807c <_printf_float+0x1d4>
 8108070:	6823      	ldr	r3, [r4, #0]
 8108072:	6121      	str	r1, [r4, #16]
 8108074:	07d8      	lsls	r0, r3, #31
 8108076:	d5ea      	bpl.n	810804e <_printf_float+0x1a6>
 8108078:	1c4b      	adds	r3, r1, #1
 810807a:	e7e7      	b.n	810804c <_printf_float+0x1a4>
 810807c:	2900      	cmp	r1, #0
 810807e:	bfd4      	ite	le
 8108080:	f1c1 0202 	rsble	r2, r1, #2
 8108084:	2201      	movgt	r2, #1
 8108086:	4413      	add	r3, r2
 8108088:	e7e0      	b.n	810804c <_printf_float+0x1a4>
 810808a:	6823      	ldr	r3, [r4, #0]
 810808c:	055a      	lsls	r2, r3, #21
 810808e:	d407      	bmi.n	81080a0 <_printf_float+0x1f8>
 8108090:	6923      	ldr	r3, [r4, #16]
 8108092:	4642      	mov	r2, r8
 8108094:	4631      	mov	r1, r6
 8108096:	4628      	mov	r0, r5
 8108098:	47b8      	blx	r7
 810809a:	3001      	adds	r0, #1
 810809c:	d12c      	bne.n	81080f8 <_printf_float+0x250>
 810809e:	e764      	b.n	8107f6a <_printf_float+0xc2>
 81080a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81080a4:	f240 80e0 	bls.w	8108268 <_printf_float+0x3c0>
 81080a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81080ac:	2200      	movs	r2, #0
 81080ae:	2300      	movs	r3, #0
 81080b0:	f7f8 fd92 	bl	8100bd8 <__aeabi_dcmpeq>
 81080b4:	2800      	cmp	r0, #0
 81080b6:	d034      	beq.n	8108122 <_printf_float+0x27a>
 81080b8:	4a37      	ldr	r2, [pc, #220]	; (8108198 <_printf_float+0x2f0>)
 81080ba:	2301      	movs	r3, #1
 81080bc:	4631      	mov	r1, r6
 81080be:	4628      	mov	r0, r5
 81080c0:	47b8      	blx	r7
 81080c2:	3001      	adds	r0, #1
 81080c4:	f43f af51 	beq.w	8107f6a <_printf_float+0xc2>
 81080c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81080cc:	429a      	cmp	r2, r3
 81080ce:	db02      	blt.n	81080d6 <_printf_float+0x22e>
 81080d0:	6823      	ldr	r3, [r4, #0]
 81080d2:	07d8      	lsls	r0, r3, #31
 81080d4:	d510      	bpl.n	81080f8 <_printf_float+0x250>
 81080d6:	ee18 3a10 	vmov	r3, s16
 81080da:	4652      	mov	r2, sl
 81080dc:	4631      	mov	r1, r6
 81080de:	4628      	mov	r0, r5
 81080e0:	47b8      	blx	r7
 81080e2:	3001      	adds	r0, #1
 81080e4:	f43f af41 	beq.w	8107f6a <_printf_float+0xc2>
 81080e8:	f04f 0800 	mov.w	r8, #0
 81080ec:	f104 091a 	add.w	r9, r4, #26
 81080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81080f2:	3b01      	subs	r3, #1
 81080f4:	4543      	cmp	r3, r8
 81080f6:	dc09      	bgt.n	810810c <_printf_float+0x264>
 81080f8:	6823      	ldr	r3, [r4, #0]
 81080fa:	079b      	lsls	r3, r3, #30
 81080fc:	f100 8105 	bmi.w	810830a <_printf_float+0x462>
 8108100:	68e0      	ldr	r0, [r4, #12]
 8108102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108104:	4298      	cmp	r0, r3
 8108106:	bfb8      	it	lt
 8108108:	4618      	movlt	r0, r3
 810810a:	e730      	b.n	8107f6e <_printf_float+0xc6>
 810810c:	2301      	movs	r3, #1
 810810e:	464a      	mov	r2, r9
 8108110:	4631      	mov	r1, r6
 8108112:	4628      	mov	r0, r5
 8108114:	47b8      	blx	r7
 8108116:	3001      	adds	r0, #1
 8108118:	f43f af27 	beq.w	8107f6a <_printf_float+0xc2>
 810811c:	f108 0801 	add.w	r8, r8, #1
 8108120:	e7e6      	b.n	81080f0 <_printf_float+0x248>
 8108122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108124:	2b00      	cmp	r3, #0
 8108126:	dc39      	bgt.n	810819c <_printf_float+0x2f4>
 8108128:	4a1b      	ldr	r2, [pc, #108]	; (8108198 <_printf_float+0x2f0>)
 810812a:	2301      	movs	r3, #1
 810812c:	4631      	mov	r1, r6
 810812e:	4628      	mov	r0, r5
 8108130:	47b8      	blx	r7
 8108132:	3001      	adds	r0, #1
 8108134:	f43f af19 	beq.w	8107f6a <_printf_float+0xc2>
 8108138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810813c:	4313      	orrs	r3, r2
 810813e:	d102      	bne.n	8108146 <_printf_float+0x29e>
 8108140:	6823      	ldr	r3, [r4, #0]
 8108142:	07d9      	lsls	r1, r3, #31
 8108144:	d5d8      	bpl.n	81080f8 <_printf_float+0x250>
 8108146:	ee18 3a10 	vmov	r3, s16
 810814a:	4652      	mov	r2, sl
 810814c:	4631      	mov	r1, r6
 810814e:	4628      	mov	r0, r5
 8108150:	47b8      	blx	r7
 8108152:	3001      	adds	r0, #1
 8108154:	f43f af09 	beq.w	8107f6a <_printf_float+0xc2>
 8108158:	f04f 0900 	mov.w	r9, #0
 810815c:	f104 0a1a 	add.w	sl, r4, #26
 8108160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108162:	425b      	negs	r3, r3
 8108164:	454b      	cmp	r3, r9
 8108166:	dc01      	bgt.n	810816c <_printf_float+0x2c4>
 8108168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810816a:	e792      	b.n	8108092 <_printf_float+0x1ea>
 810816c:	2301      	movs	r3, #1
 810816e:	4652      	mov	r2, sl
 8108170:	4631      	mov	r1, r6
 8108172:	4628      	mov	r0, r5
 8108174:	47b8      	blx	r7
 8108176:	3001      	adds	r0, #1
 8108178:	f43f aef7 	beq.w	8107f6a <_printf_float+0xc2>
 810817c:	f109 0901 	add.w	r9, r9, #1
 8108180:	e7ee      	b.n	8108160 <_printf_float+0x2b8>
 8108182:	bf00      	nop
 8108184:	7fefffff 	.word	0x7fefffff
 8108188:	0810a71c 	.word	0x0810a71c
 810818c:	0810a720 	.word	0x0810a720
 8108190:	0810a728 	.word	0x0810a728
 8108194:	0810a724 	.word	0x0810a724
 8108198:	0810a72c 	.word	0x0810a72c
 810819c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810819e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81081a0:	429a      	cmp	r2, r3
 81081a2:	bfa8      	it	ge
 81081a4:	461a      	movge	r2, r3
 81081a6:	2a00      	cmp	r2, #0
 81081a8:	4691      	mov	r9, r2
 81081aa:	dc37      	bgt.n	810821c <_printf_float+0x374>
 81081ac:	f04f 0b00 	mov.w	fp, #0
 81081b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81081b4:	f104 021a 	add.w	r2, r4, #26
 81081b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81081ba:	9305      	str	r3, [sp, #20]
 81081bc:	eba3 0309 	sub.w	r3, r3, r9
 81081c0:	455b      	cmp	r3, fp
 81081c2:	dc33      	bgt.n	810822c <_printf_float+0x384>
 81081c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81081c8:	429a      	cmp	r2, r3
 81081ca:	db3b      	blt.n	8108244 <_printf_float+0x39c>
 81081cc:	6823      	ldr	r3, [r4, #0]
 81081ce:	07da      	lsls	r2, r3, #31
 81081d0:	d438      	bmi.n	8108244 <_printf_float+0x39c>
 81081d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81081d4:	9b05      	ldr	r3, [sp, #20]
 81081d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 81081d8:	1ad3      	subs	r3, r2, r3
 81081da:	eba2 0901 	sub.w	r9, r2, r1
 81081de:	4599      	cmp	r9, r3
 81081e0:	bfa8      	it	ge
 81081e2:	4699      	movge	r9, r3
 81081e4:	f1b9 0f00 	cmp.w	r9, #0
 81081e8:	dc35      	bgt.n	8108256 <_printf_float+0x3ae>
 81081ea:	f04f 0800 	mov.w	r8, #0
 81081ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81081f2:	f104 0a1a 	add.w	sl, r4, #26
 81081f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81081fa:	1a9b      	subs	r3, r3, r2
 81081fc:	eba3 0309 	sub.w	r3, r3, r9
 8108200:	4543      	cmp	r3, r8
 8108202:	f77f af79 	ble.w	81080f8 <_printf_float+0x250>
 8108206:	2301      	movs	r3, #1
 8108208:	4652      	mov	r2, sl
 810820a:	4631      	mov	r1, r6
 810820c:	4628      	mov	r0, r5
 810820e:	47b8      	blx	r7
 8108210:	3001      	adds	r0, #1
 8108212:	f43f aeaa 	beq.w	8107f6a <_printf_float+0xc2>
 8108216:	f108 0801 	add.w	r8, r8, #1
 810821a:	e7ec      	b.n	81081f6 <_printf_float+0x34e>
 810821c:	4613      	mov	r3, r2
 810821e:	4631      	mov	r1, r6
 8108220:	4642      	mov	r2, r8
 8108222:	4628      	mov	r0, r5
 8108224:	47b8      	blx	r7
 8108226:	3001      	adds	r0, #1
 8108228:	d1c0      	bne.n	81081ac <_printf_float+0x304>
 810822a:	e69e      	b.n	8107f6a <_printf_float+0xc2>
 810822c:	2301      	movs	r3, #1
 810822e:	4631      	mov	r1, r6
 8108230:	4628      	mov	r0, r5
 8108232:	9205      	str	r2, [sp, #20]
 8108234:	47b8      	blx	r7
 8108236:	3001      	adds	r0, #1
 8108238:	f43f ae97 	beq.w	8107f6a <_printf_float+0xc2>
 810823c:	9a05      	ldr	r2, [sp, #20]
 810823e:	f10b 0b01 	add.w	fp, fp, #1
 8108242:	e7b9      	b.n	81081b8 <_printf_float+0x310>
 8108244:	ee18 3a10 	vmov	r3, s16
 8108248:	4652      	mov	r2, sl
 810824a:	4631      	mov	r1, r6
 810824c:	4628      	mov	r0, r5
 810824e:	47b8      	blx	r7
 8108250:	3001      	adds	r0, #1
 8108252:	d1be      	bne.n	81081d2 <_printf_float+0x32a>
 8108254:	e689      	b.n	8107f6a <_printf_float+0xc2>
 8108256:	9a05      	ldr	r2, [sp, #20]
 8108258:	464b      	mov	r3, r9
 810825a:	4442      	add	r2, r8
 810825c:	4631      	mov	r1, r6
 810825e:	4628      	mov	r0, r5
 8108260:	47b8      	blx	r7
 8108262:	3001      	adds	r0, #1
 8108264:	d1c1      	bne.n	81081ea <_printf_float+0x342>
 8108266:	e680      	b.n	8107f6a <_printf_float+0xc2>
 8108268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810826a:	2a01      	cmp	r2, #1
 810826c:	dc01      	bgt.n	8108272 <_printf_float+0x3ca>
 810826e:	07db      	lsls	r3, r3, #31
 8108270:	d538      	bpl.n	81082e4 <_printf_float+0x43c>
 8108272:	2301      	movs	r3, #1
 8108274:	4642      	mov	r2, r8
 8108276:	4631      	mov	r1, r6
 8108278:	4628      	mov	r0, r5
 810827a:	47b8      	blx	r7
 810827c:	3001      	adds	r0, #1
 810827e:	f43f ae74 	beq.w	8107f6a <_printf_float+0xc2>
 8108282:	ee18 3a10 	vmov	r3, s16
 8108286:	4652      	mov	r2, sl
 8108288:	4631      	mov	r1, r6
 810828a:	4628      	mov	r0, r5
 810828c:	47b8      	blx	r7
 810828e:	3001      	adds	r0, #1
 8108290:	f43f ae6b 	beq.w	8107f6a <_printf_float+0xc2>
 8108294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108298:	2200      	movs	r2, #0
 810829a:	2300      	movs	r3, #0
 810829c:	f7f8 fc9c 	bl	8100bd8 <__aeabi_dcmpeq>
 81082a0:	b9d8      	cbnz	r0, 81082da <_printf_float+0x432>
 81082a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81082a4:	f108 0201 	add.w	r2, r8, #1
 81082a8:	3b01      	subs	r3, #1
 81082aa:	4631      	mov	r1, r6
 81082ac:	4628      	mov	r0, r5
 81082ae:	47b8      	blx	r7
 81082b0:	3001      	adds	r0, #1
 81082b2:	d10e      	bne.n	81082d2 <_printf_float+0x42a>
 81082b4:	e659      	b.n	8107f6a <_printf_float+0xc2>
 81082b6:	2301      	movs	r3, #1
 81082b8:	4652      	mov	r2, sl
 81082ba:	4631      	mov	r1, r6
 81082bc:	4628      	mov	r0, r5
 81082be:	47b8      	blx	r7
 81082c0:	3001      	adds	r0, #1
 81082c2:	f43f ae52 	beq.w	8107f6a <_printf_float+0xc2>
 81082c6:	f108 0801 	add.w	r8, r8, #1
 81082ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81082cc:	3b01      	subs	r3, #1
 81082ce:	4543      	cmp	r3, r8
 81082d0:	dcf1      	bgt.n	81082b6 <_printf_float+0x40e>
 81082d2:	464b      	mov	r3, r9
 81082d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81082d8:	e6dc      	b.n	8108094 <_printf_float+0x1ec>
 81082da:	f04f 0800 	mov.w	r8, #0
 81082de:	f104 0a1a 	add.w	sl, r4, #26
 81082e2:	e7f2      	b.n	81082ca <_printf_float+0x422>
 81082e4:	2301      	movs	r3, #1
 81082e6:	4642      	mov	r2, r8
 81082e8:	e7df      	b.n	81082aa <_printf_float+0x402>
 81082ea:	2301      	movs	r3, #1
 81082ec:	464a      	mov	r2, r9
 81082ee:	4631      	mov	r1, r6
 81082f0:	4628      	mov	r0, r5
 81082f2:	47b8      	blx	r7
 81082f4:	3001      	adds	r0, #1
 81082f6:	f43f ae38 	beq.w	8107f6a <_printf_float+0xc2>
 81082fa:	f108 0801 	add.w	r8, r8, #1
 81082fe:	68e3      	ldr	r3, [r4, #12]
 8108300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8108302:	1a5b      	subs	r3, r3, r1
 8108304:	4543      	cmp	r3, r8
 8108306:	dcf0      	bgt.n	81082ea <_printf_float+0x442>
 8108308:	e6fa      	b.n	8108100 <_printf_float+0x258>
 810830a:	f04f 0800 	mov.w	r8, #0
 810830e:	f104 0919 	add.w	r9, r4, #25
 8108312:	e7f4      	b.n	81082fe <_printf_float+0x456>

08108314 <_printf_common>:
 8108314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108318:	4616      	mov	r6, r2
 810831a:	4699      	mov	r9, r3
 810831c:	688a      	ldr	r2, [r1, #8]
 810831e:	690b      	ldr	r3, [r1, #16]
 8108320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108324:	4293      	cmp	r3, r2
 8108326:	bfb8      	it	lt
 8108328:	4613      	movlt	r3, r2
 810832a:	6033      	str	r3, [r6, #0]
 810832c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108330:	4607      	mov	r7, r0
 8108332:	460c      	mov	r4, r1
 8108334:	b10a      	cbz	r2, 810833a <_printf_common+0x26>
 8108336:	3301      	adds	r3, #1
 8108338:	6033      	str	r3, [r6, #0]
 810833a:	6823      	ldr	r3, [r4, #0]
 810833c:	0699      	lsls	r1, r3, #26
 810833e:	bf42      	ittt	mi
 8108340:	6833      	ldrmi	r3, [r6, #0]
 8108342:	3302      	addmi	r3, #2
 8108344:	6033      	strmi	r3, [r6, #0]
 8108346:	6825      	ldr	r5, [r4, #0]
 8108348:	f015 0506 	ands.w	r5, r5, #6
 810834c:	d106      	bne.n	810835c <_printf_common+0x48>
 810834e:	f104 0a19 	add.w	sl, r4, #25
 8108352:	68e3      	ldr	r3, [r4, #12]
 8108354:	6832      	ldr	r2, [r6, #0]
 8108356:	1a9b      	subs	r3, r3, r2
 8108358:	42ab      	cmp	r3, r5
 810835a:	dc26      	bgt.n	81083aa <_printf_common+0x96>
 810835c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108360:	1e13      	subs	r3, r2, #0
 8108362:	6822      	ldr	r2, [r4, #0]
 8108364:	bf18      	it	ne
 8108366:	2301      	movne	r3, #1
 8108368:	0692      	lsls	r2, r2, #26
 810836a:	d42b      	bmi.n	81083c4 <_printf_common+0xb0>
 810836c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108370:	4649      	mov	r1, r9
 8108372:	4638      	mov	r0, r7
 8108374:	47c0      	blx	r8
 8108376:	3001      	adds	r0, #1
 8108378:	d01e      	beq.n	81083b8 <_printf_common+0xa4>
 810837a:	6823      	ldr	r3, [r4, #0]
 810837c:	68e5      	ldr	r5, [r4, #12]
 810837e:	6832      	ldr	r2, [r6, #0]
 8108380:	f003 0306 	and.w	r3, r3, #6
 8108384:	2b04      	cmp	r3, #4
 8108386:	bf08      	it	eq
 8108388:	1aad      	subeq	r5, r5, r2
 810838a:	68a3      	ldr	r3, [r4, #8]
 810838c:	6922      	ldr	r2, [r4, #16]
 810838e:	bf0c      	ite	eq
 8108390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108394:	2500      	movne	r5, #0
 8108396:	4293      	cmp	r3, r2
 8108398:	bfc4      	itt	gt
 810839a:	1a9b      	subgt	r3, r3, r2
 810839c:	18ed      	addgt	r5, r5, r3
 810839e:	2600      	movs	r6, #0
 81083a0:	341a      	adds	r4, #26
 81083a2:	42b5      	cmp	r5, r6
 81083a4:	d11a      	bne.n	81083dc <_printf_common+0xc8>
 81083a6:	2000      	movs	r0, #0
 81083a8:	e008      	b.n	81083bc <_printf_common+0xa8>
 81083aa:	2301      	movs	r3, #1
 81083ac:	4652      	mov	r2, sl
 81083ae:	4649      	mov	r1, r9
 81083b0:	4638      	mov	r0, r7
 81083b2:	47c0      	blx	r8
 81083b4:	3001      	adds	r0, #1
 81083b6:	d103      	bne.n	81083c0 <_printf_common+0xac>
 81083b8:	f04f 30ff 	mov.w	r0, #4294967295
 81083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81083c0:	3501      	adds	r5, #1
 81083c2:	e7c6      	b.n	8108352 <_printf_common+0x3e>
 81083c4:	18e1      	adds	r1, r4, r3
 81083c6:	1c5a      	adds	r2, r3, #1
 81083c8:	2030      	movs	r0, #48	; 0x30
 81083ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81083ce:	4422      	add	r2, r4
 81083d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81083d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81083d8:	3302      	adds	r3, #2
 81083da:	e7c7      	b.n	810836c <_printf_common+0x58>
 81083dc:	2301      	movs	r3, #1
 81083de:	4622      	mov	r2, r4
 81083e0:	4649      	mov	r1, r9
 81083e2:	4638      	mov	r0, r7
 81083e4:	47c0      	blx	r8
 81083e6:	3001      	adds	r0, #1
 81083e8:	d0e6      	beq.n	81083b8 <_printf_common+0xa4>
 81083ea:	3601      	adds	r6, #1
 81083ec:	e7d9      	b.n	81083a2 <_printf_common+0x8e>
	...

081083f0 <_printf_i>:
 81083f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81083f4:	460c      	mov	r4, r1
 81083f6:	4691      	mov	r9, r2
 81083f8:	7e27      	ldrb	r7, [r4, #24]
 81083fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 81083fc:	2f78      	cmp	r7, #120	; 0x78
 81083fe:	4680      	mov	r8, r0
 8108400:	469a      	mov	sl, r3
 8108402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108406:	d807      	bhi.n	8108418 <_printf_i+0x28>
 8108408:	2f62      	cmp	r7, #98	; 0x62
 810840a:	d80a      	bhi.n	8108422 <_printf_i+0x32>
 810840c:	2f00      	cmp	r7, #0
 810840e:	f000 80d8 	beq.w	81085c2 <_printf_i+0x1d2>
 8108412:	2f58      	cmp	r7, #88	; 0x58
 8108414:	f000 80a3 	beq.w	810855e <_printf_i+0x16e>
 8108418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810841c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108420:	e03a      	b.n	8108498 <_printf_i+0xa8>
 8108422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108426:	2b15      	cmp	r3, #21
 8108428:	d8f6      	bhi.n	8108418 <_printf_i+0x28>
 810842a:	a001      	add	r0, pc, #4	; (adr r0, 8108430 <_printf_i+0x40>)
 810842c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8108430:	08108489 	.word	0x08108489
 8108434:	0810849d 	.word	0x0810849d
 8108438:	08108419 	.word	0x08108419
 810843c:	08108419 	.word	0x08108419
 8108440:	08108419 	.word	0x08108419
 8108444:	08108419 	.word	0x08108419
 8108448:	0810849d 	.word	0x0810849d
 810844c:	08108419 	.word	0x08108419
 8108450:	08108419 	.word	0x08108419
 8108454:	08108419 	.word	0x08108419
 8108458:	08108419 	.word	0x08108419
 810845c:	081085a9 	.word	0x081085a9
 8108460:	081084cd 	.word	0x081084cd
 8108464:	0810858b 	.word	0x0810858b
 8108468:	08108419 	.word	0x08108419
 810846c:	08108419 	.word	0x08108419
 8108470:	081085cb 	.word	0x081085cb
 8108474:	08108419 	.word	0x08108419
 8108478:	081084cd 	.word	0x081084cd
 810847c:	08108419 	.word	0x08108419
 8108480:	08108419 	.word	0x08108419
 8108484:	08108593 	.word	0x08108593
 8108488:	680b      	ldr	r3, [r1, #0]
 810848a:	1d1a      	adds	r2, r3, #4
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	600a      	str	r2, [r1, #0]
 8108490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8108494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108498:	2301      	movs	r3, #1
 810849a:	e0a3      	b.n	81085e4 <_printf_i+0x1f4>
 810849c:	6825      	ldr	r5, [r4, #0]
 810849e:	6808      	ldr	r0, [r1, #0]
 81084a0:	062e      	lsls	r6, r5, #24
 81084a2:	f100 0304 	add.w	r3, r0, #4
 81084a6:	d50a      	bpl.n	81084be <_printf_i+0xce>
 81084a8:	6805      	ldr	r5, [r0, #0]
 81084aa:	600b      	str	r3, [r1, #0]
 81084ac:	2d00      	cmp	r5, #0
 81084ae:	da03      	bge.n	81084b8 <_printf_i+0xc8>
 81084b0:	232d      	movs	r3, #45	; 0x2d
 81084b2:	426d      	negs	r5, r5
 81084b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81084b8:	485e      	ldr	r0, [pc, #376]	; (8108634 <_printf_i+0x244>)
 81084ba:	230a      	movs	r3, #10
 81084bc:	e019      	b.n	81084f2 <_printf_i+0x102>
 81084be:	f015 0f40 	tst.w	r5, #64	; 0x40
 81084c2:	6805      	ldr	r5, [r0, #0]
 81084c4:	600b      	str	r3, [r1, #0]
 81084c6:	bf18      	it	ne
 81084c8:	b22d      	sxthne	r5, r5
 81084ca:	e7ef      	b.n	81084ac <_printf_i+0xbc>
 81084cc:	680b      	ldr	r3, [r1, #0]
 81084ce:	6825      	ldr	r5, [r4, #0]
 81084d0:	1d18      	adds	r0, r3, #4
 81084d2:	6008      	str	r0, [r1, #0]
 81084d4:	0628      	lsls	r0, r5, #24
 81084d6:	d501      	bpl.n	81084dc <_printf_i+0xec>
 81084d8:	681d      	ldr	r5, [r3, #0]
 81084da:	e002      	b.n	81084e2 <_printf_i+0xf2>
 81084dc:	0669      	lsls	r1, r5, #25
 81084de:	d5fb      	bpl.n	81084d8 <_printf_i+0xe8>
 81084e0:	881d      	ldrh	r5, [r3, #0]
 81084e2:	4854      	ldr	r0, [pc, #336]	; (8108634 <_printf_i+0x244>)
 81084e4:	2f6f      	cmp	r7, #111	; 0x6f
 81084e6:	bf0c      	ite	eq
 81084e8:	2308      	moveq	r3, #8
 81084ea:	230a      	movne	r3, #10
 81084ec:	2100      	movs	r1, #0
 81084ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81084f2:	6866      	ldr	r6, [r4, #4]
 81084f4:	60a6      	str	r6, [r4, #8]
 81084f6:	2e00      	cmp	r6, #0
 81084f8:	bfa2      	ittt	ge
 81084fa:	6821      	ldrge	r1, [r4, #0]
 81084fc:	f021 0104 	bicge.w	r1, r1, #4
 8108500:	6021      	strge	r1, [r4, #0]
 8108502:	b90d      	cbnz	r5, 8108508 <_printf_i+0x118>
 8108504:	2e00      	cmp	r6, #0
 8108506:	d04d      	beq.n	81085a4 <_printf_i+0x1b4>
 8108508:	4616      	mov	r6, r2
 810850a:	fbb5 f1f3 	udiv	r1, r5, r3
 810850e:	fb03 5711 	mls	r7, r3, r1, r5
 8108512:	5dc7      	ldrb	r7, [r0, r7]
 8108514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8108518:	462f      	mov	r7, r5
 810851a:	42bb      	cmp	r3, r7
 810851c:	460d      	mov	r5, r1
 810851e:	d9f4      	bls.n	810850a <_printf_i+0x11a>
 8108520:	2b08      	cmp	r3, #8
 8108522:	d10b      	bne.n	810853c <_printf_i+0x14c>
 8108524:	6823      	ldr	r3, [r4, #0]
 8108526:	07df      	lsls	r7, r3, #31
 8108528:	d508      	bpl.n	810853c <_printf_i+0x14c>
 810852a:	6923      	ldr	r3, [r4, #16]
 810852c:	6861      	ldr	r1, [r4, #4]
 810852e:	4299      	cmp	r1, r3
 8108530:	bfde      	ittt	le
 8108532:	2330      	movle	r3, #48	; 0x30
 8108534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8108538:	f106 36ff 	addle.w	r6, r6, #4294967295
 810853c:	1b92      	subs	r2, r2, r6
 810853e:	6122      	str	r2, [r4, #16]
 8108540:	f8cd a000 	str.w	sl, [sp]
 8108544:	464b      	mov	r3, r9
 8108546:	aa03      	add	r2, sp, #12
 8108548:	4621      	mov	r1, r4
 810854a:	4640      	mov	r0, r8
 810854c:	f7ff fee2 	bl	8108314 <_printf_common>
 8108550:	3001      	adds	r0, #1
 8108552:	d14c      	bne.n	81085ee <_printf_i+0x1fe>
 8108554:	f04f 30ff 	mov.w	r0, #4294967295
 8108558:	b004      	add	sp, #16
 810855a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810855e:	4835      	ldr	r0, [pc, #212]	; (8108634 <_printf_i+0x244>)
 8108560:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8108564:	6823      	ldr	r3, [r4, #0]
 8108566:	680e      	ldr	r6, [r1, #0]
 8108568:	061f      	lsls	r7, r3, #24
 810856a:	f856 5b04 	ldr.w	r5, [r6], #4
 810856e:	600e      	str	r6, [r1, #0]
 8108570:	d514      	bpl.n	810859c <_printf_i+0x1ac>
 8108572:	07d9      	lsls	r1, r3, #31
 8108574:	bf44      	itt	mi
 8108576:	f043 0320 	orrmi.w	r3, r3, #32
 810857a:	6023      	strmi	r3, [r4, #0]
 810857c:	b91d      	cbnz	r5, 8108586 <_printf_i+0x196>
 810857e:	6823      	ldr	r3, [r4, #0]
 8108580:	f023 0320 	bic.w	r3, r3, #32
 8108584:	6023      	str	r3, [r4, #0]
 8108586:	2310      	movs	r3, #16
 8108588:	e7b0      	b.n	81084ec <_printf_i+0xfc>
 810858a:	6823      	ldr	r3, [r4, #0]
 810858c:	f043 0320 	orr.w	r3, r3, #32
 8108590:	6023      	str	r3, [r4, #0]
 8108592:	2378      	movs	r3, #120	; 0x78
 8108594:	4828      	ldr	r0, [pc, #160]	; (8108638 <_printf_i+0x248>)
 8108596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810859a:	e7e3      	b.n	8108564 <_printf_i+0x174>
 810859c:	065e      	lsls	r6, r3, #25
 810859e:	bf48      	it	mi
 81085a0:	b2ad      	uxthmi	r5, r5
 81085a2:	e7e6      	b.n	8108572 <_printf_i+0x182>
 81085a4:	4616      	mov	r6, r2
 81085a6:	e7bb      	b.n	8108520 <_printf_i+0x130>
 81085a8:	680b      	ldr	r3, [r1, #0]
 81085aa:	6826      	ldr	r6, [r4, #0]
 81085ac:	6960      	ldr	r0, [r4, #20]
 81085ae:	1d1d      	adds	r5, r3, #4
 81085b0:	600d      	str	r5, [r1, #0]
 81085b2:	0635      	lsls	r5, r6, #24
 81085b4:	681b      	ldr	r3, [r3, #0]
 81085b6:	d501      	bpl.n	81085bc <_printf_i+0x1cc>
 81085b8:	6018      	str	r0, [r3, #0]
 81085ba:	e002      	b.n	81085c2 <_printf_i+0x1d2>
 81085bc:	0671      	lsls	r1, r6, #25
 81085be:	d5fb      	bpl.n	81085b8 <_printf_i+0x1c8>
 81085c0:	8018      	strh	r0, [r3, #0]
 81085c2:	2300      	movs	r3, #0
 81085c4:	6123      	str	r3, [r4, #16]
 81085c6:	4616      	mov	r6, r2
 81085c8:	e7ba      	b.n	8108540 <_printf_i+0x150>
 81085ca:	680b      	ldr	r3, [r1, #0]
 81085cc:	1d1a      	adds	r2, r3, #4
 81085ce:	600a      	str	r2, [r1, #0]
 81085d0:	681e      	ldr	r6, [r3, #0]
 81085d2:	6862      	ldr	r2, [r4, #4]
 81085d4:	2100      	movs	r1, #0
 81085d6:	4630      	mov	r0, r6
 81085d8:	f7f7 fe8a 	bl	81002f0 <memchr>
 81085dc:	b108      	cbz	r0, 81085e2 <_printf_i+0x1f2>
 81085de:	1b80      	subs	r0, r0, r6
 81085e0:	6060      	str	r0, [r4, #4]
 81085e2:	6863      	ldr	r3, [r4, #4]
 81085e4:	6123      	str	r3, [r4, #16]
 81085e6:	2300      	movs	r3, #0
 81085e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81085ec:	e7a8      	b.n	8108540 <_printf_i+0x150>
 81085ee:	6923      	ldr	r3, [r4, #16]
 81085f0:	4632      	mov	r2, r6
 81085f2:	4649      	mov	r1, r9
 81085f4:	4640      	mov	r0, r8
 81085f6:	47d0      	blx	sl
 81085f8:	3001      	adds	r0, #1
 81085fa:	d0ab      	beq.n	8108554 <_printf_i+0x164>
 81085fc:	6823      	ldr	r3, [r4, #0]
 81085fe:	079b      	lsls	r3, r3, #30
 8108600:	d413      	bmi.n	810862a <_printf_i+0x23a>
 8108602:	68e0      	ldr	r0, [r4, #12]
 8108604:	9b03      	ldr	r3, [sp, #12]
 8108606:	4298      	cmp	r0, r3
 8108608:	bfb8      	it	lt
 810860a:	4618      	movlt	r0, r3
 810860c:	e7a4      	b.n	8108558 <_printf_i+0x168>
 810860e:	2301      	movs	r3, #1
 8108610:	4632      	mov	r2, r6
 8108612:	4649      	mov	r1, r9
 8108614:	4640      	mov	r0, r8
 8108616:	47d0      	blx	sl
 8108618:	3001      	adds	r0, #1
 810861a:	d09b      	beq.n	8108554 <_printf_i+0x164>
 810861c:	3501      	adds	r5, #1
 810861e:	68e3      	ldr	r3, [r4, #12]
 8108620:	9903      	ldr	r1, [sp, #12]
 8108622:	1a5b      	subs	r3, r3, r1
 8108624:	42ab      	cmp	r3, r5
 8108626:	dcf2      	bgt.n	810860e <_printf_i+0x21e>
 8108628:	e7eb      	b.n	8108602 <_printf_i+0x212>
 810862a:	2500      	movs	r5, #0
 810862c:	f104 0619 	add.w	r6, r4, #25
 8108630:	e7f5      	b.n	810861e <_printf_i+0x22e>
 8108632:	bf00      	nop
 8108634:	0810a72e 	.word	0x0810a72e
 8108638:	0810a73f 	.word	0x0810a73f

0810863c <quorem>:
 810863c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108640:	6903      	ldr	r3, [r0, #16]
 8108642:	690c      	ldr	r4, [r1, #16]
 8108644:	42a3      	cmp	r3, r4
 8108646:	4607      	mov	r7, r0
 8108648:	f2c0 8081 	blt.w	810874e <quorem+0x112>
 810864c:	3c01      	subs	r4, #1
 810864e:	f101 0814 	add.w	r8, r1, #20
 8108652:	f100 0514 	add.w	r5, r0, #20
 8108656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810865a:	9301      	str	r3, [sp, #4]
 810865c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108664:	3301      	adds	r3, #1
 8108666:	429a      	cmp	r2, r3
 8108668:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810866c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108670:	fbb2 f6f3 	udiv	r6, r2, r3
 8108674:	d331      	bcc.n	81086da <quorem+0x9e>
 8108676:	f04f 0e00 	mov.w	lr, #0
 810867a:	4640      	mov	r0, r8
 810867c:	46ac      	mov	ip, r5
 810867e:	46f2      	mov	sl, lr
 8108680:	f850 2b04 	ldr.w	r2, [r0], #4
 8108684:	b293      	uxth	r3, r2
 8108686:	fb06 e303 	mla	r3, r6, r3, lr
 810868a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810868e:	b29b      	uxth	r3, r3
 8108690:	ebaa 0303 	sub.w	r3, sl, r3
 8108694:	0c12      	lsrs	r2, r2, #16
 8108696:	f8dc a000 	ldr.w	sl, [ip]
 810869a:	fb06 e202 	mla	r2, r6, r2, lr
 810869e:	fa13 f38a 	uxtah	r3, r3, sl
 81086a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81086a6:	fa1f fa82 	uxth.w	sl, r2
 81086aa:	f8dc 2000 	ldr.w	r2, [ip]
 81086ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81086b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81086b6:	b29b      	uxth	r3, r3
 81086b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81086bc:	4581      	cmp	r9, r0
 81086be:	f84c 3b04 	str.w	r3, [ip], #4
 81086c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81086c6:	d2db      	bcs.n	8108680 <quorem+0x44>
 81086c8:	f855 300b 	ldr.w	r3, [r5, fp]
 81086cc:	b92b      	cbnz	r3, 81086da <quorem+0x9e>
 81086ce:	9b01      	ldr	r3, [sp, #4]
 81086d0:	3b04      	subs	r3, #4
 81086d2:	429d      	cmp	r5, r3
 81086d4:	461a      	mov	r2, r3
 81086d6:	d32e      	bcc.n	8108736 <quorem+0xfa>
 81086d8:	613c      	str	r4, [r7, #16]
 81086da:	4638      	mov	r0, r7
 81086dc:	f001 f8b2 	bl	8109844 <__mcmp>
 81086e0:	2800      	cmp	r0, #0
 81086e2:	db24      	blt.n	810872e <quorem+0xf2>
 81086e4:	3601      	adds	r6, #1
 81086e6:	4628      	mov	r0, r5
 81086e8:	f04f 0c00 	mov.w	ip, #0
 81086ec:	f858 2b04 	ldr.w	r2, [r8], #4
 81086f0:	f8d0 e000 	ldr.w	lr, [r0]
 81086f4:	b293      	uxth	r3, r2
 81086f6:	ebac 0303 	sub.w	r3, ip, r3
 81086fa:	0c12      	lsrs	r2, r2, #16
 81086fc:	fa13 f38e 	uxtah	r3, r3, lr
 8108700:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108708:	b29b      	uxth	r3, r3
 810870a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810870e:	45c1      	cmp	r9, r8
 8108710:	f840 3b04 	str.w	r3, [r0], #4
 8108714:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8108718:	d2e8      	bcs.n	81086ec <quorem+0xb0>
 810871a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810871e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108722:	b922      	cbnz	r2, 810872e <quorem+0xf2>
 8108724:	3b04      	subs	r3, #4
 8108726:	429d      	cmp	r5, r3
 8108728:	461a      	mov	r2, r3
 810872a:	d30a      	bcc.n	8108742 <quorem+0x106>
 810872c:	613c      	str	r4, [r7, #16]
 810872e:	4630      	mov	r0, r6
 8108730:	b003      	add	sp, #12
 8108732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108736:	6812      	ldr	r2, [r2, #0]
 8108738:	3b04      	subs	r3, #4
 810873a:	2a00      	cmp	r2, #0
 810873c:	d1cc      	bne.n	81086d8 <quorem+0x9c>
 810873e:	3c01      	subs	r4, #1
 8108740:	e7c7      	b.n	81086d2 <quorem+0x96>
 8108742:	6812      	ldr	r2, [r2, #0]
 8108744:	3b04      	subs	r3, #4
 8108746:	2a00      	cmp	r2, #0
 8108748:	d1f0      	bne.n	810872c <quorem+0xf0>
 810874a:	3c01      	subs	r4, #1
 810874c:	e7eb      	b.n	8108726 <quorem+0xea>
 810874e:	2000      	movs	r0, #0
 8108750:	e7ee      	b.n	8108730 <quorem+0xf4>
 8108752:	0000      	movs	r0, r0
 8108754:	0000      	movs	r0, r0
	...

08108758 <_dtoa_r>:
 8108758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810875c:	ed2d 8b02 	vpush	{d8}
 8108760:	ec57 6b10 	vmov	r6, r7, d0
 8108764:	b095      	sub	sp, #84	; 0x54
 8108766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810876c:	9105      	str	r1, [sp, #20]
 810876e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8108772:	4604      	mov	r4, r0
 8108774:	9209      	str	r2, [sp, #36]	; 0x24
 8108776:	930f      	str	r3, [sp, #60]	; 0x3c
 8108778:	b975      	cbnz	r5, 8108798 <_dtoa_r+0x40>
 810877a:	2010      	movs	r0, #16
 810877c:	f000 fddc 	bl	8109338 <malloc>
 8108780:	4602      	mov	r2, r0
 8108782:	6260      	str	r0, [r4, #36]	; 0x24
 8108784:	b920      	cbnz	r0, 8108790 <_dtoa_r+0x38>
 8108786:	4bb2      	ldr	r3, [pc, #712]	; (8108a50 <_dtoa_r+0x2f8>)
 8108788:	21ea      	movs	r1, #234	; 0xea
 810878a:	48b2      	ldr	r0, [pc, #712]	; (8108a54 <_dtoa_r+0x2fc>)
 810878c:	f001 fa24 	bl	8109bd8 <__assert_func>
 8108790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8108794:	6005      	str	r5, [r0, #0]
 8108796:	60c5      	str	r5, [r0, #12]
 8108798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810879a:	6819      	ldr	r1, [r3, #0]
 810879c:	b151      	cbz	r1, 81087b4 <_dtoa_r+0x5c>
 810879e:	685a      	ldr	r2, [r3, #4]
 81087a0:	604a      	str	r2, [r1, #4]
 81087a2:	2301      	movs	r3, #1
 81087a4:	4093      	lsls	r3, r2
 81087a6:	608b      	str	r3, [r1, #8]
 81087a8:	4620      	mov	r0, r4
 81087aa:	f000 fe0d 	bl	81093c8 <_Bfree>
 81087ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81087b0:	2200      	movs	r2, #0
 81087b2:	601a      	str	r2, [r3, #0]
 81087b4:	1e3b      	subs	r3, r7, #0
 81087b6:	bfb9      	ittee	lt
 81087b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81087bc:	9303      	strlt	r3, [sp, #12]
 81087be:	2300      	movge	r3, #0
 81087c0:	f8c8 3000 	strge.w	r3, [r8]
 81087c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81087c8:	4ba3      	ldr	r3, [pc, #652]	; (8108a58 <_dtoa_r+0x300>)
 81087ca:	bfbc      	itt	lt
 81087cc:	2201      	movlt	r2, #1
 81087ce:	f8c8 2000 	strlt.w	r2, [r8]
 81087d2:	ea33 0309 	bics.w	r3, r3, r9
 81087d6:	d11b      	bne.n	8108810 <_dtoa_r+0xb8>
 81087d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81087da:	f242 730f 	movw	r3, #9999	; 0x270f
 81087de:	6013      	str	r3, [r2, #0]
 81087e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81087e4:	4333      	orrs	r3, r6
 81087e6:	f000 857a 	beq.w	81092de <_dtoa_r+0xb86>
 81087ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81087ec:	b963      	cbnz	r3, 8108808 <_dtoa_r+0xb0>
 81087ee:	4b9b      	ldr	r3, [pc, #620]	; (8108a5c <_dtoa_r+0x304>)
 81087f0:	e024      	b.n	810883c <_dtoa_r+0xe4>
 81087f2:	4b9b      	ldr	r3, [pc, #620]	; (8108a60 <_dtoa_r+0x308>)
 81087f4:	9300      	str	r3, [sp, #0]
 81087f6:	3308      	adds	r3, #8
 81087f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81087fa:	6013      	str	r3, [r2, #0]
 81087fc:	9800      	ldr	r0, [sp, #0]
 81087fe:	b015      	add	sp, #84	; 0x54
 8108800:	ecbd 8b02 	vpop	{d8}
 8108804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108808:	4b94      	ldr	r3, [pc, #592]	; (8108a5c <_dtoa_r+0x304>)
 810880a:	9300      	str	r3, [sp, #0]
 810880c:	3303      	adds	r3, #3
 810880e:	e7f3      	b.n	81087f8 <_dtoa_r+0xa0>
 8108810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8108814:	2200      	movs	r2, #0
 8108816:	ec51 0b17 	vmov	r0, r1, d7
 810881a:	2300      	movs	r3, #0
 810881c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8108820:	f7f8 f9da 	bl	8100bd8 <__aeabi_dcmpeq>
 8108824:	4680      	mov	r8, r0
 8108826:	b158      	cbz	r0, 8108840 <_dtoa_r+0xe8>
 8108828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810882a:	2301      	movs	r3, #1
 810882c:	6013      	str	r3, [r2, #0]
 810882e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108830:	2b00      	cmp	r3, #0
 8108832:	f000 8551 	beq.w	81092d8 <_dtoa_r+0xb80>
 8108836:	488b      	ldr	r0, [pc, #556]	; (8108a64 <_dtoa_r+0x30c>)
 8108838:	6018      	str	r0, [r3, #0]
 810883a:	1e43      	subs	r3, r0, #1
 810883c:	9300      	str	r3, [sp, #0]
 810883e:	e7dd      	b.n	81087fc <_dtoa_r+0xa4>
 8108840:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8108844:	aa12      	add	r2, sp, #72	; 0x48
 8108846:	a913      	add	r1, sp, #76	; 0x4c
 8108848:	4620      	mov	r0, r4
 810884a:	f001 f89f 	bl	810998c <__d2b>
 810884e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108852:	4683      	mov	fp, r0
 8108854:	2d00      	cmp	r5, #0
 8108856:	d07c      	beq.n	8108952 <_dtoa_r+0x1fa>
 8108858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810885a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810885e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108862:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8108866:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810886a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810886e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8108872:	4b7d      	ldr	r3, [pc, #500]	; (8108a68 <_dtoa_r+0x310>)
 8108874:	2200      	movs	r2, #0
 8108876:	4630      	mov	r0, r6
 8108878:	4639      	mov	r1, r7
 810887a:	f7f7 fd8d 	bl	8100398 <__aeabi_dsub>
 810887e:	a36e      	add	r3, pc, #440	; (adr r3, 8108a38 <_dtoa_r+0x2e0>)
 8108880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108884:	f7f7 ff40 	bl	8100708 <__aeabi_dmul>
 8108888:	a36d      	add	r3, pc, #436	; (adr r3, 8108a40 <_dtoa_r+0x2e8>)
 810888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810888e:	f7f7 fd85 	bl	810039c <__adddf3>
 8108892:	4606      	mov	r6, r0
 8108894:	4628      	mov	r0, r5
 8108896:	460f      	mov	r7, r1
 8108898:	f7f7 fecc 	bl	8100634 <__aeabi_i2d>
 810889c:	a36a      	add	r3, pc, #424	; (adr r3, 8108a48 <_dtoa_r+0x2f0>)
 810889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088a2:	f7f7 ff31 	bl	8100708 <__aeabi_dmul>
 81088a6:	4602      	mov	r2, r0
 81088a8:	460b      	mov	r3, r1
 81088aa:	4630      	mov	r0, r6
 81088ac:	4639      	mov	r1, r7
 81088ae:	f7f7 fd75 	bl	810039c <__adddf3>
 81088b2:	4606      	mov	r6, r0
 81088b4:	460f      	mov	r7, r1
 81088b6:	f7f8 f9d7 	bl	8100c68 <__aeabi_d2iz>
 81088ba:	2200      	movs	r2, #0
 81088bc:	4682      	mov	sl, r0
 81088be:	2300      	movs	r3, #0
 81088c0:	4630      	mov	r0, r6
 81088c2:	4639      	mov	r1, r7
 81088c4:	f7f8 f992 	bl	8100bec <__aeabi_dcmplt>
 81088c8:	b148      	cbz	r0, 81088de <_dtoa_r+0x186>
 81088ca:	4650      	mov	r0, sl
 81088cc:	f7f7 feb2 	bl	8100634 <__aeabi_i2d>
 81088d0:	4632      	mov	r2, r6
 81088d2:	463b      	mov	r3, r7
 81088d4:	f7f8 f980 	bl	8100bd8 <__aeabi_dcmpeq>
 81088d8:	b908      	cbnz	r0, 81088de <_dtoa_r+0x186>
 81088da:	f10a 3aff 	add.w	sl, sl, #4294967295
 81088de:	f1ba 0f16 	cmp.w	sl, #22
 81088e2:	d854      	bhi.n	810898e <_dtoa_r+0x236>
 81088e4:	4b61      	ldr	r3, [pc, #388]	; (8108a6c <_dtoa_r+0x314>)
 81088e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81088f2:	f7f8 f97b 	bl	8100bec <__aeabi_dcmplt>
 81088f6:	2800      	cmp	r0, #0
 81088f8:	d04b      	beq.n	8108992 <_dtoa_r+0x23a>
 81088fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 81088fe:	2300      	movs	r3, #0
 8108900:	930e      	str	r3, [sp, #56]	; 0x38
 8108902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8108904:	1b5d      	subs	r5, r3, r5
 8108906:	1e6b      	subs	r3, r5, #1
 8108908:	9304      	str	r3, [sp, #16]
 810890a:	bf43      	ittte	mi
 810890c:	2300      	movmi	r3, #0
 810890e:	f1c5 0801 	rsbmi	r8, r5, #1
 8108912:	9304      	strmi	r3, [sp, #16]
 8108914:	f04f 0800 	movpl.w	r8, #0
 8108918:	f1ba 0f00 	cmp.w	sl, #0
 810891c:	db3b      	blt.n	8108996 <_dtoa_r+0x23e>
 810891e:	9b04      	ldr	r3, [sp, #16]
 8108920:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8108924:	4453      	add	r3, sl
 8108926:	9304      	str	r3, [sp, #16]
 8108928:	2300      	movs	r3, #0
 810892a:	9306      	str	r3, [sp, #24]
 810892c:	9b05      	ldr	r3, [sp, #20]
 810892e:	2b09      	cmp	r3, #9
 8108930:	d869      	bhi.n	8108a06 <_dtoa_r+0x2ae>
 8108932:	2b05      	cmp	r3, #5
 8108934:	bfc4      	itt	gt
 8108936:	3b04      	subgt	r3, #4
 8108938:	9305      	strgt	r3, [sp, #20]
 810893a:	9b05      	ldr	r3, [sp, #20]
 810893c:	f1a3 0302 	sub.w	r3, r3, #2
 8108940:	bfcc      	ite	gt
 8108942:	2500      	movgt	r5, #0
 8108944:	2501      	movle	r5, #1
 8108946:	2b03      	cmp	r3, #3
 8108948:	d869      	bhi.n	8108a1e <_dtoa_r+0x2c6>
 810894a:	e8df f003 	tbb	[pc, r3]
 810894e:	4e2c      	.short	0x4e2c
 8108950:	5a4c      	.short	0x5a4c
 8108952:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8108956:	441d      	add	r5, r3
 8108958:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810895c:	2b20      	cmp	r3, #32
 810895e:	bfc1      	itttt	gt
 8108960:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8108964:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8108968:	fa09 f303 	lslgt.w	r3, r9, r3
 810896c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8108970:	bfda      	itte	le
 8108972:	f1c3 0320 	rsble	r3, r3, #32
 8108976:	fa06 f003 	lslle.w	r0, r6, r3
 810897a:	4318      	orrgt	r0, r3
 810897c:	f7f7 fe4a 	bl	8100614 <__aeabi_ui2d>
 8108980:	2301      	movs	r3, #1
 8108982:	4606      	mov	r6, r0
 8108984:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8108988:	3d01      	subs	r5, #1
 810898a:	9310      	str	r3, [sp, #64]	; 0x40
 810898c:	e771      	b.n	8108872 <_dtoa_r+0x11a>
 810898e:	2301      	movs	r3, #1
 8108990:	e7b6      	b.n	8108900 <_dtoa_r+0x1a8>
 8108992:	900e      	str	r0, [sp, #56]	; 0x38
 8108994:	e7b5      	b.n	8108902 <_dtoa_r+0x1aa>
 8108996:	f1ca 0300 	rsb	r3, sl, #0
 810899a:	9306      	str	r3, [sp, #24]
 810899c:	2300      	movs	r3, #0
 810899e:	eba8 080a 	sub.w	r8, r8, sl
 81089a2:	930d      	str	r3, [sp, #52]	; 0x34
 81089a4:	e7c2      	b.n	810892c <_dtoa_r+0x1d4>
 81089a6:	2300      	movs	r3, #0
 81089a8:	9308      	str	r3, [sp, #32]
 81089aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	dc39      	bgt.n	8108a24 <_dtoa_r+0x2cc>
 81089b0:	f04f 0901 	mov.w	r9, #1
 81089b4:	f8cd 9004 	str.w	r9, [sp, #4]
 81089b8:	464b      	mov	r3, r9
 81089ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81089be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81089c0:	2200      	movs	r2, #0
 81089c2:	6042      	str	r2, [r0, #4]
 81089c4:	2204      	movs	r2, #4
 81089c6:	f102 0614 	add.w	r6, r2, #20
 81089ca:	429e      	cmp	r6, r3
 81089cc:	6841      	ldr	r1, [r0, #4]
 81089ce:	d92f      	bls.n	8108a30 <_dtoa_r+0x2d8>
 81089d0:	4620      	mov	r0, r4
 81089d2:	f000 fcb9 	bl	8109348 <_Balloc>
 81089d6:	9000      	str	r0, [sp, #0]
 81089d8:	2800      	cmp	r0, #0
 81089da:	d14b      	bne.n	8108a74 <_dtoa_r+0x31c>
 81089dc:	4b24      	ldr	r3, [pc, #144]	; (8108a70 <_dtoa_r+0x318>)
 81089de:	4602      	mov	r2, r0
 81089e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 81089e4:	e6d1      	b.n	810878a <_dtoa_r+0x32>
 81089e6:	2301      	movs	r3, #1
 81089e8:	e7de      	b.n	81089a8 <_dtoa_r+0x250>
 81089ea:	2300      	movs	r3, #0
 81089ec:	9308      	str	r3, [sp, #32]
 81089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81089f0:	eb0a 0903 	add.w	r9, sl, r3
 81089f4:	f109 0301 	add.w	r3, r9, #1
 81089f8:	2b01      	cmp	r3, #1
 81089fa:	9301      	str	r3, [sp, #4]
 81089fc:	bfb8      	it	lt
 81089fe:	2301      	movlt	r3, #1
 8108a00:	e7dd      	b.n	81089be <_dtoa_r+0x266>
 8108a02:	2301      	movs	r3, #1
 8108a04:	e7f2      	b.n	81089ec <_dtoa_r+0x294>
 8108a06:	2501      	movs	r5, #1
 8108a08:	2300      	movs	r3, #0
 8108a0a:	9305      	str	r3, [sp, #20]
 8108a0c:	9508      	str	r5, [sp, #32]
 8108a0e:	f04f 39ff 	mov.w	r9, #4294967295
 8108a12:	2200      	movs	r2, #0
 8108a14:	f8cd 9004 	str.w	r9, [sp, #4]
 8108a18:	2312      	movs	r3, #18
 8108a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8108a1c:	e7cf      	b.n	81089be <_dtoa_r+0x266>
 8108a1e:	2301      	movs	r3, #1
 8108a20:	9308      	str	r3, [sp, #32]
 8108a22:	e7f4      	b.n	8108a0e <_dtoa_r+0x2b6>
 8108a24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8108a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8108a2c:	464b      	mov	r3, r9
 8108a2e:	e7c6      	b.n	81089be <_dtoa_r+0x266>
 8108a30:	3101      	adds	r1, #1
 8108a32:	6041      	str	r1, [r0, #4]
 8108a34:	0052      	lsls	r2, r2, #1
 8108a36:	e7c6      	b.n	81089c6 <_dtoa_r+0x26e>
 8108a38:	636f4361 	.word	0x636f4361
 8108a3c:	3fd287a7 	.word	0x3fd287a7
 8108a40:	8b60c8b3 	.word	0x8b60c8b3
 8108a44:	3fc68a28 	.word	0x3fc68a28
 8108a48:	509f79fb 	.word	0x509f79fb
 8108a4c:	3fd34413 	.word	0x3fd34413
 8108a50:	0810a75d 	.word	0x0810a75d
 8108a54:	0810a774 	.word	0x0810a774
 8108a58:	7ff00000 	.word	0x7ff00000
 8108a5c:	0810a759 	.word	0x0810a759
 8108a60:	0810a750 	.word	0x0810a750
 8108a64:	0810a72d 	.word	0x0810a72d
 8108a68:	3ff80000 	.word	0x3ff80000
 8108a6c:	0810a870 	.word	0x0810a870
 8108a70:	0810a7d3 	.word	0x0810a7d3
 8108a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108a76:	9a00      	ldr	r2, [sp, #0]
 8108a78:	601a      	str	r2, [r3, #0]
 8108a7a:	9b01      	ldr	r3, [sp, #4]
 8108a7c:	2b0e      	cmp	r3, #14
 8108a7e:	f200 80ad 	bhi.w	8108bdc <_dtoa_r+0x484>
 8108a82:	2d00      	cmp	r5, #0
 8108a84:	f000 80aa 	beq.w	8108bdc <_dtoa_r+0x484>
 8108a88:	f1ba 0f00 	cmp.w	sl, #0
 8108a8c:	dd36      	ble.n	8108afc <_dtoa_r+0x3a4>
 8108a8e:	4ac3      	ldr	r2, [pc, #780]	; (8108d9c <_dtoa_r+0x644>)
 8108a90:	f00a 030f 	and.w	r3, sl, #15
 8108a94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108a98:	ed93 7b00 	vldr	d7, [r3]
 8108a9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8108aa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8108aa4:	eeb0 8a47 	vmov.f32	s16, s14
 8108aa8:	eef0 8a67 	vmov.f32	s17, s15
 8108aac:	d016      	beq.n	8108adc <_dtoa_r+0x384>
 8108aae:	4bbc      	ldr	r3, [pc, #752]	; (8108da0 <_dtoa_r+0x648>)
 8108ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8108ab8:	f7f7 ff50 	bl	810095c <__aeabi_ddiv>
 8108abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108ac0:	f007 070f 	and.w	r7, r7, #15
 8108ac4:	2503      	movs	r5, #3
 8108ac6:	4eb6      	ldr	r6, [pc, #728]	; (8108da0 <_dtoa_r+0x648>)
 8108ac8:	b957      	cbnz	r7, 8108ae0 <_dtoa_r+0x388>
 8108aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8108ace:	ec53 2b18 	vmov	r2, r3, d8
 8108ad2:	f7f7 ff43 	bl	810095c <__aeabi_ddiv>
 8108ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108ada:	e029      	b.n	8108b30 <_dtoa_r+0x3d8>
 8108adc:	2502      	movs	r5, #2
 8108ade:	e7f2      	b.n	8108ac6 <_dtoa_r+0x36e>
 8108ae0:	07f9      	lsls	r1, r7, #31
 8108ae2:	d508      	bpl.n	8108af6 <_dtoa_r+0x39e>
 8108ae4:	ec51 0b18 	vmov	r0, r1, d8
 8108ae8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108aec:	f7f7 fe0c 	bl	8100708 <__aeabi_dmul>
 8108af0:	ec41 0b18 	vmov	d8, r0, r1
 8108af4:	3501      	adds	r5, #1
 8108af6:	107f      	asrs	r7, r7, #1
 8108af8:	3608      	adds	r6, #8
 8108afa:	e7e5      	b.n	8108ac8 <_dtoa_r+0x370>
 8108afc:	f000 80a6 	beq.w	8108c4c <_dtoa_r+0x4f4>
 8108b00:	f1ca 0600 	rsb	r6, sl, #0
 8108b04:	4ba5      	ldr	r3, [pc, #660]	; (8108d9c <_dtoa_r+0x644>)
 8108b06:	4fa6      	ldr	r7, [pc, #664]	; (8108da0 <_dtoa_r+0x648>)
 8108b08:	f006 020f 	and.w	r2, r6, #15
 8108b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108b18:	f7f7 fdf6 	bl	8100708 <__aeabi_dmul>
 8108b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108b20:	1136      	asrs	r6, r6, #4
 8108b22:	2300      	movs	r3, #0
 8108b24:	2502      	movs	r5, #2
 8108b26:	2e00      	cmp	r6, #0
 8108b28:	f040 8085 	bne.w	8108c36 <_dtoa_r+0x4de>
 8108b2c:	2b00      	cmp	r3, #0
 8108b2e:	d1d2      	bne.n	8108ad6 <_dtoa_r+0x37e>
 8108b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108b32:	2b00      	cmp	r3, #0
 8108b34:	f000 808c 	beq.w	8108c50 <_dtoa_r+0x4f8>
 8108b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8108b3c:	4b99      	ldr	r3, [pc, #612]	; (8108da4 <_dtoa_r+0x64c>)
 8108b3e:	2200      	movs	r2, #0
 8108b40:	4630      	mov	r0, r6
 8108b42:	4639      	mov	r1, r7
 8108b44:	f7f8 f852 	bl	8100bec <__aeabi_dcmplt>
 8108b48:	2800      	cmp	r0, #0
 8108b4a:	f000 8081 	beq.w	8108c50 <_dtoa_r+0x4f8>
 8108b4e:	9b01      	ldr	r3, [sp, #4]
 8108b50:	2b00      	cmp	r3, #0
 8108b52:	d07d      	beq.n	8108c50 <_dtoa_r+0x4f8>
 8108b54:	f1b9 0f00 	cmp.w	r9, #0
 8108b58:	dd3c      	ble.n	8108bd4 <_dtoa_r+0x47c>
 8108b5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8108b5e:	9307      	str	r3, [sp, #28]
 8108b60:	2200      	movs	r2, #0
 8108b62:	4b91      	ldr	r3, [pc, #580]	; (8108da8 <_dtoa_r+0x650>)
 8108b64:	4630      	mov	r0, r6
 8108b66:	4639      	mov	r1, r7
 8108b68:	f7f7 fdce 	bl	8100708 <__aeabi_dmul>
 8108b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108b70:	3501      	adds	r5, #1
 8108b72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8108b76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8108b7a:	4628      	mov	r0, r5
 8108b7c:	f7f7 fd5a 	bl	8100634 <__aeabi_i2d>
 8108b80:	4632      	mov	r2, r6
 8108b82:	463b      	mov	r3, r7
 8108b84:	f7f7 fdc0 	bl	8100708 <__aeabi_dmul>
 8108b88:	4b88      	ldr	r3, [pc, #544]	; (8108dac <_dtoa_r+0x654>)
 8108b8a:	2200      	movs	r2, #0
 8108b8c:	f7f7 fc06 	bl	810039c <__adddf3>
 8108b90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8108b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108b98:	9303      	str	r3, [sp, #12]
 8108b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108b9c:	2b00      	cmp	r3, #0
 8108b9e:	d15c      	bne.n	8108c5a <_dtoa_r+0x502>
 8108ba0:	4b83      	ldr	r3, [pc, #524]	; (8108db0 <_dtoa_r+0x658>)
 8108ba2:	2200      	movs	r2, #0
 8108ba4:	4630      	mov	r0, r6
 8108ba6:	4639      	mov	r1, r7
 8108ba8:	f7f7 fbf6 	bl	8100398 <__aeabi_dsub>
 8108bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8108bb0:	4606      	mov	r6, r0
 8108bb2:	460f      	mov	r7, r1
 8108bb4:	f7f8 f838 	bl	8100c28 <__aeabi_dcmpgt>
 8108bb8:	2800      	cmp	r0, #0
 8108bba:	f040 8296 	bne.w	81090ea <_dtoa_r+0x992>
 8108bbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8108bc2:	4630      	mov	r0, r6
 8108bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108bc8:	4639      	mov	r1, r7
 8108bca:	f7f8 f80f 	bl	8100bec <__aeabi_dcmplt>
 8108bce:	2800      	cmp	r0, #0
 8108bd0:	f040 8288 	bne.w	81090e4 <_dtoa_r+0x98c>
 8108bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8108bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8108bde:	2b00      	cmp	r3, #0
 8108be0:	f2c0 8158 	blt.w	8108e94 <_dtoa_r+0x73c>
 8108be4:	f1ba 0f0e 	cmp.w	sl, #14
 8108be8:	f300 8154 	bgt.w	8108e94 <_dtoa_r+0x73c>
 8108bec:	4b6b      	ldr	r3, [pc, #428]	; (8108d9c <_dtoa_r+0x644>)
 8108bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8108bf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bf8:	2b00      	cmp	r3, #0
 8108bfa:	f280 80e3 	bge.w	8108dc4 <_dtoa_r+0x66c>
 8108bfe:	9b01      	ldr	r3, [sp, #4]
 8108c00:	2b00      	cmp	r3, #0
 8108c02:	f300 80df 	bgt.w	8108dc4 <_dtoa_r+0x66c>
 8108c06:	f040 826d 	bne.w	81090e4 <_dtoa_r+0x98c>
 8108c0a:	4b69      	ldr	r3, [pc, #420]	; (8108db0 <_dtoa_r+0x658>)
 8108c0c:	2200      	movs	r2, #0
 8108c0e:	4640      	mov	r0, r8
 8108c10:	4649      	mov	r1, r9
 8108c12:	f7f7 fd79 	bl	8100708 <__aeabi_dmul>
 8108c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8108c1a:	f7f7 fffb 	bl	8100c14 <__aeabi_dcmpge>
 8108c1e:	9e01      	ldr	r6, [sp, #4]
 8108c20:	4637      	mov	r7, r6
 8108c22:	2800      	cmp	r0, #0
 8108c24:	f040 8243 	bne.w	81090ae <_dtoa_r+0x956>
 8108c28:	9d00      	ldr	r5, [sp, #0]
 8108c2a:	2331      	movs	r3, #49	; 0x31
 8108c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8108c30:	f10a 0a01 	add.w	sl, sl, #1
 8108c34:	e23f      	b.n	81090b6 <_dtoa_r+0x95e>
 8108c36:	07f2      	lsls	r2, r6, #31
 8108c38:	d505      	bpl.n	8108c46 <_dtoa_r+0x4ee>
 8108c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108c3e:	f7f7 fd63 	bl	8100708 <__aeabi_dmul>
 8108c42:	3501      	adds	r5, #1
 8108c44:	2301      	movs	r3, #1
 8108c46:	1076      	asrs	r6, r6, #1
 8108c48:	3708      	adds	r7, #8
 8108c4a:	e76c      	b.n	8108b26 <_dtoa_r+0x3ce>
 8108c4c:	2502      	movs	r5, #2
 8108c4e:	e76f      	b.n	8108b30 <_dtoa_r+0x3d8>
 8108c50:	9b01      	ldr	r3, [sp, #4]
 8108c52:	f8cd a01c 	str.w	sl, [sp, #28]
 8108c56:	930c      	str	r3, [sp, #48]	; 0x30
 8108c58:	e78d      	b.n	8108b76 <_dtoa_r+0x41e>
 8108c5a:	9900      	ldr	r1, [sp, #0]
 8108c5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8108c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108c60:	4b4e      	ldr	r3, [pc, #312]	; (8108d9c <_dtoa_r+0x644>)
 8108c62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8108c66:	4401      	add	r1, r0
 8108c68:	9102      	str	r1, [sp, #8]
 8108c6a:	9908      	ldr	r1, [sp, #32]
 8108c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8108c70:	eef0 8a67 	vmov.f32	s17, s15
 8108c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108c78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8108c7c:	2900      	cmp	r1, #0
 8108c7e:	d045      	beq.n	8108d0c <_dtoa_r+0x5b4>
 8108c80:	494c      	ldr	r1, [pc, #304]	; (8108db4 <_dtoa_r+0x65c>)
 8108c82:	2000      	movs	r0, #0
 8108c84:	f7f7 fe6a 	bl	810095c <__aeabi_ddiv>
 8108c88:	ec53 2b18 	vmov	r2, r3, d8
 8108c8c:	f7f7 fb84 	bl	8100398 <__aeabi_dsub>
 8108c90:	9d00      	ldr	r5, [sp, #0]
 8108c92:	ec41 0b18 	vmov	d8, r0, r1
 8108c96:	4639      	mov	r1, r7
 8108c98:	4630      	mov	r0, r6
 8108c9a:	f7f7 ffe5 	bl	8100c68 <__aeabi_d2iz>
 8108c9e:	900c      	str	r0, [sp, #48]	; 0x30
 8108ca0:	f7f7 fcc8 	bl	8100634 <__aeabi_i2d>
 8108ca4:	4602      	mov	r2, r0
 8108ca6:	460b      	mov	r3, r1
 8108ca8:	4630      	mov	r0, r6
 8108caa:	4639      	mov	r1, r7
 8108cac:	f7f7 fb74 	bl	8100398 <__aeabi_dsub>
 8108cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108cb2:	3330      	adds	r3, #48	; 0x30
 8108cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8108cb8:	ec53 2b18 	vmov	r2, r3, d8
 8108cbc:	4606      	mov	r6, r0
 8108cbe:	460f      	mov	r7, r1
 8108cc0:	f7f7 ff94 	bl	8100bec <__aeabi_dcmplt>
 8108cc4:	2800      	cmp	r0, #0
 8108cc6:	d165      	bne.n	8108d94 <_dtoa_r+0x63c>
 8108cc8:	4632      	mov	r2, r6
 8108cca:	463b      	mov	r3, r7
 8108ccc:	4935      	ldr	r1, [pc, #212]	; (8108da4 <_dtoa_r+0x64c>)
 8108cce:	2000      	movs	r0, #0
 8108cd0:	f7f7 fb62 	bl	8100398 <__aeabi_dsub>
 8108cd4:	ec53 2b18 	vmov	r2, r3, d8
 8108cd8:	f7f7 ff88 	bl	8100bec <__aeabi_dcmplt>
 8108cdc:	2800      	cmp	r0, #0
 8108cde:	f040 80b9 	bne.w	8108e54 <_dtoa_r+0x6fc>
 8108ce2:	9b02      	ldr	r3, [sp, #8]
 8108ce4:	429d      	cmp	r5, r3
 8108ce6:	f43f af75 	beq.w	8108bd4 <_dtoa_r+0x47c>
 8108cea:	4b2f      	ldr	r3, [pc, #188]	; (8108da8 <_dtoa_r+0x650>)
 8108cec:	ec51 0b18 	vmov	r0, r1, d8
 8108cf0:	2200      	movs	r2, #0
 8108cf2:	f7f7 fd09 	bl	8100708 <__aeabi_dmul>
 8108cf6:	4b2c      	ldr	r3, [pc, #176]	; (8108da8 <_dtoa_r+0x650>)
 8108cf8:	ec41 0b18 	vmov	d8, r0, r1
 8108cfc:	2200      	movs	r2, #0
 8108cfe:	4630      	mov	r0, r6
 8108d00:	4639      	mov	r1, r7
 8108d02:	f7f7 fd01 	bl	8100708 <__aeabi_dmul>
 8108d06:	4606      	mov	r6, r0
 8108d08:	460f      	mov	r7, r1
 8108d0a:	e7c4      	b.n	8108c96 <_dtoa_r+0x53e>
 8108d0c:	ec51 0b17 	vmov	r0, r1, d7
 8108d10:	f7f7 fcfa 	bl	8100708 <__aeabi_dmul>
 8108d14:	9b02      	ldr	r3, [sp, #8]
 8108d16:	9d00      	ldr	r5, [sp, #0]
 8108d18:	930c      	str	r3, [sp, #48]	; 0x30
 8108d1a:	ec41 0b18 	vmov	d8, r0, r1
 8108d1e:	4639      	mov	r1, r7
 8108d20:	4630      	mov	r0, r6
 8108d22:	f7f7 ffa1 	bl	8100c68 <__aeabi_d2iz>
 8108d26:	9011      	str	r0, [sp, #68]	; 0x44
 8108d28:	f7f7 fc84 	bl	8100634 <__aeabi_i2d>
 8108d2c:	4602      	mov	r2, r0
 8108d2e:	460b      	mov	r3, r1
 8108d30:	4630      	mov	r0, r6
 8108d32:	4639      	mov	r1, r7
 8108d34:	f7f7 fb30 	bl	8100398 <__aeabi_dsub>
 8108d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108d3a:	3330      	adds	r3, #48	; 0x30
 8108d3c:	f805 3b01 	strb.w	r3, [r5], #1
 8108d40:	9b02      	ldr	r3, [sp, #8]
 8108d42:	429d      	cmp	r5, r3
 8108d44:	4606      	mov	r6, r0
 8108d46:	460f      	mov	r7, r1
 8108d48:	f04f 0200 	mov.w	r2, #0
 8108d4c:	d134      	bne.n	8108db8 <_dtoa_r+0x660>
 8108d4e:	4b19      	ldr	r3, [pc, #100]	; (8108db4 <_dtoa_r+0x65c>)
 8108d50:	ec51 0b18 	vmov	r0, r1, d8
 8108d54:	f7f7 fb22 	bl	810039c <__adddf3>
 8108d58:	4602      	mov	r2, r0
 8108d5a:	460b      	mov	r3, r1
 8108d5c:	4630      	mov	r0, r6
 8108d5e:	4639      	mov	r1, r7
 8108d60:	f7f7 ff62 	bl	8100c28 <__aeabi_dcmpgt>
 8108d64:	2800      	cmp	r0, #0
 8108d66:	d175      	bne.n	8108e54 <_dtoa_r+0x6fc>
 8108d68:	ec53 2b18 	vmov	r2, r3, d8
 8108d6c:	4911      	ldr	r1, [pc, #68]	; (8108db4 <_dtoa_r+0x65c>)
 8108d6e:	2000      	movs	r0, #0
 8108d70:	f7f7 fb12 	bl	8100398 <__aeabi_dsub>
 8108d74:	4602      	mov	r2, r0
 8108d76:	460b      	mov	r3, r1
 8108d78:	4630      	mov	r0, r6
 8108d7a:	4639      	mov	r1, r7
 8108d7c:	f7f7 ff36 	bl	8100bec <__aeabi_dcmplt>
 8108d80:	2800      	cmp	r0, #0
 8108d82:	f43f af27 	beq.w	8108bd4 <_dtoa_r+0x47c>
 8108d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108d88:	1e6b      	subs	r3, r5, #1
 8108d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8108d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8108d90:	2b30      	cmp	r3, #48	; 0x30
 8108d92:	d0f8      	beq.n	8108d86 <_dtoa_r+0x62e>
 8108d94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8108d98:	e04a      	b.n	8108e30 <_dtoa_r+0x6d8>
 8108d9a:	bf00      	nop
 8108d9c:	0810a870 	.word	0x0810a870
 8108da0:	0810a848 	.word	0x0810a848
 8108da4:	3ff00000 	.word	0x3ff00000
 8108da8:	40240000 	.word	0x40240000
 8108dac:	401c0000 	.word	0x401c0000
 8108db0:	40140000 	.word	0x40140000
 8108db4:	3fe00000 	.word	0x3fe00000
 8108db8:	4baf      	ldr	r3, [pc, #700]	; (8109078 <_dtoa_r+0x920>)
 8108dba:	f7f7 fca5 	bl	8100708 <__aeabi_dmul>
 8108dbe:	4606      	mov	r6, r0
 8108dc0:	460f      	mov	r7, r1
 8108dc2:	e7ac      	b.n	8108d1e <_dtoa_r+0x5c6>
 8108dc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8108dc8:	9d00      	ldr	r5, [sp, #0]
 8108dca:	4642      	mov	r2, r8
 8108dcc:	464b      	mov	r3, r9
 8108dce:	4630      	mov	r0, r6
 8108dd0:	4639      	mov	r1, r7
 8108dd2:	f7f7 fdc3 	bl	810095c <__aeabi_ddiv>
 8108dd6:	f7f7 ff47 	bl	8100c68 <__aeabi_d2iz>
 8108dda:	9002      	str	r0, [sp, #8]
 8108ddc:	f7f7 fc2a 	bl	8100634 <__aeabi_i2d>
 8108de0:	4642      	mov	r2, r8
 8108de2:	464b      	mov	r3, r9
 8108de4:	f7f7 fc90 	bl	8100708 <__aeabi_dmul>
 8108de8:	4602      	mov	r2, r0
 8108dea:	460b      	mov	r3, r1
 8108dec:	4630      	mov	r0, r6
 8108dee:	4639      	mov	r1, r7
 8108df0:	f7f7 fad2 	bl	8100398 <__aeabi_dsub>
 8108df4:	9e02      	ldr	r6, [sp, #8]
 8108df6:	9f01      	ldr	r7, [sp, #4]
 8108df8:	3630      	adds	r6, #48	; 0x30
 8108dfa:	f805 6b01 	strb.w	r6, [r5], #1
 8108dfe:	9e00      	ldr	r6, [sp, #0]
 8108e00:	1bae      	subs	r6, r5, r6
 8108e02:	42b7      	cmp	r7, r6
 8108e04:	4602      	mov	r2, r0
 8108e06:	460b      	mov	r3, r1
 8108e08:	d137      	bne.n	8108e7a <_dtoa_r+0x722>
 8108e0a:	f7f7 fac7 	bl	810039c <__adddf3>
 8108e0e:	4642      	mov	r2, r8
 8108e10:	464b      	mov	r3, r9
 8108e12:	4606      	mov	r6, r0
 8108e14:	460f      	mov	r7, r1
 8108e16:	f7f7 ff07 	bl	8100c28 <__aeabi_dcmpgt>
 8108e1a:	b9c8      	cbnz	r0, 8108e50 <_dtoa_r+0x6f8>
 8108e1c:	4642      	mov	r2, r8
 8108e1e:	464b      	mov	r3, r9
 8108e20:	4630      	mov	r0, r6
 8108e22:	4639      	mov	r1, r7
 8108e24:	f7f7 fed8 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e28:	b110      	cbz	r0, 8108e30 <_dtoa_r+0x6d8>
 8108e2a:	9b02      	ldr	r3, [sp, #8]
 8108e2c:	07d9      	lsls	r1, r3, #31
 8108e2e:	d40f      	bmi.n	8108e50 <_dtoa_r+0x6f8>
 8108e30:	4620      	mov	r0, r4
 8108e32:	4659      	mov	r1, fp
 8108e34:	f000 fac8 	bl	81093c8 <_Bfree>
 8108e38:	2300      	movs	r3, #0
 8108e3a:	702b      	strb	r3, [r5, #0]
 8108e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108e3e:	f10a 0001 	add.w	r0, sl, #1
 8108e42:	6018      	str	r0, [r3, #0]
 8108e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108e46:	2b00      	cmp	r3, #0
 8108e48:	f43f acd8 	beq.w	81087fc <_dtoa_r+0xa4>
 8108e4c:	601d      	str	r5, [r3, #0]
 8108e4e:	e4d5      	b.n	81087fc <_dtoa_r+0xa4>
 8108e50:	f8cd a01c 	str.w	sl, [sp, #28]
 8108e54:	462b      	mov	r3, r5
 8108e56:	461d      	mov	r5, r3
 8108e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108e5c:	2a39      	cmp	r2, #57	; 0x39
 8108e5e:	d108      	bne.n	8108e72 <_dtoa_r+0x71a>
 8108e60:	9a00      	ldr	r2, [sp, #0]
 8108e62:	429a      	cmp	r2, r3
 8108e64:	d1f7      	bne.n	8108e56 <_dtoa_r+0x6fe>
 8108e66:	9a07      	ldr	r2, [sp, #28]
 8108e68:	9900      	ldr	r1, [sp, #0]
 8108e6a:	3201      	adds	r2, #1
 8108e6c:	9207      	str	r2, [sp, #28]
 8108e6e:	2230      	movs	r2, #48	; 0x30
 8108e70:	700a      	strb	r2, [r1, #0]
 8108e72:	781a      	ldrb	r2, [r3, #0]
 8108e74:	3201      	adds	r2, #1
 8108e76:	701a      	strb	r2, [r3, #0]
 8108e78:	e78c      	b.n	8108d94 <_dtoa_r+0x63c>
 8108e7a:	4b7f      	ldr	r3, [pc, #508]	; (8109078 <_dtoa_r+0x920>)
 8108e7c:	2200      	movs	r2, #0
 8108e7e:	f7f7 fc43 	bl	8100708 <__aeabi_dmul>
 8108e82:	2200      	movs	r2, #0
 8108e84:	2300      	movs	r3, #0
 8108e86:	4606      	mov	r6, r0
 8108e88:	460f      	mov	r7, r1
 8108e8a:	f7f7 fea5 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e8e:	2800      	cmp	r0, #0
 8108e90:	d09b      	beq.n	8108dca <_dtoa_r+0x672>
 8108e92:	e7cd      	b.n	8108e30 <_dtoa_r+0x6d8>
 8108e94:	9a08      	ldr	r2, [sp, #32]
 8108e96:	2a00      	cmp	r2, #0
 8108e98:	f000 80c4 	beq.w	8109024 <_dtoa_r+0x8cc>
 8108e9c:	9a05      	ldr	r2, [sp, #20]
 8108e9e:	2a01      	cmp	r2, #1
 8108ea0:	f300 80a8 	bgt.w	8108ff4 <_dtoa_r+0x89c>
 8108ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8108ea6:	2a00      	cmp	r2, #0
 8108ea8:	f000 80a0 	beq.w	8108fec <_dtoa_r+0x894>
 8108eac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8108eb0:	9e06      	ldr	r6, [sp, #24]
 8108eb2:	4645      	mov	r5, r8
 8108eb4:	9a04      	ldr	r2, [sp, #16]
 8108eb6:	2101      	movs	r1, #1
 8108eb8:	441a      	add	r2, r3
 8108eba:	4620      	mov	r0, r4
 8108ebc:	4498      	add	r8, r3
 8108ebe:	9204      	str	r2, [sp, #16]
 8108ec0:	f000 fb3e 	bl	8109540 <__i2b>
 8108ec4:	4607      	mov	r7, r0
 8108ec6:	2d00      	cmp	r5, #0
 8108ec8:	dd0b      	ble.n	8108ee2 <_dtoa_r+0x78a>
 8108eca:	9b04      	ldr	r3, [sp, #16]
 8108ecc:	2b00      	cmp	r3, #0
 8108ece:	dd08      	ble.n	8108ee2 <_dtoa_r+0x78a>
 8108ed0:	42ab      	cmp	r3, r5
 8108ed2:	9a04      	ldr	r2, [sp, #16]
 8108ed4:	bfa8      	it	ge
 8108ed6:	462b      	movge	r3, r5
 8108ed8:	eba8 0803 	sub.w	r8, r8, r3
 8108edc:	1aed      	subs	r5, r5, r3
 8108ede:	1ad3      	subs	r3, r2, r3
 8108ee0:	9304      	str	r3, [sp, #16]
 8108ee2:	9b06      	ldr	r3, [sp, #24]
 8108ee4:	b1fb      	cbz	r3, 8108f26 <_dtoa_r+0x7ce>
 8108ee6:	9b08      	ldr	r3, [sp, #32]
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	f000 809f 	beq.w	810902c <_dtoa_r+0x8d4>
 8108eee:	2e00      	cmp	r6, #0
 8108ef0:	dd11      	ble.n	8108f16 <_dtoa_r+0x7be>
 8108ef2:	4639      	mov	r1, r7
 8108ef4:	4632      	mov	r2, r6
 8108ef6:	4620      	mov	r0, r4
 8108ef8:	f000 fbde 	bl	81096b8 <__pow5mult>
 8108efc:	465a      	mov	r2, fp
 8108efe:	4601      	mov	r1, r0
 8108f00:	4607      	mov	r7, r0
 8108f02:	4620      	mov	r0, r4
 8108f04:	f000 fb32 	bl	810956c <__multiply>
 8108f08:	4659      	mov	r1, fp
 8108f0a:	9007      	str	r0, [sp, #28]
 8108f0c:	4620      	mov	r0, r4
 8108f0e:	f000 fa5b 	bl	81093c8 <_Bfree>
 8108f12:	9b07      	ldr	r3, [sp, #28]
 8108f14:	469b      	mov	fp, r3
 8108f16:	9b06      	ldr	r3, [sp, #24]
 8108f18:	1b9a      	subs	r2, r3, r6
 8108f1a:	d004      	beq.n	8108f26 <_dtoa_r+0x7ce>
 8108f1c:	4659      	mov	r1, fp
 8108f1e:	4620      	mov	r0, r4
 8108f20:	f000 fbca 	bl	81096b8 <__pow5mult>
 8108f24:	4683      	mov	fp, r0
 8108f26:	2101      	movs	r1, #1
 8108f28:	4620      	mov	r0, r4
 8108f2a:	f000 fb09 	bl	8109540 <__i2b>
 8108f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108f30:	2b00      	cmp	r3, #0
 8108f32:	4606      	mov	r6, r0
 8108f34:	dd7c      	ble.n	8109030 <_dtoa_r+0x8d8>
 8108f36:	461a      	mov	r2, r3
 8108f38:	4601      	mov	r1, r0
 8108f3a:	4620      	mov	r0, r4
 8108f3c:	f000 fbbc 	bl	81096b8 <__pow5mult>
 8108f40:	9b05      	ldr	r3, [sp, #20]
 8108f42:	2b01      	cmp	r3, #1
 8108f44:	4606      	mov	r6, r0
 8108f46:	dd76      	ble.n	8109036 <_dtoa_r+0x8de>
 8108f48:	2300      	movs	r3, #0
 8108f4a:	9306      	str	r3, [sp, #24]
 8108f4c:	6933      	ldr	r3, [r6, #16]
 8108f4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8108f52:	6918      	ldr	r0, [r3, #16]
 8108f54:	f000 faa4 	bl	81094a0 <__hi0bits>
 8108f58:	f1c0 0020 	rsb	r0, r0, #32
 8108f5c:	9b04      	ldr	r3, [sp, #16]
 8108f5e:	4418      	add	r0, r3
 8108f60:	f010 001f 	ands.w	r0, r0, #31
 8108f64:	f000 8086 	beq.w	8109074 <_dtoa_r+0x91c>
 8108f68:	f1c0 0320 	rsb	r3, r0, #32
 8108f6c:	2b04      	cmp	r3, #4
 8108f6e:	dd7f      	ble.n	8109070 <_dtoa_r+0x918>
 8108f70:	f1c0 001c 	rsb	r0, r0, #28
 8108f74:	9b04      	ldr	r3, [sp, #16]
 8108f76:	4403      	add	r3, r0
 8108f78:	4480      	add	r8, r0
 8108f7a:	4405      	add	r5, r0
 8108f7c:	9304      	str	r3, [sp, #16]
 8108f7e:	f1b8 0f00 	cmp.w	r8, #0
 8108f82:	dd05      	ble.n	8108f90 <_dtoa_r+0x838>
 8108f84:	4659      	mov	r1, fp
 8108f86:	4642      	mov	r2, r8
 8108f88:	4620      	mov	r0, r4
 8108f8a:	f000 fbef 	bl	810976c <__lshift>
 8108f8e:	4683      	mov	fp, r0
 8108f90:	9b04      	ldr	r3, [sp, #16]
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	dd05      	ble.n	8108fa2 <_dtoa_r+0x84a>
 8108f96:	4631      	mov	r1, r6
 8108f98:	461a      	mov	r2, r3
 8108f9a:	4620      	mov	r0, r4
 8108f9c:	f000 fbe6 	bl	810976c <__lshift>
 8108fa0:	4606      	mov	r6, r0
 8108fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108fa4:	2b00      	cmp	r3, #0
 8108fa6:	d069      	beq.n	810907c <_dtoa_r+0x924>
 8108fa8:	4631      	mov	r1, r6
 8108faa:	4658      	mov	r0, fp
 8108fac:	f000 fc4a 	bl	8109844 <__mcmp>
 8108fb0:	2800      	cmp	r0, #0
 8108fb2:	da63      	bge.n	810907c <_dtoa_r+0x924>
 8108fb4:	2300      	movs	r3, #0
 8108fb6:	4659      	mov	r1, fp
 8108fb8:	220a      	movs	r2, #10
 8108fba:	4620      	mov	r0, r4
 8108fbc:	f000 fa26 	bl	810940c <__multadd>
 8108fc0:	9b08      	ldr	r3, [sp, #32]
 8108fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108fc6:	4683      	mov	fp, r0
 8108fc8:	2b00      	cmp	r3, #0
 8108fca:	f000 818f 	beq.w	81092ec <_dtoa_r+0xb94>
 8108fce:	4639      	mov	r1, r7
 8108fd0:	2300      	movs	r3, #0
 8108fd2:	220a      	movs	r2, #10
 8108fd4:	4620      	mov	r0, r4
 8108fd6:	f000 fa19 	bl	810940c <__multadd>
 8108fda:	f1b9 0f00 	cmp.w	r9, #0
 8108fde:	4607      	mov	r7, r0
 8108fe0:	f300 808e 	bgt.w	8109100 <_dtoa_r+0x9a8>
 8108fe4:	9b05      	ldr	r3, [sp, #20]
 8108fe6:	2b02      	cmp	r3, #2
 8108fe8:	dc50      	bgt.n	810908c <_dtoa_r+0x934>
 8108fea:	e089      	b.n	8109100 <_dtoa_r+0x9a8>
 8108fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8108fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8108ff2:	e75d      	b.n	8108eb0 <_dtoa_r+0x758>
 8108ff4:	9b01      	ldr	r3, [sp, #4]
 8108ff6:	1e5e      	subs	r6, r3, #1
 8108ff8:	9b06      	ldr	r3, [sp, #24]
 8108ffa:	42b3      	cmp	r3, r6
 8108ffc:	bfbf      	itttt	lt
 8108ffe:	9b06      	ldrlt	r3, [sp, #24]
 8109000:	9606      	strlt	r6, [sp, #24]
 8109002:	1af2      	sublt	r2, r6, r3
 8109004:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109006:	bfb6      	itet	lt
 8109008:	189b      	addlt	r3, r3, r2
 810900a:	1b9e      	subge	r6, r3, r6
 810900c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810900e:	9b01      	ldr	r3, [sp, #4]
 8109010:	bfb8      	it	lt
 8109012:	2600      	movlt	r6, #0
 8109014:	2b00      	cmp	r3, #0
 8109016:	bfb5      	itete	lt
 8109018:	eba8 0503 	sublt.w	r5, r8, r3
 810901c:	9b01      	ldrge	r3, [sp, #4]
 810901e:	2300      	movlt	r3, #0
 8109020:	4645      	movge	r5, r8
 8109022:	e747      	b.n	8108eb4 <_dtoa_r+0x75c>
 8109024:	9e06      	ldr	r6, [sp, #24]
 8109026:	9f08      	ldr	r7, [sp, #32]
 8109028:	4645      	mov	r5, r8
 810902a:	e74c      	b.n	8108ec6 <_dtoa_r+0x76e>
 810902c:	9a06      	ldr	r2, [sp, #24]
 810902e:	e775      	b.n	8108f1c <_dtoa_r+0x7c4>
 8109030:	9b05      	ldr	r3, [sp, #20]
 8109032:	2b01      	cmp	r3, #1
 8109034:	dc18      	bgt.n	8109068 <_dtoa_r+0x910>
 8109036:	9b02      	ldr	r3, [sp, #8]
 8109038:	b9b3      	cbnz	r3, 8109068 <_dtoa_r+0x910>
 810903a:	9b03      	ldr	r3, [sp, #12]
 810903c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109040:	b9a3      	cbnz	r3, 810906c <_dtoa_r+0x914>
 8109042:	9b03      	ldr	r3, [sp, #12]
 8109044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109048:	0d1b      	lsrs	r3, r3, #20
 810904a:	051b      	lsls	r3, r3, #20
 810904c:	b12b      	cbz	r3, 810905a <_dtoa_r+0x902>
 810904e:	9b04      	ldr	r3, [sp, #16]
 8109050:	3301      	adds	r3, #1
 8109052:	9304      	str	r3, [sp, #16]
 8109054:	f108 0801 	add.w	r8, r8, #1
 8109058:	2301      	movs	r3, #1
 810905a:	9306      	str	r3, [sp, #24]
 810905c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810905e:	2b00      	cmp	r3, #0
 8109060:	f47f af74 	bne.w	8108f4c <_dtoa_r+0x7f4>
 8109064:	2001      	movs	r0, #1
 8109066:	e779      	b.n	8108f5c <_dtoa_r+0x804>
 8109068:	2300      	movs	r3, #0
 810906a:	e7f6      	b.n	810905a <_dtoa_r+0x902>
 810906c:	9b02      	ldr	r3, [sp, #8]
 810906e:	e7f4      	b.n	810905a <_dtoa_r+0x902>
 8109070:	d085      	beq.n	8108f7e <_dtoa_r+0x826>
 8109072:	4618      	mov	r0, r3
 8109074:	301c      	adds	r0, #28
 8109076:	e77d      	b.n	8108f74 <_dtoa_r+0x81c>
 8109078:	40240000 	.word	0x40240000
 810907c:	9b01      	ldr	r3, [sp, #4]
 810907e:	2b00      	cmp	r3, #0
 8109080:	dc38      	bgt.n	81090f4 <_dtoa_r+0x99c>
 8109082:	9b05      	ldr	r3, [sp, #20]
 8109084:	2b02      	cmp	r3, #2
 8109086:	dd35      	ble.n	81090f4 <_dtoa_r+0x99c>
 8109088:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810908c:	f1b9 0f00 	cmp.w	r9, #0
 8109090:	d10d      	bne.n	81090ae <_dtoa_r+0x956>
 8109092:	4631      	mov	r1, r6
 8109094:	464b      	mov	r3, r9
 8109096:	2205      	movs	r2, #5
 8109098:	4620      	mov	r0, r4
 810909a:	f000 f9b7 	bl	810940c <__multadd>
 810909e:	4601      	mov	r1, r0
 81090a0:	4606      	mov	r6, r0
 81090a2:	4658      	mov	r0, fp
 81090a4:	f000 fbce 	bl	8109844 <__mcmp>
 81090a8:	2800      	cmp	r0, #0
 81090aa:	f73f adbd 	bgt.w	8108c28 <_dtoa_r+0x4d0>
 81090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81090b0:	9d00      	ldr	r5, [sp, #0]
 81090b2:	ea6f 0a03 	mvn.w	sl, r3
 81090b6:	f04f 0800 	mov.w	r8, #0
 81090ba:	4631      	mov	r1, r6
 81090bc:	4620      	mov	r0, r4
 81090be:	f000 f983 	bl	81093c8 <_Bfree>
 81090c2:	2f00      	cmp	r7, #0
 81090c4:	f43f aeb4 	beq.w	8108e30 <_dtoa_r+0x6d8>
 81090c8:	f1b8 0f00 	cmp.w	r8, #0
 81090cc:	d005      	beq.n	81090da <_dtoa_r+0x982>
 81090ce:	45b8      	cmp	r8, r7
 81090d0:	d003      	beq.n	81090da <_dtoa_r+0x982>
 81090d2:	4641      	mov	r1, r8
 81090d4:	4620      	mov	r0, r4
 81090d6:	f000 f977 	bl	81093c8 <_Bfree>
 81090da:	4639      	mov	r1, r7
 81090dc:	4620      	mov	r0, r4
 81090de:	f000 f973 	bl	81093c8 <_Bfree>
 81090e2:	e6a5      	b.n	8108e30 <_dtoa_r+0x6d8>
 81090e4:	2600      	movs	r6, #0
 81090e6:	4637      	mov	r7, r6
 81090e8:	e7e1      	b.n	81090ae <_dtoa_r+0x956>
 81090ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 81090ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81090f0:	4637      	mov	r7, r6
 81090f2:	e599      	b.n	8108c28 <_dtoa_r+0x4d0>
 81090f4:	9b08      	ldr	r3, [sp, #32]
 81090f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81090fa:	2b00      	cmp	r3, #0
 81090fc:	f000 80fd 	beq.w	81092fa <_dtoa_r+0xba2>
 8109100:	2d00      	cmp	r5, #0
 8109102:	dd05      	ble.n	8109110 <_dtoa_r+0x9b8>
 8109104:	4639      	mov	r1, r7
 8109106:	462a      	mov	r2, r5
 8109108:	4620      	mov	r0, r4
 810910a:	f000 fb2f 	bl	810976c <__lshift>
 810910e:	4607      	mov	r7, r0
 8109110:	9b06      	ldr	r3, [sp, #24]
 8109112:	2b00      	cmp	r3, #0
 8109114:	d05c      	beq.n	81091d0 <_dtoa_r+0xa78>
 8109116:	6879      	ldr	r1, [r7, #4]
 8109118:	4620      	mov	r0, r4
 810911a:	f000 f915 	bl	8109348 <_Balloc>
 810911e:	4605      	mov	r5, r0
 8109120:	b928      	cbnz	r0, 810912e <_dtoa_r+0x9d6>
 8109122:	4b80      	ldr	r3, [pc, #512]	; (8109324 <_dtoa_r+0xbcc>)
 8109124:	4602      	mov	r2, r0
 8109126:	f240 21ea 	movw	r1, #746	; 0x2ea
 810912a:	f7ff bb2e 	b.w	810878a <_dtoa_r+0x32>
 810912e:	693a      	ldr	r2, [r7, #16]
 8109130:	3202      	adds	r2, #2
 8109132:	0092      	lsls	r2, r2, #2
 8109134:	f107 010c 	add.w	r1, r7, #12
 8109138:	300c      	adds	r0, #12
 810913a:	f7fe fdff 	bl	8107d3c <memcpy>
 810913e:	2201      	movs	r2, #1
 8109140:	4629      	mov	r1, r5
 8109142:	4620      	mov	r0, r4
 8109144:	f000 fb12 	bl	810976c <__lshift>
 8109148:	9b00      	ldr	r3, [sp, #0]
 810914a:	3301      	adds	r3, #1
 810914c:	9301      	str	r3, [sp, #4]
 810914e:	9b00      	ldr	r3, [sp, #0]
 8109150:	444b      	add	r3, r9
 8109152:	9307      	str	r3, [sp, #28]
 8109154:	9b02      	ldr	r3, [sp, #8]
 8109156:	f003 0301 	and.w	r3, r3, #1
 810915a:	46b8      	mov	r8, r7
 810915c:	9306      	str	r3, [sp, #24]
 810915e:	4607      	mov	r7, r0
 8109160:	9b01      	ldr	r3, [sp, #4]
 8109162:	4631      	mov	r1, r6
 8109164:	3b01      	subs	r3, #1
 8109166:	4658      	mov	r0, fp
 8109168:	9302      	str	r3, [sp, #8]
 810916a:	f7ff fa67 	bl	810863c <quorem>
 810916e:	4603      	mov	r3, r0
 8109170:	3330      	adds	r3, #48	; 0x30
 8109172:	9004      	str	r0, [sp, #16]
 8109174:	4641      	mov	r1, r8
 8109176:	4658      	mov	r0, fp
 8109178:	9308      	str	r3, [sp, #32]
 810917a:	f000 fb63 	bl	8109844 <__mcmp>
 810917e:	463a      	mov	r2, r7
 8109180:	4681      	mov	r9, r0
 8109182:	4631      	mov	r1, r6
 8109184:	4620      	mov	r0, r4
 8109186:	f000 fb79 	bl	810987c <__mdiff>
 810918a:	68c2      	ldr	r2, [r0, #12]
 810918c:	9b08      	ldr	r3, [sp, #32]
 810918e:	4605      	mov	r5, r0
 8109190:	bb02      	cbnz	r2, 81091d4 <_dtoa_r+0xa7c>
 8109192:	4601      	mov	r1, r0
 8109194:	4658      	mov	r0, fp
 8109196:	f000 fb55 	bl	8109844 <__mcmp>
 810919a:	9b08      	ldr	r3, [sp, #32]
 810919c:	4602      	mov	r2, r0
 810919e:	4629      	mov	r1, r5
 81091a0:	4620      	mov	r0, r4
 81091a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81091a6:	f000 f90f 	bl	81093c8 <_Bfree>
 81091aa:	9b05      	ldr	r3, [sp, #20]
 81091ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81091ae:	9d01      	ldr	r5, [sp, #4]
 81091b0:	ea43 0102 	orr.w	r1, r3, r2
 81091b4:	9b06      	ldr	r3, [sp, #24]
 81091b6:	430b      	orrs	r3, r1
 81091b8:	9b08      	ldr	r3, [sp, #32]
 81091ba:	d10d      	bne.n	81091d8 <_dtoa_r+0xa80>
 81091bc:	2b39      	cmp	r3, #57	; 0x39
 81091be:	d029      	beq.n	8109214 <_dtoa_r+0xabc>
 81091c0:	f1b9 0f00 	cmp.w	r9, #0
 81091c4:	dd01      	ble.n	81091ca <_dtoa_r+0xa72>
 81091c6:	9b04      	ldr	r3, [sp, #16]
 81091c8:	3331      	adds	r3, #49	; 0x31
 81091ca:	9a02      	ldr	r2, [sp, #8]
 81091cc:	7013      	strb	r3, [r2, #0]
 81091ce:	e774      	b.n	81090ba <_dtoa_r+0x962>
 81091d0:	4638      	mov	r0, r7
 81091d2:	e7b9      	b.n	8109148 <_dtoa_r+0x9f0>
 81091d4:	2201      	movs	r2, #1
 81091d6:	e7e2      	b.n	810919e <_dtoa_r+0xa46>
 81091d8:	f1b9 0f00 	cmp.w	r9, #0
 81091dc:	db06      	blt.n	81091ec <_dtoa_r+0xa94>
 81091de:	9905      	ldr	r1, [sp, #20]
 81091e0:	ea41 0909 	orr.w	r9, r1, r9
 81091e4:	9906      	ldr	r1, [sp, #24]
 81091e6:	ea59 0101 	orrs.w	r1, r9, r1
 81091ea:	d120      	bne.n	810922e <_dtoa_r+0xad6>
 81091ec:	2a00      	cmp	r2, #0
 81091ee:	ddec      	ble.n	81091ca <_dtoa_r+0xa72>
 81091f0:	4659      	mov	r1, fp
 81091f2:	2201      	movs	r2, #1
 81091f4:	4620      	mov	r0, r4
 81091f6:	9301      	str	r3, [sp, #4]
 81091f8:	f000 fab8 	bl	810976c <__lshift>
 81091fc:	4631      	mov	r1, r6
 81091fe:	4683      	mov	fp, r0
 8109200:	f000 fb20 	bl	8109844 <__mcmp>
 8109204:	2800      	cmp	r0, #0
 8109206:	9b01      	ldr	r3, [sp, #4]
 8109208:	dc02      	bgt.n	8109210 <_dtoa_r+0xab8>
 810920a:	d1de      	bne.n	81091ca <_dtoa_r+0xa72>
 810920c:	07da      	lsls	r2, r3, #31
 810920e:	d5dc      	bpl.n	81091ca <_dtoa_r+0xa72>
 8109210:	2b39      	cmp	r3, #57	; 0x39
 8109212:	d1d8      	bne.n	81091c6 <_dtoa_r+0xa6e>
 8109214:	9a02      	ldr	r2, [sp, #8]
 8109216:	2339      	movs	r3, #57	; 0x39
 8109218:	7013      	strb	r3, [r2, #0]
 810921a:	462b      	mov	r3, r5
 810921c:	461d      	mov	r5, r3
 810921e:	3b01      	subs	r3, #1
 8109220:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109224:	2a39      	cmp	r2, #57	; 0x39
 8109226:	d050      	beq.n	81092ca <_dtoa_r+0xb72>
 8109228:	3201      	adds	r2, #1
 810922a:	701a      	strb	r2, [r3, #0]
 810922c:	e745      	b.n	81090ba <_dtoa_r+0x962>
 810922e:	2a00      	cmp	r2, #0
 8109230:	dd03      	ble.n	810923a <_dtoa_r+0xae2>
 8109232:	2b39      	cmp	r3, #57	; 0x39
 8109234:	d0ee      	beq.n	8109214 <_dtoa_r+0xabc>
 8109236:	3301      	adds	r3, #1
 8109238:	e7c7      	b.n	81091ca <_dtoa_r+0xa72>
 810923a:	9a01      	ldr	r2, [sp, #4]
 810923c:	9907      	ldr	r1, [sp, #28]
 810923e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8109242:	428a      	cmp	r2, r1
 8109244:	d02a      	beq.n	810929c <_dtoa_r+0xb44>
 8109246:	4659      	mov	r1, fp
 8109248:	2300      	movs	r3, #0
 810924a:	220a      	movs	r2, #10
 810924c:	4620      	mov	r0, r4
 810924e:	f000 f8dd 	bl	810940c <__multadd>
 8109252:	45b8      	cmp	r8, r7
 8109254:	4683      	mov	fp, r0
 8109256:	f04f 0300 	mov.w	r3, #0
 810925a:	f04f 020a 	mov.w	r2, #10
 810925e:	4641      	mov	r1, r8
 8109260:	4620      	mov	r0, r4
 8109262:	d107      	bne.n	8109274 <_dtoa_r+0xb1c>
 8109264:	f000 f8d2 	bl	810940c <__multadd>
 8109268:	4680      	mov	r8, r0
 810926a:	4607      	mov	r7, r0
 810926c:	9b01      	ldr	r3, [sp, #4]
 810926e:	3301      	adds	r3, #1
 8109270:	9301      	str	r3, [sp, #4]
 8109272:	e775      	b.n	8109160 <_dtoa_r+0xa08>
 8109274:	f000 f8ca 	bl	810940c <__multadd>
 8109278:	4639      	mov	r1, r7
 810927a:	4680      	mov	r8, r0
 810927c:	2300      	movs	r3, #0
 810927e:	220a      	movs	r2, #10
 8109280:	4620      	mov	r0, r4
 8109282:	f000 f8c3 	bl	810940c <__multadd>
 8109286:	4607      	mov	r7, r0
 8109288:	e7f0      	b.n	810926c <_dtoa_r+0xb14>
 810928a:	f1b9 0f00 	cmp.w	r9, #0
 810928e:	9a00      	ldr	r2, [sp, #0]
 8109290:	bfcc      	ite	gt
 8109292:	464d      	movgt	r5, r9
 8109294:	2501      	movle	r5, #1
 8109296:	4415      	add	r5, r2
 8109298:	f04f 0800 	mov.w	r8, #0
 810929c:	4659      	mov	r1, fp
 810929e:	2201      	movs	r2, #1
 81092a0:	4620      	mov	r0, r4
 81092a2:	9301      	str	r3, [sp, #4]
 81092a4:	f000 fa62 	bl	810976c <__lshift>
 81092a8:	4631      	mov	r1, r6
 81092aa:	4683      	mov	fp, r0
 81092ac:	f000 faca 	bl	8109844 <__mcmp>
 81092b0:	2800      	cmp	r0, #0
 81092b2:	dcb2      	bgt.n	810921a <_dtoa_r+0xac2>
 81092b4:	d102      	bne.n	81092bc <_dtoa_r+0xb64>
 81092b6:	9b01      	ldr	r3, [sp, #4]
 81092b8:	07db      	lsls	r3, r3, #31
 81092ba:	d4ae      	bmi.n	810921a <_dtoa_r+0xac2>
 81092bc:	462b      	mov	r3, r5
 81092be:	461d      	mov	r5, r3
 81092c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81092c4:	2a30      	cmp	r2, #48	; 0x30
 81092c6:	d0fa      	beq.n	81092be <_dtoa_r+0xb66>
 81092c8:	e6f7      	b.n	81090ba <_dtoa_r+0x962>
 81092ca:	9a00      	ldr	r2, [sp, #0]
 81092cc:	429a      	cmp	r2, r3
 81092ce:	d1a5      	bne.n	810921c <_dtoa_r+0xac4>
 81092d0:	f10a 0a01 	add.w	sl, sl, #1
 81092d4:	2331      	movs	r3, #49	; 0x31
 81092d6:	e779      	b.n	81091cc <_dtoa_r+0xa74>
 81092d8:	4b13      	ldr	r3, [pc, #76]	; (8109328 <_dtoa_r+0xbd0>)
 81092da:	f7ff baaf 	b.w	810883c <_dtoa_r+0xe4>
 81092de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81092e0:	2b00      	cmp	r3, #0
 81092e2:	f47f aa86 	bne.w	81087f2 <_dtoa_r+0x9a>
 81092e6:	4b11      	ldr	r3, [pc, #68]	; (810932c <_dtoa_r+0xbd4>)
 81092e8:	f7ff baa8 	b.w	810883c <_dtoa_r+0xe4>
 81092ec:	f1b9 0f00 	cmp.w	r9, #0
 81092f0:	dc03      	bgt.n	81092fa <_dtoa_r+0xba2>
 81092f2:	9b05      	ldr	r3, [sp, #20]
 81092f4:	2b02      	cmp	r3, #2
 81092f6:	f73f aec9 	bgt.w	810908c <_dtoa_r+0x934>
 81092fa:	9d00      	ldr	r5, [sp, #0]
 81092fc:	4631      	mov	r1, r6
 81092fe:	4658      	mov	r0, fp
 8109300:	f7ff f99c 	bl	810863c <quorem>
 8109304:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8109308:	f805 3b01 	strb.w	r3, [r5], #1
 810930c:	9a00      	ldr	r2, [sp, #0]
 810930e:	1aaa      	subs	r2, r5, r2
 8109310:	4591      	cmp	r9, r2
 8109312:	ddba      	ble.n	810928a <_dtoa_r+0xb32>
 8109314:	4659      	mov	r1, fp
 8109316:	2300      	movs	r3, #0
 8109318:	220a      	movs	r2, #10
 810931a:	4620      	mov	r0, r4
 810931c:	f000 f876 	bl	810940c <__multadd>
 8109320:	4683      	mov	fp, r0
 8109322:	e7eb      	b.n	81092fc <_dtoa_r+0xba4>
 8109324:	0810a7d3 	.word	0x0810a7d3
 8109328:	0810a72c 	.word	0x0810a72c
 810932c:	0810a750 	.word	0x0810a750

08109330 <_localeconv_r>:
 8109330:	4800      	ldr	r0, [pc, #0]	; (8109334 <_localeconv_r+0x4>)
 8109332:	4770      	bx	lr
 8109334:	10000164 	.word	0x10000164

08109338 <malloc>:
 8109338:	4b02      	ldr	r3, [pc, #8]	; (8109344 <malloc+0xc>)
 810933a:	4601      	mov	r1, r0
 810933c:	6818      	ldr	r0, [r3, #0]
 810933e:	f000 bbe1 	b.w	8109b04 <_malloc_r>
 8109342:	bf00      	nop
 8109344:	10000010 	.word	0x10000010

08109348 <_Balloc>:
 8109348:	b570      	push	{r4, r5, r6, lr}
 810934a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810934c:	4604      	mov	r4, r0
 810934e:	460d      	mov	r5, r1
 8109350:	b976      	cbnz	r6, 8109370 <_Balloc+0x28>
 8109352:	2010      	movs	r0, #16
 8109354:	f7ff fff0 	bl	8109338 <malloc>
 8109358:	4602      	mov	r2, r0
 810935a:	6260      	str	r0, [r4, #36]	; 0x24
 810935c:	b920      	cbnz	r0, 8109368 <_Balloc+0x20>
 810935e:	4b18      	ldr	r3, [pc, #96]	; (81093c0 <_Balloc+0x78>)
 8109360:	4818      	ldr	r0, [pc, #96]	; (81093c4 <_Balloc+0x7c>)
 8109362:	2166      	movs	r1, #102	; 0x66
 8109364:	f000 fc38 	bl	8109bd8 <__assert_func>
 8109368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810936c:	6006      	str	r6, [r0, #0]
 810936e:	60c6      	str	r6, [r0, #12]
 8109370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8109372:	68f3      	ldr	r3, [r6, #12]
 8109374:	b183      	cbz	r3, 8109398 <_Balloc+0x50>
 8109376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109378:	68db      	ldr	r3, [r3, #12]
 810937a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810937e:	b9b8      	cbnz	r0, 81093b0 <_Balloc+0x68>
 8109380:	2101      	movs	r1, #1
 8109382:	fa01 f605 	lsl.w	r6, r1, r5
 8109386:	1d72      	adds	r2, r6, #5
 8109388:	0092      	lsls	r2, r2, #2
 810938a:	4620      	mov	r0, r4
 810938c:	f000 fb5a 	bl	8109a44 <_calloc_r>
 8109390:	b160      	cbz	r0, 81093ac <_Balloc+0x64>
 8109392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8109396:	e00e      	b.n	81093b6 <_Balloc+0x6e>
 8109398:	2221      	movs	r2, #33	; 0x21
 810939a:	2104      	movs	r1, #4
 810939c:	4620      	mov	r0, r4
 810939e:	f000 fb51 	bl	8109a44 <_calloc_r>
 81093a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81093a4:	60f0      	str	r0, [r6, #12]
 81093a6:	68db      	ldr	r3, [r3, #12]
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d1e4      	bne.n	8109376 <_Balloc+0x2e>
 81093ac:	2000      	movs	r0, #0
 81093ae:	bd70      	pop	{r4, r5, r6, pc}
 81093b0:	6802      	ldr	r2, [r0, #0]
 81093b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81093b6:	2300      	movs	r3, #0
 81093b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81093bc:	e7f7      	b.n	81093ae <_Balloc+0x66>
 81093be:	bf00      	nop
 81093c0:	0810a75d 	.word	0x0810a75d
 81093c4:	0810a7e4 	.word	0x0810a7e4

081093c8 <_Bfree>:
 81093c8:	b570      	push	{r4, r5, r6, lr}
 81093ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81093cc:	4605      	mov	r5, r0
 81093ce:	460c      	mov	r4, r1
 81093d0:	b976      	cbnz	r6, 81093f0 <_Bfree+0x28>
 81093d2:	2010      	movs	r0, #16
 81093d4:	f7ff ffb0 	bl	8109338 <malloc>
 81093d8:	4602      	mov	r2, r0
 81093da:	6268      	str	r0, [r5, #36]	; 0x24
 81093dc:	b920      	cbnz	r0, 81093e8 <_Bfree+0x20>
 81093de:	4b09      	ldr	r3, [pc, #36]	; (8109404 <_Bfree+0x3c>)
 81093e0:	4809      	ldr	r0, [pc, #36]	; (8109408 <_Bfree+0x40>)
 81093e2:	218a      	movs	r1, #138	; 0x8a
 81093e4:	f000 fbf8 	bl	8109bd8 <__assert_func>
 81093e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81093ec:	6006      	str	r6, [r0, #0]
 81093ee:	60c6      	str	r6, [r0, #12]
 81093f0:	b13c      	cbz	r4, 8109402 <_Bfree+0x3a>
 81093f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 81093f4:	6862      	ldr	r2, [r4, #4]
 81093f6:	68db      	ldr	r3, [r3, #12]
 81093f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81093fc:	6021      	str	r1, [r4, #0]
 81093fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8109402:	bd70      	pop	{r4, r5, r6, pc}
 8109404:	0810a75d 	.word	0x0810a75d
 8109408:	0810a7e4 	.word	0x0810a7e4

0810940c <__multadd>:
 810940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109410:	690e      	ldr	r6, [r1, #16]
 8109412:	4607      	mov	r7, r0
 8109414:	4698      	mov	r8, r3
 8109416:	460c      	mov	r4, r1
 8109418:	f101 0014 	add.w	r0, r1, #20
 810941c:	2300      	movs	r3, #0
 810941e:	6805      	ldr	r5, [r0, #0]
 8109420:	b2a9      	uxth	r1, r5
 8109422:	fb02 8101 	mla	r1, r2, r1, r8
 8109426:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810942a:	0c2d      	lsrs	r5, r5, #16
 810942c:	fb02 c505 	mla	r5, r2, r5, ip
 8109430:	b289      	uxth	r1, r1
 8109432:	3301      	adds	r3, #1
 8109434:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8109438:	429e      	cmp	r6, r3
 810943a:	f840 1b04 	str.w	r1, [r0], #4
 810943e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8109442:	dcec      	bgt.n	810941e <__multadd+0x12>
 8109444:	f1b8 0f00 	cmp.w	r8, #0
 8109448:	d022      	beq.n	8109490 <__multadd+0x84>
 810944a:	68a3      	ldr	r3, [r4, #8]
 810944c:	42b3      	cmp	r3, r6
 810944e:	dc19      	bgt.n	8109484 <__multadd+0x78>
 8109450:	6861      	ldr	r1, [r4, #4]
 8109452:	4638      	mov	r0, r7
 8109454:	3101      	adds	r1, #1
 8109456:	f7ff ff77 	bl	8109348 <_Balloc>
 810945a:	4605      	mov	r5, r0
 810945c:	b928      	cbnz	r0, 810946a <__multadd+0x5e>
 810945e:	4602      	mov	r2, r0
 8109460:	4b0d      	ldr	r3, [pc, #52]	; (8109498 <__multadd+0x8c>)
 8109462:	480e      	ldr	r0, [pc, #56]	; (810949c <__multadd+0x90>)
 8109464:	21b5      	movs	r1, #181	; 0xb5
 8109466:	f000 fbb7 	bl	8109bd8 <__assert_func>
 810946a:	6922      	ldr	r2, [r4, #16]
 810946c:	3202      	adds	r2, #2
 810946e:	f104 010c 	add.w	r1, r4, #12
 8109472:	0092      	lsls	r2, r2, #2
 8109474:	300c      	adds	r0, #12
 8109476:	f7fe fc61 	bl	8107d3c <memcpy>
 810947a:	4621      	mov	r1, r4
 810947c:	4638      	mov	r0, r7
 810947e:	f7ff ffa3 	bl	81093c8 <_Bfree>
 8109482:	462c      	mov	r4, r5
 8109484:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8109488:	3601      	adds	r6, #1
 810948a:	f8c3 8014 	str.w	r8, [r3, #20]
 810948e:	6126      	str	r6, [r4, #16]
 8109490:	4620      	mov	r0, r4
 8109492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109496:	bf00      	nop
 8109498:	0810a7d3 	.word	0x0810a7d3
 810949c:	0810a7e4 	.word	0x0810a7e4

081094a0 <__hi0bits>:
 81094a0:	0c03      	lsrs	r3, r0, #16
 81094a2:	041b      	lsls	r3, r3, #16
 81094a4:	b9d3      	cbnz	r3, 81094dc <__hi0bits+0x3c>
 81094a6:	0400      	lsls	r0, r0, #16
 81094a8:	2310      	movs	r3, #16
 81094aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 81094ae:	bf04      	itt	eq
 81094b0:	0200      	lsleq	r0, r0, #8
 81094b2:	3308      	addeq	r3, #8
 81094b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 81094b8:	bf04      	itt	eq
 81094ba:	0100      	lsleq	r0, r0, #4
 81094bc:	3304      	addeq	r3, #4
 81094be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 81094c2:	bf04      	itt	eq
 81094c4:	0080      	lsleq	r0, r0, #2
 81094c6:	3302      	addeq	r3, #2
 81094c8:	2800      	cmp	r0, #0
 81094ca:	db05      	blt.n	81094d8 <__hi0bits+0x38>
 81094cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 81094d0:	f103 0301 	add.w	r3, r3, #1
 81094d4:	bf08      	it	eq
 81094d6:	2320      	moveq	r3, #32
 81094d8:	4618      	mov	r0, r3
 81094da:	4770      	bx	lr
 81094dc:	2300      	movs	r3, #0
 81094de:	e7e4      	b.n	81094aa <__hi0bits+0xa>

081094e0 <__lo0bits>:
 81094e0:	6803      	ldr	r3, [r0, #0]
 81094e2:	f013 0207 	ands.w	r2, r3, #7
 81094e6:	4601      	mov	r1, r0
 81094e8:	d00b      	beq.n	8109502 <__lo0bits+0x22>
 81094ea:	07da      	lsls	r2, r3, #31
 81094ec:	d424      	bmi.n	8109538 <__lo0bits+0x58>
 81094ee:	0798      	lsls	r0, r3, #30
 81094f0:	bf49      	itett	mi
 81094f2:	085b      	lsrmi	r3, r3, #1
 81094f4:	089b      	lsrpl	r3, r3, #2
 81094f6:	2001      	movmi	r0, #1
 81094f8:	600b      	strmi	r3, [r1, #0]
 81094fa:	bf5c      	itt	pl
 81094fc:	600b      	strpl	r3, [r1, #0]
 81094fe:	2002      	movpl	r0, #2
 8109500:	4770      	bx	lr
 8109502:	b298      	uxth	r0, r3
 8109504:	b9b0      	cbnz	r0, 8109534 <__lo0bits+0x54>
 8109506:	0c1b      	lsrs	r3, r3, #16
 8109508:	2010      	movs	r0, #16
 810950a:	f013 0fff 	tst.w	r3, #255	; 0xff
 810950e:	bf04      	itt	eq
 8109510:	0a1b      	lsreq	r3, r3, #8
 8109512:	3008      	addeq	r0, #8
 8109514:	071a      	lsls	r2, r3, #28
 8109516:	bf04      	itt	eq
 8109518:	091b      	lsreq	r3, r3, #4
 810951a:	3004      	addeq	r0, #4
 810951c:	079a      	lsls	r2, r3, #30
 810951e:	bf04      	itt	eq
 8109520:	089b      	lsreq	r3, r3, #2
 8109522:	3002      	addeq	r0, #2
 8109524:	07da      	lsls	r2, r3, #31
 8109526:	d403      	bmi.n	8109530 <__lo0bits+0x50>
 8109528:	085b      	lsrs	r3, r3, #1
 810952a:	f100 0001 	add.w	r0, r0, #1
 810952e:	d005      	beq.n	810953c <__lo0bits+0x5c>
 8109530:	600b      	str	r3, [r1, #0]
 8109532:	4770      	bx	lr
 8109534:	4610      	mov	r0, r2
 8109536:	e7e8      	b.n	810950a <__lo0bits+0x2a>
 8109538:	2000      	movs	r0, #0
 810953a:	4770      	bx	lr
 810953c:	2020      	movs	r0, #32
 810953e:	4770      	bx	lr

08109540 <__i2b>:
 8109540:	b510      	push	{r4, lr}
 8109542:	460c      	mov	r4, r1
 8109544:	2101      	movs	r1, #1
 8109546:	f7ff feff 	bl	8109348 <_Balloc>
 810954a:	4602      	mov	r2, r0
 810954c:	b928      	cbnz	r0, 810955a <__i2b+0x1a>
 810954e:	4b05      	ldr	r3, [pc, #20]	; (8109564 <__i2b+0x24>)
 8109550:	4805      	ldr	r0, [pc, #20]	; (8109568 <__i2b+0x28>)
 8109552:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8109556:	f000 fb3f 	bl	8109bd8 <__assert_func>
 810955a:	2301      	movs	r3, #1
 810955c:	6144      	str	r4, [r0, #20]
 810955e:	6103      	str	r3, [r0, #16]
 8109560:	bd10      	pop	{r4, pc}
 8109562:	bf00      	nop
 8109564:	0810a7d3 	.word	0x0810a7d3
 8109568:	0810a7e4 	.word	0x0810a7e4

0810956c <__multiply>:
 810956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109570:	4614      	mov	r4, r2
 8109572:	690a      	ldr	r2, [r1, #16]
 8109574:	6923      	ldr	r3, [r4, #16]
 8109576:	429a      	cmp	r2, r3
 8109578:	bfb8      	it	lt
 810957a:	460b      	movlt	r3, r1
 810957c:	460d      	mov	r5, r1
 810957e:	bfbc      	itt	lt
 8109580:	4625      	movlt	r5, r4
 8109582:	461c      	movlt	r4, r3
 8109584:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8109588:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810958c:	68ab      	ldr	r3, [r5, #8]
 810958e:	6869      	ldr	r1, [r5, #4]
 8109590:	eb0a 0709 	add.w	r7, sl, r9
 8109594:	42bb      	cmp	r3, r7
 8109596:	b085      	sub	sp, #20
 8109598:	bfb8      	it	lt
 810959a:	3101      	addlt	r1, #1
 810959c:	f7ff fed4 	bl	8109348 <_Balloc>
 81095a0:	b930      	cbnz	r0, 81095b0 <__multiply+0x44>
 81095a2:	4602      	mov	r2, r0
 81095a4:	4b42      	ldr	r3, [pc, #264]	; (81096b0 <__multiply+0x144>)
 81095a6:	4843      	ldr	r0, [pc, #268]	; (81096b4 <__multiply+0x148>)
 81095a8:	f240 115d 	movw	r1, #349	; 0x15d
 81095ac:	f000 fb14 	bl	8109bd8 <__assert_func>
 81095b0:	f100 0614 	add.w	r6, r0, #20
 81095b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 81095b8:	4633      	mov	r3, r6
 81095ba:	2200      	movs	r2, #0
 81095bc:	4543      	cmp	r3, r8
 81095be:	d31e      	bcc.n	81095fe <__multiply+0x92>
 81095c0:	f105 0c14 	add.w	ip, r5, #20
 81095c4:	f104 0314 	add.w	r3, r4, #20
 81095c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 81095cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 81095d0:	9202      	str	r2, [sp, #8]
 81095d2:	ebac 0205 	sub.w	r2, ip, r5
 81095d6:	3a15      	subs	r2, #21
 81095d8:	f022 0203 	bic.w	r2, r2, #3
 81095dc:	3204      	adds	r2, #4
 81095de:	f105 0115 	add.w	r1, r5, #21
 81095e2:	458c      	cmp	ip, r1
 81095e4:	bf38      	it	cc
 81095e6:	2204      	movcc	r2, #4
 81095e8:	9201      	str	r2, [sp, #4]
 81095ea:	9a02      	ldr	r2, [sp, #8]
 81095ec:	9303      	str	r3, [sp, #12]
 81095ee:	429a      	cmp	r2, r3
 81095f0:	d808      	bhi.n	8109604 <__multiply+0x98>
 81095f2:	2f00      	cmp	r7, #0
 81095f4:	dc55      	bgt.n	81096a2 <__multiply+0x136>
 81095f6:	6107      	str	r7, [r0, #16]
 81095f8:	b005      	add	sp, #20
 81095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81095fe:	f843 2b04 	str.w	r2, [r3], #4
 8109602:	e7db      	b.n	81095bc <__multiply+0x50>
 8109604:	f8b3 a000 	ldrh.w	sl, [r3]
 8109608:	f1ba 0f00 	cmp.w	sl, #0
 810960c:	d020      	beq.n	8109650 <__multiply+0xe4>
 810960e:	f105 0e14 	add.w	lr, r5, #20
 8109612:	46b1      	mov	r9, r6
 8109614:	2200      	movs	r2, #0
 8109616:	f85e 4b04 	ldr.w	r4, [lr], #4
 810961a:	f8d9 b000 	ldr.w	fp, [r9]
 810961e:	b2a1      	uxth	r1, r4
 8109620:	fa1f fb8b 	uxth.w	fp, fp
 8109624:	fb0a b101 	mla	r1, sl, r1, fp
 8109628:	4411      	add	r1, r2
 810962a:	f8d9 2000 	ldr.w	r2, [r9]
 810962e:	0c24      	lsrs	r4, r4, #16
 8109630:	0c12      	lsrs	r2, r2, #16
 8109632:	fb0a 2404 	mla	r4, sl, r4, r2
 8109636:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810963a:	b289      	uxth	r1, r1
 810963c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8109640:	45f4      	cmp	ip, lr
 8109642:	f849 1b04 	str.w	r1, [r9], #4
 8109646:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810964a:	d8e4      	bhi.n	8109616 <__multiply+0xaa>
 810964c:	9901      	ldr	r1, [sp, #4]
 810964e:	5072      	str	r2, [r6, r1]
 8109650:	9a03      	ldr	r2, [sp, #12]
 8109652:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8109656:	3304      	adds	r3, #4
 8109658:	f1b9 0f00 	cmp.w	r9, #0
 810965c:	d01f      	beq.n	810969e <__multiply+0x132>
 810965e:	6834      	ldr	r4, [r6, #0]
 8109660:	f105 0114 	add.w	r1, r5, #20
 8109664:	46b6      	mov	lr, r6
 8109666:	f04f 0a00 	mov.w	sl, #0
 810966a:	880a      	ldrh	r2, [r1, #0]
 810966c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8109670:	fb09 b202 	mla	r2, r9, r2, fp
 8109674:	4492      	add	sl, r2
 8109676:	b2a4      	uxth	r4, r4
 8109678:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810967c:	f84e 4b04 	str.w	r4, [lr], #4
 8109680:	f851 4b04 	ldr.w	r4, [r1], #4
 8109684:	f8be 2000 	ldrh.w	r2, [lr]
 8109688:	0c24      	lsrs	r4, r4, #16
 810968a:	fb09 2404 	mla	r4, r9, r4, r2
 810968e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8109692:	458c      	cmp	ip, r1
 8109694:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8109698:	d8e7      	bhi.n	810966a <__multiply+0xfe>
 810969a:	9a01      	ldr	r2, [sp, #4]
 810969c:	50b4      	str	r4, [r6, r2]
 810969e:	3604      	adds	r6, #4
 81096a0:	e7a3      	b.n	81095ea <__multiply+0x7e>
 81096a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d1a5      	bne.n	81095f6 <__multiply+0x8a>
 81096aa:	3f01      	subs	r7, #1
 81096ac:	e7a1      	b.n	81095f2 <__multiply+0x86>
 81096ae:	bf00      	nop
 81096b0:	0810a7d3 	.word	0x0810a7d3
 81096b4:	0810a7e4 	.word	0x0810a7e4

081096b8 <__pow5mult>:
 81096b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81096bc:	4615      	mov	r5, r2
 81096be:	f012 0203 	ands.w	r2, r2, #3
 81096c2:	4606      	mov	r6, r0
 81096c4:	460f      	mov	r7, r1
 81096c6:	d007      	beq.n	81096d8 <__pow5mult+0x20>
 81096c8:	4c25      	ldr	r4, [pc, #148]	; (8109760 <__pow5mult+0xa8>)
 81096ca:	3a01      	subs	r2, #1
 81096cc:	2300      	movs	r3, #0
 81096ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81096d2:	f7ff fe9b 	bl	810940c <__multadd>
 81096d6:	4607      	mov	r7, r0
 81096d8:	10ad      	asrs	r5, r5, #2
 81096da:	d03d      	beq.n	8109758 <__pow5mult+0xa0>
 81096dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 81096de:	b97c      	cbnz	r4, 8109700 <__pow5mult+0x48>
 81096e0:	2010      	movs	r0, #16
 81096e2:	f7ff fe29 	bl	8109338 <malloc>
 81096e6:	4602      	mov	r2, r0
 81096e8:	6270      	str	r0, [r6, #36]	; 0x24
 81096ea:	b928      	cbnz	r0, 81096f8 <__pow5mult+0x40>
 81096ec:	4b1d      	ldr	r3, [pc, #116]	; (8109764 <__pow5mult+0xac>)
 81096ee:	481e      	ldr	r0, [pc, #120]	; (8109768 <__pow5mult+0xb0>)
 81096f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 81096f4:	f000 fa70 	bl	8109bd8 <__assert_func>
 81096f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81096fc:	6004      	str	r4, [r0, #0]
 81096fe:	60c4      	str	r4, [r0, #12]
 8109700:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8109704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8109708:	b94c      	cbnz	r4, 810971e <__pow5mult+0x66>
 810970a:	f240 2171 	movw	r1, #625	; 0x271
 810970e:	4630      	mov	r0, r6
 8109710:	f7ff ff16 	bl	8109540 <__i2b>
 8109714:	2300      	movs	r3, #0
 8109716:	f8c8 0008 	str.w	r0, [r8, #8]
 810971a:	4604      	mov	r4, r0
 810971c:	6003      	str	r3, [r0, #0]
 810971e:	f04f 0900 	mov.w	r9, #0
 8109722:	07eb      	lsls	r3, r5, #31
 8109724:	d50a      	bpl.n	810973c <__pow5mult+0x84>
 8109726:	4639      	mov	r1, r7
 8109728:	4622      	mov	r2, r4
 810972a:	4630      	mov	r0, r6
 810972c:	f7ff ff1e 	bl	810956c <__multiply>
 8109730:	4639      	mov	r1, r7
 8109732:	4680      	mov	r8, r0
 8109734:	4630      	mov	r0, r6
 8109736:	f7ff fe47 	bl	81093c8 <_Bfree>
 810973a:	4647      	mov	r7, r8
 810973c:	106d      	asrs	r5, r5, #1
 810973e:	d00b      	beq.n	8109758 <__pow5mult+0xa0>
 8109740:	6820      	ldr	r0, [r4, #0]
 8109742:	b938      	cbnz	r0, 8109754 <__pow5mult+0x9c>
 8109744:	4622      	mov	r2, r4
 8109746:	4621      	mov	r1, r4
 8109748:	4630      	mov	r0, r6
 810974a:	f7ff ff0f 	bl	810956c <__multiply>
 810974e:	6020      	str	r0, [r4, #0]
 8109750:	f8c0 9000 	str.w	r9, [r0]
 8109754:	4604      	mov	r4, r0
 8109756:	e7e4      	b.n	8109722 <__pow5mult+0x6a>
 8109758:	4638      	mov	r0, r7
 810975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810975e:	bf00      	nop
 8109760:	0810a938 	.word	0x0810a938
 8109764:	0810a75d 	.word	0x0810a75d
 8109768:	0810a7e4 	.word	0x0810a7e4

0810976c <__lshift>:
 810976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109770:	460c      	mov	r4, r1
 8109772:	6849      	ldr	r1, [r1, #4]
 8109774:	6923      	ldr	r3, [r4, #16]
 8109776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810977a:	68a3      	ldr	r3, [r4, #8]
 810977c:	4607      	mov	r7, r0
 810977e:	4691      	mov	r9, r2
 8109780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8109784:	f108 0601 	add.w	r6, r8, #1
 8109788:	42b3      	cmp	r3, r6
 810978a:	db0b      	blt.n	81097a4 <__lshift+0x38>
 810978c:	4638      	mov	r0, r7
 810978e:	f7ff fddb 	bl	8109348 <_Balloc>
 8109792:	4605      	mov	r5, r0
 8109794:	b948      	cbnz	r0, 81097aa <__lshift+0x3e>
 8109796:	4602      	mov	r2, r0
 8109798:	4b28      	ldr	r3, [pc, #160]	; (810983c <__lshift+0xd0>)
 810979a:	4829      	ldr	r0, [pc, #164]	; (8109840 <__lshift+0xd4>)
 810979c:	f240 11d9 	movw	r1, #473	; 0x1d9
 81097a0:	f000 fa1a 	bl	8109bd8 <__assert_func>
 81097a4:	3101      	adds	r1, #1
 81097a6:	005b      	lsls	r3, r3, #1
 81097a8:	e7ee      	b.n	8109788 <__lshift+0x1c>
 81097aa:	2300      	movs	r3, #0
 81097ac:	f100 0114 	add.w	r1, r0, #20
 81097b0:	f100 0210 	add.w	r2, r0, #16
 81097b4:	4618      	mov	r0, r3
 81097b6:	4553      	cmp	r3, sl
 81097b8:	db33      	blt.n	8109822 <__lshift+0xb6>
 81097ba:	6920      	ldr	r0, [r4, #16]
 81097bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 81097c0:	f104 0314 	add.w	r3, r4, #20
 81097c4:	f019 091f 	ands.w	r9, r9, #31
 81097c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81097cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 81097d0:	d02b      	beq.n	810982a <__lshift+0xbe>
 81097d2:	f1c9 0e20 	rsb	lr, r9, #32
 81097d6:	468a      	mov	sl, r1
 81097d8:	2200      	movs	r2, #0
 81097da:	6818      	ldr	r0, [r3, #0]
 81097dc:	fa00 f009 	lsl.w	r0, r0, r9
 81097e0:	4302      	orrs	r2, r0
 81097e2:	f84a 2b04 	str.w	r2, [sl], #4
 81097e6:	f853 2b04 	ldr.w	r2, [r3], #4
 81097ea:	459c      	cmp	ip, r3
 81097ec:	fa22 f20e 	lsr.w	r2, r2, lr
 81097f0:	d8f3      	bhi.n	81097da <__lshift+0x6e>
 81097f2:	ebac 0304 	sub.w	r3, ip, r4
 81097f6:	3b15      	subs	r3, #21
 81097f8:	f023 0303 	bic.w	r3, r3, #3
 81097fc:	3304      	adds	r3, #4
 81097fe:	f104 0015 	add.w	r0, r4, #21
 8109802:	4584      	cmp	ip, r0
 8109804:	bf38      	it	cc
 8109806:	2304      	movcc	r3, #4
 8109808:	50ca      	str	r2, [r1, r3]
 810980a:	b10a      	cbz	r2, 8109810 <__lshift+0xa4>
 810980c:	f108 0602 	add.w	r6, r8, #2
 8109810:	3e01      	subs	r6, #1
 8109812:	4638      	mov	r0, r7
 8109814:	612e      	str	r6, [r5, #16]
 8109816:	4621      	mov	r1, r4
 8109818:	f7ff fdd6 	bl	81093c8 <_Bfree>
 810981c:	4628      	mov	r0, r5
 810981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109822:	f842 0f04 	str.w	r0, [r2, #4]!
 8109826:	3301      	adds	r3, #1
 8109828:	e7c5      	b.n	81097b6 <__lshift+0x4a>
 810982a:	3904      	subs	r1, #4
 810982c:	f853 2b04 	ldr.w	r2, [r3], #4
 8109830:	f841 2f04 	str.w	r2, [r1, #4]!
 8109834:	459c      	cmp	ip, r3
 8109836:	d8f9      	bhi.n	810982c <__lshift+0xc0>
 8109838:	e7ea      	b.n	8109810 <__lshift+0xa4>
 810983a:	bf00      	nop
 810983c:	0810a7d3 	.word	0x0810a7d3
 8109840:	0810a7e4 	.word	0x0810a7e4

08109844 <__mcmp>:
 8109844:	b530      	push	{r4, r5, lr}
 8109846:	6902      	ldr	r2, [r0, #16]
 8109848:	690c      	ldr	r4, [r1, #16]
 810984a:	1b12      	subs	r2, r2, r4
 810984c:	d10e      	bne.n	810986c <__mcmp+0x28>
 810984e:	f100 0314 	add.w	r3, r0, #20
 8109852:	3114      	adds	r1, #20
 8109854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8109858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810985c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8109860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8109864:	42a5      	cmp	r5, r4
 8109866:	d003      	beq.n	8109870 <__mcmp+0x2c>
 8109868:	d305      	bcc.n	8109876 <__mcmp+0x32>
 810986a:	2201      	movs	r2, #1
 810986c:	4610      	mov	r0, r2
 810986e:	bd30      	pop	{r4, r5, pc}
 8109870:	4283      	cmp	r3, r0
 8109872:	d3f3      	bcc.n	810985c <__mcmp+0x18>
 8109874:	e7fa      	b.n	810986c <__mcmp+0x28>
 8109876:	f04f 32ff 	mov.w	r2, #4294967295
 810987a:	e7f7      	b.n	810986c <__mcmp+0x28>

0810987c <__mdiff>:
 810987c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109880:	460c      	mov	r4, r1
 8109882:	4606      	mov	r6, r0
 8109884:	4611      	mov	r1, r2
 8109886:	4620      	mov	r0, r4
 8109888:	4617      	mov	r7, r2
 810988a:	f7ff ffdb 	bl	8109844 <__mcmp>
 810988e:	1e05      	subs	r5, r0, #0
 8109890:	d110      	bne.n	81098b4 <__mdiff+0x38>
 8109892:	4629      	mov	r1, r5
 8109894:	4630      	mov	r0, r6
 8109896:	f7ff fd57 	bl	8109348 <_Balloc>
 810989a:	b930      	cbnz	r0, 81098aa <__mdiff+0x2e>
 810989c:	4b39      	ldr	r3, [pc, #228]	; (8109984 <__mdiff+0x108>)
 810989e:	4602      	mov	r2, r0
 81098a0:	f240 2132 	movw	r1, #562	; 0x232
 81098a4:	4838      	ldr	r0, [pc, #224]	; (8109988 <__mdiff+0x10c>)
 81098a6:	f000 f997 	bl	8109bd8 <__assert_func>
 81098aa:	2301      	movs	r3, #1
 81098ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 81098b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81098b4:	bfa4      	itt	ge
 81098b6:	463b      	movge	r3, r7
 81098b8:	4627      	movge	r7, r4
 81098ba:	4630      	mov	r0, r6
 81098bc:	6879      	ldr	r1, [r7, #4]
 81098be:	bfa6      	itte	ge
 81098c0:	461c      	movge	r4, r3
 81098c2:	2500      	movge	r5, #0
 81098c4:	2501      	movlt	r5, #1
 81098c6:	f7ff fd3f 	bl	8109348 <_Balloc>
 81098ca:	b920      	cbnz	r0, 81098d6 <__mdiff+0x5a>
 81098cc:	4b2d      	ldr	r3, [pc, #180]	; (8109984 <__mdiff+0x108>)
 81098ce:	4602      	mov	r2, r0
 81098d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 81098d4:	e7e6      	b.n	81098a4 <__mdiff+0x28>
 81098d6:	693e      	ldr	r6, [r7, #16]
 81098d8:	60c5      	str	r5, [r0, #12]
 81098da:	6925      	ldr	r5, [r4, #16]
 81098dc:	f107 0114 	add.w	r1, r7, #20
 81098e0:	f104 0914 	add.w	r9, r4, #20
 81098e4:	f100 0e14 	add.w	lr, r0, #20
 81098e8:	f107 0210 	add.w	r2, r7, #16
 81098ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 81098f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 81098f4:	46f2      	mov	sl, lr
 81098f6:	2700      	movs	r7, #0
 81098f8:	f859 3b04 	ldr.w	r3, [r9], #4
 81098fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8109900:	fa1f f883 	uxth.w	r8, r3
 8109904:	fa17 f78b 	uxtah	r7, r7, fp
 8109908:	0c1b      	lsrs	r3, r3, #16
 810990a:	eba7 0808 	sub.w	r8, r7, r8
 810990e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8109912:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8109916:	fa1f f888 	uxth.w	r8, r8
 810991a:	141f      	asrs	r7, r3, #16
 810991c:	454d      	cmp	r5, r9
 810991e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8109922:	f84a 3b04 	str.w	r3, [sl], #4
 8109926:	d8e7      	bhi.n	81098f8 <__mdiff+0x7c>
 8109928:	1b2b      	subs	r3, r5, r4
 810992a:	3b15      	subs	r3, #21
 810992c:	f023 0303 	bic.w	r3, r3, #3
 8109930:	3304      	adds	r3, #4
 8109932:	3415      	adds	r4, #21
 8109934:	42a5      	cmp	r5, r4
 8109936:	bf38      	it	cc
 8109938:	2304      	movcc	r3, #4
 810993a:	4419      	add	r1, r3
 810993c:	4473      	add	r3, lr
 810993e:	469e      	mov	lr, r3
 8109940:	460d      	mov	r5, r1
 8109942:	4565      	cmp	r5, ip
 8109944:	d30e      	bcc.n	8109964 <__mdiff+0xe8>
 8109946:	f10c 0203 	add.w	r2, ip, #3
 810994a:	1a52      	subs	r2, r2, r1
 810994c:	f022 0203 	bic.w	r2, r2, #3
 8109950:	3903      	subs	r1, #3
 8109952:	458c      	cmp	ip, r1
 8109954:	bf38      	it	cc
 8109956:	2200      	movcc	r2, #0
 8109958:	441a      	add	r2, r3
 810995a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810995e:	b17b      	cbz	r3, 8109980 <__mdiff+0x104>
 8109960:	6106      	str	r6, [r0, #16]
 8109962:	e7a5      	b.n	81098b0 <__mdiff+0x34>
 8109964:	f855 8b04 	ldr.w	r8, [r5], #4
 8109968:	fa17 f488 	uxtah	r4, r7, r8
 810996c:	1422      	asrs	r2, r4, #16
 810996e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8109972:	b2a4      	uxth	r4, r4
 8109974:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8109978:	f84e 4b04 	str.w	r4, [lr], #4
 810997c:	1417      	asrs	r7, r2, #16
 810997e:	e7e0      	b.n	8109942 <__mdiff+0xc6>
 8109980:	3e01      	subs	r6, #1
 8109982:	e7ea      	b.n	810995a <__mdiff+0xde>
 8109984:	0810a7d3 	.word	0x0810a7d3
 8109988:	0810a7e4 	.word	0x0810a7e4

0810998c <__d2b>:
 810998c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8109990:	4689      	mov	r9, r1
 8109992:	2101      	movs	r1, #1
 8109994:	ec57 6b10 	vmov	r6, r7, d0
 8109998:	4690      	mov	r8, r2
 810999a:	f7ff fcd5 	bl	8109348 <_Balloc>
 810999e:	4604      	mov	r4, r0
 81099a0:	b930      	cbnz	r0, 81099b0 <__d2b+0x24>
 81099a2:	4602      	mov	r2, r0
 81099a4:	4b25      	ldr	r3, [pc, #148]	; (8109a3c <__d2b+0xb0>)
 81099a6:	4826      	ldr	r0, [pc, #152]	; (8109a40 <__d2b+0xb4>)
 81099a8:	f240 310a 	movw	r1, #778	; 0x30a
 81099ac:	f000 f914 	bl	8109bd8 <__assert_func>
 81099b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 81099b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81099b8:	bb35      	cbnz	r5, 8109a08 <__d2b+0x7c>
 81099ba:	2e00      	cmp	r6, #0
 81099bc:	9301      	str	r3, [sp, #4]
 81099be:	d028      	beq.n	8109a12 <__d2b+0x86>
 81099c0:	4668      	mov	r0, sp
 81099c2:	9600      	str	r6, [sp, #0]
 81099c4:	f7ff fd8c 	bl	81094e0 <__lo0bits>
 81099c8:	9900      	ldr	r1, [sp, #0]
 81099ca:	b300      	cbz	r0, 8109a0e <__d2b+0x82>
 81099cc:	9a01      	ldr	r2, [sp, #4]
 81099ce:	f1c0 0320 	rsb	r3, r0, #32
 81099d2:	fa02 f303 	lsl.w	r3, r2, r3
 81099d6:	430b      	orrs	r3, r1
 81099d8:	40c2      	lsrs	r2, r0
 81099da:	6163      	str	r3, [r4, #20]
 81099dc:	9201      	str	r2, [sp, #4]
 81099de:	9b01      	ldr	r3, [sp, #4]
 81099e0:	61a3      	str	r3, [r4, #24]
 81099e2:	2b00      	cmp	r3, #0
 81099e4:	bf14      	ite	ne
 81099e6:	2202      	movne	r2, #2
 81099e8:	2201      	moveq	r2, #1
 81099ea:	6122      	str	r2, [r4, #16]
 81099ec:	b1d5      	cbz	r5, 8109a24 <__d2b+0x98>
 81099ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 81099f2:	4405      	add	r5, r0
 81099f4:	f8c9 5000 	str.w	r5, [r9]
 81099f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 81099fc:	f8c8 0000 	str.w	r0, [r8]
 8109a00:	4620      	mov	r0, r4
 8109a02:	b003      	add	sp, #12
 8109a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109a0c:	e7d5      	b.n	81099ba <__d2b+0x2e>
 8109a0e:	6161      	str	r1, [r4, #20]
 8109a10:	e7e5      	b.n	81099de <__d2b+0x52>
 8109a12:	a801      	add	r0, sp, #4
 8109a14:	f7ff fd64 	bl	81094e0 <__lo0bits>
 8109a18:	9b01      	ldr	r3, [sp, #4]
 8109a1a:	6163      	str	r3, [r4, #20]
 8109a1c:	2201      	movs	r2, #1
 8109a1e:	6122      	str	r2, [r4, #16]
 8109a20:	3020      	adds	r0, #32
 8109a22:	e7e3      	b.n	81099ec <__d2b+0x60>
 8109a24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109a28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8109a2c:	f8c9 0000 	str.w	r0, [r9]
 8109a30:	6918      	ldr	r0, [r3, #16]
 8109a32:	f7ff fd35 	bl	81094a0 <__hi0bits>
 8109a36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8109a3a:	e7df      	b.n	81099fc <__d2b+0x70>
 8109a3c:	0810a7d3 	.word	0x0810a7d3
 8109a40:	0810a7e4 	.word	0x0810a7e4

08109a44 <_calloc_r>:
 8109a44:	b513      	push	{r0, r1, r4, lr}
 8109a46:	434a      	muls	r2, r1
 8109a48:	4611      	mov	r1, r2
 8109a4a:	9201      	str	r2, [sp, #4]
 8109a4c:	f000 f85a 	bl	8109b04 <_malloc_r>
 8109a50:	4604      	mov	r4, r0
 8109a52:	b118      	cbz	r0, 8109a5c <_calloc_r+0x18>
 8109a54:	9a01      	ldr	r2, [sp, #4]
 8109a56:	2100      	movs	r1, #0
 8109a58:	f7fe f97e 	bl	8107d58 <memset>
 8109a5c:	4620      	mov	r0, r4
 8109a5e:	b002      	add	sp, #8
 8109a60:	bd10      	pop	{r4, pc}
	...

08109a64 <_free_r>:
 8109a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109a66:	2900      	cmp	r1, #0
 8109a68:	d048      	beq.n	8109afc <_free_r+0x98>
 8109a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109a6e:	9001      	str	r0, [sp, #4]
 8109a70:	2b00      	cmp	r3, #0
 8109a72:	f1a1 0404 	sub.w	r4, r1, #4
 8109a76:	bfb8      	it	lt
 8109a78:	18e4      	addlt	r4, r4, r3
 8109a7a:	f000 f8ef 	bl	8109c5c <__malloc_lock>
 8109a7e:	4a20      	ldr	r2, [pc, #128]	; (8109b00 <_free_r+0x9c>)
 8109a80:	9801      	ldr	r0, [sp, #4]
 8109a82:	6813      	ldr	r3, [r2, #0]
 8109a84:	4615      	mov	r5, r2
 8109a86:	b933      	cbnz	r3, 8109a96 <_free_r+0x32>
 8109a88:	6063      	str	r3, [r4, #4]
 8109a8a:	6014      	str	r4, [r2, #0]
 8109a8c:	b003      	add	sp, #12
 8109a8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109a92:	f000 b8e9 	b.w	8109c68 <__malloc_unlock>
 8109a96:	42a3      	cmp	r3, r4
 8109a98:	d90b      	bls.n	8109ab2 <_free_r+0x4e>
 8109a9a:	6821      	ldr	r1, [r4, #0]
 8109a9c:	1862      	adds	r2, r4, r1
 8109a9e:	4293      	cmp	r3, r2
 8109aa0:	bf04      	itt	eq
 8109aa2:	681a      	ldreq	r2, [r3, #0]
 8109aa4:	685b      	ldreq	r3, [r3, #4]
 8109aa6:	6063      	str	r3, [r4, #4]
 8109aa8:	bf04      	itt	eq
 8109aaa:	1852      	addeq	r2, r2, r1
 8109aac:	6022      	streq	r2, [r4, #0]
 8109aae:	602c      	str	r4, [r5, #0]
 8109ab0:	e7ec      	b.n	8109a8c <_free_r+0x28>
 8109ab2:	461a      	mov	r2, r3
 8109ab4:	685b      	ldr	r3, [r3, #4]
 8109ab6:	b10b      	cbz	r3, 8109abc <_free_r+0x58>
 8109ab8:	42a3      	cmp	r3, r4
 8109aba:	d9fa      	bls.n	8109ab2 <_free_r+0x4e>
 8109abc:	6811      	ldr	r1, [r2, #0]
 8109abe:	1855      	adds	r5, r2, r1
 8109ac0:	42a5      	cmp	r5, r4
 8109ac2:	d10b      	bne.n	8109adc <_free_r+0x78>
 8109ac4:	6824      	ldr	r4, [r4, #0]
 8109ac6:	4421      	add	r1, r4
 8109ac8:	1854      	adds	r4, r2, r1
 8109aca:	42a3      	cmp	r3, r4
 8109acc:	6011      	str	r1, [r2, #0]
 8109ace:	d1dd      	bne.n	8109a8c <_free_r+0x28>
 8109ad0:	681c      	ldr	r4, [r3, #0]
 8109ad2:	685b      	ldr	r3, [r3, #4]
 8109ad4:	6053      	str	r3, [r2, #4]
 8109ad6:	4421      	add	r1, r4
 8109ad8:	6011      	str	r1, [r2, #0]
 8109ada:	e7d7      	b.n	8109a8c <_free_r+0x28>
 8109adc:	d902      	bls.n	8109ae4 <_free_r+0x80>
 8109ade:	230c      	movs	r3, #12
 8109ae0:	6003      	str	r3, [r0, #0]
 8109ae2:	e7d3      	b.n	8109a8c <_free_r+0x28>
 8109ae4:	6825      	ldr	r5, [r4, #0]
 8109ae6:	1961      	adds	r1, r4, r5
 8109ae8:	428b      	cmp	r3, r1
 8109aea:	bf04      	itt	eq
 8109aec:	6819      	ldreq	r1, [r3, #0]
 8109aee:	685b      	ldreq	r3, [r3, #4]
 8109af0:	6063      	str	r3, [r4, #4]
 8109af2:	bf04      	itt	eq
 8109af4:	1949      	addeq	r1, r1, r5
 8109af6:	6021      	streq	r1, [r4, #0]
 8109af8:	6054      	str	r4, [r2, #4]
 8109afa:	e7c7      	b.n	8109a8c <_free_r+0x28>
 8109afc:	b003      	add	sp, #12
 8109afe:	bd30      	pop	{r4, r5, pc}
 8109b00:	10000200 	.word	0x10000200

08109b04 <_malloc_r>:
 8109b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109b06:	1ccd      	adds	r5, r1, #3
 8109b08:	f025 0503 	bic.w	r5, r5, #3
 8109b0c:	3508      	adds	r5, #8
 8109b0e:	2d0c      	cmp	r5, #12
 8109b10:	bf38      	it	cc
 8109b12:	250c      	movcc	r5, #12
 8109b14:	2d00      	cmp	r5, #0
 8109b16:	4606      	mov	r6, r0
 8109b18:	db01      	blt.n	8109b1e <_malloc_r+0x1a>
 8109b1a:	42a9      	cmp	r1, r5
 8109b1c:	d903      	bls.n	8109b26 <_malloc_r+0x22>
 8109b1e:	230c      	movs	r3, #12
 8109b20:	6033      	str	r3, [r6, #0]
 8109b22:	2000      	movs	r0, #0
 8109b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109b26:	f000 f899 	bl	8109c5c <__malloc_lock>
 8109b2a:	4921      	ldr	r1, [pc, #132]	; (8109bb0 <_malloc_r+0xac>)
 8109b2c:	680a      	ldr	r2, [r1, #0]
 8109b2e:	4614      	mov	r4, r2
 8109b30:	b99c      	cbnz	r4, 8109b5a <_malloc_r+0x56>
 8109b32:	4f20      	ldr	r7, [pc, #128]	; (8109bb4 <_malloc_r+0xb0>)
 8109b34:	683b      	ldr	r3, [r7, #0]
 8109b36:	b923      	cbnz	r3, 8109b42 <_malloc_r+0x3e>
 8109b38:	4621      	mov	r1, r4
 8109b3a:	4630      	mov	r0, r6
 8109b3c:	f000 f83c 	bl	8109bb8 <_sbrk_r>
 8109b40:	6038      	str	r0, [r7, #0]
 8109b42:	4629      	mov	r1, r5
 8109b44:	4630      	mov	r0, r6
 8109b46:	f000 f837 	bl	8109bb8 <_sbrk_r>
 8109b4a:	1c43      	adds	r3, r0, #1
 8109b4c:	d123      	bne.n	8109b96 <_malloc_r+0x92>
 8109b4e:	230c      	movs	r3, #12
 8109b50:	6033      	str	r3, [r6, #0]
 8109b52:	4630      	mov	r0, r6
 8109b54:	f000 f888 	bl	8109c68 <__malloc_unlock>
 8109b58:	e7e3      	b.n	8109b22 <_malloc_r+0x1e>
 8109b5a:	6823      	ldr	r3, [r4, #0]
 8109b5c:	1b5b      	subs	r3, r3, r5
 8109b5e:	d417      	bmi.n	8109b90 <_malloc_r+0x8c>
 8109b60:	2b0b      	cmp	r3, #11
 8109b62:	d903      	bls.n	8109b6c <_malloc_r+0x68>
 8109b64:	6023      	str	r3, [r4, #0]
 8109b66:	441c      	add	r4, r3
 8109b68:	6025      	str	r5, [r4, #0]
 8109b6a:	e004      	b.n	8109b76 <_malloc_r+0x72>
 8109b6c:	6863      	ldr	r3, [r4, #4]
 8109b6e:	42a2      	cmp	r2, r4
 8109b70:	bf0c      	ite	eq
 8109b72:	600b      	streq	r3, [r1, #0]
 8109b74:	6053      	strne	r3, [r2, #4]
 8109b76:	4630      	mov	r0, r6
 8109b78:	f000 f876 	bl	8109c68 <__malloc_unlock>
 8109b7c:	f104 000b 	add.w	r0, r4, #11
 8109b80:	1d23      	adds	r3, r4, #4
 8109b82:	f020 0007 	bic.w	r0, r0, #7
 8109b86:	1ac2      	subs	r2, r0, r3
 8109b88:	d0cc      	beq.n	8109b24 <_malloc_r+0x20>
 8109b8a:	1a1b      	subs	r3, r3, r0
 8109b8c:	50a3      	str	r3, [r4, r2]
 8109b8e:	e7c9      	b.n	8109b24 <_malloc_r+0x20>
 8109b90:	4622      	mov	r2, r4
 8109b92:	6864      	ldr	r4, [r4, #4]
 8109b94:	e7cc      	b.n	8109b30 <_malloc_r+0x2c>
 8109b96:	1cc4      	adds	r4, r0, #3
 8109b98:	f024 0403 	bic.w	r4, r4, #3
 8109b9c:	42a0      	cmp	r0, r4
 8109b9e:	d0e3      	beq.n	8109b68 <_malloc_r+0x64>
 8109ba0:	1a21      	subs	r1, r4, r0
 8109ba2:	4630      	mov	r0, r6
 8109ba4:	f000 f808 	bl	8109bb8 <_sbrk_r>
 8109ba8:	3001      	adds	r0, #1
 8109baa:	d1dd      	bne.n	8109b68 <_malloc_r+0x64>
 8109bac:	e7cf      	b.n	8109b4e <_malloc_r+0x4a>
 8109bae:	bf00      	nop
 8109bb0:	10000200 	.word	0x10000200
 8109bb4:	10000204 	.word	0x10000204

08109bb8 <_sbrk_r>:
 8109bb8:	b538      	push	{r3, r4, r5, lr}
 8109bba:	4d06      	ldr	r5, [pc, #24]	; (8109bd4 <_sbrk_r+0x1c>)
 8109bbc:	2300      	movs	r3, #0
 8109bbe:	4604      	mov	r4, r0
 8109bc0:	4608      	mov	r0, r1
 8109bc2:	602b      	str	r3, [r5, #0]
 8109bc4:	f7f8 f948 	bl	8101e58 <_sbrk>
 8109bc8:	1c43      	adds	r3, r0, #1
 8109bca:	d102      	bne.n	8109bd2 <_sbrk_r+0x1a>
 8109bcc:	682b      	ldr	r3, [r5, #0]
 8109bce:	b103      	cbz	r3, 8109bd2 <_sbrk_r+0x1a>
 8109bd0:	6023      	str	r3, [r4, #0]
 8109bd2:	bd38      	pop	{r3, r4, r5, pc}
 8109bd4:	10000398 	.word	0x10000398

08109bd8 <__assert_func>:
 8109bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8109bda:	4614      	mov	r4, r2
 8109bdc:	461a      	mov	r2, r3
 8109bde:	4b09      	ldr	r3, [pc, #36]	; (8109c04 <__assert_func+0x2c>)
 8109be0:	681b      	ldr	r3, [r3, #0]
 8109be2:	4605      	mov	r5, r0
 8109be4:	68d8      	ldr	r0, [r3, #12]
 8109be6:	b14c      	cbz	r4, 8109bfc <__assert_func+0x24>
 8109be8:	4b07      	ldr	r3, [pc, #28]	; (8109c08 <__assert_func+0x30>)
 8109bea:	9100      	str	r1, [sp, #0]
 8109bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8109bf0:	4906      	ldr	r1, [pc, #24]	; (8109c0c <__assert_func+0x34>)
 8109bf2:	462b      	mov	r3, r5
 8109bf4:	f000 f80e 	bl	8109c14 <fiprintf>
 8109bf8:	f000 fa64 	bl	810a0c4 <abort>
 8109bfc:	4b04      	ldr	r3, [pc, #16]	; (8109c10 <__assert_func+0x38>)
 8109bfe:	461c      	mov	r4, r3
 8109c00:	e7f3      	b.n	8109bea <__assert_func+0x12>
 8109c02:	bf00      	nop
 8109c04:	10000010 	.word	0x10000010
 8109c08:	0810a944 	.word	0x0810a944
 8109c0c:	0810a951 	.word	0x0810a951
 8109c10:	0810a97f 	.word	0x0810a97f

08109c14 <fiprintf>:
 8109c14:	b40e      	push	{r1, r2, r3}
 8109c16:	b503      	push	{r0, r1, lr}
 8109c18:	4601      	mov	r1, r0
 8109c1a:	ab03      	add	r3, sp, #12
 8109c1c:	4805      	ldr	r0, [pc, #20]	; (8109c34 <fiprintf+0x20>)
 8109c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8109c22:	6800      	ldr	r0, [r0, #0]
 8109c24:	9301      	str	r3, [sp, #4]
 8109c26:	f000 f84f 	bl	8109cc8 <_vfiprintf_r>
 8109c2a:	b002      	add	sp, #8
 8109c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8109c30:	b003      	add	sp, #12
 8109c32:	4770      	bx	lr
 8109c34:	10000010 	.word	0x10000010

08109c38 <__ascii_mbtowc>:
 8109c38:	b082      	sub	sp, #8
 8109c3a:	b901      	cbnz	r1, 8109c3e <__ascii_mbtowc+0x6>
 8109c3c:	a901      	add	r1, sp, #4
 8109c3e:	b142      	cbz	r2, 8109c52 <__ascii_mbtowc+0x1a>
 8109c40:	b14b      	cbz	r3, 8109c56 <__ascii_mbtowc+0x1e>
 8109c42:	7813      	ldrb	r3, [r2, #0]
 8109c44:	600b      	str	r3, [r1, #0]
 8109c46:	7812      	ldrb	r2, [r2, #0]
 8109c48:	1e10      	subs	r0, r2, #0
 8109c4a:	bf18      	it	ne
 8109c4c:	2001      	movne	r0, #1
 8109c4e:	b002      	add	sp, #8
 8109c50:	4770      	bx	lr
 8109c52:	4610      	mov	r0, r2
 8109c54:	e7fb      	b.n	8109c4e <__ascii_mbtowc+0x16>
 8109c56:	f06f 0001 	mvn.w	r0, #1
 8109c5a:	e7f8      	b.n	8109c4e <__ascii_mbtowc+0x16>

08109c5c <__malloc_lock>:
 8109c5c:	4801      	ldr	r0, [pc, #4]	; (8109c64 <__malloc_lock+0x8>)
 8109c5e:	f000 bbf1 	b.w	810a444 <__retarget_lock_acquire_recursive>
 8109c62:	bf00      	nop
 8109c64:	100003a0 	.word	0x100003a0

08109c68 <__malloc_unlock>:
 8109c68:	4801      	ldr	r0, [pc, #4]	; (8109c70 <__malloc_unlock+0x8>)
 8109c6a:	f000 bbec 	b.w	810a446 <__retarget_lock_release_recursive>
 8109c6e:	bf00      	nop
 8109c70:	100003a0 	.word	0x100003a0

08109c74 <__sfputc_r>:
 8109c74:	6893      	ldr	r3, [r2, #8]
 8109c76:	3b01      	subs	r3, #1
 8109c78:	2b00      	cmp	r3, #0
 8109c7a:	b410      	push	{r4}
 8109c7c:	6093      	str	r3, [r2, #8]
 8109c7e:	da08      	bge.n	8109c92 <__sfputc_r+0x1e>
 8109c80:	6994      	ldr	r4, [r2, #24]
 8109c82:	42a3      	cmp	r3, r4
 8109c84:	db01      	blt.n	8109c8a <__sfputc_r+0x16>
 8109c86:	290a      	cmp	r1, #10
 8109c88:	d103      	bne.n	8109c92 <__sfputc_r+0x1e>
 8109c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109c8e:	f000 b94b 	b.w	8109f28 <__swbuf_r>
 8109c92:	6813      	ldr	r3, [r2, #0]
 8109c94:	1c58      	adds	r0, r3, #1
 8109c96:	6010      	str	r0, [r2, #0]
 8109c98:	7019      	strb	r1, [r3, #0]
 8109c9a:	4608      	mov	r0, r1
 8109c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109ca0:	4770      	bx	lr

08109ca2 <__sfputs_r>:
 8109ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109ca4:	4606      	mov	r6, r0
 8109ca6:	460f      	mov	r7, r1
 8109ca8:	4614      	mov	r4, r2
 8109caa:	18d5      	adds	r5, r2, r3
 8109cac:	42ac      	cmp	r4, r5
 8109cae:	d101      	bne.n	8109cb4 <__sfputs_r+0x12>
 8109cb0:	2000      	movs	r0, #0
 8109cb2:	e007      	b.n	8109cc4 <__sfputs_r+0x22>
 8109cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109cb8:	463a      	mov	r2, r7
 8109cba:	4630      	mov	r0, r6
 8109cbc:	f7ff ffda 	bl	8109c74 <__sfputc_r>
 8109cc0:	1c43      	adds	r3, r0, #1
 8109cc2:	d1f3      	bne.n	8109cac <__sfputs_r+0xa>
 8109cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08109cc8 <_vfiprintf_r>:
 8109cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109ccc:	460d      	mov	r5, r1
 8109cce:	b09d      	sub	sp, #116	; 0x74
 8109cd0:	4614      	mov	r4, r2
 8109cd2:	4698      	mov	r8, r3
 8109cd4:	4606      	mov	r6, r0
 8109cd6:	b118      	cbz	r0, 8109ce0 <_vfiprintf_r+0x18>
 8109cd8:	6983      	ldr	r3, [r0, #24]
 8109cda:	b90b      	cbnz	r3, 8109ce0 <_vfiprintf_r+0x18>
 8109cdc:	f000 fb14 	bl	810a308 <__sinit>
 8109ce0:	4b89      	ldr	r3, [pc, #548]	; (8109f08 <_vfiprintf_r+0x240>)
 8109ce2:	429d      	cmp	r5, r3
 8109ce4:	d11b      	bne.n	8109d1e <_vfiprintf_r+0x56>
 8109ce6:	6875      	ldr	r5, [r6, #4]
 8109ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109cea:	07d9      	lsls	r1, r3, #31
 8109cec:	d405      	bmi.n	8109cfa <_vfiprintf_r+0x32>
 8109cee:	89ab      	ldrh	r3, [r5, #12]
 8109cf0:	059a      	lsls	r2, r3, #22
 8109cf2:	d402      	bmi.n	8109cfa <_vfiprintf_r+0x32>
 8109cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109cf6:	f000 fba5 	bl	810a444 <__retarget_lock_acquire_recursive>
 8109cfa:	89ab      	ldrh	r3, [r5, #12]
 8109cfc:	071b      	lsls	r3, r3, #28
 8109cfe:	d501      	bpl.n	8109d04 <_vfiprintf_r+0x3c>
 8109d00:	692b      	ldr	r3, [r5, #16]
 8109d02:	b9eb      	cbnz	r3, 8109d40 <_vfiprintf_r+0x78>
 8109d04:	4629      	mov	r1, r5
 8109d06:	4630      	mov	r0, r6
 8109d08:	f000 f96e 	bl	8109fe8 <__swsetup_r>
 8109d0c:	b1c0      	cbz	r0, 8109d40 <_vfiprintf_r+0x78>
 8109d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109d10:	07dc      	lsls	r4, r3, #31
 8109d12:	d50e      	bpl.n	8109d32 <_vfiprintf_r+0x6a>
 8109d14:	f04f 30ff 	mov.w	r0, #4294967295
 8109d18:	b01d      	add	sp, #116	; 0x74
 8109d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109d1e:	4b7b      	ldr	r3, [pc, #492]	; (8109f0c <_vfiprintf_r+0x244>)
 8109d20:	429d      	cmp	r5, r3
 8109d22:	d101      	bne.n	8109d28 <_vfiprintf_r+0x60>
 8109d24:	68b5      	ldr	r5, [r6, #8]
 8109d26:	e7df      	b.n	8109ce8 <_vfiprintf_r+0x20>
 8109d28:	4b79      	ldr	r3, [pc, #484]	; (8109f10 <_vfiprintf_r+0x248>)
 8109d2a:	429d      	cmp	r5, r3
 8109d2c:	bf08      	it	eq
 8109d2e:	68f5      	ldreq	r5, [r6, #12]
 8109d30:	e7da      	b.n	8109ce8 <_vfiprintf_r+0x20>
 8109d32:	89ab      	ldrh	r3, [r5, #12]
 8109d34:	0598      	lsls	r0, r3, #22
 8109d36:	d4ed      	bmi.n	8109d14 <_vfiprintf_r+0x4c>
 8109d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109d3a:	f000 fb84 	bl	810a446 <__retarget_lock_release_recursive>
 8109d3e:	e7e9      	b.n	8109d14 <_vfiprintf_r+0x4c>
 8109d40:	2300      	movs	r3, #0
 8109d42:	9309      	str	r3, [sp, #36]	; 0x24
 8109d44:	2320      	movs	r3, #32
 8109d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8109d4e:	2330      	movs	r3, #48	; 0x30
 8109d50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8109f14 <_vfiprintf_r+0x24c>
 8109d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109d58:	f04f 0901 	mov.w	r9, #1
 8109d5c:	4623      	mov	r3, r4
 8109d5e:	469a      	mov	sl, r3
 8109d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109d64:	b10a      	cbz	r2, 8109d6a <_vfiprintf_r+0xa2>
 8109d66:	2a25      	cmp	r2, #37	; 0x25
 8109d68:	d1f9      	bne.n	8109d5e <_vfiprintf_r+0x96>
 8109d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8109d6e:	d00b      	beq.n	8109d88 <_vfiprintf_r+0xc0>
 8109d70:	465b      	mov	r3, fp
 8109d72:	4622      	mov	r2, r4
 8109d74:	4629      	mov	r1, r5
 8109d76:	4630      	mov	r0, r6
 8109d78:	f7ff ff93 	bl	8109ca2 <__sfputs_r>
 8109d7c:	3001      	adds	r0, #1
 8109d7e:	f000 80aa 	beq.w	8109ed6 <_vfiprintf_r+0x20e>
 8109d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109d84:	445a      	add	r2, fp
 8109d86:	9209      	str	r2, [sp, #36]	; 0x24
 8109d88:	f89a 3000 	ldrb.w	r3, [sl]
 8109d8c:	2b00      	cmp	r3, #0
 8109d8e:	f000 80a2 	beq.w	8109ed6 <_vfiprintf_r+0x20e>
 8109d92:	2300      	movs	r3, #0
 8109d94:	f04f 32ff 	mov.w	r2, #4294967295
 8109d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109d9c:	f10a 0a01 	add.w	sl, sl, #1
 8109da0:	9304      	str	r3, [sp, #16]
 8109da2:	9307      	str	r3, [sp, #28]
 8109da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109da8:	931a      	str	r3, [sp, #104]	; 0x68
 8109daa:	4654      	mov	r4, sl
 8109dac:	2205      	movs	r2, #5
 8109dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109db2:	4858      	ldr	r0, [pc, #352]	; (8109f14 <_vfiprintf_r+0x24c>)
 8109db4:	f7f6 fa9c 	bl	81002f0 <memchr>
 8109db8:	9a04      	ldr	r2, [sp, #16]
 8109dba:	b9d8      	cbnz	r0, 8109df4 <_vfiprintf_r+0x12c>
 8109dbc:	06d1      	lsls	r1, r2, #27
 8109dbe:	bf44      	itt	mi
 8109dc0:	2320      	movmi	r3, #32
 8109dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109dc6:	0713      	lsls	r3, r2, #28
 8109dc8:	bf44      	itt	mi
 8109dca:	232b      	movmi	r3, #43	; 0x2b
 8109dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8109dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8109dd6:	d015      	beq.n	8109e04 <_vfiprintf_r+0x13c>
 8109dd8:	9a07      	ldr	r2, [sp, #28]
 8109dda:	4654      	mov	r4, sl
 8109ddc:	2000      	movs	r0, #0
 8109dde:	f04f 0c0a 	mov.w	ip, #10
 8109de2:	4621      	mov	r1, r4
 8109de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109de8:	3b30      	subs	r3, #48	; 0x30
 8109dea:	2b09      	cmp	r3, #9
 8109dec:	d94e      	bls.n	8109e8c <_vfiprintf_r+0x1c4>
 8109dee:	b1b0      	cbz	r0, 8109e1e <_vfiprintf_r+0x156>
 8109df0:	9207      	str	r2, [sp, #28]
 8109df2:	e014      	b.n	8109e1e <_vfiprintf_r+0x156>
 8109df4:	eba0 0308 	sub.w	r3, r0, r8
 8109df8:	fa09 f303 	lsl.w	r3, r9, r3
 8109dfc:	4313      	orrs	r3, r2
 8109dfe:	9304      	str	r3, [sp, #16]
 8109e00:	46a2      	mov	sl, r4
 8109e02:	e7d2      	b.n	8109daa <_vfiprintf_r+0xe2>
 8109e04:	9b03      	ldr	r3, [sp, #12]
 8109e06:	1d19      	adds	r1, r3, #4
 8109e08:	681b      	ldr	r3, [r3, #0]
 8109e0a:	9103      	str	r1, [sp, #12]
 8109e0c:	2b00      	cmp	r3, #0
 8109e0e:	bfbb      	ittet	lt
 8109e10:	425b      	neglt	r3, r3
 8109e12:	f042 0202 	orrlt.w	r2, r2, #2
 8109e16:	9307      	strge	r3, [sp, #28]
 8109e18:	9307      	strlt	r3, [sp, #28]
 8109e1a:	bfb8      	it	lt
 8109e1c:	9204      	strlt	r2, [sp, #16]
 8109e1e:	7823      	ldrb	r3, [r4, #0]
 8109e20:	2b2e      	cmp	r3, #46	; 0x2e
 8109e22:	d10c      	bne.n	8109e3e <_vfiprintf_r+0x176>
 8109e24:	7863      	ldrb	r3, [r4, #1]
 8109e26:	2b2a      	cmp	r3, #42	; 0x2a
 8109e28:	d135      	bne.n	8109e96 <_vfiprintf_r+0x1ce>
 8109e2a:	9b03      	ldr	r3, [sp, #12]
 8109e2c:	1d1a      	adds	r2, r3, #4
 8109e2e:	681b      	ldr	r3, [r3, #0]
 8109e30:	9203      	str	r2, [sp, #12]
 8109e32:	2b00      	cmp	r3, #0
 8109e34:	bfb8      	it	lt
 8109e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8109e3a:	3402      	adds	r4, #2
 8109e3c:	9305      	str	r3, [sp, #20]
 8109e3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8109f24 <_vfiprintf_r+0x25c>
 8109e42:	7821      	ldrb	r1, [r4, #0]
 8109e44:	2203      	movs	r2, #3
 8109e46:	4650      	mov	r0, sl
 8109e48:	f7f6 fa52 	bl	81002f0 <memchr>
 8109e4c:	b140      	cbz	r0, 8109e60 <_vfiprintf_r+0x198>
 8109e4e:	2340      	movs	r3, #64	; 0x40
 8109e50:	eba0 000a 	sub.w	r0, r0, sl
 8109e54:	fa03 f000 	lsl.w	r0, r3, r0
 8109e58:	9b04      	ldr	r3, [sp, #16]
 8109e5a:	4303      	orrs	r3, r0
 8109e5c:	3401      	adds	r4, #1
 8109e5e:	9304      	str	r3, [sp, #16]
 8109e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109e64:	482c      	ldr	r0, [pc, #176]	; (8109f18 <_vfiprintf_r+0x250>)
 8109e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109e6a:	2206      	movs	r2, #6
 8109e6c:	f7f6 fa40 	bl	81002f0 <memchr>
 8109e70:	2800      	cmp	r0, #0
 8109e72:	d03f      	beq.n	8109ef4 <_vfiprintf_r+0x22c>
 8109e74:	4b29      	ldr	r3, [pc, #164]	; (8109f1c <_vfiprintf_r+0x254>)
 8109e76:	bb1b      	cbnz	r3, 8109ec0 <_vfiprintf_r+0x1f8>
 8109e78:	9b03      	ldr	r3, [sp, #12]
 8109e7a:	3307      	adds	r3, #7
 8109e7c:	f023 0307 	bic.w	r3, r3, #7
 8109e80:	3308      	adds	r3, #8
 8109e82:	9303      	str	r3, [sp, #12]
 8109e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e86:	443b      	add	r3, r7
 8109e88:	9309      	str	r3, [sp, #36]	; 0x24
 8109e8a:	e767      	b.n	8109d5c <_vfiprintf_r+0x94>
 8109e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8109e90:	460c      	mov	r4, r1
 8109e92:	2001      	movs	r0, #1
 8109e94:	e7a5      	b.n	8109de2 <_vfiprintf_r+0x11a>
 8109e96:	2300      	movs	r3, #0
 8109e98:	3401      	adds	r4, #1
 8109e9a:	9305      	str	r3, [sp, #20]
 8109e9c:	4619      	mov	r1, r3
 8109e9e:	f04f 0c0a 	mov.w	ip, #10
 8109ea2:	4620      	mov	r0, r4
 8109ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8109ea8:	3a30      	subs	r2, #48	; 0x30
 8109eaa:	2a09      	cmp	r2, #9
 8109eac:	d903      	bls.n	8109eb6 <_vfiprintf_r+0x1ee>
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	d0c5      	beq.n	8109e3e <_vfiprintf_r+0x176>
 8109eb2:	9105      	str	r1, [sp, #20]
 8109eb4:	e7c3      	b.n	8109e3e <_vfiprintf_r+0x176>
 8109eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8109eba:	4604      	mov	r4, r0
 8109ebc:	2301      	movs	r3, #1
 8109ebe:	e7f0      	b.n	8109ea2 <_vfiprintf_r+0x1da>
 8109ec0:	ab03      	add	r3, sp, #12
 8109ec2:	9300      	str	r3, [sp, #0]
 8109ec4:	462a      	mov	r2, r5
 8109ec6:	4b16      	ldr	r3, [pc, #88]	; (8109f20 <_vfiprintf_r+0x258>)
 8109ec8:	a904      	add	r1, sp, #16
 8109eca:	4630      	mov	r0, r6
 8109ecc:	f7fd ffec 	bl	8107ea8 <_printf_float>
 8109ed0:	4607      	mov	r7, r0
 8109ed2:	1c78      	adds	r0, r7, #1
 8109ed4:	d1d6      	bne.n	8109e84 <_vfiprintf_r+0x1bc>
 8109ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109ed8:	07d9      	lsls	r1, r3, #31
 8109eda:	d405      	bmi.n	8109ee8 <_vfiprintf_r+0x220>
 8109edc:	89ab      	ldrh	r3, [r5, #12]
 8109ede:	059a      	lsls	r2, r3, #22
 8109ee0:	d402      	bmi.n	8109ee8 <_vfiprintf_r+0x220>
 8109ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109ee4:	f000 faaf 	bl	810a446 <__retarget_lock_release_recursive>
 8109ee8:	89ab      	ldrh	r3, [r5, #12]
 8109eea:	065b      	lsls	r3, r3, #25
 8109eec:	f53f af12 	bmi.w	8109d14 <_vfiprintf_r+0x4c>
 8109ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109ef2:	e711      	b.n	8109d18 <_vfiprintf_r+0x50>
 8109ef4:	ab03      	add	r3, sp, #12
 8109ef6:	9300      	str	r3, [sp, #0]
 8109ef8:	462a      	mov	r2, r5
 8109efa:	4b09      	ldr	r3, [pc, #36]	; (8109f20 <_vfiprintf_r+0x258>)
 8109efc:	a904      	add	r1, sp, #16
 8109efe:	4630      	mov	r0, r6
 8109f00:	f7fe fa76 	bl	81083f0 <_printf_i>
 8109f04:	e7e4      	b.n	8109ed0 <_vfiprintf_r+0x208>
 8109f06:	bf00      	nop
 8109f08:	0810aabc 	.word	0x0810aabc
 8109f0c:	0810aadc 	.word	0x0810aadc
 8109f10:	0810aa9c 	.word	0x0810aa9c
 8109f14:	0810a98a 	.word	0x0810a98a
 8109f18:	0810a994 	.word	0x0810a994
 8109f1c:	08107ea9 	.word	0x08107ea9
 8109f20:	08109ca3 	.word	0x08109ca3
 8109f24:	0810a990 	.word	0x0810a990

08109f28 <__swbuf_r>:
 8109f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109f2a:	460e      	mov	r6, r1
 8109f2c:	4614      	mov	r4, r2
 8109f2e:	4605      	mov	r5, r0
 8109f30:	b118      	cbz	r0, 8109f3a <__swbuf_r+0x12>
 8109f32:	6983      	ldr	r3, [r0, #24]
 8109f34:	b90b      	cbnz	r3, 8109f3a <__swbuf_r+0x12>
 8109f36:	f000 f9e7 	bl	810a308 <__sinit>
 8109f3a:	4b21      	ldr	r3, [pc, #132]	; (8109fc0 <__swbuf_r+0x98>)
 8109f3c:	429c      	cmp	r4, r3
 8109f3e:	d12b      	bne.n	8109f98 <__swbuf_r+0x70>
 8109f40:	686c      	ldr	r4, [r5, #4]
 8109f42:	69a3      	ldr	r3, [r4, #24]
 8109f44:	60a3      	str	r3, [r4, #8]
 8109f46:	89a3      	ldrh	r3, [r4, #12]
 8109f48:	071a      	lsls	r2, r3, #28
 8109f4a:	d52f      	bpl.n	8109fac <__swbuf_r+0x84>
 8109f4c:	6923      	ldr	r3, [r4, #16]
 8109f4e:	b36b      	cbz	r3, 8109fac <__swbuf_r+0x84>
 8109f50:	6923      	ldr	r3, [r4, #16]
 8109f52:	6820      	ldr	r0, [r4, #0]
 8109f54:	1ac0      	subs	r0, r0, r3
 8109f56:	6963      	ldr	r3, [r4, #20]
 8109f58:	b2f6      	uxtb	r6, r6
 8109f5a:	4283      	cmp	r3, r0
 8109f5c:	4637      	mov	r7, r6
 8109f5e:	dc04      	bgt.n	8109f6a <__swbuf_r+0x42>
 8109f60:	4621      	mov	r1, r4
 8109f62:	4628      	mov	r0, r5
 8109f64:	f000 f93c 	bl	810a1e0 <_fflush_r>
 8109f68:	bb30      	cbnz	r0, 8109fb8 <__swbuf_r+0x90>
 8109f6a:	68a3      	ldr	r3, [r4, #8]
 8109f6c:	3b01      	subs	r3, #1
 8109f6e:	60a3      	str	r3, [r4, #8]
 8109f70:	6823      	ldr	r3, [r4, #0]
 8109f72:	1c5a      	adds	r2, r3, #1
 8109f74:	6022      	str	r2, [r4, #0]
 8109f76:	701e      	strb	r6, [r3, #0]
 8109f78:	6963      	ldr	r3, [r4, #20]
 8109f7a:	3001      	adds	r0, #1
 8109f7c:	4283      	cmp	r3, r0
 8109f7e:	d004      	beq.n	8109f8a <__swbuf_r+0x62>
 8109f80:	89a3      	ldrh	r3, [r4, #12]
 8109f82:	07db      	lsls	r3, r3, #31
 8109f84:	d506      	bpl.n	8109f94 <__swbuf_r+0x6c>
 8109f86:	2e0a      	cmp	r6, #10
 8109f88:	d104      	bne.n	8109f94 <__swbuf_r+0x6c>
 8109f8a:	4621      	mov	r1, r4
 8109f8c:	4628      	mov	r0, r5
 8109f8e:	f000 f927 	bl	810a1e0 <_fflush_r>
 8109f92:	b988      	cbnz	r0, 8109fb8 <__swbuf_r+0x90>
 8109f94:	4638      	mov	r0, r7
 8109f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109f98:	4b0a      	ldr	r3, [pc, #40]	; (8109fc4 <__swbuf_r+0x9c>)
 8109f9a:	429c      	cmp	r4, r3
 8109f9c:	d101      	bne.n	8109fa2 <__swbuf_r+0x7a>
 8109f9e:	68ac      	ldr	r4, [r5, #8]
 8109fa0:	e7cf      	b.n	8109f42 <__swbuf_r+0x1a>
 8109fa2:	4b09      	ldr	r3, [pc, #36]	; (8109fc8 <__swbuf_r+0xa0>)
 8109fa4:	429c      	cmp	r4, r3
 8109fa6:	bf08      	it	eq
 8109fa8:	68ec      	ldreq	r4, [r5, #12]
 8109faa:	e7ca      	b.n	8109f42 <__swbuf_r+0x1a>
 8109fac:	4621      	mov	r1, r4
 8109fae:	4628      	mov	r0, r5
 8109fb0:	f000 f81a 	bl	8109fe8 <__swsetup_r>
 8109fb4:	2800      	cmp	r0, #0
 8109fb6:	d0cb      	beq.n	8109f50 <__swbuf_r+0x28>
 8109fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8109fbc:	e7ea      	b.n	8109f94 <__swbuf_r+0x6c>
 8109fbe:	bf00      	nop
 8109fc0:	0810aabc 	.word	0x0810aabc
 8109fc4:	0810aadc 	.word	0x0810aadc
 8109fc8:	0810aa9c 	.word	0x0810aa9c

08109fcc <__ascii_wctomb>:
 8109fcc:	b149      	cbz	r1, 8109fe2 <__ascii_wctomb+0x16>
 8109fce:	2aff      	cmp	r2, #255	; 0xff
 8109fd0:	bf85      	ittet	hi
 8109fd2:	238a      	movhi	r3, #138	; 0x8a
 8109fd4:	6003      	strhi	r3, [r0, #0]
 8109fd6:	700a      	strbls	r2, [r1, #0]
 8109fd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8109fdc:	bf98      	it	ls
 8109fde:	2001      	movls	r0, #1
 8109fe0:	4770      	bx	lr
 8109fe2:	4608      	mov	r0, r1
 8109fe4:	4770      	bx	lr
	...

08109fe8 <__swsetup_r>:
 8109fe8:	4b32      	ldr	r3, [pc, #200]	; (810a0b4 <__swsetup_r+0xcc>)
 8109fea:	b570      	push	{r4, r5, r6, lr}
 8109fec:	681d      	ldr	r5, [r3, #0]
 8109fee:	4606      	mov	r6, r0
 8109ff0:	460c      	mov	r4, r1
 8109ff2:	b125      	cbz	r5, 8109ffe <__swsetup_r+0x16>
 8109ff4:	69ab      	ldr	r3, [r5, #24]
 8109ff6:	b913      	cbnz	r3, 8109ffe <__swsetup_r+0x16>
 8109ff8:	4628      	mov	r0, r5
 8109ffa:	f000 f985 	bl	810a308 <__sinit>
 8109ffe:	4b2e      	ldr	r3, [pc, #184]	; (810a0b8 <__swsetup_r+0xd0>)
 810a000:	429c      	cmp	r4, r3
 810a002:	d10f      	bne.n	810a024 <__swsetup_r+0x3c>
 810a004:	686c      	ldr	r4, [r5, #4]
 810a006:	89a3      	ldrh	r3, [r4, #12]
 810a008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a00c:	0719      	lsls	r1, r3, #28
 810a00e:	d42c      	bmi.n	810a06a <__swsetup_r+0x82>
 810a010:	06dd      	lsls	r5, r3, #27
 810a012:	d411      	bmi.n	810a038 <__swsetup_r+0x50>
 810a014:	2309      	movs	r3, #9
 810a016:	6033      	str	r3, [r6, #0]
 810a018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810a01c:	81a3      	strh	r3, [r4, #12]
 810a01e:	f04f 30ff 	mov.w	r0, #4294967295
 810a022:	e03e      	b.n	810a0a2 <__swsetup_r+0xba>
 810a024:	4b25      	ldr	r3, [pc, #148]	; (810a0bc <__swsetup_r+0xd4>)
 810a026:	429c      	cmp	r4, r3
 810a028:	d101      	bne.n	810a02e <__swsetup_r+0x46>
 810a02a:	68ac      	ldr	r4, [r5, #8]
 810a02c:	e7eb      	b.n	810a006 <__swsetup_r+0x1e>
 810a02e:	4b24      	ldr	r3, [pc, #144]	; (810a0c0 <__swsetup_r+0xd8>)
 810a030:	429c      	cmp	r4, r3
 810a032:	bf08      	it	eq
 810a034:	68ec      	ldreq	r4, [r5, #12]
 810a036:	e7e6      	b.n	810a006 <__swsetup_r+0x1e>
 810a038:	0758      	lsls	r0, r3, #29
 810a03a:	d512      	bpl.n	810a062 <__swsetup_r+0x7a>
 810a03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a03e:	b141      	cbz	r1, 810a052 <__swsetup_r+0x6a>
 810a040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a044:	4299      	cmp	r1, r3
 810a046:	d002      	beq.n	810a04e <__swsetup_r+0x66>
 810a048:	4630      	mov	r0, r6
 810a04a:	f7ff fd0b 	bl	8109a64 <_free_r>
 810a04e:	2300      	movs	r3, #0
 810a050:	6363      	str	r3, [r4, #52]	; 0x34
 810a052:	89a3      	ldrh	r3, [r4, #12]
 810a054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810a058:	81a3      	strh	r3, [r4, #12]
 810a05a:	2300      	movs	r3, #0
 810a05c:	6063      	str	r3, [r4, #4]
 810a05e:	6923      	ldr	r3, [r4, #16]
 810a060:	6023      	str	r3, [r4, #0]
 810a062:	89a3      	ldrh	r3, [r4, #12]
 810a064:	f043 0308 	orr.w	r3, r3, #8
 810a068:	81a3      	strh	r3, [r4, #12]
 810a06a:	6923      	ldr	r3, [r4, #16]
 810a06c:	b94b      	cbnz	r3, 810a082 <__swsetup_r+0x9a>
 810a06e:	89a3      	ldrh	r3, [r4, #12]
 810a070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810a074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a078:	d003      	beq.n	810a082 <__swsetup_r+0x9a>
 810a07a:	4621      	mov	r1, r4
 810a07c:	4630      	mov	r0, r6
 810a07e:	f000 fa07 	bl	810a490 <__smakebuf_r>
 810a082:	89a0      	ldrh	r0, [r4, #12]
 810a084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a088:	f010 0301 	ands.w	r3, r0, #1
 810a08c:	d00a      	beq.n	810a0a4 <__swsetup_r+0xbc>
 810a08e:	2300      	movs	r3, #0
 810a090:	60a3      	str	r3, [r4, #8]
 810a092:	6963      	ldr	r3, [r4, #20]
 810a094:	425b      	negs	r3, r3
 810a096:	61a3      	str	r3, [r4, #24]
 810a098:	6923      	ldr	r3, [r4, #16]
 810a09a:	b943      	cbnz	r3, 810a0ae <__swsetup_r+0xc6>
 810a09c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a0a0:	d1ba      	bne.n	810a018 <__swsetup_r+0x30>
 810a0a2:	bd70      	pop	{r4, r5, r6, pc}
 810a0a4:	0781      	lsls	r1, r0, #30
 810a0a6:	bf58      	it	pl
 810a0a8:	6963      	ldrpl	r3, [r4, #20]
 810a0aa:	60a3      	str	r3, [r4, #8]
 810a0ac:	e7f4      	b.n	810a098 <__swsetup_r+0xb0>
 810a0ae:	2000      	movs	r0, #0
 810a0b0:	e7f7      	b.n	810a0a2 <__swsetup_r+0xba>
 810a0b2:	bf00      	nop
 810a0b4:	10000010 	.word	0x10000010
 810a0b8:	0810aabc 	.word	0x0810aabc
 810a0bc:	0810aadc 	.word	0x0810aadc
 810a0c0:	0810aa9c 	.word	0x0810aa9c

0810a0c4 <abort>:
 810a0c4:	b508      	push	{r3, lr}
 810a0c6:	2006      	movs	r0, #6
 810a0c8:	f000 fa4a 	bl	810a560 <raise>
 810a0cc:	2001      	movs	r0, #1
 810a0ce:	f7f7 fe4b 	bl	8101d68 <_exit>
	...

0810a0d4 <__sflush_r>:
 810a0d4:	898a      	ldrh	r2, [r1, #12]
 810a0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0da:	4605      	mov	r5, r0
 810a0dc:	0710      	lsls	r0, r2, #28
 810a0de:	460c      	mov	r4, r1
 810a0e0:	d458      	bmi.n	810a194 <__sflush_r+0xc0>
 810a0e2:	684b      	ldr	r3, [r1, #4]
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	dc05      	bgt.n	810a0f4 <__sflush_r+0x20>
 810a0e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a0ea:	2b00      	cmp	r3, #0
 810a0ec:	dc02      	bgt.n	810a0f4 <__sflush_r+0x20>
 810a0ee:	2000      	movs	r0, #0
 810a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a0f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a0f6:	2e00      	cmp	r6, #0
 810a0f8:	d0f9      	beq.n	810a0ee <__sflush_r+0x1a>
 810a0fa:	2300      	movs	r3, #0
 810a0fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a100:	682f      	ldr	r7, [r5, #0]
 810a102:	602b      	str	r3, [r5, #0]
 810a104:	d032      	beq.n	810a16c <__sflush_r+0x98>
 810a106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a108:	89a3      	ldrh	r3, [r4, #12]
 810a10a:	075a      	lsls	r2, r3, #29
 810a10c:	d505      	bpl.n	810a11a <__sflush_r+0x46>
 810a10e:	6863      	ldr	r3, [r4, #4]
 810a110:	1ac0      	subs	r0, r0, r3
 810a112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a114:	b10b      	cbz	r3, 810a11a <__sflush_r+0x46>
 810a116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a118:	1ac0      	subs	r0, r0, r3
 810a11a:	2300      	movs	r3, #0
 810a11c:	4602      	mov	r2, r0
 810a11e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a120:	6a21      	ldr	r1, [r4, #32]
 810a122:	4628      	mov	r0, r5
 810a124:	47b0      	blx	r6
 810a126:	1c43      	adds	r3, r0, #1
 810a128:	89a3      	ldrh	r3, [r4, #12]
 810a12a:	d106      	bne.n	810a13a <__sflush_r+0x66>
 810a12c:	6829      	ldr	r1, [r5, #0]
 810a12e:	291d      	cmp	r1, #29
 810a130:	d82c      	bhi.n	810a18c <__sflush_r+0xb8>
 810a132:	4a2a      	ldr	r2, [pc, #168]	; (810a1dc <__sflush_r+0x108>)
 810a134:	40ca      	lsrs	r2, r1
 810a136:	07d6      	lsls	r6, r2, #31
 810a138:	d528      	bpl.n	810a18c <__sflush_r+0xb8>
 810a13a:	2200      	movs	r2, #0
 810a13c:	6062      	str	r2, [r4, #4]
 810a13e:	04d9      	lsls	r1, r3, #19
 810a140:	6922      	ldr	r2, [r4, #16]
 810a142:	6022      	str	r2, [r4, #0]
 810a144:	d504      	bpl.n	810a150 <__sflush_r+0x7c>
 810a146:	1c42      	adds	r2, r0, #1
 810a148:	d101      	bne.n	810a14e <__sflush_r+0x7a>
 810a14a:	682b      	ldr	r3, [r5, #0]
 810a14c:	b903      	cbnz	r3, 810a150 <__sflush_r+0x7c>
 810a14e:	6560      	str	r0, [r4, #84]	; 0x54
 810a150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a152:	602f      	str	r7, [r5, #0]
 810a154:	2900      	cmp	r1, #0
 810a156:	d0ca      	beq.n	810a0ee <__sflush_r+0x1a>
 810a158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a15c:	4299      	cmp	r1, r3
 810a15e:	d002      	beq.n	810a166 <__sflush_r+0x92>
 810a160:	4628      	mov	r0, r5
 810a162:	f7ff fc7f 	bl	8109a64 <_free_r>
 810a166:	2000      	movs	r0, #0
 810a168:	6360      	str	r0, [r4, #52]	; 0x34
 810a16a:	e7c1      	b.n	810a0f0 <__sflush_r+0x1c>
 810a16c:	6a21      	ldr	r1, [r4, #32]
 810a16e:	2301      	movs	r3, #1
 810a170:	4628      	mov	r0, r5
 810a172:	47b0      	blx	r6
 810a174:	1c41      	adds	r1, r0, #1
 810a176:	d1c7      	bne.n	810a108 <__sflush_r+0x34>
 810a178:	682b      	ldr	r3, [r5, #0]
 810a17a:	2b00      	cmp	r3, #0
 810a17c:	d0c4      	beq.n	810a108 <__sflush_r+0x34>
 810a17e:	2b1d      	cmp	r3, #29
 810a180:	d001      	beq.n	810a186 <__sflush_r+0xb2>
 810a182:	2b16      	cmp	r3, #22
 810a184:	d101      	bne.n	810a18a <__sflush_r+0xb6>
 810a186:	602f      	str	r7, [r5, #0]
 810a188:	e7b1      	b.n	810a0ee <__sflush_r+0x1a>
 810a18a:	89a3      	ldrh	r3, [r4, #12]
 810a18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a190:	81a3      	strh	r3, [r4, #12]
 810a192:	e7ad      	b.n	810a0f0 <__sflush_r+0x1c>
 810a194:	690f      	ldr	r7, [r1, #16]
 810a196:	2f00      	cmp	r7, #0
 810a198:	d0a9      	beq.n	810a0ee <__sflush_r+0x1a>
 810a19a:	0793      	lsls	r3, r2, #30
 810a19c:	680e      	ldr	r6, [r1, #0]
 810a19e:	bf08      	it	eq
 810a1a0:	694b      	ldreq	r3, [r1, #20]
 810a1a2:	600f      	str	r7, [r1, #0]
 810a1a4:	bf18      	it	ne
 810a1a6:	2300      	movne	r3, #0
 810a1a8:	eba6 0807 	sub.w	r8, r6, r7
 810a1ac:	608b      	str	r3, [r1, #8]
 810a1ae:	f1b8 0f00 	cmp.w	r8, #0
 810a1b2:	dd9c      	ble.n	810a0ee <__sflush_r+0x1a>
 810a1b4:	6a21      	ldr	r1, [r4, #32]
 810a1b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a1b8:	4643      	mov	r3, r8
 810a1ba:	463a      	mov	r2, r7
 810a1bc:	4628      	mov	r0, r5
 810a1be:	47b0      	blx	r6
 810a1c0:	2800      	cmp	r0, #0
 810a1c2:	dc06      	bgt.n	810a1d2 <__sflush_r+0xfe>
 810a1c4:	89a3      	ldrh	r3, [r4, #12]
 810a1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1ca:	81a3      	strh	r3, [r4, #12]
 810a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 810a1d0:	e78e      	b.n	810a0f0 <__sflush_r+0x1c>
 810a1d2:	4407      	add	r7, r0
 810a1d4:	eba8 0800 	sub.w	r8, r8, r0
 810a1d8:	e7e9      	b.n	810a1ae <__sflush_r+0xda>
 810a1da:	bf00      	nop
 810a1dc:	20400001 	.word	0x20400001

0810a1e0 <_fflush_r>:
 810a1e0:	b538      	push	{r3, r4, r5, lr}
 810a1e2:	690b      	ldr	r3, [r1, #16]
 810a1e4:	4605      	mov	r5, r0
 810a1e6:	460c      	mov	r4, r1
 810a1e8:	b913      	cbnz	r3, 810a1f0 <_fflush_r+0x10>
 810a1ea:	2500      	movs	r5, #0
 810a1ec:	4628      	mov	r0, r5
 810a1ee:	bd38      	pop	{r3, r4, r5, pc}
 810a1f0:	b118      	cbz	r0, 810a1fa <_fflush_r+0x1a>
 810a1f2:	6983      	ldr	r3, [r0, #24]
 810a1f4:	b90b      	cbnz	r3, 810a1fa <_fflush_r+0x1a>
 810a1f6:	f000 f887 	bl	810a308 <__sinit>
 810a1fa:	4b14      	ldr	r3, [pc, #80]	; (810a24c <_fflush_r+0x6c>)
 810a1fc:	429c      	cmp	r4, r3
 810a1fe:	d11b      	bne.n	810a238 <_fflush_r+0x58>
 810a200:	686c      	ldr	r4, [r5, #4]
 810a202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a206:	2b00      	cmp	r3, #0
 810a208:	d0ef      	beq.n	810a1ea <_fflush_r+0xa>
 810a20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a20c:	07d0      	lsls	r0, r2, #31
 810a20e:	d404      	bmi.n	810a21a <_fflush_r+0x3a>
 810a210:	0599      	lsls	r1, r3, #22
 810a212:	d402      	bmi.n	810a21a <_fflush_r+0x3a>
 810a214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a216:	f000 f915 	bl	810a444 <__retarget_lock_acquire_recursive>
 810a21a:	4628      	mov	r0, r5
 810a21c:	4621      	mov	r1, r4
 810a21e:	f7ff ff59 	bl	810a0d4 <__sflush_r>
 810a222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a224:	07da      	lsls	r2, r3, #31
 810a226:	4605      	mov	r5, r0
 810a228:	d4e0      	bmi.n	810a1ec <_fflush_r+0xc>
 810a22a:	89a3      	ldrh	r3, [r4, #12]
 810a22c:	059b      	lsls	r3, r3, #22
 810a22e:	d4dd      	bmi.n	810a1ec <_fflush_r+0xc>
 810a230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a232:	f000 f908 	bl	810a446 <__retarget_lock_release_recursive>
 810a236:	e7d9      	b.n	810a1ec <_fflush_r+0xc>
 810a238:	4b05      	ldr	r3, [pc, #20]	; (810a250 <_fflush_r+0x70>)
 810a23a:	429c      	cmp	r4, r3
 810a23c:	d101      	bne.n	810a242 <_fflush_r+0x62>
 810a23e:	68ac      	ldr	r4, [r5, #8]
 810a240:	e7df      	b.n	810a202 <_fflush_r+0x22>
 810a242:	4b04      	ldr	r3, [pc, #16]	; (810a254 <_fflush_r+0x74>)
 810a244:	429c      	cmp	r4, r3
 810a246:	bf08      	it	eq
 810a248:	68ec      	ldreq	r4, [r5, #12]
 810a24a:	e7da      	b.n	810a202 <_fflush_r+0x22>
 810a24c:	0810aabc 	.word	0x0810aabc
 810a250:	0810aadc 	.word	0x0810aadc
 810a254:	0810aa9c 	.word	0x0810aa9c

0810a258 <std>:
 810a258:	2300      	movs	r3, #0
 810a25a:	b510      	push	{r4, lr}
 810a25c:	4604      	mov	r4, r0
 810a25e:	e9c0 3300 	strd	r3, r3, [r0]
 810a262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a266:	6083      	str	r3, [r0, #8]
 810a268:	8181      	strh	r1, [r0, #12]
 810a26a:	6643      	str	r3, [r0, #100]	; 0x64
 810a26c:	81c2      	strh	r2, [r0, #14]
 810a26e:	6183      	str	r3, [r0, #24]
 810a270:	4619      	mov	r1, r3
 810a272:	2208      	movs	r2, #8
 810a274:	305c      	adds	r0, #92	; 0x5c
 810a276:	f7fd fd6f 	bl	8107d58 <memset>
 810a27a:	4b05      	ldr	r3, [pc, #20]	; (810a290 <std+0x38>)
 810a27c:	6263      	str	r3, [r4, #36]	; 0x24
 810a27e:	4b05      	ldr	r3, [pc, #20]	; (810a294 <std+0x3c>)
 810a280:	62a3      	str	r3, [r4, #40]	; 0x28
 810a282:	4b05      	ldr	r3, [pc, #20]	; (810a298 <std+0x40>)
 810a284:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a286:	4b05      	ldr	r3, [pc, #20]	; (810a29c <std+0x44>)
 810a288:	6224      	str	r4, [r4, #32]
 810a28a:	6323      	str	r3, [r4, #48]	; 0x30
 810a28c:	bd10      	pop	{r4, pc}
 810a28e:	bf00      	nop
 810a290:	0810a599 	.word	0x0810a599
 810a294:	0810a5bb 	.word	0x0810a5bb
 810a298:	0810a5f3 	.word	0x0810a5f3
 810a29c:	0810a617 	.word	0x0810a617

0810a2a0 <_cleanup_r>:
 810a2a0:	4901      	ldr	r1, [pc, #4]	; (810a2a8 <_cleanup_r+0x8>)
 810a2a2:	f000 b8af 	b.w	810a404 <_fwalk_reent>
 810a2a6:	bf00      	nop
 810a2a8:	0810a1e1 	.word	0x0810a1e1

0810a2ac <__sfmoreglue>:
 810a2ac:	b570      	push	{r4, r5, r6, lr}
 810a2ae:	1e4a      	subs	r2, r1, #1
 810a2b0:	2568      	movs	r5, #104	; 0x68
 810a2b2:	4355      	muls	r5, r2
 810a2b4:	460e      	mov	r6, r1
 810a2b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810a2ba:	f7ff fc23 	bl	8109b04 <_malloc_r>
 810a2be:	4604      	mov	r4, r0
 810a2c0:	b140      	cbz	r0, 810a2d4 <__sfmoreglue+0x28>
 810a2c2:	2100      	movs	r1, #0
 810a2c4:	e9c0 1600 	strd	r1, r6, [r0]
 810a2c8:	300c      	adds	r0, #12
 810a2ca:	60a0      	str	r0, [r4, #8]
 810a2cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810a2d0:	f7fd fd42 	bl	8107d58 <memset>
 810a2d4:	4620      	mov	r0, r4
 810a2d6:	bd70      	pop	{r4, r5, r6, pc}

0810a2d8 <__sfp_lock_acquire>:
 810a2d8:	4801      	ldr	r0, [pc, #4]	; (810a2e0 <__sfp_lock_acquire+0x8>)
 810a2da:	f000 b8b3 	b.w	810a444 <__retarget_lock_acquire_recursive>
 810a2de:	bf00      	nop
 810a2e0:	100003a4 	.word	0x100003a4

0810a2e4 <__sfp_lock_release>:
 810a2e4:	4801      	ldr	r0, [pc, #4]	; (810a2ec <__sfp_lock_release+0x8>)
 810a2e6:	f000 b8ae 	b.w	810a446 <__retarget_lock_release_recursive>
 810a2ea:	bf00      	nop
 810a2ec:	100003a4 	.word	0x100003a4

0810a2f0 <__sinit_lock_acquire>:
 810a2f0:	4801      	ldr	r0, [pc, #4]	; (810a2f8 <__sinit_lock_acquire+0x8>)
 810a2f2:	f000 b8a7 	b.w	810a444 <__retarget_lock_acquire_recursive>
 810a2f6:	bf00      	nop
 810a2f8:	1000039f 	.word	0x1000039f

0810a2fc <__sinit_lock_release>:
 810a2fc:	4801      	ldr	r0, [pc, #4]	; (810a304 <__sinit_lock_release+0x8>)
 810a2fe:	f000 b8a2 	b.w	810a446 <__retarget_lock_release_recursive>
 810a302:	bf00      	nop
 810a304:	1000039f 	.word	0x1000039f

0810a308 <__sinit>:
 810a308:	b510      	push	{r4, lr}
 810a30a:	4604      	mov	r4, r0
 810a30c:	f7ff fff0 	bl	810a2f0 <__sinit_lock_acquire>
 810a310:	69a3      	ldr	r3, [r4, #24]
 810a312:	b11b      	cbz	r3, 810a31c <__sinit+0x14>
 810a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a318:	f7ff bff0 	b.w	810a2fc <__sinit_lock_release>
 810a31c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810a320:	6523      	str	r3, [r4, #80]	; 0x50
 810a322:	4b13      	ldr	r3, [pc, #76]	; (810a370 <__sinit+0x68>)
 810a324:	4a13      	ldr	r2, [pc, #76]	; (810a374 <__sinit+0x6c>)
 810a326:	681b      	ldr	r3, [r3, #0]
 810a328:	62a2      	str	r2, [r4, #40]	; 0x28
 810a32a:	42a3      	cmp	r3, r4
 810a32c:	bf04      	itt	eq
 810a32e:	2301      	moveq	r3, #1
 810a330:	61a3      	streq	r3, [r4, #24]
 810a332:	4620      	mov	r0, r4
 810a334:	f000 f820 	bl	810a378 <__sfp>
 810a338:	6060      	str	r0, [r4, #4]
 810a33a:	4620      	mov	r0, r4
 810a33c:	f000 f81c 	bl	810a378 <__sfp>
 810a340:	60a0      	str	r0, [r4, #8]
 810a342:	4620      	mov	r0, r4
 810a344:	f000 f818 	bl	810a378 <__sfp>
 810a348:	2200      	movs	r2, #0
 810a34a:	60e0      	str	r0, [r4, #12]
 810a34c:	2104      	movs	r1, #4
 810a34e:	6860      	ldr	r0, [r4, #4]
 810a350:	f7ff ff82 	bl	810a258 <std>
 810a354:	68a0      	ldr	r0, [r4, #8]
 810a356:	2201      	movs	r2, #1
 810a358:	2109      	movs	r1, #9
 810a35a:	f7ff ff7d 	bl	810a258 <std>
 810a35e:	68e0      	ldr	r0, [r4, #12]
 810a360:	2202      	movs	r2, #2
 810a362:	2112      	movs	r1, #18
 810a364:	f7ff ff78 	bl	810a258 <std>
 810a368:	2301      	movs	r3, #1
 810a36a:	61a3      	str	r3, [r4, #24]
 810a36c:	e7d2      	b.n	810a314 <__sinit+0xc>
 810a36e:	bf00      	nop
 810a370:	0810a718 	.word	0x0810a718
 810a374:	0810a2a1 	.word	0x0810a2a1

0810a378 <__sfp>:
 810a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a37a:	4607      	mov	r7, r0
 810a37c:	f7ff ffac 	bl	810a2d8 <__sfp_lock_acquire>
 810a380:	4b1e      	ldr	r3, [pc, #120]	; (810a3fc <__sfp+0x84>)
 810a382:	681e      	ldr	r6, [r3, #0]
 810a384:	69b3      	ldr	r3, [r6, #24]
 810a386:	b913      	cbnz	r3, 810a38e <__sfp+0x16>
 810a388:	4630      	mov	r0, r6
 810a38a:	f7ff ffbd 	bl	810a308 <__sinit>
 810a38e:	3648      	adds	r6, #72	; 0x48
 810a390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810a394:	3b01      	subs	r3, #1
 810a396:	d503      	bpl.n	810a3a0 <__sfp+0x28>
 810a398:	6833      	ldr	r3, [r6, #0]
 810a39a:	b30b      	cbz	r3, 810a3e0 <__sfp+0x68>
 810a39c:	6836      	ldr	r6, [r6, #0]
 810a39e:	e7f7      	b.n	810a390 <__sfp+0x18>
 810a3a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810a3a4:	b9d5      	cbnz	r5, 810a3dc <__sfp+0x64>
 810a3a6:	4b16      	ldr	r3, [pc, #88]	; (810a400 <__sfp+0x88>)
 810a3a8:	60e3      	str	r3, [r4, #12]
 810a3aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a3ae:	6665      	str	r5, [r4, #100]	; 0x64
 810a3b0:	f000 f847 	bl	810a442 <__retarget_lock_init_recursive>
 810a3b4:	f7ff ff96 	bl	810a2e4 <__sfp_lock_release>
 810a3b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810a3bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810a3c0:	6025      	str	r5, [r4, #0]
 810a3c2:	61a5      	str	r5, [r4, #24]
 810a3c4:	2208      	movs	r2, #8
 810a3c6:	4629      	mov	r1, r5
 810a3c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810a3cc:	f7fd fcc4 	bl	8107d58 <memset>
 810a3d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810a3d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810a3d8:	4620      	mov	r0, r4
 810a3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a3dc:	3468      	adds	r4, #104	; 0x68
 810a3de:	e7d9      	b.n	810a394 <__sfp+0x1c>
 810a3e0:	2104      	movs	r1, #4
 810a3e2:	4638      	mov	r0, r7
 810a3e4:	f7ff ff62 	bl	810a2ac <__sfmoreglue>
 810a3e8:	4604      	mov	r4, r0
 810a3ea:	6030      	str	r0, [r6, #0]
 810a3ec:	2800      	cmp	r0, #0
 810a3ee:	d1d5      	bne.n	810a39c <__sfp+0x24>
 810a3f0:	f7ff ff78 	bl	810a2e4 <__sfp_lock_release>
 810a3f4:	230c      	movs	r3, #12
 810a3f6:	603b      	str	r3, [r7, #0]
 810a3f8:	e7ee      	b.n	810a3d8 <__sfp+0x60>
 810a3fa:	bf00      	nop
 810a3fc:	0810a718 	.word	0x0810a718
 810a400:	ffff0001 	.word	0xffff0001

0810a404 <_fwalk_reent>:
 810a404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a408:	4606      	mov	r6, r0
 810a40a:	4688      	mov	r8, r1
 810a40c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810a410:	2700      	movs	r7, #0
 810a412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a416:	f1b9 0901 	subs.w	r9, r9, #1
 810a41a:	d505      	bpl.n	810a428 <_fwalk_reent+0x24>
 810a41c:	6824      	ldr	r4, [r4, #0]
 810a41e:	2c00      	cmp	r4, #0
 810a420:	d1f7      	bne.n	810a412 <_fwalk_reent+0xe>
 810a422:	4638      	mov	r0, r7
 810a424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a428:	89ab      	ldrh	r3, [r5, #12]
 810a42a:	2b01      	cmp	r3, #1
 810a42c:	d907      	bls.n	810a43e <_fwalk_reent+0x3a>
 810a42e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a432:	3301      	adds	r3, #1
 810a434:	d003      	beq.n	810a43e <_fwalk_reent+0x3a>
 810a436:	4629      	mov	r1, r5
 810a438:	4630      	mov	r0, r6
 810a43a:	47c0      	blx	r8
 810a43c:	4307      	orrs	r7, r0
 810a43e:	3568      	adds	r5, #104	; 0x68
 810a440:	e7e9      	b.n	810a416 <_fwalk_reent+0x12>

0810a442 <__retarget_lock_init_recursive>:
 810a442:	4770      	bx	lr

0810a444 <__retarget_lock_acquire_recursive>:
 810a444:	4770      	bx	lr

0810a446 <__retarget_lock_release_recursive>:
 810a446:	4770      	bx	lr

0810a448 <__swhatbuf_r>:
 810a448:	b570      	push	{r4, r5, r6, lr}
 810a44a:	460e      	mov	r6, r1
 810a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a450:	2900      	cmp	r1, #0
 810a452:	b096      	sub	sp, #88	; 0x58
 810a454:	4614      	mov	r4, r2
 810a456:	461d      	mov	r5, r3
 810a458:	da07      	bge.n	810a46a <__swhatbuf_r+0x22>
 810a45a:	2300      	movs	r3, #0
 810a45c:	602b      	str	r3, [r5, #0]
 810a45e:	89b3      	ldrh	r3, [r6, #12]
 810a460:	061a      	lsls	r2, r3, #24
 810a462:	d410      	bmi.n	810a486 <__swhatbuf_r+0x3e>
 810a464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a468:	e00e      	b.n	810a488 <__swhatbuf_r+0x40>
 810a46a:	466a      	mov	r2, sp
 810a46c:	f000 f8fa 	bl	810a664 <_fstat_r>
 810a470:	2800      	cmp	r0, #0
 810a472:	dbf2      	blt.n	810a45a <__swhatbuf_r+0x12>
 810a474:	9a01      	ldr	r2, [sp, #4]
 810a476:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a47a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a47e:	425a      	negs	r2, r3
 810a480:	415a      	adcs	r2, r3
 810a482:	602a      	str	r2, [r5, #0]
 810a484:	e7ee      	b.n	810a464 <__swhatbuf_r+0x1c>
 810a486:	2340      	movs	r3, #64	; 0x40
 810a488:	2000      	movs	r0, #0
 810a48a:	6023      	str	r3, [r4, #0]
 810a48c:	b016      	add	sp, #88	; 0x58
 810a48e:	bd70      	pop	{r4, r5, r6, pc}

0810a490 <__smakebuf_r>:
 810a490:	898b      	ldrh	r3, [r1, #12]
 810a492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a494:	079d      	lsls	r5, r3, #30
 810a496:	4606      	mov	r6, r0
 810a498:	460c      	mov	r4, r1
 810a49a:	d507      	bpl.n	810a4ac <__smakebuf_r+0x1c>
 810a49c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a4a0:	6023      	str	r3, [r4, #0]
 810a4a2:	6123      	str	r3, [r4, #16]
 810a4a4:	2301      	movs	r3, #1
 810a4a6:	6163      	str	r3, [r4, #20]
 810a4a8:	b002      	add	sp, #8
 810a4aa:	bd70      	pop	{r4, r5, r6, pc}
 810a4ac:	ab01      	add	r3, sp, #4
 810a4ae:	466a      	mov	r2, sp
 810a4b0:	f7ff ffca 	bl	810a448 <__swhatbuf_r>
 810a4b4:	9900      	ldr	r1, [sp, #0]
 810a4b6:	4605      	mov	r5, r0
 810a4b8:	4630      	mov	r0, r6
 810a4ba:	f7ff fb23 	bl	8109b04 <_malloc_r>
 810a4be:	b948      	cbnz	r0, 810a4d4 <__smakebuf_r+0x44>
 810a4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a4c4:	059a      	lsls	r2, r3, #22
 810a4c6:	d4ef      	bmi.n	810a4a8 <__smakebuf_r+0x18>
 810a4c8:	f023 0303 	bic.w	r3, r3, #3
 810a4cc:	f043 0302 	orr.w	r3, r3, #2
 810a4d0:	81a3      	strh	r3, [r4, #12]
 810a4d2:	e7e3      	b.n	810a49c <__smakebuf_r+0xc>
 810a4d4:	4b0d      	ldr	r3, [pc, #52]	; (810a50c <__smakebuf_r+0x7c>)
 810a4d6:	62b3      	str	r3, [r6, #40]	; 0x28
 810a4d8:	89a3      	ldrh	r3, [r4, #12]
 810a4da:	6020      	str	r0, [r4, #0]
 810a4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a4e0:	81a3      	strh	r3, [r4, #12]
 810a4e2:	9b00      	ldr	r3, [sp, #0]
 810a4e4:	6163      	str	r3, [r4, #20]
 810a4e6:	9b01      	ldr	r3, [sp, #4]
 810a4e8:	6120      	str	r0, [r4, #16]
 810a4ea:	b15b      	cbz	r3, 810a504 <__smakebuf_r+0x74>
 810a4ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a4f0:	4630      	mov	r0, r6
 810a4f2:	f000 f8c9 	bl	810a688 <_isatty_r>
 810a4f6:	b128      	cbz	r0, 810a504 <__smakebuf_r+0x74>
 810a4f8:	89a3      	ldrh	r3, [r4, #12]
 810a4fa:	f023 0303 	bic.w	r3, r3, #3
 810a4fe:	f043 0301 	orr.w	r3, r3, #1
 810a502:	81a3      	strh	r3, [r4, #12]
 810a504:	89a0      	ldrh	r0, [r4, #12]
 810a506:	4305      	orrs	r5, r0
 810a508:	81a5      	strh	r5, [r4, #12]
 810a50a:	e7cd      	b.n	810a4a8 <__smakebuf_r+0x18>
 810a50c:	0810a2a1 	.word	0x0810a2a1

0810a510 <_raise_r>:
 810a510:	291f      	cmp	r1, #31
 810a512:	b538      	push	{r3, r4, r5, lr}
 810a514:	4604      	mov	r4, r0
 810a516:	460d      	mov	r5, r1
 810a518:	d904      	bls.n	810a524 <_raise_r+0x14>
 810a51a:	2316      	movs	r3, #22
 810a51c:	6003      	str	r3, [r0, #0]
 810a51e:	f04f 30ff 	mov.w	r0, #4294967295
 810a522:	bd38      	pop	{r3, r4, r5, pc}
 810a524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810a526:	b112      	cbz	r2, 810a52e <_raise_r+0x1e>
 810a528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810a52c:	b94b      	cbnz	r3, 810a542 <_raise_r+0x32>
 810a52e:	4620      	mov	r0, r4
 810a530:	f000 f830 	bl	810a594 <_getpid_r>
 810a534:	462a      	mov	r2, r5
 810a536:	4601      	mov	r1, r0
 810a538:	4620      	mov	r0, r4
 810a53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810a53e:	f000 b817 	b.w	810a570 <_kill_r>
 810a542:	2b01      	cmp	r3, #1
 810a544:	d00a      	beq.n	810a55c <_raise_r+0x4c>
 810a546:	1c59      	adds	r1, r3, #1
 810a548:	d103      	bne.n	810a552 <_raise_r+0x42>
 810a54a:	2316      	movs	r3, #22
 810a54c:	6003      	str	r3, [r0, #0]
 810a54e:	2001      	movs	r0, #1
 810a550:	e7e7      	b.n	810a522 <_raise_r+0x12>
 810a552:	2400      	movs	r4, #0
 810a554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810a558:	4628      	mov	r0, r5
 810a55a:	4798      	blx	r3
 810a55c:	2000      	movs	r0, #0
 810a55e:	e7e0      	b.n	810a522 <_raise_r+0x12>

0810a560 <raise>:
 810a560:	4b02      	ldr	r3, [pc, #8]	; (810a56c <raise+0xc>)
 810a562:	4601      	mov	r1, r0
 810a564:	6818      	ldr	r0, [r3, #0]
 810a566:	f7ff bfd3 	b.w	810a510 <_raise_r>
 810a56a:	bf00      	nop
 810a56c:	10000010 	.word	0x10000010

0810a570 <_kill_r>:
 810a570:	b538      	push	{r3, r4, r5, lr}
 810a572:	4d07      	ldr	r5, [pc, #28]	; (810a590 <_kill_r+0x20>)
 810a574:	2300      	movs	r3, #0
 810a576:	4604      	mov	r4, r0
 810a578:	4608      	mov	r0, r1
 810a57a:	4611      	mov	r1, r2
 810a57c:	602b      	str	r3, [r5, #0]
 810a57e:	f7f7 fbe3 	bl	8101d48 <_kill>
 810a582:	1c43      	adds	r3, r0, #1
 810a584:	d102      	bne.n	810a58c <_kill_r+0x1c>
 810a586:	682b      	ldr	r3, [r5, #0]
 810a588:	b103      	cbz	r3, 810a58c <_kill_r+0x1c>
 810a58a:	6023      	str	r3, [r4, #0]
 810a58c:	bd38      	pop	{r3, r4, r5, pc}
 810a58e:	bf00      	nop
 810a590:	10000398 	.word	0x10000398

0810a594 <_getpid_r>:
 810a594:	f7f7 bbd0 	b.w	8101d38 <_getpid>

0810a598 <__sread>:
 810a598:	b510      	push	{r4, lr}
 810a59a:	460c      	mov	r4, r1
 810a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a5a0:	f000 f894 	bl	810a6cc <_read_r>
 810a5a4:	2800      	cmp	r0, #0
 810a5a6:	bfab      	itete	ge
 810a5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810a5aa:	89a3      	ldrhlt	r3, [r4, #12]
 810a5ac:	181b      	addge	r3, r3, r0
 810a5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810a5b2:	bfac      	ite	ge
 810a5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 810a5b6:	81a3      	strhlt	r3, [r4, #12]
 810a5b8:	bd10      	pop	{r4, pc}

0810a5ba <__swrite>:
 810a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a5be:	461f      	mov	r7, r3
 810a5c0:	898b      	ldrh	r3, [r1, #12]
 810a5c2:	05db      	lsls	r3, r3, #23
 810a5c4:	4605      	mov	r5, r0
 810a5c6:	460c      	mov	r4, r1
 810a5c8:	4616      	mov	r6, r2
 810a5ca:	d505      	bpl.n	810a5d8 <__swrite+0x1e>
 810a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a5d0:	2302      	movs	r3, #2
 810a5d2:	2200      	movs	r2, #0
 810a5d4:	f000 f868 	bl	810a6a8 <_lseek_r>
 810a5d8:	89a3      	ldrh	r3, [r4, #12]
 810a5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810a5e2:	81a3      	strh	r3, [r4, #12]
 810a5e4:	4632      	mov	r2, r6
 810a5e6:	463b      	mov	r3, r7
 810a5e8:	4628      	mov	r0, r5
 810a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a5ee:	f000 b817 	b.w	810a620 <_write_r>

0810a5f2 <__sseek>:
 810a5f2:	b510      	push	{r4, lr}
 810a5f4:	460c      	mov	r4, r1
 810a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a5fa:	f000 f855 	bl	810a6a8 <_lseek_r>
 810a5fe:	1c43      	adds	r3, r0, #1
 810a600:	89a3      	ldrh	r3, [r4, #12]
 810a602:	bf15      	itete	ne
 810a604:	6560      	strne	r0, [r4, #84]	; 0x54
 810a606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810a60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810a60e:	81a3      	strheq	r3, [r4, #12]
 810a610:	bf18      	it	ne
 810a612:	81a3      	strhne	r3, [r4, #12]
 810a614:	bd10      	pop	{r4, pc}

0810a616 <__sclose>:
 810a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a61a:	f000 b813 	b.w	810a644 <_close_r>
	...

0810a620 <_write_r>:
 810a620:	b538      	push	{r3, r4, r5, lr}
 810a622:	4d07      	ldr	r5, [pc, #28]	; (810a640 <_write_r+0x20>)
 810a624:	4604      	mov	r4, r0
 810a626:	4608      	mov	r0, r1
 810a628:	4611      	mov	r1, r2
 810a62a:	2200      	movs	r2, #0
 810a62c:	602a      	str	r2, [r5, #0]
 810a62e:	461a      	mov	r2, r3
 810a630:	f7f7 fbc1 	bl	8101db6 <_write>
 810a634:	1c43      	adds	r3, r0, #1
 810a636:	d102      	bne.n	810a63e <_write_r+0x1e>
 810a638:	682b      	ldr	r3, [r5, #0]
 810a63a:	b103      	cbz	r3, 810a63e <_write_r+0x1e>
 810a63c:	6023      	str	r3, [r4, #0]
 810a63e:	bd38      	pop	{r3, r4, r5, pc}
 810a640:	10000398 	.word	0x10000398

0810a644 <_close_r>:
 810a644:	b538      	push	{r3, r4, r5, lr}
 810a646:	4d06      	ldr	r5, [pc, #24]	; (810a660 <_close_r+0x1c>)
 810a648:	2300      	movs	r3, #0
 810a64a:	4604      	mov	r4, r0
 810a64c:	4608      	mov	r0, r1
 810a64e:	602b      	str	r3, [r5, #0]
 810a650:	f7f7 fbcd 	bl	8101dee <_close>
 810a654:	1c43      	adds	r3, r0, #1
 810a656:	d102      	bne.n	810a65e <_close_r+0x1a>
 810a658:	682b      	ldr	r3, [r5, #0]
 810a65a:	b103      	cbz	r3, 810a65e <_close_r+0x1a>
 810a65c:	6023      	str	r3, [r4, #0]
 810a65e:	bd38      	pop	{r3, r4, r5, pc}
 810a660:	10000398 	.word	0x10000398

0810a664 <_fstat_r>:
 810a664:	b538      	push	{r3, r4, r5, lr}
 810a666:	4d07      	ldr	r5, [pc, #28]	; (810a684 <_fstat_r+0x20>)
 810a668:	2300      	movs	r3, #0
 810a66a:	4604      	mov	r4, r0
 810a66c:	4608      	mov	r0, r1
 810a66e:	4611      	mov	r1, r2
 810a670:	602b      	str	r3, [r5, #0]
 810a672:	f7f7 fbc8 	bl	8101e06 <_fstat>
 810a676:	1c43      	adds	r3, r0, #1
 810a678:	d102      	bne.n	810a680 <_fstat_r+0x1c>
 810a67a:	682b      	ldr	r3, [r5, #0]
 810a67c:	b103      	cbz	r3, 810a680 <_fstat_r+0x1c>
 810a67e:	6023      	str	r3, [r4, #0]
 810a680:	bd38      	pop	{r3, r4, r5, pc}
 810a682:	bf00      	nop
 810a684:	10000398 	.word	0x10000398

0810a688 <_isatty_r>:
 810a688:	b538      	push	{r3, r4, r5, lr}
 810a68a:	4d06      	ldr	r5, [pc, #24]	; (810a6a4 <_isatty_r+0x1c>)
 810a68c:	2300      	movs	r3, #0
 810a68e:	4604      	mov	r4, r0
 810a690:	4608      	mov	r0, r1
 810a692:	602b      	str	r3, [r5, #0]
 810a694:	f7f7 fbc7 	bl	8101e26 <_isatty>
 810a698:	1c43      	adds	r3, r0, #1
 810a69a:	d102      	bne.n	810a6a2 <_isatty_r+0x1a>
 810a69c:	682b      	ldr	r3, [r5, #0]
 810a69e:	b103      	cbz	r3, 810a6a2 <_isatty_r+0x1a>
 810a6a0:	6023      	str	r3, [r4, #0]
 810a6a2:	bd38      	pop	{r3, r4, r5, pc}
 810a6a4:	10000398 	.word	0x10000398

0810a6a8 <_lseek_r>:
 810a6a8:	b538      	push	{r3, r4, r5, lr}
 810a6aa:	4d07      	ldr	r5, [pc, #28]	; (810a6c8 <_lseek_r+0x20>)
 810a6ac:	4604      	mov	r4, r0
 810a6ae:	4608      	mov	r0, r1
 810a6b0:	4611      	mov	r1, r2
 810a6b2:	2200      	movs	r2, #0
 810a6b4:	602a      	str	r2, [r5, #0]
 810a6b6:	461a      	mov	r2, r3
 810a6b8:	f7f7 fbc0 	bl	8101e3c <_lseek>
 810a6bc:	1c43      	adds	r3, r0, #1
 810a6be:	d102      	bne.n	810a6c6 <_lseek_r+0x1e>
 810a6c0:	682b      	ldr	r3, [r5, #0]
 810a6c2:	b103      	cbz	r3, 810a6c6 <_lseek_r+0x1e>
 810a6c4:	6023      	str	r3, [r4, #0]
 810a6c6:	bd38      	pop	{r3, r4, r5, pc}
 810a6c8:	10000398 	.word	0x10000398

0810a6cc <_read_r>:
 810a6cc:	b538      	push	{r3, r4, r5, lr}
 810a6ce:	4d07      	ldr	r5, [pc, #28]	; (810a6ec <_read_r+0x20>)
 810a6d0:	4604      	mov	r4, r0
 810a6d2:	4608      	mov	r0, r1
 810a6d4:	4611      	mov	r1, r2
 810a6d6:	2200      	movs	r2, #0
 810a6d8:	602a      	str	r2, [r5, #0]
 810a6da:	461a      	mov	r2, r3
 810a6dc:	f7f7 fb4e 	bl	8101d7c <_read>
 810a6e0:	1c43      	adds	r3, r0, #1
 810a6e2:	d102      	bne.n	810a6ea <_read_r+0x1e>
 810a6e4:	682b      	ldr	r3, [r5, #0]
 810a6e6:	b103      	cbz	r3, 810a6ea <_read_r+0x1e>
 810a6e8:	6023      	str	r3, [r4, #0]
 810a6ea:	bd38      	pop	{r3, r4, r5, pc}
 810a6ec:	10000398 	.word	0x10000398

0810a6f0 <_init>:
 810a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a6f2:	bf00      	nop
 810a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a6f6:	bc08      	pop	{r3}
 810a6f8:	469e      	mov	lr, r3
 810a6fa:	4770      	bx	lr

0810a6fc <_fini>:
 810a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a6fe:	bf00      	nop
 810a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a702:	bc08      	pop	{r3}
 810a704:	469e      	mov	lr, r3
 810a706:	4770      	bx	lr
